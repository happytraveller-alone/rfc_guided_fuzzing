Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 13
// Total lines: 156

//----- (0000000180001BCC) ----------------------------------------------------
__int64 __fastcall VerifyEcdsaParams(
        struct CSsl3TlsClientContext *a1,
        unsigned __int8 *a2,
        unsigned int a3,
        enum _eTlsHashAlgorithm a4,
        unsigned __int8 *pbEncoded,
        DWORD cbEncoded)
{
  struct _RTL_RESOURCE *v7; // rcx
  char *v9; // r14
  const void **v10; // rdi
  BOOL v11; // eax
  struct _RTL_RESOURCE *v12; // rcx
  DWORD LastError; // eax
  DWORD v14; // ebx
  unsigned int v15; // ebx
  enum _eTlsHashAlgorithm v16; // ecx
  NTSTATUS v17; // eax
  NTSTATUS v18; // eax
  unsigned __int8 v20; // r9
  int v21; // r8d
  int v22; // edx
  BCRYPT_KEY_HANDLE *phKey; // [rsp+20h] [rbp-89h]
  __int64 dwFlags; // [rsp+28h] [rbp-81h]
  DWORD cbSignature; // [rsp+40h] [rbp-69h] BYREF
  UCHAR pbOutput[4]; // [rsp+44h] [rbp-65h] BYREF
  ULONG cbHash; // [rsp+48h] [rbp-61h] BYREF
  BCRYPT_KEY_HANDLE hObject; // [rsp+50h] [rbp-59h] BYREF
  ULONG pcbResult; // [rsp+58h] [rbp-51h] BYREF
  unsigned int v30; // [rsp+5Ch] [rbp-4Dh]
  unsigned __int8 *v31; // [rsp+60h] [rbp-49h]
  UCHAR pbHash[64]; // [rsp+70h] [rbp-39h] BYREF

  v31 = a2;
  v7 = (struct _RTL_RESOURCE *)(*((_QWORD *)a1 + 11) + 72i64);
  v30 = a3;
  cbHash = 0;
  hObject = 0i64;
  v9 = 0i64;
  pcbResult = 0;
  v10 = 0i64;
  *(_DWORD *)pbOutput = 0;
  cbSignature = 0;
  RtlAcquireResourceShared(v7, 1u);
  v11 = CryptImportPublicKeyInfoEx2(
          **(_DWORD **)(*((_QWORD *)a1 + 11) + 48i64),
          (PCERT_PUBLIC_KEY_INFO)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 11) + 48i64) + 24i64) + 96i64),
          0x80000000,
          0i64,
          &hObject);
  v12 = (struct _RTL_RESOURCE *)(*((_QWORD *)a1 + 11) + 72i64);
  if ( !v11 )
  {
    RtlReleaseResource(v12);
    LastError = GetLastError();
    v14 = LastError;
    v20 = 43;
LABEL_22:
    v21 = LastError;
    v22 = 1107;
    goto LABEL_34;
  }
  RtlReleaseResource(v12);
  LastError = BCryptGetProperty(hObject, L"KeyLength", pbOutput, 4u, &pcbResult, 0);
  v14 = LastError;
  if ( LastError )
  {
    v20 = 80;
    goto LABEL_22;
  }
  v15 = (*(_DWORD *)pbOutput >> 3) + ((pbOutput[0] & 7) != 0);
  v9 = (char *)SPExternalAlloc(2 * v15);
  if ( !v9 )
  {
    v14 = 14;
    goto LABEL_13;
  }
  if ( CryptDecodeObject(1u, (LPCSTR)0x2F, pbEncoded, cbEncoded, 0, 0i64, &cbSignature) )
  {
    v10 = (const void **)SPExternalAlloc(cbSignature);
    if ( !v10 )
    {
      v14 = -2146893056;
      goto LABEL_13;
    }
    if ( !CryptDecodeObject(1u, (LPCSTR)0x2F, pbEncoded, cbEncoded, 0, v10, &cbSignature) )
    {
      v14 = GetLastError();
      goto LABEL_13;
    }
    if ( *(_DWORD *)v10 <= v15 && *((_DWORD *)v10 + 4) <= v15 )
    {
      memcpy_0(v9, v10[1], *(unsigned int *)v10);
      memcpy_0(&v9[v15], v10[3], *((unsigned int *)v10 + 4));
      cbSignature = 2 * v15;
      ReverseInPlace((unsigned __int8 *)v9, v15);
      ReverseInPlace((unsigned __int8 *)&v9[(unsigned __int64)cbSignature >> 1], cbSignature >> 1);
      v16 = TlsHashAlgorithm_Sha1;
      if ( a4 )
        v16 = a4;
      v17 = GenerateTlsHash(v16, (UCHAR *)a1, v31, v30, pbHash, &cbHash);
      v14 = v17;
      if ( v17 )
      {
        v20 = 80;
        v21 = v17;
        v22 = 1109;
      }
      else
      {
        v18 = BCryptVerifySignature(hObject, 0i64, pbHash, cbHash, (PUCHAR)v9, cbSignature, 0);
        v14 = v18;
        if ( !v18 )
          goto LABEL_13;
        v20 = 51;
        v21 = v18;
        v22 = 1110;
      }
      goto LABEL_34;
    }
    if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) != 0 )
    {
      LODWORD(dwFlags) = v15;
      LODWORD(phKey) = *((_DWORD *)v10 + 4);
      WPP_SF_DDD(
        *((_QWORD *)WPP_GLOBAL_Control + 2),
        0xAu,
        (__int64)&WPP_3e0ca11e9b65363ec3903422d835754d_Traceguids,
        *(_DWORD *)v10,
        phKey,
        dwFlags);
    }
    v14 = 13;
    v21 = 13;
  }
  else
  {
    v14 = GetLastError();
    v21 = v14;
  }
  v22 = 1108;
  v20 = 50;
LABEL_34:
  CSslContext::SetErrorAndFatalAlert((__int64)a1, v22, v21, v20);
LABEL_13:
  if ( hObject )
    BCryptDestroyKey(hObject);
  if ( v9 )
    SPExternalFree(v9);
  if ( v10 )
    SPExternalFree(v10);
  return v14;
}
// 18002BF6A: variable 'phKey' is possibly undefined
// 18002BF6A: variable 'dwFlags' is possibly undefined
