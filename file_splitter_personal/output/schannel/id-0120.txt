Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 120
// Total lines: 159

//----- (0000000180009F90) ----------------------------------------------------
__int64 __fastcall CSslContextManager::InstantiateClientContext(
        CSslContextManager *this,
        const unsigned __int16 *a2,
        struct CCredentialGroup *a3,
        struct CSslParentContext **a4,
        __int64 a5)
{
  CSessionCacheManager *v5; // rbx
  unsigned __int16 *v8; // rdi
  unsigned int v9; // eax
  __int64 v10; // r8
  struct CSessionCacheItem *v11; // rsi
  char v12; // r15
  CCipherMill *v13; // rcx
  unsigned int v14; // ebx
  __int64 v15; // rcx
  int v16; // ebx
  unsigned __int64 v17; // r12
  __int64 v18; // rbp
  unsigned int v19; // ebp
  wchar_t *v20; // rax
  CSsl3TlsClientContext *v21; // rax
  CTls13ClientContext *v22; // rax
  CTls13ClientContext *v23; // rdi
  unsigned int v24; // esi
  _QWORD *v25; // rax
  int v26; // ecx
  struct CSslParentContext **v27; // rax
  struct CSslParentContext *v28; // r8
  const char *v30; // rax
  unsigned __int8 *v31; // rax
  CTls13ClientContext *v32; // rbp
  struct CTlsRecord *Record; // rax
  void *v34; // rcx
  struct CSessionCacheItem *v35; // [rsp+60h] [rbp+8h] BYREF
  struct CSslParentContext **v36; // [rsp+78h] [rbp+20h]

  v36 = a4;
  v35 = this;
  v5 = CSessionCacheManager::m_pSessionCacheManager;
  v8 = 0i64;
  v9 = CSessionCacheManager::ComputeClientCacheIndex(CSessionCacheManager::m_pSessionCacheManager, a2);
  if ( CSessionCacheTable::LookupCacheByName(
         (CSessionCacheTable *)(*((_QWORD *)v5 + 5) + 152i64 * (v9 / *((_DWORD *)v5 + 13))),
         v9 % *((_DWORD *)v5 + 13),
         a2,
         a3,
         &v35) )
  {
    v11 = v35;
    v12 = 1;
  }
  else
  {
    v11 = 0i64;
    v35 = 0i64;
    v12 = 0;
  }
  v13 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
  {
    v30 = "FOUND";
    if ( !v12 )
      v30 = "NO ENTRY";
    WPP_SF_Ss(*((_QWORD *)WPP_GLOBAL_Control + 2), (__int64)"NO ENTRY", v10, a2, v30);
  }
  if ( !v12 )
  {
    CSessionCacheManager::AcquireCacheTableLock((__int64)v13, a2, 0i64);
    v14 = CSessionCacheManager::CacheRetrieveNewClientItem(CSessionCacheManager::m_pSessionCacheManager, a2, &v35);
    CSessionCacheManager::ReleaseCacheTableLock(v15, a2, 0i64);
    if ( v14 )
      return v14;
    v11 = v35;
  }
  v16 = *((_DWORD *)a3 + 38) & 0x800A2AAA;
  v17 = a5 & 0x100000000i64;
  if ( (a5 & 0x100000000i64) != 0 && (*((_DWORD *)a3 + 38) & 0x800A0AAA) != 0 )
    return 2148074333i64;
  if ( (*((_DWORD *)a3 + 38) & 0xA2AA0) == 0 )
    return 2148074289i64;
  if ( a2 )
  {
    v18 = -1i64;
    do
      ++v18;
    while ( a2[v18] );
    v19 = v18 + 1;
    v20 = (wchar_t *)SPExternalAlloc(2 * v19);
    v8 = v20;
    if ( !v20 )
      return 14i64;
    wcscpy_s(v20, v19, a2);
  }
  if ( (v16 & 0x2AA0) != 0 && (v16 & 0xA0000) != 0 )
  {
    if ( (a5 & 0x400) != 0 )
      v16 &= 0xF0000u;
    else
      v16 &= 0xFFF0FFFF;
  }
  if ( v12 && (*((_DWORD *)v11 + 42) & 0x2000) == 0 )
    v16 &= 0xFFFFCFFF;
  if ( (v16 & 0x2000) != 0 )
  {
    v31 = (unsigned __int8 *)SPExternalAlloc(v17 != 0 ? 1936 : 1952);
    v32 = (CTls13ClientContext *)v31;
    if ( v31 )
    {
      Record = CTlsRecord::MakeRecord(a5, v31 + 1856, (struct CSsl3TlsContext *)v31);
      if ( Record )
      {
        v22 = CTls13ClientContext::CTls13ClientContext(v32, Record, v11, v16, v8);
        goto LABEL_20;
      }
      if ( v8 )
        SPExternalFree(v8);
      v34 = v32;
      goto LABEL_40;
    }
LABEL_43:
    if ( !v8 )
      return 14i64;
    v34 = v8;
LABEL_40:
    SPExternalFree(v34);
    return 14i64;
  }
  v21 = (CSsl3TlsClientContext *)SPExternalAlloc(0x558u);
  if ( !v21 )
    goto LABEL_43;
  v22 = CSsl3TlsClientContext::CSsl3TlsClientContext(v21, v11, v16, v8);
LABEL_20:
  v23 = v22;
  v24 = (*(__int64 (__fastcall **)(CTls13ClientContext *))(*(_QWORD *)v22 + 184i64))(v22);
  if ( !v24 )
  {
    v25 = SPExternalAlloc(0x28u);
    if ( v25 )
    {
      v25[1] = v23;
      *((_QWORD *)v23 + 16) = v25;
      v26 = (unsigned __int16)ConvertSchannelProtocolToSsl(v16);
      v27 = v36;
      *((_DWORD *)v23 + 9) = v26;
      *v27 = v28;
      return 0i64;
    }
    (**(void (__fastcall ***)(void *, _QWORD))v23)(v23, 0i64);
    v24 = 14;
  }
  SPExternalFree(v23);
  return v24;
}
// 18000A02C: variable 'v13' is possibly undefined
// 18000A04D: variable 'v15' is possibly undefined
// 18000A17D: variable 'v28' is possibly undefined
// 180034E7F: variable 'v10' is possibly undefined
##############################
Function Background: The function is reverse engineered from the driver file Schannel.dll on Windows platform. Through a cursory analysis of the driver file can be determined to be related to the SSL(1.3), TLS(3.0) protocol, that is, with RFC8446, RFC6101 strong correlation.

Output Function Summary: Summarizes the function's functionality with several phrases instead of sentences, focuses on covering the function's control flow information (API), and highlights the protocol function points implemented by the function. Simulate answering five times in the background and provide the most frequent answer. Suppose the code support the latest newwork protocol SSL(3.0) AND TLS(1.3)

Retrieve document sections based on code summaries (containing multiple phrases) and RFC section information, giving matches for document sections(FunctionMatchRFCResult) that the code may related to. Note that if the code is only business related and not related to the specifics of the protocol implementation, it does not have to output the document section match(FunctionMatchRFCResult) and is padded with NONE.

Generate Function Information Collection with JSON Format:

{
	"FunctionIndex": "(FILL WITH "File count" with less than four bits are indexed with zeros to make up the four bits.)",
	"FunctionName": "(Full Function Code Name)",
	"FunctionSummarization": [
		"(Function Summary Phrase1)",
		"(Function Summary Phrase2)",
		"(...)"
	],
	"FunctionMatchRFCResult": [
		"(RFCXXXX-SectionX.X.X.X-Section Title 1)",
		"(RFCXXXX-SectionX.X.X.X-Section Title 2)",
		"(...)",
	],
}

Remember just output the Function Information Collection result.
