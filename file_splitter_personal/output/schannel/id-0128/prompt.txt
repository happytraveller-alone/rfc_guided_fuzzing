Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 128
// Total lines: 350

//----- (000000018000A590) ----------------------------------------------------
__int64 __fastcall CTlsExtClient::ParseExtension(__int64 a1, __int64 a2, unsigned __int8 *a3, unsigned __int16 a4)
{
  unsigned int v4; // ebp
  unsigned int v5; // edi
  unsigned __int8 *v8; // r9
  int v9; // r8d
  __int64 v10; // rax
  __int64 v11; // rcx
  unsigned int v12; // r13d
  int v13; // r9d
  CCipherMill *v14; // rcx
  __int64 result; // rax
  _DWORD *v16; // rax
  unsigned __int16 v17; // r8
  __int64 v18; // rcx
  int v19; // edx
  __int64 v20; // rax
  CCipherMill *v21; // rcx
  __int64 v22; // rdx
  char *v23; // r14
  CCipherMill *v24; // r15
  __int64 v25; // rdx
  CSsl3TlsClientContext *v26; // rcx
  __int64 v27; // rcx
  CSsl3TlsClientContext *v28; // r10
  __int16 v29; // cx
  unsigned __int16 v30; // ax
  unsigned __int8 *v31; // r14
  unsigned __int16 *v32; // rdx
  unsigned __int8 *v33; // r14
  unsigned __int16 v34; // cx
  unsigned __int8 *v35; // r14
  unsigned int v36; // ecx
  _BYTE *v37; // r14
  unsigned int Size; // [rsp+30h] [rbp-48h]
  void *Buf2; // [rsp+38h] [rbp-40h]
  void *v40; // [rsp+40h] [rbp-38h]

  v4 = 0;
  v5 = a4;
  v8 = 0i64;
  v9 = 5;
  switch ( (_DWORD)a2 )
  {
    case 5:
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 136i64) |= 0x20000ui64;
      goto LABEL_20;
    case 6:
      if ( (_WORD)v5 )
      {
        v36 = *a3;
        v37 = a3 + 1;
        if ( v36 == v5 - 1 )
        {
          if ( !*(_BYTE *)(a1 + 52) )
            return 0i64;
          if ( v36 )
          {
            while ( *v37 != 64 )
            {
              ++v4;
              ++v37;
              if ( v4 >= v36 )
                goto LABEL_80;
            }
            *(_BYTE *)(*(_QWORD *)(a1 + 8) + 922i64) = 1;
          }
LABEL_80:
          v9 = 6;
          goto LABEL_20;
        }
      }
      return 2148074278i64;
    case 0xE:
      v28 = *(CSsl3TlsClientContext **)(a1 + 56);
      if ( (*((_DWORD *)v28 + 34) & 0x2000i64) == 0 || (unsigned __int16)(v5 - 5) > 0xFFu )
      {
        v21 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control == (CCipherMill *)&WPP_GLOBAL_Control || (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) == 0 )
          return 2148074278i64;
        v22 = 37i64;
        goto LABEL_126;
      }
      v29 = *a3;
      v30 = a3[1];
      v31 = a3 + 2;
      if ( (v30 | (unsigned __int16)(v29 << 8)) != 2 )
      {
        v21 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control == (CCipherMill *)&WPP_GLOBAL_Control || (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) == 0 )
          return 2148074278i64;
        v22 = 38i64;
        goto LABEL_126;
      }
      v32 = (unsigned __int16 *)v31;
      v33 = v31 + 2;
      v34 = *v33;
      v35 = v33 + 1;
      if ( (_BYTE)v34 )
      {
        if ( (unsigned __int16)(v5 - 5) < v34 )
        {
          v21 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control == (CCipherMill *)&WPP_GLOBAL_Control
            || (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) == 0 )
          {
            return 2148074278i64;
          }
          v22 = 39i64;
          goto LABEL_126;
        }
        v8 = v35;
      }
      result = CSsl3TlsClientContext::SetNegotiatedSrtpParameters(v28, v32, 2u, v8, v34);
      if ( !(_DWORD)result )
      {
        v9 = 14;
        goto LABEL_20;
      }
      break;
    case 0x10:
      v16 = (_DWORD *)(*(__int64 (__fastcall **)(_QWORD, __int64, __int64, _QWORD))(**(_QWORD **)(a1 + 8) + 88i64))(
                        *(_QWORD *)(a1 + 8),
                        a2,
                        5i64,
                        0i64);
      if ( v16 && *v16 )
      {
        v21 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control == (CCipherMill *)&WPP_GLOBAL_Control || (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) == 0 )
          return 2148074278i64;
        v22 = 33i64;
        goto LABEL_126;
      }
      if ( (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 136i64) & 0x4000000) == 0 || (unsigned __int16)(v5 - 4) > 0xFEu )
      {
        v21 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control == (CCipherMill *)&WPP_GLOBAL_Control || (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) == 0 )
          return 2148074278i64;
        v22 = 34i64;
        goto LABEL_126;
      }
      v17 = _byteswap_ushort(*(_WORD *)a3);
      if ( v17 != v5 - 2 )
      {
        v21 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control == (CCipherMill *)&WPP_GLOBAL_Control || (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) == 0 )
          return 2148074278i64;
        v22 = 35i64;
        goto LABEL_126;
      }
      result = CSsl3TlsClientContext::SetSelectedApplicationProtocol(*(CSsl3TlsClientContext **)(a1 + 56), a3 + 2, v17);
      if ( !(_DWORD)result )
      {
        v9 = 16;
        goto LABEL_20;
      }
      break;
    case 0x17:
      if ( !*(_BYTE *)(*(_QWORD *)(a1 + 56) + 1344i64) )
      {
        if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) != 0 )
          WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 36i64, &WPP_f49a95b901763c3505884ea2834cd757_Traceguids);
        v27 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 120i64);
        if ( v27 && CSchannelTelemetryContext::m_bTelemetryIsGloballyInitialized )
          *(_WORD *)(v27 + 66) |= 4u;
        return 2148074278i64;
      }
      v9 = 23;
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 136i64) |= 0x8000000ui64;
      goto LABEL_20;
    case 0x18:
      v26 = *(CSsl3TlsClientContext **)(a1 + 56);
      if ( (*((_DWORD *)v26 + 34) & 0x80000000) == 0 || v5 < 4 )
      {
        v21 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control == (CCipherMill *)&WPP_GLOBAL_Control || (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) == 0 )
          return 2148074278i64;
        v22 = 40i64;
        goto LABEL_126;
      }
      if ( (unsigned __int16)(v5 - 3) < a3[2] || a3[2] != 1 )
      {
        v21 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control == (CCipherMill *)&WPP_GLOBAL_Control || (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) == 0 )
          return 2148074278i64;
        v22 = 41i64;
        goto LABEL_126;
      }
      result = CSsl3TlsClientContext::SetNegotiatedTBParameters(v26, *a3, a3[1], a3 + 3, a3[2]);
      if ( !(_DWORD)result )
      {
        v9 = 24;
        goto LABEL_20;
      }
      break;
    case 0x23:
      v9 = 35;
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 136i64) |= 0x400000ui64;
LABEL_20:
      CSchannelTelemetryContext::LogTlsExtensionTelemetry(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 120i64), 1, v9);
      return 0i64;
    case 0xFF01:
      v10 = *(_QWORD *)(a1 + 8);
      if ( *(_DWORD *)(v10 + 416) && !*(_BYTE *)(v10 + 553) )
      {
        if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) != 0 )
        {
          WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 42i64, &WPP_f49a95b901763c3505884ea2834cd757_Traceguids);
          v10 = *(_QWORD *)(a1 + 8);
        }
        CSslContext::SetErrorAndFatalAlert(v10, 1207, -2146892986, 0x28u);
        v18 = *(_QWORD *)(a1 + 8);
        *(_DWORD *)(v18 + 68) = 96;
        *(_WORD *)(v18 + 96) = 10242;
        return 2148074310i64;
      }
      *(_BYTE *)(v10 + 553) = 1;
      v11 = *(_QWORD *)(a1 + 8);
      v12 = *(_DWORD *)(v11 + 456);
      Buf2 = (void *)(v11 + 377);
      v40 = (void *)(v11 + 420);
      Size = *(_DWORD *)(v11 + 416);
      if ( (_WORD)v5 )
      {
        v13 = *a3;
        if ( v13 + 1 == v5 )
        {
          if ( (_WORD)v5 == 1 )
          {
            v14 = WPP_GLOBAL_Control;
            if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control
              && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
            {
              WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 45i64, &WPP_f49a95b901763c3505884ea2834cd757_Traceguids);
              v14 = WPP_GLOBAL_Control;
            }
            if ( !v12 )
              return 0i64;
            if ( v14 != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)v14 + 28) & 1) != 0 )
              WPP_SF_DD(*((_QWORD *)v14 + 2), 0x2Eu, (__int64)&WPP_f49a95b901763c3505884ea2834cd757_Traceguids, v5, v12);
            v19 = 1207;
            goto LABEL_38;
          }
          v23 = (char *)(a3 + 1);
          if ( v13 != *(_DWORD *)(v11 + 416) + v12 )
          {
            if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control
              && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) != 0 )
            {
              WPP_SF_DD(
                *((_QWORD *)WPP_GLOBAL_Control + 2),
                0x2Fu,
                (__int64)&WPP_f49a95b901763c3505884ea2834cd757_Traceguids,
                v13,
                *(_DWORD *)(v11 + 416));
              v11 = *(_QWORD *)(a1 + 8);
            }
            v19 = 1207;
            goto LABEL_39;
          }
          v24 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control )
          {
            if ( (*((_DWORD *)WPP_GLOBAL_Control + 7) & 0x800) != 0 )
            {
              WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 48i64, &WPP_f49a95b901763c3505884ea2834cd757_Traceguids);
              v24 = WPP_GLOBAL_Control;
            }
            if ( v24 != (CCipherMill *)&WPP_GLOBAL_Control )
            {
              if ( (*((_DWORD *)v24 + 7) & 0x800) != 0 )
              {
                WPP_SF_(*((_QWORD *)v24 + 2), 49i64, &WPP_f49a95b901763c3505884ea2834cd757_Traceguids);
                v24 = WPP_GLOBAL_Control;
              }
              if ( v24 != (CCipherMill *)&WPP_GLOBAL_Control )
              {
                if ( (*((_DWORD *)v24 + 7) & 0x800) != 0 )
                {
                  WPP_SF_(*((_QWORD *)v24 + 2), 50i64, &WPP_f49a95b901763c3505884ea2834cd757_Traceguids);
                  v24 = WPP_GLOBAL_Control;
                }
                if ( v24 != (CCipherMill *)&WPP_GLOBAL_Control && (*((_DWORD *)v24 + 7) & 0x800) != 0 )
                {
                  WPP_SF_(*((_QWORD *)v24 + 2), 51i64, &WPP_f49a95b901763c3505884ea2834cd757_Traceguids);
                  v24 = WPP_GLOBAL_Control;
                }
              }
            }
          }
          if ( memcmp_0(v23, Buf2, Size) )
          {
            if ( v24 == (CCipherMill *)&WPP_GLOBAL_Control || (*((_BYTE *)v24 + 28) & 1) == 0 )
              goto LABEL_73;
            v25 = 52i64;
LABEL_72:
            WPP_SF_(*((_QWORD *)v24 + 2), v25, &WPP_f49a95b901763c3505884ea2834cd757_Traceguids);
LABEL_73:
            v19 = 108;
LABEL_38:
            v11 = *(_QWORD *)(a1 + 8);
LABEL_39:
            CSslContext::SetErrorAndFatalAlert(v11, v19, -2146892986, 0x28u);
            v20 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v20 + 68) = 96;
            *(_WORD *)(v20 + 96) = 10242;
            return 2148074310i64;
          }
          if ( memcmp_0(&v23[Size], v40, v12) )
          {
            if ( v24 == (CCipherMill *)&WPP_GLOBAL_Control || (*((_BYTE *)v24 + 28) & 1) == 0 )
              goto LABEL_73;
            v25 = 53i64;
            goto LABEL_72;
          }
          v9 = 65281;
          goto LABEL_20;
        }
        if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 7) & 0x800) != 0 )
        {
          WPP_SF_DD(
            *((_QWORD *)WPP_GLOBAL_Control + 2),
            0x2Cu,
            (__int64)&WPP_f49a95b901763c3505884ea2834cd757_Traceguids,
            v13,
            v5);
        }
        return 2148074278i64;
      }
      v21 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CCipherMill *)&WPP_GLOBAL_Control || (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) == 0 )
        return 2148074278i64;
      v22 = 43i64;
LABEL_126:
      WPP_SF_(*((_QWORD *)v21 + 2), v22, &WPP_f49a95b901763c3505884ea2834cd757_Traceguids);
      return 2148074278i64;
    default:
      CSchannelTelemetryContext::LogUnknownTlsExtension(
        *(CSchannelTelemetryContext **)(*(_QWORD *)(a1 + 8) + 120i64),
        a2);
      return 0i64;
  }
  return result;
}
// 180041CB0: using guessed type __int64 __fastcall WPP_SF_(_QWORD, _QWORD, _QWORD);
// 180080FD8: using guessed type __int64 (__fastcall *_guard_xfg_dispatch_icall_fptr)(_QWORD, _QWORD, _QWORD);
// 1800927AC: using guessed type bool CSchannelTelemetryContext::m_bTelemetryIsGloballyInitialized;
##############################
Role: Let's assume that you are an advanced reverse engineer and you are reverse engineering a network driver using IDA Pro, and you are also familiar with the RFC documentation. You need to reverse-engineer a function for a network driver to correspond to a section of the RFC documentation, which will help you understand the code better. The driver you're reversing is Schannel.dll, and you've initially determined that the corresponding network protocols are SSL and TLS, and the documents you need to map are RFC8446 and RFC6101. You need to get a function summary of the function you're reversing, and then correspond to the potential RFC sections based on the name of the function and the function summary.

Function Background: The function is reverse engineered from the driver file Schannel.dll on Windows platform. Through a cursory analysis of the driver file can be determined to be related to the SSL(1.3), TLS(3.0) protocol, that is, with RFC8446, RFC6101 strong correlation.

Output Function Summary: Summarizes the function's functionality with several phrases instead of sentences, focuses on covering the function's control flow information, and highlights the protocol function points implemented by the function. Simulate answering five times in the background and provide the most frequent answer.

Retrieve document sections: giving matches for document sections(FunctionMatchRFCResult) that the code may related to. NOTE if the code is only business related(i.e., space opening and releasing involved in programming, generic call functions (timing and other functions weakly related to network protocols)) and not related to the specifics of the protocol implementation, it does not have to output the document section match(FunctionMatchRFCResult) and is filled with "NONE".

Retrieve document sections Thinking Chain: The function code is matched with the RFC document section, and the thinking chain is provided to help you solve the problem better:
	1. Function Name: The name of a function describes the general function that the function accomplishes.
	2. Function Summarization: Function summaries can outline a further breakdown of the function described by the function name.
	3. Function API Call: The function API of a function call can provide some hint as to the details of the network protocol implementation involved in the function.
	4. Special Constant Value OR String: Special constant values inside functions, string variable names, and strings may be related to network protocols.
	5. Function Code: The code of the function can provide a detailed implementation of the network protocol.
Generate Function Information Collection with JSON Format:

{
	"FunctionIndex": "(FILL WITH "File count" with less than four bits are indexed with zeros to make up the four bits.)",
	"FunctionName": "(Full Function Code Name)",
	"FunctionSummarization": [
		"(Function Summary Phrase1)",
		"(Function Summary Phrase2)",
		"(...)"
	],
	"FunctionMatchRFCResult": [
		"(RFCXXXX-SectionX.X.X.X-Section Title 1)",
		"(RFCXXXX-SectionX.X.X.X-Section Title 2)",
		"(...)",
	],
}

ATTENTION: Remember YOU MUST ONLY output the Function Information Collection result.
