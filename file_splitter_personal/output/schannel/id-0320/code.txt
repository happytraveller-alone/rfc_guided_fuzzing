Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 320
// Total lines: 190

//----- (0000000180017660) ----------------------------------------------------
__int64 __fastcall SpQueryCredentialsAttributes(struct CCredentialGroup *a1, int a2, _QWORD *a3)
{
  int v6; // r14d
  unsigned int v7; // ebx
  __int64 result; // rax
  int v9; // edi
  int v10; // edi
  int v11; // edi
  int v12; // eax
  CCipherMill *v13; // rcx
  int v14; // ebx
  int v15; // eax
  int v16; // eax
  unsigned int v17; // eax
  int v18; // edi
  unsigned int v19; // r15d
  int v20; // esi
  int v21; // edi
  HLOCAL v22; // rdi
  __int64 v23; // rax
  unsigned int v24; // r15d
  int v25; // esi
  int v26; // esi
  __int64 v27; // [rsp+30h] [rbp-58h] BYREF
  __int64 v28[2]; // [rsp+38h] [rbp-50h] BYREF
  __int64 v29; // [rsp+48h] [rbp-40h] BYREF
  int v30; // [rsp+50h] [rbp-38h]
  HLOCAL hMem; // [rsp+90h] [rbp+8h] BYREF
  unsigned int *v32; // [rsp+A8h] [rbp+20h] BYREF

  v32 = 0i64;
  LODWORD(hMem) = 0;
  v27 = 0i64;
  if ( !a1 )
    return 2148074241i64;
  if ( !(*(unsigned __int8 (__fastcall **)(__int64 *))(LsaTable + 192))(&v29) )
    return 2148074244i64;
  if ( (v30 & 0x10000) != 0 )
    return QueryCredAttributesRpc(a1, a2, a3);
  v6 = v30 & 0x40;
  switch ( a2 )
  {
    case 1:
      if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
        WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 23i64, &WPP_d9c5339d4bdb3d03f2cfcf1c7d7ab7b7_Traceguids);
      v7 = v6 != 0 ? 4 : 8;
      break;
    case 86:
      if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
        WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 20i64, &WPP_d9c5339d4bdb3d03f2cfcf1c7d7ab7b7_Traceguids);
      v7 = v6 != 0 ? 8 : 16;
      break;
    case 87:
      if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
        WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 21i64, &WPP_d9c5339d4bdb3d03f2cfcf1c7d7ab7b7_Traceguids);
      v7 = 8;
      break;
    case 88:
      v7 = 4;
      if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
        WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 22i64, &WPP_d9c5339d4bdb3d03f2cfcf1c7d7ab7b7_Traceguids);
      break;
    default:
      if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 2) != 0 )
        WPP_SF_d(
          *((_QWORD *)WPP_GLOBAL_Control + 2),
          0x18u,
          (__int64)&WPP_d9c5339d4bdb3d03f2cfcf1c7d7ab7b7_Traceguids,
          a2);
      return 2148074242i64;
  }
  result = (*(__int64 (__fastcall **)(_QWORD, _QWORD, __int64 *, _QWORD *))(LsaTable + 80))(0i64, v7, v28, a3);
  if ( (int)result < 0 )
    return result;
  v9 = a2 - 1;
  if ( v9 )
  {
    v10 = v9 - 85;
    if ( !v10 )
    {
      v17 = BuildLegacySupportedAlgsList(a1, &v32, (unsigned int *)&hMem);
      result = TranslateToSecurityStatus(v17);
      if ( (_DWORD)result )
        return result;
      v18 = (int)hMem;
      v19 = 4 * (_DWORD)hMem;
      v20 = (*(__int64 (__fastcall **)(_QWORD, _QWORD, __int64 *))(LsaTable + 56))(
              0i64,
              (unsigned int)(4 * (_DWORD)hMem),
              &v27);
      if ( v20 < 0 )
      {
        SPExternalFree(v32);
        return (unsigned int)v20;
      }
      LODWORD(v28[0]) = v18;
      if ( v6 )
        HIDWORD(v28[0]) = v27;
      else
        v28[1] = v27;
      v21 = (*(__int64 (__fastcall **)(_QWORD, _QWORD, __int64, unsigned int *))(LsaTable + 72))(0i64, v19, v27, v32);
      SPExternalFree(v32);
      if ( v21 < 0 )
      {
        (*(void (__fastcall **)(_QWORD, __int64))(LsaTable + 64))(0i64, v27);
        return (unsigned int)v21;
      }
      goto LABEL_17;
    }
    v11 = v10 - 1;
    if ( v11 )
    {
      if ( v11 != 1 )
        goto LABEL_17;
      v15 = *((_DWORD *)a1 + 38);
    }
    else
    {
      v12 = *((_DWORD *)a1 + 41);
      LODWORD(v28[0]) = v12;
      v13 = (CCipherMill *)*((unsigned int *)a1 + 42);
      HIDWORD(v28[0]) = (_DWORD)v13;
      if ( (_DWORD)v13 )
      {
        if ( v12 )
          goto LABEL_17;
      }
      else if ( !v12 )
      {
        goto LABEL_17;
      }
      CCipherMill::GetBaseCipherSizes(v13, v30 & 1, (unsigned int *)&v32, (unsigned int *)&hMem);
      v16 = HIDWORD(v28[0]);
      if ( !*((_DWORD *)a1 + 42) )
        v16 = (int)hMem;
      HIDWORD(v28[0]) = v16;
      if ( *((_DWORD *)a1 + 41) )
        goto LABEL_17;
      v15 = (int)v32;
    }
    LODWORD(v28[0]) = v15;
LABEL_17:
    v14 = (*(__int64 (__fastcall **)(_QWORD, _QWORD, _QWORD *, __int64 *))(LsaTable + 72))(0i64, v7, a3, v28);
    if ( v14 >= 0 )
      return 0i64;
    if ( v27 )
      (*(void (__fastcall **)(_QWORD))(LsaTable + 64))(0i64);
    return (unsigned int)v14;
  }
  hMem = 0i64;
  result = CCredentialGroup::GetNameFromFirstCred(a1, (unsigned __int16 **)&hMem);
  if ( (_DWORD)result )
    return result;
  v22 = hMem;
  v23 = -1i64;
  do
    ++v23;
  while ( *((_WORD *)hMem + v23) );
  v24 = 2 * v23 + 2;
  v25 = (*(__int64 (__fastcall **)(_QWORD, _QWORD, __int64 *))(LsaTable + 56))(0i64, v24, &v27);
  if ( v25 >= 0 )
  {
    if ( v6 )
      LODWORD(v28[0]) = v27;
    else
      v28[0] = v27;
    if ( !v27
      || (v26 = (*(__int64 (__fastcall **)(_QWORD, _QWORD, __int64, HLOCAL))(LsaTable + 72))(0i64, v24, v27, v22),
          v26 >= 0) )
    {
      if ( v22 )
        LocalFree(v22);
      goto LABEL_17;
    }
    (*(void (__fastcall **)(_QWORD, __int64))(LsaTable + 64))(0i64, v27);
    if ( v22 )
      LocalFree(v22);
    return (unsigned int)v26;
  }
  else
  {
    if ( v22 )
      LocalFree(v22);
    return (unsigned int)v25;
  }
}
// 1800178F3: conditional instruction was optimized away because ecx.4!=0
// 180041CB0: using guessed type __int64 __fastcall WPP_SF_(_QWORD, _QWORD, _QWORD);
// 180092620: using guessed type __int64 LsaTable;
