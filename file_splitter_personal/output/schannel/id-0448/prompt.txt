Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 448
// Total lines: 705

//----- (000000018001F810) ----------------------------------------------------
__int64 __fastcall CSslContextManager::InstantiateServerContext(
        CSslContextManager *this,
        struct SPBuffer *a2,
        struct SPBuffer *a3,
        struct _SecBuffer *a4,
        struct _SecBuffer *a5,
        struct CCredentialGroup *a6,
        unsigned __int64 a7,
        struct CSslParentContext **a8)
{
  char v8; // r12
  unsigned __int64 v11; // rsi
  CCipherMill *v12; // r11
  unsigned int v13; // ebx
  __int64 v14; // rdx
  int v15; // edi
  unsigned int v16; // ecx
  int v17; // r8d
  unsigned int v18; // ebp
  int v19; // eax
  unsigned int v20; // r9d
  unsigned int v21; // eax
  unsigned int v22; // ebp
  int v23; // r15d
  __int64 v24; // rax
  __int64 v25; // rdi
  __int64 v26; // rbx
  void ***v27; // r14
  __int64 v28; // r12
  void **v29; // rax
  __int64 v30; // rax
  char v31; // al
  unsigned __int16 v32; // ax
  unsigned int v33; // ecx
  int v34; // eax
  _DWORD *v35; // rsi
  __int16 v36; // ax
  __int16 v37; // cx
  __int64 v38; // rsi
  _QWORD *v39; // rax
  __int64 v40; // rcx
  __int64 v41; // rsi
  _DWORD *v42; // rbx
  __int64 result; // rax
  int v44; // r9d
  int v45; // eax
  ULONG v46; // edx
  __int64 v47; // rax
  char v48; // al
  unsigned __int16 v49; // ax
  unsigned int v50; // ecx
  int v51; // eax
  _DWORD *v52; // rsi
  __int16 v53; // ax
  __int16 v54; // cx
  _WORD *v55; // rax
  int v56; // r14d
  char v57[8]; // [rsp+30h] [rbp-58h] BYREF
  int v58; // [rsp+38h] [rbp-50h]
  int v59; // [rsp+98h] [rbp+10h]

  v8 = 0;
  v59 = 0;
  v11 = a7 & 0x100000000i64;
  v12 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
  {
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 11i64, &WPP_5f5b8daccbb63ec51f5b3bdd6563a375_Traceguids);
    v12 = WPP_GLOBAL_Control;
  }
  v13 = *((_DWORD *)a2 + 1);
  if ( v13 < 5 && (a7 & 0x100000000i64) == 0 )
  {
    *((_DWORD *)a2 + 1) = 5;
    return 2148074264i64;
  }
  v14 = *((_QWORD *)a2 + 1);
  v15 = *((_DWORD *)a6 + 38);
  if ( (a7 & 0x100000000i64) != 0 )
  {
    if ( (v15 & 0xFFFFEFFF) != 0 )
      return 2148074333i64;
    v22 = 771;
    v23 = 1024;
    v8 = 1;
LABEL_18:
    v24 = (*(__int64 (__fastcall **)(_QWORD))(**((_QWORD **)this + 6) + 16i64))(*((_QWORD *)this + 6));
    v25 = v24;
    if ( v24 )
    {
      v26 = v24 + 40;
      *(_QWORD *)(v24 + 8) = 0i64;
      if ( !v8 )
      {
        *(_QWORD *)(v24 + 48) = 0i64;
        *(_QWORD *)v26 = &CSslContext::`vftable';
        *(_QWORD *)(v24 + 56) = 0i64;
        *(_QWORD *)(v24 + 64) = 0i64;
        *(_WORD *)(v24 + 72) = 0;
        *(_DWORD *)(v24 + 76) = 0;
        *(_OWORD *)(v24 + 80) = 0i64;
        *(_DWORD *)(v24 + 96) = 0;
        *(_WORD *)(v24 + 136) = 0;
        *(_BYTE *)(v24 + 272) = 0;
        *(_WORD *)(v24 + 304) = 0;
        *(_BYTE *)(v24 + 306) = 0;
        v47 = LsaTable;
        *(_DWORD *)(v26 + 64) = v23;
        *(_QWORD *)(v26 + 68) = 0i64;
        *(_QWORD *)(v26 + 80) = 0i64;
        *(_QWORD *)(v26 + 88) = 0i64;
        *(_QWORD *)(v26 + 104) = 0i64;
        *(_QWORD *)(v26 + 112) = 0i64;
        *(_QWORD *)(v26 + 120) = 0i64;
        *(_QWORD *)(v26 + 128) = 0i64;
        *(_QWORD *)(v26 + 136) = 0i64;
        *(_QWORD *)(v26 + 144) = 0i64;
        *(_QWORD *)(v26 + 152) = 0i64;
        *(_QWORD *)(v26 + 160) = 0i64;
        *(_QWORD *)(v26 + 168) = 0i64;
        *(_QWORD *)(v26 + 176) = 0i64;
        *(_QWORD *)(v26 + 184) = 0i64;
        *(_DWORD *)(v26 + 192) = 0;
        *(_QWORD *)(v26 + 200) = 0i64;
        *(_QWORD *)(v26 + 208) = 0i64;
        *(_DWORD *)(v26 + 216) = 0;
        *(_WORD *)(v26 + 220) = 0;
        *(_QWORD *)(v26 + 224) = 0i64;
        *(_WORD *)(v26 + 234) = 0;
        *(_QWORD *)(v26 + 240) = 0i64;
        *(_QWORD *)(v26 + 248) = 0i64;
        *(_QWORD *)(v26 + 256) = 0i64;
        if ( (*(unsigned __int8 (__fastcall **)(char *))(v47 + 192))(v57) )
        {
          v48 = v58;
          if ( (v58 & 1) != 0 )
            *(_QWORD *)(v26 + 136) |= 0x20000000ui64;
          *(_BYTE *)(v26 + 266) = (v48 & 0x11) == 0;
        }
        v49 = ConvertSchannelProtocolToSsl(*(_DWORD *)(v26 + 64));
        v50 = v49;
        *(_WORD *)(v26 + 34) = v49;
        if ( HIBYTE(v49) != 0xFE || (v51 = 13, v50 > 0xFEFF) )
          v51 = 5;
        *(_DWORD *)(v26 + 60) = v51;
        *(_BYTE *)(v26 + 233) = (v23 & 0xF0000) != 0;
        if ( dword_180091480
          && (qword_180091490 & 0x400000000000i64) != 0
          && (qword_180091498 & 0x400000000000i64) == qword_180091498
          && (v52 = SPExternalAlloc(0x700u)) != 0i64 )
        {
          v52[2] = 0;
          *(_QWORD *)v52 = &CSchannelTelemetryContext::`vftable';
          *((_BYTE *)v52 + 16) = 0;
          v52[5] = 1;
          memset_0(v52 + 6, 0, 0x6E8ui64);
        }
        else
        {
          v52 = 0i64;
        }
        *(_QWORD *)(v26 + 120) = v52;
        memset_0((void *)(v26 + 272), 0, 0x40ui64);
        *(_DWORD *)(v26 + 336) = 0;
        *(_BYTE *)(v26 + 340) = 0;
        memset_0((void *)(v26 + 341), 0, 0x48ui64);
        *(_DWORD *)(v26 + 416) = 0;
        *(_OWORD *)(v26 + 420) = 0i64;
        *(_OWORD *)(v26 + 436) = 0i64;
        *(_QWORD *)(v26 + 452) = 0i64;
        *(_QWORD *)(v26 + 464) = 0i64;
        *(_DWORD *)(v26 + 472) = 0;
        *(_OWORD *)(v26 + 476) = 0i64;
        *(_OWORD *)(v26 + 492) = 0i64;
        *(_DWORD *)(v26 + 508) = 0;
        *(_OWORD *)(v26 + 512) = 0i64;
        *(_OWORD *)(v26 + 528) = 0i64;
        *(_WORD *)(v26 + 544) = 0;
        *(_QWORD *)(v26 + 548) = 0i64;
        *(_BYTE *)(v26 + 556) = 0;
        *(_OWORD *)(v26 + 560) = 0i64;
        *(_QWORD *)(v26 + 576) = 0i64;
        *(_QWORD *)(v26 + 584) = 0i64;
        memset_0((void *)(v26 + 592), 0, 0x80ui64);
        *(_DWORD *)(v26 + 720) = 0;
        *(_OWORD *)(v26 + 724) = 0i64;
        *(_OWORD *)(v26 + 740) = 0i64;
        *(_OWORD *)(v26 + 756) = 0i64;
        *(_QWORD *)(v26 + 772) = 0i64;
        *(_DWORD *)(v26 + 780) = 0;
        *(_QWORD *)(v26 + 784) = 0i64;
        *(_QWORD *)(v26 + 792) = 0i64;
        *(_QWORD *)(v26 + 800) = 0i64;
        *(_QWORD *)(v26 + 808) = 0i64;
        *(_QWORD *)(v26 + 816) = 0i64;
        *(_QWORD *)(v26 + 824) = 0i64;
        *(_QWORD *)(v26 + 832) = 0i64;
        *(_QWORD *)(v26 + 840) = 0i64;
        *(_QWORD *)(v26 + 848) = 0i64;
        *(_QWORD *)(v26 + 856) = 0i64;
        *(_QWORD *)(v26 + 864) = 0i64;
        *(_DWORD *)(v26 + 872) = 0;
        *(_QWORD *)(v26 + 880) = 0i64;
        *(_DWORD *)(v26 + 888) = 0;
        *(_QWORD *)(v26 + 896) = 0i64;
        *(_QWORD *)(v26 + 904) = 0i64;
        *(_QWORD *)(v26 + 912) = 0i64;
        *(_DWORD *)(v26 + 920) = 0;
        *(_WORD *)(v26 + 924) = 0;
        if ( *(_BYTE *)(v26 + 233) )
        {
          v53 = 1083;
          v54 = 1096;
        }
        else
        {
          *(_DWORD *)(v26 + 192) = -1;
          v53 = 0;
          *(_QWORD *)(v26 + 200) = 0i64;
          v54 = 0;
          *(_QWORD *)(v26 + 208) = 0i64;
        }
        *(_WORD *)(v26 + 216) = v54;
        v28 = 1000i64;
        *(_WORD *)(v26 + 218) = v53;
        *(_QWORD *)v26 = &CSsl3TlsServerContext::`vftable';
        *(_QWORD *)(v26 + 928) = 0i64;
        *(_QWORD *)(v26 + 936) = 0i64;
        *(_QWORD *)(v26 + 944) = 0i64;
        *(_WORD *)(v26 + 952) = 0;
        *(_QWORD *)(v26 + 960) = 0i64;
        *(_QWORD *)(v26 + 968) = 0i64;
        *(_QWORD *)(v26 + 976) = 0i64;
        *(_DWORD *)(v26 + 984) = 0;
        *(_BYTE *)(v26 + 988) = 0;
        *(_QWORD *)(v26 + 992) = 0i64;
LABEL_41:
        v40 = *((_QWORD *)this + 7);
        v41 = v28 + v26;
        if ( v40 )
        {
          v55 = (_WORD *)(*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v40 + 16i64))(v40);
          v56 = *((_DWORD *)this + 8);
        }
        else
        {
          if ( !*((_BYTE *)this + 68) )
          {
LABEL_43:
            *(_QWORD *)(v25 + 8) = v26;
            *(_QWORD *)(v26 + 128) = v25;
            v42 = *(_DWORD **)(v25 + 8);
            if ( !v42 )
              return 1359i64;
            result = (*(__int64 (__fastcall **)(_QWORD))(*(_QWORD *)v42 + 184i64))(*(_QWORD *)(v25 + 8));
            if ( !(_DWORD)result )
            {
              v42[17] = v59;
              v42[9] = v22;
              *a8 = (struct CSslParentContext *)v25;
              return 0i64;
            }
            return result;
          }
          v56 = 2048;
          v55 = SPExternalAlloc(0x800u);
          *(_BYTE *)(v25 + 32) = 1;
        }
        if ( v55 && v56 )
        {
          *(_QWORD *)(v41 + 8) = 0i64;
          *(_QWORD *)v41 = &CSslScratchAllocator::`vftable';
          *(_WORD *)(v41 + 16) = v56;
          *(_DWORD *)(v41 + 18) = 0;
          if ( (unsigned __int16)v56 > 4u )
          {
            *(_QWORD *)(v41 + 8) = v55;
            *v55 = 0;
            *(_WORD *)(*(_QWORD *)(v41 + 8) + 2i64) = v56 - 4;
          }
          *(_QWORD *)(v25 + 24) = v41;
        }
        goto LABEL_43;
      }
      v27 = (void ***)(v24 + 1560);
      v28 = 1600i64;
      if ( !v11 )
        v28 = 1616i64;
      if ( v24 != -1560 && v24 != -40 )
      {
        if ( v11 )
        {
          v29 = &CNulRecord::`vftable';
        }
        else
        {
          *(_DWORD *)(v24 + 1644) = 20;
          *(_WORD *)(v24 + 1640) = 0x4000;
          *(_WORD *)(v24 + 1650) = 0x4000;
          v29 = &CTls13Record::`vftable';
          *(_BYTE *)(v26 + 1608) = 0;
        }
        *(_QWORD *)(v26 + 1528) = v26;
        *(_WORD *)(v26 + 1536) = 0;
        *(_QWORD *)(v26 + 1544) = 0i64;
        *(_QWORD *)(v26 + 1552) = 0i64;
        *(_DWORD *)(v26 + 1560) = 0;
        *(_QWORD *)(v26 + 1568) = 0i64;
        *(_QWORD *)(v26 + 1576) = 0i64;
        *(_QWORD *)(v26 + 1584) = 0i64;
        *(_DWORD *)(v26 + 1592) = 0;
        *v27 = v29;
        *(_QWORD *)v26 = &CSslContext::`vftable';
        *(_QWORD *)(v26 + 8) = 0i64;
        *(_QWORD *)(v26 + 16) = 0i64;
        *(_QWORD *)(v26 + 24) = 0i64;
        *(_WORD *)(v26 + 32) = 0;
        *(_DWORD *)(v26 + 36) = 0;
        *(_OWORD *)(v26 + 40) = 0i64;
        *(_DWORD *)(v26 + 56) = 0;
        *(_WORD *)(v26 + 96) = 0;
        *(_BYTE *)(v26 + 232) = 0;
        *(_WORD *)(v26 + 264) = 0;
        *(_BYTE *)(v26 + 266) = 0;
        v30 = LsaTable;
        *(_DWORD *)(v26 + 64) = v23;
        *(_QWORD *)(v26 + 68) = 0i64;
        *(_QWORD *)(v26 + 80) = 0i64;
        *(_QWORD *)(v26 + 88) = 0i64;
        *(_QWORD *)(v26 + 104) = 0i64;
        *(_QWORD *)(v26 + 112) = 0i64;
        *(_QWORD *)(v26 + 120) = 0i64;
        *(_QWORD *)(v26 + 128) = 0i64;
        *(_QWORD *)(v26 + 136) = 0i64;
        *(_QWORD *)(v26 + 144) = 0i64;
        *(_QWORD *)(v26 + 152) = 0i64;
        *(_QWORD *)(v26 + 160) = 0i64;
        *(_QWORD *)(v26 + 168) = 0i64;
        *(_QWORD *)(v26 + 176) = 0i64;
        *(_QWORD *)(v26 + 184) = 0i64;
        *(_DWORD *)(v26 + 192) = 0;
        *(_QWORD *)(v26 + 200) = 0i64;
        *(_QWORD *)(v26 + 208) = 0i64;
        *(_DWORD *)(v26 + 216) = 0;
        *(_WORD *)(v26 + 220) = 0;
        *(_QWORD *)(v26 + 224) = 0i64;
        *(_WORD *)(v26 + 234) = 0;
        *(_QWORD *)(v26 + 240) = 0i64;
        *(_QWORD *)(v26 + 248) = 0i64;
        *(_QWORD *)(v26 + 256) = 0i64;
        if ( (*(unsigned __int8 (__fastcall **)(char *))(v30 + 192))(v57) )
        {
          v31 = v58;
          if ( (v58 & 1) != 0 )
            *(_QWORD *)(v26 + 136) |= 0x20000000ui64;
          *(_BYTE *)(v26 + 266) = (v31 & 0x11) == 0;
        }
        v32 = ConvertSchannelProtocolToSsl(*(_DWORD *)(v26 + 64));
        v33 = v32;
        *(_WORD *)(v26 + 34) = v32;
        if ( HIBYTE(v32) != 0xFE || (v34 = 13, v33 > 0xFEFF) )
          v34 = 5;
        *(_DWORD *)(v26 + 60) = v34;
        *(_BYTE *)(v26 + 233) = (v23 & 0xF0000) != 0;
        if ( dword_180091480
          && (qword_180091490 & 0x400000000000i64) != 0
          && (qword_180091498 & 0x400000000000i64) == qword_180091498
          && (v35 = SPExternalAlloc(0x700u)) != 0i64 )
        {
          v35[2] = 0;
          *(_QWORD *)v35 = &CSchannelTelemetryContext::`vftable';
          *((_BYTE *)v35 + 16) = 0;
          v35[5] = 1;
          memset_0(v35 + 6, 0, 0x6E8ui64);
        }
        else
        {
          v35 = 0i64;
        }
        *(_QWORD *)(v26 + 120) = v35;
        memset_0((void *)(v26 + 272), 0, 0x40ui64);
        *(_DWORD *)(v26 + 336) = 0;
        *(_BYTE *)(v26 + 340) = 0;
        memset_0((void *)(v26 + 341), 0, 0x48ui64);
        *(_DWORD *)(v26 + 416) = 0;
        *(_OWORD *)(v26 + 420) = 0i64;
        *(_OWORD *)(v26 + 436) = 0i64;
        *(_QWORD *)(v26 + 452) = 0i64;
        *(_QWORD *)(v26 + 464) = 0i64;
        *(_DWORD *)(v26 + 472) = 0;
        *(_OWORD *)(v26 + 476) = 0i64;
        *(_OWORD *)(v26 + 492) = 0i64;
        *(_DWORD *)(v26 + 508) = 0;
        *(_OWORD *)(v26 + 512) = 0i64;
        *(_OWORD *)(v26 + 528) = 0i64;
        *(_WORD *)(v26 + 544) = 0;
        *(_QWORD *)(v26 + 548) = 0i64;
        *(_BYTE *)(v26 + 556) = 0;
        *(_OWORD *)(v26 + 560) = 0i64;
        *(_QWORD *)(v26 + 576) = 0i64;
        *(_QWORD *)(v26 + 584) = 0i64;
        memset_0((void *)(v26 + 592), 0, 0x80ui64);
        *(_DWORD *)(v26 + 720) = 0;
        *(_OWORD *)(v26 + 724) = 0i64;
        *(_OWORD *)(v26 + 740) = 0i64;
        *(_OWORD *)(v26 + 756) = 0i64;
        *(_QWORD *)(v26 + 772) = 0i64;
        *(_DWORD *)(v26 + 780) = 0;
        *(_QWORD *)(v26 + 784) = 0i64;
        *(_QWORD *)(v26 + 792) = 0i64;
        *(_QWORD *)(v26 + 800) = 0i64;
        *(_QWORD *)(v26 + 808) = 0i64;
        *(_QWORD *)(v26 + 816) = 0i64;
        *(_QWORD *)(v26 + 824) = 0i64;
        *(_QWORD *)(v26 + 832) = 0i64;
        *(_QWORD *)(v26 + 840) = 0i64;
        *(_QWORD *)(v26 + 848) = 0i64;
        *(_QWORD *)(v26 + 856) = 0i64;
        *(_QWORD *)(v26 + 864) = 0i64;
        *(_DWORD *)(v26 + 872) = 0;
        *(_QWORD *)(v26 + 880) = 0i64;
        *(_DWORD *)(v26 + 888) = 0;
        *(_QWORD *)(v26 + 896) = 0i64;
        *(_QWORD *)(v26 + 904) = 0i64;
        *(_QWORD *)(v26 + 912) = 0i64;
        *(_DWORD *)(v26 + 920) = 0;
        *(_WORD *)(v26 + 924) = 0;
        if ( *(_BYTE *)(v26 + 233) )
        {
          v36 = 1083;
          v37 = 1096;
        }
        else
        {
          *(_DWORD *)(v26 + 192) = -1;
          v36 = 0;
          *(_QWORD *)(v26 + 200) = 0i64;
          v37 = 0;
          *(_QWORD *)(v26 + 208) = 0i64;
        }
        *(_WORD *)(v26 + 216) = v37;
        *(_WORD *)(v26 + 218) = v36;
        *(_QWORD *)(v26 + 928) = 0i64;
        *(_QWORD *)(v26 + 936) = 0i64;
        *(_QWORD *)(v26 + 944) = 0i64;
        *(_WORD *)(v26 + 952) = 0;
        *(_QWORD *)(v26 + 960) = 0i64;
        *(_QWORD *)(v26 + 968) = 0i64;
        *(_QWORD *)(v26 + 976) = 0i64;
        *(_DWORD *)(v26 + 984) = 0;
        *(_BYTE *)(v26 + 988) = 0;
        *(_QWORD *)(v26 + 992) = 0i64;
        *(_QWORD *)(v26 + 1016) = &CTls13ChangeCipherSpec::`vftable';
        *(_QWORD *)(v26 + 1024) = v27;
        *(_BYTE *)(v26 + 1008) = 0;
        *(_BYTE *)(v26 + 1032) = 0;
        *(_QWORD *)(v26 + 1040) = 0i64;
        *(_QWORD *)(v26 + 1048) = 0i64;
        *(_QWORD *)(v26 + 1056) = 0i64;
        *(_QWORD *)(v26 + 1064) = 0i64;
        *(_QWORD *)(v26 + 1072) = 0i64;
        *(_QWORD *)(v26 + 1080) = 0i64;
        *(_QWORD *)(v26 + 1088) = 0i64;
        *(_QWORD *)(v26 + 1096) = 0i64;
        *(_QWORD *)(v26 + 1104) = 0i64;
        *(_QWORD *)(v26 + 1112) = 0i64;
        *(_BYTE *)(v26 + 1120) = 0;
        *(_BYTE *)(v26 + 1136) = 0;
        *(_QWORD *)(v26 + 1128) = 0i64;
        *(_QWORD *)(v26 + 1144) = 0i64;
        *(_OWORD *)(v26 + 1152) = 0i64;
        *(_OWORD *)(v26 + 1168) = 0i64;
        *(_OWORD *)(v26 + 1184) = 0i64;
        *(_BYTE *)(v26 + 1216) = 0;
        *(_WORD *)(v26 + 1232) = 0;
        *(_BYTE *)(v26 + 1248) = 0;
        *(_WORD *)(v26 + 1200) = 256;
        *(_QWORD *)(v26 + 1208) = v27;
        *(_QWORD *)(v26 + 1224) = 0i64;
        *(_QWORD *)(v26 + 1240) = 0i64;
        *(_OWORD *)(v26 + 1249) = 0i64;
        *(_OWORD *)(v26 + 1265) = 0i64;
        *(_WORD *)(v26 + 1281) = 0;
        v38 = *(_QWORD *)(v26 + 1208);
        *(_QWORD *)v26 = &CTls13ServerContext::`vftable'{for `CSsl3TlsServerContext'};
        *(_QWORD *)(v26 + 1000) = &CTls13ServerContext::`vftable'{for `CTls13Context'};
        *(_QWORD *)(v26 + 1288) = &CTls13Handshake<CTls13ServerContext,CTls13ExtServer>::`vftable';
        *(_QWORD *)(v26 + 1296) = v26;
        v39 = operator new(0x30ui64);
        if ( v39 )
        {
          v39[1] = v26;
          *v39 = &CTls13ExtServer::`vftable';
          v39[2] = 0i64;
          *((_DWORD *)v39 + 6) = 0;
          v39[4] = v26;
          v39[5] = v26;
        }
        else
        {
          v39 = 0i64;
        }
        *(_QWORD *)(v26 + 1304) = v39;
        *(_QWORD *)(v26 + 1288) = &CTls13ServerHandshake::`vftable';
        *(_QWORD *)(v26 + 1312) = 0i64;
        *(_QWORD *)(v26 + 1320) = v38;
        *(_DWORD *)(v26 + 1328) = 0;
        *(_WORD *)(v26 + 1332) = 0;
        *(_BYTE *)(v26 + 1334) = 0;
        *(_DWORD *)(v26 + 1336) = 0;
        *(_WORD *)(v26 + 1340) = 0;
        *(_BYTE *)(v26 + 1342) = 0;
        *(_QWORD *)(v26 + 1344) = 0i64;
        *(_WORD *)(v26 + 1352) = 0;
        *(_QWORD *)(v26 + 1360) = 0i64;
        *(_DWORD *)(v26 + 1368) = 0;
        *(_QWORD *)(v26 + 1376) = 0i64;
        *(_QWORD *)(v26 + 1384) = 0i64;
        *(_DWORD *)(v26 + 1392) = 0;
        *(_QWORD *)(v26 + 1400) = 0i64;
        *(_QWORD *)(v26 + 1408) = 0i64;
        *(_QWORD *)(v26 + 1416) = 0i64;
        *(_QWORD *)(v26 + 1424) = 0i64;
        *(_QWORD *)(v26 + 1432) = 0i64;
        *(_DWORD *)(v26 + 1440) = 0;
        *(_WORD *)(v26 + 1444) = 0;
        *(_QWORD *)(v26 + 1448) = 0i64;
        *(_DWORD *)(v26 + 1456) = 0;
        *(_WORD *)(v26 + 1460) = 0;
        *(_QWORD *)(v26 + 1464) = 0i64;
        *(_DWORD *)(v26 + 1472) = 0;
        *(_WORD *)(v26 + 1476) = 0;
        *(_QWORD *)(v26 + 1480) = 0i64;
        *(_WORD *)(v26 + 1488) = 0;
        *(_QWORD *)(v26 + 1496) = 0i64;
        *(_WORD *)(v26 + 1504) = 0;
        *(_BYTE *)(v26 + 1506) = 0;
        *(_QWORD *)(v26 + 1512) = 0i64;
        goto LABEL_41;
      }
      (*(void (__fastcall **)(_QWORD, __int64))(**((_QWORD **)this + 6) + 32i64))(*((_QWORD *)this + 6), v26);
    }
    return 14i64;
  }
  if ( *(_BYTE *)v14 != 22 )
  {
    v22 = *(unsigned __int8 *)(v14 + 4) | (*(unsigned __int8 *)(v14 + 3) << 8);
    if ( v22 < 0x300 )
      goto LABEL_70;
    if ( v13 < 0xE )
    {
      *((_DWORD *)a2 + 1) = 14;
      return 2148074264i64;
    }
    if ( !(*(unsigned __int8 *)(v14 + 6) | (*(unsigned __int8 *)(v14 + 5) << 8)) )
      return 2148074289i64;
    if ( BYTE1(v22) == 0xFE && v22 <= 0xFEFF )
    {
      if ( v12 != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)v12 + 28) & 1) != 0 )
        WPP_SF_(*((_QWORD *)v12 + 2), 13i64, &WPP_5f5b8daccbb63ec51f5b3bdd6563a375_Traceguids);
      return 2148074278i64;
    }
    if ( v22 < 0x302 )
    {
      if ( v22 < 0x301 )
        goto LABEL_102;
    }
    else
    {
      v23 = 256;
      if ( (v15 & 0x100) != 0 )
      {
        v59 = 20;
        goto LABEL_18;
      }
    }
    if ( (v15 & 0x40) != 0 )
    {
      v59 = 20;
      v23 = 64;
      goto LABEL_18;
    }
LABEL_102:
    if ( (v15 & 0x10) != 0 )
    {
      v59 = 20;
      goto LABEL_104;
    }
LABEL_70:
    if ( v12 != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)v12 + 28) & 1) != 0 )
      WPP_SF_(*((_QWORD *)v12 + 2), 14i64, &WPP_5f5b8daccbb63ec51f5b3bdd6563a375_Traceguids);
    return 2148074289i64;
  }
  v16 = *(unsigned __int8 *)(v14 + 2) | (*(unsigned __int8 *)(v14 + 1) << 8);
  if ( _byteswap_ushort(*(_WORD *)(v14 + 1)) >> 8 == 0xFE && v16 <= 0xFEFF )
  {
    v17 = *(unsigned __int8 *)(v14 + 11);
    v18 = 13;
    v19 = *(unsigned __int8 *)(v14 + 12);
    v20 = 12;
  }
  else
  {
    v17 = *(unsigned __int8 *)(v14 + 3);
    v18 = 5;
    v19 = *(unsigned __int8 *)(v14 + 4);
    v20 = 4;
  }
  if ( (v19 | (unsigned int)(v17 << 8)) < v20 + 2 )
  {
    if ( v12 != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)v12 + 28) & 1) != 0 )
    {
      if ( BYTE1(v16) == 0xFE && v16 <= 0xFEFF )
      {
        v44 = *(unsigned __int8 *)(v14 + 11);
        v45 = *(unsigned __int8 *)(v14 + 12);
      }
      else
      {
        v44 = *(unsigned __int8 *)(v14 + 3);
        v45 = *(unsigned __int8 *)(v14 + 4);
      }
      WPP_SF_d(*((_QWORD *)v12 + 2), 0xCu, (__int64)&WPP_5f5b8daccbb63ec51f5b3bdd6563a375_Traceguids, v45 | (v44 << 8));
    }
    return 2148074278i64;
  }
  v21 = v20 + v18 + 2;
  if ( v13 < v21 )
  {
    *((_DWORD *)a2 + 1) = v21;
    return 2148074264i64;
  }
  v22 = *(unsigned __int8 *)(v18 + v14 + v20 + 1) | (*(unsigned __int8 *)(v18 + v14 + v20) << 8);
  if ( BYTE1(v22) != 0xFE || v22 > 0xFEFF )
  {
    if ( v22 < 0x303 )
    {
      if ( v22 < 0x302 )
      {
        if ( v22 < 0x301 )
          goto LABEL_83;
        goto LABEL_86;
      }
    }
    else if ( (v15 & 0x1400) != 0 )
    {
      if ( (v15 & 0x1000) != 0 )
        v8 = 1;
      v23 = 1024;
      goto LABEL_18;
    }
    v23 = 256;
    if ( (v15 & 0x100) != 0 )
      goto LABEL_18;
LABEL_86:
    if ( (v15 & 0x40) != 0 )
    {
      v23 = 64;
      goto LABEL_18;
    }
LABEL_83:
    if ( (v15 & 0x10) == 0 )
      return 2148074289i64;
LABEL_104:
    v23 = 16;
    goto LABEL_18;
  }
  if ( v22 > 0xFEFD || (v23 = 0x40000, (v15 & 0x40000) == 0) )
  {
    v23 = 0x10000;
    if ( (v15 & 0x10000) == 0 )
      goto LABEL_70;
  }
  v46 = CheckInitialDTLSHelloCookie(*((_DWORD *)a6 + 53), (const unsigned __int16 *)a6 + 108, a5, a2, a3);
  if ( !v46 )
  {
    if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
      WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 15i64, &WPP_5f5b8daccbb63ec51f5b3bdd6563a375_Traceguids);
    goto LABEL_18;
  }
  if ( v46 == 590610 )
  {
    a4->pvBuffer = (void *)*((_QWORD *)a3 + 1);
    a4->cbBuffer = *((_DWORD *)a3 + 1);
  }
  return v46;
}
// 180041CB0: using guessed type __int64 __fastcall WPP_SF_(_QWORD, _QWORD, _QWORD);
// 18007C6F0: using guessed type void *CSsl3TlsServerContext::`vftable';
// 18007C920: using guessed type void *CTls13ServerContext::`vftable'{for `CTls13Context'};
// 18007C928: using guessed type void *CTls13ServerContext::`vftable'{for `CSsl3TlsServerContext'};
// 18007CB58: using guessed type void *CTls13ChangeCipherSpec::`vftable';
// 18007CB68: using guessed type void *CTls13Handshake<CTls13ServerContext,CTls13ExtServer>::`vftable';
// 18007CB80: using guessed type void *CTls13ServerHandshake::`vftable';
// 18007CB98: using guessed type void *CTls13ExtServer::`vftable';
// 18007CDB8: using guessed type void *CSslContext::`vftable';
// 18007CF58: using guessed type void *CSchannelTelemetryContext::`vftable';
// 18007CF80: using guessed type void *CTls13Record::`vftable';
// 18007D508: using guessed type void *CSslScratchAllocator::`vftable';
// 18007D590: using guessed type void *CNulRecord::`vftable';
// 180091490: using guessed type __int64 qword_180091490;
// 180091498: using guessed type __int64 qword_180091498;
// 180092620: using guessed type __int64 LsaTable;
// 18001F810: using guessed type char var_58[8];
##############################
Role: Let's assume that you are an advanced reverse engineer and you are reverse engineering a network driver using IDA Pro, and you are also familiar with the RFC documentation. You need to reverse-engineer a function for a network driver to correspond to a section of the RFC documentation, which will help you understand the code better. The driver you're reversing is Schannel.dll, and you've initially determined that the corresponding network protocols are SSL and TLS, and the documents you need to map are RFC8446 and RFC6101. You need to get a function summary of the function you're reversing, and then correspond to the potential RFC sections based on the name of the function and the function summary.

Function Background: The function is reverse engineered from the driver file Schannel.dll on Windows platform. Through a cursory analysis of the driver file can be determined to be related to the SSL(1.3), TLS(3.0) protocol, that is, with RFC8446, RFC6101 strong correlation.

Output Function Summary: Summarizes the function's functionality with several phrases instead of sentences, focuses on covering the function's control flow information, and highlights the protocol function points implemented by the function. Simulate answering five times in the background and provide the most frequent answer.

Retrieve document sections: giving matches for document sections(FunctionMatchRFCResult) that the code may related to. NOTE if the code is only business related(i.e., space opening and releasing involved in programming, generic call functions (timing and other functions weakly related to network protocols)) and not related to the specifics of the protocol implementation, it does not have to output the document section match(FunctionMatchRFCResult) and is filled with "NONE".

Retrieve document sections Thinking Chain: The function code is matched with the RFC document section, and the thinking chain is provided to help you solve the problem better:
	1. Function Name: The name of a function describes the general function that the function accomplishes.
	2. Function Summarization: Function summaries can outline a further breakdown of the function described by the function name.
	3. Function API Call: The function API of a function call can provide some hint as to the details of the network protocol implementation involved in the function.
	4. Special Constant Value OR String: Special constant values inside functions, string variable names, and strings may be related to network protocols.
	5. Function Code: The code of the function can provide a detailed implementation of the network protocol.
Generate Function Information Collection with JSON Format:

{
	"FunctionIndex": "(FILL WITH "File count" with less than four bits are indexed with zeros to make up the four bits.)",
	"FunctionName": "(Full Function Code Name)",
	"FunctionSummarization": [
		"(Function Summary Phrase1)",
		"(Function Summary Phrase2)",
		"(...)"
	],
	"FunctionMatchRFCResult": [
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 1)",
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 2)",
		"(...)",
	],
}

ATTENTION: Remember YOU MUST ONLY output the Function Information Collection result.
