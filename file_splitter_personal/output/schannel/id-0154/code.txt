Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 154
// Total lines: 159

//----- (000000018000D410) ----------------------------------------------------
__int64 __fastcall ParseInputBufferDesc(
        struct _SecBufferDesc *a1,
        struct _SecBuffer **a2,
        struct SPBuffer *a3,
        struct _SecBuffer **a4,
        struct _SecBuffer **a5,
        struct _SecBuffer **a6,
        struct _SecBuffer **a7,
        struct _SecBuffer **a8,
        struct _SecBuffer **a9,
        struct _SecBuffer **a10,
        struct _SecBuffer **a11,
        struct _SecBuffer **a12,
        struct _SecBuffer **a13)
{
  unsigned int cBuffers; // r11d
  unsigned int cbBuffer; // r10d
  struct SPBuffer *v15; // rsi
  struct _SecBuffer *v16; // rbx
  struct _SecBuffer *v17; // rdi
  struct _SecBuffer *v18; // rbp
  struct _SecBuffer *v19; // r14
  struct _SecBuffer *v20; // r15
  struct _SecBuffer *v21; // r12
  struct _SecBuffer *v22; // r13
  unsigned int v23; // eax
  PSecBuffer pBuffers; // r9
  unsigned int *p_BufferType; // r8
  int v26; // ecx
  struct _SecBuffer *v28; // [rsp+20h] [rbp-68h]
  struct _SecBuffer *v29; // [rsp+28h] [rbp-60h]
  struct _SecBuffer *v30; // [rsp+30h] [rbp-58h]
  struct _SecBuffer *v31; // [rsp+38h] [rbp-50h]
  struct _SecBuffer *v32; // [rsp+90h] [rbp+8h]

  cBuffers = a1->cBuffers;
  cbBuffer = 0;
  v32 = 0i64;
  v15 = a3;
  v28 = 0i64;
  v16 = 0i64;
  v29 = 0i64;
  v17 = 0i64;
  v30 = 0i64;
  v18 = 0i64;
  v31 = 0i64;
  v19 = 0i64;
  v20 = 0i64;
  v21 = 0i64;
  v22 = 0i64;
  v23 = 0;
  if ( !cBuffers )
    goto LABEL_22;
  pBuffers = a1->pBuffers;
  p_BufferType = &pBuffers->BufferType;
  do
  {
    v26 = *p_BufferType & 0xFFFFFFF;
    if ( v26 )
    {
      if ( v26 == 2 )
        goto LABEL_12;
      if ( v26 == 18 )
      {
        v19 = &pBuffers[v23];
      }
      else
      {
        switch ( v26 )
        {
          case 3:
            v32 = &pBuffers[v23];
            break;
          case 5:
            v18 = &pBuffers[v23];
            break;
          case 19:
            v20 = &pBuffers[v23];
            break;
          case 20:
            v21 = &pBuffers[v23];
            break;
          case 21:
            v28 = &pBuffers[v23];
            break;
          case 22:
            v22 = &pBuffers[v23];
            break;
          case 23:
            v29 = &pBuffers[v23];
            break;
          case 24:
            v30 = &pBuffers[v23];
            break;
          case 27:
            v31 = &pBuffers[v23];
            break;
          default:
            break;
        }
      }
    }
    else
    {
      if ( !v16 && !v32 && (*p_BufferType & 0x40000000) == 0 )
      {
LABEL_12:
        v16 = &pBuffers[v23];
        goto LABEL_13;
      }
      if ( !v17 )
        v17 = &pBuffers[v23];
    }
LABEL_13:
    ++v23;
    p_BufferType += 4;
  }
  while ( v23 < cBuffers );
  v15 = a3;
  cbBuffer = 0;
  if ( v16 )
    goto LABEL_15;
  if ( v32 )
  {
    v16 = v32;
LABEL_15:
    *((_QWORD *)a3 + 1) = v16->pvBuffer;
    *(_DWORD *)a3 = v16->cbBuffer;
    cbBuffer = v16->cbBuffer;
  }
  else
  {
LABEL_22:
    *((_QWORD *)v15 + 1) = 0i64;
    *(_DWORD *)v15 = 0;
  }
  *((_DWORD *)v15 + 1) = cbBuffer;
  if ( !v17
    && WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
  {
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 15i64, &WPP_cfd72fb444783f09dc03172c6e6e3628_Traceguids);
  }
  *a2 = v16;
  *a4 = v17;
  *a5 = v18;
  *a6 = v19;
  *a7 = v20;
  *a8 = v21;
  *a9 = v28;
  *a10 = v22;
  *a11 = v29;
  *a12 = v30;
  *a13 = v31;
  return 0i64;
}
// 18000D5F0: conditional instruction was optimized away because rbx.8==0
// 180041CB0: using guessed type __int64 __fastcall WPP_SF_(_QWORD, _QWORD, _QWORD);
