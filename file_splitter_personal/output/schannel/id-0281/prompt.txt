Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 281
// Total lines: 341

//----- (0000000180015AD0) ----------------------------------------------------
__int64 __fastcall SpMarshallSupplementalCredsV5(__int64 a1, unsigned __int8 *a2, unsigned int *a3, void **a4)
{
  void **v4; // rax
  unsigned __int8 *v5; // rsi
  unsigned int v6; // edi
  CCipherMill *v7; // rcx
  SIZE_T v8; // r14
  __int64 v9; // rbp
  __int64 v10; // r15
  unsigned int v11; // r12d
  __int64 v12; // r8
  __int64 v13; // r11
  __int64 v14; // r13
  unsigned int v15; // ebx
  __int64 v16; // rcx
  unsigned __int16 v17; // dx
  __int64 v18; // r10
  _OWORD *v19; // rax
  _QWORD *v20; // rbp
  char *v21; // rbx
  __int64 v22; // rcx
  char *v23; // r15
  unsigned int v24; // r14d
  __int64 v25; // r13
  __int64 v26; // rbx
  __int64 v27; // r12
  __int64 v28; // rcx
  unsigned int v29; // esi
  __int64 v30; // rbp
  __int64 v31; // rbx
  __int64 v32; // r14
  __int64 v34; // r9
  unsigned int v35; // r11d
  __int64 v36; // rcx
  __int64 v37; // r8
  unsigned int v38; // r9d
  __int64 v39; // rcx
  unsigned int v40; // esi
  __int64 v41; // r14
  __int64 v42; // rbx
  unsigned int v43; // r14d
  __int64 v44; // rbp
  __int64 v45; // rbx
  int v46; // [rsp+28h] [rbp-80h]
  __int64 v47; // [rsp+30h] [rbp-78h]
  __int64 v48; // [rsp+38h] [rbp-70h]
  __int64 v49; // [rsp+40h] [rbp-68h]
  __int64 v50; // [rsp+48h] [rbp-60h]
  _OWORD *v51; // [rsp+50h] [rbp-58h]
  int v52; // [rsp+B0h] [rbp+8h]
  unsigned int *v54; // [rsp+C0h] [rbp+18h]

  v54 = a3;
  v4 = a4;
  v5 = a2;
  v6 = 0;
  v7 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 0x20) != 0 )
  {
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 30i64, &WPP_ce922361a63b3a68cf8f3b43d0a887f8_Traceguids);
    v7 = WPP_GLOBAL_Control;
    v4 = a4;
    a3 = v54;
  }
  if ( v5 && v4 && a3 )
  {
    v8 = 72i64;
    v46 = 72;
    if ( *((_DWORD *)v5 + 2) )
    {
      v8 = 8i64 * *((unsigned int *)v5 + 2) + 72;
      v46 = 8 * *((_DWORD *)v5 + 2) + 72;
    }
    if ( *((_DWORD *)v5 + 8) )
    {
      v8 += 8i64 * *((unsigned int *)v5 + 8);
      v46 = v8;
    }
    v9 = *((unsigned int *)v5 + 14);
    if ( !(_DWORD)v9 )
    {
LABEL_28:
      v19 = LocalAlloc(0x40u, v8);
      v51 = v19;
      v20 = v19;
      if ( v19 )
      {
        v21 = (char *)v19 + 72;
        *v19 = *(_OWORD *)v5;
        v19[1] = *((_OWORD *)v5 + 1);
        v19[2] = *((_OWORD *)v5 + 2);
        v19[3] = *((_OWORD *)v5 + 3);
        *((_QWORD *)v19 + 8) = *((_QWORD *)v5 + 8);
        if ( *((_DWORD *)v5 + 2) )
        {
          memcpy_0((char *)v19 + 72, *((const void **)v5 + 2), 8i64 * *((unsigned int *)v5 + 2));
          v20[2] = v21;
          *((_DWORD *)v20 + 2) = *((_DWORD *)v5 + 2);
          v21 += 8 * *((unsigned int *)v5 + 2);
        }
        if ( *((_DWORD *)v5 + 8) )
        {
          memcpy_0(v21, *((const void **)v5 + 5), 8i64 * *((unsigned int *)v5 + 8));
          v20[5] = v21;
          *((_DWORD *)v20 + 8) = *((_DWORD *)v5 + 8);
          v21 += 8 * *((unsigned int *)v5 + 8);
        }
        if ( *((_DWORD *)v5 + 14) )
        {
          memcpy_0(v21, *((const void **)v5 + 8), 40i64 * *((unsigned int *)v5 + 14));
          v20[8] = v21;
          v22 = *((unsigned int *)v5 + 14);
          v52 = 0;
          v23 = &v21[40 * v22];
          if ( (_DWORD)v22 )
          {
            v24 = 0;
            do
            {
              v25 = *((_QWORD *)v5 + 8);
              v26 = v20[8];
              v50 = v25;
              v47 = v26;
              v27 = 5i64 * v24;
              if ( *(_DWORD *)(v25 + 40i64 * v24) )
              {
                memcpy_0(v23, *(const void **)(v25 + 40i64 * v24 + 8), 16i64 * *(unsigned int *)(v25 + 40i64 * v24));
                *(_QWORD *)(v26 + 40i64 * v24 + 8) = v23;
                v23 += 16 * *(unsigned int *)(v25 + 40i64 * v24);
                if ( *(_DWORD *)(v25 + 40i64 * v24) )
                {
                  v40 = 0;
                  v41 = v26;
                  do
                  {
                    v42 = 2i64 * v40;
                    memcpy_0(
                      v23,
                      *(const void **)(*(_QWORD *)(v25 + 8 * v27 + 8) + 16i64 * v40 + 8),
                      *(unsigned __int16 *)(*(_QWORD *)(v25 + 8 * v27 + 8) + 16i64 * v40 + 2));
                    ++v40;
                    *(_QWORD *)(*(_QWORD *)(v41 + 8 * v27 + 8) + 8 * v42 + 8) = v23;
                    v23 += *(unsigned __int16 *)(*(_QWORD *)(v25 + 8 * v27 + 8) + 8 * v42 + 2);
                  }
                  while ( v40 < *(_DWORD *)(v25 + 8 * v27) );
                  v5 = a2;
                  v24 = v52;
                  v26 = v47;
                }
              }
              if ( *(_DWORD *)(v25 + 8 * v27 + 20) )
              {
                memcpy_0(v23, *(const void **)(v25 + 8 * v27 + 24), 48i64 * *(unsigned int *)(v25 + 8 * v27 + 20));
                *(_QWORD *)(v26 + 8 * v27 + 24) = v23;
                v28 = *(unsigned int *)(v25 + 8 * v27 + 20);
                v23 += 48 * v28;
                if ( (_DWORD)v28 )
                {
                  v29 = 0;
                  do
                  {
                    v30 = *(_QWORD *)(v25 + 8 * v27 + 24);
                    v48 = v30;
                    v31 = 48i64 * v29;
                    v32 = *(_QWORD *)(v47 + 8 * v27 + 24);
                    v49 = v32;
                    memcpy_0(v23, *(const void **)(v31 + v30 + 16), *(unsigned __int16 *)(v31 + v30 + 10));
                    *(_QWORD *)(v31 + v32 + 16) = v23;
                    v23 += *(unsigned __int16 *)(v31 + v30 + 10);
                    if ( *(_DWORD *)(v31 + v30 + 24) )
                    {
                      memcpy_0(v23, *(const void **)(v31 + v30 + 32), 16i64 * *(unsigned int *)(v31 + v30 + 24));
                      *(_QWORD *)(v31 + v32 + 32) = v23;
                      v43 = 0;
                      v23 += 16 * *(unsigned int *)(v31 + v30 + 24);
                      if ( *(_DWORD *)(v31 + v30 + 24) )
                      {
                        v44 = 48i64 * v29;
                        do
                        {
                          v45 = 2i64 * v43;
                          memcpy_0(
                            v23,
                            *(const void **)(*(_QWORD *)(v48 + v44 + 32) + 16i64 * v43 + 8),
                            *(unsigned __int16 *)(*(_QWORD *)(v48 + v44 + 32) + 16i64 * v43 + 2));
                          ++v43;
                          *(_QWORD *)(*(_QWORD *)(v49 + v44 + 32) + 8 * v45 + 8) = v23;
                          v23 += *(unsigned __int16 *)(*(_QWORD *)(v48 + v44 + 32) + 8 * v45 + 2);
                        }
                        while ( v43 < *(_DWORD *)(v48 + v44 + 24) );
                        v25 = v50;
                        v6 = 0;
                      }
                    }
                    ++v29;
                  }
                  while ( v29 < *(_DWORD *)(v25 + 8 * v27 + 20) );
                  v5 = a2;
                  v20 = v51;
                  v24 = v52;
                }
              }
              v52 = ++v24;
            }
            while ( v24 < *((_DWORD *)v5 + 14) );
            LODWORD(v8) = v46;
          }
        }
        *((_DWORD *)v20 + 12) = *((_DWORD *)v5 + 12);
        *((_DWORD *)v20 + 13) = *((_DWORD *)v5 + 13);
        *((_DWORD *)v20 + 1) = *((_DWORD *)v5 + 1);
        *v54 = v8;
        *a4 = v20;
      }
      else
      {
        v6 = -1073741801;
      }
      v7 = WPP_GLOBAL_Control;
      goto LABEL_47;
    }
    if ( (unsigned int)v9 > 0x10 )
      return 3221225485i64;
    v10 = *((_QWORD *)v5 + 8);
    if ( v10 )
    {
      v11 = 0;
      v8 += 40 * v9;
      v46 = v8;
      while ( 1 )
      {
        v12 = *(unsigned int *)(v10 + 40i64 * v11);
        if ( (_DWORD)v12 )
          break;
LABEL_16:
        v13 = *(unsigned int *)(v10 + 40i64 * v11 + 20);
        if ( (_DWORD)v13 )
        {
          if ( (unsigned int)v13 <= 0x10 )
          {
            v14 = *(_QWORD *)(v10 + 40i64 * v11 + 24);
            if ( v14 )
            {
              v15 = 0;
              v8 += 48 * v13;
              while ( 1 )
              {
                v16 = v14 + 48i64 * v15;
                if ( !*(_WORD *)(v16 + 10) )
                  break;
                v17 = *(_WORD *)(v16 + 10);
                if ( ((*(_WORD *)(v16 + 8) | v17) & 1) != 0
                  || *(_WORD *)(v16 + 8) > v17
                  || v17 == 0xFFFF
                  || !*(_QWORD *)(v16 + 16) && (*(_WORD *)(v16 + 8) || v17) )
                {
                  break;
                }
                v18 = *(unsigned int *)(v16 + 24);
                v8 += *(unsigned __int16 *)(v16 + 10);
                v46 = v8;
                if ( (_DWORD)v18 )
                {
                  if ( (unsigned int)v18 <= 0x10 )
                  {
                    v37 = *(_QWORD *)(v16 + 32);
                    if ( v37 )
                    {
                      v38 = 0;
                      v8 += 16 * v18;
                      while ( 1 )
                      {
                        v39 = *(unsigned __int16 *)(v37 + 16i64 * v38 + 2);
                        if ( !(_WORD)v39
                          || (((unsigned __int16)v39 | *(_WORD *)(v37 + 16i64 * v38)) & 1) != 0
                          || *(_WORD *)(v37 + 16i64 * v38) > (unsigned __int16)v39
                          || (_WORD)v39 == 0xFFFF
                          || !*(_QWORD *)(v37 + 16i64 * v38 + 8) )
                        {
                          break;
                        }
                        v8 += v39;
                        ++v38;
                        v46 = v8;
                        if ( v38 >= (unsigned int)v18 )
                          goto LABEL_26;
                      }
                    }
                  }
                  return 3221225485i64;
                }
LABEL_26:
                if ( ++v15 >= (unsigned int)v13 )
                  goto LABEL_27;
              }
            }
          }
          return 3221225485i64;
        }
LABEL_27:
        if ( ++v11 >= (unsigned int)v9 )
          goto LABEL_28;
      }
      if ( (unsigned int)v12 <= 0x10 )
      {
        v34 = *(_QWORD *)(v10 + 40i64 * v11 + 8);
        if ( v34 )
        {
          v35 = 0;
          v8 += 16 * v12;
          while ( 1 )
          {
            v36 = *(unsigned __int16 *)(v34 + 16i64 * v35 + 2);
            if ( !(_WORD)v36
              || (((unsigned __int16)v36 | *(_WORD *)(v34 + 16i64 * v35)) & 1) != 0
              || *(_WORD *)(v34 + 16i64 * v35) > (unsigned __int16)v36
              || (_WORD)v36 == 0xFFFF
              || !*(_QWORD *)(v34 + 16i64 * v35 + 8) )
            {
              break;
            }
            v8 += v36;
            ++v35;
            v46 = v8;
            if ( v35 >= (unsigned int)v12 )
              goto LABEL_16;
          }
        }
      }
      return 3221225485i64;
    }
  }
  v6 = -1073741811;
LABEL_47:
  if ( v7 != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)v7 + 28) & 4) != 0 )
    WPP_SF_D(*((_QWORD *)v7 + 2), 31i64, &WPP_ce922361a63b3a68cf8f3b43d0a887f8_Traceguids, v6);
  return v6;
}
// 180041CB0: using guessed type __int64 __fastcall WPP_SF_(_QWORD, _QWORD, _QWORD);
// 180041CDC: using guessed type __int64 __fastcall WPP_SF_D(_QWORD, _QWORD, _QWORD, _QWORD);
##############################
Role: Let's assume that you are an advanced reverse engineer and you are reverse engineering a network driver using IDA Pro, and you are also familiar with the RFC documentation. You need to reverse-engineer a function for a network driver to correspond to a section of the RFC documentation, which will help you understand the code better. The driver you're reversing is Schannel.dll, and you've initially determined that the corresponding network protocols are SSL and TLS, and the documents you need to map are RFC8446 and RFC6101. You need to get a function summary of the function you're reversing, and then correspond to the potential RFC sections based on the name of the function and the function summary.

Function Background: The function is reverse engineered from the driver file Schannel.dll on Windows platform. Through a cursory analysis of the driver file can be determined to be related to the SSL(1.3), TLS(3.0) protocol, that is, with RFC8446, RFC6101 strong correlation.

Output Function Summary: Summarizes the function's functionality with several phrases instead of sentences, focuses on covering the function's control flow information, and highlights the protocol function points implemented by the function. Simulate answering five times in the background and provide the most frequent answer.

Retrieve document sections: giving matches for document sections(FunctionMatchRFCResult) that the code may related to. NOTE if the code is only business related(i.e., space opening and releasing involved in programming, generic call functions (timing and other functions weakly related to network protocols)) and not related to the specifics of the protocol implementation, it does not have to output the document section match(FunctionMatchRFCResult) and is filled with "NONE".

Retrieve document sections Thinking Chain: The function code is matched with the RFC document section, and the thinking chain is provided to help you solve the problem better:
	1. Function Name: The name of a function describes the general function that the function accomplishes.
	2. Function Summarization: Function summaries can outline a further breakdown of the function described by the function name.
	3. Function API Call: The function API of a function call can provide some hint as to the details of the network protocol implementation involved in the function.
	4. Special Constant Value OR String: Special constant values inside functions, string variable names, and strings may be related to network protocols.
	5. Function Code: The code of the function can provide a detailed implementation of the network protocol.
Generate Function Information Collection with JSON Format:

{
	"FunctionIndex": "(FILL WITH "File count" with less than four bits are indexed with zeros to make up the four bits.)",
	"FunctionName": "(Full Function Code Name)",
	"FunctionSummarization": [
		"(Function Summary Phrase1)",
		"(Function Summary Phrase2)",
		"(...)"
	],
	"FunctionMatchRFCResult": [
		"(RFCXXXX-SectionX.X.X.X-Section Title 1)",
		"(RFCXXXX-SectionX.X.X.X-Section Title 2)",
		"(...)",
	],
}

ATTENTION: Remember YOU MUST ONLY output the Function Information Collection result.
