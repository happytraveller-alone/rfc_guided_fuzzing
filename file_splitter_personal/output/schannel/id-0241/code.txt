Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 241
// Total lines: 106

//----- (0000000180014090) ----------------------------------------------------
__int64 __fastcall CSslContext::PopulateSerialContextState(CSslContext *this, struct _SSL_PACKED_CONTEXT *a2)
{
  int v4; // r14d
  __int64 v5; // rax
  int v6; // ecx
  int v7; // eax
  unsigned int v8; // esi
  unsigned int v9; // ebp
  CCipherMill *v10; // rcx
  int v11; // edx
  __int64 v12; // rax
  int v13; // ecx
  __int64 result; // rax
  unsigned int v15; // esi
  __int64 v16; // rdx
  unsigned int v17; // eax
  int *v18; // rax
  unsigned int v19; // r9d

  *(_DWORD *)a2 = *((_DWORD *)this + 17);
  v4 = 0;
  *((_QWORD *)a2 + 1) = *((_QWORD *)this + 17);
  *((_DWORD *)a2 + 4) = *((_DWORD *)this + 16);
  *((_BYTE *)a2 + 44) = (*(__int64 (__fastcall **)(CSslContext *))(*(_QWORD *)this + 360i64))(this);
  *((_QWORD *)a2 + 10) = *((_QWORD *)this + 16);
  if ( (*((_BYTE *)this + 32) & 8) != 0 && (v5 = *((_QWORD *)this + 1)) != 0 )
    v6 = *(_DWORD *)(v5 + 28);
  else
    v6 = 0;
  *((_DWORD *)a2 + 5) = v6;
  *((_DWORD *)a2 + 7) = *(_DWORD *)(*((_QWORD *)this + 11) + 8i64);
  *((_DWORD *)a2 + 6) = *((_DWORD *)this + 4);
  if ( (*((_BYTE *)this + 32) & 8) != 0 )
    v7 = *((_DWORD *)this + 11);
  else
    v7 = 0;
  *((_DWORD *)a2 + 8) = v7;
  *((_DWORD *)a2 + 38) = *((_DWORD *)this + 15);
  v8 = *((_DWORD *)this + 11);
  v9 = *((_DWORD *)this + 13);
  v10 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
  {
    WPP_SF_D(
      *((_QWORD *)WPP_GLOBAL_Control + 2),
      11i64,
      &WPP_c955f13c15ab3d9e41a0e2d56db0bfe4_Traceguids,
      *((unsigned int *)this + 16));
    v10 = WPP_GLOBAL_Control;
  }
  if ( CSslGlobals::m_bSendAuxRecord != 2
    && (CSslGlobals::m_bSendAuxRecord == 1 || (*(_DWORD *)(*((_QWORD *)this + 10) + 156i64) & 0x400) != 0) )
  {
    v11 = *((_DWORD *)this + 16);
    if ( (unsigned int)(v11 - 3) <= 0x2FE && ((v11 - 65277) & 0xFFFFFFFD) != 0 && (*((_BYTE *)this + 56) & 1) != 0 )
    {
      v19 = *((_DWORD *)this + 12);
      if ( v9 )
        v19 += v9 - v19 % v9;
      v8 = v19 + *((_DWORD *)this + 11) + *((_DWORD *)this + 15) - 1;
    }
  }
  if ( v10 != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)v10 + 28) & 4) != 0 )
    WPP_SF_D(*((_QWORD *)v10 + 2), 12i64, &WPP_c955f13c15ab3d9e41a0e2d56db0bfe4_Traceguids, v8);
  *((_DWORD *)a2 + 9) = v8;
  v12 = (*(__int64 (__fastcall **)(CSslContext *))(*(_QWORD *)this + 248i64))(this);
  if ( v12 )
    v13 = *(_DWORD *)(v12 + 428);
  else
    v13 = 0;
  *((_DWORD *)a2 + 10) = v13;
  result = (*(__int64 (__fastcall **)(CSslContext *, char *, char *))(*(_QWORD *)this + 64i64))(
             this,
             (char *)a2 + 144,
             (char *)a2 + 148);
  v15 = result;
  if ( (int)result >= 0 )
  {
    *((_QWORD *)a2 + 6) = *((_QWORD *)this + 22);
    *((_QWORD *)a2 + 7) = *((_QWORD *)this + 23);
    *((_DWORD *)a2 + 22) = 32;
    v16 = *((_QWORD *)this + 11);
    v17 = *(unsigned __int16 *)(v16 + 238);
    if ( v17 <= 0x20 )
    {
      *((_DWORD *)a2 + 22) = v17;
      memcpy_0((char *)a2 + 92, (const void *)(v16 + 240), *(unsigned __int16 *)(v16 + 238));
    }
    *((_DWORD *)a2 + 44) = *((_DWORD *)this + 48);
    *((_QWORD *)a2 + 20) = *((_QWORD *)this + 25);
    *((_QWORD *)a2 + 21) = *((_QWORD *)this + 26);
    *((_WORD *)a2 + 90) = *((_WORD *)this + 108);
    *((_WORD *)a2 + 91) = *((_WORD *)this + 109);
    v18 = (int *)*((_QWORD *)this + 28);
    if ( v18 )
      v4 = *v18;
    *((_DWORD *)a2 + 46) = v4;
    *((_DWORD *)a2 + 47) = CSslGlobals::m_dwMaxEncryptedRecords;
    *((_BYTE *)a2 + 192) = (*(__int64 (__fastcall **)(CSslContext *))(*(_QWORD *)this + 176i64))(this);
    return v15;
  }
  return result;
}
// 180041CDC: using guessed type __int64 __fastcall WPP_SF_D(_QWORD, _QWORD, _QWORD, _QWORD);
// 1800927BC: using guessed type unsigned int CSslGlobals::m_bSendAuxRecord;
