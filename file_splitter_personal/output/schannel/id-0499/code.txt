Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 499
// Total lines: 98

//----- (000000018002492C) ----------------------------------------------------
CMasterEccCurveInfo *__fastcall CMasterEccCurveInfo::CMasterEccCurveInfo(
        CMasterEccCurveInfo *this,
        struct ProviderEccCurves *a2,
        struct CEccCurveInfo *a3,
        struct PROVIDER_TO_ECC_CURVES *a4,
        unsigned int a5)
{
  __int64 v6; // rbx
  unsigned int *v7; // r11
  __int64 v8; // rsi
  unsigned int v9; // ebp
  __int64 v10; // rax
  __int64 v11; // rdx
  __int64 v12; // r8
  __int64 v13; // r9

  *((_DWORD *)this + 3) = 1;
  *((_DWORD *)this + 2) = a5;
  *(_QWORD *)this = a2;
  if ( a5 )
  {
    v6 = 0i64;
    v7 = (unsigned int *)((char *)a4 + 8);
    v8 = a5;
    do
    {
      *(_DWORD *)(v6 + *(_QWORD *)this + 8) = *v7;
      *(_BYTE *)(v6 + *(_QWORD *)this + 24) = *((_BYTE *)v7 + 8);
      *(_QWORD *)(v6 + *(_QWORD *)this + 16) = this;
      if ( *v7 )
      {
        v9 = 0;
        *(_QWORD *)(v6 + *(_QWORD *)this) = a3;
        v10 = *v7;
        if ( (_DWORD)v10 )
        {
          do
          {
            v11 = 780i64 * v9;
            v12 = v11 + *((_QWORD *)v7 - 1);
            v13 = v11 + *(_QWORD *)(v6 + *(_QWORD *)this);
            *(_OWORD *)v13 = *(_OWORD *)v12;
            *(_OWORD *)(v13 + 16) = *(_OWORD *)(v12 + 16);
            *(_OWORD *)(v13 + 32) = *(_OWORD *)(v12 + 32);
            *(_OWORD *)(v13 + 48) = *(_OWORD *)(v12 + 48);
            *(_OWORD *)(v13 + 64) = *(_OWORD *)(v12 + 64);
            *(_OWORD *)(v13 + 80) = *(_OWORD *)(v12 + 80);
            *(_OWORD *)(v13 + 96) = *(_OWORD *)(v12 + 96);
            *(_OWORD *)(v13 + 112) = *(_OWORD *)(v12 + 112);
            *(_OWORD *)(v13 + 128) = *(_OWORD *)(v12 + 128);
            *(_OWORD *)(v13 + 144) = *(_OWORD *)(v12 + 144);
            *(_OWORD *)(v13 + 160) = *(_OWORD *)(v12 + 160);
            *(_OWORD *)(v13 + 176) = *(_OWORD *)(v12 + 176);
            *(_OWORD *)(v13 + 192) = *(_OWORD *)(v12 + 192);
            *(_OWORD *)(v13 + 208) = *(_OWORD *)(v12 + 208);
            *(_OWORD *)(v13 + 224) = *(_OWORD *)(v12 + 224);
            *(_QWORD *)(v13 + 240) = *(_QWORD *)(v12 + 240);
            *(_DWORD *)(v13 + 248) = *(_DWORD *)(v12 + 248);
            *(_WORD *)(v13 + 252) = *(_WORD *)(v12 + 252);
            *(_BYTE *)(v13 + 254) = *(_BYTE *)(v12 + 254);
            *(_OWORD *)(v13 + 510) = *(_OWORD *)(v12 + 510);
            *(_OWORD *)(v13 + 526) = *(_OWORD *)(v12 + 526);
            *(_OWORD *)(v13 + 542) = *(_OWORD *)(v12 + 542);
            *(_OWORD *)(v13 + 558) = *(_OWORD *)(v12 + 558);
            *(_OWORD *)(v13 + 574) = *(_OWORD *)(v12 + 574);
            *(_OWORD *)(v13 + 590) = *(_OWORD *)(v12 + 590);
            *(_OWORD *)(v13 + 606) = *(_OWORD *)(v12 + 606);
            *(_OWORD *)(v13 + 622) = *(_OWORD *)(v12 + 622);
            *(_OWORD *)(v13 + 638) = *(_OWORD *)(v12 + 638);
            *(_OWORD *)(v13 + 654) = *(_OWORD *)(v12 + 654);
            *(_OWORD *)(v13 + 670) = *(_OWORD *)(v12 + 670);
            *(_OWORD *)(v13 + 686) = *(_OWORD *)(v12 + 686);
            *(_OWORD *)(v13 + 702) = *(_OWORD *)(v12 + 702);
            *(_OWORD *)(v13 + 718) = *(_OWORD *)(v12 + 718);
            *(_OWORD *)(v13 + 734) = *(_OWORD *)(v12 + 734);
            ++v9;
            *(_QWORD *)(v13 + 750) = *(_QWORD *)(v12 + 750);
            *(_DWORD *)(v13 + 758) = *(_DWORD *)(v12 + 758);
            *(_WORD *)(v13 + 762) = *(_WORD *)(v12 + 762);
            *(_BYTE *)(v13 + 764) = *(_BYTE *)(v12 + 764);
            *(_DWORD *)(v13 + 772) = *(_DWORD *)(v12 + 772);
            *(_DWORD *)(v13 + 768) = *(_DWORD *)(v12 + 768);
            *(_DWORD *)(v13 + 776) = *(_DWORD *)(v12 + 776);
            v10 = *v7;
          }
          while ( v9 < (unsigned int)v10 );
        }
        a3 = (struct CEccCurveInfo *)((char *)a3 + 780 * v10);
      }
      v7 += 6;
      v6 += 32i64;
      --v8;
    }
    while ( v8 );
  }
  return this;
}
