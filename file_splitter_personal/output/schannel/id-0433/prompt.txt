Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 433
// Total lines: 378

//----- (0000000180019B10) ----------------------------------------------------
__int64 __fastcall CSsl3TlsServerContext::TlsParseClientHello(
        CSsl3TlsServerContext *this,
        unsigned __int8 *a2,
        unsigned __int8 *a3,
        unsigned __int8 *const a4,
        unsigned int *a5,
        unsigned int **a6,
        unsigned int *a7)
{
  CSsl3TlsServerContext *v7; // r14
  unsigned int v8; // ecx
  __int64 v9; // rax
  bool v10; // r12
  __int64 v11; // rsi
  unsigned __int8 *v12; // rbx
  int v13; // edi
  unsigned __int8 *v14; // rbx
  unsigned int v15; // edi
  int v16; // eax
  unsigned int v17; // r15d
  unsigned __int8 *v18; // rbx
  unsigned int v19; // edi
  unsigned int v20; // ebp
  unsigned int **v21; // r11
  unsigned __int8 *v22; // r13
  unsigned int v23; // r10d
  unsigned int v24; // eax
  __int64 v25; // rsi
  unsigned int v26; // r14d
  unsigned int v27; // edi
  unsigned __int8 *v28; // rbx
  unsigned __int8 *v29; // rdx
  __int64 v30; // rcx
  _BYTE *v31; // rbx
  unsigned int v32; // edi
  unsigned int v33; // eax
  unsigned int v34; // edi
  int v35; // ebx
  unsigned int v36; // ebx
  char v37; // r12
  unsigned __int8 v38; // r15
  unsigned __int8 *v39; // rdi
  char v40; // r12
  CCipherMill *v41; // r10
  unsigned __int16 v42; // si
  unsigned int v43; // r14d
  unsigned __int8 *v44; // rdi
  unsigned int v45; // ebx
  unsigned int v46; // eax
  unsigned int v47; // esi
  __int64 result; // rax
  __int64 v49; // rcx
  unsigned int v50; // edi
  CCipherMill *v51; // rcx
  __int64 v52; // rdx
  unsigned int *Memory; // [rsp+30h] [rbp-68h]
  void **v54; // [rsp+38h] [rbp-60h] BYREF
  CSsl3TlsServerContext *v55; // [rsp+40h] [rbp-58h]
  int v56; // [rsp+48h] [rbp-50h]
  int v57; // [rsp+4Ch] [rbp-4Ch]
  __int16 v58; // [rsp+50h] [rbp-48h]
  char v59; // [rsp+52h] [rbp-46h]
  char v60; // [rsp+53h] [rbp-45h]
  CSsl3TlsServerContext *v61; // [rsp+58h] [rbp-40h]
  char v63; // [rsp+B0h] [rbp+18h]

  v63 = 0;
  *((_BYTE *)this + 554) = 0;
  v7 = this;
  if ( (unsigned int)a3 < 2 )
    goto LABEL_55;
  v8 = a2[1] + (*a2 << 8);
  if ( v8 < 0x300 )
  {
    CSslContext::SetErrorAndFatalAlert((__int64)v7, 1201, -2146893048, 0x46u);
    goto LABEL_55;
  }
  v9 = *((_QWORD *)v7 + 15);
  v10 = CSchannelTelemetryContext::m_bTelemetryIsGloballyInitialized;
  *((_DWORD *)v7 + 9) = v8;
  if ( v9 && v10 )
    *(_DWORD *)(v9 + 44) = v8;
  if ( (unsigned int)((_DWORD)a3 - 2) < 0x20 )
    goto LABEL_55;
  *((_OWORD *)v7 + 17) = *(_OWORD *)(a2 + 2);
  *((_OWORD *)v7 + 18) = *(_OWORD *)(a2 + 18);
  if ( (_DWORD)a3 == 34 )
    goto LABEL_55;
  v11 = a2[34];
  if ( (unsigned int)v11 > 0x20 )
    goto LABEL_55;
  v12 = a2 + 35;
  v13 = (_DWORD)a3 - 35;
  if ( (int)a3 - 35 < (unsigned int)v11 )
    goto LABEL_55;
  if ( a2[34] )
    memcpy_0(a4, v12, a2[34]);
  v14 = &v12[v11];
  v15 = v13 - v11;
  *a5 = v11;
  if ( *((_BYTE *)v7 + 233) )
  {
    if ( !v15 )
      goto LABEL_55;
    v49 = *v14;
    if ( (unsigned int)v49 > 0x20 )
      goto LABEL_55;
    v50 = v15 - 1;
    if ( v50 < (unsigned int)v49 )
      goto LABEL_55;
    v14 += v49 + 1;
    v15 = v50 - v49;
  }
  if ( v15 < 2 || (v16 = v14[1], v17 = v16 + (*v14 << 8), (v16 & 1) != 0) || (v18 = v14 + 2, v19 = v15 - 2, v19 < v17) )
  {
LABEL_55:
    v47 = -2146893048;
    v23 = 0;
    goto LABEL_51;
  }
  v20 = v17 >> 1;
  if ( v17 >> 1 > *a7 )
  {
    Memory = (unsigned int *)CSslContext::GetMemory(v7, 4 * v20);
    v22 = (unsigned __int8 *)Memory;
    if ( Memory )
    {
      v10 = CSchannelTelemetryContext::m_bTelemetryIsGloballyInitialized;
      v21 = a6;
      goto LABEL_18;
    }
    if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) != 0 )
    {
      WPP_SF_d(
        *((_QWORD *)WPP_GLOBAL_Control + 2),
        0x36u,
        (__int64)&WPP_095c39149c3f336b5b94efe855075ae2_Traceguids,
        4 * v20);
      v23 = 0;
      v47 = -2146893048;
      goto LABEL_51;
    }
    goto LABEL_55;
  }
  v21 = a6;
  v22 = (unsigned __int8 *)*a6;
  Memory = *a6;
LABEL_18:
  v23 = 0;
  v24 = 0;
  if ( v20 )
  {
    a4 = v22;
    do
    {
      a3 = (unsigned __int8 *)(v18[2 * v24 + 1] | (v18[2 * v24] << 8));
      *(_DWORD *)a4 = (_DWORD)a3;
      if ( (_DWORD)a3 == 255 )
      {
        if ( *((_DWORD *)v7 + 104) )
        {
          if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control
            && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) != 0 )
          {
            WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 55i64, &WPP_095c39149c3f336b5b94efe855075ae2_Traceguids);
          }
          CSslContext::SetErrorAndFatalAlert((__int64)v7, 1207, -2146892986, 0x28u);
          *((_DWORD *)v7 + 17) = 96;
          v47 = -2146892986;
          *((_WORD *)v7 + 48) = 10242;
          goto LABEL_82;
        }
        *((_BYTE *)v7 + 553) = 1;
        v63 = 1;
      }
      ++v24;
      a4 += 4;
    }
    while ( v24 < v20 );
  }
  v25 = *((_QWORD *)v7 + 15);
  v26 = v17 >> 1;
  if ( v25 && v10 )
  {
    *(_DWORD *)(v25 + 1580) = v20;
    if ( v20 > 0x64 )
      v26 = 100;
    memcpy_0((void *)(v25 + 1176), v22, 4i64 * v26);
    v21 = a6;
    v23 = 0;
    *(_WORD *)(v25 + 1576) = v26;
  }
  v27 = v19 - v17;
  v28 = &v18[v17];
  v29 = v28;
  if ( !v27 )
  {
    v7 = this;
    v47 = -2146893048;
    goto LABEL_83;
  }
  v30 = *v28;
  if ( !*v28 )
  {
    v7 = this;
    v47 = -2146893048;
    goto LABEL_83;
  }
  v31 = v28 + 1;
  v32 = v27 - 1;
  if ( v32 < (unsigned int)v30 )
  {
    v7 = this;
    v47 = -2146893048;
    goto LABEL_83;
  }
  v33 = 0;
  while ( *v31 )
  {
    ++v33;
    ++v31;
    if ( v33 >= (unsigned int)v30 )
    {
      if ( v33 == (_DWORD)v30 )
      {
        v7 = this;
        v47 = -2146893048;
        goto LABEL_83;
      }
      break;
    }
  }
  v34 = v32 - v30;
  if ( v34 < 2 )
    goto LABEL_47;
  v7 = this;
  v35 = v29[v30 + 1];
  v54 = &CTlsExtServer::`vftable';
  v36 = v29[v30 + 2] | (v35 << 8);
  v55 = this;
  v57 = 0;
  v58 = 0;
  v59 = 0;
  v61 = this;
  if ( v34 - 2 < v36 )
  {
LABEL_48:
    v47 = 0;
    goto LABEL_49;
  }
  v37 = *((_BYTE *)this + 64);
  v38 = 0;
  v56 = 1;
  v39 = &v29[v30 + 3];
  *((_BYTE *)this + 922) = 0;
  v40 = v37 & 0x30;
  v60 = 0;
  if ( !v36 )
  {
LABEL_46:
    (*(void (__fastcall **)(CSsl3TlsServerContext *, _QWORD, unsigned __int8 *, unsigned __int8 *const))(*(_QWORD *)v55 + 352i64))(
      v55,
      v38,
      a3,
      a4);
LABEL_47:
    v7 = this;
    goto LABEL_48;
  }
  v41 = WPP_GLOBAL_Control;
  while ( 1 )
  {
    if ( v36 < 4 )
      goto LABEL_89;
    v42 = _byteswap_ushort(*((_WORD *)v39 + 1));
    v43 = v39[1] | (*v39 << 8);
    if ( v41 != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)v41 + 28) & 4) != 0 )
    {
      WPP_SF_D(*((_QWORD *)v41 + 2), 73i64, &WPP_f49a95b901763c3505884ea2834cd757_Traceguids, v43);
      v41 = WPP_GLOBAL_Control;
    }
    v44 = v39 + 4;
    v45 = v36 - 4;
    if ( v45 < v42 )
    {
      if ( v41 != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)v41 + 28) & 2) != 0 )
        WPP_SF_(*((_QWORD *)v41 + 2), 74i64, &WPP_f49a95b901763c3505884ea2834cd757_Traceguids);
LABEL_89:
      v47 = -2146893018;
      goto LABEL_90;
    }
    a3 = v44;
    v39 = &v44[v42];
    v36 = v45 - v42;
    if ( !v40 || v43 == 65281 )
      break;
LABEL_45:
    if ( !v36 )
      goto LABEL_46;
  }
  v46 = ((__int64 (__fastcall *)(void ***, _QWORD, unsigned __int8 *, _QWORD))v54[1])(&v54, v43, a3, v42);
  v47 = v46;
  if ( !v46 )
  {
    v41 = WPP_GLOBAL_Control;
    if ( v43 == 65281 )
      v38 = 1;
    goto LABEL_45;
  }
  if ( v46 == -2146892986 || v46 == -2146892953 )
  {
    v7 = this;
    goto LABEL_81;
  }
LABEL_90:
  v7 = this;
  CSslContext::SetErrorAndFatalAlert((__int64)this, 1202, -2146893048, 0xAu);
LABEL_81:
  if ( !v47 )
  {
LABEL_49:
    if ( !*((_BYTE *)v7 + 554) && !v63 )
    {
      if ( !g_fAllowInsecureRenegoClients )
      {
        v51 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control == (CCipherMill *)&WPP_GLOBAL_Control || (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) == 0 )
          goto LABEL_101;
        v52 = 56i64;
LABEL_100:
        WPP_SF_(*((_QWORD *)v51 + 2), v52, &WPP_095c39149c3f336b5b94efe855075ae2_Traceguids);
LABEL_101:
        CSslContext::SetErrorAndFatalAlert((__int64)v7, 1207, -2146892986, 0x28u);
        result = 2148074310i64;
        *((_DWORD *)v7 + 17) = 96;
        *((_WORD *)v7 + 48) = 10242;
        return result;
      }
      if ( *((_BYTE *)v7 + 553) )
      {
        v51 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control == (CCipherMill *)&WPP_GLOBAL_Control || (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) == 0 )
          goto LABEL_101;
        v52 = 57i64;
        goto LABEL_100;
      }
    }
    v23 = v20;
    *a6 = Memory;
    goto LABEL_51;
  }
LABEL_82:
  v21 = a6;
  v23 = 0;
  v22 = (unsigned __int8 *)Memory;
LABEL_83:
  if ( v22 && v22 != (unsigned __int8 *)*v21 )
  {
    (*(void (__fastcall **)(CSsl3TlsServerContext *, unsigned __int8 *, unsigned __int8 *, unsigned __int8 *const))(*(_QWORD *)v7 + 16i64))(
      v7,
      v22,
      a3,
      a4);
    v23 = 0;
  }
LABEL_51:
  result = v47;
  *a7 = v23;
  return result;
}
// 180019E70: variable 'a3' is possibly undefined
// 180019E70: variable 'a4' is possibly undefined
// 180041CB0: using guessed type __int64 __fastcall WPP_SF_(_QWORD, _QWORD, _QWORD);
// 180041CDC: using guessed type __int64 __fastcall WPP_SF_D(_QWORD, _QWORD, _QWORD, _QWORD);
// 18007C320: using guessed type void *CTlsExtServer::`vftable';
// 1800919AC: using guessed type int g_fAllowInsecureRenegoClients;
// 1800927AC: using guessed type bool CSchannelTelemetryContext::m_bTelemetryIsGloballyInitialized;
##############################
Role: Let's assume that you are an advanced reverse engineer and you are reverse engineering a network driver using IDA Pro, and you are also familiar with the RFC documentation. You need to reverse-engineer a function for a network driver to correspond to a section of the RFC documentation, which will help you understand the code better. The driver you're reversing is Schannel.dll, and you've initially determined that the corresponding network protocols are SSL and TLS, and the documents you need to map are RFC8446 and RFC6101. You need to get a function summary of the function you're reversing, and then correspond to the potential RFC sections based on the name of the function and the function summary.

Function Background: The function is reverse engineered from the driver file Schannel.dll on Windows platform. Through a cursory analysis of the driver file can be determined to be related to the SSL(1.3), TLS(3.0) protocol, that is, with RFC8446, RFC6101 strong correlation.

Output Function Summary: Summarizes the function's functionality with several phrases instead of sentences, focuses on covering the function's control flow information, and highlights the protocol function points implemented by the function. Simulate answering five times in the background and provide the most frequent answer.

Retrieve document sections: giving matches for document sections(FunctionMatchRFCResult) that the code may related to. NOTE if the code is only business related(i.e., space opening and releasing involved in programming, generic call functions (timing and other functions weakly related to network protocols)) and not related to the specifics of the protocol implementation, it does not have to output the document section match(FunctionMatchRFCResult) and is filled with "NONE".

Retrieve document sections Thinking Chain: The function code is matched with the RFC document section, and the thinking chain is provided to help you solve the problem better:
	1. Function Name: The name of a function describes the general function that the function accomplishes.
	2. Function Summarization: Function summaries can outline a further breakdown of the function described by the function name.
	3. Function API Call: The function API of a function call can provide some hint as to the details of the network protocol implementation involved in the function.
	4. Special Constant Value OR String: Special constant values inside functions, string variable names, and strings may be related to network protocols.
	5. Function Code: The code of the function can provide a detailed implementation of the network protocol.
Generate Function Information Collection with JSON Format:

{
	"FunctionIndex": "(FILL WITH "File count" with less than four bits are indexed with zeros to make up the four bits.)",
	"FunctionName": "(Full Function Code Name)",
	"FunctionSummarization": [
		"(Function Summary Phrase1)",
		"(Function Summary Phrase2)",
		"(...)"
	],
	"FunctionMatchRFCResult": [
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 1)",
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 2)",
		"(...)",
	],
}

ATTENTION: Remember YOU MUST ONLY output the Function Information Collection result.
