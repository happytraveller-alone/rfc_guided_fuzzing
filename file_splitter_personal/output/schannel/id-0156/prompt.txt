Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 156
// Total lines: 349

//----- (000000018000D7D0) ----------------------------------------------------
__int64 __fastcall AscIscPostProcessing(
        int a1,
        struct CSslContext *a2,
        struct CSslParentContext *a3,
        struct _SecBuffer *a4,
        struct _SecBuffer *a5,
        struct _SecBuffer *a6,
        struct SPBuffer *a7,
        struct _SecBuffer *a8,
        struct SPBuffer *a9,
        unsigned __int64 a10,
        unsigned __int8 *a11,
        union _LARGE_INTEGER *a12)
{
  int v12; // r8d
  unsigned int v13; // r13d
  unsigned int v15; // edi
  int v16; // esi
  int v17; // eax
  int v18; // edi
  __int64 v19; // rax
  int v20; // eax
  const WCHAR *v21; // rdi
  WCHAR *v22; // r14
  __int64 v23; // rsi
  __int64 v24; // r12
  const WCHAR *v25; // rsi
  __int64 v26; // r15
  const WCHAR *v27; // r15
  __int64 v28; // rax
  int v29; // r12d
  int v30; // ecx
  unsigned int v31; // r9d
  __int64 v33; // rbx
  __int64 v34; // rax
  struct _RTL_RESOURCE *v35; // rcx
  DWORD v36; // eax
  WCHAR *v37; // rax
  __int64 v38; // rcx
  CCipherMill *v39; // rcx
  unsigned int v40; // edi
  const WCHAR *v41; // rdx
  __int64 v42; // rdx
  __int64 csz; // [rsp+20h] [rbp-A1h]
  const WCHAR *SourceString; // [rsp+50h] [rbp-71h]
  struct _UNICODE_STRING v45; // [rsp+58h] [rbp-69h] BYREF
  struct _UNICODE_STRING v46; // [rsp+68h] [rbp-59h] BYREF
  struct _UNICODE_STRING v47; // [rsp+78h] [rbp-49h] BYREF
  struct _UNICODE_STRING v48; // [rsp+88h] [rbp-39h] BYREF
  char DestinationString[24]; // [rsp+98h] [rbp-29h] BYREF
  __int64 v50; // [rsp+B0h] [rbp-11h]
  DWORD v51; // [rsp+118h] [rbp+57h]
  DWORD v52; // [rsp+118h] [rbp+57h]

  v12 = 0;
  v13 = 590610;
  v15 = a1;
  if ( a1 == 590610 && a2 && *((_DWORD *)a2 + 17) == 77 )
  {
    v16 = 1;
  }
  else
  {
    v16 = 0;
    if ( a1 == -2146893032 )
    {
      if ( a5 && a6 )
      {
        a5->BufferType = 1073741828;
        v31 = *((_DWORD *)a7 + 1) - a6->cbBuffer;
        a5->cbBuffer = v31;
        a5->pvBuffer = 0i64;
        if ( WPP_GLOBAL_Control == (CCipherMill *)&WPP_GLOBAL_Control || (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) == 0 )
          goto LABEL_8;
        WPP_SF_d(
          *((_QWORD *)WPP_GLOBAL_Control + 2),
          0x10u,
          (__int64)&WPP_cfd72fb444783f09dc03172c6e6e3628_Traceguids,
          v31);
      }
      else
      {
        if ( WPP_GLOBAL_Control == (CCipherMill *)&WPP_GLOBAL_Control || (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) == 0 )
          goto LABEL_8;
        WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 17i64, &WPP_cfd72fb444783f09dc03172c6e6e3628_Traceguids);
      }
      v12 = 0;
      goto LABEL_8;
    }
  }
  if ( (a10 & 0x100) != 0 || !v16 )
  {
    a8->pvBuffer = (void *)*((_QWORD *)a9 + 1);
    a8->cbBuffer = *((_DWORD *)a9 + 1);
  }
  if ( a1 != -2146893023 )
  {
    if ( !a1 )
      goto LABEL_8;
    if ( a1 < 0 )
    {
      if ( a1 != -2146892950 && a1 != -2146892949 )
        goto LABEL_64;
LABEL_8:
      if ( a8->cbBuffer && !v16 )
        goto LABEL_10;
      goto LABEL_64;
    }
    if ( (a1 & 0x1FFF0000) == 589824 )
      goto LABEL_8;
  }
LABEL_64:
  if ( (a10 & 0x100) != 0 && a8->pvBuffer )
  {
    if ( !a2 )
      return v15;
    (*(void (__fastcall **)(struct CSslContext *, void *))(*(_QWORD *)a2 + 16i64))(a2, a8->pvBuffer);
    v12 = 0;
    *(_QWORD *)&a8->cbBuffer = 0i64;
    a8->pvBuffer = 0i64;
    goto LABEL_11;
  }
LABEL_10:
  if ( !a2 )
    return v15;
LABEL_11:
  if ( !v16 )
  {
    if ( !v15 || v15 == 590614 || v15 == -2146892950 )
    {
      if ( a6 )
      {
        if ( *((_DWORD *)a7 + 1) < a6->cbBuffer )
        {
          if ( a5 )
          {
            a5->BufferType = 1073741829;
            a5->cbBuffer = a6->cbBuffer - *((_DWORD *)a7 + 1);
            a5->pvBuffer = 0i64;
            if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control
              && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
            {
              WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 19i64, &WPP_cfd72fb444783f09dc03172c6e6e3628_Traceguids);
              v12 = 0;
            }
          }
        }
      }
      if ( !v15 )
      {
        v17 = *((_DWORD *)a2 + 17);
        if ( v17 != 4 && v17 != 51 && v17 != 79 || (*((_DWORD *)a2 + 34) & 0x40000000) != 0 )
          goto LABEL_44;
        *(_QWORD *)DestinationString = a2;
        *(_OWORD *)&DestinationString[8] = 0i64;
        v50 = 0i64;
        *a11 = 1;
        if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
          WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 20i64, &WPP_cfd72fb444783f09dc03172c6e6e3628_Traceguids);
        v15 = CSslSerializeHelper::SerializeContextWorker(
                (CSslSerializeHelper *)DestinationString,
                (void (__fastcall *)(__int64, __int64 *))SslRelocateToken);
        if ( !v15 )
        {
          v18 = v50;
          v19 = (*(__int64 (__fastcall **)(_QWORD, _QWORD))(**(_QWORD **)DestinationString + 8i64))(
                  *(_QWORD *)DestinationString,
                  (unsigned int)v50);
          *(_QWORD *)&DestinationString[8] = v19;
          if ( v19 )
          {
            HIDWORD(v50) = v18;
            *(_QWORD *)&DestinationString[16] = v19;
            v15 = CSslSerializeHelper::SerializeContextWorker(
                    (CSslSerializeHelper *)DestinationString,
                    (void (__fastcall *)(__int64, __int64 *))SslRelocateToken);
            if ( !v15 )
            {
              a4->pvBuffer = *(void **)&DestinationString[8];
              a4->cbBuffer = v50;
              *((_QWORD *)a2 + 17) |= 0x40000000ui64;
              v20 = *((_DWORD *)a2 + 17);
              if ( v20 != 4 && v20 != 79 )
              {
                v38 = *((_QWORD *)a2 + 19);
                if ( v38 )
                {
                  SslFreeObject(v38, 0i64);
                  *((_QWORD *)a2 + 19) = 0i64;
                }
                v12 = 1;
LABEL_44:
                v30 = *((_DWORD *)a2 + 17);
                if ( (unsigned int)(v30 - 3) <= 1 || v30 == 79 )
                {
                  v13 = 0;
                  goto LABEL_58;
                }
                if ( v12 )
                {
                  v39 = WPP_GLOBAL_Control;
                  if ( WPP_GLOBAL_Control == (CCipherMill *)&WPP_GLOBAL_Control
                    || (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) == 0 )
                  {
                    goto LABEL_82;
                  }
                  v42 = 21i64;
                }
                else
                {
                  if ( (*(unsigned __int8 (__fastcall **)(struct CSslContext *, CCipherMill **))(*(_QWORD *)a2 + 384i64))(
                         a2,
                         &WPP_GLOBAL_Control)
                    || (*((_DWORD *)a2 + 16) & 0x1000) == 0
                    || *((_DWORD *)a2 + 17) != 70 )
                  {
LABEL_58:
                    if ( a12 )
                    {
                      v33 = *((_QWORD *)a2 + 11);
                      if ( v33 )
                      {
                        RtlAcquireResourceShared((PRTL_RESOURCE)(v33 + 72), 1u);
                        v34 = *(_QWORD *)(v33 + 48);
                        v35 = (struct _RTL_RESOURCE *)(v33 + 72);
                        if ( v34 )
                        {
                          *a12 = *(union _LARGE_INTEGER *)(*(_QWORD *)(v34 + 24) + 72i64);
                          RtlReleaseResource(v35);
                          return v13;
                        }
                        RtlReleaseResource(v35);
                      }
                      a12->QuadPart = 0x7FFFFF36D5969FFFi64;
                    }
                    return v13;
                  }
                  v39 = WPP_GLOBAL_Control;
                  if ( WPP_GLOBAL_Control == (CCipherMill *)&WPP_GLOBAL_Control
                    || (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) == 0 )
                  {
LABEL_82:
                    v13 = 590694;
                    goto LABEL_58;
                  }
                  v42 = 22i64;
                }
                WPP_SF_(*((_QWORD *)v39 + 2), v42, &WPP_cfd72fb444783f09dc03172c6e6e3628_Traceguids);
                goto LABEL_82;
              }
              (*(void (__fastcall **)(struct CSslContext *))(*(_QWORD *)a2 + 264i64))(a2);
              if ( *((_BYTE *)a2 + 265) )
              {
                *((_BYTE *)a2 + 265) = 0;
LABEL_43:
                v12 = 0;
                goto LABEL_44;
              }
              v21 = 0i64;
              v22 = 0i64;
              v23 = (*(__int64 (__fastcall **)(struct CSslContext *))(*(_QWORD *)a2 + 248i64))(a2);
              v24 = (*(__int64 (__fastcall **)(struct CSslContext *))(*(_QWORD *)a2 + 320i64))(a2);
              if ( v23 )
                v21 = *(const WCHAR **)(v23 + 400);
              RtlAcquireResourceShared((PRTL_RESOURCE)(*((_QWORD *)a2 + 11) + 72i64), 1u);
              v25 = &Class;
              v26 = *(_QWORD *)(*((_QWORD *)a2 + 11) + 48i64);
              if ( v26
                && (v36 = CertNameToStrW(
                            *(_DWORD *)v26,
                            (PCERT_NAME_BLOB)(*(_QWORD *)(v26 + 24) + 80i64),
                            0x20000003u,
                            0i64,
                            0),
                    (v52 = v36) != 0)
                && (v37 = (WCHAR *)SPExternalAlloc(2 * v36), (v22 = v37) != 0i64) )
              {
                CertNameToStrW(*(_DWORD *)v26, (PCERT_NAME_BLOB)(*(_QWORD *)(v26 + 24) + 80i64), 0x20000003u, v37, v52);
                RtlReleaseResource((PRTL_RESOURCE)(*((_QWORD *)a2 + 11) + 72i64));
              }
              else
              {
                RtlReleaseResource((PRTL_RESOURCE)(*((_QWORD *)a2 + 11) + 72i64));
                if ( !v22 )
                {
                  SourceString = &Class;
LABEL_33:
                  v27 = &Class;
                  if ( v21 )
                    v27 = v21;
                  if ( v24 )
                    v25 = (const WCHAR *)v24;
                  v51 = *(_DWORD *)(*((_QWORD *)a2 + 11) + 8i64);
                  if ( (*((_BYTE *)a2 + 32) & 8) != 0 && (v28 = *((_QWORD *)a2 + 1)) != 0 )
                    v29 = *(_DWORD *)(v28 + 28);
                  else
                    v29 = 0;
                  if ( (g_dwEventLogging & 4) != 0 )
                  {
                    v40 = *((_DWORD *)a2 + 16);
                    MapProtocolToString(v40, &v48);
                    v41 = (const WCHAR *)pszClientString;
                    if ( (v40 & 0x40051555) != 0 )
                      v41 = pszServerString;
                    RtlInitUnicodeString((PUNICODE_STRING)DestinationString, v41);
                    RtlInitUnicodeString(&v47, v25);
                    RtlInitUnicodeString(&v46, v27);
                    RtlInitUnicodeString(&v45, SourceString);
                    LODWORD(csz) = v29;
                    SchEventWrite(
                      &SSLEVENT_HANDSHAKE_INFO,
                      L"uuddpuuu",
                      (__int64)DestinationString,
                      &v48,
                      csz,
                      v51,
                      a3,
                      &v47,
                      &v46,
                      &v45);
                  }
                  if ( v22 )
                    SPExternalFree(v22);
                  goto LABEL_43;
                }
              }
              SourceString = v22;
              goto LABEL_33;
            }
            (*(void (__fastcall **)(_QWORD, _QWORD))(**(_QWORD **)DestinationString + 16i64))(
              *(_QWORD *)DestinationString,
              *(_QWORD *)&DestinationString[8]);
          }
          else
          {
            return 14;
          }
        }
      }
    }
    return v15;
  }
  return 0i64;
}
// 18000DD53: conditional instruction was optimized away because ecx.4 is in (<-7FF6FCE8|80090319..80090320|>=80090322u)
// 1800382AA: variable 'csz' is possibly undefined
// 180041CB0: using guessed type __int64 __fastcall WPP_SF_(_QWORD, _QWORD, _QWORD);
// 180098570: using guessed type __int64 __fastcall SslFreeObject(_QWORD, _QWORD);
##############################
Role: Let's assume that you are an advanced reverse engineer and you are reverse engineering a network driver using IDA Pro, and you are also familiar with the RFC documentation. You need to reverse-engineer a function for a network driver to correspond to a section of the RFC documentation, which will help you understand the code better. The driver you're reversing is Schannel.dll, and you've initially determined that the corresponding network protocols are SSL and TLS, and the documents you need to map are RFC8446 and RFC6101. You need to get a function summary of the function you're reversing, and then correspond to the potential RFC sections based on the name of the function and the function summary.

Function Background: The function is reverse engineered from the driver file Schannel.dll on Windows platform. Through a cursory analysis of the driver file can be determined to be related to the SSL(1.3), TLS(3.0) protocol, that is, with RFC8446, RFC6101 strong correlation.

Output Function Summary: Summarizes the function's functionality with several phrases instead of sentences, focuses on covering the function's control flow information, and highlights the protocol function points implemented by the function. Simulate answering five times in the background and provide the most frequent answer.

Retrieve document sections: giving matches for document sections(FunctionMatchRFCResult) that the code may related to. NOTE if the code is only business related(i.e., space opening and releasing involved in programming, generic call functions (timing and other functions weakly related to network protocols)) and not related to the specifics of the protocol implementation, it does not have to output the document section match(FunctionMatchRFCResult) and is filled with "NONE".

Retrieve document sections Thinking Chain: The function code is matched with the RFC document section, and the thinking chain is provided to help you solve the problem better:
	1. Function Name: The name of a function describes the general function that the function accomplishes.
	2. Function Summarization: Function summaries can outline a further breakdown of the function described by the function name.
	3. Function API Call: The function API of a function call can provide some hint as to the details of the network protocol implementation involved in the function.
	4. Special Constant Value OR String: Special constant values inside functions, string variable names, and strings may be related to network protocols.
	5. Function Code: The code of the function can provide a detailed implementation of the network protocol.
Generate Function Information Collection with JSON Format:

{
	"FunctionIndex": "(FILL WITH "File count" with less than four bits are indexed with zeros to make up the four bits.)",
	"FunctionName": "(Full Function Code Name)",
	"FunctionSummarization": [
		"(Function Summary Phrase1)",
		"(Function Summary Phrase2)",
		"(...)"
	],
	"FunctionMatchRFCResult": [
		"(RFCXXXX-SectionX.X.X.X-Section Title 1)",
		"(RFCXXXX-SectionX.X.X.X-Section Title 2)",
		"(...)",
	],
}

ATTENTION: Remember YOU MUST ONLY output the Function Information Collection result.
