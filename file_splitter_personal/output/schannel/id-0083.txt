Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 83
// Total lines: 123

//----- (000000018000685C) ----------------------------------------------------
__int64 __fastcall CSessionCacheManager::CacheRetrieveNewItem(
        CSessionCacheManager *this,
        char a2,
        const unsigned __int16 *a3,
        unsigned __int8 *const a4,
        struct CSessionCacheItem **a5)
{
  __int64 v7; // rbx
  unsigned int v8; // ebx
  wchar_t *v9; // rax
  unsigned __int16 *v10; // rdi
  unsigned int v11; // r14d
  CSessionCacheClientItem *v12; // rax
  CSessionCacheClientItem *v13; // rdi
  unsigned int v14; // ebx
  unsigned int v15; // ebx
  CSessionCacheTable *v16; // rcx
  _QWORD *v17; // rbp
  __int64 *v18; // r8
  __int64 v19; // rcx
  __int64 **v20; // rax
  _QWORD *v21; // rdi
  _QWORD *v22; // rcx
  __int128 v24; // xmm0
  unsigned int v25; // eax
  int v26; // edx
  unsigned int v27; // ecx
  CSessionCacheItem *v28; // rax
  unsigned __int8 v29[16]; // [rsp+20h] [rbp-38h] BYREF
  __int128 v30; // [rsp+30h] [rbp-28h]

  if ( !a2 )
  {
    v7 = -1i64;
    do
      ++v7;
    while ( a3[v7] );
    v8 = v7 + 1;
    v9 = (wchar_t *)SPExternalAlloc(2 * v8);
    v10 = v9;
    if ( !v9 )
      return 14i64;
    wcscpy_s(v9, v8, a3);
    v11 = CSessionCacheManager::ComputeClientCacheIndex(this, v10);
    v12 = (CSessionCacheClientItem *)SPExternalAlloc(0x1B8u);
    if ( !v12 )
      return 14i64;
    v13 = CSessionCacheClientItem::CSessionCacheClientItem(v12, this, *((_DWORD *)this + 5), v10);
LABEL_7:
    if ( v13 )
      goto LABEL_8;
    return 14i64;
  }
  v24 = *((_OWORD *)a4 + 1);
  v25 = _mm_cvtsi128_si32(*(__m128i *)a4);
  *(_OWORD *)v29 = *(_OWORD *)a4;
  v26 = v25 % *((_DWORD *)this + 4);
  v27 = *(_DWORD *)&v29[4];
  v11 = v26;
  *(_DWORD *)v29 = v26;
  if ( g_SslMachineID != -1 )
    v27 = g_SslMachineID;
  *(_DWORD *)&v29[4] = v27;
  v30 = v24;
  v28 = (CSessionCacheItem *)(*(__int64 (__fastcall **)(struct IAllocate *, __int64))(*(_QWORD *)CSessionCacheServerItem::m_pServerCacheLookaside
                                                                                    + 24i64))(
                               CSessionCacheServerItem::m_pServerCacheLookaside,
                               360i64);
  v13 = v28;
  if ( !v28 )
  {
    v13 = 0i64;
    goto LABEL_7;
  }
  CSessionCacheItem::CSessionCacheItem(v28, *((_DWORD *)this + 6), v29);
  *((_QWORD *)v13 + 42) = 0i64;
  *(_QWORD *)v13 = &CSessionCacheServerItem::`vftable';
  *((_QWORD *)v13 + 43) = 0i64;
  *((_DWORD *)v13 + 88) = 0;
  *((_DWORD *)v13 + 54) = -2146893019;
LABEL_8:
  v14 = *((_DWORD *)v13 + 17);
  if ( v14 )
  {
    (*(void (__fastcall **)(CSessionCacheClientItem *, __int64))(*(_QWORD *)v13 + 8i64))(v13, 1i64);
    return v14;
  }
  else
  {
    v15 = *((_DWORD *)this + 13);
    *a5 = v13;
    v16 = (CSessionCacheTable *)(v11 / v15);
    v17 = (_QWORD *)(*((_QWORD *)this + 5) + 152i64 * (_QWORD)v16);
    CSessionCacheTable::ReferenceCacheItemInternal(v16, v13);
    *((_QWORD *)v13 + 28) = v17;
    v18 = (__int64 *)((char *)v13 + 288);
    v19 = *v17 + 16i64 * (v11 % v15);
    v20 = *(__int64 ***)(v19 + 8);
    if ( *v20 != (__int64 *)v19
      || (*((_QWORD *)v13 + 37) = v20,
          v21 = (_QWORD *)((char *)v13 + 304),
          *v18 = v19,
          *v20 = v18,
          *(_QWORD *)(v19 + 8) = v18,
          v22 = (_QWORD *)v17[3],
          (_QWORD *)*v22 != v17 + 2) )
    {
      __fastfail(3u);
    }
    *v21 = v17 + 2;
    v21[1] = v22;
    *v22 = v21;
    v17[3] = v21;
    _InterlockedIncrement((volatile signed __int32 *)this + 8);
    LsaIModifyPerformanceCounter(4i64);
    return 0i64;
  }
}
// 18007C330: using guessed type void *CSessionCacheServerItem::`vftable';
// 1800919F4: using guessed type unsigned int g_SslMachineID;
// 1800927F8: using guessed type struct IAllocate *CSessionCacheServerItem::m_pServerCacheLookaside;
// 180098238: using guessed type __int64 __fastcall LsaIModifyPerformanceCounter(_QWORD);
##############################
Function Background: The function is reverse engineered from the driver file Schannel.dll on Windows platform. Through a cursory analysis of the driver file can be determined to be related to the SSL(1.3), TLS(3.0) protocol, that is, with RFC8446, RFC6101 strong correlation.

Output Function Summary: Summarizes the function's functionality with several phrases instead of sentences, focuses on covering the function's control flow information (API), and highlights the protocol function points implemented by the function. Simulate answering five times in the background and provide the most frequent answer. Suppose the code support the latest newwork protocol SSL(3.0) AND TLS(1.3)

Retrieve document sections based on code summaries (containing multiple phrases) and RFC section information, giving matches for document sections(FunctionMatchRFCResult) that the code may related to. Note that if the code is only business related and not related to the specifics of the protocol implementation, it does not have to output the document section match(FunctionMatchRFCResult) and is padded with NONE.

Generate Function Information Collection with JSON Format:

{
	"FunctionIndex": "(FILL WITH "File count" with less than four bits are indexed with zeros to make up the four bits.)",
	"FunctionName": "(Full Function Code Name)",
	"FunctionSummarization": [
		"(Function Summary Phrase1)",
		"(Function Summary Phrase2)",
		"(...)"
	],
	"FunctionMatchRFCResult": [
		"(RFCXXXX-SectionX.X.X.X-Section Title 1)",
		"(RFCXXXX-SectionX.X.X.X-Section Title 2)",
		"(...)",
	],
}

Remember just output the Function Information Collection result.
