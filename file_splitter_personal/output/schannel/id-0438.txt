Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 438
// Total lines: 488

//----- (000000018001BE70) ----------------------------------------------------
__int64 __fastcall CSsl3TlsServerContext::EccGenerateServerExchangeValue(
        CSsl3TlsServerContext *this,
        unsigned __int8 *a2,
        unsigned int *a3)
{
  int v3; // r15d
  __int64 v4; // rax
  int v5; // r14d
  CSsl3TlsServerContext *v6; // rbp
  __int16 v7; // r12
  int v8; // ecx
  int v9; // r13d
  struct CEphemKeyData **v10; // rdi
  struct CEphemKeyData *v11; // rax
  unsigned int v12; // esi
  __int64 v13; // rax
  __int64 v14; // rbx
  __int64 v15; // r15
  __int64 *v16; // rax
  struct CEphemKeyData **v17; // rbp
  unsigned int v18; // eax
  unsigned int EphemeralKeyInfo; // ebx
  struct _BCRYPT_ECCKEY_BLOB *v20; // rax
  unsigned int cbKey; // ecx
  int v22; // edi
  int v23; // esi
  __int64 v24; // rax
  __int64 v25; // rax
  unsigned int v26; // esi
  unsigned __int8 v27; // r11
  _DWORD *v28; // rax
  unsigned __int8 v29; // r8
  __int16 v30; // r15
  unsigned __int8 v31; // bl
  __int64 v32; // r10
  int v33; // r9d
  int v34; // ecx
  unsigned __int8 v35; // cl
  void **v36; // rdx
  __int64 v37; // rdx
  __int64 v38; // r8
  DWORD v39; // r9d
  DWORD v40; // ebx
  __int64 *v41; // rcx
  __int64 v42; // rax
  int v43; // eax
  __int64 v44; // rax
  __int64 v45; // rdx
  __int64 *v46; // rax
  __int64 v47; // rcx
  unsigned int v48; // esi
  unsigned __int8 *v50; // r10
  unsigned int v51; // esi
  struct _BCRYPT_ECCKEY_BLOB *v52; // rax
  ULONG v53; // ebx
  unsigned __int8 v54; // bl
  unsigned __int8 v55; // al
  unsigned int v56; // esi
  unsigned __int8 *v57; // rdi
  ULONG v58; // r8d
  __int16 v59; // cx
  int v60; // r13d
  unsigned int v61; // eax
  char *v62; // rax
  __int64 v63; // rcx
  unsigned __int8 v64; // r9
  __int64 v65; // rax
  unsigned __int8 v66[4]; // [rsp+40h] [rbp-C8h] BYREF
  DWORD cbSignature; // [rsp+44h] [rbp-C4h] BYREF
  int v68; // [rsp+48h] [rbp-C0h]
  enum _eTlsHashAlgorithm v69; // [rsp+4Ch] [rbp-BCh]
  CSsl3TlsServerContext *v70; // [rsp+50h] [rbp-B8h]
  unsigned int v71; // [rsp+58h] [rbp-B0h]
  int v72; // [rsp+5Ch] [rbp-ACh] BYREF
  unsigned __int8 *v73; // [rsp+60h] [rbp-A8h]
  unsigned int *v74; // [rsp+68h] [rbp-A0h]
  struct _BCRYPT_ECCKEY_BLOB *v75; // [rsp+70h] [rbp-98h]
  unsigned __int16 *v76; // [rsp+78h] [rbp-90h]
  BYTE pbHashValue[64]; // [rsp+80h] [rbp-88h] BYREF

  v4 = *((_QWORD *)this + 1);
  v5 = 0;
  LOBYTE(v3) = 0;
  v70 = this;
  v6 = this;
  v74 = a3;
  v73 = a2;
  v7 = 0;
  v8 = *(_DWORD *)(v4 + 52);
  v72 = 0;
  v76 = 0i64;
  v68 = v3;
  v66[0] = 0;
  v69 = TlsHashAlgorithm_None;
  v71 = 0;
  if ( v8 == 2 )
  {
    v9 = 1;
  }
  else
  {
    if ( v8 != 4 )
      return 1359;
    v9 = 3;
  }
  v10 = (struct CEphemKeyData **)((char *)v6 + 960);
  v11 = (struct CEphemKeyData *)*((_QWORD *)v6 + 120);
  if ( !v11 )
  {
    v12 = *((_DWORD *)v6 + 4);
    v13 = (*(__int64 (__fastcall **)(CSsl3TlsServerContext *))(*(_QWORD *)v6 + 248i64))(v6);
    v14 = v13;
    if ( !v12 )
    {
      EphemeralKeyInfo = CSslCredential::GetEphemeralKeyInfo(
                           (CSslCredential *)v13,
                           0,
                           (struct CEphemKeyData **)(v13 + 496),
                           (struct CEphemKeyData **)v6 + 120);
      if ( EphemeralKeyInfo == 87 )
      {
        v5 = 1;
        goto LABEL_96;
      }
      goto LABEL_11;
    }
    if ( v12 == *(_DWORD *)(v13 + 140) )
    {
      v17 = (struct CEphemKeyData **)(v13 + 504);
      goto LABEL_10;
    }
    *v10 = 0i64;
    RtlAcquireResourceExclusive((PRTL_RESOURCE)(v13 + 552), 1u);
    v15 = v14 + 480;
    v16 = *(__int64 **)(v14 + 480);
    if ( v16 != (__int64 *)(v14 + 480) )
    {
      while ( *((_DWORD *)v16 + 4) != v12 )
      {
        v16 = (__int64 *)*v16;
        if ( v16 == (__int64 *)v15 )
          goto LABEL_89;
      }
      v17 = (struct CEphemKeyData **)(v16 + 3);
      if ( v16 != (__int64 *)-24i64 )
      {
LABEL_9:
        RtlReleaseResource((PRTL_RESOURCE)(v14 + 552));
        LOBYTE(v3) = v68;
LABEL_10:
        v18 = CSslCredential::GetEphemeralKeyInfo((CSslCredential *)v14, v12, v17, v10);
        v6 = v70;
        EphemeralKeyInfo = v18;
LABEL_11:
        if ( !EphemeralKeyInfo )
        {
          *(_DWORD *)(*((_QWORD *)v6 + 11) + 8i64) = *((_DWORD *)*v10 + 10);
          v11 = *v10;
          goto LABEL_13;
        }
LABEL_96:
        v64 = 40;
        if ( !v5 )
          v64 = 80;
        CSslContext::SetErrorAndFatalAlert((__int64)v6, 603, EphemeralKeyInfo, v64);
        CSslContext::SetErrorAndFatalAlert((__int64)v6, 1050, EphemeralKeyInfo, 0x50u);
        return EphemeralKeyInfo;
      }
      v6 = v70;
    }
LABEL_89:
    v62 = (char *)LocalAlloc(0x40u, 0x20ui64);
    if ( !v62 )
    {
      RtlReleaseResource((PRTL_RESOURCE)(v14 + 552));
      EphemeralKeyInfo = 14;
      goto LABEL_96;
    }
    *((_DWORD *)v62 + 4) = v12;
    *((_QWORD *)v62 + 1) = v62;
    *(_QWORD *)v62 = v62;
    v63 = *(_QWORD *)v15;
    if ( *(_QWORD *)(*(_QWORD *)v15 + 8i64) != v15 )
      __fastfail(3u);
    *(_QWORD *)v62 = v63;
    v17 = (struct CEphemKeyData **)(v62 + 24);
    *((_QWORD *)v62 + 1) = v15;
    *(_QWORD *)(v63 + 8) = v62;
    *(_QWORD *)v15 = v62;
    goto LABEL_9;
  }
LABEL_13:
  v20 = (struct _BCRYPT_ECCKEY_BLOB *)*((_QWORD *)v11 + 2);
  v75 = v20;
  if ( !v20 )
    return 87;
  cbKey = v20->cbKey;
  if ( (*((_BYTE *)v6 + 20) & 8) != 0 )
  {
    v3 = (unsigned __int8)v3;
    if ( cbKey <= 0xFF )
      v3 = (unsigned __int8)cbKey;
    EphemeralKeyInfo = 87;
    if ( cbKey <= 0xFF )
      EphemeralKeyInfo = 0;
    goto LABEL_17;
  }
  if ( cbKey <= 0x7F )
  {
    v3 = 2 * cbKey + 1;
    EphemeralKeyInfo = 0;
LABEL_17:
    v66[0] = v3;
    v68 = v3;
    goto LABEL_18;
  }
  EphemeralKeyInfo = 1359;
LABEL_18:
  if ( EphemeralKeyInfo )
    return EphemeralKeyInfo;
  v22 = *((_DWORD *)v6 + 16);
  v23 = (unsigned __int8)v3 + 6;
  if ( (v22 & 0x40400) == 0 )
  {
LABEL_38:
    memset_0(pbHashValue, 0, sizeof(pbHashValue));
    cbSignature = 0;
    v39 = 0;
    if ( (v22 & 0x43C00) != 0 )
    {
      v38 = (unsigned int)g_dwHashInfoTotalCount;
      v40 = 0;
      v37 = 0i64;
      if ( g_dwHashInfoTotalCount )
      {
        v41 = g_pHashInfo;
        while ( 1 )
        {
          v42 = *v41;
          if ( *v41 )
          {
            if ( *(_DWORD *)(v42 + 20) == v69 )
              break;
          }
          v37 = (unsigned int)(v37 + 1);
          ++v41;
          if ( (unsigned int)v37 >= g_dwHashInfoTotalCount )
            goto LABEL_112;
        }
        v40 = *(_DWORD *)(v42 + 8);
        v43 = 0;
      }
      else
      {
LABEL_112:
        v43 = 1168;
      }
      if ( v43 )
      {
LABEL_58:
        EphemeralKeyInfo = v43;
        if ( v43 >= 0 )
        {
          if ( v39 <= 0x8C )
            v39 = 140;
          v48 = v39 + v23;
          if ( !v73 )
          {
            *v74 = v48;
            return 0;
          }
          if ( *v74 < v48 )
          {
            *v74 = v48;
            return (unsigned int)-2146893023;
          }
          EphemeralKeyInfo = SslImpersonateClient(*(_QWORD *)(*((_QWORD *)v6 + 10) + 752i64), &v72);
          if ( EphemeralKeyInfo )
            goto LABEL_81;
          v50 = v73;
          v51 = v48 - 3;
          *v73 = 3;
          v50[1] = BYTE1(*((_DWORD *)v6 + 4));
          v50[2] = *((_BYTE *)v6 + 16);
          if ( (*((_BYTE *)v6 + 20) & 8) != 0 )
          {
            EphemeralKeyInfo = MontgomeryGetKeyExchangeBlob(v75, v50 + 4, v66);
            v55 = v66[0];
          }
          else
          {
            v52 = v75;
            v53 = v75->cbKey;
            if ( v53 > 0x7F )
            {
              v55 = v68;
              EphemeralKeyInfo = 1359;
              goto LABEL_72;
            }
            v54 = 2 * v53 + 1;
            if ( v50 == (unsigned __int8 *)-4i64 )
            {
              v55 = v54;
              EphemeralKeyInfo = 0;
              goto LABEL_72;
            }
            if ( (unsigned __int8)v3 < v54 )
            {
              v55 = v54;
              EphemeralKeyInfo = -2146893023;
              goto LABEL_72;
            }
            v50[4] = 4;
            memcpy_0(v50 + 5, &v52[1], v54 - 1i64);
            v55 = v54;
            EphemeralKeyInfo = 0;
          }
          v50 = v73;
LABEL_72:
          if ( EphemeralKeyInfo )
            goto LABEL_81;
          v50[3] = v55;
          v56 = -1 - v55 + v51;
          v57 = &v50[v55 + 4];
          v58 = v55 + 4;
          if ( (*((_DWORD *)v6 + 16) & 0x40400) == 0 )
          {
LABEL_76:
            v59 = v56 - 2;
            cbSignature = v56 - 2;
            v60 = v9 - 1;
            if ( v60 )
            {
              if ( v60 != 2 )
              {
LABEL_80:
                *v57 = HIBYTE(v59);
                v57[1] = cbSignature;
                *v74 = (_DWORD)v57 - (_DWORD)v50 + cbSignature + 2;
                goto LABEL_81;
              }
              v61 = SignEcdsaParams(v6, v50, v58, v69, v57 + 2, &cbSignature);
            }
            else
            {
              v61 = SignRsaParams(v6, v50, v58, v76, v69, v71, v57 + 2, &cbSignature);
            }
            EphemeralKeyInfo = v61;
            if ( v61 )
              goto LABEL_81;
            HIBYTE(v59) = BYTE1(cbSignature);
            LODWORD(v50) = (_DWORD)v73;
            goto LABEL_80;
          }
          if ( v56 >= 2 )
          {
            *(_WORD *)v57 = v7;
            v57 += 2;
            v56 -= 2;
            goto LABEL_76;
          }
          EphemeralKeyInfo = 1359;
LABEL_81:
          if ( v72 )
            RevertToSelf();
          return EphemeralKeyInfo;
        }
LABEL_117:
        CSslContext::SetErrorAndFatalAlert((__int64)v6, 1051, v43, 0x50u);
        return EphemeralKeyInfo;
      }
    }
    else
    {
      if ( v9 == 1 )
      {
        v40 = 36;
LABEL_52:
        if ( (v22 & 0x40051555) != 0 )
        {
          v44 = *((_QWORD *)v6 + 3);
          if ( v44 )
          {
            v45 = *(_QWORD *)(v44 + 8);
            v46 = (__int64 *)*((_QWORD *)v6 + 1);
            if ( v46 )
              v47 = *v46;
            else
              v47 = 0i64;
            v43 = SslSignHash(v47, v45, pbHashValue, v40, 0i64, 0, &cbSignature, 0);
            goto LABEL_57;
          }
        }
        else
        {
          v65 = (*(__int64 (__fastcall **)(CSsl3TlsServerContext *, __int64, __int64, _QWORD))(*(_QWORD *)v6 + 248i64))(
                  v6,
                  v37,
                  v38,
                  0i64);
          if ( v65 )
          {
            v43 = NCryptSignHash(*(_QWORD *)(v65 + 104), 0i64, pbHashValue, v40, 0i64, cbSignature, &cbSignature, 0x40u);
LABEL_57:
            v39 = cbSignature;
            goto LABEL_58;
          }
        }
LABEL_116:
        EphemeralKeyInfo = -2146893052;
        v43 = -2146893052;
        goto LABEL_117;
      }
      v40 = 20;
    }
    if ( v40 > 0x40 )
      goto LABEL_116;
    goto LABEL_52;
  }
  v24 = *(_QWORD *)v6;
  LODWORD(v70) = (unsigned __int8)v3 + 8;
  v25 = (*(__int64 (__fastcall **)(CSsl3TlsServerContext *))(v24 + 248))(v6);
  if ( !v25 )
    return (unsigned int)-2146893052;
  v26 = *(_DWORD *)(v25 + 428);
  v27 = 0;
  v22 = *((_DWORD *)v6 + 16);
  v28 = &unk_18007C3A8;
  v29 = 0;
  v30 = 0;
  v31 = -1;
  v32 = 12i64;
  do
  {
    v33 = v28[1];
    if ( v33 == v9 && (v22 & *v28) != 0 && v29 < 0xCu )
    {
      v34 = *((unsigned __int16 *)v6 + 272);
      if ( _bittest(&v34, v29) )
      {
        if ( (v9 != 1 || v28[9] != 8 || v26 >> 3 >= 2 * (unsigned int)*((unsigned __int8 *)v28 + 32) + 2)
          && ((v22 & 0x3000) == 0 || v33 != 3 || !v28[10]) )
        {
          if ( (v35 = *((_BYTE *)v28 + 32), v35 < v27) && v35 > 0x14u || v27 <= 0x14u )
          {
            v31 = v29;
            v27 = *((_BYTE *)v28 + 32);
          }
        }
      }
    }
    v28 += 18;
    ++v29;
    --v32;
  }
  while ( v32 );
  v36 = (void **)&unk_18007C390;
  if ( v31 < 0xCu )
    v30 = *((_WORD *)&unk_18007C390 + 36 * v31);
  v7 = __ROR2__(v30, 8);
  if ( v7 )
  {
    while ( v30 != *(_WORD *)v36 )
    {
      v36 += 9;
      if ( v36 >= &CSsl3TlsServerContext::`vftable' )
        goto LABEL_37;
    }
    v69 = *((_DWORD *)v36 + 10);
    v76 = (unsigned __int16 *)v36[6];
    v71 = *((_DWORD *)v36 + 15);
LABEL_37:
    LOBYTE(v3) = v68;
    v23 = (int)v70;
    goto LABEL_38;
  }
  return 2148074289i64;
}
// 18003088E: conditional instruction was optimized away because r13d.4==3
// 18001BEC6: variable 'v3' is possibly undefined
// 1800308DD: variable 'v37' is possibly undefined
// 1800308DD: variable 'v38' is possibly undefined
// 18007C6F0: using guessed type void *CSsl3TlsServerContext::`vftable';
// 180092324: using guessed type int g_dwHashInfoTotalCount;
// 180092330: using guessed type _QWORD g_pHashInfo[16];
// 180098540: using guessed type __int64 __fastcall SslSignHash(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD, _QWORD, _DWORD);
// 18001BE70: using guessed type unsigned __int8 var_C8[4];
##############################
Function Background: The function is reverse engineered from the driver file Schannel.dll on Windows platform. Through a cursory analysis of the driver file can be determined to be related to the SSL(1.3), TLS(3.0) protocol, that is, with RFC8446, RFC6101 strong correlation.

Output Function Summary: Summarizes the function's functionality with several phrases instead of sentences, focuses on covering the function's control flow information (API), and highlights the protocol function points implemented by the function. Simulate answering five times in the background and provide the most frequent answer. Suppose the code support the latest newwork protocol SSL(3.0) AND TLS(1.3)

Retrieve document sections based on code summaries (containing multiple phrases) and RFC section information, giving matches for document sections(FunctionMatchRFCResult) that the code may related to. Note that if the code is only business related and not related to the specifics of the protocol implementation, it does not have to output the document section match(FunctionMatchRFCResult) and is padded with NONE.

Generate Function Information Collection with JSON Format:

{
	"FunctionIndex": "(FILL WITH "File count" with less than four bits are indexed with zeros to make up the four bits.)",
	"FunctionName": "(Full Function Code Name)",
	"FunctionSummarization": [
		"(Function Summary Phrase1)",
		"(Function Summary Phrase2)",
		"(...)"
	],
	"FunctionMatchRFCResult": [
		"(RFCXXXX-SectionX.X.X.X-Section Title 1)",
		"(RFCXXXX-SectionX.X.X.X-Section Title 2)",
		"(...)",
	],
}

Remember just output the Function Information Collection result.
