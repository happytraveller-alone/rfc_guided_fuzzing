Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 421
// Total lines: 160

//----- (0000000180018BD0) ----------------------------------------------------
__int64 __fastcall CSsl3TlsServerContext::EccGenerateServerMasterKey(
        CSsl3TlsServerContext *this,
        unsigned __int8 *a2,
        unsigned int a3)
{
  __int64 v3; // rax
  struct _BCRYPT_ECCKEY_BLOB *v7; // rbx
  unsigned __int64 v8; // r13
  size_t v9; // r14
  unsigned __int64 v10; // rcx
  unsigned __int64 v11; // rax
  void *v12; // rsp
  size_t v13; // rdx
  unsigned __int8 *v14; // rcx
  int EccPublicKeyBlob; // esi
  __int64 *v16; // rcx
  __int64 v17; // rax
  ULONG dwMagic; // esi
  __int64 *v19; // rax
  __int64 v20; // rcx
  unsigned int EccDhPskSessionKeysHelper; // esi
  struct _BCRYPT_ECCKEY_BLOB *v23; // rax
  __int64 *v24; // rax
  __int64 v25; // rcx
  unsigned __int8 v26; // r9
  int v27; // edx
  __int64 v28; // [rsp+0h] [rbp-30h] BYREF
  unsigned __int64 v29; // [rsp+30h] [rbp+0h] BYREF
  __int64 v30[5]; // [rsp+38h] [rbp+8h] BYREF

  v3 = *((_QWORD *)this + 120);
  v29 = 0i64;
  v7 = 0i64;
  v8 = *(unsigned int *)(v3 + 24);
  if ( !(_DWORD)v8 )
    goto LABEL_31;
  v9 = (unsigned int)v8;
  if ( v8 > g_ulMaxStackAllocSize )
    goto LABEL_31;
  v10 = v8 + g_ulAdditionalProbeSize + 8;
  if ( v10 < v8 || !(unsigned int)VerifyStackAvailable(v10) )
    goto LABEL_31;
  v11 = (unsigned int)(v8 + 8) + 15i64;
  if ( v11 <= (unsigned int)(v8 + 8) )
    v11 = 0xFFFFFFFFFFFFFF0i64;
  v12 = alloca(v11 & 0xFFFFFFFFFFFFFFF0ui64);
  v7 = (struct _BCRYPT_ECCKEY_BLOB *)&v29;
  if ( &v28 == (__int64 *)-48i64 || (LODWORD(v29) = 1801679955, (v7 = (struct _BCRYPT_ECCKEY_BLOB *)v30) == 0i64) )
  {
LABEL_31:
    if ( (int)v8 + 8 >= (unsigned int)v8 )
    {
      v23 = (struct _BCRYPT_ECCKEY_BLOB *)((__int64 (__fastcall *)(_QWORD))g_pfnAllocate)((unsigned int)(v8 + 8));
      if ( !v23 )
        goto LABEL_36;
      v23->dwMagic = 1885431112;
      v7 = v23 + 1;
    }
    if ( v7 )
    {
      v9 = v8;
      goto LABEL_9;
    }
LABEL_36:
    EccDhPskSessionKeysHelper = 14;
    goto LABEL_28;
  }
LABEL_9:
  memset_0(v7, 0, v9);
  *v7 = **(struct _BCRYPT_ECCKEY_BLOB **)(*((_QWORD *)this + 120) + 16i64);
  if ( !a2 || a3 <= 2 )
  {
    EccDhPskSessionKeysHelper = -2146893048;
    goto LABEL_25;
  }
  v13 = *a2;
  v14 = a2 + 1;
  if ( (_DWORD)v13 + 1 != a3 || !*a2 )
  {
    EccDhPskSessionKeysHelper = -2146893048;
    goto LABEL_49;
  }
  if ( a2 == (unsigned __int8 *)-1i64 )
    goto LABEL_47;
  if ( (*((_BYTE *)this + 20) & 8) != 0 )
  {
    EccPublicKeyBlob = MontgomeryGetEccPublicKeyBlob(v14, v13, v7, v8);
  }
  else
  {
    EccPublicKeyBlob = 0;
    if ( *v14 == 4 && v13 + 7 <= v9 )
      memcpy_0(&v7[1], v14 + 1, (unsigned int)(v13 - 1));
    else
      EccPublicKeyBlob = -2146893048;
  }
  if ( EccPublicKeyBlob )
  {
LABEL_47:
    EccDhPskSessionKeysHelper = 1359;
LABEL_49:
    v26 = 50;
    v27 = 702;
    goto LABEL_50;
  }
  v16 = (__int64 *)*((_QWORD *)this + 1);
  v17 = v16[106];
  if ( v17 && *(_BYTE *)(v17 + 24) )
  {
    dwMagic = v7->dwMagic;
    v7->dwMagic = *((_DWORD *)this + 4);
    v19 = (__int64 *)*((_QWORD *)this + 1);
    if ( v19 )
      v20 = *v19;
    else
      v20 = 0i64;
    if ( !(unsigned int)SslImportKey(v20, &v29, L"SSLECCPUBLICBLOB", v7, v8, 0) )
      goto LABEL_24;
    v7->dwMagic = dwMagic;
    v24 = (__int64 *)*((_QWORD *)this + 1);
    if ( v24 )
    {
      v25 = *v24;
      goto LABEL_45;
    }
  }
  else if ( v16 )
  {
    v25 = *v16;
    goto LABEL_45;
  }
  v25 = 0i64;
LABEL_45:
  EccDhPskSessionKeysHelper = SslImportKey(v25, &v29, L"ECCPUBLICBLOB", v7, v8, 0);
  if ( EccDhPskSessionKeysHelper )
  {
    v26 = 51;
    v27 = 703;
LABEL_50:
    CSslContext::SetErrorAndFatalAlert((__int64)this, v27, EccDhPskSessionKeysHelper, v26);
    goto LABEL_25;
  }
LABEL_24:
  EccDhPskSessionKeysHelper = MakeEccDhPskSessionKeysHelper(this, *(_QWORD *)(*((_QWORD *)this + 120) + 8i64), v29, 1);
LABEL_25:
  if ( v7 && v7[-1].dwMagic == 1885431112 )
    ((void (__fastcall *)(struct _BCRYPT_ECCKEY_BLOB *))g_pfnFree)(&v7[-1]);
LABEL_28:
  if ( v29 )
    SslFreeObject(v29, 0i64);
  return EccDhPskSessionKeysHelper;
}
// 180082258: using guessed type wchar_t aSsleccpublicbl[17];
// 1800920E0: using guessed type __int64 g_ulMaxStackAllocSize;
// 1800920E8: using guessed type __int64 g_ulAdditionalProbeSize;
// 1800920F0: using guessed type __int64 g_pfnAllocate;
// 1800920F8: using guessed type __int64 g_pfnFree;
// 180098570: using guessed type __int64 __fastcall SslFreeObject(_QWORD, _QWORD);
// 1800985A0: using guessed type __int64 __fastcall SslImportKey(_QWORD, _QWORD, _QWORD, _QWORD, _DWORD, _DWORD);
