Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 186
// Total lines: 165

//----- (000000018000FDD4) ----------------------------------------------------
char __fastcall BuildUserRequestedAlgList(
        struct CCredentialGroup *a1,
        char a2,
        unsigned int *a3,
        unsigned int a4,
        unsigned int **a5,
        unsigned int *a6,
        enum efAlgFlags *a7)
{
  int v7; // ebp
  unsigned int *v8; // r14
  char IsUserSpecifiedCipherAllowed; // di
  __int64 v13; // r15
  unsigned int v14; // r8d
  __int64 v16; // r12
  unsigned int *v17; // rax
  unsigned int v18; // esi
  unsigned int v19; // ecx
  _DWORD *v20; // rax
  CCipherMill *v21; // rcx
  __int64 v22; // r9
  __int64 v23; // rdx
  int v24; // eax
  struct kexch *KeyExchangeInfo; // rax
  struct hsel *HashInfo; // rax
  struct csel *CipherInfo; // rax
  unsigned int v28; // ecx
  struct sigsel *SigInfo; // rax
  unsigned int *v30; // [rsp+A0h] [rbp+8h]

  v7 = 0;
  v8 = 0i64;
  IsUserSpecifiedCipherAllowed = 1;
  if ( a1 )
  {
    v13 = 0i64;
    if ( !a3 )
    {
      v14 = *((_DWORD *)a1 + 49);
      if ( !v14 )
        return IsUserSpecifiedCipherAllowed;
LABEL_4:
      IsUserSpecifiedCipherAllowed = CCipherMill::IsUserSpecifiedCipherAllowed(
                                       *((_DWORD *)a1 + 39) & 0x800,
                                       v8,
                                       v13,
                                       v7,
                                       (*((_DWORD *)a1 + 39) >> 12) & 1,
                                       *((_DWORD *)a1 + 39) & 0x800,
                                       *((_DWORD *)a1 + 42),
                                       *((_DWORD *)a1 + 41),
                                       *((_DWORD *)a1 + 38),
                                       a2,
                                       *((_QWORD *)a1 + 25),
                                       v14);
      if ( !IsUserSpecifiedCipherAllowed && !v8 )
        SPExternalFree(0i64);
      return IsUserSpecifiedCipherAllowed;
    }
    v8 = (unsigned int *)SPExternalAlloc(0x44u);
    if ( v8 )
    {
      v16 = 0i64;
      if ( a4 )
      {
        v17 = a3;
        v30 = a3;
        while ( 1 )
        {
          v18 = *v17;
          v19 = 0;
          v20 = &unk_180085640;
          do
          {
            if ( v18 == *v20 )
              goto LABEL_17;
            ++v19;
            ++v20;
          }
          while ( v19 < 0x11 );
          if ( v19 == 17 )
            break;
LABEL_17:
          v24 = v18 & 0xE000;
          switch ( v24 )
          {
            case 8192:
              SigInfo = GetSigInfo(v18);
              if ( !SigInfo || (*((_DWORD *)a1 + 38) & *(_DWORD *)SigInfo) == 0 )
              {
LABEL_42:
                v21 = WPP_GLOBAL_Control;
                if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control
                  && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) != 0 )
                {
                  v23 = 12i64;
                  v22 = v18;
LABEL_40:
                  WPP_SF_D(*((_QWORD *)v21 + 2), v23, &WPP_f57d92ef57843aa8f0882fb6fd501a9b_Traceguids, v22);
                }
                return 0;
              }
              v7 |= 1u;
              break;
            case 24576:
              CipherInfo = GetCipherInfo(v18);
              if ( !CipherInfo )
                goto LABEL_42;
              if ( *((_DWORD *)CipherInfo + 8) != v18 )
                goto LABEL_42;
              v28 = *((_DWORD *)CipherInfo + 10);
              if ( v28 < *((_DWORD *)a1 + 41)
                || v28 > *((_DWORD *)a1 + 42)
                || (*((_DWORD *)a1 + 38) & *(_DWORD *)CipherInfo) == 0 )
              {
                goto LABEL_42;
              }
              v7 |= 8u;
              break;
            case 32768:
              HashInfo = GetHashInfo(v18);
              if ( !HashInfo || (*((_DWORD *)a1 + 38) & *(_DWORD *)HashInfo) == 0 )
                goto LABEL_42;
              v7 |= 2u;
              break;
            case 40960:
              KeyExchangeInfo = GetKeyExchangeInfo(v18);
              if ( !KeyExchangeInfo || (*((_DWORD *)a1 + 38) & *((_DWORD *)KeyExchangeInfo + 1)) == 0 )
                goto LABEL_42;
              v7 |= 4u;
              break;
            default:
              goto LABEL_42;
          }
          if ( !DoesCredAllowAlgId(v8, v13, v18) )
          {
            v8[v13] = v18;
            v13 = (unsigned int)(v13 + 1);
          }
          v16 = (unsigned int)(v16 + 1);
          v17 = ++v30;
          if ( (unsigned int)v16 >= a4 )
            goto LABEL_39;
        }
        v21 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) != 0 )
        {
          v22 = a3[v16];
          v23 = 11i64;
          goto LABEL_40;
        }
        return 0;
      }
LABEL_39:
      *a5 = v8;
      *a6 = v13;
      *(_DWORD *)a7 = v7;
      v14 = *((_DWORD *)a1 + 49);
      goto LABEL_4;
    }
  }
  return 0;
}
// 180041CDC: using guessed type __int64 __fastcall WPP_SF_D(_QWORD, _QWORD, _QWORD, _QWORD);
