Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 113
// Total lines: 150

//----- (0000000180009470) ----------------------------------------------------
__int64 __fastcall CSsl3TlsContext::WrapMessage(__int64 a1, __int64 a2, int a3, unsigned int a4)
{
  _BYTE *v5; // rbx
  unsigned int v6; // r15d
  unsigned int v10; // ecx
  int v11; // r8d
  __int16 v12; // bp
  __int16 v13; // r10
  unsigned int v14; // r11d
  unsigned int v15; // ecx
  char v16; // al
  int v17; // r14d
  char v18; // cl
  __int64 result; // rax
  unsigned int v20; // r9d
  unsigned int v21; // ecx
  __int64 v22; // rdx
  __int64 *v23; // rax
  __int64 v24; // r10
  unsigned int v25; // eax
  unsigned int v26; // [rsp+50h] [rbp-48h]
  unsigned int v27; // [rsp+A0h] [rbp+8h] BYREF
  unsigned int v28; // [rsp+A8h] [rbp+10h]
  __int16 v29; // [rsp+B8h] [rbp+20h]

  v5 = (_BYTE *)(*(_QWORD *)(a2 + 8) + *(unsigned int *)(a2 + 4));
  v6 = 0;
  v10 = a4;
  v11 = *(_DWORD *)(a1 + 60);
  v12 = *(_WORD *)(a1 + 34);
  v13 = *(_WORD *)(a1 + 32) & 4;
  if ( v13 )
  {
    v20 = *(_DWORD *)(a1 + 52);
    v21 = a4 + *(_DWORD *)(a1 + 48);
    v14 = *(_DWORD *)(a1 + 44);
    v28 = v14;
    if ( v20 )
    {
      if ( (*(_BYTE *)(a1 + 56) & 1) != 0 )
        v20 -= v21 % v20;
      v21 += v20;
    }
    v10 = v14 + v21;
  }
  else
  {
    v14 = 0;
    v28 = 0;
  }
  v15 = v11 + v10;
  v16 = v12;
  v17 = v11;
  v29 = v12;
  v27 = v15;
  if ( v15 > *(_DWORD *)a2 )
    return 122i64;
  if ( !v13 || (v22 = *(_QWORD *)(a1 + 8)) == 0 || !*(_DWORD *)(v22 + 28) )
  {
    v18 = *(_BYTE *)(a1 + 233);
    if ( !v18 )
      ++*(_QWORD *)(a1 + 184);
    goto LABEL_7;
  }
  if ( *(_QWORD *)(a1 + 152) )
  {
LABEL_19:
    if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
    {
      WPP_SF_Di(
        *((_QWORD *)WPP_GLOBAL_Control + 2),
        0xCu,
        (__int64)&WPP_a921c2bd799c3cf4dae399b64001ae9a_Traceguids,
        a4,
        *(_QWORD *)(a1 + 184));
      v15 = v27;
      v14 = v28;
    }
    v23 = *(__int64 **)(a1 + 8);
    if ( v23 )
      v24 = *v23;
    else
      v24 = 0i64;
    v25 = SslEncryptPacket(v24, *(_QWORD *)(a1 + 152), &v5[v17 + v14], a4, v5, v15, &v27, *(_QWORD *)(a1 + 184), a3, 0);
    v6 = v25;
    if ( v25 )
    {
      if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) != 0 )
        WPP_SF_D(*((_QWORD *)WPP_GLOBAL_Control + 2), 13i64, &WPP_a921c2bd799c3cf4dae399b64001ae9a_Traceguids, v25);
      v18 = *(_BYTE *)(a1 + 233);
      v6 = -2146893015;
    }
    else
    {
      v18 = *(_BYTE *)(a1 + 233);
      if ( !v18 )
        ++*(_QWORD *)(a1 + 184);
    }
    v16 = v29;
LABEL_7:
    *v5 = a3;
    v5[1] = HIBYTE(v12);
    v5[2] = v16;
    if ( v18 )
    {
      v5[3] = *(_BYTE *)(a1 + 191);
      v5[4] = *(_BYTE *)(a1 + 190);
      v5[5] = *(_BYTE *)(a1 + 189);
      v5[6] = *(_BYTE *)(a1 + 188);
      v5[7] = *(_BYTE *)(a1 + 187);
      v5[8] = *(_BYTE *)(a1 + 186);
      v5[9] = *(_BYTE *)(a1 + 185);
      v5[10] = *(_BYTE *)(a1 + 184);
      v5[11] = (unsigned __int16)(v27 - v17) >> 8;
      v5[12] = v27 - v17;
      *(_QWORD *)(a1 + 184) ^= (*(_QWORD *)(a1 + 184) ^ (*(_QWORD *)(a1 + 184) + 1i64)) & 0xFFFFFFFFFFFFi64;
    }
    else
    {
      v5[3] = (unsigned __int16)(v27 - v17) >> 8;
      v5[4] = v27 - v17;
    }
    *(_DWORD *)(a2 + 4) += v27;
    return v6;
  }
  if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 10i64, &WPP_a921c2bd799c3cf4dae399b64001ae9a_Traceguids);
  result = RemotelyGetUserKeys((struct CSslContext *)a1, 2u);
  v26 = result;
  if ( !(_DWORD)result )
  {
    v15 = v27;
    v14 = v28;
    goto LABEL_19;
  }
  if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) != 0 )
  {
    WPP_SF_D(
      *((_QWORD *)WPP_GLOBAL_Control + 2),
      11i64,
      &WPP_a921c2bd799c3cf4dae399b64001ae9a_Traceguids,
      (unsigned int)result);
    return v26;
  }
  return result;
}
// 180041CB0: using guessed type __int64 __fastcall WPP_SF_(_QWORD, _QWORD, _QWORD);
// 180041CDC: using guessed type __int64 __fastcall WPP_SF_D(_QWORD, _QWORD, _QWORD, _QWORD);
// 180098508: using guessed type __int64 __fastcall SslEncryptPacket(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD, _QWORD, _QWORD, _DWORD, _DWORD);
