Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 144
// Total lines: 274

//----- (000000018000C40C) ----------------------------------------------------
__int64 __fastcall SslUnsealMessageStream(struct CSslUserContext *a1, struct _SecBufferDesc *a2)
{
  struct _SecBuffer *v2; // rdi
  struct _SecBuffer *v3; // rsi
  struct _SecBuffer *v4; // r12
  struct _SecBuffer *v5; // r14
  CCipherMill *v8; // r10
  unsigned int cBuffers; // r11d
  unsigned int v10; // ecx
  PSecBuffer pBuffers; // rdx
  unsigned int *p_BufferType; // r9
  __int64 v13; // r8
  _BYTE *pvBuffer; // rdx
  unsigned int v15; // ecx
  unsigned int v16; // r11d
  int v17; // r9d
  unsigned int v18; // r15d
  int v19; // r8d
  int v20; // eax
  unsigned int v21; // r9d
  unsigned int v22; // eax
  unsigned int v23; // ebx
  unsigned int v25; // eax
  unsigned __int16 v26; // dx
  bool v27; // zf
  int v28; // ecx
  int v29; // eax
  unsigned int v30; // r11d
  __int64 v31; // [rsp+20h] [rbp-30h]
  unsigned int v32; // [rsp+30h] [rbp-20h] BYREF
  unsigned int cbBuffer; // [rsp+34h] [rbp-1Ch]
  unsigned __int8 *v34; // [rsp+38h] [rbp-18h]
  __int128 v35; // [rsp+40h] [rbp-10h] BYREF
  unsigned __int8 v36; // [rsp+98h] [rbp+48h] BYREF
  struct _SecBuffer *v37; // [rsp+A0h] [rbp+50h]

  v2 = 0i64;
  v3 = 0i64;
  v4 = 0i64;
  v5 = 0i64;
  v37 = 0i64;
  v36 = 0;
  v35 = 0i64;
  v8 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 0x20) != 0 )
  {
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 72i64, &WPP_744a13241c3c3d6f8c9be4f6b1c08345_Traceguids);
    v8 = WPP_GLOBAL_Control;
  }
  cBuffers = a2->cBuffers;
  v10 = 0;
  if ( !cBuffers )
    goto LABEL_95;
  pBuffers = a2->pBuffers;
  p_BufferType = &pBuffers->BufferType;
  do
  {
    v13 = *p_BufferType;
    if ( (_DWORD)v13 )
    {
      v13 = (unsigned int)(v13 - 1);
      if ( (_DWORD)v13 )
      {
        if ( (_DWORD)v13 == 16 )
          v37 = &pBuffers[v10];
      }
      else
      {
        v2 = &pBuffers[v10];
      }
    }
    else if ( v3 )
    {
      if ( v4 )
      {
        if ( !v5 )
          v5 = &pBuffers[v10];
      }
      else
      {
        v4 = &pBuffers[v10];
      }
    }
    else
    {
      v3 = &pBuffers[v10];
    }
    ++v10;
    p_BufferType += 4;
  }
  while ( v10 < cBuffers );
  if ( !v2 || !v3 || !v4 || !v5 )
  {
LABEL_95:
    if ( v8 == (CCipherMill *)&WPP_GLOBAL_Control || (*((_BYTE *)v8 + 28) & 5) == 0 )
      return 2148074248i64;
    v26 = 73;
    goto LABEL_97;
  }
  pvBuffer = v2->pvBuffer;
  if ( !pvBuffer )
  {
    if ( v8 == (CCipherMill *)&WPP_GLOBAL_Control || (*((_BYTE *)v8 + 28) & 5) == 0 )
      return 2148074248i64;
    v26 = 74;
LABEL_97:
    WPP_SF_DD(
      *((_QWORD *)v8 + 2),
      v26,
      (__int64)&WPP_744a13241c3c3d6f8c9be4f6b1c08345_Traceguids,
      -2146893048,
      -2146893048);
    return 2148074248i64;
  }
  v15 = *((_DWORD *)a1 + 6);
  v34 = (unsigned __int8 *)v2->pvBuffer;
  cbBuffer = v2->cbBuffer;
  v16 = v2->cbBuffer;
  v32 = v2->cbBuffer;
  if ( v15 > 0x800 )
  {
    if ( v15 == 4096 || v15 == 0x2000 || v15 == 0x10000 || v15 == 0x20000 || v15 == 0x40000 )
      goto LABEL_20;
    v27 = v15 == 0x80000;
  }
  else
  {
    if ( v15 == 2048 || v15 == 16 || v15 == 32 || v15 == 64 || v15 == 128 || v15 == 256 || v15 == 512 )
      goto LABEL_20;
    v27 = v15 == 1024;
  }
  if ( !v27 )
  {
    v23 = -2146893055;
    goto LABEL_34;
  }
LABEL_20:
  v17 = *((_DWORD *)a1 + 17);
  v18 = v17 + *((_DWORD *)a1 + 16);
  if ( v16 < v18 )
  {
    if ( (v15 & 0x50000) != 0 && !*((_BYTE *)a1 + 140) )
    {
      if ( pvBuffer[1] == 0xFE && ((unsigned __int8)pvBuffer[2] | ((unsigned __int8)pvBuffer[1] << 8)) <= 0xFEFFu )
      {
        v28 = (unsigned __int8)pvBuffer[11];
        v29 = (unsigned __int8)pvBuffer[12];
      }
      else
      {
        v28 = (unsigned __int8)pvBuffer[3];
        v29 = (unsigned __int8)pvBuffer[4];
      }
      if ( v17 + (v29 | (unsigned int)(v28 << 8)) < v18
        && *pvBuffer == 20
        && ((unsigned __int8)pvBuffer[4] | ((unsigned __int8)pvBuffer[3] << 8)) < *((_DWORD *)a1 + 29) )
      {
        v23 = -2146893005;
        goto LABEL_34;
      }
    }
    cbBuffer = v17 + *((_DWORD *)a1 + 16);
    goto LABEL_44;
  }
  if ( pvBuffer[1] == 0xFE && ((unsigned __int8)pvBuffer[2] | ((unsigned __int8)pvBuffer[1] << 8)) <= 0xFEFFu )
  {
    v19 = (unsigned __int8)pvBuffer[11];
    v20 = (unsigned __int8)pvBuffer[12];
  }
  else
  {
    v19 = (unsigned __int8)pvBuffer[3];
    v20 = (unsigned __int8)pvBuffer[4];
  }
  v13 = v20 | (unsigned int)(v19 << 8);
  v21 = v13 + v17;
  if ( v21 < v18 )
  {
    v23 = -2146893048;
    v36 = 50;
    goto LABEL_34;
  }
  LODWORD(v35) = v16;
  *((_QWORD *)&v35 + 1) = &pvBuffer[v18];
  DWORD1(v35) = v21 - v18;
  if ( v16 < v21 )
  {
    cbBuffer = v21;
LABEL_44:
    v23 = -2146893032;
    goto LABEL_45;
  }
  if ( (v15 & 0x3000) != 0 )
    v22 = Tls13DecryptHandler(a1, (struct SPBuffer *)&v32, (struct SPBuffer *)&v35, &v36);
  else
    v22 = TlsDecryptHandler(a1, (struct SPBuffer *)&v32, (struct SPBuffer *)&v35, &v36);
  v23 = v22;
  if ( (*((_DWORD *)a1 + 6) & 0xF0000) != 0 )
  {
    if ( !v22 )
    {
      if ( !CSslUserContext::DTLSCheckRecordValidity(
              a1,
              v34[10] | ((v34[9] | ((v34[8] | ((v34[7] | ((v34[6] | ((v34[5] | ((v34[4] | ((unsigned __int64)v34[3] << 8)) << 8)) << 8)) << 8)) << 8)) << 8)) << 8)) )
      {
        v8 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) != 0 )
        {
          WPP_SF_D(*((_QWORD *)WPP_GLOBAL_Control + 2), 76i64, &WPP_744a13241c3c3d6f8c9be4f6b1c08345_Traceguids, v30);
          v8 = WPP_GLOBAL_Control;
        }
        v23 = -2146893040;
        goto LABEL_34;
      }
      goto LABEL_30;
    }
  }
  else if ( !v22 )
  {
LABEL_30:
    if ( cbBuffer < v2->cbBuffer )
    {
      v5->BufferType = 5;
      v5->cbBuffer = v2->cbBuffer - cbBuffer;
      v5->pvBuffer = (char *)v2->pvBuffer + cbBuffer;
    }
    v2->BufferType = 7;
    v2->cbBuffer = v18;
    v3->BufferType = 1;
    v3->pvBuffer = (void *)*((_QWORD *)&v35 + 1);
    v3->cbBuffer = DWORD1(v35);
    v4->BufferType = 6;
    v4->pvBuffer = (char *)v3->pvBuffer + DWORD1(v35);
    v4->cbBuffer = v32 - DWORD1(v35) - v18;
    goto LABEL_33;
  }
  if ( v22 == 590625 )
    goto LABEL_30;
  if ( v22 == -2146893032 )
  {
LABEL_45:
    v3->BufferType = 4;
    v25 = cbBuffer - v2->cbBuffer;
    v3->cbBuffer = v25;
    if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
      WPP_SF_ddd(*((_QWORD *)WPP_GLOBAL_Control + 2), (__int64)pvBuffer, v13, v2->cbBuffer, cbBuffer, v25);
    v2->BufferType = 4;
    v2->cbBuffer = cbBuffer - v2->cbBuffer;
    v8 = WPP_GLOBAL_Control;
    goto LABEL_34;
  }
LABEL_33:
  v8 = WPP_GLOBAL_Control;
LABEL_34:
  if ( v37 )
  {
    GenerateUserFatalAlertMessage(a1, (__int64)v37, v36);
    v8 = WPP_GLOBAL_Control;
  }
  if ( v8 != (CCipherMill *)&WPP_GLOBAL_Control
    && ((*((_BYTE *)v8 + 28) & 1) != 0 && v23 || (*((_BYTE *)v8 + 28) & 4) != 0) )
  {
    LODWORD(v31) = v23;
    WPP_SF_DD(*((_QWORD *)v8 + 2), 0x52u, (__int64)&WPP_744a13241c3c3d6f8c9be4f6b1c08345_Traceguids, v23, v31);
  }
  return v23;
}
// 1800368C6: variable 'pvBuffer' is possibly undefined
// 1800368C6: variable 'v13' is possibly undefined
// 180036894: variable 'v30' is possibly undefined
// 180036908: variable 'v31' is possibly undefined
// 180041CB0: using guessed type __int64 __fastcall WPP_SF_(_QWORD, _QWORD, _QWORD);
// 180041CDC: using guessed type __int64 __fastcall WPP_SF_D(_QWORD, _QWORD, _QWORD, _QWORD);
