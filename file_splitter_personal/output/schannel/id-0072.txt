Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 72
// Total lines: 452

//----- (00000001800053D0) ----------------------------------------------------
__int64 __fastcall CSsl3TlsClientContext::ProcessHandshake(
        CSsl3TlsClientContext *this,
        unsigned __int8 *a2,
        unsigned int a3,
        unsigned __int8 *a4)
{
  unsigned int SessionKeys; // ebx
  bool v5; // cf
  int v8; // ecx
  unsigned int v9; // r15d
  int v10; // eax
  unsigned int v11; // r12d
  unsigned int v12; // ecx
  unsigned __int8 *v13; // r14
  unsigned int v14; // ebp
  CCipherMill *v15; // rcx
  __int64 v16; // r8
  int v17; // r9d
  HLOCAL v18; // rax
  struct _RTL_RESOURCE *v19; // rcx
  int v20; // edx
  __int64 v22; // rax
  CCipherMill *v23; // rcx
  __int64 v24; // rdx
  struct CSessionCacheManager *v25; // rdx
  __int64 v26; // rcx
  struct CSessionCacheClientItem *v27; // rbx
  int v28; // eax
  __int64 v29; // rcx
  __int64 v30; // rcx
  CCipherMill *v31; // rcx
  void *v32; // rcx
  CCipherMill *v33; // rcx
  __int64 v34; // rax
  __int64 v35; // rax
  unsigned __int8 v36; // r9
  int v37; // edx
  __int64 v38; // rdx
  CCipherMill *v39; // rcx
  unsigned int v40; // eax
  struct CSessionCacheClientItem *v41; // [rsp+50h] [rbp-88h] BYREF
  unsigned __int8 *v42; // [rsp+58h] [rbp-80h]
  __int128 Src[2]; // [rsp+60h] [rbp-78h] BYREF

  SessionKeys = 0;
  v5 = *((_BYTE *)this + 233) != 0;
  v42 = a4;
  *(_DWORD *)a4 = 0;
  v8 = *a2;
  v9 = 32;
  v10 = *((unsigned __int16 *)this + 34);
  v41 = 0i64;
  v11 = v5 ? 12 : 4;
  v12 = v10 | (v8 << 16);
  v13 = &a2[v11];
  v14 = a3 - v11;
  memset(Src, 0, sizeof(Src));
  if ( v12 > 0xC0046 )
  {
    if ( v12 < 0xD0029 )
      goto LABEL_151;
    if ( v12 > 0xD002B )
    {
      if ( v12 <= 0xE0028 )
        goto LABEL_151;
      if ( v12 > 0xE002C )
      {
        if ( v12 == 1310765 )
        {
          if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control
            && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
          {
            WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 32i64, &WPP_2dcc559eea6f3c37d295569df36f7bc3_Traceguids);
          }
          SessionKeys = CSsl3TlsContext::DigestFinish(this, v13, v14);
          v19 = (struct _RTL_RESOURCE *)(*((_QWORD *)this + 165) + 72i64);
          if ( !SessionKeys )
          {
            RtlAcquireResourceExclusive(v19, 1u);
            UpdateServerCertificateSerialChainProperty(this, 0);
            RtlReleaseResource((PRTL_RESOURCE)(*((_QWORD *)this + 165) + 72i64));
            *(_DWORD *)v42 = 1;
            (*(void (__fastcall **)(CSsl3TlsClientContext *))(*(_QWORD *)this + 448i64))(this);
            if ( (*((_DWORD *)this + 34) & 0x8000000) != 0 )
              CSessionCacheManager::FinishCacheAddItem(CSessionCacheManager::m_pSessionCacheManager, this);
            return SessionKeys;
          }
LABEL_130:
          RtlAcquireResourceExclusive(v19, 1u);
          CSessionCacheClientItem::SetSessionTicket(
            *((CSessionCacheClientItem **)this + 165),
            0i64,
            0,
            0i64,
            0,
            0,
            0,
            0,
            0);
          RtlReleaseResource((PRTL_RESOURCE)(*((_QWORD *)this + 165) + 72i64));
          return SessionKeys;
        }
        if ( v12 == 1310768 )
        {
          if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control
            && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
          {
            WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 31i64, &WPP_2dcc559eea6f3c37d295569df36f7bc3_Traceguids);
          }
          SessionKeys = CSsl3TlsContext::DigestFinish(this, v13, v14);
          v19 = (struct _RTL_RESOURCE *)(*((_QWORD *)this + 165) + 72i64);
          if ( !SessionKeys )
          {
            RtlAcquireResourceExclusive(v19, 1u);
            UpdateServerCertificateSerialChainProperty(this, 1u);
            RtlReleaseResource((PRTL_RESOURCE)(*((_QWORD *)this + 165) + 72i64));
            *((_DWORD *)this + 17) = 92;
            return SessionKeys;
          }
          goto LABEL_130;
        }
        if ( v12 != 917574 )
        {
          if ( v12 != 1441833 )
            goto LABEL_151;
          v33 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control
            && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
          {
            WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 20i64, &WPP_2dcc559eea6f3c37d295569df36f7bc3_Traceguids);
            v33 = WPP_GLOBAL_Control;
          }
          if ( *(_DWORD *)(*((_QWORD *)this + 1) + 48i64) == 4 )
          {
            if ( v33 != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)v33 + 28) & 1) != 0 )
              WPP_SF_(*((_QWORD *)v33 + 2), 21i64, &WPP_2dcc559eea6f3c37d295569df36f7bc3_Traceguids);
            v36 = 10;
            v37 = 200;
            goto LABEL_116;
          }
          SessionKeys = CSsl3TlsClientContext::DigestCertificateStatus(this, v13, v14);
          if ( !SessionKeys )
            *((_DWORD *)this + 17) = 42;
          return SessionKeys;
        }
      }
      v15 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
      {
        WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 27i64, &WPP_2dcc559eea6f3c37d295569df36f7bc3_Traceguids);
        v15 = WPP_GLOBAL_Control;
      }
      if ( a3 > v11 )
        return (unsigned int)-2146893048;
      if ( *(_DWORD *)(*((_QWORD *)this + 1) + 48i64) != 4 )
      {
        if ( *((_WORD *)this + 34) == 70 )
        {
          if ( v15 == (CCipherMill *)&WPP_GLOBAL_Control || (*((_BYTE *)v15 + 28) & 1) == 0 )
            goto LABEL_155;
          v38 = 28i64;
          goto LABEL_154;
        }
        CreateServerCertificateSerialChainProperty(this);
        SessionKeys = AutoVerifyServerCertificate(this);
        if ( SessionKeys )
          return SessionKeys;
      }
      SessionKeys = CSsl3TlsClientContext::DigestServerKeyX(
                      this,
                      *((unsigned __int8 **)this + 121),
                      *((_DWORD *)this + 244),
                      a4);
      if ( !SessionKeys )
      {
        v32 = (void *)*((_QWORD *)this + 121);
        if ( v32 )
        {
          SPExternalFree(v32);
          *((_QWORD *)this + 121) = 0i64;
        }
        *((_DWORD *)this + 17) = 91;
        *((_BYTE *)this + 924) = 0;
        if ( *((_BYTE *)this + 1314) )
        {
          SessionKeys = CSsl3TlsClientContext::CheckForClientCred(this);
          *((_BYTE *)this + 1314) = 0;
        }
        if ( *((_BYTE *)this + 1313) )
          return 590624;
      }
      return SessionKeys;
    }
    v39 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
    {
      WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 25i64, &WPP_2dcc559eea6f3c37d295569df36f7bc3_Traceguids);
      v39 = WPP_GLOBAL_Control;
    }
    if ( *(_DWORD *)(*((_QWORD *)this + 1) + 48i64) == 4 )
    {
      if ( v39 != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)v39 + 28) & 1) != 0 )
        WPP_SF_(*((_QWORD *)v39 + 2), 26i64, &WPP_2dcc559eea6f3c37d295569df36f7bc3_Traceguids);
      v36 = 10;
      v37 = 400;
      goto LABEL_116;
    }
    SessionKeys = CSsl3TlsClientContext::DigestCertificateRequest(this, v13, v14);
    if ( SessionKeys )
      return SessionKeys;
    v40 = CSsl3TlsClientContext::CheckForClientCred(this);
    SessionKeys = v40;
    if ( v40 == -2146893024 )
    {
      *((_BYTE *)this + 1313) = 1;
    }
    else if ( v40 != 590624 )
    {
      if ( v40 )
        return SessionKeys;
      goto LABEL_147;
    }
    SessionKeys = 0;
LABEL_147:
    *((_BYTE *)this + 1315) = 1;
    *((_DWORD *)this + 17) = 44;
    return SessionKeys;
  }
  switch ( v12 )
  {
    case 0xC0046u:
LABEL_11:
      v15 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
      {
        WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 22i64, &WPP_2dcc559eea6f3c37d295569df36f7bc3_Traceguids);
        v15 = WPP_GLOBAL_Control;
      }
      v16 = *((_QWORD *)this + 1);
      v17 = *(_DWORD *)(v16 + 48);
      if ( v17 == 4 )
      {
LABEL_17:
        *((_DWORD *)this + 244) = v14;
        v18 = SPExternalAlloc(v14);
        *((_QWORD *)this + 121) = v18;
        if ( v18 )
        {
          memcpy_0(v18, v13, *((unsigned int *)this + 244));
          *((_DWORD *)this + 17) = 43;
        }
        else
        {
          return 14;
        }
        return SessionKeys;
      }
      if ( *((_WORD *)this + 34) != 70 )
      {
        if ( (unsigned int)(v17 - 2) > 1 && !*(_BYTE *)(v16 + 72) )
        {
          if ( v15 != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)v15 + 28) & 1) != 0 )
            WPP_SF_(*((_QWORD *)v15 + 2), 24i64, &WPP_2dcc559eea6f3c37d295569df36f7bc3_Traceguids);
          v36 = 10;
          v37 = 824;
LABEL_116:
          SessionKeys = -2146893018;
          CSslContext::SetErrorAndFatalAlert((__int64)this, v37, -2146893018, v36);
          return SessionKeys;
        }
        goto LABEL_17;
      }
      if ( v15 == (CCipherMill *)&WPP_GLOBAL_Control || (*((_BYTE *)v15 + 28) & 1) == 0 )
        goto LABEL_155;
      v38 = 23i64;
      goto LABEL_154;
    case 0x20028u:
      if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
        WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 14i64, &WPP_2dcc559eea6f3c37d295569df36f7bc3_Traceguids);
      SessionKeys = CSsl3TlsClientContext::DigestServerHello(this, v13, v14, (int *)&v41);
      if ( SessionKeys )
        return SessionKeys;
      if ( (_DWORD)v41 )
      {
        v34 = *((_QWORD *)this + 17);
        if ( (v34 & 0x1000000) == 0 )
        {
          if ( (v34 & 0x8000000) == 0 )
          {
            if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control
              && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) != 0 )
            {
              WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 15i64, &WPP_2dcc559eea6f3c37d295569df36f7bc3_Traceguids);
            }
            v36 = 40;
            v37 = 106;
            goto LABEL_116;
          }
          if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control
            && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
          {
            WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 16i64, &WPP_2dcc559eea6f3c37d295569df36f7bc3_Traceguids);
          }
          v35 = *((_QWORD *)this + 15);
          if ( v35 && CSchannelTelemetryContext::m_bTelemetryIsGloballyInitialized )
          {
            *(_WORD *)(v35 + 64) |= 4u;
            *(_DWORD *)(v35 + 24) = 1;
          }
          RtlAcquireResourceShared((PRTL_RESOURCE)(*((_QWORD *)this + 165) + 72i64), 1u);
          SessionKeys = CSslContext::MakeSessionKeys(this, *(_QWORD *)(*((_QWORD *)this + 165) + 16i64));
          RtlReleaseResource((PRTL_RESOURCE)(*((_QWORD *)this + 165) + 72i64));
          if ( SessionKeys )
            return SessionKeys;
        }
        v20 = 47;
      }
      else
      {
        v20 = 70;
      }
      *((_DWORD *)this + 17) = v20;
      *((_BYTE *)this + 1315) = 0;
      return SessionKeys;
    case 0x30028u:
      SessionKeys = CSsl3TlsClientContext::DigestServerHelloVerifyRequest(this, v13, v14);
      if ( !SessionKeys )
        *((_DWORD *)this + 17) = 97;
      return SessionKeys;
    case 0xB0046u:
      goto LABEL_47;
    case 0x4002Eu:
      if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
        WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 29i64, &WPP_2dcc559eea6f3c37d295569df36f7bc3_Traceguids);
      SessionKeys = CSsl3TlsClientContext::DigestNewSessionTicket(this, v13, v14);
      if ( !SessionKeys )
        *((_DWORD *)this + 17) = 50;
      return SessionKeys;
    case 0xB002Fu:
      v22 = *((_QWORD *)this + 17);
      if ( (v22 & 0x1000000) != 0 )
      {
        v23 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
        {
          WPP_SF_S(
            *((_QWORD *)WPP_GLOBAL_Control + 2),
            0x11u,
            (__int64)&WPP_2dcc559eea6f3c37d295569df36f7bc3_Traceguids,
            *(const wchar_t **)(*((_QWORD *)this + 165) + 368i64));
          v22 = *((_QWORD *)this + 17);
        }
        v24 = *((_QWORD *)this + 165);
        *((_QWORD *)this + 17) = v22 & 0xFFFFFFFFFEFFFFFFui64;
        CSessionCacheManager::AcquireCacheTableLock((__int64)v23, *(const unsigned __int16 **)(v24 + 368), 0i64);
        RtlAcquireResourceExclusive((PRTL_RESOURCE)(*((_QWORD *)this + 165) + 72i64), 1u);
        v25 = CSessionCacheManager::m_pSessionCacheManager;
        *(_BYTE *)(*((_QWORD *)this + 165) + 236i64) = 0;
        SessionKeys = CSessionCacheClientItem::CloneCacheElement(*((CSessionCacheClientItem **)this + 165), v25, &v41);
        RtlReleaseResource((PRTL_RESOURCE)(*((_QWORD *)this + 165) + 72i64));
        if ( SessionKeys )
        {
          CSessionCacheManager::ReleaseCacheTableLock(
            v26,
            *(const unsigned __int16 **)(*((_QWORD *)this + 165) + 368i64),
            0i64);
          return SessionKeys;
        }
        v27 = v41;
        RtlAcquireResourceExclusive((PRTL_RESOURCE)((char *)v41 + 72), 1u);
        v28 = *((_DWORD *)this + 16);
        *((_QWORD *)this + 165) = v27;
        *((_QWORD *)this + 11) = v27;
        *((_DWORD *)v27 + 42) = v28;
        if ( *((unsigned __int16 *)this + 490) > 0x20u
          || (v9 = *((unsigned __int16 *)this + 490),
              memcpy_0(Src, (char *)this + 982, *((unsigned __int16 *)this + 490)),
              v9) )
        {
          v29 = *((_QWORD *)this + 165);
          *(_WORD *)(v29 + 238) = v9;
          memcpy_0((void *)(v29 + 240), Src, v9);
        }
        RtlReleaseResource((PRTL_RESOURCE)(*((_QWORD *)this + 165) + 72i64));
        CSessionCacheManager::ReleaseCacheTableLock(
          v30,
          *(const unsigned __int16 **)(*((_QWORD *)this + 165) + 368i64),
          0i64);
      }
LABEL_47:
      v31 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
      {
        WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 18i64, &WPP_2dcc559eea6f3c37d295569df36f7bc3_Traceguids);
        v31 = WPP_GLOBAL_Control;
      }
      if ( *(_DWORD *)(*((_QWORD *)this + 1) + 48i64) == 4 )
      {
        if ( v31 != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)v31 + 28) & 1) != 0 )
          WPP_SF_(*((_QWORD *)v31 + 2), 19i64, &WPP_2dcc559eea6f3c37d295569df36f7bc3_Traceguids);
        v36 = 10;
        v37 = 250;
        goto LABEL_116;
      }
      SessionKeys = CSsl3TlsContext::DigestRemoteCertificate(this, v13, v14);
      if ( !SessionKeys )
      {
        if ( (*((_DWORD *)this + 34) & 0x20000000) == 0
          || (RtlAcquireResourceExclusive((PRTL_RESOURCE)(*((_QWORD *)this + 165) + 72i64), 1u),
              SessionKeys = CSessionCacheClientItem::UpdateRemoteEndpointBindings(*((CSessionCacheClientItem **)this
                                                                                  + 165)),
              RtlReleaseResource((PRTL_RESOURCE)(*((_QWORD *)this + 165) + 72i64)),
              !SessionKeys) )
        {
          *((_DWORD *)this + 17) = 41;
        }
      }
      return SessionKeys;
  }
  if ( v12 != 262191 )
  {
    if ( v12 > 0xC0028 && v12 <= 0xC002A )
      goto LABEL_11;
LABEL_151:
    v15 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CCipherMill *)&WPP_GLOBAL_Control || (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) == 0 )
      goto LABEL_155;
    v38 = 33i64;
LABEL_154:
    WPP_SF_(*((_QWORD *)v15 + 2), v38, &WPP_2dcc559eea6f3c37d295569df36f7bc3_Traceguids);
LABEL_155:
    if ( (*((_DWORD *)this + 16) & 0xF3FC0) != 0 )
    {
      *((_DWORD *)this + 17) = 96;
      *((_WORD *)this + 48) = 2562;
    }
    return (unsigned int)-2146893018;
  }
  if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 30i64, &WPP_2dcc559eea6f3c37d295569df36f7bc3_Traceguids);
  SessionKeys = CSsl3TlsClientContext::DigestNewSessionTicket(this, v13, v14);
  if ( !SessionKeys )
    *((_DWORD *)this + 17) = 52;
  return SessionKeys;
}
// 1800056F2: variable 'v23' is possibly undefined
// 1800057F4: variable 'v30' is possibly undefined
// 1800058D0: variable 'a4' is possibly undefined
// 18002D70A: variable 'v26' is possibly undefined
// 180041CB0: using guessed type __int64 __fastcall WPP_SF_(_QWORD, _QWORD, _QWORD);
// 1800927AC: using guessed type bool CSchannelTelemetryContext::m_bTelemetryIsGloballyInitialized;
##############################
Function Background: The function is reverse engineered from the driver file Schannel.dll on Windows platform. Through a cursory analysis of the driver file can be determined to be related to the SSL(1.3), TLS(3.0) protocol, that is, with RFC8446, RFC6101 strong correlation.

Output Function Summary: Summarizes the function's functionality with several phrases instead of sentences, focuses on covering the function's control flow information (API), and highlights the protocol function points implemented by the function. Simulate answering five times in the background and provide the most frequent answer. Suppose the code support the latest newwork protocol SSL(3.0) AND TLS(1.3)

Retrieve document sections based on code summaries (containing multiple phrases) and RFC section information, giving matches for document sections(FunctionMatchRFCResult) that the code may related to. Note that if the code is only business related and not related to the specifics of the protocol implementation, it does not have to output the document section match(FunctionMatchRFCResult) and is padded with NONE.

Generate Function Information Collection with JSON Format:

{
	"FunctionIndex": "(FILL WITH "File count" with less than four bits are indexed with zeros to make up the four bits.)",
	"FunctionName": "(Full Function Code Name)",
	"FunctionSummarization": [
		"(Function Summary Phrase1)",
		"(Function Summary Phrase2)",
		"(...)"
	],
	"FunctionMatchRFCResult": [
		"(RFCXXXX-SectionX.X.X.X-Section Title 1)",
		"(RFCXXXX-SectionX.X.X.X-Section Title 2)",
		"(...)",
	],
}

Remember just output the Function Information Collection result.
