Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 437
// Total lines: 391

//----- (000000018001B930) ----------------------------------------------------
__int64 __fastcall CSslCredential::IsServerCredApplicable(
        __int64 a1,
        __int64 a2,
        __int64 a3,
        int a4,
        __int64 a5,
        struct _TLS_PARAMETERS *a6,
        unsigned int a7,
        PCUNICODE_STRING String2,
        char a9)
{
  int v9; // esi
  int v12; // ebx
  _DWORD *v13; // rax
  int v14; // r14d
  unsigned int v15; // r12d
  CCipherMill *v16; // r10
  __int64 v17; // r12
  const wchar_t *v18; // rbx
  int v19; // eax
  unsigned int v20; // r9d
  struct _TLS_PARAMETERS *v21; // r15
  const UNICODE_STRING *v22; // r13
  struct _TLS_PARAMETERS *v23; // rbx
  struct _TLS_PARAMETERS *v24; // r14
  int v25; // eax
  unsigned int v26; // r11d
  int v27; // eax
  _DWORD *v28; // rdx
  unsigned __int8 i; // r9
  int v30; // ebx
  int v31; // ecx
  int v32; // edx
  unsigned __int16 v33; // r8
  unsigned __int16 v34; // cx
  unsigned __int16 v35; // r8
  unsigned __int16 v36; // cx
  int v37; // r8d
  __int64 v38; // rdx
  int v39; // ebx
  struct _CERT_INFO *v40; // rdx
  unsigned int v42; // ebp
  unsigned __int64 v43; // rbp
  unsigned int v44; // eax
  unsigned int v45; // eax
  int v46; // r9d
  bool v47; // zf
  int v48; // eax
  int v49; // eax
  __int64 v50; // [rsp+20h] [rbp-68h]
  PCUNICODE_STRING v51; // [rsp+28h] [rbp-60h]
  unsigned int v52; // [rsp+40h] [rbp-48h]
  int v53; // [rsp+48h] [rbp-40h]
  unsigned int pbKeyUsage; // [rsp+90h] [rbp+8h] BYREF
  int v55; // [rsp+A0h] [rbp+18h]
  int v56; // [rsp+A8h] [rbp+20h]

  v56 = a4;
  v9 = 0;
  v12 = 0;
  if ( a3 )
    v12 = *(_DWORD *)(a3 + 772);
  v13 = *(_DWORD **)(a1 + 32);
  if ( !v13 )
    return 0i64;
  if ( *v13 != 1 )
    return 0i64;
  if ( !a2 )
    return 0i64;
  v14 = *(_DWORD *)(a2 + 32);
  v15 = *(_DWORD *)(a2 + 36);
  v55 = v14;
  v52 = v15;
  if ( !*(_QWORD *)(a1 + 432) && !*(_DWORD *)(a1 + 132) )
    return 0i64;
  if ( v14 == 41984 && *(_DWORD *)(a1 + 124) == 1 )
  {
    v46 = *(_DWORD *)(a1 + 128);
    if ( v46 != 1 )
    {
      if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 2) != 0 )
        WPP_SF_d(
          *((_QWORD *)WPP_GLOBAL_Control + 2),
          0x2Au,
          (__int64)&WPP_221bc911720835f3baa7a86739b227e3_Traceguids,
          v46);
      return 0i64;
    }
  }
  v16 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
  {
    WPP_SF_DD(
      *((_QWORD *)WPP_GLOBAL_Control + 2),
      0x2Bu,
      (__int64)&WPP_221bc911720835f3baa7a86739b227e3_Traceguids,
      v15,
      *(_DWORD *)(a1 + 132));
    v16 = WPP_GLOBAL_Control;
  }
  if ( v15 == 9216 )
  {
    if ( ((*(_DWORD *)(a1 + 132) - 9216) & 0xFFFF7FFF) != 0 )
      return 0i64;
    goto LABEL_13;
  }
  if ( v15 == 8704 )
  {
    v47 = *(_DWORD *)(a1 + 132) == 8704;
LABEL_113:
    if ( !v47 )
      return 0i64;
    goto LABEL_13;
  }
  if ( v15 != 8707 )
  {
    if ( v15 != 41984 )
    {
      if ( !v15 || *(_DWORD *)(a1 + 132) == v15 )
        goto LABEL_13;
      if ( v16 != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)v16 + 28) & 2) != 0 )
        WPP_SF_D(*((_QWORD *)v16 + 2), 45i64, &WPP_221bc911720835f3baa7a86739b227e3_Traceguids, v15);
      return 0i64;
    }
    v47 = *(_DWORD *)(a1 + 132) == 41984;
    goto LABEL_113;
  }
  if ( *(_DWORD *)(a1 + 132) != 8707 )
    return 0i64;
  if ( v12 != *(_DWORD *)(a1 + 140) )
  {
    if ( v16 != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)v16 + 28) & 2) != 0 )
    {
      LODWORD(v50) = *(_DWORD *)(a1 + 140);
      WPP_SF_DD(*((_QWORD *)v16 + 2), 0x2Cu, (__int64)&WPP_221bc911720835f3baa7a86739b227e3_Traceguids, v12, v50);
    }
    return 0i64;
  }
LABEL_13:
  v17 = a7;
  v53 = 3;
  if ( !a7 )
    goto LABEL_33;
  v18 = (const wchar_t *)(a1 + 272);
  v19 = *(_DWORD *)(a1 + 132);
  v20 = v19 == 8707 ? *(_DWORD *)(a1 + 136) : *(_DWORD *)(a1 + 428);
  v21 = a6;
  pbKeyUsage = v20;
  if ( !a6 || !v19 || a1 == -144 || a1 == -272 )
    goto LABEL_33;
  if ( v19 == 8707 )
  {
    if ( a3
      && IsEcdsaAlgorithmBlacklisted(a6, a7, (const unsigned __int16 *)a3, *(_DWORD *)(a3 + 772), v20, String2, a9) )
    {
      return 0i64;
    }
  }
  else if ( v19 == 8704 )
  {
    if ( IsCngAlgorithmBlacklisted((unsigned __int64)a6, a7, 1, L"DSA", 0i64, v20, String2, a9) )
      return 0i64;
  }
  else
  {
    v22 = String2;
    if ( v19 == 41984 )
    {
      if ( v14 == 41984 && IsRsaAlgorithmBlacklisted((unsigned __int64)a6, a7, 0, v20, String2, a9) )
        return 0i64;
      goto LABEL_24;
    }
    if ( v19 == 9216 )
    {
LABEL_24:
      v23 = v21;
      v24 = (struct _TLS_PARAMETERS *)((char *)v21 + 40 * v17);
      if ( v21 < v24 )
      {
        while ( 1 )
        {
          if ( *((_DWORD *)v23 + 5) )
          {
            if ( !*(_DWORD *)v23 )
              goto LABEL_75;
            if ( v22 )
              break;
          }
LABEL_28:
          v23 = (struct _TLS_PARAMETERS *)((char *)v23 + 40);
          if ( v23 >= v24 )
            goto LABEL_29;
        }
        v42 = 0;
        while ( RtlCompareUnicodeString((PCUNICODE_STRING)(*((_QWORD *)v23 + 1) + 16i64 * v42), v22, 1u) )
        {
          if ( ++v42 >= *(_DWORD *)v23 )
            goto LABEL_28;
        }
LABEL_75:
        if ( a9 && (*((_BYTE *)v23 + 32) & 1) != 0 )
          goto LABEL_28;
        v43 = *((_QWORD *)v23 + 3);
        if ( v43 >= v43 + 48i64 * *((unsigned int *)v23 + 5) )
          goto LABEL_28;
        while ( 1 )
        {
          if ( *(_DWORD *)v43 != 1 || *(_WORD *)(v43 + 8) != 6 || wcsncmp(*(const wchar_t **)(v43 + 16), L"RSA", 3ui64) )
            goto LABEL_79;
          if ( !*(_DWORD *)(v43 + 24) && !*(_DWORD *)(v43 + 40) && !*(_DWORD *)(v43 + 44) )
          {
            if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control
              && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
            {
              LODWORD(v50) = 1;
              WPP_SF_Sd(
                *((_QWORD *)WPP_GLOBAL_Control + 2),
                0xCu,
                (__int64)&WPP_8df7ab8bd71935acb34f6c4601d37485_Traceguids,
                L"RSA",
                v50);
            }
            return 0i64;
          }
          if ( !pbKeyUsage )
            goto LABEL_79;
          v44 = *(_DWORD *)(v43 + 40);
          if ( v44 )
          {
            if ( v44 > pbKeyUsage )
              goto LABEL_134;
            v45 = *(_DWORD *)(v43 + 44);
            if ( !v45 )
              goto LABEL_79;
          }
          else
          {
            if ( !*(_DWORD *)(v43 + 44) )
              goto LABEL_79;
            v45 = *(_DWORD *)(v43 + 44);
          }
          if ( v45 < pbKeyUsage )
          {
LABEL_134:
            if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control
              && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
            {
              LODWORD(v51) = 1;
              LODWORD(v50) = pbKeyUsage;
              WPP_SF_Sdd(
                *((_QWORD *)WPP_GLOBAL_Control + 2),
                0xEu,
                (__int64)&WPP_8df7ab8bd71935acb34f6c4601d37485_Traceguids,
                L"RSA",
                v50,
                v51);
            }
            return 0i64;
          }
LABEL_79:
          v43 += 48i64;
          if ( v43 >= *((_QWORD *)v23 + 3) + 48 * (unsigned __int64)*((unsigned int *)v23 + 5) )
            goto LABEL_28;
        }
      }
LABEL_29:
      v14 = v55;
      v18 = (const wchar_t *)(a1 + 272);
    }
  }
  if ( IsCngAlgorithmBlacklisted((unsigned __int64)v21, v17, 4, (const wchar_t *)(a1 + 144), 0i64, 0, 0i64, 1)
    || IsCngAlgorithmBlacklisted((unsigned __int64)v21, v17, 4, v18, 0i64, 0, 0i64, 1) )
  {
    return 0i64;
  }
  v16 = WPP_GLOBAL_Control;
LABEL_33:
  if ( !a5 )
    goto LABEL_57;
  v25 = *(_DWORD *)(a1 + 132);
  v26 = *(_DWORD *)(a1 + 428);
  if ( v25 != 41984 )
  {
    v48 = v25 - 8704;
    if ( !v48 )
    {
      v27 = 2;
      goto LABEL_36;
    }
    v49 = v48 - 3;
    if ( !v49 )
    {
      v27 = 3;
      goto LABEL_37;
    }
    if ( v49 != 509 )
      return 0i64;
  }
  v27 = 1;
LABEL_36:
  v53 = v27;
LABEL_37:
  v28 = &unk_18007C3A8;
  for ( i = 0; ; ++i )
  {
    v30 = v28[1];
    if ( v30 == v27
      && (v56 & *v28) != 0
      && (!v26 || v27 != 1 || v28[9] != 8 || v26 >> 3 >= 2 * (unsigned int)*((unsigned __int8 *)v28 + 32) + 2)
      && ((v56 & 0x3000) == 0 || v30 != 3 || v28[10] == *(_DWORD *)(a1 + 140))
      && i < 0xCu )
    {
      v31 = *(unsigned __int16 *)(a5 + 34);
      if ( _bittest(&v31, i) )
        break;
    }
    v28 += 18;
    if ( v28 - 6 >= (_DWORD *)&CSsl3TlsServerContext::`vftable' )
      return 0i64;
    v27 = v53;
  }
  if ( a1 == -512 )
    return 2i64;
  if ( !*(_WORD *)(a1 + 512) )
    return 2i64;
  v32 = *(unsigned __int16 *)(a1 + 546);
  if ( !(_WORD)v32 )
    return 2i64;
  v33 = (CTlsSignatureSuiteList::RsaSha256Flags & (unsigned __int16)v31) != 0
      ? CTlsSignatureSuiteList::RsaSha256Flags
      : 0;
  v34 = v33 | v31;
  v35 = (CTlsSignatureSuiteList::RsaSha384Flags & v34) != 0 ? CTlsSignatureSuiteList::RsaSha384Flags : 0;
  v36 = v35 | v34;
  v37 = (CTlsSignatureSuiteList::RsaSha512Flags & v36) != 0 ? CTlsSignatureSuiteList::RsaSha512Flags : 0;
  if ( (~(v37 | v36) & v32) != 0 )
    return 2i64;
LABEL_57:
  v38 = *(_QWORD *)(a1 + 32);
  if ( !v38 )
    return 2i64;
  if ( v52 != 9216 )
    goto LABEL_68;
  if ( v14 != 44550 )
  {
    if ( v14 == 41984 )
    {
      v39 = 32;
      goto LABEL_61;
    }
    if ( v14 != 43522 )
      goto LABEL_68;
  }
  v39 = 128;
LABEL_61:
  v40 = *(struct _CERT_INFO **)(v38 + 24);
  pbKeyUsage = 0;
  if ( CertGetIntendedKeyUsage(0x10001u, v40, (BYTE *)&pbKeyUsage, 4u) )
  {
    if ( (pbKeyUsage & v39) != 0 )
      v9 = 1;
    v16 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 2) != 0 )
    {
      LODWORD(v50) = v39;
      WPP_SF_DD(
        *((_QWORD *)WPP_GLOBAL_Control + 2),
        0x14u,
        (__int64)&WPP_8df7ab8bd71935acb34f6c4601d37485_Traceguids,
        pbKeyUsage,
        v50);
      v16 = WPP_GLOBAL_Control;
    }
    if ( v9 )
      goto LABEL_68;
    return 2i64;
  }
  v16 = WPP_GLOBAL_Control;
LABEL_68:
  if ( v16 != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)v16 + 28) & 4) != 0 )
    WPP_SF_D(*((_QWORD *)v16 + 2), 46i64, &WPP_221bc911720835f3baa7a86739b227e3_Traceguids, v52);
  return 1i64;
}
// 1800306CF: variable 'v50' is possibly undefined
// 1800305E3: variable 'v51' is possibly undefined
// 180041CDC: using guessed type __int64 __fastcall WPP_SF_D(_QWORD, _QWORD, _QWORD, _QWORD);
// 18007C6F0: using guessed type void *CSsl3TlsServerContext::`vftable';
// 180092800: using guessed type unsigned __int16 CTlsSignatureSuiteList::RsaSha512Flags;
// 180092804: using guessed type unsigned __int16 CTlsSignatureSuiteList::RsaSha384Flags;
// 180092808: using guessed type unsigned __int16 CTlsSignatureSuiteList::RsaSha256Flags;
##############################
Function Background: The function is reverse engineered from the driver file Schannel.dll on Windows platform. Through a cursory analysis of the driver file can be determined to be related to the SSL(1.3), TLS(3.0) protocol, that is, with RFC8446, RFC6101 strong correlation.

Output Function Summary: Summarizes the function's functionality with several phrases instead of sentences, focuses on covering the function's control flow information (API), and highlights the protocol function points implemented by the function. Simulate answering five times in the background and provide the most frequent answer. Suppose the code support the latest newwork protocol SSL(3.0) AND TLS(1.3)

Retrieve document sections based on code summaries (containing multiple phrases) and RFC section information, giving matches for document sections(FunctionMatchRFCResult) that the code may related to. Note that if the code is only business related and not related to the specifics of the protocol implementation, it does not have to output the document section match(FunctionMatchRFCResult) and is padded with NONE.

Generate Function Information Collection with JSON Format:

{
	"FunctionIndex": "(FILL WITH "File count" with less than four bits are indexed with zeros to make up the four bits.)",
	"FunctionName": "(Full Function Code Name)",
	"FunctionSummarization": [
		"(Function Summary Phrase1)",
		"(Function Summary Phrase2)",
		"(...)"
	],
	"FunctionMatchRFCResult": [
		"(RFCXXXX-SectionX.X.X.X-Section Title 1)",
		"(RFCXXXX-SectionX.X.X.X-Section Title 2)",
		"(...)",
	],
}

Remember just output the Function Information Collection result.
