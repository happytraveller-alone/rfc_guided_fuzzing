Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 39
// Total lines: 184

//----- (0000000180003750) ----------------------------------------------------
CSsl3TlsClientContext *__fastcall CSsl3TlsClientContext::CSsl3TlsClientContext(
        CSsl3TlsClientContext *this,
        struct CSessionCacheClientItem *a2,
        int a3,
        const unsigned __int16 *a4)
{
  unsigned __int16 v8; // ax
  unsigned int v9; // ecx
  int v10; // eax
  _DWORD *v11; // rdi
  __int16 v12; // ax
  __int16 v13; // cx
  CSsl3TlsClientContext *result; // rax
  char v15[8]; // [rsp+20h] [rbp-28h] BYREF
  char v16; // [rsp+28h] [rbp-20h]

  *(_QWORD *)this = &CSslContext::`vftable';
  *((_QWORD *)this + 1) = 0i64;
  *((_QWORD *)this + 2) = 0i64;
  *((_QWORD *)this + 3) = 0i64;
  *((_WORD *)this + 16) = 0;
  *((_DWORD *)this + 9) = 0;
  *(_OWORD *)((char *)this + 40) = 0i64;
  *((_DWORD *)this + 14) = 0;
  *((_DWORD *)this + 16) = a3;
  *(_QWORD *)((char *)this + 68) = 0i64;
  *((_QWORD *)this + 10) = 0i64;
  *((_QWORD *)this + 11) = a2;
  *((_WORD *)this + 48) = 0;
  *((_QWORD *)this + 13) = 0i64;
  *((_QWORD *)this + 14) = 0i64;
  *((_QWORD *)this + 15) = 0i64;
  *((_QWORD *)this + 16) = 0i64;
  *((_QWORD *)this + 17) = 0i64;
  *((_QWORD *)this + 18) = 0i64;
  *((_QWORD *)this + 19) = 0i64;
  *((_QWORD *)this + 20) = 0i64;
  *((_QWORD *)this + 21) = 0i64;
  *((_QWORD *)this + 22) = 0i64;
  *((_QWORD *)this + 23) = 0i64;
  *((_DWORD *)this + 48) = 0;
  *((_QWORD *)this + 25) = 0i64;
  *((_QWORD *)this + 26) = 0i64;
  *((_DWORD *)this + 54) = 0;
  *((_WORD *)this + 110) = 0;
  *((_QWORD *)this + 28) = 0i64;
  *((_BYTE *)this + 232) = 0;
  *((_WORD *)this + 117) = 0;
  *((_QWORD *)this + 30) = 0i64;
  *((_QWORD *)this + 31) = 0i64;
  *((_QWORD *)this + 32) = 0i64;
  *((_WORD *)this + 132) = 0;
  *((_BYTE *)this + 266) = 0;
  if ( a2 )
    *((_DWORD *)this + 4) = *((_DWORD *)a2 + 46);
  if ( (*(unsigned __int8 (__fastcall **)(char *))(LsaTable + 192))(v15) )
  {
    if ( (v16 & 1) != 0 )
      *((_QWORD *)this + 17) |= 0x20000000ui64;
    *((_BYTE *)this + 266) = (v16 & 0x11) == 0;
  }
  v8 = ConvertSchannelProtocolToSsl(*((_DWORD *)this + 16));
  v9 = v8;
  *((_WORD *)this + 17) = v8;
  if ( HIBYTE(v8) != 0xFE || (v10 = 13, v9 > 0xFEFF) )
    v10 = 5;
  *((_DWORD *)this + 15) = v10;
  *((_BYTE *)this + 233) = (a3 & 0xF0000) != 0;
  if ( dword_180091480
    && (qword_180091490 & 0x400000000000i64) != 0
    && (qword_180091498 & 0x400000000000i64) == qword_180091498
    && (v11 = SPExternalAlloc(0x700u)) != 0i64 )
  {
    v11[2] = 0;
    *(_QWORD *)v11 = &CSchannelTelemetryContext::`vftable';
    *((_BYTE *)v11 + 16) = 0;
    v11[5] = 1;
    memset_0(v11 + 6, 0, 0x6E8ui64);
  }
  else
  {
    v11 = 0i64;
  }
  *((_QWORD *)this + 15) = v11;
  memset_0((char *)this + 272, 0, 0x40ui64);
  *((_DWORD *)this + 84) = 0;
  *((_BYTE *)this + 340) = 0;
  memset_0((char *)this + 341, 0, 0x48ui64);
  *((_DWORD *)this + 104) = 0;
  *(_OWORD *)((char *)this + 420) = 0i64;
  *(_OWORD *)((char *)this + 436) = 0i64;
  *(_QWORD *)((char *)this + 452) = 0i64;
  *((_QWORD *)this + 58) = 0i64;
  *((_DWORD *)this + 118) = 0;
  *(_OWORD *)((char *)this + 476) = 0i64;
  *(_OWORD *)((char *)this + 492) = 0i64;
  *((_DWORD *)this + 127) = 0;
  *((_OWORD *)this + 32) = 0i64;
  *((_OWORD *)this + 33) = 0i64;
  *((_WORD *)this + 272) = 0;
  *(_QWORD *)((char *)this + 548) = 0i64;
  *((_BYTE *)this + 556) = 0;
  *((_OWORD *)this + 35) = 0i64;
  memset_0((char *)this + 592, 0, 0x80ui64);
  *((_DWORD *)this + 180) = 0;
  *(_OWORD *)((char *)this + 724) = 0i64;
  v12 = 0;
  *(_OWORD *)((char *)this + 740) = 0i64;
  *(_OWORD *)((char *)this + 756) = 0i64;
  *(_QWORD *)((char *)this + 772) = 0i64;
  *((_DWORD *)this + 195) = 0;
  *((_QWORD *)this + 98) = 0i64;
  *((_QWORD *)this + 99) = 0i64;
  *((_QWORD *)this + 100) = 0i64;
  *((_QWORD *)this + 101) = 0i64;
  *((_QWORD *)this + 102) = 0i64;
  *((_QWORD *)this + 103) = 0i64;
  *((_QWORD *)this + 104) = 0i64;
  *((_QWORD *)this + 105) = 0i64;
  *((_QWORD *)this + 106) = 0i64;
  *((_QWORD *)this + 107) = 0i64;
  *((_QWORD *)this + 108) = 0i64;
  *((_DWORD *)this + 218) = 0;
  *((_QWORD *)this + 110) = 0i64;
  *((_DWORD *)this + 222) = 0;
  *((_QWORD *)this + 112) = 0i64;
  *((_QWORD *)this + 113) = 0i64;
  *((_QWORD *)this + 114) = 0i64;
  *((_DWORD *)this + 230) = 0;
  *((_WORD *)this + 462) = 0;
  if ( *((_BYTE *)this + 233) )
  {
    v12 = 1083;
    v13 = 1096;
  }
  else
  {
    *((_DWORD *)this + 48) = -1;
    v13 = 0;
    *((_QWORD *)this + 25) = 0i64;
    *((_QWORD *)this + 26) = 0i64;
  }
  *((_WORD *)this + 108) = v13;
  *((_WORD *)this + 109) = v12;
  *((_QWORD *)this + 116) = 0i64;
  *(_QWORD *)this = &CSsl3TlsClientContext::`vftable';
  *((_QWORD *)this + 117) = 0i64;
  *((_DWORD *)this + 236) = 0;
  *((_QWORD *)this + 119) = 0i64;
  *((_DWORD *)this + 240) = 0;
  *((_QWORD *)this + 121) = 0i64;
  *((_DWORD *)this + 244) = 0;
  *((_WORD *)this + 490) = 0;
  *(_OWORD *)((char *)this + 982) = 0i64;
  *(_OWORD *)((char *)this + 998) = 0i64;
  *((_QWORD *)this + 127) = 0i64;
  *((_QWORD *)this + 128) = 0i64;
  *((_BYTE *)this + 1032) = 0;
  *((_QWORD *)this + 130) = 0i64;
  *((_DWORD *)this + 262) = 0;
  memset_0((char *)this + 1052, 0, 0xFFui64);
  *(_QWORD *)((char *)this + 1308) = 0i64;
  *((_QWORD *)this + 165) = a2;
  *((_QWORD *)this + 166) = a4;
  *((_QWORD *)this + 167) = 0i64;
  *((_BYTE *)this + 1344) = 0;
  *((_WORD *)this + 673) = 0;
  *((_DWORD *)this + 337) = 0;
  *((_QWORD *)this + 169) = 0i64;
  *((_DWORD *)this + 340) = 0;
  result = this;
  *((_DWORD *)this + 17) = 40;
  *((_QWORD *)this + 73) = 0i64;
  *((_QWORD *)this + 72) = 0i64;
  return result;
}
// 18007C000: using guessed type void *CSsl3TlsClientContext::`vftable';
// 18007CDB8: using guessed type void *CSslContext::`vftable';
// 18007CF58: using guessed type void *CSchannelTelemetryContext::`vftable';
// 180091490: using guessed type __int64 qword_180091490;
// 180091498: using guessed type __int64 qword_180091498;
// 180092620: using guessed type __int64 LsaTable;
// 180003750: using guessed type char var_28[8];
##############################
Function Background: The function is reverse engineered from the driver file Schannel.dll on Windows platform. Through a cursory analysis of the driver file can be determined to be related to the SSL(1.3), TLS(3.0) protocol, that is, with RFC8446, RFC6101 strong correlation.

Output Function Summary: Summarizes the function's functionality with several phrases instead of sentences, focuses on covering the function's control flow information (API), and highlights the protocol function points implemented by the function. Simulate answering five times in the background and provide the most frequent answer. Suppose the code support the latest newwork protocol SSL(3.0) AND TLS(1.3)

Retrieve document sections based on code summaries (containing multiple phrases) and RFC section information, giving matches for document sections(FunctionMatchRFCResult) that the code may related to. Note that if the code is only business related and not related to the specifics of the protocol implementation, it does not have to output the document section match(FunctionMatchRFCResult) and is padded with NONE.

Generate Function Information Collection with JSON Format:

{
	"FunctionIndex": "(FILL WITH "File count" with less than four bits are indexed with zeros to make up the four bits.)",
	"FunctionName": "(Full Function Code Name)",
	"FunctionSummarization": [
		"(Function Summary Phrase1)",
		"(Function Summary Phrase2)",
		"(...)"
	],
	"FunctionMatchRFCResult": [
		"(RFCXXXX-SectionX.X.X.X-Section Title 1)",
		"(RFCXXXX-SectionX.X.X.X-Section Title 2)",
		"(...)",
	],
}

Remember just output the Function Information Collection result.
