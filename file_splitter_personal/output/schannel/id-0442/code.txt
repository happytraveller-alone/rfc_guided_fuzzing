Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 442
// Total lines: 224

//----- (000000018001CBE0) ----------------------------------------------------
__int64 __fastcall CCipherMill::FindAcceptableCipherSuite(
        CCipherMill *this,
        struct CSsl3TlsServerContext *a2,
        struct CCipherSuiteInfo *a3,
        char a4,
        struct _UNICODE_STRING *String2,
        unsigned __int8 a6,
        enum _eTlsHashAlgorithm a7,
        unsigned int *a8,
        unsigned __int8 *a9)
{
  __int64 v11; // r8
  unsigned int v12; // r11d
  unsigned __int64 v13; // r10
  unsigned int v14; // esi
  unsigned int v15; // ebp
  int v16; // r9d
  int v17; // edi
  int v18; // eax
  unsigned int *v19; // rdx
  int v20; // r10d
  int v21; // r8d
  int v22; // ebx
  int v23; // edx
  unsigned __int8 v24; // r9
  _DWORD *i; // rax
  int v26; // ecx
  int v27; // ecx
  char v28; // al
  char v29; // r8
  unsigned int AcceptableKeyXCurve; // ebx
  __int64 v32; // rax
  int v33; // ecx
  struct hsel *HashInfo; // rax
  __int64 v35; // [rsp+20h] [rbp-98h]
  __int64 v36; // [rsp+20h] [rbp-98h]
  __int64 v37; // [rsp+70h] [rbp-48h]
  int v38; // [rsp+C0h] [rbp+8h]
  const wchar_t *v39; // [rsp+C8h] [rbp+10h]

  if ( !a2 || !a3 || !a8 || !a9 )
    return 2148074333i64;
  v11 = *((_QWORD *)a2 + 10);
  v12 = *(_DWORD *)(v11 + 196);
  v13 = *(_QWORD *)(v11 + 200);
  v14 = *(_DWORD *)(v11 + 164);
  v15 = *(_DWORD *)(v11 + 168);
  v16 = *(_DWORD *)(v11 + 192);
  v17 = *((_DWORD *)a2 + 16);
  v39 = (const wchar_t *)((char *)a3 + 74);
  v18 = *(_DWORD *)(v11 + 156);
  v37 = v11;
  LODWORD(v11) = *(_DWORD *)(v11 + 176);
  v38 = 1;
  v19 = *(unsigned int **)(v37 + 184);
  *a8 = 0;
  *a9 = 0;
  if ( !CCipherMill::IsCipherSuiteAllowed(
          (__int64)g_cCipherMill,
          v19,
          v11,
          v16,
          (v18 & 0x1000) != 0,
          v18 & 0x800,
          v15,
          v14,
          v17,
          (__int64)a3,
          String2,
          v13,
          v12,
          a6) )
  {
    if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
      WPP_SF_S(
        *((_QWORD *)WPP_GLOBAL_Control + 2),
        0x29u,
        (__int64)&WPP_bcb3b342e8be3997fa3752f6a9108bb3_Traceguids,
        v39);
    return (unsigned int)-2146893007;
  }
  v20 = *((_DWORD *)a3 + 12);
  if ( v20 == 4 )
    return 0;
  if ( *((_DWORD *)a2 + 17) == 71 )
  {
    if ( (*((_BYTE *)a2 + 32) & 1) != 0 && (v32 = *((_QWORD *)a2 + 1)) != 0 )
      v33 = *(_DWORD *)(v32 + 28);
    else
      v33 = 0;
    if ( *((_DWORD *)a3 + 7) != v33 )
    {
      if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
      {
        WPP_SF_S(
          *((_QWORD *)WPP_GLOBAL_Control + 2),
          0x2Au,
          (__int64)&WPP_bcb3b342e8be3997fa3752f6a9108bb3_Traceguids,
          v39);
        return (unsigned int)-2146893007;
      }
      return (unsigned int)-2146893007;
    }
  }
  v21 = *((_DWORD *)a2 + 16);
  if ( (v21 & 0x40400) != 0 && a2 != (struct CSsl3TlsServerContext *)-510i64 )
  {
    v22 = *((_DWORD *)a3 + 9);
    switch ( v22 )
    {
      case 9216:
        goto LABEL_11;
      case 8704:
        v23 = 2;
        v38 = 2;
        goto LABEL_12;
      case 8707:
        v23 = 3;
        v38 = 3;
        goto LABEL_12;
      case 41984:
LABEL_11:
        v23 = 1;
LABEL_12:
        v24 = 0;
        for ( i = &unk_18007C3A8; i - 6 < (_DWORD *)&CSsl3TlsServerContext::`vftable'; i += 18 )
        {
          v26 = i[1];
          if ( v26 == v23 && (v21 & *i) != 0 && ((v21 & 0x3000) == 0 || v26 != 3 || !i[10]) && v24 < 0xCu )
          {
            v27 = *((unsigned __int16 *)a2 + 272);
            if ( _bittest(&v27, v24) )
              goto LABEL_20;
            v23 = v38;
          }
          ++v24;
        }
        break;
    }
    if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
    {
      LODWORD(v35) = *((_DWORD *)a3 + 9);
      WPP_SF_SD(
        *((_QWORD *)WPP_GLOBAL_Control + 2),
        0x2Bu,
        (__int64)&WPP_bcb3b342e8be3997fa3752f6a9108bb3_Traceguids,
        v39,
        v35);
      return (unsigned int)-2146893007;
    }
    return (unsigned int)-2146893007;
  }
LABEL_20:
  v28 = a4;
  if ( (v21 & 0x1000) == 0 )
  {
    v29 = 0;
    goto LABEL_22;
  }
  v29 = 1;
  if ( !a4 )
    goto LABEL_22;
  HashInfo = GetHashInfo(*((_DWORD *)a3 + 11));
  if ( HashInfo )
  {
    if ( a7 != *((_DWORD *)HashInfo + 8) )
    {
      if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
      {
        LODWORD(v35) = a7;
        WPP_SF_Sd(
          *((_QWORD *)WPP_GLOBAL_Control + 2),
          0x2Cu,
          (__int64)&WPP_bcb3b342e8be3997fa3752f6a9108bb3_Traceguids,
          v39,
          v35);
        return (unsigned int)-2146893007;
      }
      return (unsigned int)-2146893007;
    }
    v28 = a4;
LABEL_22:
    if ( v20 == 3 || v29 )
    {
      AcceptableKeyXCurve = CCipherMill::FindAcceptableKeyXCurve((CCipherMill *)a6, a2, a3, v28, a6, String2, a8, a9);
      if ( AcceptableKeyXCurve )
      {
        if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
        {
          LODWORD(v36) = AcceptableKeyXCurve;
          WPP_SF_SD(
            *((_QWORD *)WPP_GLOBAL_Control + 2),
            0x2Du,
            (__int64)&WPP_bcb3b342e8be3997fa3752f6a9108bb3_Traceguids,
            (const wchar_t *)a3 + 37,
            v36);
        }
        return AcceptableKeyXCurve;
      }
    }
    else if ( v20 == 2
           && IsDheAlgorithmBlacklisted(*(struct _TLS_PARAMETERS **)(v37 + 200), *(_DWORD *)(v37 + 196), 0, String2, a6) )
    {
      if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
      {
        WPP_SF_S(
          *((_QWORD *)WPP_GLOBAL_Control + 2),
          0x2Eu,
          (__int64)&WPP_bcb3b342e8be3997fa3752f6a9108bb3_Traceguids,
          v39);
        return (unsigned int)-2146893007;
      }
      return (unsigned int)-2146893007;
    }
    return 0;
  }
  return 1359i64;
}
// 18001CDD3: variable 'v20' is possibly undefined
// 18003101B: variable 'v35' is possibly undefined
// 1800310ED: variable 'v29' is possibly undefined
// 1800311AF: variable 'v36' is possibly undefined
// 18007C6F0: using guessed type void *CSsl3TlsServerContext::`vftable';
