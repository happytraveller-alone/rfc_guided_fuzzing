Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 887
// Total lines: 223

//----- (00000001800494F8) ----------------------------------------------------
__int64 __fastcall SslMapCertAtDC(
        struct _UNICODE_STRING *a1,
        void *a2,
        unsigned int a3,
        int a4,
        int a5,
        unsigned __int8 **a6,
        unsigned int *a7,
        struct _MSV1_0_PASSTHROUGH_RESPONSE **a8)
{
  size_t v10; // r13
  int v12; // eax
  unsigned int v13; // ebx
  CCipherMill *v14; // rcx
  __int64 v15; // rdx
  __int64 v16; // r9
  int v17; // r14d
  PVOID *p_ProtocolReturnBuffer; // rdi
  ULONG v19; // esi
  unsigned __int64 v20; // rcx
  unsigned __int64 v21; // rax
  void *v22; // rsp
  _DWORD *v23; // rax
  char *v24; // rbx
  void *v25; // rdx
  unsigned __int64 v26; // rcx
  int v27; // eax
  __int64 v28; // r14
  size_t v29; // rdi
  void *v30; // rax
  unsigned __int8 *v31; // rsi
  int v32; // eax
  void *v33; // rdi
  struct _MSV1_0_PASSTHROUGH_RESPONSE *v34; // rcx
  __int64 v35; // [rsp+0h] [rbp-40h] BYREF
  PVOID ProtocolReturnBuffer; // [rsp+40h] [rbp+0h] BYREF
  void *Src; // [rsp+48h] [rbp+8h] BYREF
  int v38; // [rsp+50h] [rbp+10h] BYREF
  int ProtocolStatus; // [rsp+54h] [rbp+14h] BYREF
  unsigned int v40; // [rsp+58h] [rbp+18h] BYREF
  void *v41; // [rsp+60h] [rbp+20h] BYREF
  ULONG ReturnBufferLength; // [rsp+68h] [rbp+28h] BYREF

  ProtocolReturnBuffer = 0i64;
  v41 = 0i64;
  v10 = a3;
  Src = a2;
  if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_DWORD *)WPP_GLOBAL_Control + 7) & 0x100) != 0 )
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 58i64, &WPP_dd7b7bddfdb936bf76d1675dae523069_Traceguids);
  if ( (unsigned int)v10 > 0x4000 )
    return 2148074278i64;
  if ( a4 && !a5 )
  {
    v38 = 1;
    v12 = LsaIIsDomainWithinForest(a1, &v38, 0i64, &v41, 0i64, 0i64, 0i64);
    v13 = v12;
    if ( v12 < 0 )
    {
      v14 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CCipherMill *)&WPP_GLOBAL_Control || (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) == 0 )
        goto LABEL_56;
      v15 = 59i64;
      v16 = (unsigned int)v12;
      goto LABEL_12;
    }
    if ( !v38 )
    {
      v13 = -2146893039;
      v14 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CCipherMill *)&WPP_GLOBAL_Control || (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) == 0 )
        goto LABEL_56;
      v15 = 60i64;
      v16 = 2148074257i64;
      goto LABEL_12;
    }
  }
  v17 = (v10 + 3) & 0xFFFFFFFC;
  p_ProtocolReturnBuffer = 0i64;
  v19 = ((SslLegacyPackageName.Length + 3 + a1->Length) & 0xFFFFFFFC) + v17 + 64;
  if ( !v19 )
    goto LABEL_25;
  if ( v19 > (unsigned __int64)g_ulMaxStackAllocSize )
    goto LABEL_25;
  v20 = v19 + g_ulAdditionalProbeSize + 8;
  if ( v20 < v19 || !(unsigned int)VerifyStackAvailable(v20) )
    goto LABEL_25;
  v21 = v19 + 8 + 15i64;
  if ( v21 <= v19 + 8 )
    v21 = 0xFFFFFFFFFFFFFF0i64;
  v22 = alloca(v21 & 0xFFFFFFFFFFFFFFF0ui64);
  p_ProtocolReturnBuffer = &ProtocolReturnBuffer;
  if ( &v35 == (__int64 *)-64i64
    || (LODWORD(ProtocolReturnBuffer) = 1801679955, (p_ProtocolReturnBuffer = &Src) == 0i64) )
  {
LABEL_25:
    if ( v19 + 8 >= v19 )
    {
      v23 = (_DWORD *)((__int64 (__fastcall *)(_QWORD))g_pfnAllocate)(v19 + 8);
      if ( !v23 )
      {
LABEL_29:
        v13 = -2146893056;
        goto LABEL_56;
      }
      *v23 = 1885431112;
      p_ProtocolReturnBuffer = (PVOID *)(v23 + 2);
    }
    if ( !p_ProtocolReturnBuffer )
      goto LABEL_29;
  }
  *(_DWORD *)p_ProtocolReturnBuffer = 7;
  *(struct _UNICODE_STRING *)(p_ProtocolReturnBuffer + 1) = *a1;
  p_ProtocolReturnBuffer[2] = p_ProtocolReturnBuffer + 8;
  memcpy_0(p_ProtocolReturnBuffer + 8, a1->Buffer, a1->Length);
  v24 = (char *)p_ProtocolReturnBuffer + a1->Length + 64;
  *(struct _UNICODE_STRING *)(p_ProtocolReturnBuffer + 3) = SslLegacyPackageName;
  p_ProtocolReturnBuffer[4] = v24;
  memcpy_0(v24, SslLegacyPackageName.Buffer, SslLegacyPackageName.Length);
  v25 = Src;
  v26 = (unsigned __int64)&v24[SslLegacyPackageName.Length + 3];
  *((_DWORD *)p_ProtocolReturnBuffer + 10) = v17;
  v26 &= 0xFFFFFFFFFFFFFFFCui64;
  p_ProtocolReturnBuffer[6] = (PVOID)v26;
  memcpy_0((void *)v26, v25, v10);
  v13 = LsaCallAuthenticationPackage(
          SslLogonHandle,
          SslMsvPackageId,
          p_ProtocolReturnBuffer,
          v19,
          &ProtocolReturnBuffer,
          &ReturnBufferLength,
          &ProtocolStatus);
  if ( *((_DWORD *)p_ProtocolReturnBuffer - 2) == 1885431112 )
    ((void (*)(void))g_pfnFree)();
  if ( (v13 & 0x80000000) == 0 )
  {
    v27 = ProtocolStatus;
    if ( ProtocolStatus < 0 )
    {
      if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 7) & 0x100) != 0 )
      {
        WPP_SF_D(
          *((_QWORD *)WPP_GLOBAL_Control + 2),
          62i64,
          &WPP_dd7b7bddfdb936bf76d1675dae523069_Traceguids,
          (unsigned int)ProtocolStatus);
        v27 = ProtocolStatus;
      }
      v13 = v27;
      goto LABEL_56;
    }
    v28 = *((_QWORD *)ProtocolReturnBuffer + 2);
    v40 = *(_DWORD *)(v28 + 12);
    v29 = v40;
    v30 = MIDL_user_allocate(v40);
    Src = v30;
    v31 = (unsigned __int8 *)v30;
    if ( !v30 )
    {
      v13 = -1073741801;
      goto LABEL_56;
    }
    memcpy_0(v30, (const void *)(v28 + *(unsigned int *)(v28 + 8)), v29);
    if ( !a5 )
    {
      v32 = SslCheckPacForSidFiltering(v41, (unsigned __int8 **)&Src, &v40);
      v13 = v32;
      if ( v32 < 0 )
      {
        if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 7) & 0x100) != 0 )
        {
          WPP_SF_D(
            *((_QWORD *)WPP_GLOBAL_Control + 2),
            63i64,
            &WPP_dd7b7bddfdb936bf76d1675dae523069_Traceguids,
            (unsigned int)v32);
        }
        v33 = Src;
LABEL_54:
        if ( v33 )
          (*(void (__fastcall **)(void *))(LsaTable + 48))(v33);
        goto LABEL_56;
      }
      v31 = (unsigned __int8 *)Src;
      LODWORD(v29) = v40;
    }
    v34 = (struct _MSV1_0_PASSTHROUGH_RESPONSE *)ProtocolReturnBuffer;
    *a6 = v31;
    *a7 = v29;
    v33 = 0i64;
    ProtocolReturnBuffer = 0i64;
    *a8 = v34;
    if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_DWORD *)WPP_GLOBAL_Control + 7) & 0x100) != 0 )
      WPP_SF_D(*((_QWORD *)WPP_GLOBAL_Control + 2), 64i64, &WPP_dd7b7bddfdb936bf76d1675dae523069_Traceguids, v13);
    v13 = 0;
    goto LABEL_54;
  }
  ProtocolReturnBuffer = 0i64;
  v14 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control == (CCipherMill *)&WPP_GLOBAL_Control || (*((_DWORD *)WPP_GLOBAL_Control + 7) & 0x100) == 0 )
    goto LABEL_56;
  v15 = 61i64;
  v16 = v13;
LABEL_12:
  WPP_SF_D(*((_QWORD *)v14 + 2), v15, &WPP_dd7b7bddfdb936bf76d1675dae523069_Traceguids, v16);
LABEL_56:
  if ( v41 )
    (*(void (**)(void))(LsaTable + 48))();
  if ( ProtocolReturnBuffer )
    (*(void (**)(void))(LsaTable + 184))();
  return v13;
}
// 180041CB0: using guessed type __int64 __fastcall WPP_SF_(_QWORD, _QWORD, _QWORD);
// 180041CDC: using guessed type __int64 __fastcall WPP_SF_D(_QWORD, _QWORD, _QWORD, _QWORD);
// 1800920E0: using guessed type __int64 g_ulMaxStackAllocSize;
// 1800920E8: using guessed type __int64 g_ulAdditionalProbeSize;
// 1800920F0: using guessed type __int64 g_pfnAllocate;
// 1800920F8: using guessed type __int64 g_pfnFree;
// 180092620: using guessed type __int64 LsaTable;
// 180098240: using guessed type __int64 __fastcall LsaIIsDomainWithinForest(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
##############################
Role: Let's assume that you are an advanced reverse engineer and you are reverse engineering a network driver using IDA Pro, and you are also familiar with the RFC documentation. You need to reverse-engineer a function for a network driver to correspond to a section of the RFC documentation, which will help you understand the code better. The driver you're reversing is Schannel.dll, and you've initially determined that the corresponding network protocols are SSL and TLS, and the documents you need to map are RFC8446 and RFC6101. You need to get a function summary of the function you're reversing, and then correspond to the potential RFC sections based on the name of the function and the function summary.

Function Background: The function is reverse engineered from the driver file Schannel.dll on Windows platform. Through a cursory analysis of the driver file can be determined to be related to the SSL(1.3), TLS(3.0) protocol, that is, with RFC8446, RFC6101 strong correlation.

Output Function Summary: Summarizes the function's functionality with several phrases instead of sentences, focuses on covering the function's control flow information, and highlights the protocol function points implemented by the function. Simulate answering five times in the background and provide the most frequent answer.

Retrieve document sections: giving matches for document sections(FunctionMatchRFCResult) that the code may related to. NOTE if the code is only business related(i.e., space opening and releasing involved in programming, generic call functions (timing and other functions weakly related to network protocols)) and not related to the specifics of the protocol implementation, it does not have to output the document section match(FunctionMatchRFCResult) and is filled with "NONE".

Retrieve document sections Thinking Chain: The function code is matched with the RFC document section, and the thinking chain is provided to help you solve the problem better:
	1. Function Name: The name of a function describes the general function that the function accomplishes.
	2. Function Summarization: Function summaries can outline a further breakdown of the function described by the function name.
	3. Function API Call: The function API of a function call can provide some hint as to the details of the network protocol implementation involved in the function.
	4. Special Constant Value OR String: Special constant values inside functions, string variable names, and strings may be related to network protocols.
	5. Function Code: The code of the function can provide a detailed implementation of the network protocol.
Generate Function Information Collection with JSON Format:

{
	"FunctionIndex": "(FILL WITH "File count" with less than four bits are indexed with zeros to make up the four bits.)",
	"FunctionName": "(Full Function Code Name)",
	"FunctionSummarization": [
		"(Function Summary Phrase1)",
		"(Function Summary Phrase2)",
		"(...)"
	],
	"FunctionMatchRFCResult": [
		"(RFCXXXX-SectionX.X.X.X-Section Title 1)",
		"(RFCXXXX-SectionX.X.X.X-Section Title 2)",
		"(...)",
	],
}

ATTENTION: Remember YOU MUST ONLY output the Function Information Collection result.
