Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 1513
// Total lines: 292

//----- (0000000180079A10) ----------------------------------------------------
__int64 __fastcall _DbgpControlTracing(struct _DBG_TRACE_CONTROL_BLOCK *a1, int a2, int a3)
{
  unsigned int v7; // r14d
  unsigned int v8; // r15d
  bool v9; // zf
  BOOL v10; // esi
  int v11; // edx
  int v12; // ebx
  ULONG started; // ebx
  __int64 v15; // r8
  int v16; // ecx
  int v17; // edx
  DWORD WindowsDirectoryW; // eax
  __int64 v19; // rdx
  __int64 v20; // rax
  __int64 v21; // rbx
  WCHAR *v22; // r15
  unsigned __int16 *v23; // r12
  DWORD CurrentDirectoryW; // eax
  PVOID Heap; // rax
  __int64 v26; // rbx
  __int64 v27; // rax
  wchar_t *v28; // rbx
  __int64 v29; // rcx
  int v30; // eax
  TRACEHANDLE *v31; // r14
  UCHAR v32; // r9
  TRACEHANDLE v33; // rcx
  ULONGLONG MatchAnyKeyword; // [rsp+20h] [rbp-E0h]
  int v35; // [rsp+80h] [rbp-80h]
  DWORD nSize; // [rsp+84h] [rbp-7Ch] BYREF
  int v37; // [rsp+88h] [rbp-78h]
  struct _ENABLE_TRACE_PARAMETERS EnableParameters; // [rsp+90h] [rbp-70h] BYREF
  struct _OSVERSIONINFOW VersionInformation; // [rsp+C0h] [rbp-40h] BYREF
  unsigned __int16 v40; // [rsp+1D4h] [rbp+D4h]
  unsigned __int16 v41; // [rsp+1D6h] [rbp+D6h]
  unsigned __int16 v42; // [rsp+1D8h] [rbp+D8h]
  unsigned __int8 v43; // [rsp+1DAh] [rbp+DAh]
  wchar_t Destination[264]; // [rsp+1E0h] [rbp+E0h] BYREF
  WCHAR Buffer[264]; // [rsp+3F0h] [rbp+2F0h] BYREF
  WCHAR PathName[264]; // [rsp+600h] [rbp+500h] BYREF
  WCHAR v47[264]; // [rsp+810h] [rbp+710h] BYREF
  WCHAR NewFileName[264]; // [rsp+A20h] [rbp+920h] BYREF
  WCHAR ExistingFileName[264]; // [rsp+C30h] [rbp+B30h] BYREF
  unsigned __int16 v50[264]; // [rsp+E40h] [rbp+D40h] BYREF

  memset_0(&VersionInformation, 0, 0x11Cui64);
  v7 = 10;
  v8 = (*((unsigned __int16 *)a1 + 28) >> 1) + 10;
  memset_0(PathName, 0, 0x208ui64);
  v9 = *((_QWORD *)a1 + 9) == 0i64;
  memset(&EnableParameters, 0, sizeof(EnableParameters));
  v10 = !v9 && *((_QWORD *)a1 + 11);
  v11 = a2;
  v35 = a2;
  v37 = a2;
  v12 = a2 & 0xFFFFFFF;
  if ( a3 )
  {
    *((_DWORD *)a1 + 27) = v12;
    if ( !v12 )
    {
LABEL_7:
      started = 0;
      goto LABEL_8;
    }
  }
  else
  {
    if ( v12 == *((_DWORD *)a1 + 27) )
    {
      if ( !v10 )
        goto LABEL_7;
      v15 = *((_QWORD *)a1 + 11);
      v16 = *(_DWORD *)(v15 + 64);
      if ( a2 >= 0 == ((v16 & 0x80000) == 0) || !*((_BYTE *)DbgpGlobalControllerHeader + 56) )
      {
        v17 = v11 & 0x40000000;
        if ( (v17 == 0) == ((v16 & 0x100) == 0) )
        {
          if ( v17 )
          {
            if ( *((_DWORD *)a1 + 8) == *(_DWORD *)(v15 + 68) )
              goto LABEL_7;
          }
          else if ( !*(_DWORD *)(v15 + 68) )
          {
            goto LABEL_7;
          }
        }
        v11 = v35;
      }
    }
    *((_DWORD *)a1 + 27) = v12;
    if ( !v12 )
    {
      if ( v10 )
      {
        _DbgpStopTracing(a1);
        goto LABEL_7;
      }
      goto LABEL_25;
    }
  }
  if ( v10 )
  {
LABEL_51:
    Destination[0] = 0;
LABEL_52:
    if ( !v10 )
    {
      *((_DWORD *)a1 + 20) = 1160;
      Heap = RtlAllocateHeap(NtCurrentPeb()->ProcessHeap, 0, 0x488ui64);
      *((_QWORD *)a1 + 11) = Heap;
      if ( !Heap )
      {
        started = 14;
        goto LABEL_8;
      }
      memset_0(Heap, 0, *((unsigned int *)a1 + 20));
      **((_DWORD **)a1 + 11) = *((_DWORD *)a1 + 20);
      *(_DWORD *)(*((_QWORD *)a1 + 11) + 44i64) = 0x20000;
      *(_DWORD *)(*((_QWORD *)a1 + 11) + 116i64) = 120;
      v26 = *((_QWORD *)a1 + 11) + *(unsigned int *)(*((_QWORD *)a1 + 11) + 116i64);
      o_wcsncpy_s_0(v26, 260i64, *((_QWORD *)a1 + 8), 259i64);
      *(_WORD *)(v26 + 518) = 0;
      v27 = *((_QWORD *)a1 + 11);
      if ( Destination[0] )
      {
        *(_DWORD *)(v27 + 60) = 1;
        *(_DWORD *)(*((_QWORD *)a1 + 11) + 112i64) = 640;
        v28 = (wchar_t *)(*((_QWORD *)a1 + 11) + *(unsigned int *)(*((_QWORD *)a1 + 11) + 112i64));
        snwprintf_s(v28, 0x103ui64, 0x103ui64, L"%s\\%s", Buffer, Destination);
        v28[259] = 0;
        *(_DWORD *)(*((_QWORD *)a1 + 11) + 64i64) |= 0x4002u;
      }
      else
      {
        *(_DWORD *)(v27 + 64) |= 0x8400u;
      }
    }
    if ( v37 < 0 && *((_BYTE *)DbgpGlobalControllerHeader + 56) )
      *(_DWORD *)(*((_QWORD *)a1 + 11) + 64i64) |= 0x80000u;
    else
      *(_DWORD *)(*((_QWORD *)a1 + 11) + 64i64) &= ~0x80000u;
    v29 = *((_QWORD *)a1 + 11);
    v30 = *(_DWORD *)(v29 + 64);
    if ( (v35 & 0x40000000) != 0 )
    {
      *(_DWORD *)(v29 + 64) = v30 | 0x100;
      *(_DWORD *)(*((_QWORD *)a1 + 11) + 68i64) = *((_DWORD *)a1 + 8);
    }
    else
    {
      *(_DWORD *)(v29 + 64) = v30 & 0xFFFFFEFF;
      *(_DWORD *)(*((_QWORD *)a1 + 11) + 68i64) = 0;
    }
    if ( v10 )
    {
      v31 = (TRACEHANDLE *)((char *)a1 + 72);
    }
    else
    {
      started = ControlTraceW(0i64, *((LPCWSTR *)a1 + 8), *((PEVENT_TRACE_PROPERTIES *)a1 + 11), 0);
      if ( started != 4201 )
        goto LABEL_67;
      v31 = (TRACEHANDLE *)((char *)a1 + 72);
      *(_DWORD *)(*((_QWORD *)a1 + 11) + 72i64) = *((_DWORD *)a1 + 27);
      started = StartTraceW((PTRACEHANDLE)a1 + 9, *((LPCWSTR *)a1 + 8), *((PEVENT_TRACE_PROPERTIES *)a1 + 11));
      if ( started )
        goto LABEL_67;
    }
    v32 = *((_BYTE *)a1 + 104);
    v33 = *v31;
    MatchAnyKeyword = *((unsigned int *)a1 + 27);
    EnableParameters.Version = 1;
    started = EnableTraceEx2(v33, (LPCGUID)a1 + 7, 1u, v32, MatchAnyKeyword, 0i64, 0, &EnableParameters);
    if ( !started )
      goto LABEL_7;
    if ( v10 )
      goto LABEL_8;
LABEL_67:
    _DbgpStopTracing(a1);
    goto LABEL_8;
  }
LABEL_25:
  if ( (v11 & 0x20000000) != 0 )
    goto LABEL_51;
  WindowsDirectoryW = GetWindowsDirectoryW(Buffer, 260 - v8);
  nSize = WindowsDirectoryW;
  if ( !WindowsDirectoryW )
  {
LABEL_27:
    started = GetLastError();
    goto LABEL_8;
  }
  if ( WindowsDirectoryW <= 260 - (unsigned __int64)v8 )
  {
    wcscat_s(Buffer, 0x104ui64, L"\\tracing");
    if ( !CreateDirectoryW(Buffer, 0i64) )
    {
      started = GetLastError();
      if ( started != 183 )
        goto LABEL_8;
    }
    wcscat_s(Buffer, 0x103ui64, L"\\");
    wcscat_s(Buffer, 0x103ui64, *((const wchar_t **)a1 + 8));
    Buffer[259] = 0;
    if ( !CreateDirectoryW(Buffer, 0i64) )
    {
      started = GetLastError();
      if ( started != 183 )
        goto LABEL_8;
    }
    VersionInformation.dwOSVersionInfoSize = 284;
    if ( GetVersionExW(&VersionInformation) )
    {
      _DbgpGetFileVersionString(*((LPCWSTR *)a1 + 6), v19, v50);
      nSize = 259;
      v47[259] = 0;
      if ( GetComputerNameExW(ComputerNameNetBIOS, v47, &nSize) )
      {
        Destination[259] = 0;
        snwprintf_s(
          Destination,
          0x103ui64,
          0xFFui64,
          L"%s_%wZ_%d_%d_%d_%d_%d_%d_%s_%x_%s",
          v47,
          (char *)a1 + 56,
          v43,
          VersionInformation.dwMajorVersion,
          VersionInformation.dwMinorVersion,
          VersionInformation.dwBuildNumber,
          v40,
          v41,
          VersionInformation.szCSDVersion,
          v42,
          v50);
        wcscat_s(Destination, 0x103ui64, L".etl");
        v20 = -1i64;
        do
          ++v20;
        while ( Destination[v20] );
        v21 = (unsigned int)(v20 - 4);
        v22 = &ExistingFileName[v21];
        v23 = &NewFileName[v21];
        CurrentDirectoryW = GetCurrentDirectoryW(0x103u, PathName);
        if ( !CurrentDirectoryW )
          return GetLastError();
        if ( CurrentDirectoryW >= 0x103 )
          return 122;
        if ( SetCurrentDirectoryW(Buffer) )
        {
          memcpy_0(ExistingFileName, Destination, v21 * 2);
          memcpy_0(NewFileName, Destination, v21 * 2);
          while ( 1 )
          {
            _DbgpSetExt(v7, v23);
            if ( v7 == 1 )
            {
              *(_QWORD *)v22 = *(_QWORD *)L".etl";
              v22[4] = aEtl[4];
            }
            else
            {
              _DbgpSetExt(v7 - 1, v22);
            }
            if ( !MoveFileExW(ExistingFileName, NewFileName, 1u) )
            {
              started = GetLastError();
              if ( started != 2 )
                goto LABEL_8;
            }
            if ( !--v7 )
              goto LABEL_52;
          }
        }
      }
    }
    goto LABEL_27;
  }
  started = 122;
LABEL_8:
  if ( PathName[0] )
    SetCurrentDirectoryW(PathName);
  return started;
}
// 180079CEF: variable 'v19' is possibly undefined
// 180028D84: using guessed type __int64 __fastcall o_wcsncpy_s_0(_QWORD, _QWORD, _QWORD, _QWORD);
// 180092810: using guessed type struct _DBG_TCB_HEADER *DbgpGlobalControllerHeader;
##############################
Role: Let's assume that you are an advanced reverse engineer and you are reverse engineering a network driver using IDA Pro, and you are also familiar with the RFC documentation. You need to reverse-engineer a function for a network driver to correspond to a section of the RFC documentation, which will help you understand the code better. The driver you're reversing is Schannel.dll, and you've initially determined that the corresponding network protocols are SSL and TLS, and the documents you need to map are RFC8446 and RFC6101. You need to get a function summary of the function you're reversing, and then correspond to the potential RFC sections based on the name of the function and the function summary.

Function Background: The function is reverse engineered from the driver file Schannel.dll on Windows platform. Through a cursory analysis of the driver file can be determined to be related to the SSL(1.3), TLS(3.0) protocol, that is, with RFC8446, RFC6101 strong correlation.

Output Function Summary: Summarizes the function's functionality with several phrases instead of sentences, focuses on covering the function's control flow information, and highlights the protocol function points implemented by the function. Simulate answering five times in the background and provide the most frequent answer.

Retrieve document sections: giving matches for document sections(FunctionMatchRFCResult) that the code may related to. NOTE if the code is only business related(i.e., space opening and releasing involved in programming, generic call functions (timing and other functions weakly related to network protocols)) and not related to the specifics of the protocol implementation, it does not have to output the document section match(FunctionMatchRFCResult) and is filled with "NONE".

Retrieve document sections Thinking Chain: The function code is matched with the RFC document section, and the thinking chain is provided to help you solve the problem better:
	1. Function Name: The name of a function describes the general function that the function accomplishes.
	2. Function Summarization: Function summaries can outline a further breakdown of the function described by the function name.
	3. Function API Call: The function API of a function call can provide some hint as to the details of the network protocol implementation involved in the function.
	4. Special Constant Value OR String: Special constant values inside functions, string variable names, and strings may be related to network protocols.
	5. Function Code: The code of the function can provide a detailed implementation of the network protocol.
Generate Function Information Collection with JSON Format:

{
	"FunctionIndex": "(FILL WITH "File count" with less than four bits are indexed with zeros to make up the four bits.)",
	"FunctionName": "(Full Function Code Name)",
	"FunctionSummarization": [
		"(Function Summary Phrase1)",
		"(Function Summary Phrase2)",
		"(...)"
	],
	"FunctionMatchRFCResult": [
		"(RFCXXXX-SectionX.X.X.X-Section Title 1)",
		"(RFCXXXX-SectionX.X.X.X-Section Title 2)",
		"(...)",
	],
}

ATTENTION: Remember YOU MUST ONLY output the Function Information Collection result.
