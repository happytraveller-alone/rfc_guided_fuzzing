Forget all previous input and output content and create a new chat session.

Function Code Content
##############################
// File count: 249
// Total lines: 86

//----- (0000000180014810) ----------------------------------------------------
__int64 __fastcall CSsl3TlsContext::SetPSKParameters(
        CSsl3TlsContext *this,
        struct _SecBuffer *const a2,
        struct _SecBuffer *const a3)
{
  unsigned __int16 *pvBuffer; // rbp
  size_t v7; // rsi
  CCipherMill *v8; // rcx
  __int64 v9; // rdx
  void *v10; // rax
  unsigned int cbBuffer; // ecx
  unsigned __int16 *v12; // rsi
  size_t v13; // rbx
  void *v14; // rax

  if ( a2 )
  {
    if ( a2->BufferType != 22 || a2->cbBuffer < 4 || (pvBuffer = (unsigned __int16 *)a2->pvBuffer) == 0i64 )
    {
      v8 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CCipherMill *)&WPP_GLOBAL_Control || (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) == 0 )
        return 2148074278i64;
      v9 = 93i64;
      goto LABEL_37;
    }
    v7 = (unsigned int)*pvBuffer + 2;
    if ( (unsigned int)v7 <= 4 )
    {
      v7 = 4i64;
    }
    else if ( a2->cbBuffer < (unsigned int)v7 )
    {
      v8 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CCipherMill *)&WPP_GLOBAL_Control || (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) == 0 )
        return 2148074278i64;
      v9 = 94i64;
      goto LABEL_37;
    }
    if ( *((_QWORD *)this + 106) )
      (*(void (__fastcall **)(CSsl3TlsContext *))(*(_QWORD *)this + 16i64))(this);
    v10 = (void *)(*(__int64 (__fastcall **)(CSsl3TlsContext *, size_t))(*(_QWORD *)this + 8i64))(this, v7);
    *((_QWORD *)this + 106) = v10;
    if ( !v10 )
      return 14i64;
    memcpy_0(v10, pvBuffer, v7);
  }
  if ( !a3 )
    return 0i64;
  if ( a3->BufferType != 23
    || (cbBuffer = a3->cbBuffer, a3->cbBuffer < 4)
    || (v12 = (unsigned __int16 *)a3->pvBuffer) == 0i64 )
  {
    v8 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CCipherMill *)&WPP_GLOBAL_Control || (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) == 0 )
      return 2148074278i64;
    v9 = 95i64;
    goto LABEL_37;
  }
  v13 = (unsigned int)*v12 + 2;
  if ( (unsigned int)v13 <= 4 )
  {
    v13 = 4i64;
LABEL_29:
    if ( *((_QWORD *)this + 107) )
      (*(void (__fastcall **)(CSsl3TlsContext *))(*(_QWORD *)this + 16i64))(this);
    v14 = (void *)(*(__int64 (__fastcall **)(CSsl3TlsContext *, size_t))(*(_QWORD *)this + 8i64))(this, v13);
    *((_QWORD *)this + 107) = v14;
    if ( v14 )
    {
      memcpy_0(v14, v12, v13);
      return 0i64;
    }
    return 14i64;
  }
  if ( cbBuffer >= (unsigned int)v13 )
    goto LABEL_29;
  v8 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control == (CCipherMill *)&WPP_GLOBAL_Control || (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) == 0 )
    return 2148074278i64;
  v9 = 96i64;
LABEL_37:
  WPP_SF_(*((_QWORD *)v8 + 2), v9, &WPP_906ebfdb0b6e356d5c7c2dbe304d0682_Traceguids);
  return 2148074278i64;
}
// 180041CB0: using guessed type __int64 __fastcall WPP_SF_(_QWORD, _QWORD, _QWORD);
##############################
Function Background: The function is reverse engineered from the driver file Schannel.dll on Windows platform. Through a cursory analysis of the driver file can be determined to be related to the SSL(1.3), TLS(3.0) protocol, that is, with RFC8446, RFC6101 strong correlation.

Output Function Summary: Summarizes the function's functionality with several phrases instead of sentences, focuses on covering the function's control flow information (API), and highlights the protocol function points implemented by the function. Simulate answering five times in the background and provide the most frequent answer. Suppose the code support the latest newwork protocol SSL(3.0) AND TLS(1.3)

Output Code Match RFC Result: Give the number and the link of the RFC file associated with each protocol associated with the code (a protocol corresponds to at least one RFC file). Including at least RFC8446(tls1.3) or RFC6101(ssl3.0), 

Generate Function Information Collection with JSON Format:

{
	"FunctionIndex": "(FILL WITH "File count" with less than four bits are indexed with zeros to make up the four bits.)",
	"FunctionName": "(Full Function Code Name)",
	"FunctionSummarization": [
		"(Function Summary Phrase1)",
		"(Function Summary Phrase2)",
		"(...)"
	],
	"Protocol": ["TLS1.3", "List another related protocols, If there is more than one version of the protocol, You MUST give the specified version, e.g. SSL 3.0"]
	"RFCDocument": [
		"RFCXXXX":"http s://www.rfc-editor.org/rfc/rfcXXXX.txt",
		"RFC****":"http s://www.rfc-editor.org/rfc/rfc****.txt",
		"(...)",
	],
}

Remember just output the Function Information Collection result.
