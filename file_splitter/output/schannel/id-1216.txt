Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 1216
// Total lines: 290

//----- (0000000180060B8C) ----------------------------------------------------
__int64 __fastcall CSsl3TlsClientContext::GenerateCertVerify(
        CSsl3TlsClientContext *this,
        unsigned __int8 *a2,
        unsigned int *a3)
{
  __int64 v3; // rax
  wchar_t *v7; // rdi
  __int64 v8; // rax
  __int64 v9; // rax
  __int64 v10; // r8
  int v11; // r12d
  __int64 v12; // r15
  __int64 v13; // rax
  __int64 v14; // rdx
  unsigned int v15; // ecx
  __int64 v16; // rax
  unsigned int v17; // r14d
  __int64 result; // rax
  unsigned int v19; // ecx
  int v20; // edx
  enum _eTlsHashAlgorithm v21; // eax
  char *v22; // rdi
  __int16 v23; // r12
  unsigned __int8 v24; // r9
  unsigned int v25; // edi
  int v26; // edx
  CSsl3TlsClientContext *v27; // rcx
  unsigned __int64 TlsClientAuthHandshakeHash; // rdi
  __int64 *v29; // rax
  __int64 v30; // rcx
  char v31; // cl
  unsigned int v32; // r14d
  unsigned int v33; // r14d
  unsigned int v34; // eax
  unsigned int *v35; // rcx
  unsigned int v36; // eax
  unsigned int *v37; // rcx
  size_t Size; // [rsp+70h] [rbp-69h] BYREF
  unsigned int v39; // [rsp+78h] [rbp-61h] BYREF
  unsigned int v40; // [rsp+7Ch] [rbp-5Dh] BYREF
  enum _eTlsHashAlgorithm v41; // [rsp+80h] [rbp-59h] BYREF
  wchar_t *String1; // [rsp+88h] [rbp-51h]
  LPCWSTR v43; // [rsp+90h] [rbp-49h] BYREF
  unsigned int *v44; // [rsp+98h] [rbp-41h]
  void *v45; // [rsp+A0h] [rbp-39h]
  BYTE Src[64]; // [rsp+B0h] [rbp-29h] BYREF

  v3 = *((_QWORD *)this + 10);
  Size = 0i64;
  v44 = a3;
  v7 = 0i64;
  v45 = *(void **)(v3 + 752);
  v8 = *(_QWORD *)this;
  v40 = 32772;
  String1 = 0i64;
  v43 = 0i64;
  v9 = (*(__int64 (__fastcall **)(CSsl3TlsClientContext *))(v8 + 248))(this);
  v11 = 0;
  v39 = 0;
  v12 = v9;
  v13 = *(_QWORD *)(v9 + 432);
  if ( v13 )
  {
    v14 = 118i64;
    v15 = *(_DWORD *)(v13 + 8) + 2;
    if ( v15 > 0x76 )
      v14 = v15;
  }
  else
  {
    v16 = *(_QWORD *)(v12 + 32);
    if ( v16 )
      v14 = (unsigned int)(*(_DWORD *)(*(_QWORD *)(v16 + 24) + 120i64) + 52);
    else
      v14 = 68i64;
  }
  v17 = v14 + 2;
  if ( (*((_DWORD *)this + 16) & 0x80800) == 0 )
    v17 = v14;
  result = 0i64;
  if ( !a2 )
  {
    *a3 = v17;
    return result;
  }
  if ( *((_QWORD *)this + 117) && !*((_BYTE *)this + 1032) )
  {
    if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
      WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 46i64, &WPP_2dcc559eea6f3c37d295569df36f7bc3_Traceguids);
    v19 = *((_DWORD *)this + 236);
    HIDWORD(Size) = v17 - 2;
    if ( v19 <= v17 - 2 )
    {
      memcpy_0(a2 + 2, *((const void **)this + 117), v19);
      v20 = *((_DWORD *)this + 236);
LABEL_70:
      a2[v11] = BYTE1(v20);
      v35 = v44;
      a2[v11 + 1] = v20;
      *v35 = v11 + v20 + 2;
      return 0i64;
    }
    goto LABEL_57;
  }
  switch ( *(_DWORD *)(v12 + 132) )
  {
    case 0x2200:
      v7 = (wchar_t *)L"DSA";
      goto LABEL_26;
    case 0x2203:
      v7 = (wchar_t *)L"ECDSA";
LABEL_26:
      LODWORD(Size) = 20;
      goto LABEL_27;
    case 0x2400:
    case 0xA400:
      v7 = (wchar_t *)L"RSA";
      v40 = 32776;
      LODWORD(Size) = 36;
      v39 = 2;
LABEL_27:
      String1 = v7;
      break;
  }
  if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
    WPP_SF_S(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x2Fu, (__int64)&WPP_2dcc559eea6f3c37d295569df36f7bc3_Traceguids, v7);
  if ( (*((_DWORD *)this + 16) & 0x80800) != 0 )
  {
    v21 = (unsigned int)ConvertCertificateAlgToTlsSignatureAlgorithm(*(_DWORD *)(v12 + 132), v14, v10);
    v41 = v21;
    v22 = (char *)this + 510;
    if ( *(_QWORD *)(v12 + 112) )
    {
      v22 = (char *)operator new(0x24ui64);
      if ( v22 )
      {
        *(_OWORD *)(v22 + 2) = 0i64;
        *(_OWORD *)(v22 + 18) = 0i64;
        *(_WORD *)v22 = 0;
        *((_WORD *)v22 + 17) = 0;
      }
      else
      {
        v22 = 0i64;
      }
      CTlsSignatureSuiteList::SetDefaultClientHello((CTlsSignatureSuiteList *)v22);
      CTlsSignatureSuiteList::Restrict(
        (CTlsSignatureSuiteList *)v22,
        (CSsl3TlsClientContext *)((char *)this + 510),
        *((_DWORD *)this + 16));
      v21 = v41;
    }
    v23 = __ROR2__(
            CTlsSignatureSuiteList::GetMinimumCodePointToSign(
              (CTlsSignatureSuiteList *)v22,
              (enum _eTlsSignatureAlgorithm)v21,
              *(_DWORD *)(v12 + 428),
              *((_DWORD *)this + 16),
              0),
            8);
    if ( *(_QWORD *)(v12 + 112) && v22 )
      operator delete(v22);
    if ( !v23 )
    {
      v24 = 40;
      v25 = -2146893007;
      v26 = 304;
LABEL_42:
      v27 = this;
LABEL_43:
      CSslContext::SetErrorAndFatalAlert((__int64)v27, v26, v25, v24);
      return v25;
    }
    GetSignatureSuiteInfoByCodePoint(v23, 0i64, &v41, &v40, &v43, (unsigned int *)&Size, &v39);
    TlsClientAuthHandshakeHash = CSsl3TlsContext::FindTlsClientAuthHandshakeHash(this, v41);
    if ( !TlsClientAuthHandshakeHash || v17 < 2 )
    {
      v24 = 80;
      v25 = 1359;
      v26 = 304;
      goto LABEL_43;
    }
    *(_WORD *)a2 = v23;
    v11 = 2;
  }
  else
  {
    TlsClientAuthHandshakeHash = *((_QWORD *)this + 74);
  }
  RtlAcquireResourceShared((PRTL_RESOURCE)(*((_QWORD *)this + 165) + 72i64), 1u);
  v29 = (__int64 *)*((_QWORD *)this + 1);
  if ( v29 )
    v30 = *v29;
  else
    v30 = 0i64;
  v25 = SslComputeClientAuthHash(
          v30,
          *(_QWORD *)(*((_QWORD *)this + 165) + 16i64),
          TlsClientAuthHandshakeHash,
          String1,
          Src,
          Size,
          &Size,
          0);
  RtlReleaseResource((PRTL_RESOURCE)(*((_QWORD *)this + 165) + 72i64));
  if ( v25 )
  {
    v24 = 80;
    v26 = 300;
    goto LABEL_42;
  }
  v31 = *((_BYTE *)this + 1032);
  v32 = v17 - v11 - 2;
  HIDWORD(Size) = v32;
  if ( v31 )
  {
    if ( *((_DWORD *)this + 236) > v32 )
    {
LABEL_57:
      v24 = 80;
      v25 = -2146893018;
      v26 = 302;
      goto LABEL_42;
    }
    memcpy_0(&a2[v11 + 2], *((const void **)this + 117), *((unsigned int *)this + 236));
    v31 = *((_BYTE *)this + 1032);
  }
  v33 = v40;
  v34 = SignHashUsingCred(
          this,
          (struct CSslCredential *)v12,
          v45,
          v40,
          v39,
          String1,
          v43,
          Src,
          Size,
          &a2[v11 + 2],
          (DWORD *)&Size + 1,
          v31,
          *((_DWORD *)this + 236));
  v25 = v34;
  if ( v34 != -1073741168 && v34 != -2146893790 )
  {
    if ( v34 == 590610 )
    {
      if ( *((_BYTE *)this + 266) )
      {
        if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
          WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 49i64, &WPP_2dcc559eea6f3c37d295569df36f7bc3_Traceguids);
        *((_DWORD *)this + 17) = 77;
        return 590610i64;
      }
    }
    else if ( !v34 )
    {
      v20 = HIDWORD(Size);
      goto LABEL_70;
    }
    v24 = 80;
    v26 = 301;
    goto LABEL_42;
  }
  if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 48i64, &WPP_2dcc559eea6f3c37d295569df36f7bc3_Traceguids);
  if ( (*((_DWORD *)this + 16) & 0x80800) != 0 )
  {
    v25 = -2146893043;
    CSslContext::SetError((__int64)this, 303, -2146893043);
    return v25;
  }
  v36 = Size;
  *((_DWORD *)a2 + 1) = v33;
  *(_DWORD *)a2 = 68;
  *((_DWORD *)a2 + 2) = v36;
  memcpy_0(a2 + 12, Src, v36);
  v37 = v44;
  *((_OWORD *)a2 + 3) = *(_OWORD *)(v12 + 40);
  *((_DWORD *)a2 + 16) = *(_DWORD *)(v12 + 56);
  result = 590684i64;
  *v37 = 68;
  return result;
}
// 180060D7D: variable 'v14' is possibly undefined
// 180060D7D: variable 'v10' is possibly undefined
// 180060E2C: variable 'v27' is possibly undefined
// 180041CB0: using guessed type __int64 __fastcall WPP_SF_(_QWORD, _QWORD, _QWORD);
// 180098588: using guessed type __int64 __fastcall SslComputeClientAuthHash(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD, _QWORD, _DWORD);
##############################
Role: Let's assume that you are an advanced reverse engineer and you are reverse engineering a network driver using IDA Pro, and you are also familiar with the RFC documentation. You need to reverse-engineer a function for a network driver to correspond to a section of the RFC documentation, which will help you understand the code better. The driver you're reversing is Schannel.dll, and you've initially determined that the corresponding network protocols are SSL and TLS, and the documents you need to map are RFC8446 and RFC6101. You need to get a function summary of the function you're reversing, and then correspond to the potential RFC sections based on the name of the function and the function summary.

Function Background: The function is reverse engineered from the driver file Schannel.dll on Windows platform. Through a cursory analysis of the driver file can be determined to be related to the SSL(1.3), TLS(3.0) protocol, that is, with RFC8446, RFC6101 strong correlation.

Output Function Summary: Summarizes the function's functionality with several phrases instead of sentences, focuses on covering the function's control flow information, and highlights the protocol function points implemented by the function. Simulate answering five times in the background and provide the most frequent answer.

Retrieve document sections: giving matches for document sections(FunctionMatchRFCResult) that the code may related to. NOTE if the code is only business related(i.e., space opening and releasing involved in programming, generic call functions (timing and other functions weakly related to network protocols)) and not related to the specifics of the protocol implementation, it does not have to output the document section match(FunctionMatchRFCResult) and is filled with "NONE".

Retrieve document sections Thinking Chain: The function code is matched with the RFC document section, and the thinking chain is provided to help you solve the problem better:
	1. Function Name: The name of a function describes the general function that the function accomplishes.
	2. Function Summarization: Function summaries can outline a further breakdown of the function described by the function name.
	3. Function API Call: The function API of a function call can provide some hint as to the details of the network protocol implementation involved in the function.
	4. Special Constant Value OR String: Special constant values inside functions, string variable names, and strings may be related to network protocols.
	5. Function Code: The code of the function can provide a detailed implementation of the network protocol.
Generate Function Information Collection with JSON Format:

{
	"FunctionIndex": "(FILL WITH "File count" with less than four bits are indexed with zeros to make up the four bits.)",
	"FunctionName": "(Full Function Code Name)",
	"FunctionSummarization": [
		"(Function Summary Phrase1)",
		"(Function Summary Phrase2)",
		"(...)"
	],
	"FunctionMatchRFCResult": [
		"(RFCXXXX-SectionX.X.X.X-Section Title 1)",
		"(RFCXXXX-SectionX.X.X.X-Section Title 2)",
		"(...)",
	],
}

ATTENTION: Remember YOU MUST ONLY output the Function Information Collection result.
