Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 1459
// Total lines: 190

//----- (0000000180074C40) ----------------------------------------------------
__int64 __fastcall CSsl3TlsServerContext::DhGenerateServerExchangeValue(
        CSsl3TlsServerContext *this,
        unsigned __int8 *a2,
        unsigned int *a3)
{
  __int64 v3; // rax
  unsigned int *v4; // rsi
  bool v6; // zf
  enum _eTlsSignatureAlgorithm v7; // edi
  char *v8; // r14
  unsigned int ServerEphemKey; // ebx
  __int64 v10; // r15
  unsigned int v11; // r14d
  int v12; // r13d
  __int64 v13; // rax
  __int16 v14; // si
  int v16; // eax
  DWORD v17; // eax
  unsigned int v18; // r13d
  unsigned int v19; // edi
  char *v20; // r15
  unsigned int v21; // r14d
  size_t v22; // r8
  __int64 v23; // rsi
  unsigned __int8 v24; // al
  __int64 v25; // rdi
  unsigned __int8 *v26; // rbx
  char *v27; // r15
  unsigned __int8 v28; // al
  unsigned __int8 *v29; // rbx
  unsigned __int8 *v30; // rdi
  enum _eTlsSignatureAlgorithm v31; // esi
  unsigned int v32; // r15d
  unsigned int v33; // r13d
  __int32 v34; // esi
  unsigned int v35; // eax
  enum _eTlsHashAlgorithm v36; // [rsp+40h] [rbp-28h] BYREF
  unsigned int Size; // [rsp+44h] [rbp-24h]
  enum _eTlsSignatureAlgorithm Size_4; // [rsp+48h] [rbp-20h]
  unsigned int v39; // [rsp+4Ch] [rbp-1Ch] BYREF
  int v40; // [rsp+50h] [rbp-18h] BYREF
  unsigned int v41; // [rsp+54h] [rbp-14h]
  unsigned __int16 *v42; // [rsp+58h] [rbp-10h] BYREF
  __int16 v43; // [rsp+B0h] [rbp+48h]
  DWORD pcbResult; // [rsp+C8h] [rbp+60h] BYREF

  v3 = *((_QWORD *)this + 1);
  pcbResult = 0;
  v4 = a3;
  v40 = 0;
  v42 = 0i64;
  v6 = *(_DWORD *)(v3 + 52) == 2;
  v36 = TlsHashAlgorithm_None;
  v43 = 0;
  v39 = 0;
  if ( v6 )
  {
    v7 = TlsSignatureAlgorithm_Rsa;
  }
  else
  {
    if ( *(_DWORD *)(v3 + 52) != 3 )
      goto LABEL_34;
    v7 = TlsSignatureAlgorithm_Dsa;
  }
  v8 = (char *)this + 960;
  Size_4 = v7;
  if ( !*((_QWORD *)this + 120) )
  {
    ServerEphemKey = GetServerEphemKey(this, (struct CEphemKeyData **)this + 120);
    if ( ServerEphemKey )
      return ServerEphemKey;
  }
  v6 = (*((_DWORD *)this + 16) & 0x40400) == 0;
  v10 = *(_QWORD *)(*(_QWORD *)v8 + 16i64);
  v11 = *(_DWORD *)(v10 + 4);
  Size = v11;
  v41 = 3 * v11;
  v12 = 3 * v11 + 12;
  if ( v6 )
  {
LABEL_13:
    v16 = ComputeSignatureLength((__int64 **)this, v7, v36, &pcbResult);
    ServerEphemKey = v16;
    if ( v16 < 0 )
    {
      CSslContext::SetErrorAndFatalAlert((__int64)this, 1051, v16, 0x50u);
      return ServerEphemKey;
    }
    v17 = 140;
    if ( pcbResult > 0x8C )
      v17 = pcbResult;
    v18 = v17 + v12;
    if ( !a2 )
    {
      *v4 = v18;
      return 0;
    }
    if ( *v4 < v18 )
    {
      *v4 = v18;
      return (unsigned int)-2146893023;
    }
    v19 = Size;
    v20 = (char *)(v10 + 8);
    v21 = v11 >> 8;
    v22 = Size;
    *a2 = v21;
    a2[1] = v19;
    v23 = v19;
    memcpy_0(a2 + 2, v20, v22);
    v24 = Size;
    v25 = v19 + 2;
    v26 = &a2[v25];
    v27 = &v20[v23];
    *v26 = v21;
    v26[1] = v24;
    memcpy_0(&a2[v25 + 2], v27, (unsigned int)v23);
    v28 = Size;
    v29 = &a2[v25 + v25];
    *v29 = v21;
    v29[1] = v28;
    memcpy_0(v29 + 2, &v27[v23], (unsigned int)v23);
    v30 = &v29[v25];
    v31 = Size_4;
    v32 = (_DWORD)v30 - (_DWORD)a2;
    v33 = v18 - v41 - 6;
    if ( (*((_DWORD *)this + 16) & 0x40400) != 0 )
    {
      if ( Size_4 == TlsSignatureAlgorithm_Dsa && v36 != TlsHashAlgorithm_Sha1 || v33 < 2 )
        return 1359;
      *(_WORD *)v30 = v43;
      v30 += 2;
      v33 -= 2;
    }
    pcbResult = v33 - 2;
    ServerEphemKey = SslImpersonateClient(*(_QWORD *)(*((_QWORD *)this + 10) + 752i64), &v40);
    if ( ServerEphemKey )
    {
LABEL_35:
      if ( v40 )
        RevertToSelf();
      return ServerEphemKey;
    }
    v34 = v31 - 1;
    if ( !v34 )
    {
      v35 = SignRsaParams(this, a2, v32, v42, v36, v39, v30 + 2, &pcbResult);
LABEL_32:
      ServerEphemKey = v35;
      if ( !v35 )
      {
        *v30 = BYTE1(pcbResult);
        v30[1] = pcbResult;
        *a3 = (_DWORD)v30 - (_DWORD)a2 + pcbResult + 2;
      }
      goto LABEL_35;
    }
    if ( v34 == 1 )
    {
      v35 = SignDssParams(this, a2, v32, v30 + 2, &pcbResult);
      goto LABEL_32;
    }
LABEL_34:
    ServerEphemKey = -2146893048;
    goto LABEL_35;
  }
  v12 = 3 * v11 + 14;
  v13 = (*(__int64 (__fastcall **)(CSsl3TlsServerContext *))(*(_QWORD *)this + 248i64))(this);
  if ( v13 )
  {
    v14 = __ROR2__(
            CTlsSignatureSuiteList::GetMinimumCodePointToSign(
              (CSsl3TlsServerContext *)((char *)this + 510),
              v7,
              *(_DWORD *)(v13 + 428),
              *((_DWORD *)this + 16),
              0),
            8);
    v43 = v14;
    if ( !v14 )
      return 2148074289i64;
    GetSignatureSuiteInfoByCodePoint(v14, 0i64, &v36, 0i64, (const unsigned __int16 **)&v42, 0i64, &v39);
    v4 = a3;
    goto LABEL_13;
  }
  return (unsigned int)-2146893052;
}
// 180080FD8: using guessed type __int64 (__fastcall *_guard_xfg_dispatch_icall_fptr)(_QWORD, _QWORD, _QWORD);
##############################
Role: Let's assume that you are an advanced reverse engineer and you are reverse engineering a network driver using IDA Pro, and you are also familiar with the RFC documentation. You need to reverse-engineer a function for a network driver to correspond to a section of the RFC documentation, which will help you understand the code better. The driver you're reversing is Schannel.dll, and you've initially determined that the corresponding network protocols are SSL and TLS, and the documents you need to map are RFC8446 and RFC6101. You need to get a function summary of the function you're reversing, and then correspond to the potential RFC sections based on the name of the function and the function summary.

Function Background: The function is reverse engineered from the driver file Schannel.dll on Windows platform. Through a cursory analysis of the driver file can be determined to be related to the SSL(1.3), TLS(3.0) protocol, that is, with RFC8446, RFC6101 strong correlation.

Output Function Summary: Summarizes the function's functionality with several phrases instead of sentences, focuses on covering the function's control flow information, and highlights the protocol function points implemented by the function. Simulate answering five times in the background and provide the most frequent answer.

Retrieve document sections: giving matches for document sections(FunctionMatchRFCResult) that the code may related to. NOTE if the code is only business related(i.e., space opening and releasing involved in programming, generic call functions (timing and other functions weakly related to network protocols)) and not related to the specifics of the protocol implementation, it does not have to output the document section match(FunctionMatchRFCResult) and is filled with "NONE".

Retrieve document sections Thinking Chain: The function code is matched with the RFC document section, and the thinking chain is provided to help you solve the problem better:
	1. Function Name: The name of a function describes the general function that the function accomplishes.
	2. Function Summarization: Function summaries can outline a further breakdown of the function described by the function name.
	3. Function API Call: The function API of a function call can provide some hint as to the details of the network protocol implementation involved in the function.
	4. Special Constant Value OR String: Special constant values inside functions, string variable names, and strings may be related to network protocols.
	5. Function Code: The code of the function can provide a detailed implementation of the network protocol.
Generate Function Information Collection with JSON Format:

{
	"FunctionIndex": "(FILL WITH "File count" with less than four bits are indexed with zeros to make up the four bits.)",
	"FunctionName": "(Full Function Code Name)",
	"FunctionSummarization": [
		"(Function Summary Phrase1)",
		"(Function Summary Phrase2)",
		"(...)"
	],
	"FunctionMatchRFCResult": [
		"(RFCXXXX-SectionX.X.X.X-Section Title 1)",
		"(RFCXXXX-SectionX.X.X.X-Section Title 2)",
		"(...)",
	],
}

ATTENTION: Remember YOU MUST ONLY output the Function Information Collection result.
