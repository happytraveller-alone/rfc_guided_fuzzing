Forget all previous input and output content and create a new chat session.

Function Code Content
##############################
// File count: 311
// Total lines: 94

//----- (0000000180017090) ----------------------------------------------------
void __fastcall CSslGlobals::PeriodicCleanupHandler(void *a1, char a2)
{
  __int64 *v3; // rbx
  __int64 v4; // rdi
  unsigned int TickCount; // edi
  __int64 *v6; // rbx
  unsigned int v7; // ecx
  unsigned __int8 v8; // al
  _QWORD *v9; // r9
  __int64 v10; // r10
  __int64 v11; // rdx
  _QWORD *v12; // r8
  __int64 v13; // rdx
  _QWORD *v14; // rax

  if ( dword_180092D78 > *(_DWORD *)(*((_QWORD *)NtCurrentTeb()->ThreadLocalStoragePointer + (unsigned int)tls_index)
                                   + 4i64) )
  {
    Init_thread_header(&dword_180092D78);
    if ( dword_180092D78 == -1 )
    {
      qword_1800921E8 = (__int64)CSessionCacheServerItem::m_pServerCacheLookaside;
      xmmword_1800921F0 = xmmword_180092DD0;
      qword_180092200 = (__int64)&g_SslContextManager;
      qword_180092208 = (__int64)CSessionCacheManager::m_pSessionCacheManager;
      qword_180092210 = (__int64)CSslCredManager::m_pCredManager;
      Init_thread_footer(&dword_180092D78);
    }
  }
  if ( a2 )
  {
    v3 = &qword_1800921E8;
    v4 = 6i64;
    do
    {
      if ( *v3 )
        (**(void (__fastcall ***)(__int64, _QWORD))*v3)(*v3, CSslGlobals::m_dwCleanupIntervalInSeconds);
      ++v3;
      --v4;
    }
    while ( v4 );
    if ( dword_180092704 && dword_180092778 )
    {
      TickCount = GetTickCount();
      RtlAcquireResourceExclusive(&stru_180092718, 1u);
      v6 = (__int64 *)qword_180092708;
      while ( v6 != &qword_180092708 )
      {
        v7 = *((_DWORD *)v6 - 10);
        v6 = (__int64 *)*v6;
        v8 = HasTimeElapsed(v7, TickCount, dword_1800926F8);
        if ( dword_180092704 > dword_180092700 || v8 )
        {
          v11 = *(_QWORD *)(v10 + 24);
          if ( *(_QWORD *)(v11 + 8) != v10 + 24
            || (v12 = *(_QWORD **)(v10 + 32), *v12 != v10 + 24)
            || (*v12 = v11, *(_QWORD *)(v11 + 8) = v12, v13 = *v9, *(_QWORD **)(*v9 + 8i64) != v9)
            || (v14 = (_QWORD *)v9[1], (_QWORD *)*v14 != v9) )
          {
            __fastfail(3u);
          }
          *v14 = v13;
          *(_QWORD *)(v13 + 8) = v14;
          --dword_180092704;
          SPDeleteIssuerEntry((struct ISSUER_CACHE_ENTRY *)v10);
        }
      }
      RtlReleaseResource(&stru_180092718);
    }
  }
  else
  {
    (**(void (__fastcall ***)(CSessionCacheManager *, _QWORD))CSessionCacheManager::m_pSessionCacheManager)(
      CSessionCacheManager::m_pSessionCacheManager,
      0i64);
  }
  ResetEvent(CSslGlobals::m_hCleanupEvent);
}
// 18003EC25: variable 'v10' is possibly undefined
// 18003EC42: variable 'v9' is possibly undefined
// 1800920C8: using guessed type int tls_index;
// 1800921E8: using guessed type __int64 qword_1800921E8;
// 1800921F0: using guessed type __int128 xmmword_1800921F0;
// 180092200: using guessed type __int64 qword_180092200;
// 180092208: using guessed type __int64 qword_180092208;
// 180092210: using guessed type __int64 qword_180092210;
// 180092704: using guessed type int dword_180092704;
// 180092708: using guessed type __int64 qword_180092708;
// 180092778: using guessed type int dword_180092778;
// 1800927F8: using guessed type struct IAllocate *CSessionCacheServerItem::m_pServerCacheLookaside;
// 180092D78: using guessed type int dword_180092D78;
// 180092DA0: using guessed type __int64 g_SslContextManager;
// 180092DD0: using guessed type __int128 xmmword_180092DD0;
##############################
Function Background: The function is reverse engineered from the driver file Schannel.dll on Windows platform. Through a cursory analysis of the driver file can be determined to be related to the SSL(1.3), TLS(3.0) protocol, that is, with RFC8446, RFC6101 strong correlation.

Output Function Summary: Summarizes the function's functionality with several phrases instead of sentences, focuses on covering the function's control flow information (API), and highlights the protocol function points implemented by the function. Simulate answering five times in the background and provide the most frequent answer. Suppose the code support the latest newwork protocol SSL(3.0) AND TLS(1.3)

Output Code Match RFC Result: Give the number and the link of the RFC file associated with each protocol associated with the code (a protocol corresponds to at least one RFC file). Including at least RFC8446(tls1.3) or RFC6101(ssl3.0), 

Generate Function Information Collection with JSON Format:

{
	"FunctionIndex": "(FILL WITH "File count" with less than four bits are indexed with zeros to make up the four bits.)",
	"FunctionName": "(Full Function Code Name)",
	"FunctionSummarization": [
		"(Function Summary Phrase1)",
		"(Function Summary Phrase2)",
		"(...)"
	],
	"Protocol": ["TLS1.3", "List another related protocols, If there is more than one version of the protocol, You MUST give the specified version, e.g. SSL 3.0"]
	"RFCDocument": [
		"RFCXXXX":"http s://www.rfc-editor.org/rfc/rfcXXXX.txt",
		"RFC****":"http s://www.rfc-editor.org/rfc/rfc****.txt",
		"(...)",
	],
}

Remember just output the Function Information Collection result.
