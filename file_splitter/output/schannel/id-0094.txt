Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 94
// Total lines: 308

//----- (0000000180007410) ----------------------------------------------------
char __fastcall CCipherMill::IsCipherSuiteAllowed(
        __int64 a1,
        unsigned int *a2,
        unsigned int a3,
        char a4,
        int a5,
        int a6,
        unsigned int a7,
        unsigned int a8,
        int a9,
        __int64 a10,
        const UNICODE_STRING *a11,
        unsigned __int64 a12,
        unsigned int a13,
        char a14)
{
  const wchar_t *v17; // r13
  int v18; // r8d
  _DWORD *v19; // rax
  unsigned int v20; // ecx
  char *v21; // rax
  int v22; // edi
  _DWORD *v23; // rax
  unsigned int v24; // ecx
  _DWORD *v25; // rax
  int v26; // ebp
  _DWORD *v27; // rax
  unsigned int v28; // ecx
  _DWORD *v29; // rcx
  int v30; // esi
  _DWORD *v31; // rcx
  unsigned int v32; // eax
  _DWORD *v33; // rcx
  unsigned int v35; // eax
  CCipherMill *v36; // rcx
  unsigned int v37; // eax
  CCipherMill *v38; // rcx
  unsigned int v39; // eax
  unsigned int v40; // eax
  unsigned __int16 v41; // dx
  __int64 v42; // rcx
  unsigned __int16 v43; // dx
  bool v44; // bl
  int v45; // r8d
  int v46; // [rsp+20h] [rbp-48h]

  if ( !a10 )
  {
    v17 = L"<NULL>";
LABEL_46:
    v36 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CCipherMill *)&WPP_GLOBAL_Control || (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) == 0 )
      return 0;
    v43 = 10;
    v46 = a9;
    goto LABEL_116;
  }
  v17 = (const wchar_t *)(a10 + 74);
  if ( (*(_DWORD *)(a10 + 8) & a9) == 0 )
    goto LABEL_46;
  if ( (*(_DWORD *)(a10 + 48) == 4) != a5 )
    return 0;
  if ( a6 )
  {
    v35 = *(_DWORD *)(a10 + 40);
    if ( v35 < 0x6604 || v35 >= 0x6801 )
    {
      v37 = v35 - 24576;
      if ( !v37 || (v39 = v37 - 1537) == 0 || (v40 = v39 - 2) == 0 || v40 == 510 )
      {
        v38 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control == (CCipherMill *)&WPP_GLOBAL_Control || (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) == 0 )
          return 0;
        v41 = 11;
        goto LABEL_113;
      }
    }
    if ( *(_BYTE *)(a10 + 72) || *(_DWORD *)(a10 + 44) == 32771 )
      return 0;
  }
  if ( a8 )
  {
    if ( !a7 )
    {
LABEL_9:
      if ( *(_DWORD *)(a10 + 20) >= a8 )
        goto LABEL_10;
      v36 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CCipherMill *)&WPP_GLOBAL_Control || (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) == 0 )
        return 0;
      v43 = 14;
      v46 = a8;
LABEL_116:
      v42 = *((_QWORD *)v36 + 2);
LABEL_117:
      WPP_SF_SD(v42, v43, (__int64)&WPP_bcb3b342e8be3997fa3752f6a9108bb3_Traceguids, v17, v46);
      return 0;
    }
  }
  else if ( !a7 )
  {
    if ( *(_DWORD *)(a10 + 40) != 24576 )
    {
      v38 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CCipherMill *)&WPP_GLOBAL_Control || (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) == 0 )
        return 0;
      v41 = 12;
      goto LABEL_113;
    }
    goto LABEL_10;
  }
  if ( *(_DWORD *)(a10 + 20) > a7 )
  {
    if ( WPP_GLOBAL_Control == (CCipherMill *)&WPP_GLOBAL_Control || (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) == 0 )
      return 0;
    v46 = a7;
    v43 = 13;
    v42 = *((_QWORD *)WPP_GLOBAL_Control + 2);
    goto LABEL_117;
  }
  if ( a8 )
    goto LABEL_9;
LABEL_10:
  v18 = *(_DWORD *)(a10 + 32);
  v19 = &g_AvailableExch;
  v20 = 0;
  while ( *v19 != v18 )
  {
    ++v20;
    v19 += 16;
    if ( v20 >= 4 )
      goto LABEL_16;
  }
  v21 = (char *)&g_AvailableExch + 64 * (unsigned __int64)v20;
  if ( v21 && (a9 & *((_DWORD *)v21 + 1)) == 0 )
  {
    v38 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CCipherMill *)&WPP_GLOBAL_Control || (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) == 0 )
      return 0;
    v41 = 15;
    goto LABEL_113;
  }
LABEL_16:
  v22 = *(_DWORD *)(a10 + 44);
  v23 = &unk_180091028;
  v24 = 0;
  while ( *v23 != v22 )
  {
    ++v24;
    v23 += 10;
    if ( v24 >= 5 )
      goto LABEL_22;
  }
  v25 = (_DWORD *)((char *)&g_AvailableHashes + 40 * v24);
  if ( v25 && (a9 & *v25) == 0 )
  {
    v38 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CCipherMill *)&WPP_GLOBAL_Control || (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) == 0 )
      return 0;
    v41 = 16;
    goto LABEL_113;
  }
LABEL_22:
  v26 = *(_DWORD *)(a10 + 40);
  v27 = &unk_180091100;
  v28 = 0;
  while ( *v27 != v26 )
  {
    ++v28;
    v27 += 14;
    if ( v28 >= 8 )
      goto LABEL_26;
  }
  v29 = (_DWORD *)((char *)&g_AvailableCiphers + 56 * v28);
  if ( v29 && (a9 & 0xF3FFFu & *v29) <= (a9 & 0xF3FFFu) >> 1 )
  {
    v36 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CCipherMill *)&WPP_GLOBAL_Control || (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) == 0 )
      return 0;
    v43 = 17;
    v46 = a9 & 0xF3FFF;
    goto LABEL_116;
  }
LABEL_26:
  v30 = *(_DWORD *)(a10 + 36);
  v31 = &unk_1800913EC;
  v32 = 0;
  while ( *v31 != v30 )
  {
    ++v32;
    v31 += 8;
    if ( v32 >= 5 )
      goto LABEL_32;
  }
  v33 = (_DWORD *)((char *)&g_AvailableSigs + 32 * v32);
  if ( v33 && (a9 & *v33) == 0 )
  {
    v36 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CCipherMill *)&WPP_GLOBAL_Control || (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) == 0 )
      return 0;
    v43 = 18;
    v46 = a9 & 0xF3FFF;
    goto LABEL_116;
  }
LABEL_32:
  if ( a3 )
  {
    v44 = (*(_DWORD *)(a10 + 8) & 0x3000) == 0;
    if ( (a4 & 4) == 0 || !v44 || DoesCredAllowAlgId(a2, a3, v18) )
    {
      if ( (a4 & 1) == 0 || !v44 || DoesCredAllowAlgId(a2, a3, v30) )
      {
        if ( (a4 & 8) == 0 || DoesCredAllowAlgId(a2, a3, v26) )
        {
          if ( (a4 & 2) == 0 || DoesCredAllowAlgId(a2, a3, v22) )
            return 1;
          v36 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control == (CCipherMill *)&WPP_GLOBAL_Control
            || (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) == 0 )
          {
            return 0;
          }
          v43 = 22;
          v46 = v22;
        }
        else
        {
          v36 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control == (CCipherMill *)&WPP_GLOBAL_Control
            || (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) == 0 )
          {
            return 0;
          }
          v43 = 21;
          v46 = v26;
        }
      }
      else
      {
        v36 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control == (CCipherMill *)&WPP_GLOBAL_Control || (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) == 0 )
          return 0;
        v43 = 20;
        v46 = v30;
      }
    }
    else
    {
      v36 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CCipherMill *)&WPP_GLOBAL_Control || (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) == 0 )
        return 0;
      v43 = 19;
      v46 = v45;
    }
    goto LABEL_116;
  }
  if ( !a13 )
    return 1;
  if ( IsCngAlgorithmBlacklisted(a12, a13, 0, (const wchar_t *)(a10 + 330), 0i64, 0, a11, a14) )
  {
    v38 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CCipherMill *)&WPP_GLOBAL_Control || (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) == 0 )
      return 0;
    v41 = 23;
    goto LABEL_113;
  }
  if ( IsCngAlgorithmBlacklisted(a12, a13, 1, (const wchar_t *)(a10 + 458), 0i64, 0, a11, a14) )
  {
    v38 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CCipherMill *)&WPP_GLOBAL_Control || (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) == 0 )
      return 0;
    v41 = 24;
    goto LABEL_113;
  }
  if ( IsCngAlgorithmBlacklisted(
         a12,
         a13,
         2,
         (const wchar_t *)(a10 + 202),
         (wchar_t *)(a10 + 714),
         *(_DWORD *)(a10 + 20),
         a11,
         a14) )
  {
    v38 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CCipherMill *)&WPP_GLOBAL_Control || (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) == 0 )
      return 0;
    v41 = 25;
    goto LABEL_113;
  }
  if ( !IsCngAlgorithmBlacklisted(a12, a13, 3, (const wchar_t *)(a10 + 586), 0i64, 0, a11, a14) )
    return 1;
  v38 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
  {
    v41 = 26;
LABEL_113:
    WPP_SF_S(
      *((_QWORD *)v38 + 2),
      v41,
      (__int64)&WPP_bcb3b342e8be3997fa3752f6a9108bb3_Traceguids,
      (const wchar_t *)(a10 + 74));
  }
  return 0;
}
// 18003384F: variable 'v45' is possibly undefined
// 1800856E0: using guessed type wchar_t aNull_1[7];
##############################
Role: Let's assume that you are an advanced reverse engineer and you are reverse engineering a network driver using IDA Pro, and you are also familiar with the RFC documentation. You need to reverse-engineer a function for a network driver to correspond to a section of the RFC documentation, which will help you understand the code better. The driver you're reversing is Schannel.dll, and you've initially determined that the corresponding network protocols are SSL and TLS, and the documents you need to map are RFC8446 and RFC6101. You need to get a function summary of the function you're reversing, and then correspond to the potential RFC sections based on the name of the function and the function summary.

Function Background: The function is reverse engineered from the driver file Schannel.dll on Windows platform. Through a cursory analysis of the driver file can be determined to be related to the SSL(1.3), TLS(3.0) protocol, that is, with RFC8446, RFC6101 strong correlation.

Output Function Summary: Summarizes the function's functionality with several phrases instead of sentences, focuses on covering the function's control flow information, and highlights the protocol function points implemented by the function. Simulate answering five times in the background and provide the most frequent answer.

Retrieve document sections: giving matches for document sections(FunctionMatchRFCResult) that the code may related to. NOTE if the code is only business related(i.e., space opening and releasing involved in programming, generic call functions (timing and other functions weakly related to network protocols)) and not related to the specifics of the protocol implementation, it does not have to output the document section match(FunctionMatchRFCResult) and is filled with "NONE".

Retrieve document sections Thinking Chain: The function code is matched with the RFC document section, and the thinking chain is provided to help you solve the problem better:
	1. Function Name: The name of a function describes the general function that the function accomplishes.
	2. Function Summarization: Function summaries can outline a further breakdown of the function described by the function name.
	3. Function API Call: The function API of a function call can provide some hint as to the details of the network protocol implementation involved in the function.
	4. Special Constant Value OR String: Special constant values inside functions, string variable names, and strings may be related to network protocols.
	5. Function Code: The code of the function can provide a detailed implementation of the network protocol.
Generate Function Information Collection with JSON Format:

{
	"FunctionIndex": "(FILL WITH "File count" with less than four bits are indexed with zeros to make up the four bits.)",
	"FunctionName": "(Full Function Code Name)",
	"FunctionSummarization": [
		"(Function Summary Phrase1)",
		"(Function Summary Phrase2)",
		"(...)"
	],
	"FunctionMatchRFCResult": [
		"(RFCXXXX-SectionX.X.X.X-Section Title 1)",
		"(RFCXXXX-SectionX.X.X.X-Section Title 2)",
		"(...)",
	],
}

ATTENTION: Remember YOU MUST ONLY output the Function Information Collection result.
