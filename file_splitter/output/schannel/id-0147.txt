Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 147
// Total lines: 468

//----- (000000018000C91C) ----------------------------------------------------
__int64 __fastcall TlsDecryptHandler(
        struct CSslUserContext *a1,
        struct SPBuffer *a2,
        struct SPBuffer *a3,
        unsigned __int8 *a4)
{
  int v4; // eax
  int v5; // r14d
  unsigned __int8 *v10; // r8
  int v11; // edx
  bool v12; // zf
  int v13; // ecx
  unsigned int v14; // ebp
  int v15; // ecx
  int v16; // ecx
  CCipherMill *v17; // rcx
  unsigned int v18; // eax
  CCipherMill *v19; // rcx
  unsigned __int64 v21; // r14
  unsigned int v22; // eax
  unsigned int v23; // r15d
  int v24; // eax
  unsigned int v25; // esi
  CCipherMill *v26; // rcx
  unsigned __int16 v27; // dx
  unsigned __int16 v28; // dx
  CCipherMill *v29; // r10
  int v30; // r14d
  int v31; // r8d
  unsigned int v32; // eax
  unsigned int v33; // r12d
  CCipherMill *v34; // rcx
  unsigned int v35; // r12d
  unsigned __int8 *v36; // r8
  unsigned __int64 v37; // r14
  unsigned int v38; // eax
  unsigned int v39; // r15d
  CCipherMill *v40; // rcx
  CCipherMill *v41; // rcx
  unsigned __int16 v42; // dx
  _BYTE *v43; // rax
  unsigned __int8 *v44; // rcx
  unsigned __int64 v45; // rbp
  __int64 v46; // rcx
  int v47; // r9d
  _BYTE *v48; // r14
  unsigned int v49; // eax
  unsigned int v50; // ebp
  CCipherMill *v51; // rcx
  unsigned __int64 *v52; // [rsp+20h] [rbp-78h]
  struct SPBuffer *v53; // [rsp+28h] [rbp-70h]
  unsigned int v54; // [rsp+28h] [rbp-70h]
  struct SPBuffer *v55; // [rsp+30h] [rbp-68h]
  unsigned __int8 *v56; // [rsp+38h] [rbp-60h]
  unsigned __int8 *v57; // [rsp+38h] [rbp-60h]
  __int64 v58; // [rsp+40h] [rbp-58h]
  unsigned int v59; // [rsp+50h] [rbp-48h] BYREF
  unsigned int v60; // [rsp+54h] [rbp-44h] BYREF
  int v61; // [rsp+58h] [rbp-40h]
  unsigned int v62; // [rsp+A0h] [rbp+8h] BYREF
  int v63; // [rsp+A8h] [rbp+10h]
  unsigned __int8 *v64; // [rsp+B8h] [rbp+20h]

  v64 = a4;
  v4 = 4;
  v5 = *((_DWORD *)a1 + 17) + *((_DWORD *)a1 + 16);
  v61 = v5;
  v10 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
  v11 = *((_DWORD *)a1 + 6) & 0xF0000;
  v62 = v11;
  if ( v11 )
    v4 = 12;
  v12 = *((_DWORD *)a1 + 2) == 4;
  v63 = v4;
  if ( !v12 )
  {
    v26 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CCipherMill *)&WPP_GLOBAL_Control || (*((_BYTE *)WPP_GLOBAL_Control + 28) & 5) == 0 )
      return 2148074248i64;
    v27 = 34;
    goto LABEL_102;
  }
  v13 = *v10;
  if ( ((v13 - 20) & 0xFFFFFFFC) == 0 && v13 != 21 )
    *((_BYTE *)a1 + 112) = 0;
  v14 = -2146893008;
  v15 = v13 - 21;
  if ( v15 )
  {
    v16 = v15 - 1;
    if ( v16 )
    {
      if ( v16 == 1 )
      {
        v17 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control )
        {
          if ( (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
          {
            WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 35i64, &WPP_bf20500307af3a1a22cf0d610b67b788_Traceguids);
            v17 = WPP_GLOBAL_Control;
          }
          if ( v17 != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)v17 + 28) & 4) != 0 )
            WPP_SF_(*((_QWORD *)v17 + 2), 36i64, &WPP_bf20500307af3a1a22cf0d610b67b788_Traceguids);
        }
        v18 = TlsDecryptMessage(
                *((_QWORD *)a1 + 11),
                *((_QWORD *)a1 + 5),
                v5 - *((_DWORD *)a1 + 17),
                *((_DWORD *)a1 + 17),
                (unsigned __int64 *)a1 + 12,
                a2,
                a3,
                a4);
        v14 = v18;
        v19 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control )
        {
          if ( (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
          {
            WPP_SF_D(*((_QWORD *)WPP_GLOBAL_Control + 2), 37i64, &WPP_bf20500307af3a1a22cf0d610b67b788_Traceguids, v18);
            v19 = WPP_GLOBAL_Control;
          }
          if ( v19 != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)v19 + 28) & 4) != 0 )
          {
            WPP_SF_i(
              *((_QWORD *)v19 + 2),
              0x26u,
              (__int64)&WPP_bf20500307af3a1a22cf0d610b67b788_Traceguids,
              *((_QWORD *)a1 + 12));
            v19 = WPP_GLOBAL_Control;
          }
        }
        if ( v62 && !*((_BYTE *)a1 + 140) )
        {
          *((_BYTE *)a1 + 140) = 1;
          v19 = WPP_GLOBAL_Control;
        }
        if ( v19 == (CCipherMill *)&WPP_GLOBAL_Control
          || ((*((_BYTE *)v19 + 28) & 1) == 0 || !v14) && (*((_BYTE *)v19 + 28) & 4) == 0 )
        {
          return v14;
        }
        v28 = 39;
LABEL_56:
        LODWORD(v52) = v14;
        WPP_SF_DD(*((_QWORD *)v19 + 2), v28, (__int64)&WPP_bf20500307af3a1a22cf0d610b67b788_Traceguids, v14, v52);
        return v14;
      }
      v26 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
      {
        WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 62i64, &WPP_bf20500307af3a1a22cf0d610b67b788_Traceguids);
        v26 = WPP_GLOBAL_Control;
      }
      *a4 = 10;
      if ( v26 == (CCipherMill *)&WPP_GLOBAL_Control || (*((_BYTE *)v26 + 28) & 5) == 0 )
        return 2148074248i64;
      v27 = 63;
      goto LABEL_102;
    }
    v29 = WPP_GLOBAL_Control;
    v30 = 40;
    if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
    {
      WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 40i64, &WPP_bf20500307af3a1a22cf0d610b67b788_Traceguids);
      v29 = WPP_GLOBAL_Control;
      v11 = v62;
    }
    v31 = *((_DWORD *)a1 + 6);
    if ( (v31 & 0x800A2AAA) != 0 )
    {
      v32 = QueryStreamSizes(*((_QWORD *)a1 + 11), *((_DWORD *)a1 + 14), v31, *((_DWORD *)a1 + 15), 0i64, &v60, &v59);
      v33 = v32;
      if ( v32 )
      {
        v34 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control )
        {
          if ( (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) != 0 )
          {
            WPP_SF_D(*((_QWORD *)WPP_GLOBAL_Control + 2), 41i64, &WPP_bf20500307af3a1a22cf0d610b67b788_Traceguids, v32);
            v34 = WPP_GLOBAL_Control;
          }
          if ( v34 != (CCipherMill *)&WPP_GLOBAL_Control
            && ((*((_BYTE *)v34 + 28) & 1) != 0 || (*((_BYTE *)v34 + 28) & 4) != 0) )
          {
            LODWORD(v52) = v33;
            WPP_SF_DD(*((_QWORD *)v34 + 2), 0x2Au, (__int64)&WPP_bf20500307af3a1a22cf0d610b67b788_Traceguids, v33, v52);
          }
        }
        return v33;
      }
      if ( *(_DWORD *)a2 > v61 + v63 + v59 + v60 )
      {
        if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
          WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 43i64, &WPP_bf20500307af3a1a22cf0d610b67b788_Traceguids);
        goto LABEL_142;
      }
      if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
        WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 44i64, &WPP_bf20500307af3a1a22cf0d610b67b788_Traceguids);
      v35 = v62;
      v36 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
      if ( v62 )
        v37 = v36[10] | ((v36[9] | ((v36[8] | ((v36[7] | ((v36[6] | ((v36[5] | ((v36[4] | ((unsigned __int64)v36[3] << 8)) << 8)) << 8)) << 8)) << 8)) << 8)) << 8);
      else
        v37 = *((_QWORD *)a1 + 12);
      LODWORD(v58) = 0;
      v56 = (unsigned __int8 *)v37;
      v55 = (struct SPBuffer *)((char *)a3 + 4);
      LODWORD(v53) = *(_DWORD *)a3;
      v52 = (unsigned __int64 *)*((_QWORD *)a3 + 1);
      v38 = SslDecryptPacket(*((_QWORD *)a1 + 11), *((_QWORD *)a1 + 5), v36);
      v39 = v38;
      v40 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control )
      {
        if ( (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
        {
          WPP_SF_D(*((_QWORD *)WPP_GLOBAL_Control + 2), 45i64, &WPP_bf20500307af3a1a22cf0d610b67b788_Traceguids, v38);
          v40 = WPP_GLOBAL_Control;
        }
        if ( v40 != (CCipherMill *)&WPP_GLOBAL_Control )
        {
          if ( (*((_BYTE *)v40 + 28) & 4) != 0 )
          {
            WPP_SF_D(
              *((_QWORD *)v40 + 2),
              46i64,
              &WPP_bf20500307af3a1a22cf0d610b67b788_Traceguids,
              *((unsigned int *)a3 + 1));
            v40 = WPP_GLOBAL_Control;
          }
          if ( v40 != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)v40 + 28) & 4) != 0 )
            WPP_SF_i(
              *((_QWORD *)v40 + 2),
              0x2Fu,
              (__int64)&WPP_bf20500307af3a1a22cf0d610b67b788_Traceguids,
              *((_QWORD *)a1 + 12),
              v52,
              v53,
              v55,
              v37,
              0);
        }
      }
      if ( v35 )
        *((_QWORD *)a1 + 12) = v37;
      else
        ++*((_QWORD *)a1 + 12);
      if ( !v39 )
      {
        if ( *((_DWORD *)a3 + 1) != v63 || (v43 = (_BYTE *)*((_QWORD *)a3 + 1), *v43) )
        {
          *v64 = 10;
          v26 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control == (CCipherMill *)&WPP_GLOBAL_Control
            || (*((_BYTE *)WPP_GLOBAL_Control + 28) & 5) == 0 )
          {
            return 2148074248i64;
          }
          v27 = 49;
LABEL_102:
          LODWORD(v52) = -2146893048;
          WPP_SF_DD(
            *((_QWORD *)v26 + 2),
            v27,
            (__int64)&WPP_bf20500307af3a1a22cf0d610b67b788_Traceguids,
            -2146893048,
            v52);
          return 2148074248i64;
        }
        v30 = 76;
        *((_DWORD *)a1 + 36) = (unsigned __int8)v43[5] + 1 + ((unsigned __int8)v43[4] << 8);
LABEL_143:
        *((_DWORD *)a1 + 2) = v30;
        *((_DWORD *)a3 + 1) = 0;
        v19 = WPP_GLOBAL_Control;
        v14 = 590625;
        if ( WPP_GLOBAL_Control == (CCipherMill *)&WPP_GLOBAL_Control || (*((_BYTE *)WPP_GLOBAL_Control + 28) & 5) == 0 )
          return v14;
        v28 = 57;
        goto LABEL_56;
      }
      *v64 = 20;
      v41 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CCipherMill *)&WPP_GLOBAL_Control || (*((_BYTE *)WPP_GLOBAL_Control + 28) & 5) == 0 )
        return v14;
      v42 = 48;
      goto LABEL_109;
    }
    if ( !v11 )
    {
      v30 = 76;
LABEL_142:
      *((_DWORD *)a2 + 1) = 0;
      goto LABEL_143;
    }
    v44 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
    v45 = v44[10] | ((v44[9] | ((v44[8] | ((v44[7] | ((v44[6] | ((v44[5] | ((v44[4] | ((unsigned __int64)v44[3] << 8)) << 8)) << 8)) << 8)) << 8)) << 8)) << 8);
    if ( HIWORD(v45) < (unsigned int)*((int *)a1 + 29) )
    {
      v14 = -2146893005;
      if ( v29 == (CCipherMill *)&WPP_GLOBAL_Control || (*((_BYTE *)v29 + 28) & 5) == 0 )
        return v14;
      v46 = *((_QWORD *)v29 + 2);
      v42 = 50;
      v47 = -2146893005;
      goto LABEL_110;
    }
    v62 = *((_DWORD *)a2 + 1);
    v48 = LocalAlloc(0x40u, v62);
    if ( !v48 )
    {
      if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 5) != 0 )
        WPP_SF_DD(
          *((_QWORD *)WPP_GLOBAL_Control + 2),
          0x33u,
          (__int64)&WPP_bf20500307af3a1a22cf0d610b67b788_Traceguids,
          -2146893056,
          -2146893056);
      return 2148074240i64;
    }
    if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
      WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 52i64, &WPP_bf20500307af3a1a22cf0d610b67b788_Traceguids);
    v57 = (unsigned __int8 *)v45;
    v54 = v62;
    HIDWORD(v52) = HIDWORD(v48);
    v49 = SslDecryptPacket(*((_QWORD *)a1 + 11), *((_QWORD *)a1 + 5), *((_QWORD *)a2 + 1));
    v50 = v49;
    v51 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control )
    {
      if ( (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
      {
        WPP_SF_D(*((_QWORD *)WPP_GLOBAL_Control + 2), 53i64, &WPP_bf20500307af3a1a22cf0d610b67b788_Traceguids, v49);
        v51 = WPP_GLOBAL_Control;
      }
      if ( v51 != (CCipherMill *)&WPP_GLOBAL_Control )
      {
        if ( (*((_BYTE *)v51 + 28) & 4) != 0 )
        {
          WPP_SF_D(
            *((_QWORD *)v51 + 2),
            54i64,
            &WPP_bf20500307af3a1a22cf0d610b67b788_Traceguids,
            *((unsigned int *)a3 + 1));
          v51 = WPP_GLOBAL_Control;
        }
        if ( v51 != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)v51 + 28) & 4) != 0 )
          WPP_SF_i(
            *((_QWORD *)v51 + 2),
            0x37u,
            (__int64)&WPP_bf20500307af3a1a22cf0d610b67b788_Traceguids,
            *((_QWORD *)a1 + 12),
            v48,
            v54,
            &v62,
            v57,
            0);
      }
    }
    if ( v50 )
    {
      *a4 = 20;
      v14 = -2146893008;
      goto LABEL_137;
    }
    if ( v62 >= 0xC )
    {
      if ( !*((_BYTE *)a1 + 140) )
      {
        if ( *v48 != 1 )
        {
          v14 = -2146893005;
          goto LABEL_137;
        }
        goto LABEL_135;
      }
      if ( *v48 == 1 )
      {
LABEL_135:
        v14 = 590625;
        *((_DWORD *)a1 + 36) = (unsigned __int8)v48[5] + ((unsigned __int8)v48[4] << 8);
        goto LABEL_137;
      }
    }
    v14 = -2146893048;
    *a4 = 10;
LABEL_137:
    LocalFree(v48);
    *((_DWORD *)a3 + 1) = 0;
    *((_DWORD *)a2 + 1) = 0;
    v19 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CCipherMill *)&WPP_GLOBAL_Control
      || (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) == 0 && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) == 0 )
    {
      return v14;
    }
    v28 = 56;
    goto LABEL_56;
  }
  if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
  {
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 58i64, &WPP_bf20500307af3a1a22cf0d610b67b788_Traceguids);
    v10 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
  }
  if ( (*((_DWORD *)a1 + 6) & 0xF0000) != 0 )
    v21 = v10[10] | ((v10[9] | ((v10[8] | ((v10[7] | ((v10[6] | ((v10[5] | ((v10[4] | ((unsigned __int64)v10[3] << 8)) << 8)) << 8)) << 8)) << 8)) << 8)) << 8);
  else
    v21 = *((_QWORD *)a1 + 12);
  LODWORD(v58) = 0;
  v56 = (unsigned __int8 *)v21;
  v55 = (struct SPBuffer *)((char *)a3 + 4);
  LODWORD(v53) = *(_DWORD *)a3;
  v52 = (unsigned __int64 *)*((_QWORD *)a3 + 1);
  v22 = SslDecryptPacket(*((_QWORD *)a1 + 11), *((_QWORD *)a1 + 5), v10);
  v23 = v22;
  if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
    WPP_SF_D(*((_QWORD *)WPP_GLOBAL_Control + 2), 59i64, &WPP_bf20500307af3a1a22cf0d610b67b788_Traceguids, v22);
  if ( (*((_DWORD *)a1 + 6) & 0xF0000) != 0 )
    *((_QWORD *)a1 + 12) = v21;
  else
    ++*((_QWORD *)a1 + 12);
  if ( v23 )
  {
    *a4 = 20;
    v41 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CCipherMill *)&WPP_GLOBAL_Control || (*((_BYTE *)WPP_GLOBAL_Control + 28) & 5) == 0 )
      return v14;
    v42 = 60;
LABEL_109:
    v46 = *((_QWORD *)v41 + 2);
    v47 = -2146893008;
LABEL_110:
    LODWORD(v52) = v14;
    WPP_SF_Dd(v46, v42, (__int64)&WPP_bf20500307af3a1a22cf0d610b67b788_Traceguids, v47, v52, v53, v55, v56, v58);
    return v14;
  }
  v24 = TlsParseAlertMessage(*((unsigned __int8 **)a3 + 1), *((_DWORD *)a3 + 1), (unsigned __int8 *)a1 + 112, 0i64);
  *((_DWORD *)a3 + 1) = 0;
  v25 = v24;
  if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control
    && ((*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) != 0 && v24 || (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0) )
  {
    LODWORD(v52) = v24;
    WPP_SF_DD(
      *((_QWORD *)WPP_GLOBAL_Control + 2),
      0x3Du,
      (__int64)&WPP_bf20500307af3a1a22cf0d610b67b788_Traceguids,
      v24,
      v52,
      (_DWORD)v53,
      v55,
      v21,
      0);
  }
  return v25;
}
// 180036B8D: variable 'v52' is possibly undefined
// 180036E06: variable 'v53' is possibly undefined
// 180036F74: variable 'v55' is possibly undefined
// 180036F74: variable 'v56' is possibly undefined
// 180036F74: variable 'v58' is possibly undefined
// 180041CB0: using guessed type __int64 __fastcall WPP_SF_(_QWORD, _QWORD, _QWORD);
// 180041CDC: using guessed type __int64 __fastcall WPP_SF_D(_QWORD, _QWORD, _QWORD, _QWORD);
// 1800984E0: using guessed type __int64 __fastcall SslDecryptPacket(_QWORD, _QWORD, _QWORD);
##############################
Role: Let's assume that you are an advanced reverse engineer and you are reverse engineering a network driver using IDA Pro, and you are also familiar with the RFC documentation. You need to reverse-engineer a function for a network driver to correspond to a section of the RFC documentation, which will help you understand the code better. The driver you're reversing is Schannel.dll, and you've initially determined that the corresponding network protocols are SSL and TLS, and the documents you need to map are RFC8446 and RFC6101. You need to get a function summary of the function you're reversing, and then correspond to the potential RFC sections based on the name of the function and the function summary.

Function Background: The function is reverse engineered from the driver file Schannel.dll on Windows platform. Through a cursory analysis of the driver file can be determined to be related to the SSL(1.3), TLS(3.0) protocol, that is, with RFC8446, RFC6101 strong correlation.

Output Function Summary: Summarizes the function's functionality with several phrases instead of sentences, focuses on covering the function's control flow information, and highlights the protocol function points implemented by the function. Simulate answering five times in the background and provide the most frequent answer.

Retrieve document sections: giving matches for document sections(FunctionMatchRFCResult) that the code may related to. NOTE if the code is only business related(i.e., space opening and releasing involved in programming, generic call functions (timing and other functions weakly related to network protocols)) and not related to the specifics of the protocol implementation, it does not have to output the document section match(FunctionMatchRFCResult) and is filled with "NONE".

Retrieve document sections Thinking Chain: The function code is matched with the RFC document section, and the thinking chain is provided to help you solve the problem better:
	1. Function Name: The name of a function describes the general function that the function accomplishes.
	2. Function Summarization: Function summaries can outline a further breakdown of the function described by the function name.
	3. Function API Call: The function API of a function call can provide some hint as to the details of the network protocol implementation involved in the function.
	4. Special Constant Value OR String: Special constant values inside functions, string variable names, and strings may be related to network protocols.
	5. Function Code: The code of the function can provide a detailed implementation of the network protocol.
Generate Function Information Collection with JSON Format:

{
	"FunctionIndex": "(FILL WITH "File count" with less than four bits are indexed with zeros to make up the four bits.)",
	"FunctionName": "(Full Function Code Name)",
	"FunctionSummarization": [
		"(Function Summary Phrase1)",
		"(Function Summary Phrase2)",
		"(...)"
	],
	"FunctionMatchRFCResult": [
		"(RFCXXXX-SectionX.X.X.X-Section Title 1)",
		"(RFCXXXX-SectionX.X.X.X-Section Title 2)",
		"(...)",
	],
}

ATTENTION: Remember YOU MUST ONLY output the Function Information Collection result.
