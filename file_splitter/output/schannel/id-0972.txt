Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 972
// Total lines: 277

//----- (0000000180050CE0) ----------------------------------------------------
__int64 __fastcall GetUserAppCertDataCallback(__int64 a1, char a2, __int64 a3, __int64 a4)
{
  int v4; // ebx
  void *v7; // r13
  unsigned int v8; // esi
  int v9; // edi
  __int64 *v11; // rcx
  __int64 v12; // rcx
  DWORD v13; // eax
  __int64 v14; // rdx
  int v15; // r8d
  void *v16; // r12
  unsigned int v17; // r14d
  const CERT_CONTEXT **v18; // r15
  const CERT_CONTEXT *v19; // rax
  unsigned int v20; // esi
  HCERTSTORE hCertStore; // rcx
  unsigned int v22; // esi
  unsigned int v23; // esi
  DWORD LastError; // eax
  __int64 v25; // rdx
  HLOCAL v26; // rax
  HLOCAL v27; // r12
  _DWORD *v28; // r15
  unsigned int v29; // r14d
  __int64 *v30; // rcx
  int v31; // r14d
  int v32; // eax
  __int64 v33; // rcx
  int v34; // r14d
  __int64 v35; // rax
  CCipherMill *v36; // rcx
  __int64 v37; // rdx
  DWORD pcbElement; // [rsp+38h] [rbp-39h] BYREF
  DWORD v39; // [rsp+3Ch] [rbp-35h]
  int v40; // [rsp+40h] [rbp-31h]
  int v41[2]; // [rsp+48h] [rbp-29h] BYREF
  _DWORD *v42; // [rsp+50h] [rbp-21h]
  __int64 *v43; // [rsp+58h] [rbp-19h]
  int v44[2]; // [rsp+60h] [rbp-11h] BYREF
  __int64 v45; // [rsp+68h] [rbp-9h]
  __int64 v46; // [rsp+70h] [rbp-1h]
  __int128 pvSaveToPara; // [rsp+78h] [rbp+7h] BYREF
  const CERT_CONTEXT *v48; // [rsp+88h] [rbp+17h]

  v4 = 0;
  v44[0] = 0;
  v45 = 0i64;
  v7 = 0i64;
  v41[0] = 0;
  v8 = 0;
  v42 = 0i64;
  v9 = 1;
  v44[1] = 1;
  v41[1] = 1;
  if ( !(unsigned int)SchannelInit(1) )
    return 2148074244i64;
  if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 64i64, &WPP_e7a188b1921532aa285b79366435dd9d_Traceguids);
  if ( !a4 )
    goto LABEL_64;
  if ( !a3 )
    goto LABEL_64;
  v11 = *(__int64 **)(a3 + 8);
  if ( !v11 )
    goto LABEL_64;
  v12 = *v11;
  if ( (unsigned int)(*(_DWORD *)v12 - 1) > 4 )
    goto LABEL_64;
  if ( *(_DWORD *)v12 == 4 )
  {
    v13 = *(_DWORD *)(v12 + 4);
    v14 = *(_QWORD *)(v12 + 8);
    v15 = *(_DWORD *)(v12 + 72);
    v16 = *(void **)(v12 + 16);
  }
  else
  {
    v13 = *(_DWORD *)(v12 + 8);
    v14 = *(_QWORD *)(v12 + 16);
    v15 = *(_DWORD *)(v12 + 52);
    v16 = *(void **)(v12 + 24);
  }
  v17 = 0;
  v46 = (__int64)v16;
  v40 = v15;
  v43 = (__int64 *)v14;
  v39 = v13;
  if ( v13 )
  {
    v18 = (const CERT_CONTEXT **)v14;
    while ( 1 )
    {
      v19 = *v18;
      pcbElement = 0;
      v48 = v19;
      v20 = v8 + 16;
      if ( !CertSerializeCertificateStoreElement(v19, 0, 0i64, &pcbElement) )
        break;
      v8 = pcbElement + v20;
      if ( (v40 & 0x10000) != 0 )
      {
        hCertStore = v48->hCertStore;
        v22 = v8 + 8;
        pvSaveToPara = 0i64;
        if ( !CertSaveStore(hCertStore, 1u, 1u, 2u, &pvSaveToPara, 0) )
        {
          if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control
            && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) != 0 )
          {
            LastError = GetLastError();
            v25 = 66i64;
            goto LABEL_31;
          }
          goto LABEL_32;
        }
        v8 = pvSaveToPara + v22;
      }
      ++v17;
      ++v18;
      if ( v17 >= v39 )
        goto LABEL_20;
    }
    if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) != 0 )
    {
      LastError = GetLastError();
      v25 = 65i64;
      goto LABEL_31;
    }
    goto LABEL_32;
  }
LABEL_20:
  if ( !v16 )
  {
LABEL_34:
    if ( v8 )
    {
      if ( (a2 & 8) != 0 )
        v26 = SPExternalAlloc(v8);
      else
        v26 = PvExtVirtualAlloc(v8);
      v7 = v26;
      v27 = v26;
      if ( !v26 )
        goto LABEL_39;
      pcbElement = 0;
      v28 = v26;
      v29 = v8;
      if ( v39 )
      {
        v30 = v43;
        while ( 1 )
        {
          v45 = *v30;
          v44[0] = 40;
          v31 = v29 - 4;
          v42 = v28 + 1;
          v41[0] = v31;
          v32 = UploadCertContextCallback(0i64, 0i64, (__int64)v44, (__int64)v41);
          v4 = v32;
          if ( v32 < 0 )
            break;
          v33 = (unsigned int)v41[0];
          v29 = v31 - v41[0];
          *v28 = v41[0];
          v28 = (_DWORD *)((char *)v28 + v33 + 4);
          if ( (v40 & 0x10000) != 0 )
          {
            if ( v29 < 4 )
              goto LABEL_39;
            v34 = v29 - 4;
            v42 = v28 + 1;
            v41[0] = v34;
            v32 = UploadCertStoreCallback(1i64, 0i64, (__int64)v44, v41);
            v4 = v32;
            if ( v32 < 0 )
            {
              v36 = WPP_GLOBAL_Control;
              if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control
                && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) != 0 )
              {
                v37 = 69i64;
                goto LABEL_60;
              }
              goto LABEL_65;
            }
            v35 = (unsigned int)v41[0];
            v29 = v34 - v41[0];
            *v28 = v41[0];
            v28 = (_DWORD *)((char *)v28 + v35 + 4);
          }
          v30 = v43 + 1;
          ++pcbElement;
          ++v43;
          if ( pcbElement >= v39 )
            goto LABEL_48;
        }
        v36 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) != 0 )
        {
          v37 = 68i64;
          goto LABEL_60;
        }
        goto LABEL_65;
      }
LABEL_48:
      if ( v46 )
      {
        v45 = v46;
        v44[0] = 8;
        if ( v29 < 4 )
        {
LABEL_39:
          v4 = -2146893056;
          goto LABEL_65;
        }
        v42 = v28 + 1;
        v41[0] = v29 - 4;
        v32 = UploadCertStoreCallback(0i64, 0i64, (__int64)v44, v41);
        v4 = v32;
        if ( v32 < 0 )
        {
          v36 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control
            && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) != 0 )
          {
            v37 = 70i64;
LABEL_60:
            WPP_SF_D(*((_QWORD *)v36 + 2), v37, &WPP_e7a188b1921532aa285b79366435dd9d_Traceguids, (unsigned int)v32);
          }
          goto LABEL_65;
        }
        *v28 = v41[0];
      }
      if ( v4 >= 0 )
        goto LABEL_69;
      goto LABEL_65;
    }
LABEL_64:
    v4 = -2146893052;
    goto LABEL_65;
  }
  pvSaveToPara = 0i64;
  v23 = v8 + 8;
  if ( CertSaveStore(v16, 1u, 1u, 2u, &pvSaveToPara, 0) )
  {
    v8 = pvSaveToPara + v23;
    goto LABEL_34;
  }
  if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) != 0 )
  {
    LastError = GetLastError();
    v25 = 67i64;
LABEL_31:
    WPP_SF_D(*((_QWORD *)WPP_GLOBAL_Control + 2), v25, &WPP_e7a188b1921532aa285b79366435dd9d_Traceguids, LastError);
  }
LABEL_32:
  v4 = -2146893043;
LABEL_65:
  if ( (a2 & 8) != 0 )
    SPExternalFree(v7);
  else
    FreeExtVirtualAlloc(v7);
  v8 = 0;
  v27 = 0i64;
  v9 = 0;
LABEL_69:
  *(_DWORD *)(a4 + 4) = v9;
  *(_QWORD *)(a4 + 8) = v27;
  *(_DWORD *)a4 = v8;
  if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 71i64, &WPP_e7a188b1921532aa285b79366435dd9d_Traceguids);
  return (unsigned int)v4;
}
// 180041CB0: using guessed type __int64 __fastcall WPP_SF_(_QWORD, _QWORD, _QWORD);
// 180041CDC: using guessed type __int64 __fastcall WPP_SF_D(_QWORD, _QWORD, _QWORD, _QWORD);
##############################
Role: Let's assume that you are an advanced reverse engineer and you are reverse engineering a network driver using IDA Pro, and you are also familiar with the RFC documentation. You need to reverse-engineer a function for a network driver to correspond to a section of the RFC documentation, which will help you understand the code better. The driver you're reversing is Schannel.dll, and you've initially determined that the corresponding network protocols are SSL and TLS, and the documents you need to map are RFC8446 and RFC6101. You need to get a function summary of the function you're reversing, and then correspond to the potential RFC sections based on the name of the function and the function summary.

Function Background: The function is reverse engineered from the driver file Schannel.dll on Windows platform. Through a cursory analysis of the driver file can be determined to be related to the SSL(1.3), TLS(3.0) protocol, that is, with RFC8446, RFC6101 strong correlation.

Output Function Summary: Summarizes the function's functionality with several phrases instead of sentences, focuses on covering the function's control flow information, and highlights the protocol function points implemented by the function. Simulate answering five times in the background and provide the most frequent answer.

Retrieve document sections: giving matches for document sections(FunctionMatchRFCResult) that the code may related to. NOTE if the code is only business related(i.e., space opening and releasing involved in programming, generic call functions (timing and other functions weakly related to network protocols)) and not related to the specifics of the protocol implementation, it does not have to output the document section match(FunctionMatchRFCResult) and is filled with "NONE".

Retrieve document sections Thinking Chain: The function code is matched with the RFC document section, and the thinking chain is provided to help you solve the problem better:
	1. Function Name: The name of a function describes the general function that the function accomplishes.
	2. Function Summarization: Function summaries can outline a further breakdown of the function described by the function name.
	3. Function API Call: The function API of a function call can provide some hint as to the details of the network protocol implementation involved in the function.
	4. Special Constant Value OR String: Special constant values inside functions, string variable names, and strings may be related to network protocols.
	5. Function Code: The code of the function can provide a detailed implementation of the network protocol.
Generate Function Information Collection with JSON Format:

{
	"FunctionIndex": "(FILL WITH "File count" with less than four bits are indexed with zeros to make up the four bits.)",
	"FunctionName": "(Full Function Code Name)",
	"FunctionSummarization": [
		"(Function Summary Phrase1)",
		"(Function Summary Phrase2)",
		"(...)"
	],
	"FunctionMatchRFCResult": [
		"(RFCXXXX-SectionX.X.X.X-Section Title 1)",
		"(RFCXXXX-SectionX.X.X.X-Section Title 2)",
		"(...)",
	],
}

ATTENTION: Remember YOU MUST ONLY output the Function Information Collection result.
