Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 1384
// Total lines: 585

//----- (000000018006DBE0) ----------------------------------------------------
__int64 __fastcall CTls13ClientContext::ProcessHandshake(
        CTls13ClientContext *this,
        unsigned __int8 *a2,
        unsigned int a3,
        struct CSessionCacheClientItem *a4)
{
  unsigned __int8 *v5; // r12
  unsigned int v6; // r13d
  __int64 v7; // r9
  unsigned int updated; // ebx
  unsigned int v9; // eax
  __int64 *v10; // rax
  __int64 v11; // rcx
  unsigned int v12; // eax
  int v13; // r8d
  int v14; // edx
  __int64 v15; // rdx
  __int64 v16; // rcx
  CCipherMill *v17; // rcx
  __int64 v18; // rdx
  int v19; // r15d
  __int64 v21; // rcx
  char v22; // bl
  __int64 v23; // rax
  __int64 v24; // rax
  const unsigned __int16 *v25; // r12
  struct CSessionCacheManager *v26; // rdx
  __int64 v27; // rcx
  struct CSessionCacheClientItem *v28; // r13
  __int64 v29; // rcx
  __int64 **v30; // r12
  __int64 *v31; // rax
  unsigned int v32; // ecx
  __int64 v33; // rdx
  _QWORD *v34; // r13
  unsigned int v35; // eax
  __int64 v36; // rcx
  char v37; // dl
  __int64 v38; // rcx
  __int64 v39; // rax
  __int64 *v40; // rax
  __int64 v41; // rdx
  __int64 *v43; // rax
  __int64 v44; // rdx
  _QWORD *v45; // rax
  __int64 v46; // rcx
  const char *v47; // r9
  __int64 *v48; // rax
  __int64 v49; // rdx
  _QWORD *v50; // r15
  unsigned int v51; // eax
  __int64 v52; // rcx
  CCipherMill *v53; // rcx
  CCipherMill *v54; // rcx
  unsigned __int8 v55; // r9
  int v56; // edx
  unsigned __int8 v57; // bl
  unsigned __int16 v58; // ax
  int v59; // ecx
  __int64 v60; // r10
  unsigned int v61; // edx
  unsigned int v62; // eax
  unsigned int v64; // [rsp+A0h] [rbp+50h] BYREF
  struct CSessionCacheClientItem *v65; // [rsp+A8h] [rbp+58h] BYREF

  v65 = a4;
  v64 = a3;
  *(_DWORD *)a4 = 0;
  *((_BYTE *)this + 1650) = 0;
  if ( !a3 || !a2 )
    return 87i64;
  v5 = a2 + 4;
  v6 = a3 - 4;
  v7 = *a2 << 8;
  updated = 0;
  v9 = v7 | *((unsigned __int8 *)this + 68);
  if ( v9 > 0xD35 )
  {
    if ( v9 != 3406 )
    {
      if ( v9 == 3407 )
      {
        v53 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control )
        {
          if ( (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
          {
            WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 31i64, &WPP_d144303c37633bde7ff6f9c18fccf166_Traceguids);
            v53 = WPP_GLOBAL_Control;
          }
          if ( v53 != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)v53 + 28) & 4) != 0 )
            WPP_SF_(*((_QWORD *)v53 + 2), 32i64, &WPP_d144303c37633bde7ff6f9c18fccf166_Traceguids);
        }
        return updated;
      }
      if ( v9 == 3881 )
      {
        if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
          WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 37i64, &WPP_d144303c37633bde7ff6f9c18fccf166_Traceguids);
        updated = CTls13Handshake<CTls13ServerContext,CTls13ExtServer>::ParseCertificateVerify(
                    (__int64)this + 1656,
                    (__int64)v5,
                    v6);
        if ( !updated )
          *((_DWORD *)this + 17) = 54;
        return updated;
      }
      if ( v9 <= 0x1435 )
      {
LABEL_151:
        *((_WORD *)this + 48) = 2562;
        *((_DWORD *)this + 17) = 96;
        if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) != 0 )
          WPP_SF_DD(
            *((_QWORD *)WPP_GLOBAL_Control + 2),
            0x2Au,
            (__int64)&WPP_d144303c37633bde7ff6f9c18fccf166_Traceguids,
            v7,
            96);
        return (unsigned int)-2146893018;
      }
      if ( v9 > 0x1437 )
      {
        if ( v9 != 6148 && v9 - 6222 > 1 )
          goto LABEL_151;
        if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
          WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 40i64, &WPP_d144303c37633bde7ff6f9c18fccf166_Traceguids);
        updated = CTls13Handshake<CTls13ServerContext,CTls13ExtServer>::ParseKeyUpdate((__int64)this + 1656, v5, v6);
        if ( updated )
          return updated;
        if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
          WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 41i64, &WPP_d144303c37633bde7ff6f9c18fccf166_Traceguids);
        v45 = (_QWORD *)*((_QWORD *)this + 1);
        v46 = v45 ? *v45 : 0i64;
        updated = UpdateTrafficSecretAndDeriveNewKey(
                    v46,
                    (unsigned __int64 *)this + 182,
                    (unsigned __int64 *)this + 18,
                    (unsigned __int64 *)this + 22);
        if ( updated )
          return updated;
        goto LABEL_43;
      }
      if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
      {
        v47 = "full";
        if ( *((_DWORD *)this + 17) != 54 )
          v47 = "resumption";
        WPP_SF_s(
          *((_QWORD *)WPP_GLOBAL_Control + 2),
          0x26u,
          (__int64)&WPP_d144303c37633bde7ff6f9c18fccf166_Traceguids,
          v47);
      }
      updated = CTls13Handshake<CTls13ClientContext,CTls13ExtClient>::ParseFinished((__int64)this + 1656, v5, v6);
      if ( updated )
        return updated;
      updated = (*(__int64 (__fastcall **)(CTls13ClientContext *, unsigned __int8 *, _QWORD, _QWORD))(*(_QWORD *)this + 504i64))(
                  this,
                  a2,
                  v64,
                  0i64);
      if ( updated )
        return updated;
      v64 = 903;
      *(_DWORD *)v65 = 1;
      v48 = (__int64 *)*((_QWORD *)this + 1);
      if ( v48 )
        v49 = *v48;
      else
        v49 = 0i64;
      v50 = (_QWORD *)((char *)this + 160);
      v51 = CTls13Context::GenerateApplicationWriteKeys(
              (CTls13ClientContext *)((char *)this + 1368),
              v49,
              *((_QWORD *)this + 74),
              (unsigned __int64 *)this + 21,
              (unsigned __int64 *)this + 20,
              (enum eSslErrorState *)&v64);
      updated = v51;
      if ( !v51 )
      {
        *((_WORD *)this + 16) |= 0xAu;
        v52 = *((_QWORD *)this + 18);
        if ( v52 )
          SslFreeObject(v52, 0i64);
        *((_QWORD *)this + 18) = *v50;
        *v50 = 0i64;
        if ( !*((_BYTE *)this + 233) )
          *((_QWORD *)this + 22) = 0i64;
        if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
          WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 60i64, &WPP_906ebfdb0b6e356d5c7c2dbe304d0682_Traceguids);
        goto LABEL_196;
      }
      v13 = v51;
LABEL_82:
      v14 = v64;
      goto LABEL_105;
    }
  }
  else if ( v9 != 3381 )
  {
    if ( v9 != 552 && v9 != 583 )
    {
      if ( v9 != 1028 )
      {
        if ( v9 <= 0x44D )
          goto LABEL_151;
        if ( v9 > 0x44F )
        {
          if ( v9 == 2118 )
          {
            if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control
              && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
            {
              WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 30i64, &WPP_d144303c37633bde7ff6f9c18fccf166_Traceguids);
            }
            updated = CTls13ClientHandshake::ParseEncryptedExtensionsMsg(
                        (CTls13ClientContext *)((char *)this + 1656),
                        v5,
                        v6,
                        v7);
            if ( !updated )
              *((_DWORD *)this + 17) = ~(unsigned __int8)((unsigned __int64)*((unsigned int *)this + 34) >> 14) & 2 | 0x35;
            return updated;
          }
          if ( v9 == 2860 || v9 == 2869 )
          {
            if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control
              && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
            {
              WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 36i64, &WPP_d144303c37633bde7ff6f9c18fccf166_Traceguids);
            }
            updated = CTls13Handshake<CTls13ClientContext,CTls13ExtClient>::ParseCertificateMsg(
                        (__int64)this + 1656,
                        v5,
                        v6);
            if ( !updated )
            {
              if ( (*((_DWORD *)this + 34) & 0x20000000) == 0
                || (RtlAcquireResourceExclusive((PRTL_RESOURCE)(*((_QWORD *)this + 165) + 72i64), 1u),
                    updated = CSessionCacheClientItem::UpdateRemoteEndpointBindings(*((CSessionCacheClientItem **)this
                                                                                    + 165)),
                    RtlReleaseResource((PRTL_RESOURCE)(*((_QWORD *)this + 165) + 72i64)),
                    !updated) )
              {
                CreateServerCertificateSerialChainProperty(this);
                updated = AutoVerifyServerCertificate(this);
                if ( !updated )
                  *((_DWORD *)this + 17) = 41;
              }
            }
            return updated;
          }
          goto LABEL_151;
        }
      }
      if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
        WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 39i64, &WPP_d144303c37633bde7ff6f9c18fccf166_Traceguids);
      updated = CTls13ClientHandshake::ParseNewSessionTicket((CTls13ClientContext *)((char *)this + 1656), v5, v6);
      if ( updated )
        return updated;
      if ( *((_BYTE *)this + 1850) )
      {
        if ( !*((_QWORD *)this + 11) )
          return 1359;
        v10 = (__int64 *)*((_QWORD *)this + 1);
        v65 = 0i64;
        if ( v10 )
          v11 = *v10;
        else
          v11 = 0i64;
        v12 = SslExpandResumptionMasterKey(v11, *((_QWORD *)this + 180), *((_QWORD *)this + 74), &v65, 0i64, 0);
        updated = v12;
        if ( v12 )
        {
          v13 = v12;
          v14 = 613;
LABEL_105:
          CSslContext::SetError((__int64)this, v14, v13);
          return updated;
        }
        RtlAcquireResourceExclusive((PRTL_RESOURCE)(*((_QWORD *)this + 11) + 72i64), 1u);
        v15 = *((_QWORD *)this + 11);
        v16 = *(_QWORD *)(v15 + 16);
        if ( v16 )
        {
          SslFreeObject(v16, 0i64);
          v15 = *((_QWORD *)this + 11);
        }
        *(_QWORD *)(v15 + 16) = v65;
        RtlReleaseResource((PRTL_RESOURCE)(*((_QWORD *)this + 11) + 72i64));
        if ( (*((_DWORD *)this + 34) & 0x8000i64) != 0 )
          CSessionCacheManager::FinishCacheAddItem(CSessionCacheManager::m_pSessionCacheManager, this);
        *((_BYTE *)this + 1850) = 0;
      }
LABEL_43:
      if ( *((_DWORD *)this + 17) != 79 )
        *((_DWORD *)this + 17) = 4;
      return updated;
    }
    if ( *((_DWORD *)this + 17) == 40 )
    {
      v17 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CCipherMill *)&WPP_GLOBAL_Control || (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) == 0 )
        goto LABEL_53;
      v18 = 27i64;
    }
    else
    {
      v17 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CCipherMill *)&WPP_GLOBAL_Control || (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) == 0 )
        goto LABEL_53;
      v18 = 28i64;
    }
    WPP_SF_(*((_QWORD *)v17 + 2), v18, &WPP_d144303c37633bde7ff6f9c18fccf166_Traceguids);
LABEL_53:
    *((_QWORD *)this + 17) |= 0x8000ui64;
    v19 = *((_DWORD *)this + 17);
    updated = CTls13ClientHandshake::ParseServerHello((CTls13ClientContext *)((char *)this + 1656), v5, v6);
    if ( updated )
    {
      *((_DWORD *)this + 17) = v19;
      return updated;
    }
    if ( (*((_DWORD *)this + 16) & 0x2000) == 0 )
    {
      *((_QWORD *)this + 17) &= ~0x8000ui64;
      *((_DWORD *)this + 17) = v19;
      return (unsigned int)CTls13ClientContext::DowngradeClientToSsl3Tls(this);
    }
    if ( *((_DWORD *)this + 17) == 70 )
    {
      updated = (*(__int64 (__fastcall **)(CTls13ClientContext *, unsigned __int8 *, _QWORD, _QWORD))(*(_QWORD *)this + 504i64))(
                  this,
                  a2,
                  v64,
                  0i64);
      if ( updated )
        return updated;
      *(_DWORD *)v65 = 1;
      if ( (*((_DWORD *)this + 34) & 0x8000i64) != 0 )
      {
        v24 = *((_QWORD *)this + 165);
        v22 = 0;
        LOBYTE(v64) = 0;
        if ( v24 && *(_DWORD *)(v24 + 432) )
        {
          v25 = *(const unsigned __int16 **)(v24 + 368);
          v65 = 0i64;
          CSessionCacheManager::AcquireCacheTableLock(v21, v25, 0i64);
          RtlAcquireResourceExclusive((PRTL_RESOURCE)(*((_QWORD *)this + 165) + 72i64), 1u);
          v26 = CSessionCacheManager::m_pSessionCacheManager;
          *(_BYTE *)(*((_QWORD *)this + 165) + 236i64) = 0;
          updated = CSessionCacheClientItem::CloneCacheElement(*((CSessionCacheClientItem **)this + 165), v26, &v65);
          RtlReleaseResource((PRTL_RESOURCE)(*((_QWORD *)this + 165) + 72i64));
          if ( updated )
          {
            CSessionCacheManager::ReleaseCacheTableLock(v27, v25, 0i64);
            return updated;
          }
          v28 = v65;
          if ( !v65 )
            return (unsigned int)-2146893052;
          RtlAcquireResourceExclusive((PRTL_RESOURCE)((char *)v65 + 72), 1u);
          *((_QWORD *)this + 165) = v28;
          *((_QWORD *)this + 11) = v28;
          RtlReleaseResource((PRTL_RESOURCE)((char *)v28 + 72));
          CSessionCacheManager::ReleaseCacheTableLock(v29, v25, 0i64);
          v22 = v64;
        }
      }
      else
      {
        v22 = 1;
        if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
          WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 29i64, &WPP_d144303c37633bde7ff6f9c18fccf166_Traceguids);
        v23 = *((_QWORD *)this + 15);
        if ( v23 && CSchannelTelemetryContext::m_bTelemetryIsGloballyInitialized )
        {
          *(_WORD *)(v23 + 64) |= 4u;
          *(_DWORD *)(v23 + 24) = 1;
        }
      }
      v30 = (__int64 **)((char *)this + 8);
      v64 = 100;
      if ( (*((_BYTE *)this + 32) & 1) != 0 && (v31 = *v30) != 0i64 )
      {
        v32 = *((_DWORD *)v31 + 7);
      }
      else
      {
        v31 = *v30;
        v32 = 0;
      }
      if ( v31 )
        v33 = *v31;
      else
        v33 = 0i64;
      v34 = (_QWORD *)((char *)this + 160);
      v35 = CTls13Context::GenerateHandshakeWriteKeys(
              (CTls13ClientContext *)((char *)this + 1368),
              v33,
              *((_QWORD *)this + 14),
              *((_QWORD *)this + 74),
              *((_WORD *)this + 17),
              v32,
              v22,
              (unsigned __int64 *)this + 21,
              (unsigned __int64 *)this + 20,
              (enum eSslErrorState *)&v64);
      updated = v35;
      if ( v35 )
      {
        v13 = v35;
        goto LABEL_82;
      }
      *((_WORD *)this + 16) |= 0xAu;
      v36 = *((_QWORD *)this + 18);
      if ( v36 )
        SslFreeObject(v36, 0i64);
      v37 = *((_BYTE *)this + 233);
      *((_QWORD *)this + 18) = *v34;
      *v34 = 0i64;
      if ( !v37 )
        *((_QWORD *)this + 22) = 0i64;
      if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
      {
        WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 60i64, &WPP_906ebfdb0b6e356d5c7c2dbe304d0682_Traceguids);
        v37 = *((_BYTE *)this + 233);
      }
      *((_WORD *)this + 16) |= 0xCu;
      if ( !v37 )
      {
        v38 = *((_QWORD *)this + 19);
        v37 = 0;
        if ( v38 )
        {
          SslFreeObject(v38, 0i64);
          v37 = *((_BYTE *)this + 233);
        }
      }
      *((_QWORD *)this + 19) = *((_QWORD *)this + 21);
      *((_QWORD *)this + 21) = 0i64;
      if ( !v37 )
        *((_QWORD *)this + 23) = 0i64;
      if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
        WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 59i64, &WPP_906ebfdb0b6e356d5c7c2dbe304d0682_Traceguids);
      v39 = *(_QWORD *)this;
      updated = 0;
      *((_BYTE *)this + 1584) = 2;
      if ( !(*(unsigned __int8 (__fastcall **)(CTls13ClientContext *))(v39 + 384))(this) )
      {
        v40 = *v30;
        if ( *v30 )
          v41 = *v40;
        else
          v41 = 0i64;
        updated = CTls13Context::PopulateSecTrafficSecret((__int64)this + 1368, v41, 1, 2u, (__int64)v40, 0, 0);
        if ( updated )
        {
          v14 = 610;
LABEL_104:
          v13 = updated;
          goto LABEL_105;
        }
        v43 = *v30;
        if ( *v30 )
          v44 = *v43;
        else
          v44 = 0i64;
        updated = CTls13Context::PopulateSecTrafficSecret((__int64)this + 1368, v44, 0, 2u, (__int64)v43, 0, 0);
        if ( updated )
        {
          v14 = 609;
          goto LABEL_104;
        }
      }
    }
    *((_BYTE *)this + 1315) = 0;
    return updated;
  }
  v54 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
  {
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 33i64, &WPP_d144303c37633bde7ff6f9c18fccf166_Traceguids);
    v54 = WPP_GLOBAL_Control;
  }
  if ( *(_DWORD *)(*((_QWORD *)this + 1) + 48i64) == 4 )
  {
    if ( v54 != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)v54 + 28) & 1) != 0 )
      WPP_SF_(*((_QWORD *)v54 + 2), 34i64, &WPP_d144303c37633bde7ff6f9c18fccf166_Traceguids);
    v55 = 10;
    updated = -2146893018;
    v56 = 400;
    goto LABEL_189;
  }
  updated = CTls13ClientHandshake::ParseCertificateRequest((CTls13ClientContext *)((char *)this + 1656), v5, v6);
  if ( !updated )
  {
    *((_WORD *)this + 673) = 0;
    v57 = 0;
    while ( 1 )
    {
      v58 = *((_WORD *)this + 673);
      if ( v58 >= 4u )
      {
LABEL_184:
        if ( !v58 )
        {
          if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control
            && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
          {
            WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 35i64, &WPP_d144303c37633bde7ff6f9c18fccf166_Traceguids);
          }
          v55 = 40;
          updated = -2146893007;
          v56 = 402;
LABEL_189:
          CSslContext::SetErrorAndFatalAlert((__int64)this, v56, updated, v55);
          return updated;
        }
        v62 = CSsl3TlsClientContext::CheckForClientCred(this);
        updated = v62;
        if ( v62 == -2146893024 )
        {
          *((_BYTE *)this + 1313) = 1;
          goto LABEL_193;
        }
        if ( v62 == 590624 )
        {
LABEL_193:
          updated = 0;
        }
        else if ( v62 )
        {
          return updated;
        }
        *((_BYTE *)this + 1315) = 1;
        if ( !*((_BYTE *)this + 1601) )
        {
          *((_DWORD *)this + 17) = 44;
          return updated;
        }
LABEL_196:
        *((_DWORD *)this + 17) = 101;
        return CTls13ClientContext::DetermineClientCredentialStatus(this);
      }
      v59 = g_Ssl3CertTypes[v57];
      if ( v59 != 2 )
      {
        v60 = *((_QWORD *)this + 10);
        v61 = *(_DWORD *)(v60 + 196);
        if ( !v61 )
          goto LABEL_181;
        if ( !IsSignatureTypeBlacklisted(*(_QWORD *)(v60 + 200), v61, v59, 0i64) )
          break;
      }
LABEL_182:
      if ( ++v57 >= 3u )
      {
        v58 = *((_WORD *)this + 673);
        goto LABEL_184;
      }
    }
    v58 = *((_WORD *)this + 673);
    v59 = g_Ssl3CertTypes[v57];
LABEL_181:
    *((_DWORD *)this + v58 + 337) = v59;
    ++*((_WORD *)this + 673);
    goto LABEL_182;
  }
  return updated;
}
// 18006DDB3: variable 'v7' is possibly undefined
// 18006E0A3: variable 'v21' is possibly undefined
// 18006E10A: variable 'v27' is possibly undefined
// 18006E15B: variable 'v29' is possibly undefined
// 180041CB0: using guessed type __int64 __fastcall WPP_SF_(_QWORD, _QWORD, _QWORD);
// 180080FD8: using guessed type __int64 (__fastcall *_guard_xfg_dispatch_icall_fptr)(_QWORD, _QWORD, _QWORD);
// 1800858E8: using guessed type _DWORD g_Ssl3CertTypes[4];
// 1800927AC: using guessed type bool CSchannelTelemetryContext::m_bTelemetryIsGloballyInitialized;
// 180098450: using guessed type __int64 __fastcall SslExpandResumptionMasterKey(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD);
// 180098570: using guessed type __int64 __fastcall SslFreeObject(_QWORD, _QWORD);
##############################
Role: Let's assume that you are an advanced reverse engineer and you are reverse engineering a network driver using IDA Pro, and you are also familiar with the RFC documentation. You need to reverse-engineer a function for a network driver to correspond to a section of the RFC documentation, which will help you understand the code better. The driver you're reversing is Schannel.dll, and you've initially determined that the corresponding network protocols are SSL and TLS, and the documents you need to map are RFC8446 and RFC6101. You need to get a function summary of the function you're reversing, and then correspond to the potential RFC sections based on the name of the function and the function summary.

Function Background: The function is reverse engineered from the driver file Schannel.dll on Windows platform. Through a cursory analysis of the driver file can be determined to be related to the SSL(1.3), TLS(3.0) protocol, that is, with RFC8446, RFC6101 strong correlation.

Output Function Summary: Summarizes the function's functionality with several phrases instead of sentences, focuses on covering the function's control flow information, and highlights the protocol function points implemented by the function. Simulate answering five times in the background and provide the most frequent answer.

Retrieve document sections: giving matches for document sections(FunctionMatchRFCResult) that the code may related to. NOTE if the code is only business related(i.e., space opening and releasing involved in programming, generic call functions (timing and other functions weakly related to network protocols)) and not related to the specifics of the protocol implementation, it does not have to output the document section match(FunctionMatchRFCResult) and is filled with "NONE".

Retrieve document sections Thinking Chain: The function code is matched with the RFC document section, and the thinking chain is provided to help you solve the problem better:
	1. Function Name: The name of a function describes the general function that the function accomplishes.
	2. Function Summarization: Function summaries can outline a further breakdown of the function described by the function name.
	3. Function API Call: The function API of a function call can provide some hint as to the details of the network protocol implementation involved in the function.
	4. Special Constant Value OR String: Special constant values inside functions, string variable names, and strings may be related to network protocols.
	5. Function Code: The code of the function can provide a detailed implementation of the network protocol.
Generate Function Information Collection with JSON Format:

{
	"FunctionIndex": "(FILL WITH "File count" with less than four bits are indexed with zeros to make up the four bits.)",
	"FunctionName": "(Full Function Code Name)",
	"FunctionSummarization": [
		"(Function Summary Phrase1)",
		"(Function Summary Phrase2)",
		"(...)"
	],
	"FunctionMatchRFCResult": [
		"(RFCXXXX-SectionX.X.X.X-Section Title 1)",
		"(RFCXXXX-SectionX.X.X.X-Section Title 2)",
		"(...)",
	],
}

ATTENTION: Remember YOU MUST ONLY output the Function Information Collection result.
