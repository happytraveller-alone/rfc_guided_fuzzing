Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 1334
// Total lines: 273

//----- (0000000180068A7C) ----------------------------------------------------
__int64 __fastcall CTls13Handshake<CTls13ClientContext,CTls13ExtClient>::ParseCertificateMsg(
        __int64 a1,
        unsigned __int8 *a2,
        int a3)
{
  __int64 v6; // r15
  void *v8; // rcx
  void *v9; // rcx
  const CERT_CONTEXT *v10; // rcx
  __int64 v11; // r12
  unsigned int v12; // esi
  int v13; // r8d
  unsigned __int8 v14; // r9
  int v15; // edx
  __int64 v16; // rcx
  unsigned __int8 *v17; // r14
  unsigned int v18; // ebp
  __int64 v19; // rax
  const void *v20; // rdx
  unsigned int v21; // ebp
  int v22; // ecx
  unsigned __int8 *v23; // r14
  __int64 v24; // rax
  int v25; // edx
  unsigned int v26; // r12d
  unsigned __int8 *v27; // rbx
  int v28; // r9d
  DWORD v29; // r12d
  DWORD v30; // r13d
  const BYTE *v31; // rbx
  unsigned int v32; // r12d
  const BYTE *v33; // rbx
  __int16 v34; // ax
  unsigned int v35; // r12d
  __int16 v36; // r13
  unsigned __int8 *v37; // rbx
  unsigned __int16 v38; // r13
  unsigned int v39; // eax
  __int64 v40; // r10
  unsigned int v41; // r9d
  __int64 v42; // r10
  _DWORD *v43; // rax
  _DWORD *v44; // r12
  unsigned int *i; // r13
  unsigned int v46; // edi
  char *v47; // r14
  char *v48; // r13
  unsigned __int16 *v49; // r14
  __int64 v50; // rax
  int v51; // [rsp+30h] [rbp-78h]
  int v52; // [rsp+34h] [rbp-74h]
  __int16 v53; // [rsp+40h] [rbp-68h] BYREF
  __int128 v54; // [rsp+42h] [rbp-66h]
  __int128 v55; // [rsp+52h] [rbp-56h]
  __int16 v56; // [rsp+62h] [rbp-46h]

  if ( a2 && a3 )
  {
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 88i64);
    if ( !v6 )
      return 1359i64;
    RtlAcquireResourceExclusive((PRTL_RESOURCE)(v6 + 72), 1u);
    v8 = *(void **)(v6 + 24);
    if ( v8 )
    {
      SPExternalFree(v8);
      *(_DWORD *)(v6 + 32) = 0;
      *(_QWORD *)(v6 + 24) = 0i64;
    }
    v9 = *(void **)(v6 + 40);
    if ( v9 )
    {
      SPExternalFree(v9);
      *(_QWORD *)(v6 + 40) = 0i64;
    }
    v10 = *(const CERT_CONTEXT **)(v6 + 48);
    if ( v10 )
    {
      CertFreeCertificateContext(v10);
      *(_QWORD *)(v6 + 48) = 0i64;
    }
    v11 = *a2;
    v53 = 0;
    v12 = 0;
    v56 = 0;
    v54 = 0i64;
    v55 = 0i64;
    if ( !a3 )
      goto LABEL_12;
    v17 = a2 + 1;
    v18 = a3 - 1;
    if ( (_BYTE)v11 )
    {
      v16 = *(_QWORD *)(a1 + 8);
      if ( v18 < (unsigned int)v11
        || (*(_DWORD *)(v16 + 64) & 0x40051555) == 0
        || *(_DWORD *)(v16 + 68) != 78
        || (v19 = *(unsigned __int8 *)(v16 + 1600), (_BYTE)v11 != (_BYTE)v19) )
      {
        v13 = -2146893048;
        v14 = 50;
        v12 = -2146893048;
        v15 = 250;
LABEL_14:
        CSslContext::SetErrorAndFatalAlert(v16, v15, v13, v14);
LABEL_55:
        RtlReleaseResource((PRTL_RESOURCE)(v6 + 72));
        return v12;
      }
      v20 = *(const void **)(v16 + 1592);
      if ( !v20 )
      {
        v12 = -2146893052;
        goto LABEL_55;
      }
      if ( RtlCompareMemory(v17, v20, *(unsigned __int8 *)(v16 + 1600)) != v19 )
      {
LABEL_12:
        v13 = -2146893048;
        v14 = 50;
        v12 = -2146893048;
        v15 = 250;
LABEL_13:
        v16 = *(_QWORD *)(a1 + 8);
        goto LABEL_14;
      }
      v17 += v11;
      v18 -= v11;
    }
    if ( v18 >= 3 )
    {
      v21 = v18 - 3;
      v22 = v17[2] + (*v17 << 16) + (v17[1] << 8);
      v23 = v17 + 3;
      if ( v21 == v22 )
      {
        if ( v22 )
        {
          v51 = 0;
          v25 = 0;
          v52 = 0;
          v26 = v21;
          v27 = v23;
          v28 = 0;
          if ( v21 )
          {
            while ( 1 )
            {
              if ( v26 < 3 )
                goto LABEL_12;
              v29 = v26 - 3;
              v30 = v27[2] + (*v27 << 16) + (v27[1] << 8);
              v31 = v27 + 3;
              if ( v29 < v30 || (unsigned int)~v28 < (unsigned __int64)v30 + 4 )
                goto LABEL_12;
              v12 = CTls13Handshake<CTls13ClientContext,CTls13ExtClient>::ParseCertData(
                      a1,
                      v31,
                      v30,
                      v25,
                      (CTlsSignatureSuiteList *)&v53,
                      v6);
              if ( v12 )
                goto LABEL_55;
              ++v52;
              v32 = v29 - v30;
              v33 = &v31[v30];
              v51 += v30 + 4;
              if ( v32 < 2 )
                goto LABEL_12;
              v34 = v33[1];
              v35 = v32 - 2;
              v36 = *v33;
              v37 = (unsigned __int8 *)(v33 + 2);
              v38 = v34 | (v36 << 8);
              if ( v35 < v38 )
                break;
              v39 = CTlsExt::ParseTlsExtensions(*(_QWORD *)(a1 + 16), v37, v38, 11);
              v12 = v39;
              if ( v39 )
              {
                v14 = 110;
                v13 = v39;
LABEL_47:
                v15 = 253;
                goto LABEL_13;
              }
              v28 = v51;
              v25 = v52;
              v27 = &v37[v38];
              v26 = v35 - v38;
              if ( !v26 )
                goto LABEL_43;
            }
            v13 = -2146893048;
            v14 = 50;
            v12 = -2146893048;
            goto LABEL_47;
          }
LABEL_43:
          v40 = *(_QWORD *)(a1 + 8);
          if ( v40 == -474 )
          {
            v12 = 1359;
            goto LABEL_55;
          }
          if ( CTlsSignatureSuiteList::IsSupportedSignatureSuiteList(
                 (CTlsSignatureSuiteList *)(v40 + 474),
                 (struct CTlsSignatureSuiteList *)&v53) )
          {
            v43 = SPExternalAlloc(v41);
            v44 = v43;
            if ( v43 )
            {
              for ( i = v43; v21; v21 += -5 - v50 - v46 )
              {
                v46 = v23[2] + (*v23 << 16) + (v23[1] << 8);
                v47 = (char *)(v23 + 3);
                *i = v46;
                v48 = (char *)(i + 1);
                memcpy_0(v48, v47, v46);
                v49 = (unsigned __int16 *)&v47[v46];
                i = (unsigned int *)&v48[v46];
                v50 = _byteswap_ushort(*v49);
                v23 = (unsigned __int8 *)v49 + v50 + 2;
              }
              *(_DWORD *)(v6 + 32) = v51;
              *(_QWORD *)(v6 + 24) = v44;
            }
            else
            {
              v12 = 14;
            }
            goto LABEL_55;
          }
          v13 = -2146893048;
          v14 = 40;
          v12 = -2146893048;
          v15 = 252;
          v16 = v42;
        }
        else
        {
          v24 = *(_QWORD *)(a1 + 8);
          if ( (*(_DWORD *)(v24 + 64) & 0x800A2AAA) == 0 )
          {
            *(_BYTE *)(v24 + 552) = 1;
            if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control
              && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 2) != 0 )
            {
              WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 17i64, WPP_922678f99ae534148d3bb024010f1556_Traceguids);
            }
            v12 = 0;
            goto LABEL_55;
          }
          v13 = -2146893048;
          v14 = 42;
          v12 = -2146893048;
          v15 = 250;
          v16 = *(_QWORD *)(a1 + 8);
        }
        goto LABEL_14;
      }
    }
    goto LABEL_12;
  }
  return 87i64;
}
// 180068DE9: variable 'v42' is possibly undefined
// 180068DF4: variable 'v41' is possibly undefined
// 180041CB0: using guessed type __int64 __fastcall WPP_SF_(_QWORD, _QWORD, _QWORD);
// 180082C10: using guessed type _DWORD WPP_922678f99ae534148d3bb024010f1556_Traceguids[4];
##############################
Role: Let's assume that you are an advanced reverse engineer and you are reverse engineering a network driver using IDA Pro, and you are also familiar with the RFC documentation. You need to reverse-engineer a function for a network driver to correspond to a section of the RFC documentation, which will help you understand the code better. The driver you're reversing is Schannel.dll, and you've initially determined that the corresponding network protocols are SSL and TLS, and the documents you need to map are RFC8446 and RFC6101. You need to get a function summary of the function you're reversing, and then correspond to the potential RFC sections based on the name of the function and the function summary.

Function Background: The function is reverse engineered from the driver file Schannel.dll on Windows platform. Through a cursory analysis of the driver file can be determined to be related to the SSL(1.3), TLS(3.0) protocol, that is, with RFC8446, RFC6101 strong correlation.

Output Function Summary: Summarizes the function's functionality with several phrases instead of sentences, focuses on covering the function's control flow information, and highlights the protocol function points implemented by the function. Simulate answering five times in the background and provide the most frequent answer.

Retrieve document sections: giving matches for document sections(FunctionMatchRFCResult) that the code may related to. NOTE if the code is only business related(i.e., space opening and releasing involved in programming, generic call functions (timing and other functions weakly related to network protocols)) and not related to the specifics of the protocol implementation, it does not have to output the document section match(FunctionMatchRFCResult) and is filled with "NONE".

Retrieve document sections Thinking Chain: The function code is matched with the RFC document section, and the thinking chain is provided to help you solve the problem better:
	1. Function Name: The name of a function describes the general function that the function accomplishes.
	2. Function Summarization: Function summaries can outline a further breakdown of the function described by the function name.
	3. Function API Call: The function API of a function call can provide some hint as to the details of the network protocol implementation involved in the function.
	4. Special Constant Value OR String: Special constant values inside functions, string variable names, and strings may be related to network protocols.
	5. Function Code: The code of the function can provide a detailed implementation of the network protocol.
Generate Function Information Collection with JSON Format:

{
	"FunctionIndex": "(FILL WITH "File count" with less than four bits are indexed with zeros to make up the four bits.)",
	"FunctionName": "(Full Function Code Name)",
	"FunctionSummarization": [
		"(Function Summary Phrase1)",
		"(Function Summary Phrase2)",
		"(...)"
	],
	"FunctionMatchRFCResult": [
		"(RFCXXXX-SectionX.X.X.X-Section Title 1)",
		"(RFCXXXX-SectionX.X.X.X-Section Title 2)",
		"(...)",
	],
}

ATTENTION: Remember YOU MUST ONLY output the Function Information Collection result.
