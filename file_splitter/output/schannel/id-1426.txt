Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 1426
// Total lines: 204

//----- (0000000180071FC4) ----------------------------------------------------
__int64 __fastcall CSsl3TlsClientContext::ParseRsaServerKeyExchange(
        CSsl3TlsClientContext *this,
        unsigned __int8 *a2,
        unsigned int a3,
        NCRYPT_KEY_HANDLE a4,
        unsigned __int64 *a5)
{
  CSsl3TlsClientContext *v7; // rsi
  unsigned __int8 v9; // r9
  int v10; // ecx
  unsigned __int8 *v11; // rax
  unsigned __int8 v12; // dl
  unsigned int v13; // r9d
  unsigned __int8 *v14; // rcx
  unsigned int v15; // ebx
  unsigned int v16; // ebx
  unsigned __int8 *v17; // rdx
  __int64 v18; // rcx
  unsigned int v19; // ebx
  __int64 v20; // r8
  unsigned __int8 *v21; // r15
  int v22; // r12d
  __int64 v23; // rcx
  int v24; // eax
  int v25; // eax
  unsigned int v26; // eax
  __int64 v27; // rcx
  unsigned int v28; // ebx
  DWORD cbSignature; // r14d
  int v30; // eax
  unsigned int v31; // edi
  unsigned __int8 v32; // r9
  int v33; // edx
  int v34; // r14d
  unsigned int *p_pPaddingInfo; // rbx
  DWORD v36; // edi
  unsigned __int64 v37; // rcx
  unsigned __int64 v38; // rax
  void *v39; // rsp
  _DWORD *v40; // rax
  unsigned __int8 *v41; // rdx
  int v42; // eax
  __int64 v43; // [rsp+0h] [rbp-40h] BYREF
  unsigned int v44; // [rsp+40h] [rbp+0h] BYREF
  __int64 pPaddingInfo; // [rsp+48h] [rbp+8h] BYREF
  NCRYPT_KEY_HANDLE hKey; // [rsp+50h] [rbp+10h]
  unsigned __int8 *v47; // [rsp+58h] [rbp+18h]
  NCRYPT_KEY_HANDLE *phKey; // [rsp+60h] [rbp+20h]
  BYTE pbHashValue[40]; // [rsp+68h] [rbp+28h] BYREF

  hKey = a4;
  phKey = a5;
  pPaddingInfo = 0i64;
  v7 = this;
  if ( !a2 )
  {
    *a5 = 0i64;
    return 0i64;
  }
  if ( a3 >= 3 )
  {
    v10 = a2[1] | (*a2 << 8);
    v11 = a2 + 2;
    v12 = a2[2];
    v13 = v10 - 1;
    if ( v12 )
      v13 = v10;
    v14 = v11 + 1;
    if ( v12 )
      v14 = v11;
    v44 = v13;
    v47 = v14;
    v15 = v13 + 3 - (v12 != 0);
    if ( v13 - 64 > 0x40 )
      goto LABEL_51;
    if ( a3 < v15 )
      goto LABEL_51;
    v16 = v15 + 2;
    v17 = &v14[v13];
    if ( a3 < v16 )
      goto LABEL_51;
    v18 = v17[1] | (*v17 << 8);
    v19 = v18 + v16;
    if ( (unsigned int)(v18 - 1) > 3 || a3 < v19 )
      goto LABEL_51;
    v20 = (unsigned int)v18;
    v21 = &v17[v18];
    v22 = 0;
    if ( !(_DWORD)v18 )
      goto LABEL_23;
    v23 = 0i64;
    do
    {
      v24 = v17[v23++ + 2];
      v25 = (v22 << 8) | v24;
      v22 = v25;
      --v20;
    }
    while ( v20 );
    if ( v25 == 1 )
    {
      if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control
        && ((unsigned __int8)v25 & *((_BYTE *)WPP_GLOBAL_Control + 28)) != 0 )
      {
        WPP_SF_(
          *((_QWORD *)WPP_GLOBAL_Control + 2),
          (unsigned int)(v25 + 15),
          &WPP_ef2bc8f963c43ddcdfece7ee9e95f200_Traceguids);
      }
      v26 = 0;
      if ( !g_fIgnoreExponentOfOne )
        return 2148074281i64;
    }
    else
    {
LABEL_23:
      v26 = 8 * v13;
    }
    v27 = *((_QWORD *)v7 + 165);
    if ( v26 < *(_DWORD *)(v27 + 8) )
      *(_DWORD *)(v27 + 8) = v26;
    v28 = v19 + 2;
    if ( a3 < v28 || (cbSignature = v21[3] + (v21[2] << 8), a3 < cbSignature + v28) )
    {
LABEL_51:
      v9 = 47;
      this = v7;
      goto LABEL_52;
    }
    v30 = CSsl3TlsContext::ComputeRsaServerExchangeHashes((UCHAR *)v7, a2, (_DWORD)v21 + 2 - (_DWORD)a2, pbHashValue);
    v31 = v30;
    if ( v30 )
    {
      v32 = 80;
      v33 = 815;
LABEL_30:
      CSslContext::SetErrorAndFatalAlert((__int64)v7, v33, v30, v32);
      return v31;
    }
    v30 = NCryptVerifySignature(hKey, &pPaddingInfo, pbHashValue, 0x24u, v21 + 4, cbSignature, 2u);
    v31 = v30;
    if ( v30 )
    {
      v32 = 51;
      v33 = 816;
      goto LABEL_30;
    }
    v34 = v44;
    p_pPaddingInfo = 0i64;
    v36 = v44 + 20;
    if ( v44 == -20 )
      goto LABEL_41;
    if ( v36 > (unsigned __int64)g_ulMaxStackAllocSize )
      goto LABEL_41;
    v37 = v36 + g_ulAdditionalProbeSize + 8;
    if ( v37 < v36 || !(unsigned int)VerifyStackAvailable(v37) )
      goto LABEL_41;
    v38 = v44 + 28 + 15i64;
    if ( v38 <= v44 + 28 )
      v38 = 0xFFFFFFFFFFFFFF0i64;
    v39 = alloca(v38 & 0xFFFFFFFFFFFFFFF0ui64);
    p_pPaddingInfo = &v44;
    if ( &v43 == (__int64 *)-64i64 || (v44 = 1801679955, (p_pPaddingInfo = (unsigned int *)&pPaddingInfo) == 0i64) )
    {
LABEL_41:
      if ( v36 + 8 >= v36 )
      {
        v40 = (_DWORD *)((__int64 (__fastcall *)(_QWORD))g_pfnAllocate)(v36 + 8);
        if ( !v40 )
          return 14i64;
        *v40 = 1885431112;
        p_pPaddingInfo = v40 + 2;
      }
      if ( !p_pPaddingInfo )
        return 14i64;
    }
    v41 = v47;
    p_pPaddingInfo[3] = 8 * v34;
    *p_pPaddingInfo = 518;
    p_pPaddingInfo[1] = 41984;
    p_pPaddingInfo[2] = 826364754;
    p_pPaddingInfo[4] = v22;
    ReverseMemCopy((unsigned __int8 *)p_pPaddingInfo + 20, v41, v34);
    v42 = NCryptImportKey(hProvider, 0i64, L"CAPIPUBLICBLOB", 0i64, phKey, (PBYTE)p_pPaddingInfo, v36, 0);
    v31 = v42;
    if ( v42 )
      CSslContext::SetErrorAndFatalAlert((__int64)v7, 817, v42, 0x33u);
    if ( *(p_pPaddingInfo - 2) == 1885431112 )
      ((void (__fastcall *)(unsigned int *))g_pfnFree)(p_pPaddingInfo - 2);
    return v31;
  }
  v9 = 50;
LABEL_52:
  CSslContext::SetErrorAndFatalAlert((__int64)this, 811, -2146893048, v9);
  return 2148074248i64;
}
// 180041CB0: using guessed type __int64 __fastcall WPP_SF_(_QWORD, _QWORD, _QWORD);
// 180080FD8: using guessed type __int64 (__fastcall *_guard_xfg_dispatch_icall_fptr)(_QWORD, _QWORD, _QWORD);
// 1800920E0: using guessed type __int64 g_ulMaxStackAllocSize;
// 1800920E8: using guessed type __int64 g_ulAdditionalProbeSize;
// 1800920F0: using guessed type __int64 g_pfnAllocate;
// 1800920F8: using guessed type __int64 g_pfnFree;
// 180092F1C: using guessed type int g_fIgnoreExponentOfOne;
##############################
Role: Let's assume that you are an advanced reverse engineer and you are reverse engineering a network driver using IDA Pro, and you are also familiar with the RFC documentation. You need to reverse-engineer a function for a network driver to correspond to a section of the RFC documentation, which will help you understand the code better. The driver you're reversing is Schannel.dll, and you've initially determined that the corresponding network protocols are SSL and TLS, and the documents you need to map are RFC8446 and RFC6101. You need to get a function summary of the function you're reversing, and then correspond to the potential RFC sections based on the name of the function and the function summary.

Function Background: The function is reverse engineered from the driver file Schannel.dll on Windows platform. Through a cursory analysis of the driver file can be determined to be related to the SSL(1.3), TLS(3.0) protocol, that is, with RFC8446, RFC6101 strong correlation.

Output Function Summary: Summarizes the function's functionality with several phrases instead of sentences, focuses on covering the function's control flow information, and highlights the protocol function points implemented by the function. Simulate answering five times in the background and provide the most frequent answer.

Retrieve document sections: giving matches for document sections(FunctionMatchRFCResult) that the code may related to. NOTE if the code is only business related(i.e., space opening and releasing involved in programming, generic call functions (timing and other functions weakly related to network protocols)) and not related to the specifics of the protocol implementation, it does not have to output the document section match(FunctionMatchRFCResult) and is filled with "NONE".

Retrieve document sections Thinking Chain: The function code is matched with the RFC document section, and the thinking chain is provided to help you solve the problem better:
	1. Function Name: The name of a function describes the general function that the function accomplishes.
	2. Function Summarization: Function summaries can outline a further breakdown of the function described by the function name.
	3. Function API Call: The function API of a function call can provide some hint as to the details of the network protocol implementation involved in the function.
	4. Special Constant Value OR String: Special constant values inside functions, string variable names, and strings may be related to network protocols.
	5. Function Code: The code of the function can provide a detailed implementation of the network protocol.
Generate Function Information Collection with JSON Format:

{
	"FunctionIndex": "(FILL WITH "File count" with less than four bits are indexed with zeros to make up the four bits.)",
	"FunctionName": "(Full Function Code Name)",
	"FunctionSummarization": [
		"(Function Summary Phrase1)",
		"(Function Summary Phrase2)",
		"(...)"
	],
	"FunctionMatchRFCResult": [
		"(RFCXXXX-SectionX.X.X.X-Section Title 1)",
		"(RFCXXXX-SectionX.X.X.X-Section Title 2)",
		"(...)",
	],
}

ATTENTION: Remember YOU MUST ONLY output the Function Information Collection result.
