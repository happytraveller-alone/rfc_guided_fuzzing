Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 1994
// Total lines: 456

//----- (00000001400F4844) ----------------------------------------------------
__int64 __fastcall DnsOls_ReadZoneSkdsFromDirectory(__int64 a1, int *a2, __int64 *a3)
{
  PLDAP v3; // rbx
  __int64 v5; // r13
  struct berval **v6; // r14
  int v7; // esi
  ULONG v8; // edi
  __int64 *i; // rax
  struct berval **values_lenW; // rax
  struct berval **j; // r12
  struct berval *v12; // rcx
  unsigned __int64 bv_len; // rsi
  PCHAR bv_val; // r14
  int v15; // ebx
  unsigned __int64 v16; // rsi
  _DWORD *Skd; // rax
  __int64 v18; // rbx
  __int128 v19; // xmm0
  unsigned __int64 v20; // rcx
  unsigned __int8 *v21; // rdx
  int v22; // eax
  unsigned __int64 v23; // rcx
  _BYTE *v24; // rdx
  char v25; // al
  unsigned __int64 v26; // rcx
  int *v27; // rdx
  int v28; // eax
  unsigned __int64 v29; // rcx
  int *v30; // rdx
  int v31; // eax
  unsigned __int64 v32; // rcx
  int *v33; // rdx
  int v34; // eax
  unsigned __int64 v35; // rcx
  int *v36; // rdx
  int v37; // eax
  unsigned __int64 v38; // rcx
  int *v39; // rdx
  int v40; // eax
  unsigned __int64 v41; // rcx
  int *v42; // rdx
  int v43; // eax
  unsigned __int64 v44; // rcx
  int *v45; // rdx
  int v46; // eax
  unsigned __int64 v47; // rcx
  _DWORD *v48; // rdx
  int v49; // eax
  unsigned __int64 v50; // rcx
  _QWORD *v51; // rdx
  unsigned __int64 v52; // rcx
  __int64 v53; // rax
  unsigned __int64 v54; // rcx
  int *v55; // rdx
  int v56; // eax
  unsigned __int64 v57; // rcx
  int *v58; // rdx
  int v59; // eax
  unsigned __int64 v60; // rcx
  int *v61; // rdx
  int v62; // eax
  unsigned __int64 v63; // rcx
  int *v64; // rdx
  int v65; // eax
  unsigned __int64 v66; // rcx
  _DWORD *v67; // rdx
  int v68; // eax
  unsigned __int64 v69; // rcx
  _QWORD *v70; // rdx
  __int64 v71; // rax
  unsigned __int64 v72; // rcx
  unsigned int *v73; // rdx
  __int64 v74; // r8
  unsigned __int64 v75; // rcx
  unsigned int *v76; // rdx
  unsigned int v77; // eax
  int v78; // esi
  _DWORD *v79; // r14
  int v80; // eax
  _BYTE *RecordFromDsRecordNoZone; // rax
  __int64 v82; // rax
  const char *v83; // rbx
  char v84; // al
  __int64 v85; // rdx
  __int64 v86; // r8
  int v88; // [rsp+60h] [rbp-A0h] BYREF
  int v89; // [rsp+64h] [rbp-9Ch] BYREF
  unsigned __int64 v90; // [rsp+68h] [rbp-98h] BYREF
  unsigned __int8 *v91; // [rsp+70h] [rbp-90h] BYREF
  __int64 *v92; // [rsp+78h] [rbp-88h]
  __int64 *v93; // [rsp+80h] [rbp-80h]
  PLDAPMessage Message; // [rsp+88h] [rbp-78h] BYREF
  struct berval **v95; // [rsp+90h] [rbp-70h]
  __int64 *v96; // [rsp+98h] [rbp-68h]
  int *v97; // [rsp+A0h] [rbp-60h]
  PWSTR attrs[3]; // [rsp+A8h] [rbp-58h] BYREF
  char v99[1136]; // [rsp+C0h] [rbp-40h] BYREF
  __int64 v100; // [rsp+530h] [rbp+430h]

  v3 = pServerLdap;
  v96 = a3;
  v97 = a2;
  v92 = 0i64;
  v5 = 0i64;
  v93 = 0i64;
  attrs[0] = off_1401B6CE8;
  v6 = 0i64;
  attrs[1] = 0i64;
  v7 = 0;
  Message = 0i64;
  v88 = 0;
  v89 = 0;
  memset_0(v99, 0, 0x678ui64);
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_s(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x14u,
      (__int64)&WPP_b7aea06a65693a31b0dd129af848d3b8_Traceguids,
      *(const char **)(a1 + 16));
  }
  if ( !a1 )
    goto LABEL_6;
  if ( *(_DWORD *)(a1 + 372) == 1 && (*(_BYTE *)(a1 + 388) & 1) != 0 )
  {
    if ( !*(_QWORD *)(a1 + 840) )
    {
LABEL_6:
      v8 = 87;
      goto LABEL_93;
    }
    if ( v3 )
    {
      for ( i = *(__int64 **)(a1 + 1136); i; i = (__int64 *)*i )
        *((_DWORD *)i + 23) &= ~0x8000000u;
      v8 = ldap_search_ext_sW(
             v3,
             *(const PWSTR *)(a1 + 840),
             0,
             g_szWildCardFilter,
             attrs,
             0,
             0i64,
             0i64,
             &g_LdapTimeout,
             0,
             &Message);
      if ( v8 )
      {
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
        {
          WPP_SF_DS(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x15u,
            (__int64)&WPP_b7aea06a65693a31b0dd129af848d3b8_Traceguids,
            v8,
            *(_QWORD *)(a1 + 840));
        }
        v8 = Ds_ErrorHandler(v8, *(_QWORD *)(a1 + 840), v3, 1);
      }
      else
      {
        values_lenW = ldap_get_values_lenW(v3, Message, off_1401B6CE8);
        v95 = values_lenW;
        v6 = values_lenW;
        if ( (!values_lenW || !*values_lenW)
          && WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          WPP_SF_S(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x16u,
            (__int64)&WPP_b7aea06a65693a31b0dd129af848d3b8_Traceguids,
            *(const unsigned __int16 **)(a1 + 840));
        }
        if ( !v6 )
          goto LABEL_87;
        for ( j = v6; ; ++j )
        {
          v12 = *j;
          if ( !*j )
            break;
          bv_len = v12->bv_len;
          bv_val = v12->bv_val;
          if ( bv_len < 4 )
            goto LABEL_84;
          v15 = *(_DWORD *)bv_val;
          v16 = bv_len - 4;
          if ( (unsigned int)(*(_DWORD *)bv_val - 241) <= 1 )
          {
            RecordFromDsRecordNoZone = Ds_CreateRecordFromDsRecordNoZone((__int64)(bv_val + 4));
            if ( RecordFromDsRecordNoZone )
            {
              if ( v15 == 241 )
                v92 = RR_ListInsertInOrder(0i64, v92, (__int64)RecordFromDsRecordNoZone, 0);
              else
                v93 = RR_ListInsertInOrder(0i64, v93, (__int64)RecordFromDsRecordNoZone, 0);
            }
          }
          else
          {
            if ( v15 != 1 )
            {
              if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
                && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
              {
                WPP_SF_D(
                  *((_QWORD *)WPP_GLOBAL_Control + 7),
                  0x17u,
                  (__int64)&WPP_b7aea06a65693a31b0dd129af848d3b8_Traceguids,
                  v15);
              }
LABEL_84:
              v8 = 13;
              break;
            }
            Skd = Dns_AllocateSkd();
            v18 = (__int64)Skd;
            if ( !Skd )
            {
              v8 = 14;
              break;
            }
            if ( v16 < 0x10 )
              goto LABEL_84;
            v19 = *(_OWORD *)(bv_val + 4);
            v90 = v16 - 16;
            v91 = (unsigned __int8 *)(bv_val + 20);
            *(_OWORD *)(Skd + 2) = v19;
            v8 = copyStringFromBuffer((const CHAR **)&v91, &v90, (unsigned __int16 **)Skd + 3);
            if ( v8 )
              break;
            if ( v90 < 4 )
              goto LABEL_84;
            v20 = v90 - 4;
            v21 = v91 + 4;
            *(_DWORD *)(v18 + 32) = *(_DWORD *)v91;
            if ( v20 < 4 )
              goto LABEL_84;
            v22 = *(_DWORD *)v21;
            v23 = v20 - 4;
            v24 = v21 + 4;
            *(_DWORD *)(v18 + 36) = v22;
            if ( v23 < 4 )
              goto LABEL_84;
            v25 = *v24;
            v26 = v23 - 4;
            v27 = (int *)(v24 + 4);
            *(_BYTE *)(v18 + 40) = v25;
            if ( v26 < 4 )
              goto LABEL_84;
            v28 = *v27;
            v29 = v26 - 4;
            v30 = v27 + 1;
            *(_DWORD *)(v18 + 44) = v28;
            if ( v29 < 4 )
              goto LABEL_84;
            v31 = *v30;
            v32 = v29 - 4;
            v33 = v30 + 1;
            *(_DWORD *)(v18 + 48) = v31;
            if ( v32 < 4 )
              goto LABEL_84;
            v34 = *v33;
            v35 = v32 - 4;
            v36 = v33 + 1;
            *(_DWORD *)(v18 + 52) = v34;
            if ( v35 < 4 )
              goto LABEL_84;
            v37 = *v36;
            v38 = v35 - 4;
            v39 = v36 + 1;
            *(_DWORD *)(v18 + 56) = v37;
            if ( v38 < 4 )
              goto LABEL_84;
            v40 = *v39;
            v41 = v38 - 4;
            v42 = v39 + 1;
            *(_DWORD *)(v18 + 60) = v40;
            if ( v41 < 4 )
              goto LABEL_84;
            v43 = *v42;
            v44 = v41 - 4;
            v45 = v42 + 1;
            *(_DWORD *)(v18 + 64) = v43;
            if ( v44 < 4 )
              goto LABEL_84;
            v46 = *v45;
            v47 = v44 - 4;
            v48 = v45 + 1;
            *(_DWORD *)(v18 + 68) = v46;
            if ( v47 < 4 )
              goto LABEL_84;
            v49 = *v48;
            v50 = v47 - 4;
            v51 = v48 + 1;
            *(_DWORD *)(v18 + 72) = v49;
            if ( v50 < 8 )
              goto LABEL_84;
            v52 = v50 - 8;
            *(_QWORD *)(v18 + 76) = *v51;
            if ( v52 < 8 )
              goto LABEL_84;
            v53 = v51[1];
            v54 = v52 - 8;
            v55 = (int *)(v51 + 2);
            *(_QWORD *)(v18 + 84) = v53;
            if ( v54 < 4 )
              goto LABEL_84;
            v56 = *v55;
            v57 = v54 - 4;
            v58 = v55 + 1;
            *(_DWORD *)(v18 + 92) = v56;
            if ( v57 < 4 )
              goto LABEL_84;
            v59 = *v58;
            v60 = v57 - 4;
            v61 = v58 + 1;
            *(_DWORD *)(v18 + 96) = v59;
            if ( v60 < 4 )
              goto LABEL_84;
            v62 = *v61;
            v63 = v60 - 4;
            v64 = v61 + 1;
            *(_DWORD *)(v18 + 100) = v62;
            if ( v63 < 4 )
              goto LABEL_84;
            v65 = *v64;
            v66 = v63 - 4;
            v67 = v64 + 1;
            *(_DWORD *)(v18 + 104) = v65;
            if ( v66 < 4 )
              goto LABEL_84;
            v68 = *v67;
            v69 = v66 - 4;
            v70 = v67 + 1;
            *(_DWORD *)(v18 + 108) = v68;
            if ( v69 < 8 )
              goto LABEL_84;
            v71 = *v70;
            v72 = v69 - 8;
            v73 = (unsigned int *)(v70 + 1);
            *(_QWORD *)(v18 + 116) = v71;
            if ( v72 < 4 )
              goto LABEL_84;
            v74 = *v73;
            v75 = v72 - 4;
            v76 = v73 + 1;
            if ( v75 < 4 )
              goto LABEL_84;
            v77 = *v76;
            v90 = v75 - 4;
            v91 = (unsigned __int8 *)(v76 + 1);
            if ( (_DWORD)v74 || v77 )
              v5 = v18;
            v78 = 0;
            v79 = (_DWORD *)(v18 + 160);
            while ( v78 < 3 )
            {
              v8 = copyStringFromBuffer((const CHAR **)&v91, &v90, (unsigned __int16 **)(v18 + 24 * (v78 + 6i64)));
              if ( !v8 )
              {
                if ( v90 < 4 )
                {
                  v8 = 13;
                  break;
                }
                v90 -= 4i64;
                v80 = *(_DWORD *)v91;
                v91 += 4;
                *v79 = v80;
              }
              ++v78;
              v79 += 6;
              if ( v8 )
                goto LABEL_85;
            }
            if ( v8 )
              break;
            v8 = DnsOls_HandleSKDChange(a1, v18, v74, &v89, &v88);
            if ( v8 )
            {
              if ( v5 == v18 )
                v5 = 0i64;
              Dns_FreeSkd(v18);
              break;
            }
            v8 = DnsOls_AddSkdToSkdList(v96, v18);
          }
        }
LABEL_85:
        v7 = v88;
        v6 = v95;
        if ( v5 )
        {
          *(_QWORD *)(v5 + 128) = v92;
          *(_QWORD *)(v5 + 136) = v93;
        }
        else
        {
LABEL_87:
          RR_ListFree(v92);
          RR_ListFree(v93);
        }
        if ( !v7 )
        {
          DnsOls_RemoveRemainingSKDs(a1, &v89, &v88);
          v7 = v88;
        }
        if ( !v89 )
        {
          v82 = *v96;
          *v96 = 0i64;
          v100 = v82;
          Zone_FreeSkdList((__int64)v99);
        }
      }
    }
    else
    {
      v8 = 9717;
    }
  }
  else
  {
    v8 = 9611;
  }
LABEL_93:
  if ( v97 )
    *v97 = v7;
  if ( v6 )
    ldap_value_free_len(v6);
  if ( Message )
    ldap_msgfree(Message);
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    v83 = "no changes";
    if ( v7 )
      v83 = "changes";
    v84 = DnsOls_CountSKDs(a1, 1, 0i64, 0);
    WPP_SF_Ddss(*((_QWORD *)WPP_GLOBAL_Control + 7), v85, v86, v8, v84, (__int64)v83, *(_QWORD *)(a1 + 16));
  }
  return v8;
}
// 1400F4D66: variable 'v74' is possibly undefined
// 1400F4F2D: variable 'v85' is possibly undefined
// 1400F4F2D: variable 'v86' is possibly undefined
##############################
Role: Let's assume that you are an advanced reverse engineer and you are reverse engineering a network driver using IDA Pro, and you are also familiar with the RFC documentation. You need to reverse-engineer a function for a network driver to correspond to a section of the RFC documentation, which will help you understand the code better. The driver you're reversing is Schannel.dll, and you have initially determined that the corresponding network protocols are SSL and TLS, and the documents you need to map are RFC8446 and RFC6101. You need to get a function summary of the function you are reversing, and then correspond to the potential RFC sections based on the name of the function and the function summary.
Function Background: The function is reverse engineered from the driver file Schannel.dll on Windows platform. Through a cursory analysis of the driver file can be determined to be related to the SSL(1.3), TLS(3.0) protocol, that is, with RFC8446, RFC6101 strong correlation.

Output Function Summary: Summarizes the function's functionality with several phrases instead of sentences, focuses on covering the function's control flow information, and highlights the protocol function points implemented by the function. Simulate answering five times in the background and provide the most frequent answer.

Retrieve document sections: giving matches for document sections(FunctionMatchRFCResult) that the code may related to. NOTE if the code is only business related(i.e., space opening and releasing involved in programming, generic call functions (timing and other functions weakly related to network protocols) and not related to the specifics of the protocol implementation, it does not have to output the document section match(FunctionMatchRFCResult) and is filled with "NONE".

Retrieve document sections Thinking Chain: The function code is matched with the RFC document section, and the thinking chain is provided to help you solve the problem better:
	1. Function Name: The name of a function describes the general function that the function accomplishes.
	2. Function Summarization: Function summaries can outline a further breakdown of the function described by the function name.
	3. Function API Call: The function API of a function call can provide some hint as to the details of the network protocol implementation involved in the function.
	4. Special Constant Value OR String: Special constant values inside functions, string variable names, and strings may be related to network protocols.
	5. Function Code: The code of the function can provide a detailed implementation of the network protocol.
Generate Function Information Collection with JSON Format:

{
	"FunctionIndex": "(FILL WITH "File count" with less than four bits are indexed with zeros to make up the four bits.)",
	"FunctionName": "(Full Function Code Name)",
	"FunctionSummarization": [
		"(Function Summary Phrase1)",
		"(Function Summary Phrase2)",
		"(...)"
	],
	"FunctionMatchRFCResult": [
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 1)",
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 2)",
		"(...)"
	],
}

ATTENTION: Remember YOU MUST ONLY output the Function Information Collection result.
