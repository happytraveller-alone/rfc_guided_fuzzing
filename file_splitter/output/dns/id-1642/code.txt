Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 1642
// Total lines: 176

//----- (00000001400CF990) ----------------------------------------------------
void **__fastcall allocateRpcZoneInfo(__int64 a1)
{
  void **zero; // rax
  __int64 v3; // r8
  void **v4; // rbx
  BOOL v5; // eax
  BOOL v6; // eax
  unsigned int v7; // ecx
  unsigned int v8; // edx
  BOOL v9; // eax
  __int64 v10; // r8
  __int64 v11; // r8
  int v12; // r9d
  __int64 v13; // r8
  int v14; // r9d
  __int64 v15; // r8
  int v16; // r9d
  __int64 v17; // rax
  __int64 v18; // rax
  _BYTE *v19; // rdx
  char *v20; // rcx
  void *v22; // rcx
  void *v23; // rcx
  void *v24; // rcx
  void *v25; // rcx
  void *v26; // rcx
  void *v27; // rcx
  void *v28; // rcx
  void *v29; // rcx

  zero = (void **)MIDL_user_allocate_zero(0xC0ui64);
  v4 = zero;
  if ( !zero )
    return 0i64;
  *((_DWORD *)zero + 4) = *(_DWORD *)(a1 + 372);
  *((_DWORD *)zero + 5) = (*(_DWORD *)(a1 + 396) >> 1) & 1;
  *((_DWORD *)zero + 9) = (*(_DWORD *)(a1 + 396) >> 2) & 1;
  *((_DWORD *)zero + 6) = *(_BYTE *)(a1 + 392) & 3;
  *((_DWORD *)zero + 10) = *(_DWORD *)(a1 + 388) & 1;
  *((_DWORD *)zero + 16) = *(_DWORD *)(a1 + 380);
  *((_DWORD *)zero + 17) = *(unsigned __int8 *)(a1 + 385);
  *((_DWORD *)zero + 42) = (*(_DWORD *)(a1 + 388) >> 1) & 1;
  *((_DWORD *)zero + 43) = (*(_DWORD *)(a1 + 388) >> 2) & 1;
  *((_DWORD *)zero + 7) = (*(_DWORD *)(a1 + 396) >> 12) & 1;
  *((_DWORD *)zero + 8) = (*(_DWORD *)(a1 + 396) >> 13) & 1;
  v5 = (*(_BYTE *)(a1 + 396) & 2) == 0 && *(_QWORD *)(a1 + 344);
  *((_DWORD *)v4 + 22) = v5;
  v6 = (*(_BYTE *)(a1 + 396) & 2) != 0 && *(_QWORD *)(a1 + 344);
  *((_DWORD *)v4 + 23) = v6;
  *((_DWORD *)v4 + 24) = *(_DWORD *)(a1 + 396) & 1;
  if ( *(_DWORD *)(a1 + 372) == 1 )
  {
    *((_DWORD *)v4 + 25) = *(_DWORD *)(a1 + 992);
    *((_DWORD *)v4 + 26) = *(_DWORD *)(a1 + 996);
    if ( (*(_BYTE *)(a1 + 396) & 1) != 0 )
    {
      v7 = *(_DWORD *)(a1 + 1000);
      if ( v7 )
      {
        v3 = (unsigned int)g_CurrentTimeHours;
        if ( v7 > g_CurrentTimeHours || (unsigned int)(g_NextScavengeTime - 1) > 0xFFFFFFFD )
        {
          *((_DWORD *)v4 + 27) = v7;
        }
        else
        {
          v8 = (g_NextScavengeTime - dword_1401B9714) / 0xE10u;
          if ( !v8 )
            v8 = 1;
          *((_DWORD *)v4 + 27) = g_CurrentTimeHours + v8;
        }
      }
      else
      {
        *((_DWORD *)v4 + 27) = 0;
      }
    }
  }
  if ( *(_DWORD *)(a1 + 372) == 4 )
  {
    *((_DWORD *)v4 + 30) = *(_DWORD *)(a1 + 1556);
    *((_DWORD *)v4 + 31) = (*(_DWORD *)(a1 + 1160) >> 5) & 1;
  }
  v9 = (*(_BYTE *)(a1 + 388) & 1) != 0 && (dword_1401B9750 || g_fDsReadOnlyDcMode)
    || (*(_BYTE *)(a1 + 1160) & 0x40) != 0;
  *((_DWORD *)v4 + 44) = v9;
  if ( !(unsigned int)RpcUtil_CopyStringToRpcBuffer(v4 + 1, *(_BYTE **)(a1 + 16), v3)
    || !(unsigned int)RpcUtil_CopyStringToRpcBuffer(v4 + 6, *(_BYTE **)(a1 + 136), v10)
    || *(_DWORD *)(a1 + 372) != 1
    && !(unsigned int)RpcUtil_CopyDnsAddrArrayToRpcBuffer(v4 + 7, *(_DWORD **)(a1 + 1168), v11, v12)
    || *(_DWORD *)(a1 + 372) == 3
    && !(unsigned int)RpcUtil_CopyDnsAddrArrayToRpcBuffer(v4 + 16, *(_DWORD **)(a1 + 1176), v11, v12)
    || !(unsigned int)RpcUtil_CopyDnsAddrArrayToRpcBuffer(v4 + 9, *(_DWORD **)(a1 + 552), v11, v12)
    || !(unsigned int)RpcUtil_CopyDnsAddrArrayToRpcBuffer(v4 + 10, *(_DWORD **)(a1 + 544), v13, v14)
    || *(_DWORD *)(a1 + 372) == 1
    && !(unsigned int)RpcUtil_CopyDnsAddrArrayToRpcBuffer(v4 + 14, *(_DWORD **)(a1 + 1008), v15, v16) )
  {
    goto LABEL_49;
  }
  v17 = *(_QWORD *)(a1 + 848);
  if ( v17 )
  {
    *((_DWORD *)v4 + 34) = *(_DWORD *)(v17 + 100);
    v18 = *(_QWORD *)(a1 + 848);
  }
  else
  {
    if ( (*(_BYTE *)(a1 + 388) & 1) == 0 )
      goto LABEL_44;
    *((_DWORD *)v4 + 34) = 18;
    v18 = g_pLegacyDp;
    if ( !g_pLegacyDp )
      goto LABEL_44;
  }
  v19 = *(_BYTE **)(v18 + 24);
  if ( v19 )
  {
    if ( !(unsigned int)RpcUtil_CopyStringToRpcBuffer(v4 + 18, v19, v15) )
    {
LABEL_49:
      v22 = v4[1];
      if ( v22 )
        MIDL_user_free(v22);
      v23 = v4[6];
      if ( v23 )
        MIDL_user_free(v23);
      v24 = v4[7];
      if ( v24 )
        MIDL_user_free(v24);
      v25 = v4[9];
      if ( v25 )
        MIDL_user_free(v25);
      v26 = v4[10];
      if ( v26 )
        MIDL_user_free(v26);
      v27 = v4[14];
      if ( v27 )
        MIDL_user_free(v27);
      v28 = v4[18];
      if ( v28 )
        MIDL_user_free(v28);
      v29 = v4[19];
      if ( v29 )
        MIDL_user_free(v29);
      MIDL_user_free(v4);
      return 0i64;
    }
  }
LABEL_44:
  v20 = *(char **)(a1 + 840);
  if ( v20 )
    v4[19] = Dns_StringCopyAllocate(v20, 0, 1i64, 1);
  if ( (unsigned int)(*(_DWORD *)(a1 + 372) - 2) <= 2 )
  {
    *((_DWORD *)v4 + 41) = *(_DWORD *)(a1 + 1516);
    *((_DWORD *)v4 + 40) = *(_DWORD *)(a1 + 1512);
    *((_DWORD *)v4 + 45) = *(_DWORD *)(a1 + 1520);
    *((_DWORD *)v4 + 46) = *(_DWORD *)(a1 + 1524);
  }
  return v4;
}
// 1400CFB66: variable 'v3' is possibly undefined
// 1400CFB7E: variable 'v10' is possibly undefined
// 1400CFB9F: variable 'v11' is possibly undefined
// 1400CFB9F: variable 'v12' is possibly undefined
// 1400CFBF3: variable 'v13' is possibly undefined
// 1400CFBF3: variable 'v14' is possibly undefined
// 1400CFC14: variable 'v15' is possibly undefined
// 1400CFC14: variable 'v16' is possibly undefined
// 1401B8C14: using guessed type int g_NextScavengeTime;
// 1401B8C1C: using guessed type int g_CurrentTimeHours;
// 1401B8C94: using guessed type int g_fDsReadOnlyDcMode;
// 1401B8D10: using guessed type __int64 g_pLegacyDp;
// 1401B9714: using guessed type int dword_1401B9714;
// 1401B9750: using guessed type int dword_1401B9750;
