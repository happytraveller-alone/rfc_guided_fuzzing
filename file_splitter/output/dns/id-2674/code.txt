Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 2674
// Total lines: 326

//----- (000000014013E7E8) ----------------------------------------------------
__int64 __fastcall Validate_PolicyData(__int64 a1, __int64 a2)
{
  unsigned int v2; // ebx
  int v6; // eax
  __int64 v7; // r8
  const wchar_t *v8; // rax
  int v9; // r11d
  __int64 v10; // rdx
  _DWORD *v11; // rcx
  unsigned int v12; // eax
  _DWORD *v13; // rcx
  _DWORD *v14; // rcx
  int v15; // r9d
  CDnsClientSubnetRecordsTrie *v16; // rcx
  unsigned __int16 v17; // dx
  int v18; // ebp
  unsigned int v19; // r10d
  _DWORD *v20; // r9
  int v21; // eax
  _DWORD *v22; // rax
  CDnsClientSubnetRecordsTrie *v23; // rcx
  int v24; // r9d
  unsigned __int16 v25; // dx
  _DWORD *v26; // rax
  const wchar_t *v27; // rax

  v2 = 0;
  if ( *(_DWORD *)(a1 + 8) > 1u || *(_DWORD *)(a1 + 16) > 2u || *(_DWORD *)(a1 + 12) > 4u )
    return 9974i64;
  if ( *(_DWORD *)(a1 + 12) == 4 )
    *(_QWORD *)(a1 + 24) = 1i64;
  if ( !(unsigned int)IsValidFileName(*(wchar_t **)a1) )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      WPP_SF_S(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x3Du,
        (__int64)&WPP_7bc0de5581043365e853c04d44d2eaeb_Traceguids,
        *(const unsigned __int16 **)a1);
    }
    return 9982i64;
  }
  if ( a2 )
  {
    v6 = *(_DWORD *)(a2 + 372);
    if ( !v6 && *(_DWORD *)(a1 + 12) == 1 )
      return 9603i64;
    if ( (unsigned int)(v6 - 3) <= 1 || (*(_BYTE *)(a2 + 396) & 4) != 0 )
      return 9603i64;
  }
  v7 = *(unsigned int *)(a1 + 8);
  if ( (_DWORD)v7 )
  {
    if ( !a2 )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        WPP_SF_SD(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x3Fu,
          (__int64)&WPP_7bc0de5581043365e853c04d44d2eaeb_Traceguids,
          *(const unsigned __int16 **)a1);
      }
      return 9602i64;
    }
    v9 = *(_DWORD *)(a1 + 12);
    v10 = (__int64)&g_ZonePolicyValidation;
    v13 = &g_ZonePolicyValidation;
    v12 = 0;
    while ( v9 != *v13 )
    {
      ++v12;
      v13 += 4;
      if ( v12 >= 2 )
        return 9974i64;
    }
  }
  else
  {
    if ( a2 )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        if ( *(_DWORD *)(a2 + 372) )
          v8 = *(const wchar_t **)(a2 + 24);
        else
          v8 = L"..Cache";
        WPP_SF_SdS(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x3Eu,
          (__int64)&WPP_7bc0de5581043365e853c04d44d2eaeb_Traceguids,
          *(const unsigned __int16 **)a1,
          0,
          (__int64)v8);
      }
      return 9603i64;
    }
    v9 = *(_DWORD *)(a1 + 12);
    v10 = (__int64)&g_ServerPolicyValidation;
    v11 = &g_ServerPolicyValidation;
    v12 = 0;
    while ( v9 != *v11 )
    {
      ++v12;
      v11 += 4;
      if ( v12 >= 5 )
        return 9974i64;
    }
  }
  v14 = (_DWORD *)(v10 + 16i64 * v12);
  if ( v14[1] == 1 )
  {
    v15 = *(_DWORD *)(a1 + 16);
    if ( v15 )
    {
      v16 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
      {
        return 9974i64;
      }
      v17 = 64;
LABEL_47:
      WPP_SF_dSd(
        *((_QWORD *)v16 + 7),
        v17,
        (__int64)&WPP_7bc0de5581043365e853c04d44d2eaeb_Traceguids,
        v15,
        *(_QWORD *)a1);
      return 9974i64;
    }
  }
  if ( v14[1] == 4 )
  {
    v15 = *(_DWORD *)(a1 + 16);
    if ( (v15 & 0xFFFFFFFD) != 0 )
    {
      v16 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
      {
        return 9974i64;
      }
      v17 = 65;
      goto LABEL_47;
    }
  }
  if ( v14[2] != 1 )
  {
LABEL_82:
    v21 = v14[3];
    if ( v21 == 2 )
    {
      v22 = *(_DWORD **)(a1 + 40);
      if ( v22 && *v22 )
      {
        v23 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
          || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
        {
          return 9987i64;
        }
        v24 = *(_DWORD *)(a1 + 16);
        v25 = 67;
LABEL_89:
        WPP_SF_dSd(
          *((_QWORD *)v23 + 7),
          v25,
          (__int64)&WPP_7bc0de5581043365e853c04d44d2eaeb_Traceguids,
          v24,
          *(_QWORD *)a1);
        return 9987i64;
      }
    }
    else if ( v21 == 4 )
    {
      v24 = *(_DWORD *)(a1 + 16);
      v26 = *(_DWORD **)(a1 + 40);
      if ( (v24 & 0xFFFFFFFD) != 0 )
      {
        if ( !v26 || !*v26 )
        {
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
          {
            WPP_SF_dSd(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x44u,
              (__int64)&WPP_7bc0de5581043365e853c04d44d2eaeb_Traceguids,
              v24,
              *(_QWORD *)a1);
          }
          return 9986i64;
        }
      }
      else if ( v26 && *v26 )
      {
        v23 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
          || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
        {
          return 9987i64;
        }
        v25 = 69;
        goto LABEL_89;
      }
    }
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      if ( a2 )
      {
        if ( *(_DWORD *)(a2 + 372) )
          v27 = *(const wchar_t **)(a2 + 24);
        else
          v27 = L"..Cache";
      }
      else
      {
        v27 = &LocaleName;
      }
      WPP_SF_dSdS(*((_QWORD *)WPP_GLOBAL_Control + 7), v10, v7, *(_DWORD *)(a1 + 16), *(_QWORD *)a1, v7, (__int64)v27);
    }
    return 0i64;
  }
  v18 = 0;
  v10 = 0i64;
  if ( *(_DWORD *)(a1 + 56) )
  {
    v19 = 0;
    while ( 1 )
    {
      v20 = *(_DWORD **)(a1 + 8i64 * v19 + 64);
      if ( !v20 )
        return 9983i64;
      if ( v9 == 4 )
      {
        if ( !*v20 )
          goto LABEL_67;
        if ( (unsigned int)(*v20 - 3) > 1 )
          goto LABEL_91;
      }
      switch ( *v20 )
      {
        case 0:
LABEL_67:
          v10 = 2i64;
          break;
        case 1:
          v10 = 32i64;
          break;
        case 2:
          v10 = 64i64;
          break;
        case 3:
          v10 = 4i64;
          break;
        case 4:
          v10 = 1i64;
          break;
        case 5:
          v10 = 8i64;
          break;
        case 6:
          v10 = 16i64;
          break;
      }
      if ( ((unsigned int)v10 & v18) != 0 )
      {
LABEL_91:
        if ( *v20 )
        {
          switch ( *v20 )
          {
            case 1:
              return 9991;
            case 2:
              return 9992;
            case 3:
              return 9993;
            case 4:
              return 9994;
            case 5:
              return 9995;
            case 6:
              return 9996;
          }
        }
        else
        {
          return 9990;
        }
        return v2;
      }
      v18 |= v10;
      if ( ++v19 >= *(_DWORD *)(a1 + 56) )
        goto LABEL_82;
    }
  }
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
  {
    WPP_SF_dSd(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x42u,
      (__int64)&WPP_7bc0de5581043365e853c04d44d2eaeb_Traceguids,
      *(_DWORD *)(a1 + 16),
      *(_QWORD *)a1);
  }
  return 9983i64;
}
