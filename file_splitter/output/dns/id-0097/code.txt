Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 97
// Total lines: 408

//----- (000000014000BEC4) ----------------------------------------------------
__int64 __fastcall buildServerRootHints(_QWORD *a1, __int64 a2)
{
  _QWORD *v2; // r12
  int v3; // esi
  int v4; // edi
  void **v5; // r15
  __int64 v6; // rbx
  __int64 v7; // r14
  __int64 *v8; // rdi
  __int64 *v9; // rsi
  int v10; // r13d
  const char *v11; // rcx
  const char *v12; // rcx
  int v13; // r9d
  WORD v14; // ax
  int v15; // r9d
  CDnsClientSubnetRecordsTrie *v16; // rcx
  unsigned __int16 v17; // dx
  int v18; // eax
  _BYTE *Ptr; // rax
  int v20; // r9d
  __int64 *v21; // rbx
  _BYTE *ARecord; // rax
  unsigned __int16 v23; // dx
  __int64 *i; // rbx
  __int64 v25; // r8
  _BYTE *AAAARecord; // rax
  unsigned __int16 v27; // dx
  CDnsClientSubnetRecordsTrie *v28; // rcx
  unsigned int v29; // ebx
  void **v31; // [rsp+30h] [rbp-59h] BYREF
  __int64 *v32; // [rsp+38h] [rbp-51h] BYREF
  __int64 *v33; // [rsp+40h] [rbp-49h] BYREF
  __int64 v34; // [rsp+48h] [rbp-41h] BYREF
  _QWORD *v35; // [rsp+50h] [rbp-39h]
  char v36[128]; // [rsp+60h] [rbp-29h] BYREF
  int v39; // [rsp+100h] [rbp+77h]

  v2 = (_QWORD *)g_pCacheZone;
  v3 = 0;
  v35 = (_QWORD *)g_pCacheZone;
  v4 = 0;
  v5 = 0i64;
  v39 = 0;
  v6 = a2;
  v31 = 0i64;
  if ( !g_pCacheZone )
    goto LABEL_114;
  if ( (unsigned int)Zone_LockForWriteEx(
                       g_pCacheZone,
                       1,
                       0x2710u,
                       (__int64)"ds\\dns\\server\\server\\autoconfigure.c",
                       173) )
    goto LABEL_114;
  v3 = 1;
  Zone_DumpData((__int64)v2);
  v7 = v6;
  if ( !v6 )
    goto LABEL_114;
  while ( 1 )
  {
    v8 = 0i64;
    v9 = 0i64;
    v10 = 0;
    v32 = 0i64;
    v33 = 0i64;
    if ( *(_WORD *)(v7 + 16) != 2 )
      goto LABEL_112;
    v11 = *(const char **)(v7 + 8);
    if ( !v11 || !*(_QWORD *)(v7 + 32) || _stricmp(v11, ".") )
      goto LABEL_112;
    do
    {
      v12 = *(const char **)(v6 + 8);
      if ( v12 && !_stricmp(v12, *(const char **)(v7 + 32)) )
      {
        if ( *(_WORD *)(v6 + 16) != 1 || v8 )
        {
          if ( *(_WORD *)(v6 + 16) == 28 )
          {
            if ( !v9 )
              v9 = (__int64 *)v6;
            v33 = v9;
          }
        }
        else
        {
          v8 = (__int64 *)v6;
        }
      }
      v6 = *(_QWORD *)v6;
    }
    while ( v6 );
    v5 = v31;
    v2 = v35;
    v32 = v8;
    if ( v8 && v9 )
      goto LABEL_41;
    if ( v31 )
    {
      freeRecordSetArray(v31);
      v31 = 0i64;
    }
    if ( !v8 && !v9 )
    {
      v13 = 0x4000;
LABEL_27:
      v14 = 28;
      goto LABEL_29;
    }
    v13 = 0;
    if ( !v8 && !v9 )
      goto LABEL_27;
    v14 = v8 != 0i64 ? 28 : 1;
LABEL_29:
    v15 = queryForRootServers(a1, *(const CHAR **)(v7 + 32), v14, v13, &v31);
    if ( !v15 )
    {
      v5 = v31;
      if ( (unsigned int)selectAandAAAAForNS((__int64 **)v31, *(const char **)(v7 + 32), &v32, &v33) )
      {
        v16 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
          || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
        {
          v8 = v32;
          v9 = v33;
          goto LABEL_42;
        }
        WPP_SF_s(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x33u,
          (__int64)&WPP_dd5a12aafb1b34b87fc868998e41e2af_Traceguids,
          *(const char **)(v7 + 32));
      }
      v9 = v33;
      v8 = v32;
      goto LABEL_41;
    }
    v16 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_Ds(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x32u,
        (__int64)&WPP_dd5a12aafb1b34b87fc868998e41e2af_Traceguids,
        v15,
        *(_QWORD *)(v7 + 32));
      v5 = v31;
LABEL_41:
      v16 = WPP_GLOBAL_Control;
      goto LABEL_42;
    }
    v5 = v31;
LABEL_42:
    if ( !v8 && !v9 )
    {
      if ( v16 == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_BYTE *)v16 + 68) & 2) == 0
        || *((_BYTE *)v16 + 65) < 4u )
      {
        goto LABEL_49;
      }
      v17 = 52;
      goto LABEL_48;
    }
    if ( v16 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)v16 + 68) & 2) != 0
      && *((_BYTE *)v16 + 65) >= 4u )
    {
      WPP_SF_sqq(
        *((_QWORD *)v16 + 7),
        0x35u,
        (__int64)&WPP_dd5a12aafb1b34b87fc868998e41e2af_Traceguids,
        *(const char **)(v7 + 32));
    }
    v18 = createNodeInZone(v2, ".", &v34);
    if ( v18 )
      break;
    Ptr = RR_CreatePtr(0i64, *(_BYTE **)(v7 + 32), 2u, 0, 0x21u);
    if ( !Ptr )
    {
      v16 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
      {
        goto LABEL_49;
      }
      v17 = 55;
      goto LABEL_48;
    }
    if ( (unsigned int)RR_AddToNode((__int64)v2, v34, (__int64)Ptr) )
    {
      v16 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
      {
        goto LABEL_49;
      }
      v17 = 56;
      goto LABEL_48;
    }
    v20 = createNodeInZone(v2, *(_BYTE **)(v7 + 32), &v34);
    if ( v20 )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_Ds(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x39u,
          (__int64)&WPP_dd5a12aafb1b34b87fc868998e41e2af_Traceguids,
          v20,
          *(_QWORD *)(v7 + 32));
      }
      goto LABEL_113;
    }
    v21 = v8;
    if ( v8 )
    {
      v16 = WPP_GLOBAL_Control;
      while ( 1 )
      {
        if ( *((_WORD *)v21 + 8) != *((_WORD *)v8 + 8) )
          goto LABEL_87;
        if ( _stricmp((const char *)v21[1], (const char *)v8[1]) )
          break;
        ARecord = RR_CreateARecord(*((_DWORD *)v21 + 8), 0, 0x21u);
        if ( ARecord )
        {
          if ( !(unsigned int)RR_AddToNode((__int64)v2, v34, (__int64)ARecord) )
          {
            ++v10;
            goto LABEL_83;
          }
          v16 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
            || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
          {
            goto LABEL_84;
          }
          v23 = 59;
        }
        else
        {
          v16 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
            || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
          {
            goto LABEL_84;
          }
          v23 = 58;
        }
        WPP_SF_s(
          *((_QWORD *)v16 + 7),
          v23,
          (__int64)&WPP_dd5a12aafb1b34b87fc868998e41e2af_Traceguids,
          (const char *)v21[1]);
LABEL_83:
        v16 = WPP_GLOBAL_Control;
LABEL_84:
        v21 = (__int64 *)*v21;
        if ( !v21 )
          goto LABEL_87;
      }
    }
    v16 = WPP_GLOBAL_Control;
LABEL_87:
    for ( i = v9; i; i = (__int64 *)*i )
    {
      if ( *((_WORD *)i + 8) != *((_WORD *)v9 + 8) )
        break;
      if ( _stricmp((const char *)i[1], (const char *)v9[1]) )
      {
        v16 = WPP_GLOBAL_Control;
        break;
      }
      DnsAddr_BuildFromIp6(v36, (__int128 *)i + 2, v25, 0);
      AAAARecord = RR_CreateAAAARecord((__int64)v36, 0);
      if ( AAAARecord )
      {
        if ( !(unsigned int)RR_AddToNode((__int64)v2, v34, (__int64)AAAARecord) )
        {
          ++v10;
          goto LABEL_102;
        }
        v16 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
          || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
        {
          continue;
        }
        v27 = 61;
      }
      else
      {
        v16 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
          || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
        {
          continue;
        }
        v27 = 60;
      }
      WPP_SF_s(*((_QWORD *)v16 + 7), v27, (__int64)&WPP_dd5a12aafb1b34b87fc868998e41e2af_Traceguids, (const char *)i[1]);
LABEL_102:
      v16 = WPP_GLOBAL_Control;
    }
    if ( !v10 )
    {
      v6 = a2;
      goto LABEL_112;
    }
    ++v39;
    if ( v16 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)v16 + 68) & 2) != 0
      && *((_BYTE *)v16 + 65) >= 4u )
    {
      v17 = 62;
LABEL_48:
      WPP_SF_s(
        *((_QWORD *)v16 + 7),
        v17,
        (__int64)&WPP_dd5a12aafb1b34b87fc868998e41e2af_Traceguids,
        *(const char **)(v7 + 32));
    }
LABEL_49:
    v6 = a2;
LABEL_112:
    v7 = *(_QWORD *)v7;
    if ( !v7 )
      goto LABEL_113;
  }
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_Ds(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x36u,
      (__int64)&WPP_dd5a12aafb1b34b87fc868998e41e2af_Traceguids,
      v18,
      (__int64)".");
  }
LABEL_113:
  v3 = 1;
  v4 = v39;
LABEL_114:
  freeRecordSetArray(v5);
  if ( v4 )
  {
    v29 = 0;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x41u, (__int64)&WPP_dd5a12aafb1b34b87fc868998e41e2af_Traceguids);
    }
    Zone_WriteBackRootHints(1);
  }
  else
  {
    v28 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x3Fu, (__int64)&WPP_dd5a12aafb1b34b87fc868998e41e2af_Traceguids);
      v28 = WPP_GLOBAL_Control;
    }
    v29 = 13;
    if ( v28 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)v28 + 68) & 2) != 0
      && *((_BYTE *)v28 + 65) >= 4u )
    {
      WPP_SF_(*((_QWORD *)v28 + 7), 0x40u, (__int64)&WPP_dd5a12aafb1b34b87fc868998e41e2af_Traceguids);
    }
    Zone_DumpData((__int64)v2);
    Load_RootHints();
  }
  if ( v3 )
    Zone_UnlockAfterWriteEx((__int64)v2, 1, (__int64)"ds\\dns\\server\\server\\autoconfigure.c", 246);
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_Dd(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x42u,
      (__int64)&WPP_dd5a12aafb1b34b87fc868998e41e2af_Traceguids,
      v29);
  }
  return v29;
}
// 14000C39D: variable 'v25' is possibly undefined
// 1401EC628: using guessed type __int64 g_pCacheZone;
