Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 104
// Total lines: 235

//----- (000000014000D3F0) ----------------------------------------------------
__int64 __fastcall createZonesForDomain(int a1)
{
  char *v1; // rsi
  char *v3; // r14
  int PrimaryDomainInformation; // eax
  unsigned int v5; // ebx
  CDnsClientSubnetRecordsTrie *v6; // rcx
  unsigned __int16 v7; // dx
  const unsigned __int16 *v8; // r9
  __int64 v9; // r10
  unsigned __int16 *v10; // rax
  int v11; // edx
  int v12; // ecx
  char *v13; // rax
  __int64 v14; // rdi
  __int64 v15; // rdi
  int v16; // edx
  __int64 v17; // r8
  char *v18; // rcx
  char v19; // al
  __int64 v20; // rax
  CDnsClientSubnetRecordsTrie *v21; // rcx
  unsigned __int16 v22; // dx
  const char *v23; // r9
  __int64 v24; // rax
  int Zone; // eax
  CDnsClientSubnetRecordsTrie *v26; // rcx
  unsigned __int16 v27; // dx
  PVOID Buffer; // [rsp+58h] [rbp+10h] BYREF

  v1 = 0i64;
  Buffer = 0i64;
  v3 = 0i64;
  PrimaryDomainInformation = DsRoleGetPrimaryDomainInformation(0i64, DsRolePrimaryDomainInfoBasic, (PBYTE *)&Buffer);
  v5 = PrimaryDomainInformation;
  if ( PrimaryDomainInformation )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_D(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x59u,
        (__int64)&WPP_dd5a12aafb1b34b87fc868998e41e2af_Traceguids,
        PrimaryDomainInformation);
    }
    goto LABEL_70;
  }
  if ( !Buffer )
  {
    v6 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
    {
      goto LABEL_69;
    }
    v7 = 90;
LABEL_68:
    WPP_SF_(*((_QWORD *)v6 + 7), v7, (__int64)&WPP_dd5a12aafb1b34b87fc868998e41e2af_Traceguids);
LABEL_69:
    v5 = 87;
    goto LABEL_70;
  }
  v8 = (const unsigned __int16 *)*((_QWORD *)Buffer + 2);
  if ( !v8 || (v9 = *((_QWORD *)Buffer + 3)) == 0 )
  {
    v6 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
    {
      goto LABEL_69;
    }
    v7 = 91;
    goto LABEL_68;
  }
  v10 = (unsigned __int16 *)*((_QWORD *)Buffer + 2);
  do
  {
    v11 = *(unsigned __int16 *)((char *)v10 + v9 - (_QWORD)v8);
    v12 = *v10 - v11;
    if ( v12 )
      break;
    ++v10;
  }
  while ( v11 );
  if ( !v12 )
  {
    Ds_SetDsaVersionGlobals(pServerLdap);
    v13 = (char *)Dns_StringCopyAllocate(*((char **)Buffer + 3), 0, 1i64, 2);
    v3 = v13;
    if ( !v13 )
      goto LABEL_22;
    v14 = -1i64;
    do
      ++v14;
    while ( v13[v14] );
    v15 = v14 + 10;
    v1 = (char *)Mem_Alloc(v15, 0i64, "ds\\dns\\server\\server\\autoconfigure.c", 3396);
    if ( !v1 )
      goto LABEL_22;
    v16 = 0;
    if ( (unsigned __int64)(v15 - 1) > 0x7FFFFFFE )
      v16 = -2147024809;
    if ( v16 < 0 )
    {
      if ( v15 )
        *v1 = 0;
    }
    else
    {
      v16 = 0;
      v17 = v15;
      v18 = v1;
      if ( !v15 )
        goto LABEL_34;
      do
      {
        if ( !(2147483646 - v15 + v17) )
          break;
        v19 = v18["_msdcs." - v1];
        if ( !v19 )
          break;
        *v18++ = v19;
        --v17;
      }
      while ( v17 );
      if ( !v17 )
      {
LABEL_34:
        --v18;
        v16 = -2147024774;
      }
      *v18 = 0;
    }
    if ( v16 < 0 || (int)StringCchCatA(v1, v15, v3) < 0 )
    {
LABEL_22:
      v5 = 14;
      goto LABEL_70;
    }
    v20 = Lookup_ZoneTreeNodeFromDottedNameEx(v3, 0, 0x2000000, 0i64);
    if ( v20 && *(_QWORD *)(v20 + 56) )
    {
      v21 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
      {
        goto LABEL_70;
      }
      v22 = 93;
      v23 = v3;
    }
    else
    {
      v24 = Lookup_ZoneTreeNodeFromDottedNameEx(v1, 0, 0x2000000, 0i64);
      if ( !v24 || !*(_QWORD *)(v24 + 56) )
      {
        Zone = autoCreateZone(a1, v1, 1);
        v5 = Zone;
        if ( Zone )
        {
          v26 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
            || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
          {
            goto LABEL_70;
          }
          v27 = 95;
        }
        else
        {
          Zone = autoCreateZone(a1, v3, 0);
          v5 = Zone;
          if ( !Zone )
            goto LABEL_70;
          v26 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
            || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
          {
            goto LABEL_70;
          }
          v27 = 96;
        }
        WPP_SF_Ds(
          *((_QWORD *)v26 + 7),
          v27,
          (__int64)&WPP_dd5a12aafb1b34b87fc868998e41e2af_Traceguids,
          Zone,
          (__int64)v1);
        goto LABEL_70;
      }
      v21 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
      {
        goto LABEL_70;
      }
      v22 = 94;
      v23 = v1;
    }
    WPP_SF_s(*((_QWORD *)v21 + 7), v22, (__int64)&WPP_dd5a12aafb1b34b87fc868998e41e2af_Traceguids, v23);
    goto LABEL_70;
  }
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_SS(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x5Cu,
      (__int64)&WPP_dd5a12aafb1b34b87fc868998e41e2af_Traceguids,
      v8,
      v9);
  }
LABEL_70:
  if ( Buffer )
    DsRoleFreeMemory(Buffer);
  Mem_Free(v3, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\autoconfigure.c", 3463);
  Mem_Free(v1, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\autoconfigure.c", 3464);
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_D(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x61u, (__int64)&WPP_dd5a12aafb1b34b87fc868998e41e2af_Traceguids, v5);
  }
  return v5;
}
