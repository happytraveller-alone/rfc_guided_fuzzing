Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 1555
// Total lines: 202

//----- (00000001400C4870) ----------------------------------------------------
__int64 __fastcall Zone_ActivateLoadedZone(__int64 a1)
{
  unsigned int v2; // edi
  CDnsClientSubnetRecordsTrie *v3; // rcx
  __int64 v4; // rsi
  __int128 v5; // xmm1
  __int128 v6; // xmm0
  __int128 v7; // xmm1
  __int64 v8; // r8
  int v9; // r9d
  __int64 v10; // rdx
  void (__fastcall *v11)(__int64); // rdx
  int v12; // r9d
  __int64 v13; // rcx
  __int128 v15[2]; // [rsp+30h] [rbp-58h] BYREF
  __int128 v16; // [rsp+50h] [rbp-38h]
  __int128 v17; // [rsp+60h] [rbp-28h]

  v2 = 0;
  v3 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x10) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_s(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x60u,
      (__int64)&WPP_e9a0d5dea449334d7c383477da81f939_Traceguids,
      *(const char **)(a1 + 16));
    v3 = WPP_GLOBAL_Control;
  }
  if ( !*(_QWORD *)(a1 + 72) )
  {
    if ( v3 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)v3 + 68) & 0x10) != 0
      && *((_BYTE *)v3 + 65) >= 4u )
    {
      WPP_SF_s(
        *((_QWORD *)v3 + 7),
        0x61u,
        (__int64)&WPP_e9a0d5dea449334d7c383477da81f939_Traceguids,
        *(const char **)(a1 + 16));
      v3 = WPP_GLOBAL_Control;
    }
    v2 = 9608;
    goto LABEL_60;
  }
  NTree_RebalanceSubtreeChildLists(*(_QWORD *)(a1 + 64), a1);
  if ( (*((_BYTE *)WPP_GLOBAL_Control + 68) & 8) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u
    && WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x10) != 0 )
  {
    WPP_SF_s(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x62u,
      (__int64)&WPP_e9a0d5dea449334d7c383477da81f939_Traceguids,
      *(const char **)(a1 + 16));
  }
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_OWORD *)(a1 + 1584);
  v15[0] = *(_OWORD *)(a1 + 1568);
  v6 = *(_OWORD *)(a1 + 1600);
  v15[1] = v5;
  v7 = *(_OWORD *)(a1 + 1616);
  v16 = v6;
  v17 = v7;
  memset_0((void *)(a1 + 1568), 0, 0x40ui64);
  *(_DWORD *)(a1 + 1608) |= 0x80000000;
  Dbase_LockEx(0i64, 2, (__int64)"ds\\dns\\server\\server\\zone.c", 152);
  if ( v4 )
    zoneSaveOldTree(a1, v4);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 512) = 0i64;
  *(_DWORD *)(a1 + 520) = 0;
  *(_QWORD *)(a1 + 72) = 0i64;
  *(_QWORD *)(a1 + 64) = 0i64;
  *(_QWORD *)(a1 + 80) = 0i64;
  if ( *(_DWORD *)(a1 + 372) )
    Zone_GetZoneInfoFromResourceRecords(a1);
  else
    Lookup_ZoneNodeFromDotted((_QWORD *)(a1 & -(__int64)(*(_QWORD *)(a1 + 192) != 0i64)), "local", 0, 16, 0i64, 0i64);
  v10 = *(_QWORD *)(a1 + 152);
  if ( v10 )
  {
    v2 = Up_ExecuteUpdateEx((const char **)a1, v10, 134218256, 0, (__int64)"ds\\dns\\server\\server\\zone.c", 202);
    if ( v2
      && WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x10) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_Ds(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x63u,
        (__int64)&WPP_e9a0d5dea449334d7c383477da81f939_Traceguids,
        v2,
        *(_QWORD *)(a1 + 16));
    }
    Mem_Free(*(_QWORD **)(a1 + 152), 64i64, 6i64, (__int64)"ds\\dns\\server\\server\\zone.c", 6357);
    *(_QWORD *)(a1 + 152) = 0i64;
  }
  if ( (*(_BYTE *)(a1 + 388) & 1) != 0 )
  {
LABEL_42:
    if ( *(_DWORD *)(a1 + 372) == 1 )
      Xfr_SendNotify(a1, v10, v8, v9);
    goto LABEL_44;
  }
  if ( *(_DWORD *)(a1 + 372) == 1 )
  {
    if ( (*(_BYTE *)(a1 + 1040) & 4) != 0 && *(_QWORD *)(a1 + 344) )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x10) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_s(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x64u,
          (__int64)&WPP_e9a0d5dea449334d7c383477da81f939_Traceguids,
          *(const char **)(a1 + 16));
      }
      v2 = DnsOls_SignZone((struct _zone_info *)a1, 0i64, 255i64, 0x243u, 0i64);
      if ( v2 )
      {
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x10) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
        {
          WPP_SF_Ds(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x65u,
            (__int64)&WPP_e9a0d5dea449334d7c383477da81f939_Traceguids,
            v2,
            *(_QWORD *)(a1 + 16));
        }
        Zone_CleanupFailedLoad(a1);
        goto LABEL_47;
      }
    }
    goto LABEL_42;
  }
LABEL_44:
  if ( (unsigned int)(*(_DWORD *)(a1 + 372) - 2) <= 1 )
    Xfr_InitializeSecondaryZoneTimeouts(a1, v10);
  else
    *(_DWORD *)(a1 + 396) &= ~0x2000u;
LABEL_47:
  Dbase_UnlockEx(0i64, 2, (__int64)"ds\\dns\\server\\server\\zone.c", 31);
  if ( v4 )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x10) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_sq(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x66u,
        (__int64)&WPP_e9a0d5dea449334d7c383477da81f939_Traceguids,
        *(const char **)(a1 + 16));
    }
    DWORD2(v16) |= 0x10000000u;
    Up_FreeUpdatesInUpdateList((__int64)v15);
    if ( *(_DWORD *)(a1 + 372) )
    {
      v12 = 6500;
      v11 = cleanupOldZoneTrees;
      v13 = a1;
    }
    else
    {
      memset_0((void *)(a1 + 88), 0, 0x30ui64);
      *(_DWORD *)(v4 + 92) |= 0x80000u;
      v11 = NTree_DeleteSubtree;
      v12 = 6496;
      v13 = v4;
    }
    Timeout_FreeWithFunctionEx(v13, (__int64)v11, (__int64)"ds\\dns\\server\\server\\zone.c", v12);
  }
  if ( (*(_BYTE *)(a1 + 396) & 1) != 0 && !*(_DWORD *)(a1 + 1000) )
    Aging_ResetZoneAgingTime(a1);
  v3 = WPP_GLOBAL_Control;
LABEL_60:
  if ( v3 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)v3 + 68) & 0x10) != 0
    && *((_BYTE *)v3 + 65) >= 4u )
  {
    WPP_SF_Ds(
      *((_QWORD *)v3 + 7),
      0x67u,
      (__int64)&WPP_e9a0d5dea449334d7c383477da81f939_Traceguids,
      v2,
      *(_QWORD *)(a1 + 16));
  }
  return v2;
}
// 1400C4939: conditional instruction was optimized away because al.1>=5u
// 1400C4B8C: variable 'v10' is possibly undefined
// 1400C4B8C: variable 'v8' is possibly undefined
// 1400C4B8C: variable 'v9' is possibly undefined
