Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 458
// Total lines: 156

//----- (000000014003A7B4) ----------------------------------------------------
__int64 __fastcall Ds_LoadOrCreateSettingsObject(LDAP *ld, PLDAPMessage *a2, int a3)
{
  int v6; // esi
  unsigned int SettingsObjectDn; // ebx
  CDnsClientSubnetRecordsTrie *v8; // rcx
  ULONG v9; // ebx
  ULONG attrsonly; // [rsp+28h] [rbp-D8h]
  PLDAPMessage res; // [rsp+60h] [rbp-A0h] BYREF
  __int64 v13[2]; // [rsp+68h] [rbp-98h] BYREF
  LDAPModW *v14[2]; // [rsp+78h] [rbp-88h] BYREF
  int v15; // [rsp+88h] [rbp-78h] BYREF
  const WCHAR *v16; // [rsp+90h] [rbp-70h]
  __int64 *v17; // [rsp+98h] [rbp-68h]
  WCHAR base[1288]; // [rsp+A0h] [rbp-60h] BYREF

  memset_0(base, 0, 0xA02ui64);
  res = 0i64;
  v6 = 1;
  if ( a2 )
    *a2 = 0i64;
  SettingsObjectDn = Ds_GetSettingsObjectDn(base);
  if ( SettingsObjectDn )
  {
    base[0] = 0;
LABEL_5:
    v8 = WPP_GLOBAL_Control;
  }
  else
  {
    while ( 1 )
    {
      v9 = ldap_search_ext_sW(
             ld,
             base,
             0,
             g_szWildCardFilter,
             &g_pwszDnsSettingsDesiredAttrs,
             0,
             0i64,
             0i64,
             &g_LdapTimeout,
             0,
             &res);
      v8 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_DS(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x58u,
          (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
          v9,
          (__int64)base);
        v8 = WPP_GLOBAL_Control;
      }
      if ( v9 == 1 )
        break;
      if ( v9 != 32 )
        goto LABEL_30;
      if ( !a3 )
      {
        if ( res )
        {
          ldap_msgfree(res);
          v8 = WPP_GLOBAL_Control;
          res = 0i64;
        }
        if ( v8 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)v8 + 17) & 0x400) != 0
          && *((_BYTE *)v8 + 65) >= 4u )
        {
          WPP_SF_S(*((_QWORD *)v8 + 7), 0x5Au, (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids, base);
          v8 = WPP_GLOBAL_Control;
        }
        SettingsObjectDn = 0;
        goto LABEL_36;
      }
      if ( !v6 )
      {
LABEL_30:
        SettingsObjectDn = Ds_ErrorHandler(v9, (__int64)base, ld, 1);
        goto LABEL_5;
      }
      v13[1] = 0i64;
      v13[0] = (__int64)L"msDNS-ServerSettings";
      v16 = L"objectClass";
      v17 = v13;
      v14[0] = (LDAPModW *)&v15;
      v15 = 0;
      v14[1] = 0i64;
      if ( v8 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)v8 + 17) & 0x400) != 0
        && *((_BYTE *)v8 + 65) >= 4u )
      {
        WPP_SF_S(*((_QWORD *)v8 + 7), 0x5Bu, (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids, base);
      }
      SettingsObjectDn = Dns_LdapAddExt(ld, base, v14, 0i64, 0i64, attrsonly, 1);
      v6 = 0;
      if ( SettingsObjectDn )
      {
        v8 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          WPP_SF_DS(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x5Cu,
            (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
            SettingsObjectDn,
            (__int64)base);
          v8 = WPP_GLOBAL_Control;
        }
        goto LABEL_36;
      }
    }
    if ( v8 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)v8 + 17) & 0x400) != 0
      && *((_BYTE *)v8 + 65) >= 2u )
    {
      WPP_SF_(*((_QWORD *)v8 + 7), 0x59u, (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids);
      v8 = WPP_GLOBAL_Control;
    }
    SettingsObjectDn = 5;
  }
LABEL_36:
  if ( a2 && !SettingsObjectDn )
  {
    *a2 = res;
LABEL_41:
    v8 = WPP_GLOBAL_Control;
    goto LABEL_42;
  }
  if ( res )
  {
    ldap_msgfree(res);
    goto LABEL_41;
  }
LABEL_42:
  if ( v8 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)v8 + 17) & 0x400) != 0
    && *((_BYTE *)v8 + 65) >= 4u )
  {
    WPP_SF_DS(
      *((_QWORD *)v8 + 7),
      0x5Du,
      (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
      SettingsObjectDn,
      (__int64)base);
  }
  return SettingsObjectDn;
}
// 14003A973: variable 'attrsonly' is possibly undefined
// 14018C0A0: using guessed type wchar_t aMsdnsServerset[21];
