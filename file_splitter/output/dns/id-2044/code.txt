Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 2044
// Total lines: 313

//----- (00000001400FD080) ----------------------------------------------------
__int64 __fastcall DnsOls_ConvertReadOnlyZone(__int64 a1)
{
  unsigned int ZoneScopeDirectory; // edi
  _QWORD *v3; // r14
  _QWORD *v4; // r15
  int v5; // eax
  unsigned int v6; // edx
  __int64 *j; // rsi
  __int64 v8; // rax
  __int64 v9; // rcx
  signed int v10; // esi
  int v11; // r8d
  __int64 v12; // rdx
  _BYTE *v13; // rcx
  __int64 v14; // r11
  char v15; // al
  CDnsClientSubnetRecordsTrie *v16; // rcx
  unsigned __int16 v17; // dx
  __int64 v18; // r9
  char *v19; // rcx
  __int64 v20; // rcx
  __int64 v21; // rax
  __int64 v22; // rax
  unsigned __int16 *v23; // rcx
  __int64 v24; // rdx
  unsigned int *AddrArray; // rax
  unsigned int v26; // r9d
  unsigned int *v27; // rsi
  unsigned int i; // ecx
  unsigned __int64 v29; // rax
  __int64 *v31[2]; // [rsp+48h] [rbp-C0h] BYREF
  char v32[1176]; // [rsp+58h] [rbp-B0h] BYREF
  __int64 v33; // [rsp+4F0h] [rbp+3E8h]
  _DWORD v34[2]; // [rsp+6D8h] [rbp+5D0h] BYREF

  v31[0] = 0i64;
  ZoneScopeDirectory = 0;
  v3 = 0i64;
  v4 = 0i64;
  memset_0(v32, 0, 0x678ui64);
  if ( *(_DWORD *)(a1 + 372) != 1 || (*(_BYTE *)(a1 + 388) & 1) == 0 || !dword_1401B9750 && !g_fDsReadOnlyDcMode )
  {
    v16 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 5u )
    {
      goto LABEL_81;
    }
    WPP_SF_s(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x26u,
      (__int64)&WPP_9f3fa3b6e1fd31b2a2f779badde708de_Traceguids,
      *(const char **)(a1 + 16));
    goto LABEL_92;
  }
  v5 = *(_DWORD *)(a1 + 1040);
  if ( (v5 & 1) == 0 && (v5 & 8) == 0 && (v5 & 4) == 0 )
    goto LABEL_80;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_s(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x27u,
      (__int64)&WPP_9f3fa3b6e1fd31b2a2f779badde708de_Traceguids,
      *(const char **)(a1 + 16));
  }
  if ( !*(_QWORD *)(a1 + 184) )
  {
LABEL_20:
    *(_DWORD *)(a1 + 1160) |= 0x40u;
    ZoneScopeDirectory = 0;
    strcpy((char *)v34, ".dns");
    v8 = -1i64;
    v9 = -1i64;
    do
      ++v9;
    while ( *((_BYTE *)v34 + v9) );
    do
      ++v8;
    while ( *(_BYTE *)(*(_QWORD *)(a1 + 16) + v8) );
    v10 = v9 + v8 + 1;
    v3 = Mem_Alloc(v10, 0i64, "ds\\dns\\server\\server\\olsrodc.cpp", 752);
    if ( !v3 )
      goto LABEL_39;
    v11 = 0;
    if ( (unsigned __int64)(v10 - 1i64) > 0x7FFFFFFE )
      v11 = -2147024809;
    if ( v11 < 0 )
    {
      if ( v10 )
        *(_BYTE *)v3 = 0;
    }
    else
    {
      v12 = v10;
      v13 = v3;
      v11 = 0;
      if ( !v10 )
        goto LABEL_33;
      v14 = *(_QWORD *)(a1 + 16) - (_QWORD)v3;
      do
      {
        if ( !(2147483646i64 - v10 + v12) )
          break;
        v15 = v13[v14];
        if ( !v15 )
          break;
        *v13++ = v15;
        --v12;
      }
      while ( v12 );
      if ( !v12 )
      {
LABEL_33:
        --v13;
        v11 = -2147024774;
      }
      *v13 = 0;
    }
    if ( v11 < 0 || (int)StringCchCatA((char *)v3, v10, (const char *)v34) < 0 )
    {
LABEL_39:
      Mem_Free(v3, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\olsrodc.cpp", 758);
      v3 = 0i64;
      ZoneScopeDirectory = 14;
    }
    v16 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
    {
      WPP_SF_Dss(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x20u,
        (__int64)&WPP_9f3fa3b6e1fd31b2a2f779badde708de_Traceguids,
        ZoneScopeDirectory,
        (__int64)v3,
        *(_QWORD *)(a1 + 16));
      v16 = WPP_GLOBAL_Control;
    }
    if ( ZoneScopeDirectory )
    {
      if ( v16 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)v16 + 17) & 0x200000) != 0
        && *((_BYTE *)v16 + 65) >= 2u )
      {
        v17 = 40;
LABEL_49:
        WPP_SF_Ds(
          *((_QWORD *)v16 + 7),
          v17,
          (__int64)&WPP_9f3fa3b6e1fd31b2a2f779badde708de_Traceguids,
          ZoneScopeDirectory,
          *(_QWORD *)(a1 + 16));
LABEL_92:
        v16 = WPP_GLOBAL_Control;
        goto LABEL_93;
      }
      goto LABEL_93;
    }
    Zone_DumpData(a1);
    v19 = *(char **)(a1 + 840);
    *(_DWORD *)(a1 + 388) &= ~1u;
    *(_DWORD *)(a1 + 372) = 2;
    if ( v19 )
    {
      v4 = Dns_StringCopyAllocate(v19, 0, 1i64, 1);
      if ( !v4 )
      {
        ZoneScopeDirectory = 14;
LABEL_53:
        v16 = WPP_GLOBAL_Control;
        goto LABEL_94;
      }
    }
    if ( *(_QWORD *)(a1 + 192) )
    {
      v20 = *(_QWORD *)(a1 + 328);
      v21 = a1;
      if ( v20 )
        v21 = *(_QWORD *)(a1 + 328);
      if ( *(_QWORD *)(v21 + 200) )
      {
        v22 = a1;
        if ( v20 )
          v22 = *(_QWORD *)(a1 + 328);
        v23 = **(unsigned __int16 ***)(v22 + 200);
      }
      else
      {
        v23 = L".";
      }
      ZoneScopeDirectory = File_CreateZoneScopeDirectory(v23, *(char **)(a1 + 24), 0, v18);
      if ( ZoneScopeDirectory )
      {
        v16 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x10) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
        {
          WPP_SF_S(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x29u,
            (__int64)&WPP_9f3fa3b6e1fd31b2a2f779badde708de_Traceguids,
            *(const unsigned __int16 **)(a1 + 24));
          goto LABEL_92;
        }
        goto LABEL_93;
      }
    }
    ZoneScopeDirectory = Zone_DatabaseSetup(a1, 0, v3, 0, 0, 0i64, 0, 0i64);
    if ( ZoneScopeDirectory )
    {
      v16 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        v17 = 42;
        goto LABEL_49;
      }
LABEL_93:
      if ( ZoneScopeDirectory )
      {
LABEL_94:
        if ( v16 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)v16 + 17) & 0x200000) != 0
          && *((_BYTE *)v16 + 65) >= 2u )
        {
          WPP_SF_Ds(
            *((_QWORD *)v16 + 7),
            0x2Bu,
            (__int64)&WPP_9f3fa3b6e1fd31b2a2f779badde708de_Traceguids,
            ZoneScopeDirectory,
            *(_QWORD *)(a1 + 16));
        }
        *(_DWORD *)(a1 + 388) |= 1u;
        *(_DWORD *)(a1 + 372) = 1;
        Zone_CleanupFailedLoad(a1);
LABEL_86:
        Mem_Free(v3, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\olsrodc.cpp", 1300);
        Mem_Free(v4, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\olsrodc.cpp", 1301);
        return ZoneScopeDirectory;
      }
LABEL_81:
      if ( (*(_BYTE *)(a1 + 1160) & 0x40) != 0
        && v16 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)v16 + 17) & 0x200000) != 0
        && *((_BYTE *)v16 + 65) >= 4u )
      {
        WPP_SF_s(
          *((_QWORD *)v16 + 7),
          0x2Cu,
          (__int64)&WPP_9f3fa3b6e1fd31b2a2f779badde708de_Traceguids,
          *(const char **)(a1 + 16));
      }
      goto LABEL_86;
    }
    *(_QWORD *)(a1 + 840) = v4;
    v4 = 0i64;
    Xfr_InitializeSecondaryZoneTimeouts(a1, v24);
    Xfr_InitializeSecondaryZoneControl();
    AddrArray = Reg_GetAddrArrayEx(0i64, a1, "LocalMasterServers", 0, 0i64);
    v27 = AddrArray;
    if ( AddrArray )
    {
      if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0 )
        Dbg_DnsAddrArray("Local masters array from registry", (__int64)AddrArray);
      for ( i = 0; i < v27[1]; *(_WORD *)((char *)v27 + v29 + 34) = 13568 )
        v29 = (unsigned __int64)i++ << 6;
      Timeout_FreeWithFunctionEx(
        *(_QWORD *)(a1 + 1176),
        (__int64)DnsAddrArray_Free,
        (__int64)"ds\\dns\\server\\server\\olsrodc.cpp",
        1268);
      *(_QWORD *)(a1 + 1176) = v27;
    }
    v33 = *(_QWORD *)(a1 + 1176);
    if ( *(_QWORD *)(a1 + 184) )
      Dns_SetPropsWithScopeSnapShot((__int64 *)a1, 0x200u, (__int64)v32, v26);
LABEL_80:
    v16 = WPP_GLOBAL_Control;
    goto LABEL_81;
  }
  ZoneScopeDirectory = ZoneScopes_LockAll(a1, 1, -1, v34, v31);
  if ( !ZoneScopeDirectory )
  {
    for ( j = v31[0]; j; j = (__int64 *)j[1] )
    {
      ZoneScopeDirectory = DnsOls_ConvertReadOnlyZoneScope((struct _zone_info *)*j);
      if ( ZoneScopeDirectory )
        break;
    }
    ZoneScopes_UnLockAll(a1, v6, v31);
    Free_ScopeList(v31[0]);
    if ( ZoneScopeDirectory )
      goto LABEL_53;
    goto LABEL_20;
  }
  Free_ScopeList(v31[0]);
  return ZoneScopeDirectory;
}
// 1400FD1C9: variable 'v6' is possibly undefined
// 1400FD426: variable 'v18' is possibly undefined
// 1400FD4DB: variable 'v24' is possibly undefined
// 1400FD591: variable 'v26' is possibly undefined
// 1401560E0: using guessed type __int64 __fastcall DnsAddrArray_Free();
// 1401B8C94: using guessed type int g_fDsReadOnlyDcMode;
// 1401B9750: using guessed type int dword_1401B9750;
