Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 228
// Total lines: 434

//----- (000000014001D0CC) ----------------------------------------------------
__int16 __fastcall Dbg_DnsMessage(const char *a1, __int64 a2, __int64 a3)
{
  unsigned __int16 v3; // r15
  __int64 v4; // rdi
  u_short v5; // r13
  __int64 v6; // rax
  const char *v7; // rdx
  CDnsClientSubnetRecordsTrie *v8; // r10
  const char *v9; // rax
  const char *v10; // rdx
  const char *v11; // rax
  __int64 v12; // rdx
  __int64 v13; // r8
  char v14; // dl
  const char *v15; // r15
  const char *v16; // r14
  unsigned int v17; // eax
  const char *v18; // rbp
  const char *v19; // rsi
  const char *v20; // rbx
  unsigned int v21; // ecx
  const char *v22; // rdi
  char *v23; // r13
  unsigned int v24; // eax
  const char *v25; // r12
  char v26; // al
  __int64 v27; // r8
  u_short v28; // si
  u_short v29; // r12
  u_short v30; // bx
  u_short v31; // cx
  __int16 v32; // ax
  u_short v33; // ax
  __int64 v34; // rcx
  unsigned __int16 v35; // dx
  unsigned __int64 v36; // rsi
  int v37; // r12d
  __int64 v38; // rbx
  unsigned __int16 v39; // cx
  __int16 v40; // dx
  unsigned __int16 v41; // dx
  __int64 v42; // rax
  __int64 v43; // rdx
  __int64 v44; // r8
  const char *v45; // rcx
  int v46; // eax
  __int64 v47; // rcx
  int v48; // r9d
  unsigned __int16 v49; // dx
  int v50; // ecx
  u_short v52; // [rsp+70h] [rbp-58h]
  u_short v53; // [rsp+72h] [rbp-56h]
  u_short v54; // [rsp+74h] [rbp-54h]
  int v55; // [rsp+78h] [rbp-50h]
  const char *v56; // [rsp+80h] [rbp-48h]
  unsigned __int16 v58; // [rsp+E0h] [rbp+18h]
  u_short v59; // [rsp+E0h] [rbp+18h]
  u_short v60; // [rsp+E8h] [rbp+20h]

  v3 = *(_WORD *)(a2 + 6302);
  v4 = a2;
  v58 = v3;
  v5 = 0;
  if ( v3 < 0xCu )
  {
    v6 = (__int64)&WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x1000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      v7 = "UDP";
      if ( *(_BYTE *)(v4 + 1413) )
        v7 = "TCP";
      LOWORD(v6) = WPP_SF_ssqd(*((_QWORD *)WPP_GLOBAL_Control + 7), (__int64)v7, (__int64)"TCP", a1, (__int64)v7);
    }
    return v6;
  }
  v8 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
  {
    if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x1000) != 0 && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
    {
      v9 = "query";
      if ( *(char *)(a2 + 6306) < 0 )
        v9 = "response";
      v10 = "UDP";
      if ( *(_BYTE *)(v4 + 1413) )
        v10 = "TCP";
      WPP_SF_sssq(*((_QWORD *)WPP_GLOBAL_Control + 7), (__int64)v10, (__int64)"TCP", a1, (__int64)v10, (__int64)v9);
      v8 = WPP_GLOBAL_Control;
    }
    if ( v8 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
    {
      if ( (*((_DWORD *)v8 + 17) & 0x1000) != 0 && *((_BYTE *)v8 + 65) >= 5u )
      {
        WPP_SF_dddDDD(*((_QWORD *)v8 + 7), a2, a3, v3);
        v8 = WPP_GLOBAL_Control;
      }
      if ( v8 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
      {
        if ( (*((_DWORD *)v8 + 17) & 0x1000) != 0 && *((_BYTE *)v8 + 65) >= 5u )
        {
          ntohs(*(_WORD *)(v4 + 66));
          v11 = DnsAddr_Ntoa((struct in_addr *)(v4 + 64));
          WPP_SF_HsDD(*((_QWORD *)WPP_GLOBAL_Control + 7), v12, v13, *(_WORD *)(v4 + 6304), (__int64)v11);
          v8 = WPP_GLOBAL_Control;
        }
        if ( v8 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
        {
          if ( (*((_DWORD *)v8 + 17) & 0x1000) != 0 && *((_BYTE *)v8 + 65) >= 5u )
          {
            v14 = *(_BYTE *)(v4 + 6307);
            v15 = "-AD";
            v16 = "-CD";
            v17 = v14 & 0xF;
            v18 = "-RA";
            v19 = "-RD";
            v20 = "-AA";
            if ( v17 > 0x13 )
              v17 = 19;
            v21 = *(unsigned __int8 *)(v4 + 6306);
            v22 = "-TC";
            v23 = ResponseCodeStringTable[v17];
            v24 = (v21 >> 3) & 0xF;
            if ( v24 > 6 )
              v24 = 6;
            v25 = OpcodeStringTable[v24];
            if ( (v14 & 0x20) != 0 )
              v15 = "+AD";
            if ( (v14 & 0x10) != 0 )
              v16 = "+CD";
            if ( v14 < 0 )
              v18 = "+RA";
            if ( (v21 & 1) != 0 )
              v19 = "+RD";
            if ( (v21 & 2) != 0 )
              v22 = "+TC";
            if ( (v21 & 4) != 0 )
              v20 = "+AA";
            v26 = ntohs(*(_WORD *)(a2 + 6306));
            WPP_SF_sdsdHssssss(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              (*(unsigned __int8 *)(a2 + 6306) >> 3) & 0xF,
              v27,
              v25,
              (*(_BYTE *)(a2 + 6306) >> 3) & 0xF,
              (__int64)v23,
              *(_BYTE *)(a2 + 6307) & 0xF,
              v26,
              (__int64)v20,
              (__int64)v22,
              (__int64)v19,
              (__int64)v18,
              (__int64)v16,
              (__int64)v15);
            v8 = WPP_GLOBAL_Control;
            v4 = a2;
            v3 = v58;
            v5 = 0;
          }
          if ( v8 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)v8 + 17) & 0x1000) != 0
            && *((_BYTE *)v8 + 65) >= 5u )
          {
            WPP_SF_dddd(
              *((_QWORD *)v8 + 7),
              0x4Cu,
              (__int64)&WPP_8b928f4d7aae3be62a0fe9158b6696cb_Traceguids,
              *(unsigned __int16 *)(v4 + 6308));
            v8 = WPP_GLOBAL_Control;
          }
        }
      }
    }
  }
  v28 = *(_WORD *)(v4 + 6308);
  v29 = *(_WORD *)(v4 + 6310);
  v30 = *(_WORD *)(v4 + 6312);
  v31 = *(_WORD *)(v4 + 6314);
  v52 = v28;
  v53 = v29;
  v59 = v30;
  v60 = v31;
  if ( v28 )
  {
    v32 = *(_WORD *)(v4 + 6308);
  }
  else
  {
    if ( !v30 )
      goto LABEL_54;
    v32 = *(_WORD *)(v4 + 6312);
  }
  if ( (v32 & 0xFF00) != 0 )
  {
    ntohs(*(_WORD *)(v4 + 6304));
    v52 = ntohs(v28);
    v28 = v52;
    v53 = ntohs(v29);
    v30 = ntohs(v30);
    v59 = v30;
    v33 = ntohs(v60);
    v8 = WPP_GLOBAL_Control;
    v31 = v33;
    v60 = v33;
  }
LABEL_54:
  LOWORD(v6) = v28 | v30 | v31;
  if ( (v6 & 0xFF00) != 0 )
  {
    if ( v8 == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_DWORD *)v8 + 17) & 0x1000) == 0
      || *((_BYTE *)v8 + 65) < 3u )
    {
      return v6;
    }
    v34 = *((_QWORD *)v8 + 7);
    v35 = 77;
LABEL_130:
    LOWORD(v6) = WPP_SF_(v34, v35, (__int64)&WPP_8b928f4d7aae3be62a0fe9158b6696cb_Traceguids);
    return v6;
  }
  if ( *(char *)(v4 + 6306) < 0 && *(_WORD *)(v4 + 496) == 3 )
  {
    LOWORD(v6) = ntohs(*(_WORD *)(v4 + 66));
    if ( (_WORD)v6 == 137 )
    {
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x1000) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 5u )
      {
        return v6;
      }
      v34 = *((_QWORD *)WPP_GLOBAL_Control + 7);
      v35 = 78;
      goto LABEL_130;
    }
    v8 = WPP_GLOBAL_Control;
    v31 = v60;
  }
  v36 = v4 + 6316;
  v37 = 0;
  while ( 1 )
  {
    if ( v37 )
    {
      switch ( v37 )
      {
        case 1:
          v5 = v53;
          break;
        case 2:
          v5 = v30;
          break;
        case 3:
          v5 = v31;
          break;
      }
    }
    else
    {
      v5 = v52;
    }
    LOWORD(v6) = v5;
    v55 = 0;
    if ( v5 )
      break;
LABEL_97:
    if ( ++v37 >= 4 )
    {
      LOWORD(v6) = v36 - v4 - 6304;
      if ( (unsigned __int16)v6 < v3 )
      {
        v50 = (unsigned __int16)v6 + 2;
        LOWORD(v6) = v3;
        if ( v50 == v3 )
        {
          if ( v8 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)v8 + 17) & 0x1000) != 0
            && *((_BYTE *)v8 + 65) >= 5u )
          {
            LOWORD(v6) = WPP_SF_cc(*((_QWORD *)v8 + 7), 6304i64, 0i64, *(_BYTE *)v36);
          }
        }
        else if ( v8 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
               && (*((_DWORD *)v8 + 17) & 0x1000) != 0
               && *((_BYTE *)v8 + 65) >= 2u )
        {
          LOWORD(v6) = WPP_SF_q(
                         *((_QWORD *)v8 + 7),
                         0x56u,
                         (__int64)&WPP_8b928f4d7aae3be62a0fe9158b6696cb_Traceguids,
                         v4);
        }
      }
      return v6;
    }
    v31 = v60;
  }
  v38 = v37;
  while ( 1 )
  {
    v39 = v36 - v4 - 6304;
    if ( v39 >= v3 )
      break;
    if ( v36 >= *(_QWORD *)(v4 + 24) )
    {
      if ( v8 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)v8 + 17) & 0x1000) != 0
        && *((_BYTE *)v8 + 65) >= 2u )
      {
        LOWORD(v6) = WPP_SF_qq(
                       *((_QWORD *)v8 + 7),
                       0x50u,
                       (__int64)&WPP_8b928f4d7aae3be62a0fe9158b6696cb_Traceguids,
                       v36,
                       *(_QWORD *)(v4 + 24));
      }
      return v6;
    }
    v6 = (__int64)Dbg_PacketName((unsigned __int8 *)v36, v4 + 6304, v4 + *(unsigned __int16 *)(v4 + 6302) + 6304i64);
    v56 = (const char *)v6;
    if ( !v6 )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x1000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        LOWORD(v6) = WPP_SF_Dq(
                       *((_QWORD *)WPP_GLOBAL_Control + 7),
                       0x51u,
                       (__int64)&WPP_8b928f4d7aae3be62a0fe9158b6696cb_Traceguids,
                       (unsigned __int16)(v36 - v4 - 6304));
      }
      return v6;
    }
    v6 = Wire_SkipPacketName(v4, v36);
    v36 = v6;
    if ( !v6 )
    {
      v8 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x1000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        WPP_SF_Dq(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x52u,
          (__int64)&WPP_8b928f4d7aae3be62a0fe9158b6696cb_Traceguids,
          (unsigned __int16)(-6304 - v4));
        v8 = WPP_GLOBAL_Control;
      }
LABEL_96:
      v30 = v59;
      goto LABEL_97;
    }
    v40 = v6;
    LOWORD(v6) = 6300;
    v41 = v40 - v4 - 6300;
    if ( v41 > v3 )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x1000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        v47 = *((_QWORD *)WPP_GLOBAL_Control + 7);
        v48 = v41;
        v49 = 83;
LABEL_115:
        LOWORD(v6) = WPP_SF_Dd(v47, v49, (__int64)&WPP_8b928f4d7aae3be62a0fe9158b6696cb_Traceguids, v48);
        return v6;
      }
      return v6;
    }
    if ( v38 )
    {
      if ( v38 == 1 )
      {
        v45 = "ANSWER    ";
      }
      else
      {
        v45 = "AUTHORITY ";
        if ( v38 != 2 )
          v45 = "ADDITIONAL";
      }
      v46 = Dbg_DnsRecord(v45, v56, v36, v4);
      v8 = WPP_GLOBAL_Control;
      v36 += v46;
    }
    else
    {
      v54 = ntohs(*(_WORD *)v36);
      ntohs(*(_WORD *)(v36 + 2));
      v8 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x1000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
      {
        v42 = DnsRecordStringForType(v54);
        WPP_SF_ssDd(*((_QWORD *)WPP_GLOBAL_Control + 7), v43, v44, v56, v42);
        v8 = WPP_GLOBAL_Control;
        v4 = a2;
        v38 = v37;
      }
      v36 += 4i64;
    }
    LODWORD(v6) = v55 + 1;
    v55 = v6;
    if ( (int)v6 >= v5 )
      goto LABEL_96;
  }
  if ( v8 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)v8 + 17) & 0x1000) != 0
    && *((_BYTE *)v8 + 65) >= 2u )
  {
    v48 = v39;
    v49 = 79;
    v47 = *((_QWORD *)v8 + 7);
    goto LABEL_115;
  }
  return v6;
}
// 14001D242: variable 'a2' is possibly undefined
// 14001D242: variable 'a3' is possibly undefined
// 14001D29C: variable 'v12' is possibly undefined
// 14001D29C: variable 'v13' is possibly undefined
// 14001D402: variable 'v27' is possibly undefined
// 14001D713: variable 'v43' is possibly undefined
// 14001D713: variable 'v44' is possibly undefined
// 14017B6C0: using guessed type char *OpcodeStringTable[7];
// 14017B700: using guessed type char *ResponseCodeStringTable[20];
// 140183D38: using guessed type __int64 __fastcall DnsRecordStringForType(_QWORD);
