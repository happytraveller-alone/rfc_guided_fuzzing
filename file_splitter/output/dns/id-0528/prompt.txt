Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 528
// Total lines: 267

//----- (0000000140048C54) ----------------------------------------------------
__int64 __fastcall Ds_ErrorHandler(ULONG err, __int64 a2, struct ldap *a3, char a4)
{
  PLDAP v5; // rsi
  unsigned int v8; // edi
  PWCHAR v9; // rax
  bool v10; // zf
  PWCHAR v11; // rax
  PWCHAR v12; // rax
  PWCHAR v13; // rax
  PWCHAR v14; // rax
  unsigned int CurrentTimeInSeconds; // eax
  PWCHAR v16; // rax
  PWCHAR v17; // rax
  unsigned __int16 *v18; // rax
  __int128 v19; // [rsp+40h] [rbp-18h] BYREF
  unsigned __int16 *v20; // [rsp+70h] [rbp+18h] BYREF

  v5 = a3;
  if ( (a3 != (struct ldap *)g_pFsmoServerLdap || !g_bDisabledFsmo) && (a3 != pServerLdap || !g_bDisabledDs) )
  {
    v8 = 13;
    if ( !a3 )
      v5 = pServerLdap;
    if ( err > 0x33 )
    {
      if ( err <= 0x54 )
      {
        if ( err >= 0x52 )
          goto LABEL_80;
        if ( err != 52 )
        {
          if ( err == 53 )
            goto LABEL_87;
          if ( err == 54 )
            goto LABEL_80;
          if ( err <= 0x3F )
            goto LABEL_21;
          if ( err <= 0x41 )
            goto LABEL_80;
          if ( err == 68 )
            goto LABEL_58;
          if ( err == 80 )
            goto LABEL_80;
          if ( err != 81 )
            goto LABEL_21;
        }
        EnterCriticalSection(pcsLdap);
        if ( !v5 || v5 == pServerLdap )
        {
          g_bDisabledDs = 1;
        }
        else if ( v5 == (PLDAP)g_pFsmoServerLdap )
        {
          g_bDisabledFsmo = 1;
        }
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          v14 = ldap_err2stringW(err);
          WPP_SF_DS(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x1E9u,
            (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
            err,
            (__int64)v14);
        }
        v8 = 9002;
        if ( (a4 & 1) != 0
          || (CurrentTimeInSeconds = Dns_GetCurrentTimeInSeconds(),
              dword_1401B9714 = CurrentTimeInSeconds,
              CurrentTimeInSeconds <= g_NextEventWindowTime) )
        {
          LeaveCriticalSection(pcsLdap);
          return v8;
        }
        g_NextEventWindowTime = CurrentTimeInSeconds + 300;
        LeaveCriticalSection(pcsLdap);
LABEL_85:
        logDsError(v5, a2, err);
        return v8;
      }
      if ( err == 85 )
      {
        v18 = L"---";
        if ( a2 )
          v18 = (unsigned __int16 *)a2;
        v20 = v18;
        if ( (a4 & 1) == 0 )
        {
          v19 = DNS_EVENT_DS_LDAP_TIMEOUT;
          Eventlog_LogEvent((__int64)&v19, a2, 1u, &v20, 0i64, 85, 0, 0i64);
        }
        return 9002;
      }
      if ( err != 86 )
      {
        if ( err == 87 )
          goto LABEL_80;
        if ( err <= 0x58 )
          goto LABEL_21;
        if ( err <= 0x5D )
          goto LABEL_80;
        if ( err <= 0x5F )
          return err;
        v10 = err == -1;
        goto LABEL_79;
      }
    }
    else
    {
      if ( err == 51 )
        goto LABEL_80;
      if ( err <= 0x14 )
      {
        if ( err != 20 )
        {
          if ( err <= 0xD )
          {
            if ( err < 0xB )
            {
              if ( err )
              {
                if ( err > 2 )
                {
                  if ( err - 9 > 1 )
                  {
LABEL_21:
                    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
                      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
                    {
                      v9 = ldap_err2stringW(err);
                      WPP_SF_DS(
                        *((_QWORD *)WPP_GLOBAL_Control + 7),
                        0x1EAu,
                        (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
                        err,
                        (__int64)v9);
                    }
                    return v8;
                  }
                  return 9002;
                }
                goto LABEL_80;
              }
              return err;
            }
LABEL_80:
            if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
              && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
            {
              v16 = ldap_err2stringW(err);
              WPP_SF_DS(
                *((_QWORD *)WPP_GLOBAL_Control + 7),
                0x1E4u,
                (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
                err,
                (__int64)v16);
            }
            v8 = 9002;
            if ( (a4 & 1) != 0 )
              return v8;
            goto LABEL_85;
          }
          if ( err != 16 && err != 18 )
          {
            v10 = err == 19;
LABEL_79:
            if ( !v10 )
              goto LABEL_21;
            goto LABEL_80;
          }
        }
LABEL_58:
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          v13 = ldap_err2stringW(err);
          WPP_SF_DS(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x1E5u,
            (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
            err,
            (__int64)v13);
        }
        return err;
      }
      switch ( err )
      {
        case 0x15u:
          goto LABEL_80;
        case 0x20u:
          goto LABEL_58;
        case 0x22u:
          goto LABEL_80;
        case 0x30u:
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            v12 = ldap_err2stringW(0x30u);
            WPP_SF_DS(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x1E6u,
              (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
              48,
              (__int64)v12);
          }
          return 9571;
      }
      if ( err != 49 )
      {
        if ( err == 50 )
        {
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            v11 = ldap_err2stringW(0x32u);
            WPP_SF_DS(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x1E8u,
              (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
              50,
              (__int64)v11);
          }
          return 5;
        }
        goto LABEL_21;
      }
    }
LABEL_87:
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      v17 = ldap_err2stringW(err);
      WPP_SF_DS(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x1E7u,
        (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
        err,
        (__int64)v17);
    }
    return 9005;
  }
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x1E2u, (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids);
  }
  return 9002i64;
}
// 1400490AB: variable 'a2' is possibly undefined
// 140187370: using guessed type __int128 DNS_EVENT_DS_LDAP_TIMEOUT;
// 14018C9F8: using guessed type wchar_t asc_14018C9F8[4];
// 1401B8CF8: using guessed type int g_bDisabledFsmo;
// 1401B8D00: using guessed type __int64 g_pFsmoServerLdap;
// 1401B8D6C: using guessed type int g_NextEventWindowTime;
// 1401B9714: using guessed type int dword_1401B9714;
// 1401EC330: using guessed type int g_bDisabledDs;
// 140048C54: using guessed type __int128 var_18;
##############################
Role: Let's assume that you are an advanced reverse engineer and you are reverse engineering a network driver using IDA Pro, and you are also familiar with the RFC documentation. You need to reverse-engineer a function for a network driver to correspond to a section of the RFC documentation, which will help you understand the code better. The driver you're reversing is Schannel.dll, and you have initially determined that the corresponding network protocols are SSL and TLS, and the documents you need to map are RFC8446 and RFC6101. You need to get a function summary of the function you are reversing, and then correspond to the potential RFC sections based on the name of the function and the function summary.
Function Background: The function is reverse engineered from the driver file Schannel.dll on Windows platform. Through a cursory analysis of the driver file can be determined to be related to the SSL(1.3), TLS(3.0) protocol, that is, with RFC8446, RFC6101 strong correlation.

Output Function Summary: Summarizes the function's functionality with several phrases instead of sentences, focuses on covering the function's control flow information, and highlights the protocol function points implemented by the function. Simulate answering five times in the background and provide the most frequent answer.

Retrieve document sections: giving matches for document sections(FunctionMatchRFCResult) that the code may related to. NOTE if the code is only business related(i.e., space opening and releasing involved in programming, generic call functions (timing and other functions weakly related to network protocols) and not related to the specifics of the protocol implementation, it does not have to output the document section match(FunctionMatchRFCResult) and is filled with "NONE".

Retrieve document sections Thinking Chain: The function code is matched with the RFC document section, and the thinking chain is provided to help you solve the problem better:
	1. Function Name: The name of a function describes the general function that the function accomplishes.
	2. Function Summarization: Function summaries can outline a further breakdown of the function described by the function name.
	3. Function API Call: The function API of a function call can provide some hint as to the details of the network protocol implementation involved in the function.
	4. Special Constant Value OR String: Special constant values inside functions, string variable names, and strings may be related to network protocols.
	5. Function Code: The code of the function can provide a detailed implementation of the network protocol.
Generate Function Information Collection with JSON Format:

{
	"FunctionIndex": "(FILL WITH "File count" with less than four bits are indexed with zeros to make up the four bits.)",
	"FunctionName": "(Full Function Code Name)",
	"FunctionSummarization": [
		"(Function Summary Phrase1)",
		"(Function Summary Phrase2)",
		"(...)"
	],
	"FunctionMatchRFCResult": [
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 1)",
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 2)",
		"(...)"
	],
}

ATTENTION: Remember YOU MUST ONLY output the Function Information Collection result.
