Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 951
// Total lines: 357

//----- (0000000140080230) ----------------------------------------------------
__int64 __fastcall Dnssrv_R_DnssrvOperation4(
        void *a1,
        __int64 a2,
        __int64 a3,
        __int64 a4,
        wchar_t *String1,
        char *Str2,
        WCHAR *a7,
        int FilterForMultiZoneName,
        char *a9,
        int a10,
        __int64 a11)
{
  int v11; // r13d
  unsigned int VirtualizationInstance; // edi
  int ZoneScope; // eax
  CDnsClientSubnetRecordsTrie *v15; // rcx
  unsigned __int16 v16; // dx
  __int64 v17; // rbx
  __int64 v18; // r14
  int v19; // edi
  const char **v20; // r12
  unsigned int v21; // r12d
  const char *v22; // rax
  __int64 v23; // r9
  CDnsClientSubnetRecordsTrie *v24; // rcx
  unsigned __int16 v25; // dx
  const char *MatchingFunction; // r13
  const char *v27; // rax
  unsigned int v28; // eax
  CDnsClientSubnetRecordsTrie *v29; // rcx
  unsigned __int16 v30; // dx
  int v31; // r9d
  const char *v32; // rax
  unsigned int v33; // eax
  __int64 *NextZoneMatchingFilter; // r14
  __int64 v35; // r15
  signed int v36; // eax
  __int64 v38; // [rsp+68h] [rbp-89h] BYREF
  const char *v39; // [rsp+70h] [rbp-81h]
  const char *v40; // [rsp+78h] [rbp-79h]
  __int64 v41; // [rsp+80h] [rbp-71h] BYREF
  __int64 v42; // [rsp+88h] [rbp-69h] BYREF
  const char *v43; // [rsp+90h] [rbp-61h]
  __int64 v44; // [rsp+98h] [rbp-59h] BYREF
  __int64 v45; // [rsp+A0h] [rbp-51h] BYREF
  char v46[8]; // [rsp+A8h] [rbp-49h] BYREF
  int v47; // [rsp+B0h] [rbp-41h]
  unsigned int v48; // [rsp+130h] [rbp+3Fh]

  v48 = a2;
  v11 = 0;
  v45 = 0i64;
  v44 = a11;
  v42 = 0i64;
  v39 = 0i64;
  v40 = 0i64;
  v43 = 0i64;
  v38 = 0i64;
  v41 = 0i64;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_DDSsSSdsd(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      a2,
      a3,
      (int)a1,
      a2,
      (__int64)String1,
      (__int64)Str2,
      (__int64)String1,
      (__int64)a7,
      FilterForMultiZoneName,
      (__int64)a9);
  }
  VirtualizationInstance = Rpc_InitialGate(a1);
  if ( VirtualizationInstance )
    goto LABEL_109;
  ZoneScope = DnsRpc_ConvertToCurrent(&a10, &v44);
  VirtualizationInstance = ZoneScope;
  if ( ZoneScope )
  {
    v15 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      v16 = 22;
LABEL_11:
      WPP_SF_D(*((_QWORD *)v15 + 7), v16, (__int64)&WPP_3680a6bb367232ba381f4336b2d99075_Traceguids, ZoneScope);
      goto LABEL_109;
    }
    goto LABEL_109;
  }
  if ( String1 && *String1 && _wcsicmp(String1, L".") && !_stricmp(Str2, "..Cache") )
  {
LABEL_16:
    VirtualizationInstance = 9611;
    goto LABEL_109;
  }
  v17 = v44;
  if ( a9 )
  {
    if ( !_stricmp(a9, "ZoneExport")
      || !_stricmp(a9, "DeleteNode")
      || !_stricmp(a9, "DeleteRecordSet")
      || !_stricmp(a9, "CreateZoneScope")
      || !_stricmp(a9, "DeleteZoneScope")
      || !_stricmp(a9, "ResetDwordProperty")
      || !_stricmp(a9, "CreatePolicy")
      || !_stricmp(a9, "DeletePolicy")
      || !_stricmp(a9, "UpdatePolicy") )
    {
      HIDWORD(v38) = 1;
    }
    else if ( !_stricmp(a9, "ZoneCreate") && a10 == 40 && v17 && *(_DWORD *)(v17 + 40) )
    {
      Dp_FindPartitionForZone(*(_DWORD *)(v17 + 88), *(char **)(v17 + 96), 0, &v42);
    }
  }
  if ( !_stricmp(a9, "RetrieveRootTrustAnchors") )
    v11 = 1;
  VirtualizationInstance = RpcUtil_FindVirtualizationInstance(String1, &v41);
  if ( VirtualizationInstance )
    goto LABEL_109;
  VirtualizationInstance = RpcUtil_FindZoneEx(Str2, SBYTE4(v38), &v45, v11, v41);
  if ( VirtualizationInstance )
    goto LABEL_109;
  v18 = v45;
  if ( !v45 )
  {
    if ( !Str2 )
    {
LABEL_56:
      v21 = a10;
      MatchingFunction = findMatchingFunction((const char **)&RpcServerOperationTable, a9, a10, &v38);
LABEL_60:
      if ( !MatchingFunction )
      {
        v24 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) == 0
          || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
        {
          goto LABEL_55;
        }
        v25 = 24;
LABEL_54:
        WPP_SF_s(*((_QWORD *)v24 + 7), v25, (__int64)&WPP_3680a6bb367232ba381f4336b2d99075_Traceguids, a9);
LABEL_55:
        VirtualizationInstance = 87;
        goto LABEL_109;
      }
      goto LABEL_66;
    }
    if ( _stricmp(Str2, "..RootHints") )
    {
      if ( FilterForMultiZoneName || (FilterForMultiZoneName = Zone_GetFilterForMultiZoneName(Str2)) != 0 )
      {
        v19 = 0;
        v20 = (const char **)off_14017AD60;
        while ( _stricmp(a9, *v20) )
        {
          ++v19;
          ++v20;
          if ( (unsigned __int64)v19 >= 5 )
          {
            v21 = a10;
            v22 = findMatchingFunction((const char **)&RpcZoneOperationTable, a9, a10, &v38);
            v40 = v22;
            goto LABEL_59;
          }
        }
        v24 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
          goto LABEL_55;
        if ( (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0 && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          WPP_SF_s(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x12u,
            (__int64)&WPP_3680a6bb367232ba381f4336b2d99075_Traceguids,
            a9);
          v24 = WPP_GLOBAL_Control;
        }
        if ( v24 == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          || (*((_BYTE *)v24 + 68) & 4) == 0
          || *((_BYTE *)v24 + 65) < 2u )
        {
          goto LABEL_55;
        }
        v25 = 23;
        goto LABEL_54;
      }
      goto LABEL_56;
    }
  }
  v21 = a10;
  v27 = findMatchingFunction((const char **)&RpcZoneOperationTable, a9, a10, &v38);
  v39 = v27;
  if ( v27 )
  {
    MatchingFunction = v43;
    goto LABEL_67;
  }
  v22 = v40;
LABEL_59:
  MatchingFunction = v43;
  if ( !v22 )
    goto LABEL_60;
LABEL_66:
  v27 = v39;
LABEL_67:
  if ( v18 )
  {
    if ( a7 && (v40 || MatchingFunction) )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x19u, (__int64)&WPP_3680a6bb367232ba381f4336b2d99075_Traceguids);
      }
      VirtualizationInstance = 4317;
      goto LABEL_109;
    }
  }
  else if ( v27 )
  {
    v18 = g_pCacheZone;
  }
  v28 = RpcUtil_SessionSecurityInit(v42, v18, v38, v23, (BOOL *)&v38 + 1);
  VirtualizationInstance = v28;
  if ( !v28 )
  {
    v32 = v39;
    if ( v39 )
    {
      if ( (*(_BYTE *)(v18 + 396) & 4) != 0 )
        goto LABEL_16;
      if ( a7 )
      {
        v42 = 0i64;
        if ( _stricmp(a9, "DeleteNode") && _stricmp(a9, "DeleteRecordSet") )
        {
          VirtualizationInstance = 9603;
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            WPP_SF_(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x1Cu,
              (__int64)&WPP_3680a6bb367232ba381f4336b2d99075_Traceguids);
          }
          goto LABEL_109;
        }
        ZoneScope = GetZoneScope(v18, a7, &v42);
        VirtualizationInstance = ZoneScope;
        if ( ZoneScope )
        {
          v15 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            v16 = 27;
            goto LABEL_11;
          }
LABEL_109:
          RpcUtil_SwitchSecurityContext(0);
          if ( (VirtualizationInstance & 0x11D000) != 0 )
            VirtualizationInstance = 9002;
          v29 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            v30 = 29;
            v31 = VirtualizationInstance;
            goto LABEL_115;
          }
          return VirtualizationInstance;
        }
        v18 = v42;
        v32 = v39;
      }
      v33 = ((__int64 (__fastcall *)(_QWORD, __int64, __int64, char *, unsigned int, __int64))v32)(
              v48,
              v41,
              v18,
              a9,
              v21,
              v17);
    }
    else
    {
      if ( v40 )
      {
        memset_0(v46, 0, 0x50ui64);
        v47 = FilterForMultiZoneName;
        NextZoneMatchingFilter = Zone_ListGetNextZoneMatchingFilterEx(0i64, 0i64, (__int64)v46);
        if ( NextZoneMatchingFilter )
        {
          v35 = v41;
          do
          {
            v36 = ((__int64 (__fastcall *)(_QWORD, __int64, __int64 *, char *, unsigned int, __int64))v40)(
                    v48,
                    v35,
                    NextZoneMatchingFilter,
                    a9,
                    v21,
                    v17);
            if ( v36 > (int)VirtualizationInstance )
              VirtualizationInstance = v36;
            NextZoneMatchingFilter = Zone_ListGetNextZoneMatchingFilterEx(0i64, NextZoneMatchingFilter, (__int64)v46);
          }
          while ( NextZoneMatchingFilter );
        }
        goto LABEL_109;
      }
      if ( !MatchingFunction )
        goto LABEL_109;
      v33 = ((__int64 (__fastcall *)(_QWORD, char *, _QWORD, __int64, WCHAR *, __int64))MatchingFunction)(
              v48,
              a9,
              v21,
              v41,
              a7,
              v17);
    }
    VirtualizationInstance = v33;
    goto LABEL_109;
  }
  v29 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
  {
    v30 = 26;
    v31 = v28;
LABEL_115:
    WPP_SF_D(*((_QWORD *)v29 + 7), v30, (__int64)&WPP_3680a6bb367232ba381f4336b2d99075_Traceguids, v31);
  }
  return VirtualizationInstance;
}
// 140080702: variable 'v23' is possibly undefined
// 14017AD60: using guessed type char *off_14017AD60[5];
// 140185140: using guessed type __int64 (__fastcall *_guard_dispatch_icall_fptr)(_QWORD, _QWORD);
// 1401B24C0: using guessed type char *RpcZoneOperationTable;
// 1401B2850: using guessed type char *RpcServerOperationTable;
// 1401EC628: using guessed type __int64 g_pCacheZone;
// 140080230: using guessed type char var_70[8];
##############################
Role: Let's assume that you are an advanced reverse engineer and you are reverse engineering a network driver using IDA Pro, and you are also familiar with the RFC documentation. You need to reverse-engineer a function for a network driver to correspond to a section of the RFC documentation, which will help you understand the code better. The driver you're reversing is Schannel.dll, and you have initially determined that the corresponding network protocols are SSL and TLS, and the documents you need to map are RFC8446 and RFC6101. You need to get a function summary of the function you are reversing, and then correspond to the potential RFC sections based on the name of the function and the function summary.
Function Background: The function is reverse engineered from the driver file Schannel.dll on Windows platform. Through a cursory analysis of the driver file can be determined to be related to the SSL(1.3), TLS(3.0) protocol, that is, with RFC8446, RFC6101 strong correlation.

Output Function Summary: Summarizes the function's functionality with several phrases instead of sentences, focuses on covering the function's control flow information, and highlights the protocol function points implemented by the function. Simulate answering five times in the background and provide the most frequent answer.

Retrieve document sections: giving matches for document sections(FunctionMatchRFCResult) that the code may related to. NOTE if the code is only business related(i.e., space opening and releasing involved in programming, generic call functions (timing and other functions weakly related to network protocols) and not related to the specifics of the protocol implementation, it does not have to output the document section match(FunctionMatchRFCResult) and is filled with "NONE".

Retrieve document sections Thinking Chain: The function code is matched with the RFC document section, and the thinking chain is provided to help you solve the problem better:
	1. Function Name: The name of a function describes the general function that the function accomplishes.
	2. Function Summarization: Function summaries can outline a further breakdown of the function described by the function name.
	3. Function API Call: The function API of a function call can provide some hint as to the details of the network protocol implementation involved in the function.
	4. Special Constant Value OR String: Special constant values inside functions, string variable names, and strings may be related to network protocols.
	5. Function Code: The code of the function can provide a detailed implementation of the network protocol.
Generate Function Information Collection with JSON Format:

{
	"FunctionIndex": "(FILL WITH "File count" with less than four bits are indexed with zeros to make up the four bits.)",
	"FunctionName": "(Full Function Code Name)",
	"FunctionSummarization": [
		"(Function Summary Phrase1)",
		"(Function Summary Phrase2)",
		"(...)"
	],
	"FunctionMatchRFCResult": [
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 1)",
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 2)",
		"(...)"
	],
}

ATTENTION: Remember YOU MUST ONLY output the Function Information Collection result.
