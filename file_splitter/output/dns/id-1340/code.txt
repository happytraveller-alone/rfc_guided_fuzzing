Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 1340
// Total lines: 192

//----- (00000001400AA760) ----------------------------------------------------
__int64 deriveAndTimeSetStats()
{
  _DWORD *v0; // rdx
  unsigned int v1; // edi
  _DWORD *v2; // rcx
  int v3; // edx
  int v4; // r10d
  int v5; // r11d
  int v6; // r8d
  int v7; // r9d
  int v8; // ebx
  int v9; // eax
  int v10; // eax
  int CurrentTimeInSeconds; // eax
  int v12; // ecx
  __int64 result; // rax

  v0 = (_DWORD *)g_UpdateQueue;
  dword_1401C7BB0 = dword_1401C7BA8 - dword_1401C7BAC;
  dword_1401C7BB4 = 7262 * (dword_1401C7BA8 - dword_1401C7BAC);
  *(_DWORD *)pcUdpMessageMemory = dword_1401C7BB4;
  dword_1401C7BCC = g_PacketFreeListCount;
  dword_1401C7BC8 = dword_1401C7BB8 - dword_1401C7BBC;
  dword_1401C7BF4 = dword_1401C7BEC - dword_1401C7BF0;
  dword_1401C7C70 = dword_1401C7C68 - dword_1401C7C6C;
  dword_1401C7C74 = (dword_1401C7C68 - dword_1401C7C6C) * dwNbtBufferLength;
  *(_DWORD *)pcNbstatMemory = dword_1401C7C74;
  dword_1401C7C84 = cNbstatFreeListCount;
  dword_1401C7C80 = dword_1401C7C78 - dword_1401C7C7C;
  dword_1401C81B0 = v0[25];
  *(_DWORD *)pcDynamicUpdateQueued = v0[25];
  dword_1401C81B8 = v0[27];
  *(_DWORD *)pcDynamicUpdateTimeOut = v0[27];
  v1 = dword_1401B810C;
  dword_1401C81BC = v0[24];
  dword_1401C81C0 = *(_DWORD *)(g_UpdateForwardingQueue + 100);
  dword_1401C81CC = *(_DWORD *)(g_UpdateForwardingQueue + 108);
  v2 = &unk_1401B8128;
  dword_1401C81D0 = *(_DWORD *)(g_UpdateForwardingQueue + 96);
  v3 = 0;
  dword_1401B9AAC = dword_1401B9AA4 - dword_1401B9AA8;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  do
  {
    v9 = *(v2 - 5);
    v5 += v9;
    v3 += *(v2 - 3);
    v4 += *v2;
    v6 += *(v2 - 2);
    v7 += *(v2 - 1);
    v2 += 22;
    v10 = v1 * v9;
    v1 = *(v2 - 7);
    v8 += v10;
  }
  while ( v1 < 0xA0 );
  dword_1401B9ABC = v7;
  dword_1401B9A94 = v6 + dword_1401B9AA4;
  dword_1401B9AB4 = v3;
  dword_1401B9AC0 = v6 - v7;
  dword_1401B9A98 = v7 + dword_1401B9AA8;
  dword_1401C83C8 = SecContextCreate;
  dword_1401C83CC = SecContextFree;
  dword_1401B9A9C = v6 + dword_1401B9AA4 - (v7 + dword_1401B9AA8);
  dword_1401C83D8 = SecContextQueue - SecContextQueueInNego;
  dword_1401C83E8 = SecPackAlloc;
  dword_1401C83EC = SecPackFree;
  dword_1401C83F0 = SecTkeyInvalid;
  dword_1401C83F4 = SecTkeyBadTime;
  dword_1401C83F8 = SecTsigFormerr;
  dword_1401C83FC = SecTsigEcho;
  dword_1401C8400 = SecTsigBadKey;
  dword_1401C8404 = SecTsigVerifySuccess;
  dword_1401C8408 = SecTsigVerifyFailed;
  dword_1401C83D0 = SecContextQueue;
  dword_1401C7B64 = SecTsigVerifyOldSig;
  dword_1401B9AA0 = v4 + dword_1401B9AB0;
  dword_1401B9AB8 = v6;
  dword_1401C7B68 = SecTsigVerifyOldFailed;
  dword_1401C7B6C = SecBigTimeSkewBypass;
  dword_1401B9ACC = v4;
  dword_1401B9AC4 = v5;
  dword_1401B9AC8 = v8;
  dword_1401C83D4 = SecContextQueueInNego;
  dword_1401C83E0 = SecContextDequeue;
  dword_1401C83E4 = SecContextTimeout;
  dword_1401C83DC = SecContextQueue - SecContextTimeout - SecContextDequeue;
  CurrentTimeInSeconds = GetCurrentTimeInSeconds((unsigned int)SecContextTimeout, (unsigned int)SecContextQueueInNego);
  v12 = CurrentTimeInSeconds - dword_1401C7FCC;
  result = (unsigned int)(CurrentTimeInSeconds - dword_1401C7FC8);
  dword_1401C7FD0 = result;
  dword_1401C7FD4 = v12;
  return result;
}
// 140183D98: using guessed type __int64 __fastcall GetCurrentTimeInSeconds(_QWORD, _QWORD);
// 1401B810C: using guessed type int dword_1401B810C;
// 1401B8FB0: using guessed type int cNbstatFreeListCount;
// 1401B9A94: using guessed type int dword_1401B9A94;
// 1401B9A98: using guessed type int dword_1401B9A98;
// 1401B9A9C: using guessed type int dword_1401B9A9C;
// 1401B9AA0: using guessed type int dword_1401B9AA0;
// 1401B9AA4: using guessed type int dword_1401B9AA4;
// 1401B9AA8: using guessed type int dword_1401B9AA8;
// 1401B9AAC: using guessed type int dword_1401B9AAC;
// 1401B9AB0: using guessed type int dword_1401B9AB0;
// 1401B9AB4: using guessed type int dword_1401B9AB4;
// 1401B9AB8: using guessed type int dword_1401B9AB8;
// 1401B9ABC: using guessed type int dword_1401B9ABC;
// 1401B9AC0: using guessed type int dword_1401B9AC0;
// 1401B9AC4: using guessed type int dword_1401B9AC4;
// 1401B9AC8: using guessed type int dword_1401B9AC8;
// 1401B9ACC: using guessed type int dword_1401B9ACC;
// 1401B9DF4: using guessed type int SecBigTimeSkewBypass;
// 1401B9DF8: using guessed type int SecTsigVerifyOldFailed;
// 1401B9DFC: using guessed type int SecTsigVerifyOldSig;
// 1401B9E00: using guessed type int SecTsigVerifyFailed;
// 1401B9E04: using guessed type int SecTsigVerifySuccess;
// 1401B9E08: using guessed type int SecTsigBadKey;
// 1401B9E0C: using guessed type int SecTsigEcho;
// 1401B9E10: using guessed type int SecTsigFormerr;
// 1401B9E14: using guessed type int SecTkeyBadTime;
// 1401B9E18: using guessed type int SecTkeyInvalid;
// 1401B9E1C: using guessed type int SecPackFree;
// 1401B9E20: using guessed type int SecPackAlloc;
// 1401B9E24: using guessed type int SecContextTimeout;
// 1401B9E28: using guessed type int SecContextDequeue;
// 1401B9E2C: using guessed type int SecContextQueueInNego;
// 1401B9E30: using guessed type int SecContextQueue;
// 1401B9E34: using guessed type int SecContextFree;
// 1401B9E38: using guessed type int SecContextCreate;
// 1401BA4A8: using guessed type __int64 g_UpdateQueue;
// 1401BA4B0: using guessed type __int64 g_UpdateForwardingQueue;
// 1401C7B64: using guessed type int dword_1401C7B64;
// 1401C7B68: using guessed type int dword_1401C7B68;
// 1401C7B6C: using guessed type int dword_1401C7B6C;
// 1401C7BA8: using guessed type int dword_1401C7BA8;
// 1401C7BAC: using guessed type int dword_1401C7BAC;
// 1401C7BB0: using guessed type int dword_1401C7BB0;
// 1401C7BB4: using guessed type int dword_1401C7BB4;
// 1401C7BB8: using guessed type int dword_1401C7BB8;
// 1401C7BBC: using guessed type int dword_1401C7BBC;
// 1401C7BC8: using guessed type int dword_1401C7BC8;
// 1401C7BCC: using guessed type int dword_1401C7BCC;
// 1401C7BEC: using guessed type int dword_1401C7BEC;
// 1401C7BF0: using guessed type int dword_1401C7BF0;
// 1401C7BF4: using guessed type int dword_1401C7BF4;
// 1401C7BF8: using guessed type __int64 pcUdpMessageMemory;
// 1401C7C68: using guessed type int dword_1401C7C68;
// 1401C7C6C: using guessed type int dword_1401C7C6C;
// 1401C7C70: using guessed type int dword_1401C7C70;
// 1401C7C74: using guessed type int dword_1401C7C74;
// 1401C7C78: using guessed type int dword_1401C7C78;
// 1401C7C7C: using guessed type int dword_1401C7C7C;
// 1401C7C80: using guessed type int dword_1401C7C80;
// 1401C7C84: using guessed type int dword_1401C7C84;
// 1401C7C88: using guessed type __int64 pcNbstatMemory;
// 1401C7FC8: using guessed type int dword_1401C7FC8;
// 1401C7FCC: using guessed type int dword_1401C7FCC;
// 1401C7FD0: using guessed type int dword_1401C7FD0;
// 1401C7FD4: using guessed type int dword_1401C7FD4;
// 1401C81B0: using guessed type int dword_1401C81B0;
// 1401C81B8: using guessed type int dword_1401C81B8;
// 1401C81BC: using guessed type int dword_1401C81BC;
// 1401C81C0: using guessed type int dword_1401C81C0;
// 1401C81CC: using guessed type int dword_1401C81CC;
// 1401C81D0: using guessed type int dword_1401C81D0;
// 1401C83C8: using guessed type int dword_1401C83C8;
// 1401C83CC: using guessed type int dword_1401C83CC;
// 1401C83D0: using guessed type int dword_1401C83D0;
// 1401C83D4: using guessed type int dword_1401C83D4;
// 1401C83D8: using guessed type int dword_1401C83D8;
// 1401C83DC: using guessed type int dword_1401C83DC;
// 1401C83E0: using guessed type int dword_1401C83E0;
// 1401C83E4: using guessed type int dword_1401C83E4;
// 1401C83E8: using guessed type int dword_1401C83E8;
// 1401C83EC: using guessed type int dword_1401C83EC;
// 1401C83F0: using guessed type int dword_1401C83F0;
// 1401C83F4: using guessed type int dword_1401C83F4;
// 1401C83F8: using guessed type int dword_1401C83F8;
// 1401C83FC: using guessed type int dword_1401C83FC;
// 1401C8400: using guessed type int dword_1401C8400;
// 1401C8404: using guessed type int dword_1401C8404;
// 1401C8408: using guessed type int dword_1401C8408;
// 1401C8610: using guessed type __int64 pcDynamicUpdateTimeOut;
// 1401C8618: using guessed type __int64 pcDynamicUpdateQueued;
// 1401CBD88: using guessed type int g_PacketFreeListCount;
// 1401CBDDC: using guessed type int dwNbtBufferLength;
