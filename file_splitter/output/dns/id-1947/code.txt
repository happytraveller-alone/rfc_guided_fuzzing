Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 1947
// Total lines: 183

//----- (00000001400EDF84) ----------------------------------------------------
__int64 DnsOls_CreateNsec3Chains(__int64 a1, __int64 a2, __int64 a3, __int128 *a4, ...)
{
  __int128 *v4; // rsi
  unsigned int updated; // r14d
  __int64 v6; // r13
  __int64 *v7; // rax
  __int64 *v8; // rbx
  __int64 v9; // rcx
  unsigned __int16 *v10; // r12
  __int64 v11; // r15
  __int64 *v12; // rcx
  __int64 *j; // rcx
  __int64 v14; // rdi
  char v15; // cl
  void *v16; // rsi
  int v17; // eax
  struct _DnsTreeNode *v18; // rax
  __int64 v19; // rdx
  struct _DnsTreeNode *v20; // r14
  unsigned __int8 *v21; // rdi
  _QWORD *v22; // rax
  char *v23; // rax
  char *v24; // rax
  char v26[8]; // [rsp+68h] [rbp-71h] BYREF
  __int64 i; // [rsp+70h] [rbp-69h]
  __int64 v28; // [rsp+78h] [rbp-61h]
  __int128 v29; // [rsp+88h] [rbp-51h] BYREF
  __int128 v30; // [rsp+98h] [rbp-41h] BYREF
  __int64 v31; // [rsp+A8h] [rbp-31h]
  __int64 v32[12]; // [rsp+B8h] [rbp-21h] BYREF
  __int64 v37; // [rsp+148h] [rbp+6Fh] BYREF
  va_list va; // [rsp+148h] [rbp+6Fh]
  __int64 v39; // [rsp+150h] [rbp+77h]
  __int64 v40; // [rsp+158h] [rbp+7Fh]
  va_list va1; // [rsp+160h] [rbp+87h] BYREF

  va_start(va1, a4);
  va_start(va, a4);
  v37 = va_arg(va1, _QWORD);
  v39 = va_arg(va1, _QWORD);
  v40 = va_arg(va1, _QWORD);
  v28 = -2i64;
  v4 = a4;
  updated = 0;
  v6 = v37;
  v7 = *(__int64 **)(v37 + 8);
  v8 = (__int64 *)*v7;
  v9 = *(_QWORD *)(*v7 + 32);
  for ( i = v9; ; v9 = i )
  {
    if ( v8 == v7 )
      return updated;
    v30 = 0i64;
    v31 = 0i64;
    LOBYTE(v37) = 0;
    v26[0] = 0;
    if ( g_fDnsServiceExit == 1 )
      break;
    v10 = (unsigned __int16 *)v8[3];
    v11 = v8[4];
    if ( !*((_BYTE *)v8 + 41) )
    {
      v12 = (__int64 *)v8[2];
      if ( *((_BYTE *)v12 + 41) )
      {
        for ( j = (__int64 *)v8[1]; !*((_BYTE *)j + 41) && v8 == (__int64 *)j[2]; j = (__int64 *)j[1] )
          v8 = j;
        v8 = j;
      }
      else
      {
        do
        {
          v8 = v12;
          v12 = (__int64 *)*v12;
        }
        while ( !*((_BYTE *)v12 + 41) );
      }
      v9 = i;
    }
    if ( v8 == v7 )
      v14 = v9;
    else
      v14 = v8[4];
    DnsSign::BuildRRTypeVector(v11, (unsigned __int64 *)&v30, v26, (__int64 *)va);
    if ( !(_BYTE)v37 || (*(_DWORD *)(v11 + 92) & 0x100) != 0 || v26[0] )
    {
      v15 = 0;
    }
    else
    {
      v15 = 1;
      if ( *((_BYTE *)v4 + 3) == 1 )
      {
        v16 = (void *)v30;
        goto LABEL_29;
      }
    }
    v16 = (void *)v30;
    if ( (__int64)(*((_QWORD *)&v30 + 1) - v30) >> 1 && !v15 )
    {
      LOWORD(v37) = 46;
      std::vector<unsigned short>::push_back((unsigned __int64 *)&v30, (unsigned __int16 *)va);
      v16 = (void *)v30;
    }
    v17 = 0;
    if ( a2 == *(_QWORD *)(a1 + 64) )
      v17 = 256;
    v18 = (struct _DnsTreeNode *)Lookup_ZoneNode(a1, 0i64, 0i64, v10, v17 | 0x10u, 0i64, 0i64, 0i64);
    v20 = v18;
    if ( !v18 )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        v24 = Dbg_LookupName(v10);
        WPP_SF_s(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x5Bu,
          (__int64)&WPP_4a0a7bf065bf32df4bbeec8f9c7ea0c3_Traceguids,
          v24);
      }
      updated = 123;
      goto LABEL_43;
    }
    *((_DWORD *)v18 + 23) |= 0x240000u;
    *(_DWORD *)(v11 + 92) |= 0x40000u;
    v21 = BuildNsec3Name(a1, v19, v14, a3);
    v29 = *a4;
    v22 = std::vector<unsigned short>::vector<unsigned short>(v32, (__int64)&v30);
    updated = CreateAndUpdateNsec3ForNode(
                a1,
                a2,
                v11,
                v20,
                a3,
                (__int64)(v21 + 3),
                v21[2],
                (__int64)v22,
                (__int64)&v29,
                0i64,
                v39,
                v40);
    Mem_Free(v21, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\olscore.cpp", 2930);
    if ( updated )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        v23 = Dbg_NodeName(v11);
        WPP_SF_s(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x5Cu,
          (__int64)&WPP_4a0a7bf065bf32df4bbeec8f9c7ea0c3_Traceguids,
          v23);
      }
LABEL_43:
      if ( v16 )
        operator delete(v16);
      return updated;
    }
LABEL_29:
    if ( v16 )
      operator delete(v16);
    v7 = *(__int64 **)(v6 + 8);
    v4 = a4;
  }
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x5Au, (__int64)&WPP_4a0a7bf065bf32df4bbeec8f9c7ea0c3_Traceguids);
  }
  return 1169409;
}
// 1400EE11C: variable 'v19' is possibly undefined
// 140184CA8: using guessed type void __stdcall operator delete(void *);
// 1401B9A40: using guessed type int g_fDnsServiceExit;
// 1400EDF84: using guessed type char var_B0[8];
// 1400EDF84: using guessed type __int64 var_60[12];
