Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 1209
// Total lines: 463

//----- (000000014009C604) ----------------------------------------------------
void __fastcall Send_NameError(struct _DNS_MSGINFO *a1, __int64 *a2)
{
  int v2; // ebx
  __int64 v4; // rsi
  int v5; // r12d
  char *v6; // rax
  CDnsClientSubnetRecordsTrie *v7; // r10
  __int64 v8; // r13
  __int64 v9; // r14
  __int64 v10; // r15
  __int64 v11; // rax
  unsigned int v12; // eax
  __int16 v13; // ax
  bool v14; // zf
  int v15; // ebx
  char *v16; // rax
  __int64 *v17; // rbx
  char *v18; // rax
  __int64 v19; // rax
  char v20; // al
  __int64 v21; // rdx
  char *v22; // rax
  _BYTE *v23; // rdx
  int v24; // r10d
  signed __int64 v25; // r9
  __int64 v26; // r8
  char v27; // al
  char *v28; // rax
  CDnsClientSubnetRecordsTrie *v29; // rcx
  unsigned __int16 v30; // dx
  char *v31; // rax
  unsigned int v32; // r15d
  CDnsClientSubnetRecordsTrie *v33; // rcx
  unsigned __int16 v34; // dx
  __int64 v35; // r11
  __int64 v36; // [rsp+20h] [rbp-E0h]
  __int64 v37; // [rsp+28h] [rbp-D8h]
  int v38; // [rsp+40h] [rbp-C0h] BYREF
  int v39; // [rsp+44h] [rbp-BCh] BYREF
  __int64 v40; // [rsp+48h] [rbp-B8h] BYREF
  __int64 *v41; // [rsp+50h] [rbp-B0h] BYREF
  unsigned int v42; // [rsp+58h] [rbp-A8h] BYREF
  unsigned int v43; // [rsp+5Ch] [rbp-A4h] BYREF
  __int64 *v44; // [rsp+60h] [rbp-A0h] BYREF
  __int64 v45; // [rsp+68h] [rbp-98h] BYREF
  char v46[2]; // [rsp+70h] [rbp-90h] BYREF
  char v47[270]; // [rsp+72h] [rbp-8Eh] BYREF
  __int16 v48[184]; // [rsp+180h] [rbp+80h] BYREF

  v44 = a2;
  v2 = -1;
  v38 = -1;
  v4 = 0i64;
  v39 = -1;
  v5 = 0;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    v6 = Dbg_NodeName((__int64)a2);
    WPP_SF_qs(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x36u,
      (__int64)&WPP_398a615c07233f5235cf23860937c5e7_Traceguids,
      a1,
      v6);
  }
  *((_BYTE *)a1 + 6307) &= 0xF3u;
  *((_BYTE *)a1 + 6307) |= 3u;
  *((_BYTE *)a1 + 6306) |= 0x80u;
  v7 = WPP_GLOBAL_Control;
  v8 = *((_QWORD *)a1 + 26);
  v9 = *((_QWORD *)a1 + 24);
  v14 = (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) == 0;
  v10 = *((_QWORD *)a1 + 32);
  v41 = (__int64 *)*((_QWORD *)a1 + 25);
  if ( !v14
    && WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
  {
    WPP_SF_qq(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x37u,
      (__int64)&WPP_398a615c07233f5235cf23860937c5e7_Traceguids,
      v9,
      v8);
    v7 = WPP_GLOBAL_Control;
  }
  if ( v8 && (unsigned int)(*(_DWORD *)(v8 + 372) - 3) > 1 )
  {
    v11 = *(_QWORD *)(v8 + 344);
    if ( !v11 )
      goto LABEL_31;
    v12 = *(_DWORD *)(v11 + 64);
    if ( *(_DWORD *)(v8 + 532) > v12 )
      v2 = v12;
    v14 = (*(_BYTE *)(v8 + 396) & 2) == 0;
    v13 = *((_WORD *)a1 + 240);
    v38 = v2;
    v39 = v2;
    if ( v14 )
    {
      if ( v13 != 1 && v13 != 28 && v13 != 255 )
      {
        if ( !v9 )
        {
          if ( *((_QWORD *)a1 + 25) != *(_QWORD *)(v8 + 40)
            || **((unsigned __int16 **)a1 + 175) != *(unsigned __int8 *)(v8 + 384) + 1 )
          {
            goto LABEL_40;
          }
          goto LABEL_28;
        }
        if ( (*(_BYTE *)(v9 + 92) & 1) != 0 )
          goto LABEL_31;
        v14 = *(_QWORD *)v9 == *(_QWORD *)(v8 + 40);
LABEL_27:
        if ( v14 )
          goto LABEL_28;
LABEL_31:
        if ( v9 && (*(_BYTE *)(v9 + 92) & 1) == 0 )
        {
          if ( NTree_NodeOrChildHasRecords(v9, 0) )
          {
            v7 = WPP_GLOBAL_Control;
            if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
              && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
            {
              v15 = *(_DWORD *)(v9 + 92) & 1;
              v16 = Dbg_NodeName(v9);
              LODWORD(v37) = v15;
              v36 = *(_QWORD *)(v9 + 64);
              WPP_SF_sqD(
                *((_QWORD *)WPP_GLOBAL_Control + 7),
                0x38u,
                (__int64)&WPP_398a615c07233f5235cf23860937c5e7_Traceguids,
                v16);
              v7 = WPP_GLOBAL_Control;
            }
            v5 = 1;
LABEL_50:
            if ( v10 && (v19 = *(_QWORD *)(v10 + 64)) != 0 && (*(_BYTE *)(v10 + 92) & 1) == 0 )
            {
              if ( v7 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                && (*((_DWORD *)v7 + 17) & 0x40000) != 0
                && *((_BYTE *)v7 + 65) >= 5u )
              {
                WPP_SF_qqd(
                  *((_QWORD *)v7 + 7),
                  0x3Au,
                  (__int64)&WPP_398a615c07233f5235cf23860937c5e7_Traceguids,
                  v10,
                  v19,
                  0);
              }
            }
            else
            {
              v20 = *((_BYTE *)a1 + 1456);
              if ( !v20 )
              {
                v21 = *((_QWORD *)a1 + 58);
                v45 = 0i64;
                LODWORD(v40) = 0;
                if ( (unsigned int)Answer_QuestionWithWildcard(a1, v21, 0xFFu, 0xFFFF, &v45, &v40) )
                {
                  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
                    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
                  {
                    WPP_SF_q(
                      *((_QWORD *)WPP_GLOBAL_Control + 7),
                      0x3Bu,
                      (__int64)&WPP_398a615c07233f5235cf23860937c5e7_Traceguids,
                      a1);
                  }
                  v5 = 1;
                }
                else if ( (_DWORD)v40 )
                {
                  v29 = WPP_GLOBAL_Control;
                  if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                    || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) == 0
                    || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
                  {
                    goto LABEL_85;
                  }
                  v30 = 60;
LABEL_84:
                  WPP_SF_q(
                    *((_QWORD *)v29 + 7),
                    v30,
                    (__int64)&WPP_398a615c07233f5235cf23860937c5e7_Traceguids,
                    a1,
                    v36,
                    v37);
LABEL_85:
                  Reject_Request((__int64)a1, 2u, 1);
                  return;
                }
                goto LABEL_65;
              }
              if ( v20 != 1 )
              {
LABEL_65:
                v4 = *(_QWORD *)(v8 + 40);
                if ( v4 )
                {
                  Name_NodeToCountName((unsigned __int8 *)v46, *(__int64 **)(v8 + 40), 1);
                  if ( v46[0] )
                  {
                    if ( (unsigned int)Name_ConvertRawNameToLookupName((unsigned __int8 *)v47, (unsigned __int16 *)v48) )
                    {
                      v22 = Etw_LookupName(v48);
                      v23 = (char *)a1 + 5760;
                      v24 = 0;
                      v25 = v22 - ((char *)a1 + 5760);
                      v26 = 512i64;
                      do
                      {
                        if ( v26 == -2147483134 )
                          break;
                        v27 = v23[v25];
                        if ( !v27 )
                          break;
                        *v23++ = v27;
                        --v26;
                      }
                      while ( v26 );
                      if ( !v26 )
                      {
                        --v23;
                        v24 = -2147024774;
                      }
                      *v23 = 0;
                      if ( v24 >= 0 )
                      {
                        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800000) != 0
                          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
                        {
                          v31 = Etw_LookupName(v48);
                          WPP_SF_s(
                            *((_QWORD *)WPP_GLOBAL_Control + 7),
                            0x3Fu,
                            (__int64)&WPP_398a615c07233f5235cf23860937c5e7_Traceguids,
                            v31);
                        }
                        *((_BYTE *)a1 + 6272) = 1;
                      }
                      else if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                             && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800000) != 0
                             && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
                      {
                        v28 = Etw_LookupName(v48);
                        WPP_SF_s(
                          *((_QWORD *)WPP_GLOBAL_Control + 7),
                          0x3Eu,
                          (__int64)&WPP_398a615c07233f5235cf23860937c5e7_Traceguids,
                          v28);
                      }
                    }
                  }
                }
                v32 = v38;
                if ( *((_WORD *)a1 + 240) == 6 )
                  *((_BYTE *)a1 + 1416) = 1;
                goto LABEL_105;
              }
              if ( v7 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                && (*((_DWORD *)v7 + 17) & 0x40000) != 0
                && *((_BYTE *)v7 + 65) >= 4u )
              {
                WPP_SF_q(*((_QWORD *)v7 + 7), 0x3Du, (__int64)&WPP_398a615c07233f5235cf23860937c5e7_Traceguids, a1);
              }
            }
            v5 = 1;
            goto LABEL_65;
          }
          v7 = WPP_GLOBAL_Control;
        }
LABEL_40:
        v17 = v41;
        if ( v41 )
        {
          if ( NTree_NodeOrChildHasRecords((__int64)v41, 0) )
          {
            v7 = WPP_GLOBAL_Control;
          }
          else
          {
            do
              v17 = (__int64 *)*v17;
            while ( v17 && !NTree_NodeOrChildHasRecords((__int64)v17, 0) );
            v41 = v17;
            if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
              && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
            {
              v18 = Dbg_NodeName(*((_QWORD *)a1 + 25));
              WPP_SF_s(
                *((_QWORD *)WPP_GLOBAL_Control + 7),
                0x39u,
                (__int64)&WPP_398a615c07233f5235cf23860937c5e7_Traceguids,
                v18);
            }
            *((_BYTE *)a1 + 6307) &= 0xF3u;
            *((_BYTE *)a1 + 6307) |= 3u;
            v7 = WPP_GLOBAL_Control;
          }
        }
        goto LABEL_50;
      }
      if ( *((_BYTE *)a1 + 1337) )
        goto LABEL_31;
    }
    else if ( v13 == 12 || v13 == 255 )
    {
      goto LABEL_31;
    }
    if ( !v9 )
    {
LABEL_28:
      *((_BYTE *)a1 + 6307) &= 0xF0u;
      v7 = WPP_GLOBAL_Control;
      goto LABEL_31;
    }
    v14 = (*(_BYTE *)(v9 + 92) & 1) == 0;
    goto LABEL_27;
  }
  if ( !v9
    || (*(_BYTE *)(v9 + 92) & 1) == 0
    || *((_BYTE *)a1 + 1415) != 1
    || *((_WORD *)a1 + 3155)
    || !(unsigned int)RR_CheckNameErrorTimeout(v9, 0, *((_DWORD *)a1 + 142), &v39)
    || !RR_FindNextRecordEx(v9, 0xF0F0u, 6u, 0i64, 0, 16) )
  {
    goto LABEL_109;
  }
  v32 = v39;
LABEL_105:
  *((_BYTE *)a1 + 1415) = 2;
  if ( v4 )
  {
    if ( !(unsigned __int16)Wire_WriteRecordsAtNodeToMessage((__int64)a1, v4, 6u, 0i64, 0, 0, 0i64) )
    {
      if ( v5 )
        *((_BYTE *)a1 + 6307) &= 0xF0u;
      goto LABEL_109;
    }
    if ( v5 )
      *((_BYTE *)a1 + 6307) &= 0xF0u;
    if ( v32 != -1 && (*(_DWORD *)(v8 + 372) != 1 || (*(_BYTE *)(v8 + 1040) & 4) == 0) )
      *(_DWORD *)(*((_QWORD *)a1 + 4) - 4i64) = (((v32 << 16) | v32 & 0xFF00) << 8) | ((HIWORD(v32) | v32 & 0xFF0000) >> 8);
    if ( dword_1401B98F8 && (*((_BYTE *)a1 + 592) & 1) != 0 && *((char *)a1 + 598) < 0 )
    {
      v42 = -1;
      acquireRead(DbaseLock, 0xFFFFFFFF, &v42);
      if ( (unsigned int)DnsOls_FailNsec3Responses(v8) )
      {
        v43 = -1;
        releaseRead(DbaseLock, &v43, 1);
        v33 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) == 0
          || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
        {
          goto LABEL_85;
        }
        v34 = 64;
        goto LABEL_132;
      }
      if ( !(unsigned int)Send_AddNsecRecordsToResponse((__int64)a1, v8, (__int64 *)v9, v41, v44, 0, 0, 0) )
      {
        LODWORD(v44) = -1;
        releaseRead(DbaseLock, (unsigned int *)&v44, 1);
        v33 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) == 0
          || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
        {
          goto LABEL_85;
        }
        v34 = 65;
LABEL_132:
        WPP_SF_q(*((_QWORD *)v33 + 7), v34, (__int64)&WPP_398a615c07233f5235cf23860937c5e7_Traceguids, a1);
        goto LABEL_85;
      }
      LODWORD(v41) = -1;
      releaseRead(DbaseLock, (unsigned int *)&v41, 1);
    }
  }
  else
  {
    v38 = 0;
    Send_AddCachedNoExistAuthToMessage(a1, v9, 0i64, &v38);
    if ( !v38 )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        WPP_SF_q(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x42u,
          (__int64)&WPP_398a615c07233f5235cf23860937c5e7_Traceguids,
          a1);
      }
      goto LABEL_85;
    }
  }
  if ( *((_WORD *)a1 + 240) == 6 && v8 )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
    {
      WPP_SF_q(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x43u,
        (__int64)&WPP_398a615c07233f5235cf23860937c5e7_Traceguids,
        a1);
    }
    Stat_IncrementZoneQueryStats(*((_QWORD *)a1 + 26), *((_WORD *)a1 + 240), 3);
    if ( (*((_BYTE *)a1 + 6307) & 0xF) == 3 )
      Stat_IncrementZoneQueryStats(*((_QWORD *)a1 + 26), *((_WORD *)a1 + 240), 0);
    Answer_ContinueNextLookupForQuery(a1);
    return;
  }
LABEL_109:
  _InterlockedAdd(&dword_1401C84B4, 1u);
  if ( *((_DWORD *)a1 + 372)
    && (!dword_1401B98F8
     || (*((_BYTE *)a1 + 592) & 1) == 0
     || *((char *)a1 + 598) >= 0
     || (*((_BYTE *)a1 + 6307) & 0x10) == 0) )
  {
    v29 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x100000) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
    {
      goto LABEL_85;
    }
    v30 = 68;
    goto LABEL_84;
  }
  Stat_IncrementZoneQueryStats(*((_QWORD *)a1 + 26), *((_WORD *)a1 + 240), 3);
  if ( *((_QWORD *)a1 + 57) == v35 )
    Stat_IncrementZoneQueryStats(*((_QWORD *)a1 + 26), *((_WORD *)a1 + 240), 0);
  Send_Msg((__int64)a1, 0);
}
// 14009CB81: variable 'v36' is possibly undefined
// 14009CB81: variable 'v37' is possibly undefined
// 14009D04F: variable 'v35' is possibly undefined
// 1401B98F8: using guessed type int dword_1401B98F8;
// 1401C84B4: using guessed type int dword_1401C84B4;
// 1401EC5E8: using guessed type __int64 DbaseLock;
// 14009C604: using guessed type unsigned __int8 var_2C0[2];
// 14009C604: using guessed type unsigned __int16 var_1B0[184];
// 14009C604: using guessed type unsigned __int8 var_2BE[270];
