Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 380
// Total lines: 548

//----- (0000000140032D0C) ----------------------------------------------------
__int64 __fastcall Dp_ChangeZonePartition(__int64 a1, __int64 a2, __int64 a3)
{
  __int64 v3; // rdi
  int v4; // esi
  CDnsClientSubnetRecordsTrie *v6; // rcx
  const char *v7; // rax
  const char *v8; // rdx
  unsigned int MicrosoftDnsObject; // ebx
  __int64 v10; // rax
  _QWORD *v11; // rsi
  int v12; // eax
  unsigned __int16 *v13; // rax
  __int64 v14; // rax
  int v16; // esi
  unsigned __int16 v17; // dx
  __int64 v18; // rbx
  int started; // eax
  BOOL v20; // ebx
  const wchar_t **valuesW; // rax
  PWCHAR *v22; // rsi
  PWCHAR *v23; // rbx
  CDnsClientSubnetRecordsTrie *v24; // rcx
  const unsigned __int16 *v25; // r9
  unsigned __int16 v26; // dx
  WCHAR *v27; // rsi
  PWCHAR *v28; // rax
  PWCHAR *v29; // rcx
  __int64 v30; // rax
  struct berval **values_lenW; // rax
  __int64 v32; // rbx
  struct berval **v33; // rax
  unsigned __int16 v34; // dx
  PWCHAR *v35; // rax
  ULONG v36; // ebx
  unsigned int v37; // edx
  __int64 v38; // r8
  __int64 *v39; // rsi
  __int64 v40; // rdi
  unsigned __int16 *v41; // rsi
  __int64 v42; // rdx
  unsigned __int16 *v43; // rax
  ULONG ServerControls; // [rsp+28h] [rbp-D8h]
  int v45; // [rsp+40h] [rbp-C0h]
  int v46; // [rsp+44h] [rbp-BCh]
  unsigned __int16 *v47; // [rsp+48h] [rbp-B8h]
  int v48; // [rsp+50h] [rbp-B0h]
  __int64 *v49; // [rsp+58h] [rbp-A8h] BYREF
  ULONG v50[2]; // [rsp+60h] [rbp-A0h]
  PWCHAR *v51; // [rsp+68h] [rbp-98h] BYREF
  __int64 v52; // [rsp+70h] [rbp-90h]
  PWCHAR *vals; // [rsp+78h] [rbp-88h]
  PWSTR dn; // [rsp+80h] [rbp-80h]
  WCHAR *v55; // [rsp+88h] [rbp-78h]
  __int128 v56; // [rsp+90h] [rbp-70h] BYREF
  int v57; // [rsp+A0h] [rbp-60h] BYREF
  const wchar_t *v58; // [rsp+A8h] [rbp-58h]
  PWCHAR *v59; // [rsp+B0h] [rbp-50h]
  int v60; // [rsp+B8h] [rbp-48h] BYREF
  PWSTR v61; // [rsp+C0h] [rbp-40h]
  struct berval **v62; // [rsp+C8h] [rbp-38h]
  int v63; // [rsp+D0h] [rbp-30h] BYREF
  PWSTR v64; // [rsp+D8h] [rbp-28h]
  struct berval **v65; // [rsp+E0h] [rbp-20h]
  __int128 v66; // [rsp+E8h] [rbp-18h] BYREF
  PLDAPControlW v67[2]; // [rsp+F8h] [rbp-8h] BYREF
  int v68; // [rsp+108h] [rbp+8h] BYREF
  const WCHAR *v69; // [rsp+110h] [rbp+10h]
  __int128 *v70; // [rsp+118h] [rbp+18h]
  CHAR v71[16]; // [rsp+120h] [rbp+20h] BYREF
  LDAPMessage *entry; // [rsp+130h] [rbp+30h]
  unsigned __int16 *v73[4]; // [rsp+2B0h] [rbp+1B0h] BYREF
  LDAPModW *attrs[10]; // [rsp+2D0h] [rbp+1D0h] BYREF

  v3 = a1;
  *(_QWORD *)&v56 = a1;
  *(_QWORD *)v50 = a2;
  v48 = 0;
  v4 = 0;
  v45 = 0;
  v46 = 0;
  v47 = 0i64;
  v55 = 0i64;
  vals = 0i64;
  v52 = 0i64;
  dn = 0i64;
  v49 = 0i64;
  v67[1] = 0i64;
  v67[0] = (PLDAPControlW)&SecurityDescriptorControl_DGO;
  v6 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    v7 = "NULL";
    if ( a2 )
      v8 = *(const char **)(a2 + 24);
    else
      v8 = "NULL";
    if ( v3 )
      v7 = *(const char **)(v3 + 16);
    ServerControls = a2;
    WPP_SF_qsqs(*((_QWORD *)WPP_GLOBAL_Control + 7), (__int64)v8, a3, v3, v7);
    v6 = WPP_GLOBAL_Control;
  }
  if ( !v3 || !a2 || (*(_BYTE *)(v3 + 388) & 1) == 0 )
  {
    MicrosoftDnsObject = 13;
LABEL_26:
    if ( v3 )
    {
      if ( v4 && MicrosoftDnsObject )
      {
        v11 = *(_QWORD **)(v3 + 840);
        if ( v6 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_BYTE *)v6 + 68) & 4) != 0
          && *((_BYTE *)v6 + 65) >= 4u )
        {
          WPP_SF_(*((_QWORD *)v6 + 7), 0x8Bu, (__int64)&WPP_0f7f6e0c97433b7ed77e9ce4b2e20f93_Traceguids);
        }
        if ( v46 )
        {
          v12 = Ds_DeleteZone(v3, 0);
          if ( v12 )
          {
            if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
              && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
            {
              WPP_SF_Dd(
                *((_QWORD *)WPP_GLOBAL_Control + 7),
                0x8Cu,
                (__int64)&WPP_0f7f6e0c97433b7ed77e9ce4b2e20f93_Traceguids,
                v12);
            }
          }
        }
        v13 = v47;
        v47 = 0i64;
        *(_QWORD *)(v3 + 840) = v13;
        _InterlockedDecrement((volatile signed __int32 *)(*(_QWORD *)(v3 + 848) + 108i64));
        v14 = v52;
        *(_QWORD *)(v3 + 848) = v52;
        _InterlockedAdd((volatile signed __int32 *)(v14 + 108), 1u);
        Mem_Free(v11, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\dpart.c", 6083);
      }
      *(_DWORD *)(v3 + 396) &= ~0x100u;
      if ( v48 )
        Zone_UnlockAfterWriteEx(v3, 1, (__int64)"ds\\dns\\server\\server\\dpart.c", 206);
    }
    Mem_Free(v47, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\dpart.c", 6098);
    ldap_value_freeW(vals);
    Mem_Free(dn, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\dpart.c", 6100);
    Mem_Free(v55, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\dpart.c", 6101);
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_D(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x8Du,
        (__int64)&WPP_0f7f6e0c97433b7ed77e9ce4b2e20f93_Traceguids,
        MicrosoftDnsObject);
    }
    return MicrosoftDnsObject;
  }
  dn = (PWSTR)Mem_Alloc(0xA02u, 0i64, "ds\\dns\\server\\server\\dpart.c", 5467);
  if ( !dn )
  {
    v6 = WPP_GLOBAL_Control;
    MicrosoftDnsObject = 14;
    goto LABEL_26;
  }
  v10 = *(_QWORD *)(v3 + 848);
  if ( v10 == a2 || !v10 && (*(_BYTE *)(a2 + 100) & 2) != 0 )
  {
    v6 = WPP_GLOBAL_Control;
    MicrosoftDnsObject = 0;
    v4 = 0;
    goto LABEL_26;
  }
  MicrosoftDnsObject = Zone_LockForWriteEx(v3, 1, 0x2710u, (__int64)"ds\\dns\\server\\server\\dpart.c", 113);
  if ( MicrosoftDnsObject )
    goto LABEL_24;
  *(_DWORD *)(v3 + 396) |= 0x100u;
  v48 = 1;
  if ( !*(_QWORD *)(v3 + 192) )
    Ds_ReadZoneProperties(v3, 0i64);
  v47 = (unsigned __int16 *)Dns_StringCopyAllocate(*(char **)(v3 + 840), 0, 1i64, 1);
  if ( !v47 )
    goto LABEL_23;
  v52 = *(_QWORD *)(v3 + 848);
  v45 = 1;
  v16 = 0;
  while ( 1 )
  {
    if ( v16 )
      Sleep(0xBB8u);
    MicrosoftDnsObject = Dp_LoadOrCreateMicrosoftDnsObject(0i64, *(__int64 *)v50, 1);
    if ( MicrosoftDnsObject )
    {
      v6 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
      {
        goto LABEL_70;
      }
      v17 = 127;
      goto LABEL_55;
    }
    MicrosoftDnsObject = Ds_SetZoneDp(v3, *(__int64 *)v50, 1);
    if ( !MicrosoftDnsObject )
      break;
    v6 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
    {
      goto LABEL_70;
    }
    v17 = 128;
LABEL_55:
    WPP_SF_D(*((_QWORD *)v6 + 7), v17, (__int64)&WPP_0f7f6e0c97433b7ed77e9ce4b2e20f93_Traceguids, MicrosoftDnsObject);
    v6 = WPP_GLOBAL_Control;
LABEL_70:
    if ( ++v16 >= 3 )
      goto LABEL_115;
  }
  MicrosoftDnsObject = Ds_AddZone(0i64, v3, 9);
  if ( MicrosoftDnsObject )
  {
    v6 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      WPP_SF_D(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x81u,
        (__int64)&WPP_0f7f6e0c97433b7ed77e9ce4b2e20f93_Traceguids,
        MicrosoftDnsObject);
      v6 = WPP_GLOBAL_Control;
    }
    if ( MicrosoftDnsObject == 68 )
    {
      MicrosoftDnsObject = 9609;
      goto LABEL_25;
    }
    if ( MicrosoftDnsObject == 32 )
      MicrosoftDnsObject = 9002;
  }
  else
  {
    v18 = *(_QWORD *)(v3 + 840);
    *(_QWORD *)(v3 + 840) = v47;
    v46 = 1;
    started = Ds_StartDsZoneSearch(v71, v3, 0i64, 0i64);
    v55 = 0i64;
    *(_QWORD *)(v3 + 840) = v18;
    if ( started )
    {
      MicrosoftDnsObject = Ds_DeleteZone(v3, 0);
      if ( !MicrosoftDnsObject )
        goto LABEL_68;
      v6 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_Dd(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x82u,
          (__int64)&WPP_0f7f6e0c97433b7ed77e9ce4b2e20f93_Traceguids,
          MicrosoftDnsObject);
LABEL_68:
        v6 = WPP_GLOBAL_Control;
      }
      v46 = 0;
      goto LABEL_70;
    }
    MicrosoftDnsObject = Ds_GetNextMessageInSearch((__int64)v71);
    if ( !MicrosoftDnsObject )
    {
      while ( 2 )
      {
        v69 = L"objectClass";
        v58 = L"DC";
        v51 = 0i64;
        v57 = 0;
        v70 = &v66;
        v20 = 0;
        v61 = off_1401B6C28;
        v59 = 0i64;
        v68 = 0;
        v60 = 128;
        v62 = 0i64;
        v63 = 128;
        v65 = 0i64;
        v64 = off_1401B6C40;
        v66 = 0i64;
        valuesW = (const wchar_t **)ldap_get_valuesW(pServerLdap, entry, (const PWSTR)L"dNSTombstoned");
        v22 = (PWCHAR *)valuesW;
        if ( valuesW && *valuesW )
          v20 = _wcsicmp(*valuesW, L"TRUE") == 0;
        ldap_value_freeW(v22);
        if ( !v20 )
        {
          v23 = ldap_get_valuesW(pServerLdap, entry, DsTypeAttributeTable);
          if ( v23 )
          {
            v27 = dn;
            sprintfSafe(dn, 0x501ui64, L"DC=%s,%s", *v23, *(_QWORD *)(v3 + 840));
            attrs[0] = (LDAPModW *)&v57;
            v59 = v23;
            v28 = ldap_get_valuesW(pServerLdap, entry, (const PWSTR)L"objectClass");
            v51 = v28;
            v29 = v28;
            if ( v28 && *v28 )
            {
              v30 = 0i64;
              do
                ++v30;
              while ( v29[v30] );
              *(_QWORD *)&v66 = v29[v30 - 1];
              attrs[1] = (LDAPModW *)&v68;
              values_lenW = ldap_get_values_lenW(pServerLdap, entry, off_1401B6C40);
              if ( values_lenW )
              {
                v32 = 3i64;
                v65 = values_lenW;
                attrs[2] = (LDAPModW *)&v63;
                v33 = ldap_get_values_lenW(pServerLdap, entry, off_1401B6C28);
                if ( v33 )
                {
                  v62 = v33;
                  v32 = 4i64;
                  attrs[3] = (LDAPModW *)&v60;
                }
                attrs[v32] = 0i64;
                MicrosoftDnsObject = Dns_LdapAddExt(pServerLdap, v27, attrs, v67, 0i64, ServerControls, 0);
                if ( MicrosoftDnsObject
                  && WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                  && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
                  && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
                {
                  WPP_SF_D(
                    *((_QWORD *)WPP_GLOBAL_Control + 7),
                    0x86u,
                    (__int64)&WPP_0f7f6e0c97433b7ed77e9ce4b2e20f93_Traceguids,
                    MicrosoftDnsObject);
                }
                goto LABEL_104;
              }
              v24 = WPP_GLOBAL_Control;
              if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) == 0
                || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
              {
                goto LABEL_103;
              }
              v25 = off_1401B6C40;
              v26 = 133;
            }
            else
            {
              v24 = WPP_GLOBAL_Control;
              if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) == 0
                || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
              {
                goto LABEL_103;
              }
              v26 = 132;
              v25 = L"objectClass";
            }
LABEL_102:
            WPP_SF_S(*((_QWORD *)v24 + 7), v26, (__int64)&WPP_0f7f6e0c97433b7ed77e9ce4b2e20f93_Traceguids, v25);
            goto LABEL_103;
          }
          v24 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            v25 = DsTypeAttributeTable;
            v26 = 131;
            goto LABEL_102;
          }
LABEL_103:
          MicrosoftDnsObject = 9002;
LABEL_104:
          ldap_value_freeW(v51);
          ldap_value_freeW(v59);
          ldap_value_free_len(v62);
          ldap_value_free_len(v65);
          if ( MicrosoftDnsObject )
            break;
        }
        MicrosoftDnsObject = Ds_GetNextMessageInSearch((__int64)v71);
        if ( MicrosoftDnsObject )
          break;
        continue;
      }
    }
    Ds_CleanupSearchBlob((__int64)v71);
    v6 = WPP_GLOBAL_Control;
  }
LABEL_115:
  if ( MicrosoftDnsObject != 1168897 && MicrosoftDnsObject )
    goto LABEL_25;
  v55 = (WCHAR *)Dns_StringCopyAllocate(*(char **)(v3 + 840), 0, 1i64, 1);
  if ( !v55 )
    goto LABEL_23;
  MicrosoftDnsObject = Ds_SetZoneDp(v3, *(__int64 *)v50, 0);
  if ( MicrosoftDnsObject )
  {
    v6 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      v34 = 135;
LABEL_123:
      WPP_SF_D(*((_QWORD *)v6 + 7), v34, (__int64)&WPP_0f7f6e0c97433b7ed77e9ce4b2e20f93_Traceguids, MicrosoftDnsObject);
      goto LABEL_24;
    }
    goto LABEL_158;
  }
  if ( !*(_QWORD *)(v3 + 192) && *(_DWORD *)(v3 + 372) == 1 )
  {
    MicrosoftDnsObject = DnsOls_CopyDirectoryZoneProperties(v3, v47, v55, *(_QWORD *)(v3 + 840));
    if ( MicrosoftDnsObject )
    {
      v6 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        v34 = 136;
        goto LABEL_123;
      }
LABEL_158:
      v4 = 1;
      goto LABEL_26;
    }
  }
  v35 = ldap_explode_dnW(*(const PWSTR *)(v3 + 840), 0);
  vals = v35;
  if ( !v35 )
  {
LABEL_23:
    MicrosoftDnsObject = 14;
LABEL_24:
    v6 = WPP_GLOBAL_Control;
LABEL_25:
    v4 = v45;
    goto LABEL_26;
  }
  v36 = ldap_rename_ext_sW(pServerLdap, v55, *v35, 0i64, 1, 0i64, 0i64);
  if ( v36 )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_DSS(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x89u,
        (__int64)&WPP_0f7f6e0c97433b7ed77e9ce4b2e20f93_Traceguids,
        v36,
        (__int64)*vals,
        (__int64)v55);
    }
    MicrosoftDnsObject = Ds_ErrorHandler(v36, (__int64)v55, pServerLdap, 0);
    goto LABEL_24;
  }
  if ( *(_QWORD *)(v3 + 192) || !*(_QWORD *)(v3 + 184) )
    goto LABEL_148;
  MicrosoftDnsObject = ZoneScopes_LockAll(v3, 1, 10000, &v51, &v49);
  if ( MicrosoftDnsObject )
  {
    Free_ScopeList(v49);
    return MicrosoftDnsObject;
  }
  v39 = v49;
  if ( v49 )
  {
    v40 = *(_QWORD *)v50;
    do
    {
      MicrosoftDnsObject = Dp_ChangeZonePartition(*v39, v40, v38);
      if ( MicrosoftDnsObject )
        break;
      v39 = (__int64 *)v39[1];
    }
    while ( v39 );
    v3 = v56;
  }
  ZoneScopes_UnLockAll(v3, v37, &v49);
  Free_ScopeList(v49);
  if ( !MicrosoftDnsObject )
  {
LABEL_148:
    v41 = *(unsigned __int16 **)(v3 + 840);
    *(_QWORD *)(v3 + 840) = v47;
    *(_QWORD *)(v3 + 848) = v52;
    MicrosoftDnsObject = Ds_DeleteZone(v3, 0x10000000);
    *(_QWORD *)(v3 + 840) = v41;
    *(_QWORD *)(v3 + 848) = *(_QWORD *)v50;
    if ( MicrosoftDnsObject )
    {
      v73[0] = *(unsigned __int16 **)(v3 + 24);
      v43 = (unsigned __int16 *)&LocaleName;
      if ( v41 )
        v43 = v41;
      v73[1] = v43;
      v73[2] = v47;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_Dd(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x8Au,
          (__int64)&WPP_0f7f6e0c97433b7ed77e9ce4b2e20f93_Traceguids,
          MicrosoftDnsObject);
      }
      v56 = DNS_EVENT_DP_DEL_DURING_CHANGE_ERR;
      Eventlog_LogEvent((__int64)&v56, v42, 3u, v73, (unsigned __int8 *)1, MicrosoftDnsObject, 0, 0i64);
    }
    else
    {
      v46 = 0;
      Zone_WriteZoneToRegistry(v3);
      MicrosoftDnsObject = 0;
    }
    goto LABEL_24;
  }
  return MicrosoftDnsObject;
}
// 140033474: variable 'ServerControls' is possibly undefined
// 140033813: variable 'v38' is possibly undefined
// 140033833: variable 'v37' is possibly undefined
// 14003392F: variable 'v42' is possibly undefined
// 140186148: using guessed type __int128 DNS_EVENT_DP_DEL_DURING_CHANGE_ERR;
// 14018B768: using guessed type wchar_t aDc_2[3];
// 1401EC440: using guessed type __int64 SecurityDescriptorControl_DGO;
