Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 2744
// Total lines: 137

//----- (0000000140144594) ----------------------------------------------------
__int64 __fastcall CDNSPolicyCriteriaTime::AddCriteria(CDNSPolicyCriteriaTime *this)
{
  int v2; // r14d
  unsigned int v3; // ecx
  unsigned int v4; // r13d
  _QWORD *v5; // r12
  unsigned __int16 v6; // r15
  CDNSPolicyCriteriaTime *v7; // rcx
  __int64 **v8; // rdi
  __int64 *i; // rbx
  __int64 *v10; // rax
  __int64 v11; // r8
  __int64 **v12; // rdi
  __int64 *j; // rbx
  __int64 *v14; // rax
  __int64 v15; // r8
  int v17[4]; // [rsp+38h] [rbp-39h] BYREF
  struct _SYSTEMTIME v18; // [rsp+48h] [rbp-29h] BYREF
  struct _SYSTEMTIME v19; // [rsp+58h] [rbp-19h] BYREF
  __int64 v20; // [rsp+68h] [rbp-9h]
  void *v21[5]; // [rsp+70h] [rbp-1h] BYREF

  v20 = -2i64;
  v2 = 0;
  v17[0] = 0;
  if ( *((_QWORD *)this + 9) || *((_QWORD *)this + 12) )
  {
    v3 = 15;
    if ( dword_1401B9A3C )
      v3 = dword_1401B9A3C;
    v4 = 0x5A0 / v3;
    v5 = (_QWORD *)((char *)this + 112);
    std::vector<unsigned short>::reserve((__int64)this + 112, 0x5A0 / v3);
    v6 = 0;
    if ( v4 )
    {
      while ( 1 )
      {
        LOWORD(v17[0]) = 0;
        std::vector<unsigned short>::push_back((unsigned __int64 *)this + 14, (unsigned __int16 *)v17);
        if ( !*((_QWORD *)this + 9) )
          goto LABEL_25;
        v8 = (__int64 **)*((_QWORD *)this + 8);
        for ( i = *v8; i != (__int64 *)v8; i = (__int64 *)*i )
        {
          v18 = (struct _SYSTEMTIME)*((_OWORD *)i + 2);
          v19 = (struct _SYSTEMTIME)*((_OWORD *)i + 1);
          if ( (unsigned int)CDNSPolicyCriteriaTime::MinuteIsInInterval(v7, v6, &v19, &v18) )
            break;
        }
        if ( i != (__int64 *)v8 )
          break;
        if ( *((_QWORD *)this + 12) && *(_DWORD *)(*((_QWORD *)this + 2) + 80i64) )
          goto LABEL_25;
LABEL_42:
        if ( ++v6 >= v4 )
          return 0i64;
      }
      if ( *((_QWORD *)this + 12) && *(_DWORD *)(*((_QWORD *)this + 2) + 80i64) != 1 )
      {
LABEL_25:
        if ( !*((_QWORD *)this + 12) )
          goto LABEL_42;
        v12 = (__int64 **)*((_QWORD *)this + 11);
        for ( j = *v12; j != (__int64 *)v12; j = (__int64 *)*j )
        {
          v19 = (struct _SYSTEMTIME)*((_OWORD *)j + 2);
          v18 = (struct _SYSTEMTIME)*((_OWORD *)j + 1);
          if ( (unsigned int)CDNSPolicyCriteriaTime::MinuteIsInInterval(v7, v6, &v18, &v19) )
            break;
        }
        if ( j != (__int64 *)v12 )
          goto LABEL_42;
        if ( (__int64)(*((_QWORD *)this + 15) - *((_QWORD *)this + 14)) >> 1 <= (unsigned __int64)v6 )
          std::vector<unsigned short>::_Xran();
        *(_WORD *)(*v5 + 2i64 * v6) = 1;
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          v14 = (__int64 *)CDnsPolicy::Name(*((const void ***)this + 2), (__int64)v21);
          v15 = (__int64)v14;
          v2 |= 2u;
          v17[0] = v2;
          if ( (unsigned __int64)v14[3] >= 8 )
            v15 = *v14;
          WPP_SF_DDS(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x3Cu,
            (__int64)&WPP_42dbba61d26d3062f1ad4e084cdc81fe_Traceguids,
            v6,
            *(_WORD *)(*v5 + 2i64 * v6),
            v15);
        }
        if ( (v2 & 2) == 0 )
          goto LABEL_42;
        v2 &= ~2u;
      }
      else
      {
        if ( (__int64)(*((_QWORD *)this + 15) - *((_QWORD *)this + 14)) >> 1 <= (unsigned __int64)v6 )
          std::vector<unsigned short>::_Xran();
        *(_WORD *)(*v5 + 2i64 * v6) = 1;
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          v10 = (__int64 *)CDnsPolicy::Name(*((const void ***)this + 2), (__int64)v21);
          v11 = (__int64)v10;
          v2 |= 1u;
          v17[0] = v2;
          if ( (unsigned __int64)v10[3] >= 8 )
            v11 = *v10;
          WPP_SF_DDS(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x3Bu,
            (__int64)&WPP_42dbba61d26d3062f1ad4e084cdc81fe_Traceguids,
            v6,
            *(_WORD *)(*v5 + 2i64 * v6),
            v11);
        }
        if ( (v2 & 1) == 0 )
          goto LABEL_42;
        v2 &= ~1u;
      }
      if ( v21[3] >= (void *)8 )
        operator delete(v21[0]);
      goto LABEL_42;
    }
  }
  return 0i64;
}
// 140144665: variable 'v7' is possibly undefined
// 140184CA8: using guessed type void __stdcall operator delete(void *);
// 1401B9A3C: using guessed type int dword_1401B9A3C;
// 140144594: using guessed type int var_90[4];
