Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 1786
// Total lines: 332

//----- (00000001400E0E54) ----------------------------------------------------
void __fastcall TrustPoint::ScheduleActiveRefresh(unsigned int *pv, char a2, char a3)
{
  unsigned int v5; // esi
  __int64 v6; // r15
  __int64 v7; // r12
  __int64 v8; // r10
  __int64 v9; // r9
  __int64 v10; // r8
  __int64 v11; // rdx
  __int64 v12; // rax
  __int64 v13; // rcx
  __int64 v14; // rax
  __int64 v15; // rax
  __int64 v16; // rbx
  __int64 v17; // rax
  __int64 v18; // rax
  __int64 v19; // rax
  __int64 v20; // r8
  __int64 v21; // r9
  __int64 v22; // rcx
  __int64 v23; // rax
  __int64 v24; // rax
  __int64 v25; // rax
  __int64 v26; // rax
  __int64 v27; // rax
  __int64 v28; // rax
  __int64 v29; // r8
  CDnsClientSubnetRecordsTrie *v30; // rcx
  const char *v31; // r9
  const char *v32; // rax
  const char *v33; // r9
  __int64 v34; // rcx
  const char *v35; // rax
  signed __int64 v36; // r10
  DWORD v37; // r8d
  DWORD v38; // eax
  int v39; // r11d
  unsigned int v40; // ecx
  int v41; // eax
  __int64 v42; // r9
  struct _FILETIME v43; // r8
  __int64 v44; // rcx
  const char *v45; // rbx
  unsigned int *v46; // rcx
  PTP_TIMER ThreadpoolTimer; // rax
  int v48; // eax
  wchar_t *v49; // rax
  struct _TP_TIMER *v50; // rcx
  struct _FILETIME pftDueTime; // [rsp+80h] [rbp+30h] BYREF
  struct _FILETIME SystemTimeAsFileTime; // [rsp+98h] [rbp+48h] BYREF

  pftDueTime = 0i64;
  v5 = 10000;
  if ( a3 )
    goto LABEL_76;
  v6 = pv[128];
  v7 = pv[127];
  if ( a2 )
  {
    v8 = 10000000 * v6 / 10;
    v9 = 10000000i64 * (unsigned int)dword_1401B99DC / 5;
    v10 = v9;
    if ( v8 < v9 )
      v10 = 10000000 * v6 / 10;
    v11 = 10000000 * v7 / 10;
    if ( v11 >= v10 )
    {
      v12 = 10000000i64 * (unsigned int)dword_1401B99DC / 5;
      if ( v8 < v9 )
        v12 = 10000000 * v6 / 10;
    }
    else
    {
      v12 = 10000000 * v7 / 10;
    }
    v13 = 864000000000i64;
    if ( v12 <= 864000000000i64 )
    {
      v14 = 10000000i64 * (unsigned int)dword_1401B99DC / 5;
      if ( v8 < v9 )
        v14 = 10000000 * v6 / 10;
      if ( v11 >= v14 )
      {
        v15 = 10000000i64 * (unsigned int)dword_1401B99DC / 5;
        if ( v8 < v9 )
          v15 = 10000000 * v6 / 10;
      }
      else
      {
        v15 = 10000000 * v7 / 10;
      }
      v16 = 36000000000i64;
      if ( v15 < 36000000000i64 )
        goto LABEL_57;
    }
    v17 = 10000000i64 * (unsigned int)dword_1401B99DC / 5;
    if ( v8 < v9 )
      v17 = 10000000 * v6 / 10;
    if ( v11 >= v17 )
    {
      v18 = 10000000i64 * (unsigned int)dword_1401B99DC / 5;
      if ( v8 < v9 )
        v18 = 10000000 * v6 / 10;
    }
    else
    {
      v18 = 10000000 * v7 / 10;
    }
    if ( v18 <= 864000000000i64 )
    {
      v19 = 10000000i64 * (unsigned int)dword_1401B99DC / 5;
      if ( v8 < v9 )
        v19 = 10000000 * v6 / 10;
      if ( v11 >= v19 )
      {
        v16 = 10000000i64 * (unsigned int)dword_1401B99DC / 5;
        if ( v8 < v9 )
          v16 = 10000000 * v6 / 10;
        goto LABEL_57;
      }
      goto LABEL_54;
    }
  }
  else
  {
    v20 = 10000000i64 * (unsigned int)dword_1401B99DC;
    v21 = 10000000 * v6 / 2;
    v22 = v20;
    if ( v21 < v20 )
      v22 = 10000000 * v6 / 2;
    v23 = 10000000 * v7 / 2;
    v11 = v23;
    if ( v23 >= v22 )
    {
      v23 = 10000000i64 * (unsigned int)dword_1401B99DC;
      if ( v21 < v20 )
        v23 = 10000000 * v6 / 2;
    }
    v13 = 12960000000000i64;
    if ( v23 <= 12960000000000i64 )
    {
      v24 = 10000000i64 * (unsigned int)dword_1401B99DC;
      if ( v21 < v20 )
        v24 = 10000000 * v6 / 2;
      if ( v11 >= v24 )
      {
        v25 = 10000000i64 * (unsigned int)dword_1401B99DC;
        if ( v21 < v20 )
          v25 = 10000000 * v6 / 2;
      }
      else
      {
        v25 = v11;
      }
      v16 = 36000000000i64;
      if ( v25 < 36000000000i64 )
        goto LABEL_57;
    }
    v26 = 10000000i64 * (unsigned int)dword_1401B99DC;
    if ( v21 < v20 )
      v26 = 10000000 * v6 / 2;
    if ( v11 >= v26 )
    {
      v27 = 10000000i64 * (unsigned int)dword_1401B99DC;
      if ( v21 < v20 )
        v27 = 10000000 * v6 / 2;
    }
    else
    {
      v27 = v11;
    }
    if ( v27 <= 12960000000000i64 )
    {
      v28 = 10000000i64 * (unsigned int)dword_1401B99DC;
      if ( v21 < v20 )
        v28 = 10000000 * v6 / 2;
      if ( v11 >= v28 )
      {
        v16 = 10000000i64 * (unsigned int)dword_1401B99DC;
        if ( v21 < v20 )
          v16 = 10000000 * v6 / 2;
        goto LABEL_57;
      }
LABEL_54:
      v16 = v11;
      goto LABEL_57;
    }
  }
  v16 = v13;
LABEL_57:
  v29 = (unsigned int)dword_1401B99F4;
  if ( dword_1401B99F4 )
    v16 = ((__int64)(v16 + ((unsigned __int128)(v16 * (__int128)(__int64)0x8E991176AAED826Bui64) >> 64)) >> 15)
        + ((unsigned __int64)(v16 + ((unsigned __int128)(v16 * (__int128)(__int64)0x8E991176AAED826Bui64) >> 64)) >> 63)
        + 159388039;
  v30 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
  {
    if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x100000) != 0 && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      v31 = (const char *)(pv + 34);
      if ( *((_QWORD *)pv + 20) >= 0x10ui64 )
        v31 = *(const char **)v31;
      v32 = "off";
      if ( dword_1401B99F4 )
        v32 = "on";
      WPP_SF_sqsDDD(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        (__int64)"on",
        (unsigned int)dword_1401B99F4,
        v31,
        (char)pv,
        (__int64)v32);
      v30 = WPP_GLOBAL_Control;
    }
    if ( v30 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)v30 + 17) & 0x100000) != 0
      && *((_BYTE *)v30 + 65) >= 4u )
    {
      v33 = (const char *)(pv + 34);
      if ( *((_QWORD *)pv + 20) >= 0x10ui64 )
        v33 = *(const char **)v33;
      v34 = *((_QWORD *)v30 + 7);
      v35 = "standard";
      if ( a2 )
        v35 = "retry";
      WPP_SF_sqsg(v34, (__int64)"retry", v29, v33, (char)pv, (__int64)v35);
    }
  }
  pftDueTime = (struct _FILETIME)(v16 + *((_QWORD *)pv + 60));
LABEL_76:
  GetSystemTimeAsFileTime(&SystemTimeAsFileTime);
  if ( *(_QWORD *)&pftDueTime < *(__int64 *)&SystemTimeAsFileTime )
  {
    v36 = g_ImmediateActiveRefreshTime;
    v37 = g_ProcessorCount;
    v38 = 32;
    v39 = dword_1401B99F4;
    if ( g_ProcessorCount < 0x20 )
      v38 = g_ProcessorCount;
    v40 = 5 * v38;
    if ( dword_1401B99F4 )
      v40 = 750;
    v5 = 0x3A98 / v40;
    while ( 1 )
    {
      v41 = 32;
      v42 = v36;
      if ( v37 < 0x20 )
        v41 = v37;
      v43 = (struct _FILETIME)v36;
      v44 = (unsigned int)(5 * v41);
      if ( v39 )
        v44 = 750i64;
      if ( *(_QWORD *)&SystemTimeAsFileTime > v36 )
        v43 = SystemTimeAsFileTime;
      v36 = _InterlockedCompareExchange64(&g_ImmediateActiveRefreshTime, 150000000 / v44 + *(_QWORD *)&v43, v36);
      if ( v42 == v36 )
        break;
      v39 = dword_1401B99F4;
      v37 = g_ProcessorCount;
    }
    if ( *(_QWORD *)&SystemTimeAsFileTime > v42 )
      v42 = (__int64)SystemTimeAsFileTime;
    pftDueTime = (struct _FILETIME)v42;
  }
  v45 = (const char *)(pv + 34);
  if ( *((_QWORD *)pv + 20) < 0x10ui64 )
    v46 = pv + 34;
  else
    v46 = *(unsigned int **)v45;
  if ( Lookup_ZoneTreeNodeFromDottedNameEx(v46, pv[38], 0x2000000, 0i64)
    && (__int64)(*(_QWORD *)&pftDueTime - *(_QWORD *)&SystemTimeAsFileTime) > 864000000000i64 )
  {
    pftDueTime = (struct _FILETIME)(*(_QWORD *)&SystemTimeAsFileTime + 864000000000i64);
  }
  if ( !*((_QWORD *)pv + 65) )
  {
    if ( !*((_BYTE *)pv + 536) )
    {
      ThreadpoolTimer = CreateThreadpoolTimer((PTP_TIMER_CALLBACK)DNSSEC_StartActiveRefresh, pv, 0i64);
      *((_QWORD *)pv + 65) = ThreadpoolTimer;
      if ( !ThreadpoolTimer )
      {
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x100000) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          if ( *((_QWORD *)pv + 20) >= 0x10ui64 )
            v45 = *(const char **)v45;
          GetLastError();
          WPP_SF_sqD(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x28u,
            (__int64)&WPP_4831604f5a2431d08120905ab66c1365_Traceguids,
            v45);
        }
        return;
      }
    }
    if ( !*((_QWORD *)pv + 65) )
      return;
  }
  v48 = 1000;
  if ( v5 < 0x3E8 )
    v48 = v5;
  if ( dword_1401B99F4 )
    v5 = v48;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x100000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    if ( *((_QWORD *)pv + 20) >= 0x10ui64 )
      v45 = *(const char **)v45;
    v49 = Dbg_FileTime(&pftDueTime);
    WPP_SF_sqS(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x29u,
      (__int64)&WPP_4831604f5a2431d08120905ab66c1365_Traceguids,
      v45,
      (char)pv,
      (__int64)v49);
  }
  v50 = (struct _TP_TIMER *)*((_QWORD *)pv + 65);
  *((struct _FILETIME *)pv + 62) = pftDueTime;
  SetThreadpoolTimer(v50, &pftDueTime, 0, v5);
}
// 1400E118C: variable 'v29' is possibly undefined
// 1401B9160: using guessed type volatile __int64 g_ImmediateActiveRefreshTime;
// 1401B99DC: using guessed type int dword_1401B99DC;
// 1401B99F4: using guessed type int dword_1401B99F4;
