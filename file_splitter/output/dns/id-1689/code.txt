Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 1689
// Total lines: 179

//----- (00000001400D8380) ----------------------------------------------------
__int64 __fastcall Rpc_CreateZoneScope(
        __int64 a1,
        const unsigned __int16 **a2,
        __int64 a3,
        __int64 a4,
        int a5,
        __int64 a6)
{
  int v8; // r14d
  CDnsClientSubnetRecordsTrie *v9; // rcx
  const unsigned __int16 *v10; // rbp
  const unsigned __int16 *v11; // r9
  unsigned int v12; // ebx
  unsigned __int16 v13; // dx
  int v14; // r9d
  __int64 v15; // rdx
  unsigned int valid; // eax
  __int64 v17; // r8
  const unsigned __int16 **v18; // rax
  const unsigned __int16 *v19; // r9
  __int64 v20; // rcx
  const char *v21; // r9
  const char *v22; // rax

  v8 = 0x10000000;
  v9 = WPP_GLOBAL_Control;
  v10 = L".";
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    if ( a2 )
      v11 = *a2;
    else
      v11 = L".";
    WPP_SF_S(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x96u, (__int64)&WPP_5efa35e0870730ffd13051b9da022308_Traceguids, v11);
    v9 = WPP_GLOBAL_Control;
  }
  if ( a6 )
  {
    v15 = *(_QWORD *)(a6 + 8);
    if ( !v15 || !a3 )
    {
      v12 = 87;
      if ( v9 == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
        return v12;
      if ( (*((_BYTE *)v9 + 68) & 4) == 0 || *((_BYTE *)v9 + 65) < 2u )
        goto LABEL_68;
      v20 = *((_QWORD *)v9 + 7);
      v21 = "is not";
      v22 = "is not";
      if ( !a3 )
        v22 = "is";
      if ( !v15 )
        v21 = "is";
      WPP_SF_ssD(v20, 0x98u, (__int64)&WPP_5efa35e0870730ffd13051b9da022308_Traceguids, v21, (__int64)v22);
      goto LABEL_67;
    }
    if ( a2 && *(_DWORD *)(a3 + 372) != 1 )
    {
      if ( v9 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)v9 + 68) & 4) != 0
        && *((_BYTE *)v9 + 65) >= 2u )
      {
        WPP_SF_(*((_QWORD *)v9 + 7), 0x99u, (__int64)&WPP_5efa35e0870730ffd13051b9da022308_Traceguids);
        v9 = WPP_GLOBAL_Control;
      }
      v12 = 9603;
      goto LABEL_68;
    }
    if ( v9 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)v9 + 68) & 4) != 0
      && *((_BYTE *)v9 + 65) >= 4u )
    {
      WPP_SF_D(*((_QWORD *)v9 + 7), 0x9Au, (__int64)&WPP_5efa35e0870730ffd13051b9da022308_Traceguids, *(_DWORD *)a6);
      v9 = WPP_GLOBAL_Control;
    }
    if ( (*(_BYTE *)a6 & 0x10) != 0 )
    {
      if ( v9 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)v9 + 68) & 4) != 0
        && *((_BYTE *)v9 + 65) >= 4u )
      {
        WPP_SF_(*((_QWORD *)v9 + 7), 0x9Bu, (__int64)&WPP_5efa35e0870730ffd13051b9da022308_Traceguids);
        v9 = WPP_GLOBAL_Control;
      }
      if ( !*(_DWORD *)(a3 + 372) )
      {
        v12 = 87;
        if ( v9 == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
          return v12;
        if ( (*((_BYTE *)v9 + 68) & 4) == 0 || *((_BYTE *)v9 + 65) < 2u )
          goto LABEL_68;
        v13 = 156;
        v14 = 87;
        goto LABEL_13;
      }
      v8 = 268435457;
    }
    else
    {
      if ( v9 == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
      {
LABEL_46:
        valid = IsValidScopeName(*(WCHAR **)(a6 + 8), a3, 0);
        v12 = valid;
        if ( !valid )
        {
          v12 = Scope_Create(a3, *(unsigned __int16 **)(a6 + 8), v17, 0i64, v8, 0, 0i64);
          if ( !v12 && (dword_1401B9104 & 1) != 0 )
          {
            v18 = *(const unsigned __int16 ***)(a3 + 200);
            if ( v18 )
              v10 = *v18;
            if ( *(_DWORD *)(a3 + 372) )
              v19 = *(const unsigned __int16 **)(a3 + 24);
            else
              v19 = L"..Cache";
            Template_zzz(
              Microsoft_Windows_DNSServerHandle,
              &DNS_EVENT_ZONESCOPE_CREATE,
              *(const unsigned __int16 **)(a6 + 8),
              v19,
              v10);
          }
          goto LABEL_67;
        }
        v9 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
          return v12;
        if ( (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) == 0 || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
          goto LABEL_68;
        v13 = 159;
        v14 = valid;
LABEL_13:
        WPP_SF_D(*((_QWORD *)v9 + 7), v13, (__int64)&WPP_5efa35e0870730ffd13051b9da022308_Traceguids, v14);
LABEL_67:
        v9 = WPP_GLOBAL_Control;
        goto LABEL_68;
      }
      if ( (*((_BYTE *)v9 + 68) & 4) != 0 && *((_BYTE *)v9 + 65) >= 4u )
      {
        WPP_SF_(*((_QWORD *)v9 + 7), 0x9Du, (__int64)&WPP_5efa35e0870730ffd13051b9da022308_Traceguids);
        v9 = WPP_GLOBAL_Control;
      }
    }
    if ( v9 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)v9 + 68) & 4) != 0
      && *((_BYTE *)v9 + 65) >= 4u )
    {
      WPP_SF_S(
        *((_QWORD *)v9 + 7),
        0x9Eu,
        (__int64)&WPP_5efa35e0870730ffd13051b9da022308_Traceguids,
        *(const unsigned __int16 **)(a6 + 8));
    }
    goto LABEL_46;
  }
  v12 = 87;
  if ( v9 == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
    return v12;
  if ( (*((_BYTE *)v9 + 68) & 4) != 0 && *((_BYTE *)v9 + 65) >= 2u )
  {
    v13 = 151;
    v14 = 87;
    goto LABEL_13;
  }
LABEL_68:
  if ( v9 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)v9 + 68) & 4) != 0
    && *((_BYTE *)v9 + 65) >= 4u )
  {
    WPP_SF_D(*((_QWORD *)v9 + 7), 0xA0u, (__int64)&WPP_5efa35e0870730ffd13051b9da022308_Traceguids, v12);
  }
  return v12;
}
// 1400D8604: variable 'v17' is possibly undefined
// 1401B9104: using guessed type int dword_1401B9104;
