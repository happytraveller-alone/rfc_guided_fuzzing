Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 1366
// Total lines: 266

//----- (00000001400AD9B8) ----------------------------------------------------
__int64 __fastcall Tcp_ReceiveMessage(__int64 a1)
{
  SOCKET v1; // r14
  char *v3; // rdi
  unsigned __int16 v4; // si
  int v5; // eax
  __int64 v6; // r8
  int v7; // ebp
  CDnsClientSubnetRecordsTrie *v8; // rcx
  u_short v9; // ax
  u_short v10; // bp
  int v11; // r9d
  unsigned __int16 v12; // dx
  __int64 v13; // rdi
  __int64 v15; // rdx
  int LastError; // ebp
  __int64 v17; // r8
  __int64 v18; // rdx
  __int64 v19; // r8
  __int64 v20; // [rsp+28h] [rbp-50h]
  __int128 v21; // [rsp+40h] [rbp-38h] BYREF
  int namelen; // [rsp+80h] [rbp+8h] BYREF

  v1 = *(_QWORD *)(a1 + 56);
  namelen = 28;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x2000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_dqd(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x1Bu,
      (__int64)&WPP_f9fc202ba18b3dea1e527425a0953a6a_Traceguids,
      v1);
  }
  v3 = *(char **)(a1 + 1296);
  if ( v3 )
  {
    v4 = *(_WORD *)(a1 + 6300);
  }
  else
  {
    v3 = (char *)(a1 + 6302);
    *(_WORD *)(a1 + 6302) = 0;
    v4 = 14;
  }
  *(_BYTE *)(a1 + 1414) = 0;
  while ( 1 )
  {
    v5 = recv(v1, v3, v4, 0);
    v7 = v5;
    if ( v5 <= 0 )
      break;
    v8 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x2000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_Dd(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x1Cu,
        (__int64)&WPP_f9fc202ba18b3dea1e527425a0953a6a_Traceguids,
        v5);
      v8 = WPP_GLOBAL_Control;
    }
    if ( v7 > 0xFFFF )
    {
      if ( v8 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)v8 + 17) & 0x2000) != 0
        && *((_BYTE *)v8 + 65) >= 4u )
      {
        v12 = 29;
        v11 = v7;
        goto LABEL_63;
      }
      goto LABEL_64;
    }
    v3 += v7;
    v4 -= v7;
    if ( !v4 )
    {
      if ( (unsigned __int64)v3 > a1 + 6316 )
      {
        *(_BYTE *)(a1 + 1414) = 1;
        *(_QWORD *)(a1 + 1296) = 0i64;
        *(_DWORD *)(a1 + 568) = dword_1401B9714;
        if ( dword_1401B9770 )
          Log_Message(a1, 0, 0);
        if ( g_EtwTraceOn )
          Etw_TraceLogEvent(a1, 0);
        if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x1000) != 0 && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
          Dbg_DnsMessage("Received", a1, v6);
        if ( getsockname(v1, (struct sockaddr *)(a1 + 128), &namelen)
          && WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x2000) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          GetLastError();
          WPP_SF_Dd(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x20u,
            (__int64)&WPP_f9fc202ba18b3dea1e527425a0953a6a_Traceguids,
            v1);
        }
        if ( *(_QWORD *)(a1 + 1288) )
        {
          EnterCriticalSection(&mg_TcpConnectionListCS);
          v13 = *(_QWORD *)(a1 + 1288);
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x2000) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            LODWORD(v20) = *(_DWORD *)(v13 + 16);
            WPP_SF_qqd(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x1Eu,
              (__int64)&WPP_9f19520dfb7e38d3377701f712cb1704_Traceguids,
              a1,
              v13,
              v20);
          }
          *(_QWORD *)(v13 + 216) = 0i64;
          *(_DWORD *)(v13 + 144) = dword_1401B9714 + 60;
          *(_QWORD *)(a1 + 1288) = 0i64;
LABEL_46:
          LeaveCriticalSection(&mg_TcpConnectionListCS);
        }
        return a1;
      }
      *(_WORD *)(a1 + 6304) = __ROL2__(*(_WORD *)(a1 + 6304), 8);
      *(_WORD *)(a1 + 6308) = __ROL2__(*(_WORD *)(a1 + 6308), 8);
      *(_WORD *)(a1 + 6310) = __ROL2__(*(_WORD *)(a1 + 6310), 8);
      *(_WORD *)(a1 + 6312) = __ROL2__(*(_WORD *)(a1 + 6312), 8);
      *(_WORD *)(a1 + 6314) = __ROL2__(*(_WORD *)(a1 + 6314), 8);
      v9 = ntohs(*(_WORD *)(a1 + 6302));
      *(_WORD *)(a1 + 6302) = v9;
      v10 = v9;
      if ( v9 < 0xCu )
      {
        v8 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x2000) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          v11 = v9;
          v12 = 30;
          goto LABEL_63;
        }
        goto LABEL_64;
      }
      v4 = v9 - 12;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x2000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        HIDWORD(v20) = HIDWORD(a1);
        WPP_SF_Ddq(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x1Fu,
          (__int64)&WPP_f9fc202ba18b3dea1e527425a0953a6a_Traceguids,
          v9);
      }
      if ( (unsigned int)v10 > *(_DWORD *)(a1 + 44) )
        goto LABEL_88;
    }
  }
  if ( v5 )
  {
    LastError = GetLastError();
    if ( LastError == 10035 )
    {
      *(_QWORD *)(a1 + 1296) = v3;
      *(_WORD *)(a1 + 6300) = v4;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x2000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_dqqd(*((_QWORD *)WPP_GLOBAL_Control + 7), v15, v17, v1);
      }
      if ( *(_QWORD *)(a1 + 1288) )
      {
        EnterCriticalSection(&mg_TcpConnectionListCS);
        *(_QWORD *)(*(_QWORD *)(a1 + 1288) + 216i64) = a1;
        goto LABEL_46;
      }
      return a1;
    }
    if ( g_fDnsServiceExit == 1 )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x2000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x22u, (__int64)&WPP_f9fc202ba18b3dea1e527425a0953a6a_Traceguids);
      }
      return 0i64;
    }
    if ( v3 != (char *)(a1 + 6302) || ((LastError - 10053) & 0xFFFFFFFA) != 0 || LastError == 10057 )
    {
      v21 = DNS_EVENT_RECV_CALL_FAILED;
      Eventlog_LogEvent((__int64)&v21, v15, 0, 0i64, 0i64, LastError, 0, 0i64);
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x2000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_ddL(*((_QWORD *)WPP_GLOBAL_Control + 7), v18, v19, (_DWORD)v3 - a1 - 6302);
      }
    }
    else if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
           && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x2000) != 0
           && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_Dd(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x23u,
        (__int64)&WPP_f9fc202ba18b3dea1e527425a0953a6a_Traceguids,
        LastError);
    }
  }
  else
  {
    v8 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x2000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_D(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        v5 + 37,
        (__int64)&WPP_f9fc202ba18b3dea1e527425a0953a6a_Traceguids,
        v1);
      v8 = WPP_GLOBAL_Control;
    }
    if ( *(_WORD *)(a1 + 6302) || v3 != (char *)(a1 + 6302) )
    {
      if ( v8 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)v8 + 17) & 0x2000) != 0
        && *((_BYTE *)v8 + 65) >= 4u )
      {
        v11 = v4;
        v12 = 38;
LABEL_63:
        WPP_SF_D(*((_QWORD *)v8 + 7), v12, (__int64)&WPP_f9fc202ba18b3dea1e527425a0953a6a_Traceguids, v11);
      }
LABEL_64:
      v21 = DNS_EVENT_BAD_TCP_MESSAGE;
      EventLog_BadPacket(&v21, a1);
    }
  }
LABEL_88:
  Tcp_ConnectionDeleteForSocket(v1, a1);
  return 0i64;
}
// 1400ADC57: variable 'v6' is possibly undefined
// 1400ADD1D: variable 'v20' is possibly undefined
// 1400ADE80: variable 'v15' is possibly undefined
// 1400ADE80: variable 'v17' is possibly undefined
// 1400ADFD2: variable 'v18' is possibly undefined
// 1400ADFD2: variable 'v19' is possibly undefined
// 140186048: using guessed type __int128 DNS_EVENT_RECV_CALL_FAILED;
// 140187768: using guessed type __int128 DNS_EVENT_BAD_TCP_MESSAGE;
// 1401B8F34: using guessed type int g_EtwTraceOn;
// 1401B9714: using guessed type int dword_1401B9714;
// 1401B9770: using guessed type int dword_1401B9770;
// 1401B9A40: using guessed type int g_fDnsServiceExit;
