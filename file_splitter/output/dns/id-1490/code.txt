Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 1490
// Total lines: 146

//----- (00000001400BB53C) ----------------------------------------------------
__int64 __fastcall checkTempNodesForUpdateEffect(__int64 a1, __int64 a2)
{
  unsigned int v4; // r14d
  unsigned int v5; // r15d
  CDnsClientSubnetRecordsTrie *v6; // rax
  __int64 v7; // rbp
  const char *v8; // rcx
  __int64 v10; // r13
  unsigned int v11; // ebx
  __int64 v12; // rdi
  int v13; // eax
  int v14; // edi
  int v15; // ebx
  const char *v16; // rax
  __int64 v17; // rdx
  __int64 v18; // r8
  int v19; // eax
  int v20; // [rsp+30h] [rbp-48h]
  BOOL v21; // [rsp+38h] [rbp-40h]
  int v22; // [rsp+80h] [rbp+8h]
  unsigned int v23; // [rsp+88h] [rbp+10h] BYREF

  v22 = 0;
  v4 = 0;
  v5 = 1;
  v6 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
  {
    if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x80000) == 0 )
      goto LABEL_8;
    if ( *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_s(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0xA9u,
        (__int64)&WPP_40fcce62f6f439b0ec75be29cae6130a_Traceguids,
        *(const char **)(a1 + 16));
      v6 = WPP_GLOBAL_Control;
    }
  }
  if ( (*((_DWORD *)v6 + 17) & 0x80000) != 0 && *((_BYTE *)v6 + 65) >= 5u )
  {
    Dbg_UpdateList("Update list before checkTempNodesForUpdateEffect", a2);
    v6 = WPP_GLOBAL_Control;
  }
LABEL_8:
  if ( (*(_BYTE *)(a1 + 388) & 1) != 0 && *(_DWORD *)(a1 + 372) == 1 && (*(_BYTE *)(a1 + 1040) & 4) != 0 )
    v5 = 9;
  v7 = *(_QWORD *)(a2 + 16);
  if ( !v7 )
    goto LABEL_13;
  while ( g_fDnsServiceExit != 1 )
  {
    v10 = *(_QWORD *)(v7 + 8);
    v11 = *(_DWORD *)(a1 + 988);
    v12 = *(_QWORD *)(v7 + 64);
    deleteCachedRecordsForUpdate(v10);
    v23 = -1;
    acquireRead(DbaseLock, 0xFFFFFFFF, &v23);
    v13 = RR_ListCompare(v10, *(_QWORD *)(v10 + 64), 0i64, v12, v5, v11);
    v23 = -1;
    v14 = 1;
    v15 = v13;
    releaseRead(DbaseLock, &v23, 1);
    *(_DWORD *)(v7 + 72) = v15;
    if ( v15 )
    {
      if ( v15 == 255 )
      {
        *(_DWORD *)(v7 + 84) = -2004353023;
        v4 = 1;
        v22 = 1;
        if ( (*(_BYTE *)(v10 + 92) & 2) != 0 )
          checkDnsServerHostUpdate(a1, a2, v10, v7);
        goto LABEL_29;
      }
      if ( (*(_BYTE *)(a1 + 396) & 1) != 0 || v15 == 130 )
      {
        v4 = 1;
        *(_DWORD *)(v7 + 84) = -2004353023;
      }
    }
    v14 = v22;
LABEL_29:
    v6 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x80000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      v16 = (const char *)FormatLabelA(*(unsigned __int8 *)(v7 + 101), (const void *)(v7 + 102));
      v21 = *(_DWORD *)(v7 + 84) == -2004353023;
      v20 = v15;
      WPP_SF_sqqDd(*((_QWORD *)WPP_GLOBAL_Control + 7), v17, v18, v16);
      v6 = WPP_GLOBAL_Control;
    }
    v7 = *(_QWORD *)(v7 + 24);
    if ( !v7 )
    {
      if ( !v4 )
        goto LABEL_13;
      v19 = *(_DWORD *)(a1 + 512);
      if ( v14 )
      {
        if ( !++v19 )
          v19 = 1;
      }
      *(_DWORD *)(a1 + 524) = v19;
      goto LABEL_39;
    }
  }
  if ( v6 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
  {
    if ( (*((_DWORD *)v6 + 17) & 0x80000) != 0 && *((_BYTE *)v6 + 65) >= 4u )
    {
      WPP_SF_(*((_QWORD *)v6 + 7), 0xAAu, (__int64)&WPP_40fcce62f6f439b0ec75be29cae6130a_Traceguids);
LABEL_39:
      v6 = WPP_GLOBAL_Control;
    }
LABEL_13:
    if ( v6 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)v6 + 17) & 0x80000) != 0
      && *((_BYTE *)v6 + 65) >= 4u )
    {
      v8 = "does not require";
      if ( v4 )
        v8 = "requires";
      WPP_SF_qss(
        *((_QWORD *)v6 + 7),
        0xACu,
        (__int64)&WPP_40fcce62f6f439b0ec75be29cae6130a_Traceguids,
        a2,
        *(_QWORD *)(a1 + 16),
        v8,
        v20,
        v21);
    }
  }
  return v4;
}
// 1400BB64A: variable 'v20' is possibly undefined
// 1400BB64A: variable 'v21' is possibly undefined
// 1400BB7A9: variable 'v17' is possibly undefined
// 1400BB7A9: variable 'v18' is possibly undefined
// 1401B9A40: using guessed type int g_fDnsServiceExit;
// 1401EC5E8: using guessed type __int64 DbaseLock;
