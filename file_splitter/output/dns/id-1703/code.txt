Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 1703
// Total lines: 151

//----- (00000001400D987C) ----------------------------------------------------
__int64 __fastcall scanSecondaryZoneScopes(__int64 a1)
{
  _QWORD *v1; // rdi
  unsigned int v3; // r14d
  unsigned int v4; // r9d
  unsigned int v5; // esi
  __int64 v6; // rdx
  _QWORD *v7; // r15
  CDnsClientSubnetRecordsTrie *v8; // rcx
  __int64 v9; // rbx
  const char *v10; // rax
  int v11; // eax
  unsigned int v12; // eax
  unsigned __int16 *v14[2]; // [rsp+40h] [rbp-20h] BYREF
  __int128 v15; // [rsp+50h] [rbp-10h] BYREF
  int v16; // [rsp+90h] [rbp+30h] BYREF
  _QWORD *v17; // [rsp+98h] [rbp+38h] BYREF

  v1 = 0i64;
  v16 = 0;
  v17 = 0i64;
  v3 = -1;
  dword_1401B9714 = Dns_GetCurrentTimeInSeconds();
  v5 = dword_1401B9714;
  if ( *(_QWORD *)(a1 + 184) )
  {
    if ( (unsigned int)Get_SnapShot_ScopeMap(*(_QWORD *)(a1 + 160), *(_QWORD *)(a1 + 168), 1, v4, &v16, &v17) || !v16 )
    {
LABEL_40:
      v1 = v17;
    }
    else
    {
      v1 = v17;
      v7 = v17;
      if ( v17 )
      {
        v8 = WPP_GLOBAL_Control;
        while ( 1 )
        {
          v9 = *v7;
          if ( *(_BYTE *)(*v7 + 401i64) )
          {
            if ( v8 == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              || (*((_BYTE *)v8 + 68) & 0x40) == 0
              || *((_BYTE *)v8 + 65) < 4u )
            {
              goto LABEL_36;
            }
            v10 = DnsAddr_Ntoa((struct in_addr *)(v9 + 1312));
            WPP_SF_Sss(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x18u,
              (__int64)&WPP_8f5c62d9956434feed7ea8f9d17b2299_Traceguids,
              *(const unsigned __int16 **)(v9 + 192),
              *(_QWORD *)(v9 + 16),
              (__int64)v10);
          }
          else
          {
            if ( v5 <= *(_DWORD *)(v9 + 1532) || (*(_DWORD *)(v9 + 396) & 0x2000) != 0 )
            {
              if ( v5 < *(_DWORD *)(v9 + 1508) )
              {
                if ( v8 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                  && (*((_BYTE *)v8 + 68) & 0x40) != 0
                  && *((_BYTE *)v8 + 65) >= 4u )
                {
                  WPP_SF_Ss(
                    *((_QWORD *)v8 + 7),
                    0x1Cu,
                    (__int64)&WPP_8f5c62d9956434feed7ea8f9d17b2299_Traceguids,
                    *(const unsigned __int16 **)(v9 + 192),
                    *(_QWORD *)(v9 + 16));
                }
                *(_DWORD *)(v9 + 1524) = *(_DWORD *)(v9 + 1528);
                goto LABEL_35;
              }
              if ( v8 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                && (*((_BYTE *)v8 + 68) & 0x40) != 0
                && *((_BYTE *)v8 + 65) >= 4u )
              {
                WPP_SF_Ss(
                  *((_QWORD *)v8 + 7),
                  0x1Bu,
                  (__int64)&WPP_8f5c62d9956434feed7ea8f9d17b2299_Traceguids,
                  *(const unsigned __int16 **)(v9 + 192),
                  *(_QWORD *)(v9 + 16));
              }
            }
            else
            {
              if ( v8 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                && (*((_BYTE *)v8 + 68) & 0x40) != 0
                && *((_BYTE *)v8 + 65) >= 4u )
              {
                WPP_SF_Ss(
                  *((_QWORD *)v8 + 7),
                  0x19u,
                  (__int64)&WPP_8f5c62d9956434feed7ea8f9d17b2299_Traceguids,
                  *(const unsigned __int16 **)(v9 + 192),
                  *(_QWORD *)(v9 + 16));
              }
              *(_DWORD *)(v9 + 396) |= 0x2000u;
              if ( *(_DWORD *)(v9 + 1516) )
              {
                v14[0] = *(unsigned __int16 **)(v9 + 192);
                v14[1] = *(unsigned __int16 **)(a1 + 24);
                v15 = DNS_EVENT_ZONE_SCOPE_EXPIRATION;
                Eventlog_LogEvent((__int64)&v15, v6, 2u, v14, 0i64, 0, 0, 0i64);
              }
              if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x40) != 0
                && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
              {
                WPP_SF_Ss(
                  *((_QWORD *)WPP_GLOBAL_Control + 7),
                  0x1Au,
                  (__int64)&WPP_8f5c62d9956434feed7ea8f9d17b2299_Traceguids,
                  *(const unsigned __int16 **)(v9 + 192),
                  *(_QWORD *)(v9 + 16));
              }
              *(_DWORD *)(v9 + 1508) = v5;
            }
            Xfr_SendSoaQuery((struct _zone_info *)v9);
          }
LABEL_35:
          v8 = WPP_GLOBAL_Control;
LABEL_36:
          v11 = *(_DWORD *)(v9 + 1508);
          if ( v11 )
          {
            v12 = v11 - v5;
            if ( v12 < v3 )
              v3 = v12;
          }
          v7 = (_QWORD *)v7[1];
          if ( !v7 )
            goto LABEL_40;
        }
      }
    }
  }
  Free_ScopeList(v1);
  return v3;
}
// 1400D98E3: variable 'v4' is possibly undefined
// 1400D9A28: variable 'v6' is possibly undefined
// 140187868: using guessed type __int128 DNS_EVENT_ZONE_SCOPE_EXPIRATION;
// 1401B9714: using guessed type int dword_1401B9714;
