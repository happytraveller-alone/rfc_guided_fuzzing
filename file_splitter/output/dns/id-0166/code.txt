Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 166
// Total lines: 147

//----- (0000000140014BCC) ----------------------------------------------------
__int64 __fastcall Msg_NewValidateResponse(__int64 a1, __int64 a2)
{
  CDnsClientSubnetRecordsTrie *v4; // rcx
  unsigned __int16 v5; // dx
  __int16 v6; // di
  int v7; // r9d
  unsigned __int16 v8; // dx
  __int16 v9; // ax
  u_short *v10; // r14
  __int64 v11; // rax
  u_short v12; // ax
  __int16 v14[184]; // [rsp+40h] [rbp-318h] BYREF
  __int16 v15[184]; // [rsp+1B0h] [rbp-1A8h] BYREF

  v4 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x2000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_ddqq(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x19u,
      (__int64)&WPP_85122b8292e131b12c3e63125c6a84cb_Traceguids,
      0);
    v4 = WPP_GLOBAL_Control;
  }
  v5 = *(_WORD *)(a1 + 6304);
  v6 = *(_WORD *)(a2 + 480);
  if ( *(_WORD *)(a2 + 6304) != v5 && (v5 || (unsigned __int16)(v6 - 251) > 1u) )
  {
    if ( v4 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
    {
      if ( (*((_DWORD *)v4 + 17) & 0x800) != 0 && *((_BYTE *)v4 + 65) >= 4u )
      {
        WPP_SF_Dd(*((_QWORD *)v4 + 7), 0x1Au, (__int64)&WPP_85122b8292e131b12c3e63125c6a84cb_Traceguids, v5);
LABEL_55:
        v4 = WPP_GLOBAL_Control;
        goto LABEL_56;
      }
      goto LABEL_56;
    }
    return 0i64;
  }
  if ( ((*(unsigned __int8 *)(a2 + 6306) >> 3) & 0xF) != 0 )
  {
    v7 = (*(unsigned __int8 *)(a1 + 6306) >> 3) & 0xF;
    if ( v7 != ((*(unsigned __int8 *)(a2 + 6306) >> 3) & 0xF) )
    {
      if ( v4 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
      {
        if ( (*((_DWORD *)v4 + 17) & 0x800) != 0 && *((_BYTE *)v4 + 65) >= 4u )
        {
          WPP_SF_D(*((_QWORD *)v4 + 7), 0x1Bu, (__int64)&WPP_85122b8292e131b12c3e63125c6a84cb_Traceguids, v7);
          goto LABEL_55;
        }
LABEL_56:
        if ( v4 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)v4 + 17) & 0x800) != 0
          && *((_BYTE *)v4 + 65) >= 4u )
        {
          WPP_SF_q(*((_QWORD *)v4 + 7), 0x22u, (__int64)&WPP_85122b8292e131b12c3e63125c6a84cb_Traceguids, a1);
        }
      }
      return 0i64;
    }
  }
  if ( *(char *)(a1 + 6306) >= 0 && v6 != 252 )
  {
    if ( v4 == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
      return 0i64;
    if ( (*((_DWORD *)v4 + 17) & 0x800) == 0 || *((_BYTE *)v4 + 65) < 4u )
      goto LABEL_56;
    v8 = 28;
LABEL_54:
    WPP_SF_(*((_QWORD *)v4 + 7), v8, (__int64)&WPP_85122b8292e131b12c3e63125c6a84cb_Traceguids);
    goto LABEL_55;
  }
  v9 = *(_WORD *)(a1 + 6308);
  if ( v9 && *(_WORD *)(a2 + 6308) == v9 )
  {
    if ( v9 != 1 )
    {
      if ( v4 == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
        return 0i64;
      if ( (*((_DWORD *)v4 + 17) & 0x800) == 0 || *((_BYTE *)v4 + 65) < 4u )
        goto LABEL_56;
      v8 = 29;
      goto LABEL_54;
    }
    if ( !(unsigned int)Name_ConvertRawNameToLookupName((unsigned __int8 *)(a1 + 6316), (unsigned __int16 *)v15)
      || !(unsigned int)Name_ConvertRawNameToLookupName((unsigned __int8 *)(a2 + 6316), (unsigned __int16 *)v14) )
    {
      v4 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
        return 0i64;
      if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800) == 0 || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
        goto LABEL_56;
      v8 = 30;
      goto LABEL_54;
    }
    if ( (unsigned int)Name_CompareLookupNames(v15, v14) )
    {
      v4 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
        return 0i64;
      if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800) == 0 || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
        goto LABEL_56;
      v8 = 31;
      goto LABEL_54;
    }
    v10 = (u_short *)Wire_SkipPacketName(a1, a1 + 6316);
    v11 = Wire_SkipPacketName(a2, a2 + 6316);
    if ( !v10 || !v11 )
    {
      v4 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
        return 0i64;
      if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800) == 0 || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
        goto LABEL_56;
      v8 = 32;
      goto LABEL_54;
    }
    if ( v6 && v6 != ntohs(*v10) )
    {
      v4 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
      {
        if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800) != 0 && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          v12 = ntohs(*v10);
          WPP_SF_Dd(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x21u,
            (__int64)&WPP_85122b8292e131b12c3e63125c6a84cb_Traceguids,
            v12);
          goto LABEL_55;
        }
        goto LABEL_56;
      }
      return 0i64;
    }
  }
  return 1i64;
}
// 140014BCC: using guessed type unsigned __int16 var_1A8[184];
// 140014BCC: using guessed type unsigned __int16 var_318[184];
