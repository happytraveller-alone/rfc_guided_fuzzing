Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 1090
// Total lines: 423

//----- (000000014008DC40) ----------------------------------------------------
__int64 __fastcall RR_UpdateAdd(__int64 a1, __int64 a2, __int64 a3, __int64 a4, int a5, __int64 a6)
{
  __int64 v6; // r15
  unsigned __int64 v7; // r12
  __int64 v10; // rdi
  __int64 v11; // rbx
  char *v12; // rax
  __int64 v13; // r8
  __int64 v14; // rdx
  unsigned int v15; // ebx
  char v16; // r13
  __int64 v17; // rcx
  __int64 v18; // rsi
  int v19; // eax
  bool v20; // zf
  unsigned int v21; // eax
  volatile signed __int32 *j; // rax
  volatile signed __int32 *v23; // rcx
  u_long v24; // ecx
  char *v25; // rax
  unsigned __int8 v26; // cl
  __int64 v27; // rdx
  _QWORD *v28; // r13
  __int64 i; // rsi
  __int64 v30; // rcx
  char *v31; // rax
  __int64 v32; // r8
  u_long v33; // ebx
  __int64 v34; // rcx
  char *v35; // rax
  __int64 v36; // rdx
  __int64 v37; // r8
  char *v39; // rax
  __int64 v40; // r8
  __int64 v41; // [rsp+20h] [rbp-68h]
  __int64 v42; // [rsp+28h] [rbp-60h]
  char v43; // [rsp+98h] [rbp+10h]
  int v44; // [rsp+A0h] [rbp+18h]

  v6 = a3;
  v7 = *(unsigned __int16 *)(a3 + 12);
  v43 = *(_BYTE *)(a3 + 8);
  v10 = 0i64;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x80000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    if ( a1 )
      v11 = *(_QWORD *)(a1 + 16);
    else
      v11 = 0i64;
    v12 = Dbg_NodeName(a2);
    WPP_SF_qDss(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x53u, v13, v6, (unsigned __int16)v7, v12, v11);
  }
  Dbase_LockEx(a2, 2, (__int64)"ds\\dns\\server\\server\\rrlist.c", 187);
  if ( !a2 || (v44 = 1, !*(_QWORD *)(a2 + 64)) )
    v44 = 0;
  *(_DWORD *)(a2 + 76) = 0;
  deleteCachedRecordsForUpdate(a2);
  if ( (*(_BYTE *)(a2 + 92) & 0x20) != 0 || (_WORD)v7 == 5 )
  {
    v15 = checkCnameConditions(a2, v14, v7, 0);
    if ( v15 )
    {
      v16 = a5;
      if ( (a5 & 1) == 0 )
        goto LABEL_26;
      if ( (_WORD)v7 != 5 || !dword_1401B996C )
      {
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x80000) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          WPP_SF_sd(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x55u,
            (__int64)&WPP_10d39582251c332017bd035d2c946054_Traceguids,
            (const char *)(a2 + 102));
        }
        v15 = 9007;
        goto LABEL_26;
      }
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x80000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_ss(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x54u,
          (__int64)&WPP_10d39582251c332017bd035d2c946054_Traceguids,
          (const char *)(a2 + 102),
          *(_QWORD *)(a1 + 16));
      }
LABEL_65:
      v15 = 0;
      goto LABEL_26;
    }
  }
  v16 = a5;
  if ( (_WORD)v7 == 39 && (a5 & 1) != 0 )
  {
LABEL_33:
    v15 = 9005;
    goto LABEL_26;
  }
  if ( (*(_DWORD *)(a2 + 92) & 0x20000) != 0 || (_WORD)v7 == 39 )
  {
    v15 = checkDnameConditions(a2, v14, v7, 0);
    if ( v15 )
      goto LABEL_26;
  }
  if ( (_WORD)v7 == 1 || (_WORD)v7 == 28 )
    goto LABEL_67;
  if ( (_WORD)v7 != 2 )
  {
    if ( (_WORD)v7 != 6 )
    {
      if ( (v7 & 0xFFFC) == 0xFF00 )
      {
        v21 = Wins_RecordCheck(a1, a2, v6);
        v15 = v21;
        if ( v21 )
        {
          if ( v21 != 9753 )
            goto LABEL_26;
          v6 = 0i64;
          goto LABEL_65;
        }
        *(_DWORD *)(a1 + 396) |= 0x400u;
      }
      goto LABEL_67;
    }
    if ( (*(_DWORD *)(a2 + 92) & 0x100) == 0 )
    {
      v15 = 9710;
      goto LABEL_26;
    }
    if ( (a5 & 1) == 0 )
      goto LABEL_67;
    v20 = (dword_1401B9840 & 1) == 0;
    goto LABEL_54;
  }
  v19 = *(_DWORD *)(a2 + 92);
  if ( (v19 & 0x100) != 0 )
  {
    if ( (a5 & 1) == 0 )
      goto LABEL_67;
    v20 = (dword_1401B9840 & 2) == 0;
LABEL_54:
    if ( !v20 )
      goto LABEL_33;
    goto LABEL_67;
  }
  if ( (v19 & 0x10) == 0 && *(_BYTE *)(a2 + 96) != 0xF2 )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x80000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_q(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x56u,
        (__int64)&WPP_10d39582251c332017bd035d2c946054_Traceguids,
        a2);
    }
    goto LABEL_47;
  }
  if ( (a5 & 1) != 0 && (dword_1401B983C || (dword_1401B9840 & 4) != 0) )
    goto LABEL_33;
  *(_BYTE *)(a2 + 96) = 67;
  *(_DWORD *)(a2 + 92) = v19 | 0x10;
  Lookup_NsHostNode(v6 + 56, a5 & 0x4000, a1, 0i64, 0i64, dword_1401B9714, 0i64, a6);
LABEL_67:
  if ( a1 && a2 == *(_QWORD *)(a1 + 40) )
  {
LABEL_77:
    if ( a1 )
    {
      v24 = *(_DWORD *)(v6 + 20);
      if ( v24 == *(_DWORD *)(a1 + 528) )
      {
        *(_WORD *)(v6 + 10) |= 0x40u;
      }
      else if ( ntohl(v24) > *(_DWORD *)(a1 + 536) )
      {
        *(_DWORD *)(a1 + 536) = ntohl(*(_DWORD *)(v6 + 20));
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          v25 = Dbg_NodeName(a2);
          WPP_SF_DqDss(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x57u,
            *(unsigned __int16 *)(v6 + 12),
            *(_DWORD *)(a1 + 536),
            v6,
            *(_WORD *)(v6 + 12),
            (__int64)v25,
            *(_QWORD *)(a1 + 16));
        }
      }
      v26 = -16;
      v43 = -16;
      if ( *(_BYTE *)(a2 + 96) != 0xF2 )
      {
        if ( (_WORD)v7 == 2 )
        {
          v26 = -126;
          v43 = -126;
          if ( (*(_BYTE *)(a2 + 92) & 0x10) == 0 )
          {
LABEL_47:
            v15 = 9563;
            goto LABEL_26;
          }
        }
        else
        {
          v26 = 0x80;
          v43 = 0x80;
          if ( (unsigned __int16)v7 > 0x32u )
            goto LABEL_47;
          v27 = 0x5C80010000002i64;
          if ( !_bittest64(&v27, v7) )
            goto LABEL_47;
        }
      }
    }
    else
    {
      v26 = v43;
    }
    if ( (a5 & 0x800000) != 0 && *(_BYTE *)(v6 + 8) == 0xC1 )
    {
      v26 = -63;
      v43 = -63;
    }
    else
    {
      *(_BYTE *)(v6 + 8) = v26;
    }
    v28 = (_QWORD *)(a2 + 64);
    for ( i = *(_QWORD *)(a2 + 64); i; i = *(_QWORD *)i )
    {
      if ( (_WORD)v7 == *(_WORD *)(i + 12) )
      {
        if ( (a5 & 0x800000) != 0 || (*(_BYTE *)(i + 8) & 1) == 0 )
        {
          if ( v26 == *(_BYTE *)(i + 8) )
          {
            if ( (unsigned int)RR_Compare(v6, i, 0i64) )
            {
              if ( *(_DWORD *)(v6 + 20) == *(_DWORD *)(i + 20) )
              {
                v15 = 9711;
                v16 = a5;
                if ( *(_DWORD *)(i + 24) || (a5 & 0x1002) == 4098 )
                {
                  if ( (a5 & 2) != 0 && (!*(_DWORD *)(i + 24) || !*(_DWORD *)(v6 + 24)) )
                    v15 = 0;
                  *(_DWORD *)(i + 24) = *(_DWORD *)(v6 + 24);
                }
                goto LABEL_26;
              }
              goto LABEL_132;
            }
            if ( (unsigned __int16)v7 == 5 )
              goto LABEL_132;
            if ( (unsigned __int16)v7 == 6 )
            {
              if ( (a5 & 1) != 0 )
              {
                v33 = htonl(*(_DWORD *)(i + 56));
                if ( htonl(*(_DWORD *)(v6 + 56)) - v33 - 1 > 0x7FFFFFFE )
                {
                  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x80000) != 0
                    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
                  {
                    WPP_SF_(
                      *((_QWORD *)WPP_GLOBAL_Control + 7),
                      0x59u,
                      (__int64)&WPP_10d39582251c332017bd035d2c946054_Traceguids);
                  }
                  v16 = a5;
                  v15 = 9618;
                  goto LABEL_26;
                }
              }
              *(_DWORD *)(a1 + 396) |= 0x600u;
LABEL_132:
              if ( !*(_DWORD *)(i + 24) && (a5 & 1) != 0 )
              {
                if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                  && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200) != 0
                  && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
                {
                  WPP_SF_(
                    *((_QWORD *)WPP_GLOBAL_Control + 7),
                    0x5Bu,
                    (__int64)&WPP_10d39582251c332017bd035d2c946054_Traceguids);
                }
                *(_DWORD *)(v6 + 24) = 0;
              }
              *v28 = v6;
              *(_QWORD *)v6 = *(_QWORD *)i;
              *(_QWORD *)i = 0i64;
              *(_QWORD *)(a4 + 24) = i;
              *(_QWORD *)(a4 + 16) = v6;
              NTree_ChangeAncestorCounters((volatile signed __int32 **)a2, v44);
              Dbase_UnlockEx(v34, 2, (__int64)"ds\\dns\\server\\server\\rrlist.c", 233);
              if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x80000) != 0
                && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
              {
                if ( a1 )
                  v10 = *(_QWORD *)(a1 + 16);
                v35 = Dbg_NodeName(a2);
                LODWORD(v42) = (unsigned __int16)v7;
                WPP_SF_qqDss(*((_QWORD *)WPP_GLOBAL_Control + 7), v36, v37, i, v6, v42, v35, v10);
              }
              return 0i64;
            }
            if ( (unsigned int)(unsigned __int16)v7 - 65281 <= 1 )
              goto LABEL_132;
          }
          else if ( v26 >= *(_BYTE *)(i + 8) )
          {
            break;
          }
        }
        else
        {
          *v28 = *(_QWORD *)i;
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x80000) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            WPP_SF_q(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x58u,
              (__int64)&WPP_10d39582251c332017bd035d2c946054_Traceguids,
              i);
          }
          RR_Free(i);
          i = (__int64)v28;
        }
      }
      else if ( (unsigned __int16)v7 <= *(_WORD *)(i + 12) )
      {
        break;
      }
      v26 = v43;
      v28 = (_QWORD *)i;
    }
    *(_QWORD *)v6 = i;
    *v28 = v6;
    *(_QWORD *)(a4 + 16) = v6;
    RR_ListResetNodeFlags(a2);
    NTree_ChangeAncestorCounters((volatile signed __int32 **)a2, v44);
    Dbase_UnlockEx(v30, 2, (__int64)"ds\\dns\\server\\server\\rrlist.c", 187);
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x80000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      if ( a1 )
        v10 = *(_QWORD *)(a1 + 16);
      v31 = Dbg_NodeName(a2);
      LODWORD(v41) = (unsigned __int16)v7;
      WPP_SF_qDss(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x5Au, v32, v6, v41, v31, v10);
    }
    return 0i64;
  }
  for ( j = *(volatile signed __int32 **)a2; ; j = *(volatile signed __int32 **)j )
  {
    if ( !j )
      goto LABEL_77;
    v23 = a1 ? *(volatile signed __int32 **)(a1 + 40) : 0i64;
    if ( j == v23 )
      goto LABEL_77;
    if ( (j[23] & 0x20000) != 0 )
      break;
  }
  v15 = 9570;
LABEL_26:
  NTree_ChangeAncestorCounters((volatile signed __int32 **)a2, v44);
  Dbase_UnlockEx(v17, 2, (__int64)"ds\\dns\\server\\server\\rrlist.c", 246);
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x80000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    if ( a1 )
      v18 = *(_QWORD *)(a1 + 16);
    else
      v18 = 0i64;
    v39 = Dbg_NodeName(a2);
    LODWORD(v41) = (unsigned __int16)v7;
    WPP_SF_qDss(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x5Du, v40, v6, v41, v39, v18);
  }
  RR_Free(v6);
  *(_QWORD *)(a4 + 16) = 0i64;
  *(_WORD *)(a4 + 40) = -772;
  if ( v15 == 9711 )
    return (v16 & 2) != 0 ? 0x25EF : 0;
  return v15;
}
// 14008DCD1: variable 'v13' is possibly undefined
// 14008DD3A: variable 'v14' is possibly undefined
// 14008DE2B: variable 'v17' is possibly undefined
// 14008E1E1: variable 'v30' is possibly undefined
// 14008E24A: variable 'v32' is possibly undefined
// 14008E24A: variable 'v41' is possibly undefined
// 14008E40D: variable 'v34' is possibly undefined
// 14008E46A: variable 'v36' is possibly undefined
// 14008E46A: variable 'v37' is possibly undefined
// 14008E46A: variable 'v42' is possibly undefined
// 14008E4F6: variable 'v40' is possibly undefined
// 1401B9714: using guessed type int dword_1401B9714;
// 1401B983C: using guessed type int dword_1401B983C;
// 1401B9840: using guessed type int dword_1401B9840;
// 1401B996C: using guessed type int dword_1401B996C;
##############################
Role: Let's assume that you are an advanced reverse engineer and you are reverse engineering a network driver using IDA Pro, and you are also familiar with the RFC documentation. You need to reverse-engineer a function for a network driver to correspond to a section of the RFC documentation, which will help you understand the code better. The driver you're reversing is Schannel.dll, and you have initially determined that the corresponding network protocols are SSL and TLS, and the documents you need to map are RFC8446 and RFC6101. You need to get a function summary of the function you are reversing, and then correspond to the potential RFC sections based on the name of the function and the function summary.
Function Background: The function is reverse engineered from the driver file Schannel.dll on Windows platform. Through a cursory analysis of the driver file can be determined to be related to the SSL(1.3), TLS(3.0) protocol, that is, with RFC8446, RFC6101 strong correlation.

Output Function Summary: Summarizes the function's functionality with several phrases instead of sentences, focuses on covering the function's control flow information, and highlights the protocol function points implemented by the function. Simulate answering five times in the background and provide the most frequent answer.

Retrieve document sections: giving matches for document sections(FunctionMatchRFCResult) that the code may related to. NOTE if the code is only business related(i.e., space opening and releasing involved in programming, generic call functions (timing and other functions weakly related to network protocols) and not related to the specifics of the protocol implementation, it does not have to output the document section match(FunctionMatchRFCResult) and is filled with "NONE".

Retrieve document sections Thinking Chain: The function code is matched with the RFC document section, and the thinking chain is provided to help you solve the problem better:
	1. Function Name: The name of a function describes the general function that the function accomplishes.
	2. Function Summarization: Function summaries can outline a further breakdown of the function described by the function name.
	3. Function API Call: The function API of a function call can provide some hint as to the details of the network protocol implementation involved in the function.
	4. Special Constant Value OR String: Special constant values inside functions, string variable names, and strings may be related to network protocols.
	5. Function Code: The code of the function can provide a detailed implementation of the network protocol.
Generate Function Information Collection with JSON Format:

{
	"FunctionIndex": "(FILL WITH "File count" with less than four bits are indexed with zeros to make up the four bits.)",
	"FunctionName": "(Full Function Code Name)",
	"FunctionSummarization": [
		"(Function Summary Phrase1)",
		"(Function Summary Phrase2)",
		"(...)"
	],
	"FunctionMatchRFCResult": [
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 1)",
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 2)",
		"(...)"
	],
}

ATTENTION: Remember YOU MUST ONLY output the Function Information Collection result.
