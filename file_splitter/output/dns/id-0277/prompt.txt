Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 277
// Total lines: 252

//----- (0000000140024A28) ----------------------------------------------------
void __fastcall Ds_QueueRemotePollEventForFAZ(__int64 a1)
{
  __int64 v2; // rsi
  int v3; // ebx
  void *v4; // r14
  _QWORD *v5; // r12
  CDnsClientSubnetRecordsTrie *v6; // rcx
  __int64 v7; // rax
  __int64 v8; // rdi
  __int64 i; // rcx
  __int64 v10; // rax
  __int64 v11; // rax
  int v12; // r8d
  char *v13; // rcx
  char v14; // al
  __int64 v15; // rax
  wchar_t *v16; // rax
  void *v17; // rax
  __int64 j; // rdi
  _QWORD *v19; // rax
  char MultiByteStr[256]; // [rsp+30h] [rbp-D0h] BYREF

  v2 = 256i64;
  v3 = 0;
  v4 = 0i64;
  memset_0(MultiByteStr, 0, sizeof(MultiByteStr));
  v5 = 0i64;
  if ( !dword_1401B9870 )
    return;
  EnterCriticalSection(&g_csRemoteDcPolling);
  v6 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x23u, (__int64)&WPP_b8af702b29a73bf6c1982cc5eed21171_Traceguids, a1);
    v6 = WPP_GLOBAL_Control;
  }
  if ( !dword_1401B9874 || g_RemoteDcPollQueueSize < (unsigned int)dword_1401B9874 )
  {
    v7 = *(_QWORD *)(a1 + 456);
    if ( v7 )
      v8 = *(_QWORD *)(v7 + 56);
    else
      v8 = 0i64;
    if ( !v8 )
    {
      v8 = *(_QWORD *)(a1 + 208);
      if ( !v8 )
      {
        if ( v6 == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          || (*((_DWORD *)v6 + 17) & 0x400) == 0
          || *((_BYTE *)v6 + 65) < 4u )
        {
          goto LABEL_19;
        }
        WPP_SF_(*((_QWORD *)v6 + 7), 0x24u, (__int64)&WPP_b8af702b29a73bf6c1982cc5eed21171_Traceguids);
        goto LABEL_18;
      }
    }
    if ( !*(_QWORD *)(v8 + 952) )
      goto LABEL_19;
    if ( !(unsigned int)Name_ConvertLookupNameToDottedName(MultiByteStr, *(unsigned __int16 **)(a1 + 1400)) )
    {
      v6 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
      {
        goto LABEL_19;
      }
      WPP_SF_qq(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x25u,
        (__int64)&WPP_b8af702b29a73bf6c1982cc5eed21171_Traceguids,
        *(_QWORD *)(a1 + 1400),
        a1);
      goto LABEL_18;
    }
    for ( i = -1i64; MultiByteStr[0]; MultiByteStr[v10 - 1] = 0 )
    {
      v10 = -1i64;
      do
        ++v10;
      while ( MultiByteStr[v10] );
      if ( MultiByteStr[v10 - 1] != 46 )
        break;
    }
    v11 = -1i64;
    do
      ++v11;
    while ( MultiByteStr[v11] );
    do
      ++i;
    while ( *(_BYTE *)(*(_QWORD *)(v8 + 16) + i) );
    if ( (_DWORD)v11 == (_DWORD)i )
    {
      v12 = 0;
      v13 = MultiByteStr;
      do
      {
        if ( v2 == -2147483390 )
          break;
        v14 = v13["@" - MultiByteStr];
        if ( !v14 )
          break;
        *v13++ = v14;
        --v2;
      }
      while ( v2 );
      if ( !v2 )
      {
        --v13;
        v12 = -2147024774;
      }
      *v13 = 0;
      if ( v12 < 0 )
      {
LABEL_42:
        v3 = 87;
        goto LABEL_72;
      }
    }
    else
    {
      if ( (unsigned int)v11 < (unsigned int)i )
      {
        v6 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) == 0
          || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
        {
          goto LABEL_19;
        }
        WPP_SF_qss(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x26u,
          (__int64)&WPP_b8af702b29a73bf6c1982cc5eed21171_Traceguids,
          a1,
          MultiByteStr,
          *(_QWORD *)(v8 + 16));
LABEL_18:
        v6 = WPP_GLOBAL_Control;
LABEL_19:
        v3 = 87;
        goto LABEL_73;
      }
      v15 = (unsigned int)(v11 - i - 1);
      if ( (unsigned int)v15 >= 0x100ui64 )
        _report_rangecheckfailure();
      MultiByteStr[v15] = 0;
    }
    v5 = Dns_StringCopyAllocate(MultiByteStr, 0, 2i64, 1);
    v4 = Mem_AllocZero(0x30ui64, 21i64, "ds\\dns\\server\\server\\dnsrodc.c", 1111);
    if ( !v4 )
      goto LABEL_72;
    dword_1401B9714 = Dns_GetCurrentTimeInSeconds();
    *((_DWORD *)v4 + 5) = dword_1401B9714;
    *((_DWORD *)v4 + 4) = dword_1401B986C + dword_1401B9714;
    v16 = (wchar_t *)Mem_Alloc(0xA02u, 0i64, "ds\\dns\\server\\server\\dnsrodc.c", 1128);
    *((_QWORD *)v4 + 4) = v16;
    if ( !v16 )
    {
      v3 = 14;
      goto LABEL_72;
    }
    if ( (int)StringCchPrintfW(v16, 1281i64, L"DC=%s,%s", v5, *(_QWORD *)(v8 + 840)) >= 0 )
    {
      v17 = Dns_StringCopyAllocate(*(char **)(v8 + 952), 0, 1i64, 1);
      *((_QWORD *)v4 + 5) = v17;
      v6 = WPP_GLOBAL_Control;
      if ( v17 )
      {
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          WPP_SF_qSS(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x27u,
            (__int64)&WPP_b8af702b29a73bf6c1982cc5eed21171_Traceguids,
            a1,
            *((_QWORD *)v4 + 4),
            v17);
        }
        for ( j = g_RemoteDcPollQueueHead; ; j = *(_QWORD *)j )
        {
          if ( (__int64 *)j == &g_RemoteDcPollQueueHead )
          {
            v19 = (_QWORD *)qword_1401EC498;
            if ( *(__int64 **)qword_1401EC498 != &g_RemoteDcPollQueueHead )
              __fastfail(3u);
            ++g_RemoteDcPollQueueSize;
            *(_QWORD *)v4 = &g_RemoteDcPollQueueHead;
            *((_QWORD *)v4 + 1) = v19;
            *v19 = v4;
            qword_1401EC498 = (__int64)v4;
            v4 = 0i64;
            goto LABEL_72;
          }
          if ( !(unsigned int)wcsicmp_ThatWorks(*((PCNZWCH *)v4 + 4), *(const WCHAR **)(j + 32))
            && !(unsigned int)wcsicmp_ThatWorks(*((PCNZWCH *)v4 + 5), *(const WCHAR **)(j + 40)) )
          {
            break;
          }
        }
        v6 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
          goto LABEL_77;
        if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0 && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          WPP_SF_q(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x28u,
            (__int64)&WPP_b8af702b29a73bf6c1982cc5eed21171_Traceguids,
            a1);
          v6 = WPP_GLOBAL_Control;
        }
      }
      else
      {
        v3 = 14;
      }
      goto LABEL_73;
    }
    goto LABEL_42;
  }
  logExcessRSOMessage((__int64)v6, (__int64)&WPP_GLOBAL_Control);
LABEL_72:
  v6 = WPP_GLOBAL_Control;
LABEL_73:
  if ( v6 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)v6 + 17) & 0x400) != 0
    && *((_BYTE *)v6 + 65) >= 4u )
  {
    WPP_SF_Dq(*((_QWORD *)v6 + 7), 0x29u, (__int64)&WPP_b8af702b29a73bf6c1982cc5eed21171_Traceguids, v3);
  }
LABEL_77:
  LeaveCriticalSection(&g_csRemoteDcPolling);
  Mem_Free(v5, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\dnsrodc.c", 1215);
  Mem_Free(0i64, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\dnsrodc.c", 1216);
  freeRemotePollEntry((__int64)v4);
}
// 1401B8C8C: using guessed type int g_RemoteDcPollQueueSize;
// 1401B9714: using guessed type int dword_1401B9714;
// 1401B986C: using guessed type int dword_1401B986C;
// 1401B9870: using guessed type int dword_1401B9870;
// 1401B9874: using guessed type int dword_1401B9874;
// 1401EC490: using guessed type __int64 g_RemoteDcPollQueueHead;
// 1401EC498: using guessed type __int64 qword_1401EC498;
// 140024A28: using guessed type CHAR MultiByteStr[256];
##############################
Role: Let's assume that you are an advanced reverse engineer and you are reverse engineering a network driver using IDA Pro, and you are also familiar with the RFC documentation. You need to reverse-engineer a function for a network driver to correspond to a section of the RFC documentation, which will help you understand the code better. The driver you're reversing is Schannel.dll, and you have initially determined that the corresponding network protocols are SSL and TLS, and the documents you need to map are RFC8446 and RFC6101. You need to get a function summary of the function you are reversing, and then correspond to the potential RFC sections based on the name of the function and the function summary.
Function Background: The function is reverse engineered from the driver file Schannel.dll on Windows platform. Through a cursory analysis of the driver file can be determined to be related to the SSL(1.3), TLS(3.0) protocol, that is, with RFC8446, RFC6101 strong correlation.

Output Function Summary: Summarizes the function's functionality with several phrases instead of sentences, focuses on covering the function's control flow information, and highlights the protocol function points implemented by the function. Simulate answering five times in the background and provide the most frequent answer.

Retrieve document sections: giving matches for document sections(FunctionMatchRFCResult) that the code may related to. NOTE if the code is only business related(i.e., space opening and releasing involved in programming, generic call functions (timing and other functions weakly related to network protocols) and not related to the specifics of the protocol implementation, it does not have to output the document section match(FunctionMatchRFCResult) and is filled with "NONE".

Retrieve document sections Thinking Chain: The function code is matched with the RFC document section, and the thinking chain is provided to help you solve the problem better:
	1. Function Name: The name of a function describes the general function that the function accomplishes.
	2. Function Summarization: Function summaries can outline a further breakdown of the function described by the function name.
	3. Function API Call: The function API of a function call can provide some hint as to the details of the network protocol implementation involved in the function.
	4. Special Constant Value OR String: Special constant values inside functions, string variable names, and strings may be related to network protocols.
	5. Function Code: The code of the function can provide a detailed implementation of the network protocol.
Generate Function Information Collection with JSON Format:

{
	"FunctionIndex": "(FILL WITH "File count" with less than four bits are indexed with zeros to make up the four bits.)",
	"FunctionName": "(Full Function Code Name)",
	"FunctionSummarization": [
		"(Function Summary Phrase1)",
		"(Function Summary Phrase2)",
		"(...)"
	],
	"FunctionMatchRFCResult": [
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 1)",
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 2)",
		"(...)"
	],
}

ATTENTION: Remember YOU MUST ONLY output the Function Information Collection result.
