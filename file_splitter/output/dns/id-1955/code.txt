Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 1955
// Total lines: 353

//----- (00000001400F0818) ----------------------------------------------------
__int64 __fastcall DnsOls_ResignZoneIfNecessary(struct _zone_info *a1)
{
  unsigned int v1; // eax
  char v2; // r14
  int v4; // r15d
  unsigned int v5; // r13d
  struct _zone_info *NextElement_ScopeMap; // rbx
  unsigned int v7; // edi
  CDnsClientSubnetRecordsTrie *v8; // rcx
  unsigned __int16 v9; // dx
  int v10; // eax
  BOOL v11; // r14d
  int v12; // eax
  _QWORD *i; // rax
  int v14; // eax
  unsigned int v15; // r9d
  __int64 v16; // rdx
  const unsigned __int16 *v17; // r9
  const char *v18; // rax
  int v19; // eax
  bool v20; // zf
  __int64 v21; // rcx
  char v22; // r14
  char v23; // r15
  char v25; // [rsp+30h] [rbp-28h]
  unsigned int v26; // [rsp+34h] [rbp-24h] BYREF
  unsigned int v27; // [rsp+38h] [rbp-20h] BYREF
  unsigned int v28; // [rsp+3Ch] [rbp-1Ch] BYREF
  unsigned int v29; // [rsp+40h] [rbp-18h] BYREF
  __int64 v30; // [rsp+48h] [rbp-10h]
  char v31; // [rsp+A0h] [rbp+48h]
  char v32; // [rsp+A8h] [rbp+50h]
  char v33; // [rsp+B0h] [rbp+58h]
  char v34; // [rsp+B8h] [rbp+60h]

  v1 = *((_DWORD *)a1 + 275);
  v2 = dword_1401B9714;
  v25 = 0;
  v4 = 0;
  v31 = 0;
  v5 = 0;
  v32 = 0;
  NextElement_ScopeMap = a1;
  v34 = 0;
  v33 = 0;
  v30 = 0i64;
  if ( !v1 || v1 > dword_1401B9714 )
    return 0i64;
  v7 = Zone_LockForRPCSeqEx((__int64)a1, 0x2710u);
  if ( !v7 )
  {
    v25 = 1;
    v7 = Zone_LockForWriteEx((__int64)a1, 1, 0x2710u, (__int64)"ds\\dns\\server\\server\\olscore.cpp", 104);
    if ( v7 )
    {
      v8 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
      {
        goto LABEL_95;
      }
      v9 = 138;
      goto LABEL_8;
    }
    v31 = 1;
    v8 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_Dds(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x8Bu,
        (__int64)&WPP_4a0a7bf065bf32df4bbeec8f9c7ea0c3_Traceguids,
        *((_DWORD *)a1 + 275),
        v2,
        *((_QWORD *)a1 + 2));
      v8 = WPP_GLOBAL_Control;
    }
    v10 = *((_DWORD *)a1 + 93);
    v11 = v10 == 1 && (*((_BYTE *)a1 + 1040) & 8) != 0;
    if ( v10 == 1 )
    {
      v12 = *((_DWORD *)a1 + 260);
      if ( (v12 & 8) != 0 )
      {
        v4 = 515;
        if ( (*((_BYTE *)a1 + 388) & 1) != 0 )
          v4 = 547;
        if ( (v12 & 0xC000) != 0 )
          v4 |= 0x40u;
        if ( (v12 & 2) != 0 )
        {
          for ( i = (_QWORD *)*((_QWORD *)a1 + 142); ; i = (_QWORD *)*i )
          {
            if ( !i )
              goto LABEL_35;
            if ( !i[18] )
              break;
          }
          v4 |= 0x1Cu;
        }
LABEL_35:
        v5 = v4 & 0xFFFFFFFB;
        goto LABEL_36;
      }
    }
    while ( 1 )
    {
LABEL_36:
      if ( g_fDnsServiceExit == 1 )
      {
        v7 = 1169409;
        goto LABEL_103;
      }
      if ( *((_QWORD *)NextElement_ScopeMap + 24) )
      {
        Zone_LockForWriteEx(
          (__int64)NextElement_ScopeMap,
          1,
          0xFFFFFFFF,
          (__int64)"ds\\dns\\server\\server\\olscore.cpp",
          191);
        v30 = *((_QWORD *)NextElement_ScopeMap + 24);
        v31 = 1;
        v14 = DnsOls_SyncZoneScopeForSigning((__int64)NextElement_ScopeMap, (__int64)a1 + 1040);
        v7 = v14;
        if ( v14 )
        {
          v8 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
          {
            WPP_SF_DSs(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x8Cu,
              (__int64)&WPP_4a0a7bf065bf32df4bbeec8f9c7ea0c3_Traceguids,
              v14,
              *((_QWORD *)NextElement_ScopeMap + 24),
              *((_QWORD *)NextElement_ScopeMap + 2));
            goto LABEL_94;
          }
          goto LABEL_95;
        }
        if ( v33 )
          *((_DWORD *)NextElement_ScopeMap + 260) &= ~2u;
        if ( dwMilliseconds )
          Sleep(dwMilliseconds);
        if ( dword_1401B9A1C )
        {
          v7 = cfg_CheckSpecialScopeAndFail(dword_1401B9A1C, *((const wchar_t **)NextElement_ScopeMap + 24));
          if ( v7 )
          {
LABEL_101:
            v8 = WPP_GLOBAL_Control;
            goto LABEL_103;
          }
        }
      }
      if ( v11 )
      {
        v15 = v4;
        if ( *((_QWORD *)NextElement_ScopeMap + 24) )
          v15 = v5;
        v26 = DnsOls_SignZone(NextElement_ScopeMap, 0i64, 255i64, v15, 0i64);
        v7 = v26;
        if ( !v26
          && !*((_QWORD *)NextElement_ScopeMap + 24)
          && (*((_BYTE *)NextElement_ScopeMap + 388) & 1) == 0
          && (*((_BYTE *)NextElement_ScopeMap + 1040) & 6) == 0
          && g_isRegisteredForUTC == 1 )
        {
          _InterlockedIncrement(&dword_1401B9610);
LABEL_61:
          v7 = v26;
        }
      }
      else
      {
        v26 = DnsOls_SignZone(NextElement_ScopeMap, 0i64, 255i64, 0x4000u, 0i64);
        v7 = v26;
        v34 = 1;
        if ( !v26
          && !*((_QWORD *)NextElement_ScopeMap + 24)
          && (*((_BYTE *)NextElement_ScopeMap + 388) & 1) == 0
          && (*((_BYTE *)NextElement_ScopeMap + 1040) & 2) == 0
          && g_isRegisteredForUTC == 1
          && dword_1401B9610 )
        {
          _InterlockedDecrement(&dword_1401B9610);
          goto LABEL_61;
        }
      }
      if ( ((*((_DWORD *)NextElement_ScopeMap + 260) >> 2) & 1) == v11 )
        goto LABEL_81;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        v17 = L"Default";
        if ( *((_QWORD *)NextElement_ScopeMap + 24) )
          v17 = (const unsigned __int16 *)*((_QWORD *)NextElement_ScopeMap + 24);
        v18 = "unsigned";
        if ( v11 )
          v18 = "signed";
        WPP_SF_Sss(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x8Du,
          (__int64)&WPP_4a0a7bf065bf32df4bbeec8f9c7ea0c3_Traceguids,
          v17,
          *((_QWORD *)NextElement_ScopeMap + 2),
          (__int64)v18);
      }
      *((_DWORD *)NextElement_ScopeMap + 260) &= ~4u;
      *((_DWORD *)NextElement_ScopeMap + 260) |= 4 * v11;
      if ( (*((_BYTE *)NextElement_ScopeMap + 388) & 1) != 0 )
        goto LABEL_79;
      if ( !*((_QWORD *)NextElement_ScopeMap + 24) )
        WriteDWORDToRegistry(
          (__int64)NextElement_ScopeMap,
          "IsSigned",
          (*((_DWORD *)NextElement_ScopeMap + 260) >> 2) & 1,
          0);
      if ( *((_DWORD *)NextElement_ScopeMap + 93) != 1 || (*((_BYTE *)NextElement_ScopeMap + 1040) & 4) == 0 )
      {
        v19 = *((_DWORD *)NextElement_ScopeMap + 260);
        if ( (v19 & 2) == 0 )
        {
          v33 = 1;
          v20 = *((_QWORD *)NextElement_ScopeMap + 24) == 0i64;
          *((_DWORD *)NextElement_ScopeMap + 260) = v19 | 2;
          if ( v20 )
          {
            DnsOls_DiscoverZoneKeymasterFqdn((__int64)NextElement_ScopeMap, v16, 0, 0i64);
            WriteDWORDToRegistry(
              (__int64)NextElement_ScopeMap,
              "IsKeymaster",
              (*((_DWORD *)NextElement_ScopeMap + 260) >> 1) & 1,
              0);
          }
        }
LABEL_79:
        if ( (*((_BYTE *)NextElement_ScopeMap + 1040) & 4) == 0 )
          *((_DWORD *)NextElement_ScopeMap + 99) &= 0xFFFFFFCF;
      }
LABEL_81:
      if ( v34 )
        Zone_IncrementVersion((__int64)NextElement_ScopeMap, 0i64);
      if ( v7 )
        goto LABEL_101;
      if ( !*((_QWORD *)NextElement_ScopeMap + 24) )
      {
        if ( !*((_QWORD *)NextElement_ScopeMap + 23) )
          goto LABEL_96;
        v21 = *((_QWORD *)NextElement_ScopeMap + 21);
        v27 = -1;
        acquireRead(v21, 0xFFFFFFFF, &v27);
        v32 = 1;
      }
      Zone_UnlockAfterWriteEx((__int64)NextElement_ScopeMap, 1, (__int64)"ds\\dns\\server\\server\\olscore.cpp", 134);
      v31 = 0;
      NextElement_ScopeMap = (struct _zone_info *)Get_NextElement_ScopeMap(*((_QWORD *)a1 + 20), v30, &v26);
      if ( !NextElement_ScopeMap )
      {
        v7 = v26;
        goto LABEL_94;
      }
      v8 = WPP_GLOBAL_Control;
    }
  }
  v8 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) == 0
    || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
  {
    goto LABEL_95;
  }
  v9 = 137;
LABEL_8:
  WPP_SF_Ds(*((_QWORD *)v8 + 7), v9, (__int64)&WPP_4a0a7bf065bf32df4bbeec8f9c7ea0c3_Traceguids, v7, *((_QWORD *)a1 + 2));
LABEL_94:
  v8 = WPP_GLOBAL_Control;
LABEL_95:
  if ( !v7 )
  {
LABEL_96:
    v22 = v31;
    v23 = v32;
    if ( !v31 )
    {
      if ( v32 )
      {
        v28 = -1;
        releaseRead(*((_QWORD *)a1 + 21), &v28, 1);
        v23 = 0;
      }
      Zone_LockForWriteEx((__int64)a1, 1, 0xFFFFFFFF, (__int64)"ds\\dns\\server\\server\\olscore.cpp", 158);
      v22 = 1;
    }
    DnsOls_ClearZoneResignSchedule((__int64)a1);
    goto LABEL_105;
  }
LABEL_103:
  v22 = v31;
  v20 = (v4 & 0x40) == 0;
  v23 = v32;
  if ( !v20 )
  {
    *((_DWORD *)a1 + 260) |= 0x8000u;
LABEL_105:
    v8 = WPP_GLOBAL_Control;
  }
  if ( v23 )
  {
    v29 = -1;
    releaseRead(*((_QWORD *)a1 + 21), &v29, 1);
    v8 = WPP_GLOBAL_Control;
  }
  if ( v22 )
  {
    if ( !v7 )
      NextElement_ScopeMap = a1;
    Zone_UnlockAfterWriteEx((__int64)NextElement_ScopeMap, 1, (__int64)"ds\\dns\\server\\server\\olscore.cpp", 194);
    v8 = WPP_GLOBAL_Control;
  }
  if ( v25 )
  {
    Lock_ReleaseWrite(*((_QWORD *)a1 + 39));
    v8 = WPP_GLOBAL_Control;
  }
  if ( v8 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)v8 + 17) & 0x200000) != 0
    && *((_BYTE *)v8 + 65) >= 4u )
  {
    WPP_SF_Ds(
      *((_QWORD *)v8 + 7),
      0x8Eu,
      (__int64)&WPP_4a0a7bf065bf32df4bbeec8f9c7ea0c3_Traceguids,
      v7,
      *((_QWORD *)a1 + 2));
  }
  return v7;
}
// 1400F0C68: variable 'v16' is possibly undefined
// 140188260: using guessed type wchar_t aDefault_1[8];
// 1401B9190: using guessed type int g_isRegisteredForUTC;
// 1401B9610: using guessed type int dword_1401B9610;
// 1401B9714: using guessed type int dword_1401B9714;
// 1401B9A1C: using guessed type int dword_1401B9A1C;
// 1401B9A40: using guessed type int g_fDnsServiceExit;
