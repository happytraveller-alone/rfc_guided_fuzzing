Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 1257
// Total lines: 222

//----- (00000001400A2F0C) ----------------------------------------------------
__int64 __fastcall Config_ResetProperty(int a1, char *a2, __int64 a3)
{
  CHAR *v6; // r12
  unsigned int IndexForPropertyName; // eax
  unsigned int v8; // ebx
  __int64 v10; // r14
  unsigned int LastError; // ebp
  char *v12; // rax
  int v13; // eax
  __int64 *v14; // r15
  void *v15; // rax
  int v16; // r9d
  __int64 v17; // r8
  int v18; // r9d
  const CHAR *v19; // rax
  int v20; // r9d
  BYTE *v21; // rax
  CDnsClientSubnetRecordsTrie *v22; // rcx
  const CHAR *v23; // r9
  int v24; // [rsp+88h] [rbp+20h] BYREF

  v6 = 0i64;
  IndexForPropertyName = findIndexForPropertyName(a2);
  v8 = IndexForPropertyName;
  if ( IndexForPropertyName != -1 )
  {
    v10 = 7i64 * IndexForPropertyName;
    LastError = Validate_DwordProperty(a1, a2, (_DWORD *)a3);
    if ( LastError )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        WPP_SF_sd(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x21u,
          (__int64)&WPP_44543417c05739f4a9c82c388f6d5836_Traceguids,
          a2);
      }
      return LastError;
    }
    v12 = (&ServerPropertyTable)[v10 + 5];
    if ( v12 )
    {
      v13 = ((__int64 (__fastcall *)(__int64, _QWORD, _QWORD, _QWORD))v12)(a3, v8, 0i64, 0i64);
      LOBYTE(LastError) = v13;
      if ( v13 == 0x80000000 )
      {
        LastError = GetLastError();
LABEL_68:
        Mem_Free(v6, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\srvcfg.c", 2913);
        return LastError;
      }
    }
    if ( (LastError & 1) != 0 )
      goto LABEL_24;
    if ( *(_DWORD *)a3 == 4 )
    {
      *(_DWORD *)(&ServerPropertyTable)[v10 + 6] = *(_DWORD *)(a3 + 8);
      goto LABEL_24;
    }
    if ( *(_DWORD *)a3 == 0x20000 )
    {
      v14 = (__int64 *)(&ServerPropertyTable)[v10 + 6];
      if ( !v14 )
        goto LABEL_24;
      Timeout_FreeWithFunctionEx(*v14, (__int64)DnsAddrArray_Free, (__int64)"ds\\dns\\server\\server\\srvcfg.c", 2751);
      v15 = DnsAddrArray_CopyAndExpand(*(_DWORD **)(a3 + 8), 0i64, 0i64, v18);
      goto LABEL_23;
    }
    if ( *(_DWORD *)a3 == -268435455 )
    {
      v14 = (__int64 *)(&ServerPropertyTable)[v10 + 6];
      if ( !v14 )
        goto LABEL_24;
      Timeout_FreeWithFunctionEx(*v14, 0i64, (__int64)"ds\\dns\\server\\server\\srvcfg.c", 2761);
      v16 = 1;
      v17 = 1i64;
    }
    else
    {
      if ( *(_DWORD *)a3 != -16777215 )
      {
        if ( *(_DWORD *)a3 == -16777209 )
        {
          v14 = (__int64 *)(&ServerPropertyTable)[v10 + 6];
          if ( v14 )
          {
            Timeout_FreeWithFunctionEx(
              *v14,
              (__int64)Dns_FreeStringArray,
              (__int64)"ds\\dns\\server\\server\\srvcfg.c",
              2781);
            v15 = Dns_CopyStringArray(*(LPCCH **)(a3 + 8));
LABEL_23:
            *v14 = (__int64)v15;
          }
        }
LABEL_24:
        if ( dword_1401B9728 == 1 && (LastError & 8) != 0 )
          Config_UpdateBootInfo();
        if ( (LastError & 2) != 0 )
          return 0i64;
        v19 = (const CHAR *)Dns_StringCopyAllocate((&ServerPropertyTable)[v10], 0, 2i64, 1);
        v20 = *(_DWORD *)a3;
        v6 = (CHAR *)v19;
        if ( *(_DWORD *)a3 == 4 )
        {
          v23 = (&ServerPropertyTable)[v10];
          v24 = *(_DWORD *)(a3 + 8);
          LastError = Reg_SetValue(a1, 0i64, 0i64, v23, 4u, (BYTE *)&v24, 4u);
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            WPP_SF_sdD(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x22u,
              (__int64)&WPP_44543417c05739f4a9c82c388f6d5836_Traceguids,
              (&ServerPropertyTable)[v10]);
          }
          goto LABEL_68;
        }
        if ( v20 != 0x20000 )
        {
          if ( v20 == -268435455 )
          {
            v21 = (BYTE *)&LocaleName;
            if ( *(_QWORD *)(a3 + 8) )
              v21 = *(BYTE **)(a3 + 8);
            LastError = Reg_SetValue(a1, 0i64, 0i64, v6, 0xF0000001, v21, 0);
            if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
              && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
            {
              WPP_SF_sdS(
                *((_QWORD *)WPP_GLOBAL_Control + 7),
                0x23u,
                (__int64)&WPP_44543417c05739f4a9c82c388f6d5836_Traceguids,
                (&ServerPropertyTable)[v10],
                LastError,
                *(_QWORD *)(a3 + 8));
            }
            if ( lpLibFileName && *lpLibFileName )
              dword_1401B9934 = 0;
          }
          else if ( v20 == -16777209 )
          {
            LastError = Reg_SetValue(a1, 0i64, 0i64, v19, 0xFF000007, *(BYTE **)(a3 + 8), 0);
            if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
              && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
            {
              WPP_SF_sDq(
                *((_QWORD *)WPP_GLOBAL_Control + 7),
                0x25u,
                (__int64)&WPP_44543417c05739f4a9c82c388f6d5836_Traceguids,
                (&ServerPropertyTable)[v10]);
            }
          }
          else
          {
            LastError = 87;
            if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
              && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
            {
              WPP_SF_Ds(
                *((_QWORD *)WPP_GLOBAL_Control + 7),
                0x26u,
                (__int64)&WPP_44543417c05739f4a9c82c388f6d5836_Traceguids,
                v20,
                (__int64)(&ServerPropertyTable)[v10]);
            }
          }
          goto LABEL_68;
        }
        LastError = Reg_SetAddrArrayEx(a1, 0i64, 0i64, (&ServerPropertyTable)[v10], *(_QWORD *)(a3 + 8), 0);
        v22 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
        {
          if ( (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0 )
            goto LABEL_68;
          if ( *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            WPP_SF_sDq(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x24u,
              (__int64)&WPP_44543417c05739f4a9c82c388f6d5836_Traceguids,
              (&ServerPropertyTable)[v10]);
            v22 = WPP_GLOBAL_Control;
          }
        }
        if ( (*((_BYTE *)v22 + 68) & 2) != 0 )
          Dbg_DnsAddrArray("Config_ResetProperty", *(_QWORD *)(a3 + 8));
        goto LABEL_68;
      }
      v14 = (__int64 *)(&ServerPropertyTable)[v10 + 6];
      if ( !v14 )
        goto LABEL_24;
      Timeout_FreeWithFunctionEx(*v14, 0i64, (__int64)"ds\\dns\\server\\server\\srvcfg.c", 2771);
      v16 = 2;
      v17 = 2i64;
    }
    v15 = Dns_StringCopyAllocate(*(char **)(a3 + 8), 0, v17, v16);
    goto LABEL_23;
  }
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_s(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x20u, (__int64)&WPP_44543417c05739f4a9c82c388f6d5836_Traceguids, a2);
  }
  return 9553i64;
}
// 1400A3150: variable 'v18' is possibly undefined
// 1401560E0: using guessed type __int64 __fastcall DnsAddrArray_Free();
// 140185140: using guessed type __int64 (__fastcall *_guard_dispatch_icall_fptr)(_QWORD, _QWORD);
// 1401B9728: using guessed type int dword_1401B9728;
// 1401B9934: using guessed type int dword_1401B9934;
