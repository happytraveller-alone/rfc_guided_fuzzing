Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 1140
// Total lines: 439

//----- (000000014009152C) ----------------------------------------------------
__int64 __fastcall Wire_AddResourceRecordToMessage(
        __int64 a1,
        __int64 *a2,
        unsigned __int16 a3,
        __int64 a4,
        int a5,
        __int64 a6)
{
  unsigned __int64 v6; // r12
  _WORD *v8; // r15
  unsigned int v11; // ebp
  CDnsClientSubnetRecordsTrie **v12; // r8
  char *v13; // rax
  int v14; // ecx
  char v15; // bl
  char v16; // al
  int v17; // r14d
  u_long v18; // ebx
  u_long v19; // ecx
  u_long v20; // eax
  int v21; // ebx
  __int64 v22; // r12
  unsigned __int64 v23; // r10
  __int64 v24; // rax
  unsigned __int16 v25; // cx
  __int64 v26; // rax
  __int64 v27; // rdx
  __int64 v28; // rcx
  unsigned __int16 v29; // dx
  unsigned __int64 v30; // r8
  unsigned __int8 *v31; // r8
  _WORD *v32; // rax
  __int64 *v33; // rcx
  unsigned __int64 v34; // r15
  char *v35; // rax
  __int16 v37; // ax
  int v38; // ecx
  int v39; // ebx
  int v40; // ecx
  unsigned int v41; // r13d
  __int64 v42; // rax
  __int64 v43; // r14
  __int64 v44; // r12
  char v45; // r12
  char v46; // r13
  unsigned int v47; // ebx
  unsigned int v48; // r15d
  unsigned __int8 *v49; // rdx
  unsigned int v50; // eax
  __int64 (__fastcall *v51)(__int64, _WORD *, unsigned __int64, __int64, __int64); // rax
  unsigned __int64 v52; // rax
  __int64 v53; // rcx
  CDnsClientSubnetRecordsTrie *v54; // r10
  int v55; // r11d
  const char *v56; // rdx
  const char *v57; // rax
  const char *v58; // r9
  __int64 v59; // [rsp+20h] [rbp-278h]
  __int64 v60; // [rsp+28h] [rbp-270h]
  __int64 v61; // [rsp+30h] [rbp-268h]
  __int64 v62; // [rsp+38h] [rbp-260h]
  __int64 v63; // [rsp+40h] [rbp-258h]
  unsigned int v65; // [rsp+70h] [rbp-228h]
  __int64 v66; // [rsp+78h] [rbp-220h]
  unsigned __int64 v67; // [rsp+80h] [rbp-218h]
  _WORD *v68; // [rsp+88h] [rbp-210h]
  __int64 v69; // [rsp+90h] [rbp-208h]
  unsigned __int16 v70[184]; // [rsp+A0h] [rbp-1F8h] BYREF
  char Str1[64]; // [rsp+210h] [rbp-88h] BYREF

  v6 = *(_QWORD *)(a1 + 24);
  v8 = *(_WORD **)(a1 + 32);
  LOWORD(v65) = a3;
  v66 = a6;
  v11 = 1;
  v67 = v6;
  v69 = 0i64;
  v12 = &WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800) == 0
    || *((_BYTE *)WPP_GLOBAL_Control + 65) < 5u )
  {
    v15 = a5;
  }
  else
  {
    v13 = Dbg_NodeName((__int64)a2);
    v14 = a3;
    v15 = a5;
    WPP_SF_qDDqDDs(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0xCu,
      *(unsigned __int8 *)(a4 + 8),
      a4,
      *(unsigned __int16 *)(a4 + 12),
      *(unsigned __int8 *)(a4 + 8),
      a1,
      a5,
      v14,
      v13);
  }
  v16 = *(_BYTE *)(a4 + 8);
  if ( v16 == 8 && (*(_BYTE *)(a1 + 1417) || !dword_1401B9834) || *(char *)(a4 + 10) < 0 )
    return 0;
  v17 = v15 & 1;
  if ( ((v15 & 1) == 0 || *(_WORD *)(a4 + 12) != 39) && ((v16 & 1) != 0 || v16 == 8) )
  {
    v21 = RR_PacketTtlForCachedRecord(a4, *(unsigned int *)(a1 + 568), (__int64)v12);
    if ( v21 != -1 )
      goto LABEL_21;
    return 0;
  }
  if ( *(_WORD *)(a4 + 12) == 6 && (*(_BYTE *)(a1 + 6307) & 0xF) == 3 )
  {
    v18 = ntohl(*(_DWORD *)(a4 + 72));
    if ( ntohl(*(_DWORD *)(a4 + 20)) >= v18 )
      v19 = *(_DWORD *)(a4 + 72);
    else
      v19 = *(_DWORD *)(a4 + 20);
    v20 = ntohl(v19);
    v21 = htonl(v20);
  }
  else
  {
    v21 = *(_DWORD *)(a4 + 20);
  }
LABEL_21:
  if ( (*(_BYTE *)(a1 + 592) & 2) != 0 && *(_WORD *)(a4 + 12) != 41 )
  {
    v22 = *(_QWORD *)(a1 + 24);
    v23 = *(unsigned int *)(a1 + 48) + a1 + 6304;
    v24 = *(_QWORD *)(a1 + 1256);
    v25 = 0;
    v69 = v22;
    if ( v24 )
    {
      v26 = *(_QWORD *)(v24 + 6280);
      if ( v26 )
      {
        v27 = *(_QWORD *)(v26 + 192);
        if ( v27 )
        {
          v28 = -1i64;
          do
            ++v28;
          while ( *(_WORD *)(v27 + 2 * v28) );
          v25 = 2 * v28;
        }
      }
    }
    v29 = *(_WORD *)(a1 + 606);
    if ( v29 )
    {
      v30 = v29 + a1 + 6304;
      if ( v23 < v30 )
      {
        v11 = 0;
LABEL_127:
        if ( v69 )
          *(_QWORD *)(a1 + 24) = v69;
        return v11;
      }
      v6 = v22 - (v23 - v30);
    }
    else
    {
      v6 = v22 - v25 - 16;
    }
    v67 = v6;
    *(_QWORD *)(a1 + 24) = v6;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
    {
      WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0xDu, (__int64)&WPP_a868f83000033e876174d5733703ce9b_Traceguids);
    }
  }
  if ( (*(_BYTE *)(a4 + 28) & 0x10) != 0 )
  {
    v31 = (unsigned __int8 *)(*(unsigned __int16 *)(a4 + 14) + a4 + 56);
    if ( v31 )
    {
      v32 = Name_WriteCountNameToPacketEx(a1, (unsigned __int64)v8, v31, 1);
      goto LABEL_46;
    }
  }
  else
  {
    v33 = a2;
    if ( a2 )
    {
      v32 = Name_PlaceNodeNameInPacketEx(a1, (unsigned __int64)v8, a2);
LABEL_46:
      v68 = v32;
      v34 = (unsigned __int64)v32;
      if ( !v32 )
        goto LABEL_47;
LABEL_58:
      if ( !(unsigned int)Wire_TestForBytesRemaining(v34, v6, 10i64) )
        goto LABEL_47;
      if ( v17 )
      {
        if ( *(_WORD *)(a4 + 12) == 39 )
        {
          if ( *(_BYTE *)(a1 + 1415) == 1 )
            ++*(_WORD *)(a1 + 1452);
          v37 = 1280;
          v21 = 0;
LABEL_68:
          *(_WORD *)v34 = v37;
          *(_WORD *)(v34 + 2) = 256;
          *(_DWORD *)(v34 + 4) = v21;
          if ( dword_1401B992C )
          {
            if ( (unsigned __int16)(*(_WORD *)(a1 + 480) - 251) > 1u
              && (*(_BYTE *)(a1 + 6306) & 0x78) != 32
              && ((*(_WORD *)(a1 + 496) - 2) & 0xFFFD) != 0
              && *(_WORD *)(a4 + 12) <= 0x15u )
            {
              v38 = 2392220;
              if ( _bittest(&v38, *(unsigned __int16 *)(a4 + 12)) )
              {
                if ( *(_WORD *)(a4 + 12) != 2 )
                  goto LABEL_84;
                if ( !a6 )
                  goto LABEL_84;
                memset_0(Str1, 0, sizeof(Str1));
                v39 = 0;
                if ( !(unsigned int)Name_ConvertRawNameToLookupName((unsigned __int8 *)(a4 + 58), v70) )
                  goto LABEL_84;
                v40 = *(unsigned __int8 *)(a6 + 100);
                if ( v70[0] <= v40 )
                  goto LABEL_84;
                v41 = 3;
                v42 = *(_QWORD *)(a6 + 56);
                if ( v42 && *(_DWORD *)(v42 + 372) == 1 )
                  v41 = dword_1401B9854;
                v43 = 0i64;
                v44 = v70[0];
                if ( !v70[0] )
                {
LABEL_84:
                  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
                    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
                  {
                    v59 = a1;
                    WPP_SF_Dq(
                      *((_QWORD *)WPP_GLOBAL_Control + 7),
                      0xEu,
                      (__int64)&WPP_a868f83000033e876174d5733703ce9b_Traceguids,
                      *(unsigned __int16 *)(a4 + 12));
                  }
                  v45 = *(_BYTE *)(a1 + 1416);
                  *(_BYTE *)(a1 + 1416) = 0;
                  v46 = 1;
                  goto LABEL_99;
                }
                while ( v70[0] != v40 )
                {
                  ++v39;
                  ++v40;
                  if ( ++v43 >= v70[0] )
                    goto LABEL_84;
                }
                if ( v43 < v70[0] )
                {
                  v47 = v65;
                  while ( 1 )
                  {
                    v48 = *((unsigned __int8 *)&v70[164] + v43);
                    v49 = *(unsigned __int8 **)&v70[4 * v43++ + 4];
                    v50 = Dns_DowncaseNameLabel(Str1, v49, v48, (const char *)v41);
                    if ( v50 )
                    {
                      if ( v50 != -1 )
                        v47 = v50;
                    }
                    else
                    {
                      v47 = v48;
                    }
                    if ( strncmp(Str1, (const char *)(*(unsigned __int8 *)(v66 + 101) + v66 + 103), v47) )
                      goto LABEL_84;
                    v66 = *(_QWORD *)v66;
                    if ( v43 >= v44 )
                    {
                      v45 = 0;
                      v46 = 0;
                      goto LABEL_99;
                    }
                  }
                }
              }
            }
          }
          v45 = 0;
          v46 = 0;
LABEL_99:
          v51 = (__int64 (__fastcall *)(__int64, _WORD *, unsigned __int64, __int64, __int64))RR_DispatchFunctionForType(
                                                                                                (__int64)&RRWireWriteTable,
                                                                                                *(_WORD *)(a4 + 12));
          if ( !v51 )
            goto LABEL_47;
          v52 = v51(a1, v68 + 5, v67, a4, v59);
          if ( v46 )
            *(_BYTE *)(a1 + 1416) = v45;
          if ( !v52 || v52 > v67 )
          {
            if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800) == 0
              || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
            {
              v33 = a2;
              goto LABEL_48;
            }
            LODWORD(v59) = *(unsigned __int16 *)(a4 + 12);
            WPP_SF_qdq(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0xFu,
              (__int64)&WPP_a868f83000033e876174d5733703ce9b_Traceguids,
              a1,
              v59,
              v52);
            goto LABEL_47;
          }
          if ( *(_WORD *)(a4 + 12) <= 0x33u )
          {
            v53 = 0xDC80000000000i64;
            if ( _bittest64(&v53, *(unsigned __int16 *)(a4 + 12)) )
              *(_DWORD *)(a1 + 6288) |= 4u;
          }
          v68[4] = __ROL2__(v52 - ((_WORD)v68 + 10), 8);
          *(_QWORD *)(a1 + 32) = v52;
          v54 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
          {
            LODWORD(v61) = *(_DWORD *)(a1 + 24) - v52;
            LODWORD(v59) = *(unsigned __int16 *)(a4 + 12);
            WPP_SF_qDqD(*((_QWORD *)WPP_GLOBAL_Control + 7), *(unsigned __int16 *)(a4 + 12), v52, a4, v59, a1, v61);
            v54 = WPP_GLOBAL_Control;
          }
          if ( *(char *)(a1 + 6306) < 0 )
          {
            v55 = *(_DWORD *)(a4 + 28) & 3;
            if ( (v55 != 3 || (*(_BYTE *)(a4 + 8) & 1) == 0 || (*(_BYTE *)(a4 + 28) & 0x40) != 0)
              && (unsigned __int8)(*(_BYTE *)(a1 + 1415) - 1) <= 1u )
            {
              if ( v54 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                && (*((_DWORD *)v54 + 17) & 0x800) != 0
                && *((_BYTE *)v54 + 65) >= 4u )
              {
                v56 = "is not";
                if ( (*(_BYTE *)(a4 + 28) & 0x40) != 0 )
                  v56 = "is";
                v57 = "non-cache";
                if ( (*(_BYTE *)(a4 + 8) & 1) != 0 )
                  v57 = "cache";
                v58 = "non-secure";
                if ( v55 == 3 )
                  v58 = "secure";
                WPP_SF_ssqdsdqd(
                  *((_QWORD *)v54 + 7),
                  (__int64)v56,
                  *(unsigned __int8 *)(a1 + 1415),
                  v58,
                  (__int64)v57,
                  a4,
                  *(_WORD *)(a4 + 12),
                  (__int64)v56);
              }
              *(_BYTE *)(a1 + 6307) &= ~0x20u;
            }
          }
          goto LABEL_127;
        }
      }
      else if ( *(_WORD *)(a4 + 12) == 39 && *(_BYTE *)(a1 + 1415) == 1 )
      {
        ++*(_WORD *)(a1 + 1452);
      }
      v37 = __ROL2__(*(_WORD *)(a4 + 12), 8);
      goto LABEL_68;
    }
    if ( !(_WORD)v65 )
      goto LABEL_48;
    if ( (unsigned int)Wire_TestForBytesRemaining((unsigned __int64)v8, v6, 2i64) )
    {
      *v8 = __ROL2__(v65 | 0xC000, 8);
      v34 = (unsigned __int64)(v8 + 1);
      v68 = (_WORD *)v34;
      goto LABEL_58;
    }
  }
LABEL_47:
  v33 = a2;
LABEL_48:
  if ( v69 )
    *(_QWORD *)(a1 + 24) = v69;
  *(_BYTE *)(a1 + 6306) |= 2u;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
  {
    v35 = Dbg_NodeName((__int64)v33);
    LODWORD(v63) = (unsigned __int16)v65;
    LODWORD(v62) = a5;
    LODWORD(v60) = *(unsigned __int8 *)(a4 + 8);
    LODWORD(v59) = *(unsigned __int16 *)(a4 + 12);
    WPP_SF_qDDqDDs(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x12u,
      *(unsigned __int8 *)(a4 + 8),
      a4,
      v59,
      v60,
      a1,
      v62,
      v63,
      v35);
  }
  return 0i64;
}
// 14009173C: conditional instruction was optimized away because dx.2!=0
// 140091754: variable 'v12' is possibly undefined
// 1400918AA: variable 'v59' is possibly undefined
// 1400918AA: variable 'v60' is possibly undefined
// 1400918AA: variable 'v62' is possibly undefined
// 1400918AA: variable 'v63' is possibly undefined
// 140091AE1: variable 'v65' is possibly undefined
// 140091C3A: variable 'v61' is possibly undefined
// 140185140: using guessed type __int64 (__fastcall *_guard_dispatch_icall_fptr)(_QWORD, _QWORD);
// 1401B3630: using guessed type void *RRWireWriteTable;
// 1401B9834: using guessed type int dword_1401B9834;
// 1401B9854: using guessed type int dword_1401B9854;
// 1401B992C: using guessed type int dword_1401B992C;
