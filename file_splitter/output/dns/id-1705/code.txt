Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 1705
// Total lines: 174

//----- (00000001400D9E70) ----------------------------------------------------
__int64 Xfr_ZoneControlThread()
{
  int v0; // edi
  int CurrentTimeInSeconds; // ebx
  int v2; // esi
  unsigned int v3; // r9d
  unsigned int v4; // ecx
  __int64 v5; // rcx
  __int64 v6; // rbx
  __int64 v7; // rsi
  CDnsClientSubnetRecordsTrie *v8; // rcx
  __int64 v9; // rdx
  __int64 v10; // rcx
  __int64 *v11; // rax
  CDnsClientSubnetRecordsTrie *v12; // rcx
  unsigned __int16 v13; // dx
  void *Handles[3]; // [rsp+40h] [rbp-38h] BYREF

  v0 = 0;
  Handles[0] = hDnsShutdownEvent;
  Handles[1] = *(void **)(g_SecondaryQueue + 72);
  Handles[2] = g_hWakeSecondaryEvent;
  if ( WaitForSingleObject(hDnsShutdownEvent, 0x3A98u) )
  {
    while ( g_fDnsServiceExit != 1 && (unsigned int)Thread_ServiceCheck(1) )
    {
      if ( !v0 )
        v0 = scanSecondaryZones();
      CurrentTimeInSeconds = Dns_GetCurrentTimeInSeconds();
      dword_1401B9714 = CurrentTimeInSeconds;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x40) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_Dd(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x29u,
          (__int64)&WPP_8f5c62d9956434feed7ea8f9d17b2299_Traceguids,
          v0);
      }
      v2 = WaitForMultipleObjects(3u, Handles, 0, 1000 * v0);
      if ( !v2 || g_fDnsServiceExit == 1 || !(unsigned int)Thread_ServiceCheck(1) )
      {
        v12 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x40) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          v13 = 42;
LABEL_58:
          WPP_SF_(*((_QWORD *)v12 + 7), v13, (__int64)&WPP_8f5c62d9956434feed7ea8f9d17b2299_Traceguids);
          return 1i64;
        }
        return 1i64;
      }
      dword_1401B9714 = Dns_GetCurrentTimeInSeconds();
      v3 = dword_1401B9714 - CurrentTimeInSeconds;
      if ( ((v2 - 2) & 0xFFFFFEFF) != 0 )
      {
        v4 = v0;
        v0 -= v3;
        if ( v3 > v4 )
          v0 = 0;
      }
      else
      {
        v0 = 0;
      }
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x40) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
      {
        WPP_SF_dddd(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x2Bu,
          (__int64)&WPP_8f5c62d9956434feed7ea8f9d17b2299_Traceguids,
          v2);
      }
      EnterCriticalSection((LPCRITICAL_SECTION)(g_SecondaryQueue + 16));
      v5 = g_SecondaryQueue;
      v6 = *(_QWORD *)g_SecondaryQueue;
      if ( *(_QWORD *)g_SecondaryQueue )
      {
        while ( 1 )
        {
          if ( v6 == v5 )
            goto LABEL_48;
          v7 = *(_QWORD *)v6;
          if ( (*(_BYTE *)(v6 + 6306) & 0x78) == 32 )
            break;
          if ( *(_WORD *)(v6 + 496) != 2 )
          {
            processIxfrUdpResponse((struct _DNS_MSGINFO *)v6);
            goto LABEL_38;
          }
          if ( !(unsigned int)processSoaCheckResponse((struct _DNS_MSGINFO *)v6) )
          {
            v8 = WPP_GLOBAL_Control;
            if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x40) != 0
              && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
            {
              WPP_SF_q(
                *((_QWORD *)WPP_GLOBAL_Control + 7),
                0x26u,
                (__int64)&WPP_8f5c62d9956434feed7ea8f9d17b2299_Traceguids,
                v6);
              v8 = WPP_GLOBAL_Control;
            }
            v6 = 0i64;
            goto LABEL_39;
          }
          v8 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x40) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
          {
            WPP_SF_q(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x25u,
              (__int64)&WPP_8f5c62d9956434feed7ea8f9d17b2299_Traceguids,
              v6);
            goto LABEL_38;
          }
LABEL_39:
          if ( v6 )
          {
            if ( v8 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              && (*((_BYTE *)v8 + 68) & 0x40) != 0
              && *((_BYTE *)v8 + 65) >= 5u )
            {
              WPP_SF_q(*((_QWORD *)v8 + 7), 0x27u, (__int64)&WPP_8f5c62d9956434feed7ea8f9d17b2299_Traceguids, v6);
            }
            v9 = *(_QWORD *)v6;
            v10 = g_SecondaryQueue;
            v11 = *(__int64 **)(v6 + 8);
            if ( *(_QWORD *)(*(_QWORD *)v6 + 8i64) != v6 || *v11 != v6 )
              __fastfail(3u);
            *v11 = v9;
            *(_QWORD *)(v9 + 8) = v11;
            --*(_DWORD *)(v10 + 96);
            --*(_DWORD *)(v10 + 100);
            *(_DWORD *)(v6 + 16) = 0;
            Packet_Free(v6);
          }
          v5 = g_SecondaryQueue;
          v6 = v7;
          if ( !v7 )
            goto LABEL_48;
        }
        processNotify((struct _DNS_MSGINFO *)v6);
LABEL_38:
        v8 = WPP_GLOBAL_Control;
        goto LABEL_39;
      }
LABEL_48:
      LeaveCriticalSection((LPCRITICAL_SECTION)(v5 + 16));
    }
    v12 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x40) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      v13 = 40;
      goto LABEL_58;
    }
  }
  return 1i64;
}
// 1401B9714: using guessed type int dword_1401B9714;
// 1401B9A40: using guessed type int g_fDnsServiceExit;
// 1401BA370: using guessed type __int64 g_SecondaryQueue;
// 1400D9E70: using guessed type HANDLE Handles[3];
