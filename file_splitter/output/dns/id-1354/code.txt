Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 1354
// Total lines: 218

//----- (00000001400AC05C) ----------------------------------------------------
__int64 __fastcall Tcp_ConnectionListFdSet(
        unsigned int *a1,
        unsigned int *a2,
        unsigned int *a3,
        unsigned int a4,
        unsigned int *a5)
{
  bool v5; // zf
  int *v7; // rbx
  unsigned int v11; // r12d
  int v12; // r8d
  int Error; // eax
  __int64 *v14; // r14
  CDnsClientSubnetRecordsTrie *v15; // rcx
  __int64 *v16; // rdi
  unsigned int v17; // ebx
  unsigned __int16 v18; // dx
  unsigned int *v19; // rax
  unsigned int v20; // ebx
  unsigned int j; // edx
  unsigned int k; // edx
  unsigned int i; // edx
  unsigned int m; // edx
  const char *v25; // r10
  __int64 v27[2]; // [rsp+30h] [rbp-38h] BYREF
  char buf; // [rsp+70h] [rbp+8h] BYREF

  v5 = g_bTcpSelectWoken == 0;
  v7 = (int *)a5;
  v11 = 0;
  *a5 = dword_1401B97BC;
  v27[1] = (__int64)v27;
  v27[0] = (__int64)v27;
  if ( !v5 )
  {
    g_bTcpSelectWoken = 0;
    v12 = recvfrom(g_TcpSelectWakeupSocket, &buf, 4, 0, 0i64, 0i64);
    if ( v12 > 0 )
    {
      do
      {
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x2000) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          WPP_SF_Dd(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0xFu,
            (__int64)&WPP_9f19520dfb7e38d3377701f712cb1704_Traceguids,
            v12);
        }
        v12 = recvfrom(g_TcpSelectWakeupSocket, &buf, 4, 0, 0i64, 0i64);
      }
      while ( v12 > 0 );
      v7 = (int *)a5;
    }
    Error = WSAGetLastError();
    if ( Error != 10035
      && WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x2000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_D(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x10u,
        (__int64)&WPP_9f19520dfb7e38d3377701f712cb1704_Traceguids,
        Error);
    }
  }
  EnterCriticalSection(&mg_TcpConnectionListCS);
  v14 = (__int64 *)mg_TcpConnectionList;
  if ( (__int64 *)mg_TcpConnectionList != &mg_TcpConnectionList )
  {
    v15 = WPP_GLOBAL_Control;
    while ( 1 )
    {
      v16 = v14;
      v14 = (__int64 *)*v14;
      v17 = *((_DWORD *)v16 + 36);
      if ( v17 <= a4 )
        break;
      v19 = a5;
      v20 = v17 - a4;
      if ( v20 < *a5 )
      {
        if ( v15 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)v15 + 17) & 0x2000) != 0
          && *((_BYTE *)v15 + 65) >= 5u )
        {
          WPP_SF_Dd(*((_QWORD *)v15 + 7), 0x12u, (__int64)&WPP_9f19520dfb7e38d3377701f712cb1704_Traceguids, v20);
          v15 = WPP_GLOBAL_Control;
          v19 = a5;
        }
        *v19 = v20;
      }
      if ( !v16[17] )
      {
        if ( *a1 < 0x12B )
        {
          for ( i = 0; i < *a1; ++i )
          {
            if ( *(_QWORD *)&a1[2 * i + 2] == v16[2] )
              break;
          }
          if ( i != *a1 || *a1 >= 0x12C )
            goto LABEL_60;
          *(_QWORD *)&a1[2 * i + 2] = v16[2];
          ++*a1;
          goto LABEL_59;
        }
LABEL_53:
        if ( v15 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)v15 + 17) & 0x2000) != 0
          && *((_BYTE *)v15 + 65) >= 4u )
        {
          v18 = 20;
LABEL_57:
          WPP_SF_D(
            *((_QWORD *)v15 + 7),
            v18,
            (__int64)&WPP_9f19520dfb7e38d3377701f712cb1704_Traceguids,
            *((_DWORD *)v16 + 4));
        }
LABEL_58:
        tcpConnectionDelete(v16, (__int64)v27);
        goto LABEL_59;
      }
      if ( v15 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)v15 + 17) & 0x2000) != 0
        && *((_BYTE *)v15 + 65) >= 4u )
      {
        WPP_SF_Dq(
          *((_QWORD *)v15 + 7),
          0x13u,
          (__int64)&WPP_9f19520dfb7e38d3377701f712cb1704_Traceguids,
          *((_DWORD *)v16 + 4));
        v15 = WPP_GLOBAL_Control;
      }
      if ( !v11 )
      {
        *a2 = 0;
        *a3 = 0;
        v15 = WPP_GLOBAL_Control;
      }
      v11 = 1;
      if ( *a2 >= 0x12C )
        goto LABEL_53;
      for ( j = 0; j < *a2; ++j )
      {
        if ( *(_QWORD *)&a2[2 * j + 2] == v16[2] )
          break;
      }
      if ( j == *a2 )
      {
        *(_QWORD *)&a2[2 * j + 2] = v16[2];
        ++*a2;
        v15 = WPP_GLOBAL_Control;
      }
      for ( k = 0; k < *a3; ++k )
      {
        if ( *(_QWORD *)&a3[2 * k + 2] == v16[2] )
          break;
      }
      if ( k != *a3 || *a3 >= 0x12C )
        goto LABEL_60;
      *(_QWORD *)&a3[2 * k + 2] = v16[2];
      ++*a3;
LABEL_59:
      v15 = WPP_GLOBAL_Control;
LABEL_60:
      if ( v14 == &mg_TcpConnectionList )
      {
        v7 = (int *)a5;
        goto LABEL_62;
      }
    }
    if ( v15 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)v15 + 17) & 0x2000) != 0
      && *((_BYTE *)v15 + 65) >= 4u )
    {
      v18 = 17;
      goto LABEL_57;
    }
    goto LABEL_58;
  }
LABEL_62:
  for ( m = 0; m < *a1; ++m )
  {
    if ( *(_QWORD *)&a1[2 * m + 2] == g_TcpSelectWakeupSocket )
      break;
  }
  if ( m == *a1 && *a1 < 0x12C )
  {
    *(_QWORD *)&a1[2 * m + 2] = g_TcpSelectWakeupSocket;
    ++*a1;
  }
  LeaveCriticalSection(&mg_TcpConnectionListCS);
  callbackConnectFailureList(v27);
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x2000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    v25 = "not connecting";
    if ( v11 )
      v25 = "connecting";
    WPP_SF_Ds(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x15u,
      (__int64)&WPP_9f19520dfb7e38d3377701f712cb1704_Traceguids,
      *v7,
      (__int64)v25);
  }
  return v11;
}
// 1401B97BC: using guessed type int dword_1401B97BC;
// 1401C79F0: using guessed type __int64 mg_TcpConnectionList;
// 1401C7A30: using guessed type int g_bTcpSelectWoken;
