Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 2091
// Total lines: 686

//----- (0000000140106760) ----------------------------------------------------
__int64 __fastcall DnsOls_SignNodes(
        _QWORD *a1,
        struct _zone_info *a2,
        __int64 a3,
        __int64 a4,
        unsigned __int16 a5,
        int a6,
        struct _DnsUpdateList *a7)
{
  unsigned int AppendUpdate; // ebx
  struct _zone_info *v8; // rsi
  __int64 v9; // rdi
  CDnsClientSubnetRecordsTrie *v11; // rcx
  const wchar_t *v12; // r8
  const wchar_t *v13; // r10
  struct _DnsTreeNode *v14; // r10
  unsigned __int16 v15; // dx
  const unsigned __int16 *v16; // r9
  char *v17; // rax
  __int16 v19; // ax
  __int64 NextRecord; // rax
  char *v21; // rax
  struct NsecOption *v22; // r8
  char v23; // cl
  void *v24; // rsi
  __int64 *NsecNode; // rax
  char *v26; // rax
  void *v27; // rcx
  _BYTE *NsecRecord; // rax
  char *v29; // rax
  struct _zone_info *v30; // rsi
  char *v31; // rax
  char *v32; // rax
  __int16 v33; // r11
  struct _zone_info *v34; // rcx
  int v35; // r8d
  __int64 v36; // r9
  struct _DnsTreeNode *v37; // r10
  __int16 v38; // dx
  struct _Dbase_Record *v39; // rax
  struct _DnsTreeNode *v40; // rdx
  const unsigned __int16 *v41; // r9
  struct _zone_info *v42; // rbx
  _QWORD *v43; // rax
  char *v44; // rax
  unsigned __int16 v45; // dx
  _QWORD *v46; // rax
  struct _Dbase_Record *v47; // rax
  struct _DnsTreeNode *v48; // rdx
  char *v49; // rax
  __int64 Child; // rax
  __int64 SiblingWithLocking; // rdi
  char *v52; // rax
  char *v53; // rax
  __int64 v54; // [rsp+28h] [rbp-D8h]
  __int64 v55; // [rsp+38h] [rbp-C8h]
  char v56[2]; // [rsp+50h] [rbp-B0h] BYREF
  unsigned __int16 v57[3]; // [rsp+52h] [rbp-AEh] BYREF
  struct _zone_info *v58; // [rsp+58h] [rbp-A8h]
  struct _DnsUpdateList *v59; // [rsp+60h] [rbp-A0h]
  int v60; // [rsp+68h] [rbp-98h]
  __int64 v61; // [rsp+70h] [rbp-90h]
  __int64 v62; // [rsp+78h] [rbp-88h]
  struct _DnsTreeNode *v63; // [rsp+80h] [rbp-80h]
  int v64; // [rsp+88h] [rbp-78h]
  int v65; // [rsp+8Ch] [rbp-74h]
  struct _DnsTreeNode *v66; // [rsp+90h] [rbp-70h]
  __int128 v67; // [rsp+98h] [rbp-68h] BYREF
  __int64 v68; // [rsp+A8h] [rbp-58h]
  struct _DnsTreeNode *Nsec3Node; // [rsp+B8h] [rbp-48h]
  __int64 v70; // [rsp+C0h] [rbp-40h]
  __int64 v71[2]; // [rsp+D0h] [rbp-30h] BYREF
  __int64 v72; // [rsp+E0h] [rbp-20h]
  __int64 v73[5]; // [rsp+E8h] [rbp-18h] BYREF
  unsigned __int8 v74[272]; // [rsp+110h] [rbp+10h] BYREF

  AppendUpdate = 0;
  v65 = 0;
  v8 = a2;
  v58 = a2;
  v9 = a4;
  v72 = a4;
  v61 = (__int64)a1;
  v70 = 1i64;
  v60 = 1;
  v59 = a7;
  v11 = WPP_GLOBAL_Control;
  v12 = L"Default";
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
  {
    if ( !v8 || (v13 = (const wchar_t *)*((_QWORD *)v8 + 24)) == 0i64 )
      v13 = L"Default";
    WPP_SF_dsDdSs(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      a4 + 102,
      (__int64)(a1[1] - *a1) >> 3,
      a5,
      a4 + 102,
      a6,
      (__int64)(a1[1] - *a1) >> 3,
      (__int64)v13,
      *((_QWORD *)v8 + 2));
    v11 = WPP_GLOBAL_Control;
    v12 = L"Default";
  }
  if ( (*(_DWORD *)(v9 + 84) & 0x88880000) == -2004353024 )
    v66 = *(struct _DnsTreeNode **)(v9 + 8);
  else
    v66 = (struct _DnsTreeNode *)v9;
  v14 = (struct _DnsTreeNode *)*((_QWORD *)v8 + 5);
  v63 = v14;
  if ( !v14 )
  {
    v14 = (struct _DnsTreeNode *)*((_QWORD *)v8 + 8);
    v63 = v14;
    if ( !v14 )
    {
      if ( v11 == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_DWORD *)v11 + 17) & 0x200000) == 0
        || *((_BYTE *)v11 + 65) < 2u )
      {
        goto LABEL_21;
      }
      v15 = 47;
      if ( *((_QWORD *)v8 + 24) )
        v12 = (const wchar_t *)*((_QWORD *)v8 + 24);
      v16 = v12;
      goto LABEL_19;
    }
  }
  if ( g_fEnableOnlineSigning || (*((_BYTE *)v8 + 388) & 1) == 0 )
  {
    v19 = a6;
    if ( (a6 & 0x4000) != 0 )
    {
      if ( (*(_DWORD *)(v9 + 92) & 0x200000) != 0 )
      {
        v65 = 1;
        goto LABEL_180;
      }
      if ( (*(_DWORD *)(v9 + 92) & 0x100) != 0 )
      {
        RR_ListDeleteTypeNotInList(v9, 0x30u, 0, 0i64, 0);
        RR_ListDeleteTypeNotInList(v9, 0x33u, 0, 0i64, 0);
      }
      RR_ListDeleteTypeNotInList(v9, 0x2Fu, 0, 0i64, 0);
      RR_ListDeleteTypeNotInList(v9, 0x32u, 0, 0i64, 0);
      RR_ListDeleteTypeNotInList(v9, 0x2Eu, 0, 0i64, 0);
LABEL_179:
      v19 = a6;
      v11 = WPP_GLOBAL_Control;
LABEL_180:
      if ( g_fDnsServiceExit == 1 )
      {
        if ( v11 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)v11 + 17) & 0x200000) != 0
          && *((_BYTE *)v11 + 65) >= 4u )
        {
          WPP_SF_(*((_QWORD *)v11 + 7), 0x3Cu, (__int64)&WPP_41961b29e2683d0b96cfd252d798ca95_Traceguids);
          v11 = WPP_GLOBAL_Control;
        }
        AppendUpdate = 1169409;
        goto LABEL_29;
      }
      if ( (v19 & 0x8000) != 0 )
      {
        Child = NTree_FirstChild(v9);
        if ( Child )
        {
          SiblingWithLocking = Child;
          do
          {
            if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
              && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
            {
              v52 = Dbg_NodeName(SiblingWithLocking);
              WPP_SF_s(
                *((_QWORD *)WPP_GLOBAL_Control + 7),
                0x3Du,
                (__int64)&WPP_41961b29e2683d0b96cfd252d798ca95_Traceguids,
                v52);
            }
            AppendUpdate = DnsOls_SignNodes((_QWORD *)v61, v8, (__int64)v63, SiblingWithLocking, a5, a6, v59);
            if ( AppendUpdate )
              break;
            SiblingWithLocking = NTree_NextSiblingWithLocking(SiblingWithLocking);
          }
          while ( SiblingWithLocking );
          v9 = v72;
        }
        v11 = WPP_GLOBAL_Control;
      }
      if ( !v65 )
        goto LABEL_29;
      if ( !(unsigned int)RpcUtil_DeleteNodeOrSubtreeForAdmin(v9, (__int64)v8, (__int64)v59, 0i64, 1u) )
      {
        v11 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) == 0
          || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
        {
          goto LABEL_21;
        }
        v53 = Dbg_NodeName(v9);
        WPP_SF_s(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x3Eu,
          (__int64)&WPP_41961b29e2683d0b96cfd252d798ca95_Traceguids,
          v53);
        goto LABEL_20;
      }
LABEL_28:
      v11 = WPP_GLOBAL_Control;
      goto LABEL_29;
    }
    NextRecord = *((_QWORD *)v8 + 42);
    if ( !NextRecord )
    {
      NextRecord = RR_FindNextRecordEx((__int64)v14, 0, 6u, 0i64, 0, 0);
      if ( !NextRecord )
      {
        v11 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) == 0
          || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
        {
          goto LABEL_21;
        }
        v16 = L"Default";
        v15 = 49;
        if ( *((_QWORD *)v8 + 24) )
          v16 = (const unsigned __int16 *)*((_QWORD *)v8 + 24);
        goto LABEL_19;
      }
    }
    LODWORD(v62) = ntohl(*(_DWORD *)(NextRecord + 72));
    v64 = 255;
    if ( (a6 & 0x40) != 0 && *(_BYTE *)(v9 + 96) != 35 && *(_BYTE *)(v9 + 96) != 16 )
    {
      if ( RR_NodeHasRecords(v9, 0) )
        goto LABEL_55;
      if ( (*((_BYTE *)v8 + 1040) & 0x10) == 0 )
      {
LABEL_114:
        v33 = a6;
LABEL_115:
        v34 = *(struct _zone_info **)(v9 + 64);
        v35 = 0;
        v36 = 0i64;
        if ( !v34 )
        {
LABEL_172:
          if ( v36
            && (unsigned __int16)(*(_WORD *)(v36 + 12) + 255) > 1u
            && (*(_WORD *)(v36 + 12) != 47 || v60)
            && (a5 == 255 || *(_WORD *)(v36 + 12) == a5) )
          {
            AppendUpdate = DnsOls_SignRecordSet(v61, (__int64)v8, v9, v36, v35, a6, v59);
            if ( AppendUpdate )
              goto LABEL_28;
          }
          goto LABEL_179;
        }
        v37 = (struct _DnsTreeNode *)v60;
        Nsec3Node = (struct _DnsTreeNode *)v60;
        while ( v36 )
        {
          v38 = *(_WORD *)(v36 + 12);
          if ( *((_WORD *)v34 + 6) == v38 )
            goto LABEL_170;
          do
          {
            if ( *((_WORD *)v34 + 6) != 46 )
              break;
            v34 = *(struct _zone_info **)v34;
          }
          while ( v34 );
          v58 = v34;
          if ( !v34 )
            goto LABEL_172;
          if ( (unsigned __int16)(v64 + v38) > (unsigned __int16)v70
            && (v38 != 47 || v37)
            && (a5 == (_WORD)v64 || v38 == a5) )
          {
            AppendUpdate = DnsOls_SignRecordSet(v61, (__int64)v8, v9, v36, v35, v33, v59);
            if ( AppendUpdate )
              goto LABEL_28;
            v34 = v58;
            v37 = Nsec3Node;
          }
          v36 = (__int64)v34;
          v35 = 1;
LABEL_171:
          v34 = *(struct _zone_info **)v34;
          v33 = a6;
          if ( !v34 )
            goto LABEL_172;
        }
        v36 = (__int64)v34;
LABEL_170:
        ++v35;
        goto LABEL_171;
      }
      if ( *((_QWORD *)v66 + 4)
        && Lookup_ForEachChildNodeCallFunction(
             (__int64)v66,
             (__int64 (__fastcall *)(__int64, __int64))RR_NodeHasRecords,
             0i64) )
      {
LABEL_55:
        if ( (*((_BYTE *)v8 + 1040) & 0x10) == 0 )
        {
          if ( v59 )
          {
            AppendUpdate = DnsOls_CreateAppendUpdate(v59, (struct _DnsTreeNode *)v9, 0i64, 47);
            if ( AppendUpdate )
            {
              v11 = WPP_GLOBAL_Control;
              if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
                return AppendUpdate;
              if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) == 0 || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
                goto LABEL_29;
              v21 = Dbg_NodeName(v9);
              WPP_SF_Ds(
                *((_QWORD *)WPP_GLOBAL_Control + 7),
                0x32u,
                (__int64)&WPP_41961b29e2683d0b96cfd252d798ca95_Traceguids,
                AppendUpdate,
                (__int64)v21);
LABEL_62:
              v11 = WPP_GLOBAL_Control;
              goto LABEL_29;
            }
          }
          else
          {
            RR_ListDeleteTypeNotInList(v9, 0x2Fu, 0, 0i64, 0);
            RR_ListDeleteTypeNotInList(v9, 0x2Eu, 47, 0i64, 0);
          }
        }
        v68 = 0i64;
        v56[0] = 0;
        LOBYTE(v57[0]) = 0;
        v67 = 0i64;
        DnsSign::BuildRRTypeVector(v9, (unsigned __int64 *)&v67, v56, v57);
        if ( !LOBYTE(v57[0]) || (*(_DWORD *)(v9 + 92) & 0x100) != 0 || v56[0] )
        {
          v23 = 0;
          v56[0] = 0;
        }
        else
        {
          v23 = 1;
          v56[0] = 1;
        }
        if ( (*((_BYTE *)v8 + 396) & 0x20) != 0 )
        {
          v24 = (void *)v67;
          if ( !((__int64)(*((_QWORD *)&v67 + 1) - v67) >> 1) || v23 )
          {
LABEL_74:
            if ( (*((_BYTE *)v58 + 1040) & 0x10) != 0 )
            {
              if ( (a6 & 0x8000) != 0 )
                goto LABEL_111;
              DnsSign::BuildNsecOption(v58, (struct _zone_info *)v71, v22);
              if ( v56[0] )
              {
                if ( BYTE3(v71[0]) == 1 )
                  goto LABEL_111;
              }
              v39 = (struct _Dbase_Record *)RR_FindNextRecordEx((__int64)v63, 0, 0x33u, 0i64, 0, 0);
              v62 = (__int64)v39;
              if ( !v39 )
              {
                v11 = WPP_GLOBAL_Control;
                if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                  || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) == 0
                  || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
                {
                  goto LABEL_81;
                }
                v41 = L"Default";
                if ( *((_QWORD *)v58 + 24) )
                  v41 = (const unsigned __int16 *)*((_QWORD *)v58 + 24);
                WPP_SF_Ss(
                  *((_QWORD *)WPP_GLOBAL_Control + 7),
                  0x37u,
                  (__int64)&WPP_41961b29e2683d0b96cfd252d798ca95_Traceguids,
                  v41,
                  *((_QWORD *)v58 + 2));
                goto LABEL_80;
              }
              v42 = v58;
              Nsec3Node = DnsOls_FindOrCreateNsec3Node(v58, v40, (struct _DnsTreeNode *)v9, v39, 0);
              if ( Nsec3Node )
              {
                v43 = std::vector<unsigned short>::vector<unsigned short>(v73, (__int64)&v67);
                AppendUpdate = DnsOls_UpdateExistingNsec3(
                                 v42,
                                 (__int64)v63,
                                 v9,
                                 Nsec3Node,
                                 v62,
                                 (__int64)v43,
                                 (__int128 *)v71,
                                 v61,
                                 a6,
                                 v59);
                if ( !AppendUpdate )
                  goto LABEL_111;
                v11 = WPP_GLOBAL_Control;
                if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                  || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) == 0
                  || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
                {
                  goto LABEL_82;
                }
                v44 = Dbg_NodeName(v9);
                v45 = 56;
              }
              else
              {
                v46 = std::vector<unsigned short>::vector<unsigned short>(v73, (__int64)&v67);
                LODWORD(v55) = a6;
                AppendUpdate = DnsOls_AddNewNsec3(
                                 v42,
                                 v63,
                                 v9,
                                 (struct _Dbase_Record *)v62,
                                 (__int64)v46,
                                 v71,
                                 v61,
                                 v55,
                                 v59);
                if ( !AppendUpdate )
                  goto LABEL_111;
                v11 = WPP_GLOBAL_Control;
                if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                  || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) == 0
                  || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
                {
                  goto LABEL_82;
                }
                v44 = Dbg_NodeName(v9);
                v45 = 57;
              }
              WPP_SF_Ds(
                *((_QWORD *)WPP_GLOBAL_Control + 7),
                v45,
                (__int64)&WPP_41961b29e2683d0b96cfd252d798ca95_Traceguids,
                AppendUpdate,
                (__int64)v44);
              v11 = WPP_GLOBAL_Control;
              goto LABEL_82;
            }
            NsecNode = (__int64 *)DnsOls_FindNsecNode(v66);
            if ( !NsecNode )
            {
              v11 = WPP_GLOBAL_Control;
              if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) == 0
                || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
              {
                goto LABEL_81;
              }
              v26 = Dbg_NodeName(v9);
              WPP_SF_s(
                *((_QWORD *)WPP_GLOBAL_Control + 7),
                0x33u,
                (__int64)&WPP_41961b29e2683d0b96cfd252d798ca95_Traceguids,
                v26);
LABEL_80:
              v11 = WPP_GLOBAL_Control;
LABEL_81:
              AppendUpdate = 13;
LABEL_82:
              if ( !v24 )
                goto LABEL_29;
              v27 = v24;
              goto LABEL_84;
            }
            Name_NodeToCountName(v74, NsecNode, 1);
            NsecRecord = DnsSign::CreateNsecRecord(v74, (__int64)&v67, v62);
            v62 = (__int64)NsecRecord;
            if ( !NsecRecord )
            {
              v11 = WPP_GLOBAL_Control;
              if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
                && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
              {
                v29 = Dbg_NodeName(v9);
                WPP_SF_s(
                  *((_QWORD *)WPP_GLOBAL_Control + 7),
                  0x34u,
                  (__int64)&WPP_41961b29e2683d0b96cfd252d798ca95_Traceguids,
                  v29);
                v11 = WPP_GLOBAL_Control;
              }
              AppendUpdate = 13;
LABEL_91:
              if ( !(_QWORD)v67 )
                goto LABEL_29;
              v27 = (void *)v67;
LABEL_84:
              operator delete(v27);
              goto LABEL_28;
            }
            if ( v59 )
            {
              AppendUpdate = DnsOls_CreateAppendUpdate(v59, (struct _DnsTreeNode *)v9, (__int64)NsecRecord, 47);
              if ( AppendUpdate )
                goto LABEL_95;
              v60 = 0;
              v30 = v58;
            }
            else
            {
              v30 = v58;
              AppendUpdate = RR_AddToNode((__int64)v58, v9, (__int64)NsecRecord);
              if ( AppendUpdate )
              {
                v11 = WPP_GLOBAL_Control;
                if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                  && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
                  && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
                {
                  v31 = Dbg_NodeName(v9);
                  WPP_SF_Ds(
                    *((_QWORD *)WPP_GLOBAL_Control + 7),
                    0x35u,
                    (__int64)&WPP_41961b29e2683d0b96cfd252d798ca95_Traceguids,
                    AppendUpdate,
                    (__int64)v31);
                  v11 = WPP_GLOBAL_Control;
                }
                goto LABEL_91;
              }
              if ( a5 == 255 || a5 == 47 )
              {
LABEL_110:
                v24 = (void *)v67;
LABEL_111:
                if ( v24 )
                  operator delete(v24);
                v8 = v58;
                goto LABEL_114;
              }
            }
            if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
              && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
            {
              v32 = Dbg_NodeName(v9);
              WPP_SF_s(
                *((_QWORD *)WPP_GLOBAL_Control + 7),
                0x36u,
                (__int64)&WPP_41961b29e2683d0b96cfd252d798ca95_Traceguids,
                v32);
            }
            AppendUpdate = DnsOls_SignRecordSet(v61, (__int64)v30, v9, v62, 1ui64, a6, v59);
            if ( AppendUpdate )
            {
LABEL_95:
              v27 = (void *)v67;
              if ( !(_QWORD)v67 )
                goto LABEL_28;
              goto LABEL_84;
            }
            goto LABEL_110;
          }
        }
        else
        {
          v57[0] = (*((_DWORD *)v8 + 260) & 0x10) != 0 ? 50 : 47;
          std::vector<unsigned short>::push_back((unsigned __int64 *)&v67, v57);
        }
        v57[0] = 46;
        std::vector<unsigned short>::push_back((unsigned __int64 *)&v67, v57);
        v24 = (void *)v67;
        goto LABEL_74;
      }
    }
    if ( (*((_BYTE *)v8 + 1040) & 0x10) != 0
      && !RR_NodeHasRecords(v9, 0)
      && (!*((_QWORD *)v66 + 4)
       || !Lookup_ForEachChildNodeCallFunction(
             (__int64)v66,
             (__int64 (__fastcall *)(__int64, __int64))RR_NodeHasRecords,
             0i64)) )
    {
      v33 = a6;
      if ( (a6 & 0x8040) != 64 )
        goto LABEL_115;
      v47 = (struct _Dbase_Record *)RR_FindNextRecordEx((__int64)v63, 0, 0x33u, 0i64, 0, 0);
      if ( !v47 )
      {
        v11 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) == 0
          || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
        {
          goto LABEL_21;
        }
        v16 = L"Default";
        v15 = 58;
        if ( *((_QWORD *)v8 + 24) )
          v16 = (const unsigned __int16 *)*((_QWORD *)v8 + 24);
LABEL_19:
        WPP_SF_Ss(
          *((_QWORD *)v11 + 7),
          v15,
          (__int64)&WPP_41961b29e2683d0b96cfd252d798ca95_Traceguids,
          v16,
          *((_QWORD *)v8 + 2));
LABEL_20:
        v11 = WPP_GLOBAL_Control;
LABEL_21:
        AppendUpdate = 13;
        goto LABEL_29;
      }
      LODWORD(v54) = a6;
      AppendUpdate = DnsOls_DeleteNsec3(v8, v48, v9, v47, v61, v54, v59);
      if ( AppendUpdate )
      {
        v11 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
          return AppendUpdate;
        if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) == 0 || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
          goto LABEL_29;
        v49 = Dbg_NodeName(v9);
        WPP_SF_Ds(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x3Bu,
          (__int64)&WPP_41961b29e2683d0b96cfd252d798ca95_Traceguids,
          AppendUpdate,
          (__int64)v49);
        goto LABEL_62;
      }
    }
    goto LABEL_114;
  }
  if ( v11 == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
    return AppendUpdate;
  if ( (*((_DWORD *)v11 + 17) & 0x200000) != 0 && *((_BYTE *)v11 + 65) >= 4u )
  {
    WPP_SF_s(
      *((_QWORD *)v11 + 7),
      0x30u,
      (__int64)&WPP_41961b29e2683d0b96cfd252d798ca95_Traceguids,
      *((const char **)v8 + 2));
    goto LABEL_28;
  }
LABEL_29:
  if ( v11 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)v11 + 17) & 0x200000) != 0
    && *((_BYTE *)v11 + 65) >= 5u )
  {
    v17 = Dbg_NodeName((__int64)v66);
    WPP_SF_Dds(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x3Fu,
      (__int64)&WPP_41961b29e2683d0b96cfd252d798ca95_Traceguids,
      AppendUpdate,
      a5,
      (__int64)v17);
  }
  return AppendUpdate;
}
// 1401073E7: conditional instruction was optimized away because ebx.4==0
// 140107043: variable 'v22' is possibly undefined
// 1401070FE: variable 'v40' is possibly undefined
// 14010721F: variable 'v55' is possibly undefined
// 14010735E: variable 'v48' is possibly undefined
// 14010735E: variable 'v54' is possibly undefined
// 140184CA8: using guessed type void __stdcall operator delete(void *);
// 140188260: using guessed type wchar_t aDefault_1[8];
// 1401B917C: using guessed type int g_fEnableOnlineSigning;
// 1401B9A40: using guessed type int g_fDnsServiceExit;
// 140106760: using guessed type char var_1F0[2];
// 140106760: using guessed type _QWORD var_158[5];
##############################
Role: Let's assume that you are an advanced reverse engineer and you are reverse engineering a network driver using IDA Pro, and you are also familiar with the RFC documentation. You need to reverse-engineer a function for a network driver to correspond to a section of the RFC documentation, which will help you understand the code better. The driver you're reversing is Schannel.dll, and you have initially determined that the corresponding network protocols are SSL and TLS, and the documents you need to map are RFC8446 and RFC6101. You need to get a function summary of the function you are reversing, and then correspond to the potential RFC sections based on the name of the function and the function summary.
Function Background: The function is reverse engineered from the driver file Schannel.dll on Windows platform. Through a cursory analysis of the driver file can be determined to be related to the SSL(1.3), TLS(3.0) protocol, that is, with RFC8446, RFC6101 strong correlation.

Output Function Summary: Summarizes the function's functionality with several phrases instead of sentences, focuses on covering the function's control flow information, and highlights the protocol function points implemented by the function. Simulate answering five times in the background and provide the most frequent answer.

Retrieve document sections: giving matches for document sections(FunctionMatchRFCResult) that the code may related to. NOTE if the code is only business related(i.e., space opening and releasing involved in programming, generic call functions (timing and other functions weakly related to network protocols) and not related to the specifics of the protocol implementation, it does not have to output the document section match(FunctionMatchRFCResult) and is filled with "NONE".

Retrieve document sections Thinking Chain: The function code is matched with the RFC document section, and the thinking chain is provided to help you solve the problem better:
	1. Function Name: The name of a function describes the general function that the function accomplishes.
	2. Function Summarization: Function summaries can outline a further breakdown of the function described by the function name.
	3. Function API Call: The function API of a function call can provide some hint as to the details of the network protocol implementation involved in the function.
	4. Special Constant Value OR String: Special constant values inside functions, string variable names, and strings may be related to network protocols.
	5. Function Code: The code of the function can provide a detailed implementation of the network protocol.
Generate Function Information Collection with JSON Format:

{
	"FunctionIndex": "(FILL WITH "File count" with less than four bits are indexed with zeros to make up the four bits.)",
	"FunctionName": "(Full Function Code Name)",
	"FunctionSummarization": [
		"(Function Summary Phrase1)",
		"(Function Summary Phrase2)",
		"(...)"
	],
	"FunctionMatchRFCResult": [
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 1)",
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 2)",
		"(...)"
	],
}

ATTENTION: Remember YOU MUST ONLY output the Function Information Collection result.
