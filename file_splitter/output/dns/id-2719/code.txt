Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 2719
// Total lines: 142

//----- (0000000140142C28) ----------------------------------------------------
__int64 __fastcall CDNSClientSubnetRecord::VerifyClientSubnetRecord(
        CDNSClientSubnetRecord *this,
        struct _ClientSubnetRecord *a2,
        int a3)
{
  __int64 v3; // rax
  unsigned int v6; // ebp
  CDnsClientSubnetRecordsTrie *v7; // rdi
  int v8; // r12d
  _QWORD *v9; // rax
  int v10; // ecx
  _QWORD *v11; // rbx
  unsigned __int64 v12; // rbp
  __int64 v13; // r13
  __int64 v14; // r14
  _QWORD *v15; // rax
  int v16; // r9d
  __int64 v17; // rsi
  unsigned int v18; // edi
  _QWORD *v19; // r15
  int v20; // eax
  _QWORD *v21; // rbx
  int v22; // ebp
  unsigned __int64 v23; // r14
  __int64 v24; // r12
  _QWORD *v26; // rax
  __int64 v27; // rcx
  int v28; // [rsp+88h] [rbp+10h]
  int v30; // [rsp+98h] [rbp+20h]

  v3 = *((_QWORD *)a2 + 1);
  if ( v3 && (v6 = 0, v30 = 0, *(_DWORD *)(v3 + 4)) )
  {
    v7 = WPP_GLOBAL_Control;
    v8 = -1;
    while ( 1 )
    {
      v9 = (_QWORD *)*((_QWORD *)this + 6);
      v10 = 0;
      v28 = 0;
      v11 = (_QWORD *)*v9;
      if ( (_QWORD *)*v9 != v9 )
      {
        v12 = (unsigned __int64)v6 << 6;
        do
        {
          v13 = *((_QWORD *)a2 + 1);
          v14 = v11[2];
          if ( (unsigned int)DnsAddr_IsEqual((_WORD *)v14, (_WORD *)(v13 + v12 + 32), 3)
            && *(_DWORD *)(v14 + 36) == *(_DWORD *)(v13 + v12 + 68) )
          {
            v10 = 1;
            v28 = 1;
            if ( v7 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              && (*((_BYTE *)v7 + 68) & 2) != 0
              && *((_BYTE *)v7 + 65) >= 4u )
            {
              v15 = (_QWORD *)((char *)this + 8);
              if ( *((_QWORD *)this + 4) >= 8ui64 )
                v15 = (_QWORD *)*v15;
              if ( *(_WORD *)v14 == 2 )
                v16 = *(_DWORD *)(v14 + 4);
              else
                v16 = -1;
              WPP_SF_DS(
                *((_QWORD *)v7 + 7),
                0x25u,
                (__int64)&WPP_42dbba61d26d3062f1ad4e084cdc81fe_Traceguids,
                v16,
                (__int64)v15);
              v10 = 1;
              v7 = WPP_GLOBAL_Control;
            }
          }
          else
          {
            v10 = v28;
          }
          v11 = (_QWORD *)*v11;
        }
        while ( v11 != *((_QWORD **)this + 6) );
        v6 = v30;
      }
      if ( v10 != a3 )
        break;
      v30 = ++v6;
      if ( v6 >= *(_DWORD *)(*((_QWORD *)a2 + 1) + 4i64) )
        goto LABEL_22;
    }
    if ( v7 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)v7 + 68) & 2) != 0
      && *((_BYTE *)v7 + 65) >= 4u )
    {
      v26 = (_QWORD *)((char *)this + 8);
      if ( *((_QWORD *)this + 4) >= 8ui64 )
        v26 = (_QWORD *)*v26;
      v27 = v11[2];
      if ( *(_WORD *)v27 == 2 )
        v8 = *(_DWORD *)(v27 + 4);
      WPP_SF_DS(*((_QWORD *)v7 + 7), 0x26u, (__int64)&WPP_42dbba61d26d3062f1ad4e084cdc81fe_Traceguids, v8, (__int64)v26);
    }
  }
  else
  {
LABEL_22:
    v17 = *((_QWORD *)a2 + 2);
    if ( !v17 )
      return 1i64;
    v18 = 0;
    if ( !*(_DWORD *)(v17 + 4) )
      return 1i64;
    v19 = (_QWORD *)*((_QWORD *)this + 9);
    v20 = a3;
    while ( 1 )
    {
      v21 = (_QWORD *)*v19;
      v22 = 0;
      if ( (_QWORD *)*v19 != v19 )
      {
        v23 = (unsigned __int64)v18 << 6;
        do
        {
          v24 = v21[2];
          if ( (unsigned int)DnsAddr_IsEqual((_WORD *)v24, (_WORD *)(v23 + v17 + 32), 3) )
          {
            if ( *(_DWORD *)(v24 + 36) == *(_DWORD *)(v23 + v17 + 68) )
              v22 = 1;
          }
          v21 = (_QWORD *)*v21;
        }
        while ( v21 != v19 );
        v20 = a3;
      }
      if ( v22 != v20 )
        break;
      if ( ++v18 >= *(_DWORD *)(v17 + 4) )
        return 1i64;
    }
  }
  return 0i64;
}
