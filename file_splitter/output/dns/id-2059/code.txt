Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 2059
// Total lines: 274

//----- (0000000140100A94) ----------------------------------------------------
__int64 __fastcall setRolloverPeriod(struct _zone_info *a1, struct _dnsskd *a2, int a3)
{
  unsigned int v3; // esi
  unsigned int v4; // edi
  CDnsClientSubnetRecordsTrie *v7; // rcx
  __int64 v8; // rax
  __int64 v9; // rax
  bool v10; // cc
  const unsigned __int16 **v11; // r12
  unsigned __int16 *v12; // r13
  unsigned __int16 *SignedDnskeyRRListCopy; // r15
  __int64 v14; // rbx
  CDnsClientSubnetRecordsTrie *v15; // rcx
  unsigned __int16 v16; // dx
  __int64 v17; // rdx
  __int64 v18; // r8
  int v19; // r9d
  unsigned __int16 *v20; // r8
  __int64 v21; // rax
  __int64 v22; // rax
  __int64 v24; // [rsp+20h] [rbp-58h]
  int v25; // [rsp+30h] [rbp-48h]
  unsigned int Key; // [rsp+80h] [rbp+8h] BYREF
  int v27; // [rsp+98h] [rbp+20h]

  v3 = 0;
  v4 = a3;
  v27 = 0;
  Key = 0;
  v7 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    if ( a1 )
      v8 = *((_QWORD *)a1 + 2);
    else
      v8 = 0i64;
    WPP_SF_Dqs(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x44u,
      (__int64)&WPP_fcf90f505e41335ad1a88e0d5ede2d0c_Traceguids,
      a3,
      (char)a2,
      v8);
    v7 = WPP_GLOBAL_Control;
  }
  if ( !a1 || !a2 )
  {
    v3 = 87;
    goto LABEL_86;
  }
  if ( !v4 )
  {
    v4 = *((_DWORD *)a2 + 9) != 0 ? 65232000 : 7776000;
    goto LABEL_12;
  }
  if ( v4 != -1 )
  {
    if ( *((_DWORD *)a2 + 9) )
    {
      if ( v4 < 0x93A80 )
      {
LABEL_21:
        v3 = 9566;
        goto LABEL_86;
      }
      v10 = v4 <= 0x25980600;
    }
    else
    {
      if ( v4 < 0x93A80 )
        goto LABEL_21;
      v10 = v4 <= 0x9660180;
    }
    if ( !v10 )
    {
      v3 = 9567;
      goto LABEL_86;
    }
  }
LABEL_12:
  if ( *((_DWORD *)a2 + 9) )
    goto LABEL_73;
  v9 = *((_QWORD *)a1 + 141);
  if ( !v9 || *(_DWORD *)(v9 + 96) <= 1u || v4 != -1 && *((_DWORD *)a2 + 17) != -1 )
  {
    if ( *((_DWORD *)a1 + 93) != 1 || (*((_BYTE *)a1 + 1040) & 4) == 0 )
      goto LABEL_73;
    v11 = (const unsigned __int16 **)((char *)a2 + 192);
    v12 = (unsigned __int16 *)*((_QWORD *)a2 + 24);
    SignedDnskeyRRListCopy = 0i64;
    v14 = *(_QWORD *)((char *)a2 + 116);
    v25 = *((_DWORD *)a2 + 52);
    if ( *((_DWORD *)a2 + 17) == -1 )
    {
      if ( v4 != -1 && !v12 )
      {
        if ( v7 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_BYTE *)v7 + 68) & 4) != 0
          && *((_BYTE *)v7 + 65) >= 4u )
        {
          WPP_SF_(*((_QWORD *)v7 + 7), 0x45u, (__int64)&WPP_fcf90f505e41335ad1a88e0d5ede2d0c_Traceguids);
        }
        LODWORD(v24) = 0;
        *((_DWORD *)a2 + 52) = 3;
        Key = DnsOls_CreateKey((LDAPModW *)a1, (__int64)a2, 3, (__int64 *)a2 + 24, v24);
        v3 = Key;
        if ( Key )
        {
          v15 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
          {
            v16 = 70;
LABEL_41:
            WPP_SF_Ds(
              *((_QWORD *)v15 + 7),
              v16,
              (__int64)&WPP_fcf90f505e41335ad1a88e0d5ede2d0c_Traceguids,
              v3,
              *((_QWORD *)a1 + 2));
            goto LABEL_70;
          }
          goto LABEL_70;
        }
        GetSystemTimeAsFileTime((LPFILETIME)((char *)a2 + 116));
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          WPP_SF_S(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x47u,
            (__int64)&WPP_fcf90f505e41335ad1a88e0d5ede2d0c_Traceguids,
            *v11);
        }
LABEL_53:
        SignedDnskeyRRListCopy = (unsigned __int16 *)DnsOls_CreateSignedDnskeyRRListCopy(a1, (int *)&Key);
        if ( SignedDnskeyRRListCopy )
        {
          v3 = Zone_LockForWriteEx((__int64)a1, 1, 0x2710u, (__int64)"ds\\dns\\server\\server\\olsrpc.cpp", 116);
          if ( v3 )
          {
            v15 = WPP_GLOBAL_Control;
            if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
              && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
            {
              v16 = 74;
              goto LABEL_41;
            }
          }
          else
          {
            v27 = 1;
            v3 = DnsOls_PublishDnskeyRRListAndSignScopes(a1, SignedDnskeyRRListCopy, 0, 0);
            if ( v3 )
            {
              v15 = WPP_GLOBAL_Control;
              if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
                && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
              {
                v16 = 75;
                goto LABEL_41;
              }
            }
            else
            {
              DnsOls_DeleteCertAndKey(a1, a2, v12);
              Mem_Free(v12, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\olsrpc.cpp", 2966);
              v12 = 0i64;
              Xfr_SendNotify((__int64)a1, v17, v18, v19);
            }
          }
        }
        else
        {
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
          {
            WPP_SF_s(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x49u,
              (__int64)&WPP_fcf90f505e41335ad1a88e0d5ede2d0c_Traceguids,
              *((const char **)a1 + 2));
          }
          v3 = Key;
        }
LABEL_70:
        if ( v3 )
        {
          v20 = (unsigned __int16 *)*v11;
          *((_DWORD *)a2 + 52) = v25;
          DnsOls_DeleteCertAndKey(a1, a2, v20);
          Mem_Free(*v11, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\olsrpc.cpp", 2978);
          *v11 = v12;
          *(_QWORD *)((char *)a2 + 116) = v14;
          if ( SignedDnskeyRRListCopy )
            RR_ListFree(SignedDnskeyRRListCopy);
LABEL_84:
          v7 = WPP_GLOBAL_Control;
          goto LABEL_86;
        }
LABEL_73:
        *((_DWORD *)a2 + 17) = v4;
        if ( a2 != *((struct _dnsskd **)a1 + 141) || *((_DWORD *)a2 + 24) < 2u )
        {
          if ( v4 == -1 )
          {
            *(_QWORD *)((char *)a2 + 84) = 0i64;
          }
          else
          {
            if ( dword_1401B99F0 )
              v4 /= 0x2760u;
            CurrentTimePlusOffset((struct _FILETIME *)((char *)a2 + 84), v4);
          }
          v21 = *((_QWORD *)a1 + 141);
          if ( !v21 || *(_DWORD *)(v21 + 96) < 2u )
          {
            *((_QWORD *)a1 + 141) = 0i64;
            *(_QWORD *)((char *)a1 + 1116) = 0i64;
          }
          SetEvent(g_hOlsKeyRolloverEvent);
        }
        goto LABEL_84;
      }
      if ( *((_DWORD *)a2 + 17) == -1 )
        goto LABEL_73;
    }
    if ( v4 != -1 || !v12 )
      goto LABEL_73;
    *v11 = 0i64;
    *((_DWORD *)a2 + 52) = 0;
    *(_QWORD *)((char *)a2 + 116) = 0i64;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_S(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x48u,
        (__int64)&WPP_fcf90f505e41335ad1a88e0d5ede2d0c_Traceguids,
        v12);
    }
    goto LABEL_53;
  }
  v3 = 9116;
LABEL_86:
  if ( v7 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)v7 + 68) & 4) != 0
    && *((_BYTE *)v7 + 65) >= 4u )
  {
    if ( a1 )
      v22 = *((_QWORD *)a1 + 2);
    else
      v22 = 0i64;
    WPP_SF_Ds(*((_QWORD *)v7 + 7), 0x4Cu, (__int64)&WPP_fcf90f505e41335ad1a88e0d5ede2d0c_Traceguids, v3, v22);
  }
  if ( v27 )
    Zone_UnlockAfterWriteEx((__int64)a1, 1, (__int64)"ds\\dns\\server\\server\\olsrpc.cpp", 233);
  return v3;
}
// 140100BC3: conditional instruction was optimized away because edx.4==0
// 140100C5B: variable 'v24' is possibly undefined
// 140100E99: variable 'v17' is possibly undefined
// 140100E99: variable 'v18' is possibly undefined
// 140100E99: variable 'v19' is possibly undefined
// 1401B99F0: using guessed type int dword_1401B99F0;
