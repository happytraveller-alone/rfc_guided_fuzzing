Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 1346
// Total lines: 253

//----- (00000001400AB2BC) ----------------------------------------------------
void Stats_InitPerfmonCounterBlock()
{
  struct _SECURITY_ATTRIBUTES *v0; // r12
  int *v1; // rdi
  PSID *v2; // rsi
  DWORD v3; // ebx
  __int64 v4; // r14
  struct _ACL *v5; // rax
  struct _ACL *v6; // rdi
  DWORD LastError; // ebx
  __int64 v8; // rsi
  DWORD *v9; // r14
  PSID *v10; // rbx
  struct _ACL *v11; // rsi
  HANDLE FileMappingW; // rax
  void *v13; // rax
  int v14; // [rsp+30h] [rbp-50h] BYREF
  struct _ACL *v15; // [rsp+38h] [rbp-48h]
  int v16; // [rsp+40h] [rbp-40h]
  int v17; // [rsp+48h] [rbp-38h] BYREF
  __int64 v18; // [rsp+4Ch] [rbp-34h]
  __int64 v19[3]; // [rsp+58h] [rbp-28h] BYREF

  v0 = 0i64;
  v17 = 0x80000000;
  v1 = &v17;
  v2 = (PSID *)v19;
  v19[2] = 0i64;
  v3 = 8;
  v19[0] = (__int64)g_pAuthenticatedUserSid;
  v4 = 2i64;
  v19[1] = (__int64)g_pLocalSystemSid;
  v18 = 0x10000000i64;
  do
  {
    if ( *v2 && *v1 )
      v3 += GetLengthSid(*v2) + 12;
    ++v2;
    ++v1;
    --v4;
  }
  while ( v4 );
  v5 = (struct _ACL *)Dns_AllocZero(v3 + 40);
  v6 = v5;
  if ( v5 )
  {
    if ( (g_rgFastWppEnabledFlagsPerLevel & 2) != 0 )
      WPP_SF_qd(11i64, (unsigned __int16)&WPP_5a5bedfbff283f9aeca3ec4feaeb3feb_Traceguids, (__int64)v5, v3 + 40);
    if ( InitializeAcl(v6 + 5, v3, 2u) )
    {
      v8 = 0i64;
      v9 = (DWORD *)&v17;
      v10 = (PSID *)v19;
      do
      {
        if ( *v10 && *v9 && !AddAccessAllowedAce(v6 + 5, 2u, *v9, *v10) )
        {
          LastError = GetLastError();
          if ( (byte_1401BA003 & 0x10) != 0 )
            WPP_SF_qq(
              12i64,
              (unsigned __int16)&WPP_5a5bedfbff283f9aeca3ec4feaeb3feb_Traceguids,
              v19[v8],
              (unsigned int)*(&v17 + v8));
          goto LABEL_19;
        }
        v8 = (unsigned int)(v8 + 1);
        ++v10;
        ++v9;
      }
      while ( (unsigned int)v8 < 2 );
      if ( InitializeSecurityDescriptor(v6, 1u) && SetSecurityDescriptorDacl(v6, 1, v6 + 5, 0) )
      {
        v11 = v6;
        LastError = 0;
        goto LABEL_23;
      }
    }
    LastError = GetLastError();
  }
  else
  {
    LastError = 14;
  }
LABEL_19:
  v11 = 0i64;
  Dns_Free(v6);
LABEL_23:
  if ( !LastError )
  {
    v16 = 0;
    v0 = (struct _SECURITY_ATTRIBUTES *)&v14;
    v15 = v11;
    v14 = 24;
  }
  FileMappingW = CreateFileMappingW(
                   (HANDLE)0xFFFFFFFFFFFFFFFFi64,
                   v0,
                   4u,
                   0,
                   0x1000u,
                   L"Global\\Microsoft.Windows.DNS.Perf");
  if ( (FileMappingW || (FileMappingW = OpenFileMappingW(2u, 0, L"Global\\Microsoft.Windows.DNS.Perf")) != 0i64)
    && (v13 = MapViewOfFile(FileMappingW, 0xF001Fu, 0, 0, 0i64)) != 0i64 )
  {
    pcTotalQueryReceived = (__int64)v13 + 4;
    pcUdpQueryReceived = (__int64)v13 + 8;
    pcTcpQueryReceived = (__int64)v13 + 12;
    pcTotalResponseSent = (__int64)v13 + 16;
    pcUdpResponseSent = (__int64)v13 + 20;
    pcTcpResponseSent = (__int64)v13 + 24;
    pcRecursiveQueries = (__int64)v13 + 28;
    pcRecursiveTimeOut = (__int64)v13 + 32;
    pcRecursiveQueryFailure = (__int64)v13 + 36;
    pcNotifySent = (__int64)v13 + 40;
    pcZoneTransferRequestReceived = (__int64)v13 + 44;
    pcZoneTransferSuccess = (__int64)v13 + 48;
    pcZoneTransferFailure = (__int64)v13 + 52;
    pcAxfrRequestReceived = (__int64)v13 + 56;
    pcAxfrSuccessSent = (__int64)v13 + 60;
    pcIxfrRequestReceived = (__int64)v13 + 64;
    pcIxfrSuccessSent = (__int64)v13 + 68;
    pcNotifyReceived = (__int64)v13 + 72;
    pcZoneTransferSoaRequestSent = (__int64)v13 + 76;
    pcAxfrRequestSent = (__int64)v13 + 80;
    pcAxfrResponseReceived = (__int64)v13 + 84;
    pcAxfrSuccessReceived = (__int64)v13 + 88;
    pcIxfrRequestSent = (__int64)v13 + 92;
    pcIxfrResponseReceived = (__int64)v13 + 96;
    pcIxfrSuccessReceived = (__int64)v13 + 100;
    pcIxfrUdpSuccessReceived = (__int64)v13 + 104;
    pcIxfrTcpSuccessReceived = (__int64)v13 + 108;
    pcWinsLookupReceived = (__int64)v13 + 112;
    pcWinsResponseSent = (__int64)v13 + 116;
    pcWinsReverseLookupReceived = (__int64)v13 + 120;
    pcWinsReverseResponseSent = (__int64)v13 + 124;
    pcDynamicUpdateReceived = (__int64)v13 + 128;
    pcDynamicUpdateNoOp = (__int64)v13 + 132;
    pcDynamicUpdateWriteToDB = (__int64)v13 + 136;
    pcDynamicUpdateRejected = (__int64)v13 + 140;
    pcDynamicUpdateTimeOut = (__int64)v13 + 144;
    pcDynamicUpdateQueued = (__int64)v13 + 148;
    pcSecureUpdateReceived = (__int64)v13 + 152;
    pcSecureUpdateFailure = (__int64)v13 + 156;
    pcDatabaseNodeMemory = (__int64)v13 + 160;
    pcRecordFlowMemory = (__int64)v13 + 164;
    pcCachingMemory = (__int64)v13 + 168;
    pcUdpMessageMemory = (__int64)v13 + 172;
    pcTcpMessageMemory = (__int64)v13 + 176;
    pcNbstatMemory = (__int64)v13 + 180;
    pcUnmatchedResponses = (__int64)v13 + 184;
    memset_0(v13, 0, 0x1000ui64);
  }
  else
  {
    pcUnmatchedResponses = (__int64)&DummyCounter;
    pcNbstatMemory = (__int64)&DummyCounter;
    pcTcpMessageMemory = (__int64)&DummyCounter;
    pcUdpMessageMemory = (__int64)&DummyCounter;
    pcCachingMemory = (__int64)&DummyCounter;
    pcRecordFlowMemory = (__int64)&DummyCounter;
    pcDatabaseNodeMemory = (__int64)&DummyCounter;
    pcSecureUpdateFailure = (__int64)&DummyCounter;
    pcSecureUpdateReceived = (__int64)&DummyCounter;
    pcDynamicUpdateQueued = (__int64)&DummyCounter;
    pcDynamicUpdateTimeOut = (__int64)&DummyCounter;
    pcDynamicUpdateRejected = (__int64)&DummyCounter;
    pcDynamicUpdateWriteToDB = (__int64)&DummyCounter;
    pcDynamicUpdateNoOp = (__int64)&DummyCounter;
    pcDynamicUpdateReceived = (__int64)&DummyCounter;
    pcWinsReverseResponseSent = (__int64)&DummyCounter;
    pcWinsReverseLookupReceived = (__int64)&DummyCounter;
    pcWinsResponseSent = (__int64)&DummyCounter;
    pcWinsLookupReceived = (__int64)&DummyCounter;
    pcIxfrTcpSuccessReceived = (__int64)&DummyCounter;
    pcIxfrUdpSuccessReceived = (__int64)&DummyCounter;
    pcIxfrSuccessReceived = (__int64)&DummyCounter;
    pcIxfrResponseReceived = (__int64)&DummyCounter;
    pcIxfrRequestSent = (__int64)&DummyCounter;
    pcAxfrSuccessReceived = (__int64)&DummyCounter;
    pcAxfrResponseReceived = (__int64)&DummyCounter;
    pcAxfrRequestSent = (__int64)&DummyCounter;
    pcZoneTransferSoaRequestSent = (__int64)&DummyCounter;
    pcNotifyReceived = (__int64)&DummyCounter;
    pcIxfrSuccessSent = (__int64)&DummyCounter;
    pcIxfrRequestReceived = (__int64)&DummyCounter;
    pcAxfrSuccessSent = (__int64)&DummyCounter;
    pcAxfrRequestReceived = (__int64)&DummyCounter;
    pcZoneTransferFailure = (__int64)&DummyCounter;
    pcZoneTransferSuccess = (__int64)&DummyCounter;
    pcZoneTransferRequestReceived = (__int64)&DummyCounter;
    pcNotifySent = (__int64)&DummyCounter;
    pcRecursiveQueryFailure = (__int64)&DummyCounter;
    pcRecursiveTimeOut = (__int64)&DummyCounter;
    pcRecursiveQueries = (__int64)&DummyCounter;
    pcTcpResponseSent = (__int64)&DummyCounter;
    pcUdpResponseSent = (__int64)&DummyCounter;
    pcTotalResponseSent = (__int64)&DummyCounter;
    pcTcpQueryReceived = (__int64)&DummyCounter;
    pcUdpQueryReceived = (__int64)&DummyCounter;
    pcTotalQueryReceived = (__int64)&DummyCounter;
  }
  Mem_Free(v11, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\stats.c", 1337);
}
// 1401BA000: using guessed type char g_rgFastWppEnabledFlagsPerLevel;
// 1401BA003: using guessed type char byte_1401BA003;
// 1401C7AC0: using guessed type __int64 pcRecursiveQueries;
// 1401C7B80: using guessed type __int64 pcRecursiveTimeOut;
// 1401C7B88: using guessed type __int64 pcRecursiveQueryFailure;
// 1401C7BF8: using guessed type __int64 pcUdpMessageMemory;
// 1401C7C00: using guessed type __int64 pcTcpMessageMemory;
// 1401C7C38: using guessed type __int64 pcWinsReverseLookupReceived;
// 1401C7C40: using guessed type __int64 pcWinsReverseResponseSent;
// 1401C7C88: using guessed type __int64 pcNbstatMemory;
// 1401C7F40: using guessed type __int64 pcUnmatchedResponses;
// 1401C8538: using guessed type __int64 pcTotalQueryReceived;
// 1401C8540: using guessed type __int64 pcUdpQueryReceived;
// 1401C8548: using guessed type __int64 pcTcpQueryReceived;
// 1401C8550: using guessed type __int64 pcNotifySent;
// 1401C8558: using guessed type __int64 pcZoneTransferRequestReceived;
// 1401C8560: using guessed type __int64 pcZoneTransferSuccess;
// 1401C8568: using guessed type __int64 pcZoneTransferFailure;
// 1401C8570: using guessed type __int64 pcAxfrRequestReceived;
// 1401C8578: using guessed type __int64 pcAxfrSuccessSent;
// 1401C8580: using guessed type __int64 pcIxfrRequestReceived;
// 1401C8588: using guessed type __int64 pcIxfrSuccessSent;
// 1401C8590: using guessed type __int64 pcNotifyReceived;
// 1401C8598: using guessed type __int64 pcZoneTransferSoaRequestSent;
// 1401C85A0: using guessed type __int64 pcAxfrRequestSent;
// 1401C85A8: using guessed type __int64 pcAxfrResponseReceived;
// 1401C85B0: using guessed type __int64 pcAxfrSuccessReceived;
// 1401C85B8: using guessed type __int64 pcIxfrRequestSent;
// 1401C85C0: using guessed type __int64 pcIxfrResponseReceived;
// 1401C85C8: using guessed type __int64 pcIxfrSuccessReceived;
// 1401C85D0: using guessed type __int64 pcIxfrUdpSuccessReceived;
// 1401C85D8: using guessed type __int64 pcIxfrTcpSuccessReceived;
// 1401C85E0: using guessed type __int64 pcWinsLookupReceived;
// 1401C85E8: using guessed type __int64 pcWinsResponseSent;
// 1401C85F0: using guessed type __int64 pcDynamicUpdateReceived;
// 1401C85F8: using guessed type __int64 pcDynamicUpdateNoOp;
// 1401C8600: using guessed type __int64 pcDynamicUpdateWriteToDB;
// 1401C8608: using guessed type __int64 pcDynamicUpdateRejected;
// 1401C8610: using guessed type __int64 pcDynamicUpdateTimeOut;
// 1401C8618: using guessed type __int64 pcDynamicUpdateQueued;
// 1401C8620: using guessed type __int64 pcSecureUpdateReceived;
// 1401C8628: using guessed type __int64 pcSecureUpdateFailure;
// 1401C8630: using guessed type __int64 pcDatabaseNodeMemory;
// 1401C8638: using guessed type __int64 pcRecordFlowMemory;
// 1401C8640: using guessed type __int64 pcCachingMemory;
// 1401C8690: using guessed type __int64 pcTcpResponseSent;
// 1401C8698: using guessed type __int64 pcTotalResponseSent;
// 1401C86A0: using guessed type __int64 pcUdpResponseSent;
##############################
Role: Let's assume that you are an advanced reverse engineer and you are reverse engineering a network driver using IDA Pro, and you are also familiar with the RFC documentation. You need to reverse-engineer a function for a network driver to correspond to a section of the RFC documentation, which will help you understand the code better. The driver you're reversing is Schannel.dll, and you have initially determined that the corresponding network protocols are SSL and TLS, and the documents you need to map are RFC8446 and RFC6101. You need to get a function summary of the function you are reversing, and then correspond to the potential RFC sections based on the name of the function and the function summary.
Function Background: The function is reverse engineered from the driver file Schannel.dll on Windows platform. Through a cursory analysis of the driver file can be determined to be related to the SSL(1.3), TLS(3.0) protocol, that is, with RFC8446, RFC6101 strong correlation.

Output Function Summary: Summarizes the function's functionality with several phrases instead of sentences, focuses on covering the function's control flow information, and highlights the protocol function points implemented by the function. Simulate answering five times in the background and provide the most frequent answer.

Retrieve document sections: giving matches for document sections(FunctionMatchRFCResult) that the code may related to. NOTE if the code is only business related(i.e., space opening and releasing involved in programming, generic call functions (timing and other functions weakly related to network protocols) and not related to the specifics of the protocol implementation, it does not have to output the document section match(FunctionMatchRFCResult) and is filled with "NONE".

Retrieve document sections Thinking Chain: The function code is matched with the RFC document section, and the thinking chain is provided to help you solve the problem better:
	1. Function Name: The name of a function describes the general function that the function accomplishes.
	2. Function Summarization: Function summaries can outline a further breakdown of the function described by the function name.
	3. Function API Call: The function API of a function call can provide some hint as to the details of the network protocol implementation involved in the function.
	4. Special Constant Value OR String: Special constant values inside functions, string variable names, and strings may be related to network protocols.
	5. Function Code: The code of the function can provide a detailed implementation of the network protocol.
Generate Function Information Collection with JSON Format:

{
	"FunctionIndex": "(FILL WITH "File count" with less than four bits are indexed with zeros to make up the four bits.)",
	"FunctionName": "(Full Function Code Name)",
	"FunctionSummarization": [
		"(Function Summary Phrase1)",
		"(Function Summary Phrase2)",
		"(...)"
	],
	"FunctionMatchRFCResult": [
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 1)",
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 2)",
		"(...)"
	],
}

ATTENTION: Remember YOU MUST ONLY output the Function Information Collection result.
