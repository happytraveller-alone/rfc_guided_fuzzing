Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 1578
// Total lines: 123

//----- (00000001400C7D68) ----------------------------------------------------
void __fastcall Zone_CreateDelegationInParentZone(__int64 a1, __int64 a2)
{
  char *v2; // r15
  char *v3; // rsi
  __int16 v6; // dx
  _BYTE *v7; // rax
  const char **v8; // rbp
  __int64 v9; // r14
  CHAR *v10; // r12
  __int64 v11; // rax
  __int64 v12; // rdi
  size_t v13; // rdi
  char *v14; // rax
  __int64 v15; // rdx
  const CHAR *v16; // r9
  char *v17; // rcx
  char v18; // al
  char *v19; // rax
  _BYTE *Ptr; // rax
  char v21[64]; // [rsp+30h] [rbp-68h] BYREF
  __int64 v22; // [rsp+A8h] [rbp+10h] BYREF

  v22 = 0i64;
  v2 = 0i64;
  v3 = 0i64;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_s(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0xBDu,
      (__int64)&WPP_e9a0d5dea449334d7c383477da81f939_Traceguids,
      *(const char **)(a1 + 16));
  }
  if ( dword_1401B9820 && *(_QWORD *)(g_Database + 56) != a1 )
  {
    v6 = 0;
    if ( dword_1401B9820 == 2 )
      v6 = 0x2000;
    v7 = Lookup_CreateParentZoneDelegation(a1, v6, &v22);
    v8 = (const char **)v22;
    v9 = (__int64)v7;
    if ( v22 && (unsigned int)(*(_DWORD *)(v22 + 372) - 2) > 2 && v7 && (!*((_QWORD *)v7 + 8) || dword_1401B9820 != 2) )
    {
      memset_0(v21, 0, sizeof(v21));
      v10 = (CHAR *)Str;
      if ( !_strnicmp(*(const char **)(a1 + 16), "_msdcs.", 7ui64)
        && (!strchr(Str, 46) || (*(_DWORD *)(a2 + 28) & 0x5000) != 0) )
      {
        v11 = -1i64;
        v12 = -1i64;
        do
          ++v12;
        while ( *(_BYTE *)(*(_QWORD *)(a1 + 16) + v12) );
        do
          ++v11;
        while ( Str[v11] );
        v13 = (unsigned int)(v11 + v12);
        v2 = (char *)Mem_Alloc(v13, 0i64, "ds\\dns\\server\\server\\zone.c", 10166);
        v14 = (char *)Mem_Alloc(v13, 0i64, "ds\\dns\\server\\server\\zone.c", 10167);
        v3 = v14;
        if ( v2 )
        {
          if ( v14 )
          {
            if ( v13 - 1 > 0x7FFFFFFE )
            {
              if ( v13 )
                *v14 = 0;
            }
            else
            {
              v15 = (unsigned int)v13;
              v16 = (const CHAR *)(Str - v14);
              v17 = v14;
              do
              {
                if ( !(2147483646 - v13 + v15) )
                  break;
                v18 = v17[(_QWORD)v16];
                if ( !v18 )
                  break;
                *v17++ = v18;
                --v15;
              }
              while ( v15 );
              if ( !v15 )
                --v17;
              *v17 = 0;
            }
            strtok(v3, ".");
            v19 = strchr(*(const char **)(a1 + 16), 46);
            if ( StringCbPrintfA(v2, v13, "%s.%s", v3, v19 + 1) >= 0 )
              v10 = v2;
          }
        }
      }
      Ptr = RR_CreatePtr(0i64, v10, 2u, *(_DWORD *)(a1 + 528), 0x21u);
      if ( Ptr )
      {
        Up_CreateAppendUpdate((__int64)v21, v9, (__int64)Ptr, 0, 0i64);
        if ( (unsigned int)Up_ExecuteUpdateEx(v8, (__int64)v21, 528, 0, (__int64)"ds\\dns\\server\\server\\zone.c", 245)
          && WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          WPP_SF_ssD(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0xBEu,
            (__int64)&WPP_e9a0d5dea449334d7c383477da81f939_Traceguids,
            v8[2],
            *(_QWORD *)(a1 + 16));
        }
        Mem_Free(v2, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\zone.c", 10241);
        Mem_Free(v3, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\zone.c", 10242);
      }
    }
  }
}
// 1401B9820: using guessed type int dword_1401B9820;
// 1401EC600: using guessed type __int64 g_Database;
