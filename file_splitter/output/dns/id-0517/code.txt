Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 517
// Total lines: 223

//----- (0000000140046E74) ----------------------------------------------------
__int64 __fastcall readAndUpdateNodeSecurityFromDs(__int64 a1, __int64 *a2)
{
  ULONG v4; // edi
  DWORD TickCount; // ebx
  PCHAR v6; // rax
  __int64 v7; // r8
  LDAPMessage *entry; // rax
  LDAPMessage *v9; // r12
  struct berval **values_lenW; // rax
  __int64 v11; // rdx
  __int64 v12; // r8
  struct berval **v13; // rbx
  struct berval *v14; // rax
  unsigned __int8 *bv_val; // rcx
  CDnsClientSubnetRecordsTrie *v16; // rcx
  __int64 v17; // r15
  struct berval **v18; // rax
  struct berval *v19; // rax
  PCHAR v20; // rcx
  __int64 *v21; // rax
  CDnsClientSubnetRecordsTrie *v22; // rcx
  unsigned __int16 v23; // dx
  int v25; // [rsp+60h] [rbp-A0h] BYREF
  PLDAPMessage res; // [rsp+68h] [rbp-98h] BYREF
  __int64 v27; // [rsp+70h] [rbp-90h] BYREF
  PLDAPControlW ServerControls[2]; // [rsp+78h] [rbp-88h] BYREF
  PWSTR attrs[5]; // [rsp+88h] [rbp-78h] BYREF
  WCHAR base[1288]; // [rsp+B0h] [rbp-50h] BYREF

  attrs[0] = off_1401B6C50;
  attrs[1] = off_1401B6C40;
  attrs[2] = off_1401B6C28;
  ServerControls[0] = (PLDAPControlW)&SecurityDescriptorControl_DGO;
  attrs[3] = 0i64;
  res = 0i64;
  v25 = 0;
  ServerControls[1] = 0i64;
  if ( !pServerLdap || !a1 || !a2 )
    return 87i64;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x1A4u, (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids);
  }
  v4 = buildDsNodeNameFromNode(base, a2, a1);
  if ( !v4 )
  {
    TickCount = GetTickCount();
    v4 = ldap_search_ext_sW(
           pServerLdap,
           base,
           0,
           g_szWildCardFilter,
           attrs,
           0,
           ServerControls,
           0i64,
           &g_LdapTimeout,
           0,
           &res);
    _InterlockedExchangeAdd(&dword_1401C7D48, GetTickCount() - TickCount);
    if ( v4 )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        v6 = ldap_err2stringA(v4);
        WPP_SF_LSs(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x1A5u, v7, v4, (__int64)base, (__int64)v6);
      }
      v4 = Ds_ErrorHandler(v4, (__int64)base, pServerLdap, 0);
      goto LABEL_75;
    }
    entry = ldap_first_entry(pServerLdap, res);
    v9 = entry;
    if ( !entry )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
      {
        WPP_SF_S(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x1A6u,
          (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
          base);
      }
      goto LABEL_75;
    }
    values_lenW = ldap_get_values_lenW(pServerLdap, entry, off_1401B6C50);
    v13 = values_lenW;
    if ( values_lenW && (v14 = *values_lenW) != 0i64 )
    {
      bv_val = (unsigned __int8 *)v14->bv_val;
      if ( bv_val )
        v4 = GeneralizedTimeStringToValue(bv_val, &v27);
      else
        v4 = -1073741811;
      if ( v4 )
      {
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          WPP_SF_D(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x1A8u,
            (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
            v4);
        }
        goto LABEL_73;
      }
      v16 = WPP_GLOBAL_Control;
      v17 = v27;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
      {
        WPP_SF_sii(*((_QWORD *)WPP_GLOBAL_Control + 7), v11, v12, (const char *)(a1 + 102));
        v16 = WPP_GLOBAL_Control;
      }
      if ( v17 < a2[127] )
      {
        if ( v16 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)v16 + 17) & 0x400) != 0
          && *((_BYTE *)v16 + 65) >= 4u )
        {
          WPP_SF_(*((_QWORD *)v16 + 7), 0x1AAu, (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids);
        }
        *(_DWORD *)(a1 + 92) |= 8u;
      }
      ldap_value_free_len(v13);
      v18 = ldap_get_values_lenW(pServerLdap, v9, off_1401B6C40);
      v13 = v18;
      if ( v18 && (v19 = *v18) != 0i64 )
      {
        v20 = v19->bv_val;
        if ( v20 )
          v4 = SD_AccessCheck(v20, &v25);
        else
          v4 = 87;
        if ( !v4 && v25 )
        {
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
          {
            WPP_SF_(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x1ACu,
              (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids);
          }
          *(_DWORD *)(a1 + 92) |= 0x800u;
        }
        ldap_value_free_len(v13);
        v21 = (__int64 *)ldap_get_values_lenW(pServerLdap, v9, off_1401B6C28);
        v13 = (struct berval **)v21;
        if ( v21 && !(unsigned int)Ds_ValidateDsRecord(0i64, *v21) )
        {
          if ( !*((_WORD *)(*v13)->bv_val + 1) )
          {
            if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
              && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
            {
              WPP_SF_(
                *((_QWORD *)WPP_GLOBAL_Control + 7),
                0x1AEu,
                (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids);
            }
            *(_DWORD *)(a1 + 92) |= 4u;
          }
          goto LABEL_73;
        }
        v22 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          v23 = 429;
LABEL_72:
          WPP_SF_(*((_QWORD *)v22 + 7), v23, (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids);
        }
      }
      else
      {
        v22 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          v23 = 427;
          goto LABEL_72;
        }
      }
    }
    else
    {
      v22 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        v23 = 423;
        goto LABEL_72;
      }
    }
LABEL_73:
    if ( v13 )
      ldap_value_free_len(v13);
  }
LABEL_75:
  if ( res )
    ldap_msgfree(res);
  return v4;
}
// 140047010: variable 'v7' is possibly undefined
// 14004716B: variable 'v11' is possibly undefined
// 14004716B: variable 'v12' is possibly undefined
// 1401C7D48: using guessed type int dword_1401C7D48;
// 1401EC440: using guessed type __int64 SecurityDescriptorControl_DGO;
