Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 447
// Total lines: 436

//----- (000000014003808C) ----------------------------------------------------
__int64 __fastcall writeRecordsToDsNode(__int64 a1, wchar_t *a2, __int64 a3, int a4, __int64 a5)
{
  int v5; // esi
  __int64 *v8; // rax
  struct ldap *v9; // r8
  __int64 v10; // r9
  struct ldap *v11; // rcx
  int v12; // r14d
  BOOL v13; // ebx
  int v14; // edi
  const char *v15; // rax
  __int64 v16; // r9
  __int64 v17; // r10
  LDAPModW *v18; // rcx
  DWORD LastError; // eax
  CDnsClientSubnetRecordsTrie *v20; // rcx
  unsigned int v21; // edi
  int v22; // esi
  const wchar_t *v23; // rax
  int *v24; // r12
  int v25; // eax
  unsigned int v26; // eax
  int v28; // r14d
  int TickCount; // ebx
  int v30; // ebx
  unsigned int v31; // ebx
  __int64 v32; // rsi
  unsigned __int16 v33; // cx
  char *v34; // rax
  const char *v35; // rcx
  const char *v36; // rdx
  int v37; // [rsp+20h] [rbp-A1h]
  __int64 v38; // [rsp+28h] [rbp-99h]
  int v40; // [rsp+44h] [rbp-7Dh]
  int v41; // [rsp+48h] [rbp-79h]
  __int64 v42; // [rsp+50h] [rbp-71h]
  LDAP *ld; // [rsp+60h] [rbp-61h]
  _BOOL8 v44; // [rsp+68h] [rbp-59h]
  PLDAPControlW ServerControls[2]; // [rsp+70h] [rbp-51h] BYREF
  __int128 v46; // [rsp+80h] [rbp-41h] BYREF
  int v47; // [rsp+90h] [rbp-31h] BYREF
  const WCHAR *v48; // [rsp+98h] [rbp-29h]
  __int128 *v49; // [rsp+A0h] [rbp-21h]
  LDAPModW *attrs; // [rsp+A8h] [rbp-19h] BYREF
  int *v51; // [rsp+B0h] [rbp-11h]
  __int64 v52; // [rsp+B8h] [rbp-9h]
  __int64 v53; // [rsp+C0h] [rbp-1h]

  v5 = a4;
  v8 = Ds_LazyCommitControlPtr();
  v11 = pServerLdap;
  ServerControls[0] = (PLDAPControlW)v8;
  ServerControls[1] = 0i64;
  if ( v9 )
    v11 = v9;
  v40 = 0;
  v12 = 0;
  ld = v11;
  v13 = v11 == pServerLdap;
  v14 = 0;
  v46 = 0i64;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    v15 = "client";
    if ( v11 == pServerLdap )
      v15 = "global server";
    WPP_SF_DSSs(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x1Eu,
      (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
      v5,
      (__int64)a2,
      *(_QWORD *)(v10 + 840),
      (__int64)v15);
  }
  v42 = Ds_SetupModForExecution(a3, (__int64)off_1401B6C28);
  v18 = (LDAPModW *)v42;
  if ( v42 )
  {
    v47 = 2;
    v48 = L"dNSTombstoned";
    v22 = v5 & 4;
    v23 = L"FALSE";
    v24 = &v47;
    if ( v22 )
      v23 = L"TRUE";
    *(_QWORD *)&v46 = v23;
    v49 = &v46;
    if ( *(_DWORD *)(v16 + 372) == (_DWORD)v17 && g_ulDownlevelDCsInDomain != (_DWORD)v17 )
    {
      v25 = _wcsnicmp(a2, L"dc=@", 4ui64);
      v17 = 0i64;
      if ( !v25 )
      {
        v20 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          v37 = *(unsigned __int16 *)(a3 + 16);
          WPP_SF_Dd(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x1Fu,
            (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
            *(_DWORD *)(a3 + 4));
          v20 = WPP_GLOBAL_Control;
          v17 = 0i64;
        }
        if ( v22 || !*(_DWORD *)(a3 + 4) || *(_WORD *)(a3 + 16) != 2 )
        {
          if ( v20 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)v20 + 17) & 0x400) != 0
            && *((_BYTE *)v20 + 65) >= 4u )
          {
            WPP_SF_(*((_QWORD *)v20 + 7), 0x20u, (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids);
            v20 = WPP_GLOBAL_Control;
          }
          v21 = 0;
          goto LABEL_28;
        }
      }
      v18 = (LDAPModW *)v42;
    }
    v28 = v17;
    LOBYTE(v28) = a4 == 1;
    v44 = v13;
    while ( 1 )
    {
      attrs = v18;
      v41 = v14 + 1;
      v52 = v17;
      if ( v28 )
      {
        v51 = &AddNodeLdapMod;
        if ( v22 )
        {
          v52 = (__int64)v24;
          v53 = v17;
        }
        TickCount = GetTickCount();
        v21 = Dns_LdapAddExt(ld, a2, &attrs, ServerControls, 0i64, v38, 0);
        writeTimeStop(TickCount);
        if ( v21 != 68 )
        {
          v20 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            WPP_SF_DS(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x25u,
              (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
              v21,
              (__int64)a2);
            goto LABEL_93;
          }
LABEL_94:
          if ( v21 )
          {
LABEL_95:
            if ( v20 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              && (*((_DWORD *)v20 + 17) & 0x400) != 0
              && *((_BYTE *)v20 + 65) >= 4u )
            {
              WPP_SF_DS(
                *((_QWORD *)v20 + 7),
                0x2Au,
                (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
                v21,
                (__int64)a2);
              goto LABEL_112;
            }
          }
          else
          {
            v31 = *(_DWORD *)(a3 + 4);
            if ( (qword_1401B9780 & 0x4000) != 0 )
            {
              v32 = *(_QWORD *)(*(_QWORD *)(a3 + 8i64 * (v31 - 1) + 88) + 8i64);
              if ( (unsigned int)Log_EnterLock() )
              {
                v33 = *(_WORD *)(v32 + 2);
                g_pszCurrentLogLevelString = (__int64)"DSWRITE";
                if ( v33 )
                {
                  v34 = private_StringForRecordType(v33);
                  v35 = "UNKNOWN";
                  if ( v34 )
                    v35 = v34;
                }
                else
                {
                  v35 = "TOMBSTONE";
                }
                v36 = "Mod";
                if ( (a4 & 1) != 0 )
                  v36 = "Add";
                LODWORD(v38) = *(_DWORD *)(v32 + 8);
                Log_Printf(
                  "%s: %S\n"
                  "                     records =        %d\n"
                  "                     highest type =   %s\n"
                  "                     serial number =  %lu\n",
                  v36,
                  a2,
                  v31,
                  v35,
                  v38);
                g_pszCurrentLogLevelString = 0i64;
                Log_LeaveLock();
              }
            }
            if ( v28 )
            {
              _InterlockedIncrement(&dword_1401C7D00);
              _InterlockedExchangeAdd(&dword_1401C7D10, v31);
              v20 = WPP_GLOBAL_Control;
              goto LABEL_28;
            }
            _InterlockedIncrement(&dword_1401C7D04);
            _InterlockedExchangeAdd(&dword_1401C7D14, v31);
LABEL_112:
            v20 = WPP_GLOBAL_Control;
          }
          v5 = a4;
          v12 = v40;
          goto LABEL_114;
        }
        v20 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          WPP_SF_S(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x22u,
            (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
            a2);
          v20 = WPP_GLOBAL_Control;
        }
        if ( !v44 )
        {
          if ( !(unsigned int)isUserAllowedToCreateChildObjectsInZone(a5) )
          {
            v20 = WPP_GLOBAL_Control;
            if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
              && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
            {
              WPP_SF_(
                *((_QWORD *)WPP_GLOBAL_Control + 7),
                0x23u,
                (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids);
              v20 = WPP_GLOBAL_Control;
            }
            v21 = 5;
            goto LABEL_95;
          }
          v20 = WPP_GLOBAL_Control;
        }
        if ( v20 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)v20 + 17) & 0x400) != 0
          && *((_BYTE *)v20 + 65) >= 4u )
        {
          WPP_SF_(*((_QWORD *)v20 + 7), 0x24u, (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids);
          v20 = WPP_GLOBAL_Control;
        }
        v17 = 0i64;
        v28 = 0;
      }
      else
      {
        v51 = v24;
        v30 = GetTickCount();
        v21 = Dns_LdapModifyExt(ld, a2, &attrs, ServerControls, v37, v38, 0);
        writeTimeStop(v30);
        if ( v21 == 16 )
        {
          v20 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
          {
            WPP_SF_(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x26u,
              (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids);
            v20 = WPP_GLOBAL_Control;
          }
          v17 = 0i64;
          v24 = 0i64;
        }
        else
        {
          if ( v21 != 32 )
          {
            v20 = WPP_GLOBAL_Control;
            if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) == 0
              || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
            {
              goto LABEL_94;
            }
            WPP_SF_DS(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x29u,
              (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
              v21,
              (__int64)a2);
LABEL_93:
            v20 = WPP_GLOBAL_Control;
            goto LABEL_94;
          }
          if ( a4 == 4 )
          {
            v20 = WPP_GLOBAL_Control;
            if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
              && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
            {
              WPP_SF_S(
                *((_QWORD *)WPP_GLOBAL_Control + 7),
                0x27u,
                (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
                a2);
              v20 = WPP_GLOBAL_Control;
            }
            v21 = 0;
            goto LABEL_28;
          }
          v20 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            WPP_SF_S(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x28u,
              (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
              a2);
            v20 = WPP_GLOBAL_Control;
          }
          v28 = 1;
          v17 = 0i64;
          v40 = 1;
        }
      }
      if ( v41 > 2 )
      {
        if ( v20 == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          || (*((_DWORD *)v20 + 17) & 0x400) == 0
          || *((_BYTE *)v20 + 65) < 4u )
        {
          goto LABEL_94;
        }
        WPP_SF_(*((_QWORD *)v20 + 7), 0x21u, (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids);
        goto LABEL_93;
      }
      v18 = (LDAPModW *)v42;
      v14 = v41;
    }
  }
  LastError = GetLastError();
  v20 = WPP_GLOBAL_Control;
  v21 = LastError;
LABEL_114:
  if ( v21 )
  {
    if ( v12 || v5 == 2 )
      _InterlockedIncrement(&dword_1401C7D54);
    else
      _InterlockedIncrement(&dword_1401C7D58);
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      WPP_SF_DS(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x2Bu,
        (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
        v21,
        (__int64)a2);
    }
  }
  else
  {
LABEL_28:
    v26 = *(_DWORD *)(a3 + 20);
    if ( *(_DWORD *)(a5 + 944) < v26 )
    {
      *(_DWORD *)(a5 + 944) = v26;
      v20 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
        goto LABEL_37;
      if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0 && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_DS(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x2Cu,
          (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
          *(_DWORD *)(a3 + 20),
          *(_QWORD *)(a5 + 24));
        v20 = WPP_GLOBAL_Control;
      }
    }
    if ( v20 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)v20 + 17) & 0x400) != 0
      && *((_BYTE *)v20 + 65) >= 4u )
    {
      WPP_SF_S(*((_QWORD *)v20 + 7), 0x2Du, (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids, a2);
    }
  }
LABEL_37:
  Ds_CleanupModBuffer(a3);
  return v21;
}
// 1400380E9: variable 'v9' is possibly undefined
// 140038157: variable 'v10' is possibly undefined
// 1400381E7: variable 'v16' is possibly undefined
// 1400381EE: variable 'v17' is possibly undefined
// 1400383DC: variable 'v38' is possibly undefined
// 1400384B0: variable 'v37' is possibly undefined
// 1401B7F04: using guessed type int g_ulDownlevelDCsInDomain;
// 1401B8F28: using guessed type __int64 g_pszCurrentLogLevelString;
// 1401B9780: using guessed type __int64 qword_1401B9780;
// 1401C7D00: using guessed type int dword_1401C7D00;
// 1401C7D04: using guessed type int dword_1401C7D04;
// 1401C7D10: using guessed type int dword_1401C7D10;
// 1401C7D14: using guessed type int dword_1401C7D14;
// 1401C7D54: using guessed type int dword_1401C7D54;
// 1401C7D58: using guessed type int dword_1401C7D58;
// 1401EC3C0: using guessed type int AddNodeLdapMod;
##############################
Role: Let's assume that you are an advanced reverse engineer and you are reverse engineering a network driver using IDA Pro, and you are also familiar with the RFC documentation. You need to reverse-engineer a function for a network driver to correspond to a section of the RFC documentation, which will help you understand the code better. The driver you're reversing is Schannel.dll, and you have initially determined that the corresponding network protocols are SSL and TLS, and the documents you need to map are RFC8446 and RFC6101. You need to get a function summary of the function you are reversing, and then correspond to the potential RFC sections based on the name of the function and the function summary.
Function Background: The function is reverse engineered from the driver file Schannel.dll on Windows platform. Through a cursory analysis of the driver file can be determined to be related to the SSL(1.3), TLS(3.0) protocol, that is, with RFC8446, RFC6101 strong correlation.

Output Function Summary: Summarizes the function's functionality with several phrases instead of sentences, focuses on covering the function's control flow information, and highlights the protocol function points implemented by the function. Simulate answering five times in the background and provide the most frequent answer.

Retrieve document sections: giving matches for document sections(FunctionMatchRFCResult) that the code may related to. NOTE if the code is only business related(i.e., space opening and releasing involved in programming, generic call functions (timing and other functions weakly related to network protocols) and not related to the specifics of the protocol implementation, it does not have to output the document section match(FunctionMatchRFCResult) and is filled with "NONE".

Retrieve document sections Thinking Chain: The function code is matched with the RFC document section, and the thinking chain is provided to help you solve the problem better:
	1. Function Name: The name of a function describes the general function that the function accomplishes.
	2. Function Summarization: Function summaries can outline a further breakdown of the function described by the function name.
	3. Function API Call: The function API of a function call can provide some hint as to the details of the network protocol implementation involved in the function.
	4. Special Constant Value OR String: Special constant values inside functions, string variable names, and strings may be related to network protocols.
	5. Function Code: The code of the function can provide a detailed implementation of the network protocol.
Generate Function Information Collection with JSON Format:

{
	"FunctionIndex": "(FILL WITH "File count" with less than four bits are indexed with zeros to make up the four bits.)",
	"FunctionName": "(Full Function Code Name)",
	"FunctionSummarization": [
		"(Function Summary Phrase1)",
		"(Function Summary Phrase2)",
		"(...)"
	],
	"FunctionMatchRFCResult": [
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 1)",
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 2)",
		"(...)"
	],
}

ATTENTION: Remember YOU MUST ONLY output the Function Information Collection result.
