Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 1903
// Total lines: 244

//----- (00000001400E919C) ----------------------------------------------------
void __fastcall DF_SetForwarderResponseTime(struct in_addr *Buf1, unsigned int a2, __int64 a3)
{
  void **v5; // rdi
  const char *v6; // rax
  const char *v7; // rbx
  const char *v8; // rax
  __int64 v9; // rax
  void **v10; // rcx
  __int64 v11; // rbx
  __int64 v12; // rbx
  unsigned __int64 v13; // r13
  unsigned __int64 v14; // rbp
  _WORD *v15; // rsi
  CDnsClientSubnetRecordsTrie *v16; // rcx
  const char *v17; // rax
  const char *v18; // rax
  __int64 v19; // rsi
  const char *v20; // rax
  unsigned __int16 v21; // dx
  CDnsClientSubnetRecordsTrie *v22; // rcx
  const char *v23; // rax
  const char *v24; // rax
  unsigned __int64 v25; // rdx
  unsigned __int64 v26; // rcx
  _DWORD *v27; // rcx
  char v28; // al
  char v29; // al
  __int64 v30; // rax
  __int64 v31; // [rsp+20h] [rbp-78h]
  __int128 v32; // [rsp+30h] [rbp-68h]
  __int128 v33; // [rsp+40h] [rbp-58h]
  __int128 v34; // [rsp+50h] [rbp-48h]
  __int128 v35; // [rsp+60h] [rbp-38h]
  bool v36; // [rsp+A8h] [rbp+10h]

  v5 = 0i64;
  v36 = a2 > 1;
  if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x4000) != 0 )
  {
    if ( a2 == -1 )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        v6 = DnsAddr_Ntoa(Buf1);
        WPP_SF_s(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x13u,
          (__int64)&WPP_66b23b5e6a3832dd7e122b01e64c7d31_Traceguids,
          v6);
      }
    }
    else if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
           && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      v7 = "fast";
      if ( a2 > 1 )
        v7 = "slow";
      v8 = DnsAddr_Ntoa(Buf1);
      WPP_SF_ssD(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x14u,
        (__int64)&WPP_66b23b5e6a3832dd7e122b01e64c7d31_Traceguids,
        v8,
        (__int64)v7);
    }
  }
  v9 = *(_QWORD *)(a3 + 3664);
  v10 = (void **)(v9 + 16);
  if ( !v9 )
    v10 = 0i64;
  DF_LockWrite(v10);
  v11 = *(_QWORD *)(a3 + 3664);
  if ( v11 )
    v12 = *(_QWORD *)(v11 + 264);
  else
    v12 = qword_1401B97D8;
  if ( v12 && *(_DWORD *)(v12 + 4) )
  {
    v13 = *(unsigned int *)(v12 + 4);
    v14 = 0i64;
    v15 = (_WORD *)(v12 + 32);
    while ( !(unsigned int)DnsAddr_IsEqual(Buf1, v15, 3) )
    {
      ++v14;
      v15 += 32;
      if ( v14 >= v13 )
        goto LABEL_26;
    }
    v16 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x4000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
    {
      v17 = DnsAddr_Ntoa((struct in_addr *)(v12 + (v14 << 6) + 32));
      WPP_SF_sd(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x16u,
        (__int64)&WPP_66b23b5e6a3832dd7e122b01e64c7d31_Traceguids,
        v17);
LABEL_26:
      v16 = WPP_GLOBAL_Control;
    }
    if ( v14 >= *(unsigned int *)(v12 + 4) )
    {
      if ( v16 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)v16 + 17) & 0x4000) != 0
        && *((_BYTE *)v16 + 65) >= 4u )
      {
        v18 = DnsAddr_Ntoa(Buf1);
        WPP_SF_s(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x17u,
          (__int64)&WPP_66b23b5e6a3832dd7e122b01e64c7d31_Traceguids,
          v18);
      }
      goto LABEL_69;
    }
    v19 = (v14 << 6) + v12 + 32;
    if ( !v36 )
    {
      if ( v16 == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_DWORD *)v16 + 17) & 0x4000) == 0
        || *((_BYTE *)v16 + 65) < 5u )
      {
        goto LABEL_38;
      }
      v20 = DnsAddr_Ntoa((struct in_addr *)((v14 << 6) + v12 + 32));
      v21 = 24;
LABEL_37:
      WPP_SF_sd(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        v21,
        (__int64)&WPP_66b23b5e6a3832dd7e122b01e64c7d31_Traceguids,
        v20);
LABEL_38:
      *(_DWORD *)(v19 + 48) = 0;
      goto LABEL_69;
    }
    ++*(_DWORD *)(v19 + 48);
    v22 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x4000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
    {
      v23 = DnsAddr_Ntoa((struct in_addr *)((v14 << 6) + v12 + 32));
      WPP_SF_DsD(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x19u,
        (__int64)&WPP_66b23b5e6a3832dd7e122b01e64c7d31_Traceguids,
        *(_DWORD *)(v19 + 48),
        (__int64)v23);
      v22 = WPP_GLOBAL_Control;
    }
    if ( *(_DWORD *)(v19 + 48) >= 3u )
    {
      if ( v14 == *(_DWORD *)(v12 + 4) - 1 )
      {
        if ( v22 == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          || (*((_DWORD *)v22 + 17) & 0x4000) == 0
          || *((_BYTE *)v22 + 65) < 5u )
        {
          goto LABEL_38;
        }
        v20 = DnsAddr_Ntoa((struct in_addr *)((v14 << 6) + v12 + 32));
        v21 = 26;
        goto LABEL_37;
      }
      if ( v22 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)v22 + 17) & 0x4000) != 0
        && *((_BYTE *)v22 + 65) >= 4u )
      {
        v24 = DnsAddr_Ntoa((struct in_addr *)((v14 << 6) + v12 + 32));
        WPP_SF_sdD(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x1Bu,
          (__int64)&WPP_66b23b5e6a3832dd7e122b01e64c7d31_Traceguids,
          v24);
        v22 = WPP_GLOBAL_Control;
      }
      if ( (*((_DWORD *)v22 + 17) & 0x4000) != 0 )
        Dbg_DnsAddrArray("Dynamic forwarder array before re-order", v12);
      v32 = *(_OWORD *)v19;
      v33 = *(_OWORD *)(v19 + 16);
      v34 = *(_OWORD *)(v19 + 32);
      v35 = *(_OWORD *)(v19 + 48);
      memmove(
        (void *)((v14 << 6) + v12 + 32),
        (const void *)((v14 << 6) + v12 + 96),
        (*(unsigned int *)(v12 + 4) - v14 - 1) << 6);
      v25 = 0i64;
      v26 = (unsigned __int64)(unsigned int)(*(_DWORD *)(v12 + 4) - 1) << 6;
      *(_OWORD *)(v26 + v12 + 32) = v32;
      *(_OWORD *)(v26 + v12 + 48) = v33;
      *(_OWORD *)(v26 + v12 + 64) = v34;
      *(_OWORD *)(v26 + v12 + 80) = v35;
      if ( *(_DWORD *)(v12 + 4) )
      {
        v27 = (_DWORD *)(v12 + 80);
        do
        {
          *v27 = 0;
          ++v25;
          v27 += 16;
        }
        while ( v25 < *(unsigned int *)(v12 + 4) );
      }
      if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x4000) != 0 )
        Dbg_DnsAddrArray("Dynamic forwarder array after re-order", v12);
      v28 = *(_BYTE *)(a3 + 1428);
      if ( v28 > 0 )
      {
        v29 = v28 - 1;
        *(_BYTE *)(a3 + 1428) = v29;
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x4000) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
        {
          LODWORD(v31) = v29;
          WPP_SF_qd(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x1Cu,
            (__int64)&WPP_66b23b5e6a3832dd7e122b01e64c7d31_Traceguids,
            a3,
            v31);
        }
      }
    }
  }
  else if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
         && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x4000) != 0
         && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
  {
    WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x15u, (__int64)&WPP_66b23b5e6a3832dd7e122b01e64c7d31_Traceguids, v12);
  }
LABEL_69:
  v30 = *(_QWORD *)(a3 + 3664);
  if ( v30 )
    v5 = (void **)(v30 + 16);
  DF_UnlockWrite(v5);
}
// 1400E9606: variable 'v31' is possibly undefined
// 1401B97D8: using guessed type __int64 qword_1401B97D8;
