Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 1557
// Total lines: 189

//----- (00000001400C4DE4) ----------------------------------------------------
__int64 __fastcall Zone_Load(__int64 a1, int a2)
{
  int v4; // ebp
  const unsigned __int16 *v5; // r9
  unsigned int OnlyZone; // edi
  CDnsClientSubnetRecordsTrie *v7; // r10
  const wchar_t *v8; // rcx
  const unsigned __int16 *v9; // r9
  int v10; // ecx
  int v11; // eax
  bool v12; // al
  unsigned int ZoneFromDs; // eax
  const wchar_t *v14; // rdx
  const unsigned __int16 *v15; // r9
  const char *v16; // rcx
  const char *v17; // rax

  v4 = 0;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x10) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    if ( !a1 || (v5 = *(const unsigned __int16 **)(a1 + 192)) == 0i64 )
      v5 = L"Default";
    WPP_SF_Ss(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x6Bu,
      (__int64)&WPP_e9a0d5dea449334d7c383477da81f939_Traceguids,
      v5,
      *(_QWORD *)(a1 + 16));
  }
  OnlyZone = Zone_LockForWriteEx(a1, 1, 0x2710u, (__int64)"ds\\dns\\server\\server\\zone.c", 25);
  if ( !OnlyZone )
  {
    v4 = 1;
    if ( !a1 || !*(_QWORD *)(a1 + 192) )
    {
      OnlyZone = DnsOls_ConvertReadOnlyZone(a1);
      if ( OnlyZone )
      {
        v7 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
        {
LABEL_75:
          Zone_UnlockAfterWriteEx(a1, 1, (__int64)"ds\\dns\\server\\server\\zone.c", 218);
          return OnlyZone;
        }
        if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) == 0 || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
          goto LABEL_60;
        if ( !a1 || (v9 = *(const unsigned __int16 **)(a1 + 192)) == 0i64 )
          v9 = L"Default";
        WPP_SF_Ss(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x6Du,
          (__int64)&WPP_e9a0d5dea449334d7c383477da81f939_Traceguids,
          v9,
          *(_QWORD *)(a1 + 16));
        goto LABEL_59;
      }
    }
    v10 = *(_DWORD *)(a1 + 388);
    if ( (v10 & 4) == 0 )
    {
      if ( (unsigned int)(*(_DWORD *)(a1 + 372) - 2) <= 1 && (v10 & 1) == 0 && !*(_QWORD *)(a1 + 136) )
      {
        v7 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x10) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          WPP_SF_s(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x6Eu,
            (__int64)&WPP_e9a0d5dea449334d7c383477da81f939_Traceguids,
            *(const char **)(a1 + 16));
          v7 = WPP_GLOBAL_Control;
        }
        OnlyZone = 2;
        goto LABEL_60;
      }
      OnlyZone = Zone_PrepareForLoad(a1);
      if ( OnlyZone )
      {
LABEL_59:
        v7 = WPP_GLOBAL_Control;
        goto LABEL_60;
      }
    }
    v11 = *(_DWORD *)(a1 + 388);
    if ( (v11 & 1) != 0 )
    {
      if ( dword_1401B9868 && (v11 & 4) == 0 )
      {
        v12 = (a2 & 0x20000000) != 0
           && g_ServerState == 1
           && *(_QWORD *)(g_Database + 56) != a1
           && *(_DWORD *)(a1 + 372) == 1
           && !*(_DWORD *)(a1 + 376);
        *(_DWORD *)(a1 + 388) &= ~2u;
        *(_DWORD *)(a1 + 388) |= 2 * v12;
        if ( (*(_BYTE *)(a1 + 388) & 2) != 0
          && WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          WPP_SF_s(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x6Fu,
            (__int64)&WPP_e9a0d5dea449334d7c383477da81f939_Traceguids,
            *(const char **)(a1 + 16));
        }
      }
      ZoneFromDs = Ds_LoadZoneFromDs((struct _zone_info *)a1, a2, 0i64);
    }
    else
    {
      if ( *(_DWORD *)(a1 + 372) == 4 )
      {
        OnlyZone = 0;
        goto LABEL_54;
      }
      ZoneFromDs = File_LoadDatabaseFile(a1, 0i64, 0i64, 0i64);
    }
    OnlyZone = ZoneFromDs;
    if ( ZoneFromDs )
    {
      if ( ZoneFromDs == 9607 || ZoneFromDs == 9622 )
        v4 = 0;
      Zone_CleanupFailedLoad(a1);
      goto LABEL_59;
    }
LABEL_54:
    if ( (*(_BYTE *)(a1 + 388) & 1) == 0 && *(_DWORD *)(a1 + 372) )
      Zone_ActivateLoadedZone(a1);
    if ( !*(_QWORD *)(a1 + 192) )
      Zone_NotifyIfSignatureExpires(a1);
    goto LABEL_59;
  }
  v7 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
    return OnlyZone;
  if ( (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x10) != 0 && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
  {
    if ( !a1 || (v8 = *(const wchar_t **)(a1 + 192)) == 0i64 )
      v8 = L"Default";
    WPP_SF_DSs(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x6Cu,
      (__int64)&WPP_e9a0d5dea449334d7c383477da81f939_Traceguids,
      OnlyZone,
      (__int64)v8,
      *(_QWORD *)(a1 + 16));
    goto LABEL_59;
  }
LABEL_60:
  if ( v7 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)v7 + 68) & 0x10) != 0
    && *((_BYTE *)v7 + 65) >= 4u )
  {
    if ( !a1 || (v14 = *(const wchar_t **)(a1 + 192)) == 0i64 )
      v14 = L"Default";
    if ( !a1 || (v15 = *(const unsigned __int16 **)(a1 + 192)) == 0i64 )
      v15 = L"Default";
    v16 = "not paused";
    if ( (*(_DWORD *)(a1 + 396) & 0x1000) != 0 )
      v16 = "paused";
    v17 = "not shutdown";
    if ( (*(_DWORD *)(a1 + 396) & 0x2000) != 0 )
      v17 = "shutdown";
    WPP_SF_SsDSss(
      *((_QWORD *)v7 + 7),
      (__int64)v14,
      (__int64)"shutdown",
      v15,
      *(_QWORD *)(a1 + 16),
      OnlyZone,
      (__int64)v14,
      (__int64)v17,
      (__int64)v16);
  }
  if ( v4 )
    goto LABEL_75;
  return OnlyZone;
}
// 140188260: using guessed type wchar_t aDefault_1[8];
// 1401B7EB0: using guessed type int g_ServerState;
// 1401B9868: using guessed type int dword_1401B9868;
// 1401EC600: using guessed type __int64 g_Database;
