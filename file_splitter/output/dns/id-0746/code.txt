Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 746
// Total lines: 166

//----- (0000000140067CA8) ----------------------------------------------------
__int64 __fastcall examineDSCacheUpdateResponse(struct _zone_info *a1, __int64 a2, u_long *a3)
{
  unsigned int v4; // esi
  int v5; // r12d
  __int64 v7; // r15
  __int64 NextRecord; // rbx
  __int64 v9; // rbp
  DnsSign::CDnsKeyPair *v10; // rcx
  struct _Dbase_Record *DnskeyRecordFromKeyPair; // rax
  DnsSign *v12; // rbp
  unsigned __int16 v13; // dx
  u_short v14; // dx
  u_short v15; // ax
  unsigned __int64 v16; // rdx
  int v17; // ecx
  struct _Dbase_Record *DsFromDnskey; // rax
  __int64 v19; // r12
  u_long v20; // eax
  bool v21; // zf
  int v22; // eax
  int v23; // eax
  int v25[18]; // [rsp+40h] [rbp-48h] BYREF
  unsigned int v26; // [rsp+90h] [rbp+8h] BYREF
  int v27; // [rsp+98h] [rbp+10h]
  u_long *v28; // [rsp+A0h] [rbp+18h] BYREF

  v28 = a3;
  v4 = 0;
  v27 = 0;
  v5 = 0;
  *a3 = 0;
  v26 = -1;
  acquireRead(DbaseLock, 0xFFFFFFFF, &v26);
  v7 = *((_QWORD *)a1 + 141);
  if ( (*(_BYTE *)(a2 + 92) & 1) != 0 )
  {
    NextRecord = *(_QWORD *)(a2 + 64);
    if ( !NextRecord )
    {
LABEL_40:
      v21 = *(_QWORD *)(a2 + 56) == 0i64;
LABEL_36:
      if ( !v21 )
      {
        v22 = *((_DWORD *)a1 + 260);
        if ( (v22 & 0x2000) != 0 )
        {
          v5 = 1;
          *((_DWORD *)a1 + 260) = v22 & 0xFFFFDFFF;
        }
        goto LABEL_39;
      }
LABEL_41:
      if ( (*((_DWORD *)a1 + 260) & 0x2000) != 0 )
      {
        if ( *(_DWORD *)(v7 + 112) == -1 )
          v4 = 2;
        goto LABEL_46;
      }
      if ( ++*(_DWORD *)(v7 + 112) <= 0xFu )
        goto LABEL_46;
LABEL_39:
      v4 = 1;
      goto LABEL_46;
    }
    if ( *(_WORD *)(NextRecord + 12) != 0xF0F0 )
      NextRecord = 0i64;
  }
  else
  {
    NextRecord = RR_FindNextRecordEx(a2, 0, 0x2Bu, 0i64, 0, 0);
  }
  if ( !NextRecord )
    goto LABEL_40;
  if ( *(_WORD *)(NextRecord + 12) == 0xF0F0 || *(char *)(NextRecord + 10) < 0 )
  {
    v21 = (*(_DWORD *)(NextRecord + 28) & 3) == 2;
    goto LABEL_36;
  }
  v9 = v7 + 168;
  if ( *(_QWORD *)(v7 + 192) )
    v9 = v7 + 192;
  if ( !v9 )
    goto LABEL_41;
  DnsOls_RefreshDnsKeyPairObject((WCHAR *)a1, (struct _dnsskd *)v7, (struct _dnsskdkey *)v9, 0);
  v10 = *(DnsSign::CDnsKeyPair **)(v9 + 8);
  if ( !v10 )
    goto LABEL_41;
  DnskeyRecordFromKeyPair = DnsOls_GetDnskeyRecordFromKeyPair(v10, 0, 0i64);
  v12 = DnskeyRecordFromKeyPair;
  if ( !DnskeyRecordFromKeyPair )
    goto LABEL_41;
  if ( *((_WORD *)DnskeyRecordFromKeyPair + 6) == 48 && (v13 = *((_WORD *)DnskeyRecordFromKeyPair + 7), v13 > 4u) )
    v14 = RR_CalculateDnsKeyTagEx((unsigned __int8 *)DnskeyRecordFromKeyPair + 56, v13);
  else
    v14 = 0;
  v15 = ntohs(v14);
  v16 = v15;
  LOWORD(v26) = v15;
  while ( *(_WORD *)(NextRecord + 12) == 43 )
  {
    if ( (*(_DWORD *)(NextRecord + 28) & 3) != 2 )
    {
      v17 = *((_DWORD *)a1 + 260);
      if ( (v17 & 0x2000) == 0 )
      {
        v27 = 1;
        *((_DWORD *)a1 + 260) = v17 | 0x2000;
      }
      if ( *(_WORD *)(NextRecord + 56) == (_WORD)v16 )
      {
        LOBYTE(v16) = *(_BYTE *)(NextRecord + 59);
        DsFromDnskey = DnsSign::GenerateDsFromDnskey(
                         v12,
                         (struct _Dbase_Record *)v16,
                         *((unsigned __int8 **)a1 + 4),
                         (const struct _CountName *)*(unsigned int *)(NextRecord + 20));
        v19 = (__int64)DsFromDnskey;
        if ( !DsFromDnskey )
          break;
        if ( (unsigned int)RR_Compare(NextRecord, (__int64)DsFromDnskey, 0i64) )
        {
          if ( *(_QWORD *)(a2 + 56) )
            v20 = ntohl(*(_DWORD *)(NextRecord + 20));
          else
            v20 = *(_DWORD *)(NextRecord + 20) - *(_DWORD *)(NextRecord + 16);
          v4 = 2;
          *v28 = v20;
          RR_Free(v19);
          break;
        }
        RR_Free(v19);
        v16 = (unsigned __int16)v26;
      }
    }
    NextRecord = *(_QWORD *)NextRecord;
    if ( !NextRecord )
      break;
  }
  RR_Free((__int64)v12);
  v5 = v27;
  if ( v4 != 2 )
    goto LABEL_41;
LABEL_46:
  if ( v5 )
  {
    v23 = (*((_DWORD *)a1 + 260) >> 13) & 1;
    if ( (*((_BYTE *)a1 + 388) & 1) != 0 )
    {
      v25[0] = 0x80000;
      v25[3] = 0;
      v25[2] = v23;
      Ds_ZoneWriteProperty(0, (__int64)a1, (CHAR *)"ParentHasSecureDelegation", v25, 0);
    }
    else
    {
      LODWORD(v28) = (*((_DWORD *)a1 + 260) >> 13) & 1;
      Reg_SetValue(0, 0i64, (__int64)a1, "ParentHasSecureDelegation", 4u, (BYTE *)&v28, 4u);
    }
  }
  v26 = -1;
  releaseRead(DbaseLock, &v26, 1);
  return v4;
}
// 1401EC5E8: using guessed type __int64 DbaseLock;
