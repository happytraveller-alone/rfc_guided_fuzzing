Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 1294
// Total lines: 186

//----- (00000001400A5F6C) ----------------------------------------------------
__int64 __fastcall InitializeRRL(struct _DnsRRLParams_ *a1, int a2)
{
  int LastError; // eax
  unsigned int v5; // ebx
  __int64 *v6; // rcx
  unsigned __int16 v7; // dx
  int v8; // r8d
  DWORD v9; // eax
  int v10; // eax
  int RRLParams; // eax
  struct _DnsRRLParams_ *v12; // rdi
  const char *v13; // rax
  const char *v14; // rcx
  __int64 v15; // rdx
  const char *v16; // rax
  int v17; // ecx
  int v18; // eax
  struct _DnsRRLParams_ *v20; // [rsp+90h] [rbp+18h] BYREF

  hDnsInitRRLEvent = CreateEventW(0i64, 1, 0, 0i64);
  if ( !hDnsInitRRLEvent )
  {
    LastError = GetLastError();
    v5 = LastError;
    v6 = (__int64 *)WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      v7 = 95;
LABEL_6:
      WPP_SF_D(v6[7], v7, (__int64)&WPP_44543417c05739f4a9c82c388f6d5836_Traceguids, LastError);
      goto LABEL_28;
    }
    goto LABEL_28;
  }
  v8 = dword_1401B99E8 + 1;
  if ( dword_1401B99E8 == -1 )
    v8 = g_ProcessorCount + 1;
  LastError = DnsRRL_Initialize(a1, a2, v8);
  v5 = LastError;
  if ( LastError )
  {
    v6 = (__int64 *)WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      v7 = 96;
      goto LABEL_6;
    }
LABEL_28:
    if ( v5 )
    {
LABEL_29:
      DisableRRL();
      if ( (Microsoft_Windows_DNS_Server_ServiceEnableBits & 4) != 0 )
        Template_s(Microsoft_Windows_DNS_Server_ServiceHandle, &DNS_EVENT_RRL_PARAMS_LOAD_FAILURE, Str);
      goto LABEL_51;
    }
    goto LABEL_31;
  }
  if ( !Thread_Create("RRL", (__int64 (__fastcall *)(__int64))DnsRRL_Thread, 0i64, 0) )
  {
    LastError = GetLastError();
    v5 = LastError;
    v6 = (__int64 *)WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      v7 = 97;
      goto LABEL_6;
    }
    goto LABEL_28;
  }
  v9 = WaitForSingleObject(hDnsInitRRLEvent, 0xEA60u);
  if ( v9 )
  {
    if ( v9 != 258 )
    {
      v10 = GetLastError();
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        WPP_SF_D(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x62u,
          (__int64)&WPP_44543417c05739f4a9c82c388f6d5836_Traceguids,
          v10);
      }
    }
    v5 = 9911;
    goto LABEL_29;
  }
  if ( !gDnsRRLInitStatus )
  {
    v5 = 9911;
    goto LABEL_28;
  }
LABEL_31:
  if ( a2 == 1 )
  {
    v20 = 0i64;
    RRLParams = CDnsRRLParameters::GetRRLParams((CDnsRRLParameters *)v6, &v20);
    if ( RRLParams )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        WPP_SF_D(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x63u,
          (__int64)&WPP_44543417c05739f4a9c82c388f6d5836_Traceguids,
          RRLParams);
      }
    }
    else
    {
      v12 = v20;
      v13 = "LogOnly";
      v14 = "Enabled";
      v15 = *((unsigned int *)v20 + 8);
      if ( (_DWORD)v15 )
        v13 = 0i64;
      if ( (_DWORD)v15 != 1 )
        v14 = v13;
      v16 = "Disabled";
      if ( (_DWORD)v15 != 2 )
        v16 = v14;
      if ( (dword_1401B9104 & 0x2000) != 0 )
        Template_sqqqqqqqqs(
          (__int64)v14,
          v15,
          Str,
          *(_DWORD *)v20,
          *((_DWORD *)v20 + 1),
          *((_DWORD *)v20 + 2),
          *((_DWORD *)v20 + 3),
          *((_DWORD *)v20 + 5),
          *((_DWORD *)v20 + 4),
          *((_DWORD *)v20 + 6),
          *((_DWORD *)v20 + 7),
          v16);
      if ( g_isRegisteredForUTC == 1 )
      {
        dword_1401B95C8 = *((_DWORD *)v12 + 2);
        dword_1401B95CC = *((_DWORD *)v12 + 3);
        v17 = *((_DWORD *)v12 + 8);
        if ( v17 )
        {
          if ( v17 == 1 )
            qword_1401B95D0 = 0x100000000i64;
        }
        else
        {
          qword_1401B95D0 = 1i64;
        }
      }
      MIDL_user_free(v12);
    }
  }
LABEL_51:
  if ( !CloseHandle(hDnsInitRRLEvent)
    && WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
  {
    v18 = GetLastError();
    WPP_SF_D(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x64u, (__int64)&WPP_44543417c05739f4a9c82c388f6d5836_Traceguids, v18);
  }
  return v5;
}
// 1400A6140: variable 'v6' is possibly undefined
// 140186FA0: using guessed type EVENT_DESCRIPTOR DNS_EVENT_RRL_PARAMS_LOAD_FAILURE;
// 1401B9104: using guessed type int dword_1401B9104;
// 1401B9140: using guessed type int Microsoft_Windows_DNS_Server_ServiceEnableBits;
// 1401B9190: using guessed type int g_isRegisteredForUTC;
// 1401B9254: using guessed type int gDnsRRLInitStatus;
// 1401B95C8: using guessed type int dword_1401B95C8;
// 1401B95CC: using guessed type int dword_1401B95CC;
// 1401B95D0: using guessed type __int64 qword_1401B95D0;
// 1401B99E8: using guessed type int dword_1401B99E8;
