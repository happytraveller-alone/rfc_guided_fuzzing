Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 1620
// Total lines: 599

//----- (00000001400CC790) ----------------------------------------------------
void __fastcall Xfr_TransferZone(struct _DNS_MSGINFO *a1)
{
  __int16 v1; // di
  int matched; // eax
  int v4; // r15d
  CDnsClientSubnetRecordsTrie *v5; // rcx
  unsigned __int16 v6; // dx
  unsigned __int16 v7; // dx
  char v8; // r8
  __int64 v9; // rax
  __int64 v10; // rsi
  int v11; // eax
  const WCHAR *v12; // r8
  const WCHAR *v13; // rdx
  __int64 v14; // r8
  int v15; // eax
  unsigned __int16 v16; // cx
  __int64 v17; // rdx
  __int64 v18; // r8
  int v19; // r9d
  __int16 v20; // ax
  int v21; // eax
  int v22; // eax
  struct in_addr *v23; // rdx
  int v24; // eax
  __int64 v25; // rax
  __int64 v26; // rax
  __int64 v27; // rdx
  __int64 v28; // r8
  int v29; // r9d
  unsigned int *v30; // rcx
  __int128 v31; // xmm1
  __int128 v32; // xmm0
  __int128 v33; // xmm1
  __int64 v34; // rdx
  const char *v35; // rax
  const char *v36; // rax
  __int64 v37; // rdx
  unsigned int v38; // r8d
  __int64 v39; // rdx
  unsigned int v40; // r8d
  const char *v41; // rax
  __int64 v42; // [rsp+28h] [rbp-E0h]
  __int64 v43; // [rsp+28h] [rbp-E0h]
  int v44; // [rsp+48h] [rbp-C0h]
  __int16 v45; // [rsp+4Ch] [rbp-BCh] BYREF
  __int64 v46; // [rsp+50h] [rbp-B8h]
  __int64 v47; // [rsp+58h] [rbp-B0h] BYREF
  __int64 v48; // [rsp+60h] [rbp-A8h] BYREF
  __int64 *v49; // [rsp+68h] [rbp-A0h]
  unsigned __int16 *v50; // [rsp+70h] [rbp-98h] BYREF
  unsigned __int16 *v51[2]; // [rsp+78h] [rbp-90h] BYREF
  __int128 v52; // [rsp+88h] [rbp-80h] BYREF
  __int128 v53; // [rsp+98h] [rbp-70h] BYREF
  __int128 v54[4]; // [rsp+A8h] [rbp-60h] BYREF
  wchar_t String1[256]; // [rsp+E8h] [rbp-20h] BYREF
  int v56; // [rsp+2E8h] [rbp+1E0h]
  wchar_t v57[256]; // [rsp+2F8h] [rbp+1F0h] BYREF
  int v58; // [rsp+4F8h] [rbp+3F0h]

  HIBYTE(v1) = 0;
  LODWORD(v46) = 0;
  _InterlockedAdd(&dword_1401C800C, 1u);
  _InterlockedAdd((volatile signed __int32 *)pcZoneTransferRequestReceived, 1u);
  if ( !dword_1401B9934 || !dword_1401B9938 )
  {
    v4 = v46;
    goto LABEL_22;
  }
  memset_0(String1, 0, 0x204ui64);
  matched = MatchPolicy(a1, 0i64, *((_QWORD *)a1 + 175), 1u, 1, String1, 0i64);
  v4 = matched;
  if ( matched )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      LODWORD(v42) = matched;
      WPP_SF_qd(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x21u,
        (__int64)&WPP_4e7c1fc42723374814672f05b7ca7028_Traceguids,
        a1,
        v42);
    }
    goto LABEL_20;
  }
  if ( !v56 )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_q(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x22u,
        (__int64)&WPP_4e7c1fc42723374814672f05b7ca7028_Traceguids,
        a1);
    }
LABEL_20:
    v7 = 2;
    v8 = 1;
    goto LABEL_173;
  }
  if ( v56 == 2 )
  {
    v5 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
    {
      goto LABEL_11;
    }
    v6 = 35;
LABEL_10:
    WPP_SF_q(*((_QWORD *)v5 + 7), v6, (__int64)&WPP_4e7c1fc42723374814672f05b7ca7028_Traceguids, a1);
LABEL_11:
    Etw_LogIncomingPacket(0x103u, (__int64)a1, 0i64, 0);
    Packet_Free((__int64)a1);
    return;
  }
LABEL_22:
  v9 = Lookup_ZoneForPacketName((unsigned __int8 *)a1 + 6316, (__int64)a1);
  v10 = v9;
  if ( !dword_1401B9934 )
    goto LABEL_41;
  if ( !v9 )
    goto LABEL_59;
  if ( !*(_DWORD *)(v9 + 304) )
  {
LABEL_41:
    if ( !v10 )
      goto LABEL_59;
    if ( (*((_BYTE *)a1 + 592) & 4) == 0 || (v12 = (const WCHAR *)((char *)a1 + 608), !*((_WORD *)a1 + 304)) )
    {
LABEL_57:
      if ( v10 )
      {
        *((_DWORD *)a1 + 1572) |= 0x280u;
        *((_QWORD *)a1 + 460) = v10;
      }
LABEL_59:
      v16 = 270;
      if ( *((_WORD *)a1 + 240) != 252 )
        v16 = 266;
      Etw_LogIncomingPacket(v16, (__int64)a1, 0i64, 0);
      if ( !v10 )
      {
        v51[0] = (unsigned __int16 *)((char *)a1 + 64);
        v51[1] = *((unsigned __int16 **)a1 + 175);
        v45 = 1541;
        v52 = DNS_EVENT_BAD_ZONE_TRANSFER_REQUEST;
        Eventlog_LogEvent((__int64)&v52, v17, 2u, v51, (unsigned __int8 *)&v45, 0, 0, 0i64);
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x40) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          WPP_SF_q(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x2Au,
            (__int64)&WPP_4e7c1fc42723374814672f05b7ca7028_Traceguids,
            a1);
        }
        v20 = 3;
        if ( (_DWORD)v46 )
        {
          LOBYTE(v1) = v4 != 9952;
          v20 = v1 + 1;
        }
        _InterlockedIncrement(&dword_1401C8010);
        v7 = v20;
        goto LABEL_172;
      }
      *((_QWORD *)a1 + 26) = v10;
      if ( (*(_DWORD *)(v10 + 396) & 0x2000) != 0 )
      {
        _InterlockedIncrement(&dword_1401C8024);
LABEL_171:
        _InterlockedIncrement(&dword_1401C801C);
        v7 = 5;
        goto LABEL_172;
      }
      v21 = *(_DWORD *)(v10 + 388);
      if ( (v21 & 2) != 0 )
      {
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x40) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          WPP_SF_s(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x2Bu,
            (__int64)&WPP_4e7c1fc42723374814672f05b7ca7028_Traceguids,
            *(const char **)(v10 + 16));
        }
        _InterlockedIncrement(&dword_1401C8028);
        goto LABEL_171;
      }
      if ( ((v21 & 1) != 0 && (dword_1401B9750 || g_fDsReadOnlyDcMode) || (*(_BYTE *)(v10 + 1160) & 0x40) != 0)
        && !dword_1401B98D0 )
      {
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x40) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          WPP_SF_s(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x2Cu,
            (__int64)&WPP_4e7c1fc42723374814672f05b7ca7028_Traceguids,
            *(const char **)(v10 + 16));
        }
        _InterlockedIncrement(&dword_1401C8038);
        goto LABEL_171;
      }
      if ( (unsigned int)(*(_DWORD *)(v10 + 372) - 3) <= 1 )
      {
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x40) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          WPP_SF_s(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x2Du,
            (__int64)&WPP_4e7c1fc42723374814672f05b7ca7028_Traceguids,
            *(const char **)(v10 + 16));
        }
        _InterlockedIncrement(&dword_1401C8034);
        goto LABEL_171;
      }
      v22 = *(_DWORD *)(v10 + 380);
      if ( v22 )
      {
        if ( v22 == 3
          || ((v23 = (struct in_addr *)((char *)a1 + 64), v22 != 1)
            ? (v24 = DnsAddrArray_ContainsAddr(*(_QWORD *)(v10 + 552), v23, 3))
            : (v24 = checkIfIpIsZoneNameServer(v10, v23, v18, v19)),
              !v24) )
        {
          _InterlockedIncrement(&dword_1401C8020);
          goto LABEL_171;
        }
      }
      v25 = *(_QWORD *)(v10 + 328);
      if ( *(_BYTE *)(v25 + 385) == 1 )
      {
        v26 = *(_QWORD *)(v10 + 552);
        if ( !v26 )
        {
          if ( (*(_DWORD *)(v10 + 396) & 0x800) != 0 || !*(_QWORD *)(v10 + 560) )
            buildZoneNsList(v10, v17, v18, v19);
          v26 = *(_QWORD *)(v10 + 560);
        }
      }
      else if ( *(_BYTE *)(v10 + 385) == 2 )
      {
        v26 = *(_QWORD *)(v25 + 544);
      }
      else
      {
        v26 = 0i64;
      }
      if ( *(_QWORD *)(v10 + 192)
        && *(_BYTE *)(v10 + 385) == 2
        && (unsigned int)DnsAddrArray_ContainsAddr(v26, (_WORD *)a1 + 32, 3) )
      {
        if ( !*(_QWORD *)(v10 + 544) )
          *(_QWORD *)(v10 + 544) = DnsAddrArray_Create(0xAu, v27, v28, v29);
        v30 = *(unsigned int **)(v10 + 544);
        v31 = *((_OWORD *)a1 + 5);
        v54[0] = *((_OWORD *)a1 + 4);
        v32 = *((_OWORD *)a1 + 6);
        WORD1(v54[0]) = 13568;
        v54[1] = v31;
        v33 = *((_OWORD *)a1 + 7);
        v54[2] = v32;
        v54[3] = v33;
        if ( !(unsigned int)DnsAddrArray_AddAddr(v30, (__int64)v54, v28, 3)
          && WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x40) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          WPP_SF_Ss(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x2Eu,
            (__int64)&WPP_4e7c1fc42723374814672f05b7ca7028_Traceguids,
            *(const unsigned __int16 **)(v10 + 192),
            *(_QWORD *)(v10 + 16));
        }
      }
      if ( *((_WORD *)a1 + 240) == 252 )
      {
        _InterlockedAdd(&dword_1401C8040, 1u);
        _InterlockedAdd((volatile signed __int32 *)pcAxfrRequestReceived, 1u);
        Stat_IncrementZoneTransferStats(*((_QWORD *)a1 + 26), 252, 0);
        if ( !*((_BYTE *)a1 + 1413) )
        {
          v50 = (unsigned __int16 *)((char *)a1 + 64);
          v53 = DNS_EVENT_UDP_ZONE_TRANSFER;
          Eventlog_LogEvent((__int64)&v53, v34, 1u, &v50, (unsigned __int8 *)5, 0, 0, 0i64);
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x40) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            v35 = DnsAddr_Ntoa((struct in_addr *)a1 + 16);
            WPP_SF_s(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x2Fu,
              (__int64)&WPP_4e7c1fc42723374814672f05b7ca7028_Traceguids,
              v35);
          }
          goto LABEL_130;
        }
        if ( (*(_BYTE *)(v10 + 392) & 3) != 0 && *(_DWORD *)(v10 + 372) == 1 )
        {
          LODWORD(v46) = *(_DWORD *)(v10 + 568);
          if ( dword_1401B9714 < (unsigned int)v46 )
          {
            if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x40) != 0
              && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
            {
              v36 = DnsAddr_Ntoa((struct in_addr *)a1 + 16);
              WPP_SF_Ssd(
                *((_QWORD *)WPP_GLOBAL_Control + 7),
                0x30u,
                (__int64)&WPP_4e7c1fc42723374814672f05b7ca7028_Traceguids,
                *(const unsigned __int16 **)(v10 + 24),
                (__int64)v36);
            }
            _InterlockedIncrement(&dword_1401C8018);
            goto LABEL_171;
          }
        }
        if ( *((unsigned __int16 *)a1 + 3151) - 2 == (unsigned __int16)(*((_WORD *)a1 + 16) - (_WORD)a1 - 6304)
          && **((_WORD **)a1 + 4) == 21325
          || *(_QWORD *)(v10 + 192) )
        {
          *(_WORD *)((char *)a1 + 1329) = 256;
        }
        else
        {
          *((_BYTE *)a1 + 1329) = byte_1401B98B8;
          *((_BYTE *)a1 + 1330) = 0;
        }
      }
      else if ( (unsigned int)parseIxfrClientRequest((__int64)a1) )
      {
LABEL_130:
        _InterlockedAdd(&dword_1401C8014, 1u);
        v7 = 1;
LABEL_172:
        v8 = 0;
        goto LABEL_173;
      }
      if ( (unsigned int)Zone_LockForReadEx(v10, 0, 0x32u) )
      {
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x40) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
        {
          WPP_SF_S(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x31u,
            (__int64)&WPP_4e7c1fc42723374814672f05b7ca7028_Traceguids,
            *(const unsigned __int16 **)(v10 + 24));
        }
        _InterlockedIncrement(&dword_1401C802C);
      }
      else
      {
        *((_BYTE *)a1 + 6306) |= 0x80u;
        *((_QWORD *)a1 + 57) = *(_QWORD *)(v10 + 40);
        Name_SaveCompressionWithNode((__int64)a1, (unsigned __int64)a1 + 6316, *(_QWORD *)(v10 + 40));
        *(_DWORD *)((char *)a1 + 6310) = 0;
        *((_BYTE *)a1 + 1454) = 1;
        *(_WORD *)((char *)a1 + 1415) = 1;
        *((_WORD *)a1 + 3157) = 0;
        if ( !*((_BYTE *)a1 + 1413) )
        {
          _InterlockedAdd(&dword_1401C8064, 1u);
          sendIxfrResponse((__int64)a1);
          Zone_UnlockAfterReadEx(v10, 0);
          Packet_FreeUdpMessage((__int64)a1);
          return;
        }
        if ( (unsigned int)Zone_TransferReadLockEx(v10, v37, v38) )
        {
          Zone_UnlockAfterReadEx(v10, 0);
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x40) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
          {
            WPP_SF_S(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x32u,
              (__int64)&WPP_4e7c1fc42723374814672f05b7ca7028_Traceguids,
              *(const unsigned __int16 **)(v10 + 24));
          }
        }
        else
        {
          if ( Thread_Create(
                 "Zone Transfer Send",
                 (__int64 (__fastcall *)(__int64))zoneTransferSendThread,
                 (__int64)a1,
                 0) )
          {
            return;
          }
          if ( !(unsigned int)Zone_AssumeReadLockEx(v10, v39, v40) )
            Zone_UnlockAfterReadEx(v10, 0);
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x40) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            v41 = DnsAddr_Ntoa((struct in_addr *)a1 + 16);
            WPP_SF_Ss(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x33u,
              (__int64)&WPP_4e7c1fc42723374814672f05b7ca7028_Traceguids,
              *(const unsigned __int16 **)(v10 + 24),
              (__int64)v41);
          }
        }
        _InterlockedIncrement(&dword_1401C8030);
      }
      goto LABEL_171;
    }
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_SSdq(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x27u,
        (__int64)&WPP_4e7c1fc42723374814672f05b7ca7028_Traceguids,
        (const unsigned __int16 *)a1 + 304,
        *(_QWORD *)(v10 + 24));
      v12 = (const WCHAR *)((char *)a1 + 608);
    }
    v13 = *(const WCHAR **)(v10 + 24);
    v49 = (__int64 *)(v10 + 24);
    if ( (unsigned int)wcsicmp_ThatWorks(v12, v13) )
    {
      v15 = LookUp_ScopeMap(
              *(_QWORD *)(v10 + 160),
              *(_QWORD *)(v10 + 168),
              v14,
              0xFFFFFFFF,
              (const unsigned __int16 *)a1 + 304,
              &v47);
      v10 = v47;
      v44 = v15;
      if ( v15 )
        goto LABEL_69;
    }
    else
    {
      v47 = v10;
      v44 = 0;
    }
    if ( v10 )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
      {
        WPP_SF_SS(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x29u,
          (__int64)&WPP_4e7c1fc42723374814672f05b7ca7028_Traceguids,
          *(const unsigned __int16 **)(v10 + 192),
          *(_QWORD *)(v10 + 24));
      }
      v4 = v44;
      goto LABEL_57;
    }
LABEL_69:
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) == 0 )
    {
      v4 = v44;
    }
    else
    {
      v4 = v44;
      if ( *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
        WPP_SF_dqSS(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x28u,
          (__int64)&WPP_4e7c1fc42723374814672f05b7ca7028_Traceguids,
          v44,
          v10,
          (__int64)a1 + 608,
          *v49);
    }
    LODWORD(v46) = 1;
    if ( !v4 )
      v4 = 9952;
    if ( v4 == 9952 )
      *((_DWORD *)a1 + 1572) |= 0x20u;
    v10 = 0i64;
    goto LABEL_57;
  }
  v48 = 0i64;
  memset_0(v57, 0, 0x204ui64);
  v11 = MatchPolicy(a1, (__int64 *)v10, *((_QWORD *)a1 + 175), 2u, 1, v57, (__int64 **)&v48);
  v4 = v11;
  if ( v11 )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      LODWORD(v43) = v11;
      WPP_SF_qd(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x24u,
        (__int64)&WPP_4e7c1fc42723374814672f05b7ca7028_Traceguids,
        a1,
        v43);
    }
  }
  else
  {
    if ( v58 )
    {
      if ( v58 == 2 )
      {
        v5 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) == 0
          || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
        {
          goto LABEL_11;
        }
        v6 = 38;
        goto LABEL_10;
      }
      goto LABEL_41;
    }
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_q(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x25u,
        (__int64)&WPP_4e7c1fc42723374814672f05b7ca7028_Traceguids,
        a1);
    }
  }
  v7 = 2;
  v8 = 1;
LABEL_173:
  Reject_RequestIntact((__int64)a1, v7, v8);
}
// 1400CC92F: variable 'v42' is possibly undefined
// 1400CCAAF: variable 'v43' is possibly undefined
// 1400CCB85: variable 'v14' is possibly undefined
// 1400CCC6F: variable 'v17' is possibly undefined
// 1400CCE48: variable 'v18' is possibly undefined
// 1400CCE48: variable 'v19' is possibly undefined
// 1400CCEFB: variable 'v27' is possibly undefined
// 1400CCEFB: variable 'v28' is possibly undefined
// 1400CCEFB: variable 'v29' is possibly undefined
// 1400CCFFF: variable 'v34' is possibly undefined
// 1400CD1F8: variable 'v37' is possibly undefined
// 1400CD1F8: variable 'v38' is possibly undefined
// 1400CD269: variable 'v39' is possibly undefined
// 1400CD269: variable 'v40' is possibly undefined
// 140186168: using guessed type __int128 DNS_EVENT_UDP_ZONE_TRANSFER;
// 140187AA8: using guessed type __int128 DNS_EVENT_BAD_ZONE_TRANSFER_REQUEST;
// 1401B8C94: using guessed type int g_fDsReadOnlyDcMode;
// 1401B9714: using guessed type int dword_1401B9714;
// 1401B9750: using guessed type int dword_1401B9750;
// 1401B98B8: using guessed type char byte_1401B98B8;
// 1401B98D0: using guessed type int dword_1401B98D0;
// 1401B9934: using guessed type int dword_1401B9934;
// 1401B9938: using guessed type int dword_1401B9938;
// 1401B99B0: using guessed type int dword_1401B99B0;
// 1401C800C: using guessed type int dword_1401C800C;
// 1401C8010: using guessed type int dword_1401C8010;
// 1401C8014: using guessed type int dword_1401C8014;
// 1401C8018: using guessed type int dword_1401C8018;
// 1401C801C: using guessed type int dword_1401C801C;
// 1401C8020: using guessed type int dword_1401C8020;
// 1401C8024: using guessed type int dword_1401C8024;
// 1401C8028: using guessed type int dword_1401C8028;
// 1401C802C: using guessed type int dword_1401C802C;
// 1401C8030: using guessed type int dword_1401C8030;
// 1401C8034: using guessed type int dword_1401C8034;
// 1401C8038: using guessed type int dword_1401C8038;
// 1401C8040: using guessed type int dword_1401C8040;
// 1401C8064: using guessed type int dword_1401C8064;
// 1401C8558: using guessed type __int64 pcZoneTransferRequestReceived;
// 1401C8570: using guessed type __int64 pcAxfrRequestReceived;
