Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 2305
// Total lines: 137

//----- (000000014011D720) ----------------------------------------------------
STRSAFE_LPSTR __fastcall WksFileWrite(__int64 a1, char *a2, __int64 a3)
{
  struct servent *v5; // r12
  char *v6; // rbx
  struct protoent *v7; // rax
  __int64 v8; // rdx
  const char **p_p_name; // r13
  __int64 v10; // rdx
  int v11; // r14d
  u_short v12; // bp
  int v13; // r15d
  u_short v14; // ax
  STRSAFE_LPSTR v15; // rax
  __int64 v17; // [rsp+20h] [rbp-58h]
  __int64 v18; // [rsp+20h] [rbp-58h]
  int v19; // [rsp+28h] [rbp-50h]
  __int64 v20; // [rsp+28h] [rbp-50h]
  __int128 v21; // [rsp+40h] [rbp-38h] BYREF
  struct servent *v22; // [rsp+80h] [rbp+8h]

  v22 = 0i64;
  v5 = 0i64;
  v6 = sprintfSafeA(
         a2,
         a3 - (_QWORD)a2,
         "%d.%d.%d.%d\t",
         *(unsigned __int8 *)(a1 + 56),
         *(unsigned __int8 *)(a1 + 57),
         *(unsigned __int8 *)(a1 + 58),
         *(unsigned __int8 *)(a1 + 59));
  if ( !v6 )
    return v6;
  v7 = getprotobynumber(*(unsigned __int8 *)(a1 + 60));
  p_p_name = (const char **)&v7->p_name;
  if ( v7 )
  {
    v6 = sprintfSafeA(v6, a3 - (_QWORD)v6, "%s (", v7->p_name);
    if ( !v6 )
      return v6;
  }
  else
  {
    v19 = *(unsigned __int8 *)(a1 + 60);
    v21 = DNS_EVENT_UNKNOWN_PROTOCOL_NUMBER;
    Eventlog_LogEvent((__int64)&v21, v8, 0, 0i64, 0i64, v19, 0, 0i64);
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 0x20) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 25) >= 4u )
    {
      WPP_SF_D(
        *((_QWORD *)WPP_GLOBAL_Control + 2),
        0xAu,
        (__int64)&WPP_ab615269c76f3f4d2c78c36a7027be85_Traceguids,
        *(unsigned __int8 *)(a1 + 60));
    }
    LODWORD(v17) = *(unsigned __int8 *)(a1 + 60);
    v6 = sprintfSafeA(
           v6,
           a3 - (_QWORD)v6,
           "%u (\t; ERROR:  unknown protocol %u\r\n",
           *(unsigned __int8 *)(a1 + 60),
           v17);
    if ( !v6 )
      return v6;
    v22 = 0i64;
  }
  v11 = 0;
  if ( *(unsigned __int16 *)(a1 + 14) - 5 <= 0 )
    return sprintfSafeA(v6, a3 - (_QWORD)v6, " )\r\n");
  while ( 1 )
  {
    v12 = 8 * v11;
    v13 = *(unsigned __int8 *)(v11 + a1 + 61);
    if ( *(_BYTE *)(v11 + a1 + 61) )
      break;
LABEL_25:
    v5 = v22;
    if ( ++v11 >= *(unsigned __int16 *)(a1 + 14) - 5 )
      return sprintfSafeA(v6, a3 - (_QWORD)v6, " )\r\n");
  }
  while ( 1 )
  {
    if ( (v13 & 0x80u) != 0 )
    {
      if ( p_p_name )
      {
        v14 = htons(v12);
        v5 = getservbyport(v14, *p_p_name);
        v22 = v5;
      }
      if ( v5 )
      {
        v15 = sprintfSafeA(v6, a3 - (_QWORD)v6, "\r\n%s\t\t%s", "                        ", v5->s_name);
      }
      else
      {
        v21 = DNS_EVENT_UNKNOWN_SERVICE_PORT;
        Eventlog_LogEvent((__int64)&v21, v10, 0, 0i64, 0i64, v12, 0, 0i64);
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 0x20) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 25) >= 4u )
        {
          WPP_SF_D(
            *((_QWORD *)WPP_GLOBAL_Control + 2),
            0xBu,
            (__int64)&WPP_ab615269c76f3f4d2c78c36a7027be85_Traceguids,
            v12);
        }
        LODWORD(v20) = v12;
        LODWORD(v18) = v12;
        v15 = sprintfSafeA(
                v6,
                a3 - (_QWORD)v6,
                "\r\n%s\t\t%u\t; ERROR:  unknown service for port %u\r\n",
                "                        ",
                v18,
                v20);
      }
      v6 = v15;
      if ( !v15 )
        return v6;
    }
    v5 = v22;
    ++v12;
    v13 *= 2;
    if ( !v13 )
      goto LABEL_25;
  }
}
// 14011D804: variable 'v8' is possibly undefined
// 14011D855: variable 'v17' is possibly undefined
// 14011D92D: variable 'v10' is possibly undefined
// 14011D98A: variable 'v18' is possibly undefined
// 14011D98A: variable 'v20' is possibly undefined
// 1401869C8: using guessed type __int128 DNS_EVENT_UNKNOWN_PROTOCOL_NUMBER;
// 140187080: using guessed type __int128 DNS_EVENT_UNKNOWN_SERVICE_PORT;
