Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 2093
// Total lines: 277

//----- (0000000140107E94) ----------------------------------------------------
__int64 __fastcall DnsOls_SignUpdate(
        struct _zone_info *a1,
        struct _DnsUpdate *a2,
        struct _DnsUpdateList *a3,
        struct CNodeTypePairCollection *a4)
{
  unsigned int AppendUpdate; // r15d
  __int64 v7; // rdi
  unsigned __int16 v8; // r14
  unsigned __int16 v9; // r12
  char v10; // r13
  CDnsClientSubnetRecordsTrie *v11; // rcx
  __int64 v12; // rax
  char *v13; // rax
  __int64 v14; // rdx
  bool v15; // bp
  const char *v16; // rbx
  char *v17; // rax
  const char *v18; // r9
  char *v19; // rax
  unsigned __int16 *v20; // r12
  CNodeTypePairCollection *v21; // r14
  char v22; // al
  unsigned int v23; // eax
  __int64 *v24; // rdx
  unsigned __int16 v25; // r8
  char *v26; // rax
  unsigned __int16 v27; // r8
  struct _DnsTreeNode *v28; // rbx
  char *v29; // rax
  char *v30; // rax
  const char *v31; // r8
  struct _DnsTreeNode *v33; // [rsp+80h] [rbp+8h] BYREF
  struct _DnsUpdateList *v34; // [rsp+90h] [rbp+18h]
  CNodeTypePairCollection *v35; // [rsp+98h] [rbp+20h]

  v35 = a4;
  v34 = a3;
  AppendUpdate = 0;
  if ( *((_DWORD *)a1 + 93) != 1 || (*((_BYTE *)a1 + 1040) & 4) == 0 )
    goto LABEL_81;
  v7 = *((_QWORD *)a2 + 1);
  v8 = 255;
  v9 = 0;
  v10 = 0;
  v11 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_s(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x4Fu,
      (__int64)&WPP_41961b29e2683d0b96cfd252d798ca95_Traceguids,
      *((const char **)a1 + 2));
    v11 = WPP_GLOBAL_Control;
  }
  if ( *((_WORD *)a2 + 20) || (v12 = *((_QWORD *)a2 + 3)) != 0 )
  {
    if ( !RR_NodeHasRecords(v7, 0) )
    {
      v10 = 1;
      v11 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        v13 = Dbg_NodeName(v7);
        WPP_SF_s(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x50u,
          (__int64)&WPP_41961b29e2683d0b96cfd252d798ca95_Traceguids,
          v13);
        v11 = WPP_GLOBAL_Control;
      }
      goto LABEL_32;
    }
    v12 = *((_QWORD *)a2 + 3);
    v11 = WPP_GLOBAL_Control;
    if ( v12 )
      v9 = *(_WORD *)(v12 + 12);
    else
      v9 = *((_WORD *)a2 + 20);
  }
  v14 = *((_QWORD *)a2 + 2);
  if ( !v14 )
  {
    if ( !v12 )
    {
      v8 = *((_WORD *)a2 + 20);
      goto LABEL_32;
    }
LABEL_26:
    if ( v14 )
    {
      if ( *(_WORD *)(v12 + 12) == *(_WORD *)(v14 + 12) )
        v8 = *(_WORD *)(v14 + 12);
    }
    else
    {
      v8 = *(_WORD *)(v12 + 12);
    }
    goto LABEL_32;
  }
  if ( *(_WORD *)(v14 + 12) != 46 )
  {
    if ( !v12 )
    {
      v8 = *(_WORD *)(v14 + 12);
LABEL_32:
      v15 = (*((_DWORD *)a2 + 9) & 0x8000) != 0;
      if ( !v10 )
      {
LABEL_35:
        if ( ((*((_DWORD *)a1 + 99) >> 5) & 1) != 0 || !v10 )
        {
          if ( v11 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)v11 + 17) & 0x200000) != 0
            && *((_BYTE *)v11 + 65) >= 4u )
          {
            v16 = "NSEC";
            if ( ((*((_DWORD *)a1 + 99) >> 5) & 1) != 0 )
              v16 = "NSEC3";
            v17 = Dbg_NodeName(v7);
            v18 = "zone node";
            if ( (*(_DWORD *)(v7 + 84) & 0x88880000) == -2004353024 )
              v18 = "TNODE";
            WPP_SF_ssss(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x52u,
              (__int64)&WPP_41961b29e2683d0b96cfd252d798ca95_Traceguids,
              v18,
              (__int64)v17,
              (__int64)v16,
              *((_QWORD *)a1 + 2));
          }
          if ( !CNodeTypePairCollection::HasPairBeenSigned(v35, (struct _DnsTreeNode *)v7, v8) )
          {
            if ( v9 )
            {
              v25 = v9;
              v20 = (unsigned __int16 *)v34;
              DnsOls_RemoveRrsigForType(v34, (struct _DnsTreeNode *)v7, v25);
            }
            else
            {
              v20 = (unsigned __int16 *)v34;
            }
            AppendUpdate = DnsOls_SignZone(a1, v7, v8, 0x40u, v20);
            if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
              && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
            {
              v26 = Dbg_NodeName(v7);
              WPP_SF_Ds(
                *((_QWORD *)WPP_GLOBAL_Control + 7),
                0x54u,
                (__int64)&WPP_41961b29e2683d0b96cfd252d798ca95_Traceguids,
                AppendUpdate,
                (__int64)v26);
            }
            v27 = v8;
            v21 = v35;
            CNodeTypePairCollection::SetPairSigned(v35, (struct _DnsTreeNode *)v7, v27);
            v11 = WPP_GLOBAL_Control;
            goto LABEL_51;
          }
          v11 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            v19 = Dbg_NodeName(v7);
            WPP_SF_s(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x53u,
              (__int64)&WPP_41961b29e2683d0b96cfd252d798ca95_Traceguids,
              v19);
            v11 = WPP_GLOBAL_Control;
          }
        }
        v20 = (unsigned __int16 *)v34;
        v21 = v35;
LABEL_51:
        if ( (*((_BYTE *)a1 + 396) & 0x20) == 0 && (v15 || v10) )
        {
          v22 = *(_BYTE *)(v7 + 96);
          if ( v22 != 35 && v22 != 16 )
          {
            v23 = *(_DWORD *)(v7 + 84) & 0x88880000;
            v33 = 0i64;
            if ( v23 == -2004353024 )
              v24 = *(__int64 **)(v7 + 8);
            else
              v24 = (__int64 *)v7;
            NTree_FindBestNSECNode((__int64 **)&v33, (__int64)v24, *v24, 1);
            if ( (*(_DWORD *)(v7 + 84) & 0x88880000) == -2004353024 )
              *(_DWORD *)(*(_QWORD *)(v7 + 8) + 92i64) ^= 0x1000000u;
            v28 = v33;
            if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
              && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
            {
              v29 = Dbg_NodeName((__int64)v33);
              WPP_SF_ss(
                *((_QWORD *)WPP_GLOBAL_Control + 7),
                0x55u,
                (__int64)&WPP_41961b29e2683d0b96cfd252d798ca95_Traceguids,
                v29,
                *((_QWORD *)a1 + 2));
            }
            if ( CNodeTypePairCollection::HasPairBeenSigned(v21, v28, 0x2Fu) )
              DnsOls_CreateAppendUpdate((struct _DnsUpdateList *)v20, v28, 0i64, 47);
            AppendUpdate = DnsOls_SignZone(a1, (__int64)v28, 47i64, 0x40u, v20);
            if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
              && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
            {
              v30 = Dbg_NodeName(v7);
              WPP_SF_Ds(
                *((_QWORD *)WPP_GLOBAL_Control + 7),
                0x56u,
                (__int64)&WPP_41961b29e2683d0b96cfd252d798ca95_Traceguids,
                AppendUpdate,
                (__int64)v30);
            }
            CNodeTypePairCollection::SetPairSigned(v21, v28, 0x2Fu);
            v11 = WPP_GLOBAL_Control;
          }
        }
        goto LABEL_82;
      }
      AppendUpdate = DnsOls_CreateAppendUpdate(v34, (struct _DnsTreeNode *)v7, 0i64, 255);
      if ( !AppendUpdate )
      {
        v11 = WPP_GLOBAL_Control;
        goto LABEL_35;
      }
      goto LABEL_81;
    }
    goto LABEL_26;
  }
  if ( v11 == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
    return AppendUpdate;
  if ( (*((_DWORD *)v11 + 17) & 0x200000) != 0 && *((_BYTE *)v11 + 65) >= 4u )
  {
    WPP_SF_s(
      *((_QWORD *)v11 + 7),
      0x51u,
      (__int64)&WPP_41961b29e2683d0b96cfd252d798ca95_Traceguids,
      *((const char **)a1 + 2));
LABEL_81:
    v11 = WPP_GLOBAL_Control;
  }
LABEL_82:
  if ( v11 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)v11 + 17) & 0x200000) != 0
    && *((_BYTE *)v11 + 65) >= 4u )
  {
    if ( *((_DWORD *)a1 + 93) != 1 || (v31 = "signed", (*((_BYTE *)a1 + 1040) & 4) == 0) )
      v31 = "unsigned";
    WPP_SF_Dss(
      *((_QWORD *)v11 + 7),
      0x57u,
      (__int64)&WPP_41961b29e2683d0b96cfd252d798ca95_Traceguids,
      AppendUpdate,
      (__int64)v31,
      *((_QWORD *)a1 + 2));
  }
  return AppendUpdate;
}
// 140108022: conditional instruction was optimized away because rdx.8!=0
// 140108044: conditional instruction was optimized away because rax.8!=0
// 140108049: conditional instruction was optimized away because rdx.8!=0
// 140108060: conditional instruction was optimized away because rax.8!=0
// 140108065: conditional instruction was optimized away because rdx.8==0
