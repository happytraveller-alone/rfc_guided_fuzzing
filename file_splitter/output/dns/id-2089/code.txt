Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 2089
// Total lines: 227

//----- (0000000140105E40) ----------------------------------------------------
__int64 __fastcall DnsOls_AddNewNsec3(
        struct _zone_info *a1,
        struct _DnsTreeNode *a2,
        __int64 a3,
        struct _Dbase_Record *a4,
        __int64 a5,
        _OWORD *a6,
        __int64 a7,
        __int64 a8,
        struct _DnsUpdateList *a9)
{
  struct _Dbase_Record *v9; // rdi
  __int64 v10; // rsi
  struct _DnsTreeNode *Nsec3Node; // rax
  __int64 v13; // r14
  struct _DnsTreeNode *NextNsec3Node; // rbx
  _QWORD *v15; // rax
  struct _DnsUpdateList *v16; // r12
  unsigned int updated; // ebx
  struct _DnsTreeNode *v18; // rdi
  struct _Dbase_Record *v19; // rax
  __int64 v20; // r12
  struct _DnsUpdateList *v21; // r15
  struct _DnsTreeNode *v22; // rdx
  const void *v23; // rdx
  void *v24; // rbx
  struct _DnsTreeNode *v25; // rdx
  char v26; // cl
  __int64 v27; // r15
  char *v28; // rax
  unsigned __int16 v29; // dx
  char *v30; // rax
  char *v31; // rax
  unsigned __int16 v32; // dx
  char v34[16]; // [rsp+68h] [rbp-49h] BYREF
  struct _DnsTreeNode *v35[2]; // [rsp+78h] [rbp-39h] BYREF
  __int64 v36; // [rsp+88h] [rbp-29h]
  __int64 v37[11]; // [rsp+90h] [rbp-21h] BYREF
  int v39; // [rsp+108h] [rbp+57h] BYREF
  struct _Dbase_Record *v40; // [rsp+110h] [rbp+5Fh]

  v40 = a4;
  v36 = -2i64;
  v9 = a4;
  v10 = a3;
  if ( (*(_DWORD *)(a3 + 84) & 0x88880000) == -2004353024 )
    *(_DWORD *)(*(_QWORD *)(a3 + 8) + 92i64) ^= 0x1000000u;
  *(_DWORD *)(a3 + 92) |= 0x40000u;
  Nsec3Node = DnsOls_FindOrCreateNsec3Node(a1, a2, (struct _DnsTreeNode *)a3, a4, 1);
  v13 = a5;
  while ( 1 )
  {
    v27 = (__int64)Nsec3Node;
    if ( !Nsec3Node )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        v31 = Dbg_NodeName(v10);
        v32 = 30;
LABEL_54:
        WPP_SF_s(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          v32,
          (__int64)&WPP_41961b29e2683d0b96cfd252d798ca95_Traceguids,
          v31);
      }
      goto LABEL_55;
    }
    NextNsec3Node = DnsOls_FindNextNsec3Node(a1, Nsec3Node);
    *(_OWORD *)v35 = *a6;
    v15 = std::vector<unsigned short>::vector<unsigned short>(v37, v13);
    v16 = a9;
    updated = CreateAndUpdateNsec3ForNode(
                (__int64)a1,
                (__int64)a2,
                v10,
                (struct _DnsTreeNode *)v27,
                (__int64)v9,
                (__int64)NextNsec3Node + 102,
                *((_BYTE *)NextNsec3Node + 101),
                (__int64)v15,
                (__int64)v35,
                a9,
                a7,
                a8);
    v39 = updated;
    if ( updated )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        v28 = Dbg_NodeName(v10);
        v29 = 31;
        goto LABEL_49;
      }
      goto LABEL_56;
    }
    v35[0] = 0i64;
    NTree_FindBestNSEC3Node((__int64 *)v35, v27, *(_QWORD *)v27, 1);
    v18 = v35[0];
    if ( !v35[0] )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        v31 = Dbg_NodeName(v10);
        v32 = 32;
        goto LABEL_54;
      }
LABEL_55:
      updated = 13;
      goto LABEL_56;
    }
    v19 = DnsOls_CurrentNsec3RecordForNode(v35[0], v16, &v39);
    v20 = (__int64)v19;
    if ( !v19 )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        v30 = Dbg_NodeName((__int64)v18);
        WPP_SF_s(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x21u,
          (__int64)&WPP_41961b29e2683d0b96cfd252d798ca95_Traceguids,
          v30);
      }
      updated = v39;
      goto LABEL_56;
    }
    v39 = *((unsigned __int8 *)v19 + 61);
    Dns_Base32HexToBinary(
      v27 + 102,
      *(unsigned __int8 *)(v27 + 101),
      (__int64)v19 + *((unsigned __int8 *)v19 + 60) + 62,
      &v39);
    v21 = a9;
    updated = DnsOls_CreateAppendUpdate(a9, v18, 0i64, 46);
    if ( updated )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        v28 = Dbg_NodeName((__int64)v18);
        v29 = 34;
        goto LABEL_49;
      }
      goto LABEL_56;
    }
    updated = DnsOls_SignRecordSet(a7, (__int64)a1, (__int64)v18, v20, 1ui64, a8, v21);
    if ( updated )
      break;
    updated = DnsOls_CreateAppendUpdate(v21, v18, v20, 50);
    if ( updated )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        v28 = Dbg_NodeName((__int64)v18);
        v29 = 36;
LABEL_49:
        WPP_SF_s(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          v29,
          (__int64)&WPP_41961b29e2683d0b96cfd252d798ca95_Traceguids,
          v28);
        goto LABEL_56;
      }
      goto LABEL_56;
    }
    v10 = *(_QWORD *)v10;
    if ( !v10 )
      goto LABEL_56;
    if ( (*(_DWORD *)(v10 + 92) & 0x100) != 0 )
      goto LABEL_56;
    v9 = v40;
    if ( DnsOls_FindOrCreateNsec3Node(a1, v22, (struct _DnsTreeNode *)v10, v40, 0) )
      goto LABEL_56;
    v23 = *(const void **)(v13 + 8);
    v24 = *(void **)v13;
    if ( *(const void **)v13 != v23 )
    {
      memmove(*(void **)v13, v23, 0i64);
      *(_QWORD *)(v13 + 8) = v24;
      v9 = v40;
    }
    v34[0] = 0;
    LOBYTE(v39) = 0;
    DnsSign::BuildRRTypeVector(v10, (unsigned __int64 *)v13, v34, &v39);
    if ( !(_BYTE)v39 || (v26 = 1, v34[0]) )
      v26 = 0;
    if ( (__int64)(*(_QWORD *)(v13 + 8) - *(_QWORD *)v13) >> 1 && !v26 )
    {
      LOWORD(v39) = 46;
      std::vector<unsigned short>::push_back((unsigned __int64 *)v13, (unsigned __int16 *)&v39);
    }
    Nsec3Node = DnsOls_FindOrCreateNsec3Node(a1, v25, (struct _DnsTreeNode *)v10, v9, 1);
  }
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
  {
    v28 = Dbg_NodeName(v10);
    v29 = 35;
    goto LABEL_49;
  }
LABEL_56:
  if ( *(_QWORD *)v13 )
    operator delete(*(void **)v13);
  *(_QWORD *)v13 = 0i64;
  *(_QWORD *)(v13 + 8) = 0i64;
  *(_QWORD *)(v13 + 16) = 0i64;
  return updated;
}
// 140106034: variable 'v22' is possibly undefined
// 1401060D5: variable 'v25' is possibly undefined
// 140184CA8: using guessed type void __stdcall operator delete(void *);
// 140105E40: using guessed type __int64 var_58[11];
// 140105E40: using guessed type char var_80[16];
