Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 2273
// Total lines: 157

//----- (000000014011B468) ----------------------------------------------------
char *__fastcall readNextToken(__int64 a1, _DWORD *a2, _DWORD *a3)
{
  char *v3; // rbx
  int v4; // r15d
  unsigned __int64 v5; // rbp
  __int64 v8; // rsi
  unsigned __int16 v9; // r14
  char *v10; // rdi
  CDnsClientSubnetRecordsTrie *v11; // r8
  char v12; // al
  unsigned __int16 v13; // r14
  int v14; // ebp
  void *v15; // rax
  __int64 v16; // rdx
  __int64 v17; // r8
  __int64 v19; // [rsp+20h] [rbp-48h]
  __int64 v20; // [rsp+28h] [rbp-40h]
  __int64 v21; // [rsp+38h] [rbp-30h]
  __int16 v22; // [rsp+70h] [rbp+8h]

  v3 = *(char **)(a1 + 32);
  v4 = 0;
  v5 = *(_QWORD *)(a1 + 24);
  *a3 = 0;
  v22 = 256;
  do
  {
    if ( (unsigned __int64)v3 >= v5 )
      goto LABEL_49;
    v8 = (unsigned __int8)*v3++;
    v9 = DnsFileCharPropertyTable[v8];
  }
  while ( (v9 & 0x400) != 0 );
  if ( (unsigned __int64)v3 >= v5 )
    goto LABEL_49;
  v10 = v3 - 1;
  if ( (unsigned __int64)(v3 - 1) > *(_QWORD *)(a1 + 32) )
    *a3 = 1;
  v11 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 0x20) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 25) >= 5u )
  {
    WPP_SF_qqcdD(
      *((_QWORD *)WPP_GLOBAL_Control + 2),
      (unsigned __int8)v8,
      (__int64)WPP_GLOBAL_Control,
      v3,
      v3 - 1,
      v8,
      (unsigned __int8)v8,
      v9);
    v11 = WPP_GLOBAL_Control;
  }
  if ( (v9 & 0x100) == 0 )
  {
LABEL_23:
    if ( (_BYTE)v8 == 34 )
    {
      v10 = v3;
      v22 = 512;
    }
    if ( v11 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)v11 + 28) & 0x20) != 0
      && *((_BYTE *)v11 + 25) >= 5u )
    {
      LODWORD(v20) = v5 - (_DWORD)v3;
      LOBYTE(v19) = *v10;
      WPP_SF_qcd(*((_QWORD *)v11 + 2), (__int64)a2, (__int64)v11, v10, v19, v20);
      v11 = WPP_GLOBAL_Control;
    }
    while ( 1 )
    {
      v8 = (unsigned __int8)*v3++;
      v13 = DnsFileCharPropertyTable[v8];
      if ( v11 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)v11 + 28) & 0x20) != 0
        && *((_BYTE *)v11 + 25) >= 5u )
      {
        LODWORD(v20) = v13;
        LODWORD(v19) = (unsigned __int8)v8;
        WPP_SF_cdD(*((_QWORD *)v11 + 2), (__int64)DnsFileCharPropertyTable, (__int64)v11, v8, v19, v20);
        v11 = WPP_GLOBAL_Control;
      }
      if ( (v13 & 0x708) == 0 || v4 )
      {
        v4 = 0;
      }
      else
      {
        if ( (v13 & (unsigned __int16)v22) != 0 )
        {
          --v3;
          goto LABEL_41;
        }
        LOBYTE(v4) = (_BYTE)v8 == 92;
      }
      if ( (unsigned __int64)v3 >= v5 )
        goto LABEL_41;
    }
  }
  if ( (_BYTE)v8 == 59 )
  {
    while ( (unsigned __int64)v3 < v5 )
    {
      v12 = *v3++;
      if ( v12 == 10 )
      {
        if ( (unsigned __int64)v3 >= v5 )
          break;
        v10 = v3 - 1;
        goto LABEL_41;
      }
    }
LABEL_49:
    *a2 = 0;
    *(_DWORD *)(a1 + 40) = 0;
    return 0i64;
  }
  if ( (_BYTE)v8 != 10 && (unsigned __int8)(v8 - 40) > 1u )
  {
    if ( v11 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)v11 + 28) & 0x20) != 0
      && *((_BYTE *)v11 + 25) >= 4u )
    {
      LODWORD(v19) = v9;
      WPP_SF_DDqq(*((_QWORD *)v11 + 2), (__int64)a2, (__int64)v11, (unsigned __int8)v8, v19, v3, v3 - 1);
      v11 = WPP_GLOBAL_Control;
    }
    goto LABEL_23;
  }
LABEL_41:
  *a2 = (_DWORD)v3 - (_DWORD)v10;
  if ( v22 == 512 && (_BYTE)v8 == 34 )
    ++v3;
  v14 = v5 - (_DWORD)v3;
  *(_QWORD *)(a1 + 32) = v3;
  *(_DWORD *)(a1 + 40) = v14;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 0x20) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 25) >= 5u )
  {
    v15 = FormatLabelA((unsigned int)*a2, v10);
    LODWORD(v21) = v14;
    LODWORD(v19) = *a2;
    WPP_SF_qdsqd(*((_QWORD *)WPP_GLOBAL_Control + 2), v16, v17, v10, v19, v15, v3, v21);
  }
  return v10;
}
// 14011B5AC: variable 'a2' is possibly undefined
// 14011B5AC: variable 'v19' is possibly undefined
// 14011B5FA: variable 'v20' is possibly undefined
// 14011B708: variable 'v16' is possibly undefined
// 14011B708: variable 'v17' is possibly undefined
// 14011B708: variable 'v21' is possibly undefined
// 140193F30: using guessed type _WORD DnsFileCharPropertyTable[256];
