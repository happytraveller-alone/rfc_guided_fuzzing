Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 310
// Total lines: 426

//----- (0000000140027284) ----------------------------------------------------
__int64 *__fastcall Dnssec_NodeLookup(
        unsigned __int8 *a1,
        __int64 *a2,
        __int64 a3,
        unsigned __int16 a4,
        unsigned int a5,
        __int64 *a6,
        __int64 **a7)
{
  __int64 v7; // rsi
  __int64 *v8; // r8
  __int64 **v10; // rdx
  __int64 *v12; // r14
  BOOL v13; // ebx
  __int64 v14; // r15
  __int64 v15; // rdi
  CDnsClientSubnetRecordsTrie *v16; // rcx
  char *v17; // rbx
  char *v18; // rax
  unsigned __int8 *v19; // rbx
  __int64 *v20; // rdi
  __int64 v21; // rax
  CDnsClientSubnetRecordsTrie *v22; // rax
  char *v23; // rax
  char *v24; // rax
  BOOL v25; // r12d
  __int16 *v26; // rbx
  __int64 v27; // rax
  int v28; // eax
  CDnsClientSubnetRecordsTrie *v29; // rcx
  const wchar_t *v30; // rax
  const char *v31; // r9
  __int64 v32; // rbx
  __int64 v33; // rcx
  char *v34; // rax
  char *v35; // rax
  __int64 *v36; // r12
  __int64 v37; // r13
  char *v38; // rax
  const char *v39; // rdi
  const char *v40; // rbx
  char *v41; // rax
  __int64 **v42; // rax
  __int64 v43; // rax
  char v44; // al
  __int64 v45; // rax
  __int64 v46; // rbx
  char *v47; // rax
  __int64 v48; // rcx
  __int64 v49; // rax
  char *v50; // rax
  BOOL v52; // [rsp+40h] [rbp-C0h]
  __int64 v54; // [rsp+50h] [rbp-B0h] BYREF
  __int64 **v55; // [rsp+58h] [rbp-A8h]
  __int64 v56; // [rsp+60h] [rbp-A0h]
  __int64 v57; // [rsp+68h] [rbp-98h] BYREF
  __int64 v58; // [rsp+70h] [rbp-90h]
  __int16 v59[184]; // [rsp+80h] [rbp-80h] BYREF
  __int16 v60[184]; // [rsp+1F0h] [rbp+F0h] BYREF
  char v61[440]; // [rsp+360h] [rbp+260h] BYREF
  unsigned __int16 v62; // [rsp+518h] [rbp+418h]
  unsigned int v63; // [rsp+598h] [rbp+498h]

  v7 = 0i64;
  v58 = a3;
  v8 = a6;
  v10 = a7;
  v55 = a7;
  v12 = 0i64;
  v54 = 0i64;
  v13 = a4 == 43;
  v56 = 0i64;
  v52 = v13;
  v14 = 0i64;
  v15 = 0i64;
  v16 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x100000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
  {
    v17 = Dbg_NodeName((__int64)a2);
    v18 = Dbg_CountName(a1);
    WPP_SF_Dss(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x29u,
      (__int64)&WPP_61593714a64130a636c4534d3ca3552a_Traceguids,
      a4,
      (__int64)v18,
      (__int64)v17);
    v16 = WPP_GLOBAL_Control;
    v10 = v55;
    v8 = a6;
    v13 = v52;
  }
  if ( !a1 && !a2 )
    goto LABEL_17;
  *v8 = 0i64;
  if ( v10 )
    *v10 = 0i64;
  if ( a1 )
  {
    v19 = a1 + 2;
    if ( !(unsigned int)Name_ConvertRawNameToLookupName(a1 + 2, (unsigned __int16 *)v59) )
      goto LABEL_16;
    if ( v52 )
    {
      if ( *a1 && a1[1] )
        v19 += (char)*v19 + 1;
      if ( !(unsigned int)Name_ConvertRawNameToLookupName(v19, (unsigned __int16 *)v60) )
      {
LABEL_16:
        v16 = WPP_GLOBAL_Control;
LABEL_17:
        v20 = a6;
        goto LABEL_18;
      }
    }
    v13 = v52;
  }
  else
  {
    Name_WriteLookupNameForNode(a2, (unsigned __int16 *)v59);
    if ( v13 )
    {
      if ( *a2 )
        a2 = (__int64 *)*a2;
      Name_WriteLookupNameForNode(a2, (unsigned __int16 *)v60);
    }
  }
  v22 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x100000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
  {
    v23 = Dbg_LookupName((unsigned __int16 *)v59);
    WPP_SF_s(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x2Au, (__int64)&WPP_61593714a64130a636c4534d3ca3552a_Traceguids, v23);
    v22 = WPP_GLOBAL_Control;
  }
  if ( v13
    && v22 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)v22 + 17) & 0x100000) != 0
    && *((_BYTE *)v22 + 65) >= 5u )
  {
    v24 = Dbg_LookupName((unsigned __int16 *)v60);
    WPP_SF_s(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x2Bu, (__int64)&WPP_61593714a64130a636c4534d3ca3552a_Traceguids, v24);
  }
  v25 = v52;
  v26 = v60;
  if ( !v52 )
    v26 = v59;
  v27 = Lookup_ZoneTreeNodeEx((unsigned __int16 *)v26, 0, 0i64);
  if ( !v27 )
    goto LABEL_56;
  v15 = *(_QWORD *)(v27 + 56);
  if ( !v15 || (*(_DWORD *)(v15 + 396) & 0x20000) == 0 )
    goto LABEL_56;
  v57 = 0i64;
  memset_0(v61, 0, 0x18B0ui64);
  v62 = a4;
  v63 = a5;
  v28 = Plugin_DnsQueryZoneScopeSourceIP((__int64)v61, v15, (unsigned __int16 *)v26, &v57);
  if ( v28 )
  {
    v16 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
      return v12;
    if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x100000) == 0 || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
      goto LABEL_17;
    WPP_SF_D(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x2Cu, (__int64)&WPP_61593714a64130a636c4534d3ca3552a_Traceguids, v28);
    goto LABEL_16;
  }
  if ( v57 )
  {
    v15 = v57;
    v29 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
      goto LABEL_67;
    if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x100000) == 0 || *((_BYTE *)WPP_GLOBAL_Control + 65) < 5u )
      goto LABEL_57;
    WPP_SF_S(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x2Du,
      (__int64)&WPP_61593714a64130a636c4534d3ca3552a_Traceguids,
      *(const unsigned __int16 **)(v57 + 192));
    goto LABEL_56;
  }
  v29 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
    goto LABEL_67;
  if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x100000) != 0 && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
  {
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x2Eu, (__int64)&WPP_61593714a64130a636c4534d3ca3552a_Traceguids);
LABEL_56:
    v29 = WPP_GLOBAL_Control;
  }
LABEL_57:
  if ( v29 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)v29 + 17) & 0x100000) != 0
    && *((_BYTE *)v29 + 65) >= 5u )
  {
    if ( !v15 || (v30 = *(const wchar_t **)(v15 + 192)) == 0i64 )
      v30 = L"Default";
    if ( v15 )
      v31 = *(const char **)(v15 + 16);
    else
      v31 = 0i64;
    WPP_SF_sS(*((_QWORD *)v29 + 7), 0x2Fu, (__int64)&WPP_61593714a64130a636c4534d3ca3552a_Traceguids, v31, (__int64)v30);
  }
LABEL_67:
  if ( v58 )
    v32 = *(_QWORD *)(v58 + 6280);
  else
    v32 = 0i64;
  v33 = v32;
  if ( v15 )
    v33 = v15;
  v12 = (__int64 *)Lookup_ZoneNode(v33, 0i64, 0i64, (unsigned __int16 *)v59, 17, &v54, 0i64, 0i64);
  v16 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
  {
    if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x100000) != 0 && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
    {
      v34 = Dbg_NodeName((__int64)v12);
      WPP_SF_s(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x30u,
        (__int64)&WPP_61593714a64130a636c4534d3ca3552a_Traceguids,
        v34);
      v16 = WPP_GLOBAL_Control;
    }
    if ( v16 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)v16 + 17) & 0x100000) != 0
      && *((_BYTE *)v16 + 65) >= 5u )
    {
      v35 = Dbg_NodeName(v54);
      WPP_SF_s(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x31u,
        (__int64)&WPP_61593714a64130a636c4534d3ca3552a_Traceguids,
        v35);
      v16 = WPP_GLOBAL_Control;
    }
  }
  if ( v15 )
  {
    v36 = (__int64 *)Lookup_ZoneNode(v32, 0i64, 0i64, (unsigned __int16 *)v59, 17, 0i64, 0i64, 0i64);
    if ( (unsigned int)(*(_DWORD *)(v15 + 372) - 3) <= 1 )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x100000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
      {
        WPP_SF_s(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x32u,
          (__int64)&WPP_61593714a64130a636c4534d3ca3552a_Traceguids,
          *(const char **)(v15 + 16));
      }
      v43 = *(_QWORD *)(v15 + 40);
      v12 = v36;
      v20 = a6;
      *a6 = v43;
      goto LABEL_107;
    }
    v37 = (__int64)v12;
    if ( v54 )
      v37 = v54;
    v56 = v37;
    v16 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x100000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
    {
      v38 = Dbg_NodeName(v37);
      WPP_SF_s(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x33u,
        (__int64)&WPP_61593714a64130a636c4534d3ca3552a_Traceguids,
        v38);
      v16 = WPP_GLOBAL_Control;
    }
    if ( v37 && (*(_DWORD *)(v37 + 92) & 0x110) != 16 )
    {
      if ( v16 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)v16 + 17) & 0x100000) != 0
        && *((_BYTE *)v16 + 65) >= 4u )
      {
        v39 = "not delegation";
        if ( (*(_BYTE *)(v37 + 92) & 0x10) != 0 )
          v39 = "delegation";
        v40 = "not auth zone root";
        if ( (*(_DWORD *)(v37 + 92) & 0x100) != 0 )
          v40 = "auth zone root";
        v41 = Dbg_NodeName(v37);
        WPP_SF_sss(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x34u,
          (__int64)&WPP_61593714a64130a636c4534d3ca3552a_Traceguids,
          v41,
          (__int64)v40,
          (__int64)v39);
        v16 = WPP_GLOBAL_Control;
      }
      v56 = 0i64;
    }
    v42 = v55;
    if ( v55 )
    {
      *v55 = v12;
      v16 = WPP_GLOBAL_Control;
    }
    v12 = v36;
    v25 = v52;
  }
  else
  {
    v42 = v55;
  }
  if ( !v12 )
  {
    if ( !v42 || !*v42 )
      goto LABEL_17;
    goto LABEL_121;
  }
  v44 = CurrentTimeoutBin;
  v14 = (__int64)v12;
  if ( !v25 )
    goto LABEL_113;
  v14 = *v12;
  if ( *v12 )
  {
    *(_BYTE *)(v14 + 98) = CurrentTimeoutBin;
LABEL_113:
    if ( v14 )
    {
      while ( 1 )
      {
        if ( (*(_BYTE *)(v14 + 92) & 0x10) != 0 )
        {
          if ( RR_FindNextRecordEx(v14, 0, 2u, 0i64, a5, 1) )
            break;
          v44 = CurrentTimeoutBin;
        }
        v14 = *(_QWORD *)v14;
        if ( !v14 )
          break;
        *(_BYTE *)(v14 + 98) = v44;
      }
    }
  }
LABEL_121:
  if ( !v56 || v14 && *(_BYTE *)(v56 + 100) <= *(_BYTE *)(v14 + 100) )
  {
    v20 = a6;
    *a6 = v14;
  }
  else
  {
    v20 = a6;
    *a6 = v56;
  }
  if ( *v20 && !*(_QWORD *)*v20 )
    *v20 = 0i64;
LABEL_107:
  v16 = WPP_GLOBAL_Control;
LABEL_18:
  if ( v16 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
  {
    if ( (*((_DWORD *)v16 + 17) & 0x100000) != 0 && *((_BYTE *)v16 + 65) >= 4u )
    {
      if ( v12 )
        v21 = v12[7];
      else
        v21 = 0i64;
      if ( v21 )
      {
        if ( v12 )
          v45 = v12[7];
        else
          v45 = 0i64;
        v46 = *(_QWORD *)(v45 + 16);
      }
      else
      {
        v46 = 0i64;
      }
      v47 = Dbg_NodeName((__int64)v12);
      WPP_SF_ss(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x35u,
        (__int64)&WPP_61593714a64130a636c4534d3ca3552a_Traceguids,
        v47,
        v46);
      v16 = WPP_GLOBAL_Control;
    }
    if ( v16 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)v16 + 17) & 0x100000) != 0
      && *((_BYTE *)v16 + 65) >= 4u )
    {
      v48 = *v20;
      if ( *v20 )
        v49 = *(_QWORD *)(v48 + 56);
      else
        v49 = 0i64;
      if ( v49 )
      {
        if ( v48 )
          v7 = *(_QWORD *)(v48 + 56);
        v7 = *(_QWORD *)(v7 + 16);
      }
      v50 = Dbg_NodeName(v48);
      WPP_SF_ss(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x36u,
        (__int64)&WPP_61593714a64130a636c4534d3ca3552a_Traceguids,
        v50,
        v7);
    }
  }
  return v12;
}
// 140188260: using guessed type wchar_t aDefault_1[8];
// 1401BA4B8: using guessed type char CurrentTimeoutBin;
// 140027284: using guessed type unsigned __int16 var_1BE0[184];
// 140027284: using guessed type unsigned __int16 var_1A70[184];
##############################
Role: Let's assume that you are an advanced reverse engineer and you are reverse engineering a network driver using IDA Pro, and you are also familiar with the RFC documentation. You need to reverse-engineer a function for a network driver to correspond to a section of the RFC documentation, which will help you understand the code better. The driver you're reversing is Schannel.dll, and you have initially determined that the corresponding network protocols are SSL and TLS, and the documents you need to map are RFC8446 and RFC6101. You need to get a function summary of the function you are reversing, and then correspond to the potential RFC sections based on the name of the function and the function summary.
Function Background: The function is reverse engineered from the driver file Schannel.dll on Windows platform. Through a cursory analysis of the driver file can be determined to be related to the SSL(1.3), TLS(3.0) protocol, that is, with RFC8446, RFC6101 strong correlation.

Output Function Summary: Summarizes the function's functionality with several phrases instead of sentences, focuses on covering the function's control flow information, and highlights the protocol function points implemented by the function. Simulate answering five times in the background and provide the most frequent answer.

Retrieve document sections: giving matches for document sections(FunctionMatchRFCResult) that the code may related to. NOTE if the code is only business related(i.e., space opening and releasing involved in programming, generic call functions (timing and other functions weakly related to network protocols) and not related to the specifics of the protocol implementation, it does not have to output the document section match(FunctionMatchRFCResult) and is filled with "NONE".

Retrieve document sections Thinking Chain: The function code is matched with the RFC document section, and the thinking chain is provided to help you solve the problem better:
	1. Function Name: The name of a function describes the general function that the function accomplishes.
	2. Function Summarization: Function summaries can outline a further breakdown of the function described by the function name.
	3. Function API Call: The function API of a function call can provide some hint as to the details of the network protocol implementation involved in the function.
	4. Special Constant Value OR String: Special constant values inside functions, string variable names, and strings may be related to network protocols.
	5. Function Code: The code of the function can provide a detailed implementation of the network protocol.
Generate Function Information Collection with JSON Format:

{
	"FunctionIndex": "(FILL WITH "File count" with less than four bits are indexed with zeros to make up the four bits.)",
	"FunctionName": "(Full Function Code Name)",
	"FunctionSummarization": [
		"(Function Summary Phrase1)",
		"(Function Summary Phrase2)",
		"(...)"
	],
	"FunctionMatchRFCResult": [
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 1)",
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 2)",
		"(...)"
	],
}

ATTENTION: Remember YOU MUST ONLY output the Function Information Collection result.
