Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 2135
// Total lines: 473

//----- (000000014010DF3C) ----------------------------------------------------
__int64 __fastcall DnsOls_ValidateSKD(__int64 a1, __int64 a2, char a3)
{
  unsigned int v3; // ebx
  CDnsClientSubnetRecordsTrie *v7; // rcx
  __int64 v8; // rdi
  char *v9; // rax
  char *v10; // rax
  char *v11; // rax
  __int64 v12; // rdi
  int v13; // r9d
  unsigned __int8 v14; // r9
  int v15; // ecx
  int v16; // r8d
  __int16 v17; // dx
  unsigned int v18; // eax
  bool v19; // zf
  char v20; // bl
  const char *v21; // rdi
  char *v22; // rax
  __int64 v23; // r8
  unsigned __int16 v24; // cx
  char *v25; // rax
  __int64 v26; // r8
  int v27; // edi
  int v28; // ebx
  unsigned int v29; // eax
  char *v30; // rax
  unsigned __int16 v31; // dx
  char *v32; // rax
  int v33; // edi
  char *v34; // rax
  char *v35; // rax
  unsigned __int16 v36; // dx
  char *v37; // rax
  __int64 v38; // r8
  char *v39; // rax
  __int64 v40; // rdi
  char *v41; // rax
  char *v42; // rax
  NCRYPT_PROV_HANDLE phProvider; // [rsp+70h] [rbp+8h] BYREF

  v3 = 0;
  phProvider = 0i64;
  v7 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    if ( a1 )
      v8 = *(_QWORD *)(a1 + 16);
    else
      v8 = 0i64;
    if ( a2 )
    {
      v9 = Dbg_GuidString((const IID *)(a2 + 8));
      v7 = WPP_GLOBAL_Control;
    }
    else
    {
      v9 = 0i64;
    }
    WPP_SF_Ss(
      *((_QWORD *)v7 + 7),
      0xCu,
      (__int64)&WPP_d7bde0c81fb638cbc010cec2dbd8b3fa_Traceguids,
      (const unsigned __int16 *)v9,
      v8);
    v7 = WPP_GLOBAL_Control;
  }
  if ( !a1 || !a2 )
  {
    v3 = 87;
    goto LABEL_28;
  }
  if ( !*(_DWORD *)(a2 + 36) || (*(_BYTE *)(a1 + 1040) & 2) != 0 || (a3 & 2) != 0 )
  {
    if ( *(_DWORD *)(a2 + 32) && (*(_BYTE *)(a1 + 388) & 1) == 0 )
    {
      if ( v7 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)v7 + 17) & 0x200000) != 0
        && *((_BYTE *)v7 + 65) >= 2u )
      {
        v11 = Dbg_GuidString((const IID *)(a2 + 8));
        WPP_SF_Ss(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0xEu,
          (__int64)&WPP_d7bde0c81fb638cbc010cec2dbd8b3fa_Traceguids,
          (const unsigned __int16 *)v11,
          *(_QWORD *)(a1 + 16));
        v7 = WPP_GLOBAL_Control;
      }
      v3 = 9611;
      goto LABEL_28;
    }
    v13 = NCryptOpenStorageProvider(&phProvider, *(LPCWSTR *)(a2 + 24), 0);
    if ( v13 )
    {
      v7 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        WPP_SF_DS(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0xFu,
          (__int64)&WPP_d7bde0c81fb638cbc010cec2dbd8b3fa_Traceguids,
          v13,
          *(_QWORD *)(a2 + 24));
        v7 = WPP_GLOBAL_Control;
      }
      v3 = 9112;
      goto LABEL_28;
    }
    v14 = *(_BYTE *)(a2 + 40);
    if ( v14 > 0xEu || (v15 = 26016, !_bittest(&v15, v14)) )
    {
      v7 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        v39 = Dbg_GuidString((const IID *)(a2 + 8));
        WPP_SF_Ssd(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x10u,
          (__int64)&WPP_d7bde0c81fb638cbc010cec2dbd8b3fa_Traceguids,
          (const unsigned __int16 *)v39,
          *(_QWORD *)(a1 + 16));
        v7 = WPP_GLOBAL_Control;
      }
      v3 = 9105;
      goto LABEL_28;
    }
    v16 = (*(_DWORD *)(a1 + 1040) >> 4) & 1;
    v17 = v16 != 0 ? 50 : 47;
    if ( v14 == 5 )
    {
      v19 = v17 == 47;
    }
    else
    {
      if ( v14 != 7 )
      {
        if ( ((v14 - 8) & 0xFD) == 0 || (unsigned __int8)(v14 - 13) <= 1u )
        {
LABEL_45:
          if ( !v16 )
          {
LABEL_73:
            if ( v14 == 5 )
              goto LABEL_81;
            if ( v14 <= 6u )
              goto LABEL_83;
            if ( v14 <= 8u || v14 == 10 )
            {
LABEL_81:
              v27 = *(_DWORD *)(a2 + 44);
              if ( (unsigned int)(v27 - 1024) > 0xC00 || (v27 & 0x3F) != 0 )
              {
                v7 = WPP_GLOBAL_Control;
                if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                  && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
                  && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
                {
                  v37 = Dbg_GuidString((const IID *)(a2 + 8));
                  WPP_SF_SsDD(
                    *((_QWORD *)WPP_GLOBAL_Control + 7),
                    0x13u,
                    v38,
                    (const unsigned __int16 *)v37,
                    *(_QWORD *)(a1 + 16));
                  v7 = WPP_GLOBAL_Control;
                }
                v3 = 9106;
                goto LABEL_28;
              }
            }
            else if ( v14 == 13 )
            {
              *(_DWORD *)(a2 + 44) = 256;
            }
            else if ( v14 == 14 )
            {
              *(_DWORD *)(a2 + 44) = 384;
            }
LABEL_83:
            v28 = *(_DWORD *)(a2 + 68);
            if ( v28 != -1 )
            {
              v29 = v28 - 604800;
              if ( *(_DWORD *)(a2 + 36) )
              {
                if ( v29 > 0x258ECB80 )
                {
                  v7 = WPP_GLOBAL_Control;
                  if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                    || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) == 0
                    || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
                  {
                    goto LABEL_91;
                  }
                  v30 = Dbg_GuidString((const IID *)(a2 + 8));
                  v31 = 20;
LABEL_90:
                  WPP_SF_Ssd(
                    *((_QWORD *)WPP_GLOBAL_Control + 7),
                    v31,
                    (__int64)&WPP_d7bde0c81fb638cbc010cec2dbd8b3fa_Traceguids,
                    (const unsigned __int16 *)v30,
                    *(_QWORD *)(a1 + 16));
                  v7 = WPP_GLOBAL_Control;
LABEL_91:
                  v3 = 9114;
LABEL_28:
                  if ( v7 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                    && (*((_DWORD *)v7 + 17) & 0x200000) != 0
                    && *((_BYTE *)v7 + 65) >= 2u )
                  {
                    if ( a1 )
                      v12 = *(_QWORD *)(a1 + 16);
                    else
                      v12 = 0i64;
                    if ( a2 )
                    {
                      v42 = Dbg_GuidString((const IID *)(a2 + 8));
                      v7 = WPP_GLOBAL_Control;
                    }
                    else
                    {
                      v42 = 0i64;
                    }
                    WPP_SF_DSs(
                      *((_QWORD *)v7 + 7),
                      0x1Cu,
                      (__int64)&WPP_d7bde0c81fb638cbc010cec2dbd8b3fa_Traceguids,
                      v3,
                      (__int64)v42,
                      v12);
                  }
                  goto LABEL_149;
                }
              }
              else if ( v29 > 0x95CC700 )
              {
                v7 = WPP_GLOBAL_Control;
                if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                  || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) == 0
                  || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
                {
                  goto LABEL_91;
                }
                v30 = Dbg_GuidString((const IID *)(a2 + 8));
                v31 = 21;
                goto LABEL_90;
              }
            }
            if ( *(_DWORD *)(a2 + 48) > 0x278D00u )
            {
              v7 = WPP_GLOBAL_Control;
              if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
                && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
              {
                v32 = Dbg_GuidString((const IID *)(a2 + 8));
                WPP_SF_Ssd(
                  *((_QWORD *)WPP_GLOBAL_Control + 7),
                  0x16u,
                  (__int64)&WPP_d7bde0c81fb638cbc010cec2dbd8b3fa_Traceguids,
                  (const unsigned __int16 *)v32,
                  *(_QWORD *)(a1 + 16));
                v7 = WPP_GLOBAL_Control;
              }
              v3 = 9115;
              goto LABEL_28;
            }
            if ( (unsigned int)(*(_DWORD *)(a2 + 52) - 21600) > 0x2738A0 )
            {
              v7 = WPP_GLOBAL_Control;
              if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) == 0
                || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
              {
                goto LABEL_119;
              }
              v35 = Dbg_GuidString((const IID *)(a2 + 8));
              v36 = 23;
            }
            else if ( (unsigned int)(*(_DWORD *)(a2 + 56) - 21600) > 0x2738A0 )
            {
              v7 = WPP_GLOBAL_Control;
              if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) == 0
                || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
              {
                goto LABEL_119;
              }
              v35 = Dbg_GuidString((const IID *)(a2 + 8));
              v36 = 24;
            }
            else
            {
              if ( (unsigned int)(*(_DWORD *)(a2 + 60) - 21600) <= 0x2738A0 )
              {
                v33 = 0;
                while ( 1 )
                {
                  v3 = DnsOls_ValidateSigningKey(
                         a1,
                         (struct _dnsskd *)a2,
                         (struct _dnsskdkey *)(a2 + 24 * (v33 + 6i64)));
                  if ( v3 )
                    break;
                  if ( ++v33 >= 3 )
                    goto LABEL_20;
                }
                v7 = WPP_GLOBAL_Control;
                if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                  && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
                  && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
                {
                  v34 = Dbg_GuidString((const IID *)(a2 + 8));
                  WPP_SF_DSSs(
                    *((_QWORD *)WPP_GLOBAL_Control + 7),
                    0x1Au,
                    (__int64)&WPP_d7bde0c81fb638cbc010cec2dbd8b3fa_Traceguids,
                    v3,
                    *(_QWORD *)(a2 + 24 * (v33 + 6i64)),
                    (__int64)v34,
                    *(_QWORD *)(a1 + 16));
                  v7 = WPP_GLOBAL_Control;
                }
                goto LABEL_28;
              }
              v7 = WPP_GLOBAL_Control;
              if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) == 0
                || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
              {
                goto LABEL_119;
              }
              v35 = Dbg_GuidString((const IID *)(a2 + 8));
              v36 = 25;
            }
            WPP_SF_Ssd(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              v36,
              (__int64)&WPP_d7bde0c81fb638cbc010cec2dbd8b3fa_Traceguids,
              (const unsigned __int16 *)v35,
              *(_QWORD *)(a1 + 16));
            v7 = WPP_GLOBAL_Control;
LABEL_119:
            v3 = 9123;
            goto LABEL_28;
          }
          if ( v14 != 5 )
          {
            if ( v14 <= 6u )
            {
LABEL_51:
              v18 = 0;
              goto LABEL_63;
            }
            if ( v14 > 8u && v14 != 10 )
            {
              if ( (unsigned __int8)(v14 - 13) <= 1u )
                goto LABEL_64;
              goto LABEL_51;
            }
          }
          v18 = *(_DWORD *)(a2 + 44);
LABEL_63:
          v24 = 150;
          if ( v18 <= 0x800 )
          {
            if ( v18 > 0x400 )
              v24 = 500;
LABEL_67:
            if ( *(_WORD *)(a1 + 1046) > v24 )
            {
              v7 = WPP_GLOBAL_Control;
              if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
                && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
              {
                v25 = Dbg_GuidString((const IID *)(a2 + 8));
                WPP_SF_SsDD(
                  *((_QWORD *)WPP_GLOBAL_Control + 7),
                  0x12u,
                  v26,
                  (const unsigned __int16 *)v25,
                  *(_QWORD *)(a1 + 16));
                v7 = WPP_GLOBAL_Control;
              }
              v3 = 9124;
              goto LABEL_28;
            }
            goto LABEL_73;
          }
LABEL_64:
          v24 = 2500;
          goto LABEL_67;
        }
LABEL_55:
        v7 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
        {
          v20 = *(_BYTE *)(a2 + 40);
          v21 = "NSEC";
          if ( v16 )
            v21 = "NSEC3";
          v22 = Dbg_GuidString((const IID *)(a2 + 8));
          WPP_SF_Ssds(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x11u,
            v23,
            (const unsigned __int16 *)v22,
            *(_QWORD *)(a1 + 16),
            v20,
            (__int64)v21);
          v7 = WPP_GLOBAL_Control;
        }
        v3 = (*(_DWORD *)(a1 + 1040) & 0x10) != 0 ? 9103 : 9130;
        goto LABEL_28;
      }
      v19 = v17 == 50;
    }
    if ( v19 )
      goto LABEL_45;
    goto LABEL_55;
  }
  if ( v7 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
  {
    if ( (*((_DWORD *)v7 + 17) & 0x200000) != 0 && *((_BYTE *)v7 + 65) >= 4u )
    {
      v10 = Dbg_GuidString((const IID *)(a2 + 8));
      WPP_SF_Sss(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0xDu,
        (__int64)&WPP_d7bde0c81fb638cbc010cec2dbd8b3fa_Traceguids,
        (const unsigned __int16 *)v10,
        (__int64)"is not",
        (__int64)"was not");
LABEL_20:
      v7 = WPP_GLOBAL_Control;
    }
    if ( v7 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)v7 + 17) & 0x200000) != 0
      && *((_BYTE *)v7 + 65) >= 4u )
    {
      v40 = *(_QWORD *)(a1 + 16);
      v41 = Dbg_GuidString((const IID *)(a2 + 8));
      WPP_SF_Ss(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x1Bu,
        (__int64)&WPP_d7bde0c81fb638cbc010cec2dbd8b3fa_Traceguids,
        (const unsigned __int16 *)v41,
        v40);
    }
  }
LABEL_149:
  if ( phProvider )
    NCryptFreeObject(phProvider);
  return v3;
}
// 14010E74C: conditional instruction was optimized away because ebx.4!=0
// 14010E772: conditional instruction was optimized away because rbp.8!=0
// 14010E77F: conditional instruction was optimized away because rsi.8!=0
// 14010E28C: variable 'v23' is possibly undefined
// 14010E339: variable 'v26' is possibly undefined
// 14010E6CA: variable 'v38' is possibly undefined
##############################
Role: Let's assume that you are an advanced reverse engineer and you are reverse engineering a network driver using IDA Pro, and you are also familiar with the RFC documentation. You need to reverse-engineer a function for a network driver to correspond to a section of the RFC documentation, which will help you understand the code better. The driver you're reversing is Schannel.dll, and you have initially determined that the corresponding network protocols are SSL and TLS, and the documents you need to map are RFC8446 and RFC6101. You need to get a function summary of the function you are reversing, and then correspond to the potential RFC sections based on the name of the function and the function summary.
Function Background: The function is reverse engineered from the driver file Schannel.dll on Windows platform. Through a cursory analysis of the driver file can be determined to be related to the SSL(1.3), TLS(3.0) protocol, that is, with RFC8446, RFC6101 strong correlation.

Output Function Summary: Summarizes the function's functionality with several phrases instead of sentences, focuses on covering the function's control flow information, and highlights the protocol function points implemented by the function. Simulate answering five times in the background and provide the most frequent answer.

Retrieve document sections: giving matches for document sections(FunctionMatchRFCResult) that the code may related to. NOTE if the code is only business related(i.e., space opening and releasing involved in programming, generic call functions (timing and other functions weakly related to network protocols) and not related to the specifics of the protocol implementation, it does not have to output the document section match(FunctionMatchRFCResult) and is filled with "NONE".

Retrieve document sections Thinking Chain: The function code is matched with the RFC document section, and the thinking chain is provided to help you solve the problem better:
	1. Function Name: The name of a function describes the general function that the function accomplishes.
	2. Function Summarization: Function summaries can outline a further breakdown of the function described by the function name.
	3. Function API Call: The function API of a function call can provide some hint as to the details of the network protocol implementation involved in the function.
	4. Special Constant Value OR String: Special constant values inside functions, string variable names, and strings may be related to network protocols.
	5. Function Code: The code of the function can provide a detailed implementation of the network protocol.
Generate Function Information Collection with JSON Format:

{
	"FunctionIndex": "(FILL WITH "File count" with less than four bits are indexed with zeros to make up the four bits.)",
	"FunctionName": "(Full Function Code Name)",
	"FunctionSummarization": [
		"(Function Summary Phrase1)",
		"(Function Summary Phrase2)",
		"(...)"
	],
	"FunctionMatchRFCResult": [
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 1)",
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 2)",
		"(...)"
	],
}

ATTENTION: Remember YOU MUST ONLY output the Function Information Collection result.
