Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 2121
// Total lines: 183

//----- (000000014010CB6C) ----------------------------------------------------
__int64 __fastcall DnsOls_RefreshSignaturesForZone(struct _zone_info *a1)
{
  struct _DnsTreeNode *v1; // r15
  unsigned int v3; // edi
  _QWORD *v4; // r12
  bool v5; // r14
  CDnsClientSubnetRecordsTrie *v6; // rcx
  __int64 v7; // rcx
  const char *v8; // r9
  int v9; // esi
  unsigned int refreshed; // eax
  __int64 v11; // rdx
  __int64 v12; // r8
  unsigned int v13; // r9d
  unsigned int SnapShot_ScopeMap; // eax
  __int64 v15; // rsi
  int v16; // r15d
  struct _DnsTreeNode *v17; // r9
  unsigned int v18; // eax
  __int64 v19; // rdx
  __int64 v20; // r8
  int v21; // r9d
  unsigned int v23; // [rsp+90h] [rbp+48h] BYREF
  int v24; // [rsp+98h] [rbp+50h] BYREF
  unsigned __int64 v25; // [rsp+A0h] [rbp+58h] BYREF
  _QWORD *v26; // [rsp+A8h] [rbp+60h] BYREF

  v1 = (struct _DnsTreeNode *)*((_QWORD *)a1 + 5);
  v3 = 0;
  v25 = 0i64;
  v4 = 0i64;
  v26 = 0i64;
  v24 = 0;
  v23 = 0;
  if ( *((int *)a1 + 108) > 0 || (*((_DWORD *)a1 + 99) & 0x2000) != 0 )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_s(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x4Bu,
        (__int64)&WPP_9f96d4c672f338bf067ce342b88232b8_Traceguids,
        *((const char **)a1 + 2));
    }
  }
  else if ( v1 )
  {
    v5 = 0;
    if ( (*((_BYTE *)a1 + 1040) & 2) != 0 || (*((_BYTE *)a1 + 388) & 1) == 0 )
    {
      if ( !*((_DWORD *)a1 + 278)
        || (dword_1401B9714 = Dns_GetCurrentTimeInSeconds(), (unsigned int)dword_1401B9714 >= *((_DWORD *)a1 + 278)) )
      {
        v5 = 1;
      }
    }
    if ( dword_1401B99FC )
    {
      v6 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
      {
        WPP_SF_s(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x4Cu,
          (__int64)&WPP_9f96d4c672f338bf067ce342b88232b8_Traceguids,
          *((const char **)a1 + 2));
        v6 = WPP_GLOBAL_Control;
      }
      v5 = 1;
    }
    else
    {
      v6 = WPP_GLOBAL_Control;
    }
    if ( v6 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)v6 + 17) & 0x200000) != 0
      && *((_BYTE *)v6 + 65) >= 5u )
    {
      v7 = *((_QWORD *)v6 + 7);
      v8 = "but not";
      if ( v5 )
        v8 = "and";
      WPP_SF_ss(v7, 0x4Du, (__int64)&WPP_9f96d4c672f338bf067ce342b88232b8_Traceguids, v8, *((_QWORD *)a1 + 2));
    }
    v9 = *((_DWORD *)a1 + 128);
    refreshed = refreshSignatures(&v25, &v23, a1, v1, v5);
    v3 = refreshed;
    if ( v25 )
    {
      if ( !refreshed && (v9 != *((_DWORD *)a1 + 128) || (v3 = refreshSOASignature(&v25, v23, a1)) == 0) )
        Xfr_SendNotify((__int64)a1, v11, v12, v13);
    }
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
    {
      WPP_SF_Dds(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x4Eu,
        (__int64)&WPP_9f96d4c672f338bf067ce342b88232b8_Traceguids,
        v3,
        dword_1401B9714,
        *((_QWORD *)a1 + 2));
    }
    if ( g_fDnsServiceExit != 1 && *((int *)a1 + 108) <= 0 && (*((_DWORD *)a1 + 99) & 0x2000) == 0 )
    {
      SnapShot_ScopeMap = Get_SnapShot_ScopeMap(*((_QWORD *)a1 + 20), *((_QWORD *)a1 + 21), 1, v13, &v24, &v26);
      v4 = v26;
      v3 = SnapShot_ScopeMap;
      if ( !SnapShot_ScopeMap )
      {
        if ( v24 )
        {
          v15 = (__int64)v26;
          if ( v26 )
          {
            do
            {
              v16 = *((_DWORD *)a1 + 128);
              v17 = *(struct _DnsTreeNode **)(*(_QWORD *)v15 + 40i64);
              v25 = 0i64;
              v18 = refreshSignatures(&v25, &v23, *(struct _zone_info **)v15, v17, v5);
              v3 = v18;
              if ( v25 )
              {
                if ( !v18 && (v16 != *((_DWORD *)a1 + 128) || (v3 = refreshSOASignature(&v25, v23, a1)) == 0) )
                  Xfr_SendNotify((__int64)a1, v19, v20, v21);
              }
              if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
                && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
              {
                WPP_SF_DDSs(
                  *((_QWORD *)WPP_GLOBAL_Control + 7),
                  *(_QWORD *)v15,
                  v20,
                  v3,
                  dword_1401B9714,
                  *(_QWORD *)(*(_QWORD *)v15 + 192i64),
                  *(_QWORD *)(*(_QWORD *)v15 + 16i64));
              }
              if ( v3 && (g_fDnsServiceExit == 1 || *((int *)a1 + 108) > 0 || (*((_DWORD *)a1 + 99) & 0x2000) != 0) )
                break;
              v15 = *(_QWORD *)(v15 + 8);
            }
            while ( v15 );
            v4 = v26;
          }
        }
        dword_1401B9714 = Dns_GetCurrentTimeInSeconds();
        *((_DWORD *)a1 + 276) = dword_1401B9714;
        DnsOls_SetZoneSigRefreshTime((__int64)a1, v5 ? 4 : 0);
      }
    }
  }
  Free_ScopeList(v4);
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
  {
    WPP_SF_Ds(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x50u,
      (__int64)&WPP_9f96d4c672f338bf067ce342b88232b8_Traceguids,
      v3,
      *((_QWORD *)a1 + 2));
  }
  return v3;
}
// 14010CCF2: variable 'v11' is possibly undefined
// 14010CCF2: variable 'v12' is possibly undefined
// 14010CCF2: variable 'v13' is possibly undefined
// 14010CE18: variable 'v19' is possibly undefined
// 14010CE18: variable 'v20' is possibly undefined
// 14010CE18: variable 'v21' is possibly undefined
// 1401B9714: using guessed type int dword_1401B9714;
// 1401B99FC: using guessed type int dword_1401B99FC;
// 1401B9A40: using guessed type int g_fDnsServiceExit;
