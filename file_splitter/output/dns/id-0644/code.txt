Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 644
// Total lines: 135

//----- (00000001400595C8) ----------------------------------------------------
unsigned int __fastcall LogDnssecSignZone(int a1, __int64 a2)
{
  unsigned int v4; // eax
  UINT v5; // ecx
  UINT v6; // ecx
  UINT v7; // ecx
  UINT v8; // ecx
  UINT v9; // ecx
  UINT v10; // ecx
  unsigned int result; // eax
  __int128 v12; // [rsp+A0h] [rbp-80h]
  __int128 v13; // [rsp+B0h] [rbp-70h]
  __int128 v14; // [rsp+C0h] [rbp-60h]
  WCHAR v15[64]; // [rsp+130h] [rbp+10h] BYREF
  WCHAR v16[64]; // [rsp+1B0h] [rbp+90h] BYREF
  WCHAR v17[64]; // [rsp+230h] [rbp+110h] BYREF
  WCHAR v18[64]; // [rsp+2B0h] [rbp+190h] BYREF
  WCHAR v19[64]; // [rsp+330h] [rbp+210h] BYREF
  WCHAR v20[64]; // [rsp+3B0h] [rbp+290h] BYREF
  WCHAR Buffer[64]; // [rsp+430h] [rbp+310h] BYREF

  memset_0(Buffer, 0, sizeof(Buffer));
  memset_0(v20, 0, sizeof(v20));
  memset_0(v15, 0, sizeof(v15));
  memset_0(v19, 0, sizeof(v19));
  memset_0(v18, 0, sizeof(v18));
  memset_0(v17, 0, sizeof(v17));
  memset_0(v16, 0, sizeof(v16));
  v12 = *(_OWORD *)(a2 + 1040);
  v14 = *(_OWORD *)(a2 + 1072);
  v13 = *(_OWORD *)(a2 + 1056);
  Dns_GetResourceString(((v12 & 0x10) != 0) + 12005, Buffer, 64i64);
  v4 = ((unsigned int)v12 >> 9) & 7;
  switch ( v4 )
  {
    case 1u:
      v5 = 12017;
      break;
    case 2u:
      v5 = 12018;
      break;
    case 4u:
      v5 = 12019;
      break;
    case 3u:
      v5 = 12043;
      break;
    case 5u:
      v5 = 12044;
      break;
    case 6u:
      v5 = 12045;
      break;
    default:
      v5 = 12046;
      if ( v4 != 7 )
        v5 = 12016;
      break;
  }
  Dns_GetResourceString(v5, v15, 64i64);
  v6 = 12001;
  if ( (v12 & 0x1C0) == 0 )
    v6 = 12002;
  Dns_GetResourceString(v6, v20, 64i64);
  v7 = 12001;
  if ( (v12 & 0x1000) == 0 )
    v7 = 12002;
  Dns_GetResourceString(v7, v19, 64i64);
  v8 = 12001;
  if ( (v12 & 2) == 0 )
    v8 = 12002;
  Dns_GetResourceString(v8, v18, 64i64);
  v9 = 12001;
  if ( (v12 & 0x20) == 0 )
    v9 = 12002;
  Dns_GetResourceString(v9, v17, 64i64);
  v10 = 12001;
  if ( (v12 & 0x2000) == 0 )
    v10 = 12002;
  result = (unsigned int)Dns_GetResourceString(v10, v16, 64i64);
  if ( a1 )
  {
    if ( (dword_1401B9104 & 2) != 0 )
      return Template_zzzqzqzzsqqzqzzqqq(
               BYTE5(v12),
               &DNS_EVENT_ZONE_RESIGN,
               *(const unsigned __int16 **)(a2 + 24),
               Buffer,
               v20,
               v13,
               v15,
               SBYTE4(v13),
               v19,
               v18,
               *((const char **)&v14 + 1),
               SBYTE4(v12),
               SBYTE6(v12),
               v17,
               SBYTE5(v12),
               *((const unsigned __int16 **)&v12 + 1),
               v16,
               v14,
               SBYTE12(v13),
               SBYTE8(v13));
  }
  else if ( (dword_1401B9104 & 2) != 0 )
  {
    return Template_zzzqzqzzsqqzqzzqqq(
             BYTE5(v12),
             &DNS_EVENT_ZONE_SIGN,
             *(const unsigned __int16 **)(a2 + 24),
             Buffer,
             v20,
             v13,
             v15,
             SBYTE4(v13),
             v19,
             v18,
             *((const char **)&v14 + 1),
             SBYTE4(v12),
             SBYTE6(v12),
             v17,
             SBYTE5(v12),
             *((const unsigned __int16 **)&v12 + 1),
             v16,
             v14,
             SBYTE12(v13),
             SBYTE8(v13));
  }
  return result;
}
// 140186648: using guessed type EVENT_DESCRIPTOR DNS_EVENT_ZONE_RESIGN;
// 140186B78: using guessed type EVENT_DESCRIPTOR DNS_EVENT_ZONE_SIGN;
// 1401B9104: using guessed type int dword_1401B9104;
