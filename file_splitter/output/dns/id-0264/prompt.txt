Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 264
// Total lines: 720

//----- (0000000140022764) ----------------------------------------------------
__int64 __fastcall loadDatabaseAndRunDns(__int64 a1, __int64 a2)
{
  int CurrentTimeInSeconds; // eax
  __int64 v3; // rcx
  __int64 v4; // rax
  _QWORD *v5; // rax
  CDnsClientSubnetRecordsTrie *v6; // rcx
  int LastError; // eax
  __int64 v8; // rdx
  __int64 v9; // rcx
  DWORD updated; // edi
  unsigned __int16 v11; // dx
  int v12; // r9d
  char *v13; // rax
  BOOL v14; // eax
  unsigned __int16 v15; // dx
  int v16; // r9d
  int v17; // eax
  int v18; // eax
  int v19; // eax
  DWORD v20; // eax
  __int64 v21; // rdx
  __int64 v22; // rcx
  __int64 v23; // r8
  int v24; // r9d
  DWORD v25; // eax
  __int64 v27; // rdx
  __int128 v28; // xmm0
  unsigned __int16 v29; // r8
  unsigned __int16 **v30; // r9
  int v31; // eax
  __int64 v32; // rdx
  int v33; // edi
  unsigned int v34; // edi
  int v35; // r13d
  __int64 v36; // rcx
  __int64 v37; // rdx
  int v38; // eax
  __int64 dwFlags; // [rsp+20h] [rbp-58h]
  int v40; // [rsp+28h] [rbp-50h]
  __int128 v41; // [rsp+40h] [rbp-38h] BYREF
  LPCWSTR v42; // [rsp+80h] [rbp+8h] BYREF
  HCRYPTPROV phProv; // [rsp+88h] [rbp+10h] BYREF

  LODWORD(v42) = 0;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 1) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    CurrentTimeInSeconds = GetCurrentTimeInSeconds(a1, a2);
    WPP_SF_D(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x22u,
      (__int64)&WPP_304b099b29a233e472f3414eef0e1fd4_Traceguids,
      CurrentTimeInSeconds);
  }
  g_ServerState = 1;
  pServerLdap = 0i64;
  g_AttemptingDsOpen = 0;
  g_bDisabledDs = 0;
  g_AppendZoneLength = 0;
  g_dnMachineAcct = 0i64;
  g_pwszDnsContainerDN = 0i64;
  g_pwsServerName = 0i64;
  g_fSecurityPackageInitialized = 0;
  pcsLdap = 0i64;
  g_ZoneNotifyMsgId = -1;
  g_bDsFirstTimeRun = 0;
  if ( DSEAttributes[0] )
  {
    v3 = 0i64;
    v4 = 0i64;
    do
    {
      DSEAttributes[v4 + 2] = 0i64;
      ++v3;
      v4 = 3 * v3;
    }
    while ( DSEAttributes[3 * v3] );
  }
  g_liDpInitialized = 0;
  memset_0(&g_DpCS, 0, sizeof(g_DpCS));
  g_DpList = 0i64;
  qword_1401B8D28 = 0i64;
  g_DpListEntryCount = 0;
  g_pLegacyDp = 0i64;
  g_pDomainDp = 0i64;
  g_pForestDp = 0i64;
  g_pFsmo = 0i64;
  g_pszDomainDefaultDpFqdn = 0i64;
  g_pszForestDefaultDpFqdn = 0i64;
  g_fDcPromoZonesPresent = 1;
  g_dwNextDpAutoEnlistTime = 0;
  g_dwDpAutoEnlistInterval = 0;
  g_dwLastPartitionPollTime = 0;
  g_dwLastDpPollTime = 0;
  g_dwLastDcpromoZoneMigrateCheck = 0;
  g_ftimeSystemBoot = 0i64;
  g_crtServiceStartTime = 0i64;
  g_bNbstatInitialized = 0;
  cNbtInterfaceCount = 0;
  dwInterfaceBitmask = 0;
  dwNbtBufferLength = 0;
  pNbstatQueue = 0i64;
  pNbstatPrivateQueue = 0i64;
  g_VersionInitialized = 0;
  memset_0(&g_VersionCritSec, 0, sizeof(g_VersionCritSec));
  g_prrVersionTxt = 0i64;
  g_ThreadCount = 0;
  g_bRpcInitialized = 0;
  mg_TcpConnectionListInitialized = 0;
  g_fUsingSecondary = 0;
  v5 = &TimeoutBinArray;
  do
  {
    v5[1] = v5;
    *v5 = v5;
    v5 += 2;
  }
  while ( (__int64)v5 < (__int64)&CheckTimeoutBin );
  TimeoutBaseTime = dword_1401B9714;
  CurrentTimeoutBin = 0;
  CheckTimeoutBin = -2;
  CurrentDelayedFreeList = 0i64;
  CoolingDelayedFreeList = 0i64;
  CoolingDelayedCount = 0;
  CurrentDelayedCount = 0;
  if ( (unsigned int)DnsInitializeCriticalSection(&csTimeoutLock) )
    goto LABEL_201;
  hFastCachePurgeEvent = CreateEventW(0i64, 1, 0, 0i64);
  if ( !hFastCachePurgeEvent )
  {
    v6 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x100) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
    {
      goto LABEL_202;
    }
    LastError = GetLastError();
    WPP_SF_D(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0xAu,
      (__int64)&WPP_fcef9ab22f0836151509c33d06164dff_Traceguids,
      LastError);
LABEL_201:
    v6 = WPP_GLOBAL_Control;
LABEL_202:
    updated = 14;
    goto LABEL_203;
  }
  bFastCachePurgeHappening = 0;
  bFastCachePurgeEventRaised = 0;
  Reg_Init();
  Stats_Initialize(v9, v8);
  Security_Initialize();
  Stats_InitPerfmonCounterBlock();
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x4000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0xAu, (__int64)&WPP_66b23b5e6a3832dd7e122b01e64c7d31_Traceguids);
  }
  g_DynamicForwardersLock = Lock_Create();
  updated = 0;
  if ( !g_DynamicForwardersLock )
    updated = 14;
  v6 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x4000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_D(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0xBu,
      (__int64)&WPP_66b23b5e6a3832dd7e122b01e64c7d31_Traceguids,
      updated);
    v6 = WPP_GLOBAL_Control;
  }
  if ( updated )
  {
    if ( v6 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
    {
      if ( (*((_BYTE *)v6 + 68) & 1) != 0 && *((_BYTE *)v6 + 65) >= 2u )
      {
        v11 = 35;
LABEL_31:
        v12 = updated;
LABEL_32:
        WPP_SF_D(*((_QWORD *)v6 + 7), v11, (__int64)&WPP_304b099b29a233e472f3414eef0e1fd4_Traceguids, v12);
LABEL_33:
        v6 = WPP_GLOBAL_Control;
        goto LABEL_203;
      }
      goto LABEL_203;
    }
    goto LABEL_207;
  }
  if ( !(unsigned int)Config_Initialize() )
  {
    updated = 13;
    goto LABEL_33;
  }
  LODWORD(qword_1401B9774) = qword_1401B9774 | 0x10;
  qword_1401B9780 = qword_1401B9774;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 1) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    v13 = ctime(&Time);
    WPP_SF_Dds(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x24u,
      (__int64)&WPP_304b099b29a233e472f3414eef0e1fd4_Traceguids,
      dword_1401B9714,
      Time,
      (__int64)v13);
  }
  phProv = 0i64;
  updated = DnsInitializeCriticalSection(&g_csDnsRand);
  if ( !updated )
  {
    v14 = CryptAcquireContextW(&phProv, 0i64, L"Microsoft Strong Cryptographic Provider", 1u, 0xF0000000);
    phProv &= -(__int64)v14;
  }
  g_hCryptProv = phProv;
  g_wRandArrayIdx = -1;
  if ( updated )
  {
    v6 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
      goto LABEL_207;
    if ( (*((_BYTE *)WPP_GLOBAL_Control + 68) & 1) == 0 || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
      goto LABEL_203;
    v15 = 37;
    goto LABEL_47;
  }
  v17 = DnsInitializeCriticalSection(&DnsVal_Lock);
  updated = v17;
  v6 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 25) >= 4u )
  {
    WPP_SF_D(*((_QWORD *)WPP_GLOBAL_Control + 2), 0xAu, (__int64)&WPP_c53e2308f6cf3329db3757b8a77c9921_Traceguids, v17);
    v6 = WPP_GLOBAL_Control;
  }
  if ( updated )
  {
    if ( v6 == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
      goto LABEL_207;
    if ( (*((_BYTE *)v6 + 68) & 1) == 0 || *((_BYTE *)v6 + 65) < 4u )
      goto LABEL_203;
    v15 = 38;
LABEL_47:
    v16 = updated;
LABEL_48:
    WPP_SF_D(*((_QWORD *)v6 + 7), v15, (__int64)&WPP_304b099b29a233e472f3414eef0e1fd4_Traceguids, v16);
    goto LABEL_33;
  }
  hDnsContinueEvent = CreateEventW(0i64, 1, 0, 0i64);
  hDnsShutdownEvent = CreateEventW(0i64, 1, 0, 0i64);
  if ( !hDnsShutdownEvent || !hDnsContinueEvent )
  {
    v20 = GetLastError();
    updated = v20;
    v6 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
      goto LABEL_207;
    if ( (*((_BYTE *)WPP_GLOBAL_Control + 68) & 1) == 0 || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
      goto LABEL_203;
    v15 = 39;
LABEL_86:
    v16 = v20;
    goto LABEL_48;
  }
  Log_InitializeLogging(0, 0, 0i64);
  if ( (qword_1401B9780 & 0x20) != 0 && (unsigned int)Log_EnterLock() )
  {
    g_pszCurrentLogLevelString = (__int64)"INIT";
    Log_Printf("Server settings have been successfully loaded\n");
    g_pszCurrentLogLevelString = 0i64;
    Log_LeaveLock();
  }
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 1) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x28u, (__int64)&WPP_304b099b29a233e472f3414eef0e1fd4_Traceguids);
  }
  v18 = RegisterTelemetryProvider();
  if ( v18 )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 1) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_D(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x29u,
        (__int64)&WPP_304b099b29a233e472f3414eef0e1fd4_Traceguids,
        v18);
    }
  }
  else if ( Thread_Create("UTC", (__int64 (__fastcall *)(__int64))Telemetry_Thread, 0i64, 0) )
  {
    if ( (qword_1401B9780 & 0x20) != 0 && (unsigned int)Log_EnterLock() )
    {
      g_pszCurrentLogLevelString = (__int64)"INIT";
      Log_Printf("Server UTC logging has been initialized\n");
      g_pszCurrentLogLevelString = 0i64;
      Log_LeaveLock();
    }
  }
  else
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 1) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      v19 = GetLastError();
      WPP_SF_D(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x2Au,
        (__int64)&WPP_304b099b29a233e472f3414eef0e1fd4_Traceguids,
        v19);
    }
    g_isRegisteredForUTC = 0;
  }
  v20 = DnsInitializeCriticalSection(&g_csGlobalNames);
  updated = v20;
  if ( v20 )
  {
    v6 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
      goto LABEL_207;
    if ( (*((_BYTE *)WPP_GLOBAL_Control + 68) & 1) == 0 || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
      goto LABEL_203;
    v15 = 43;
    goto LABEL_86;
  }
  if ( g_fDnsServiceExit == 1 )
  {
LABEL_88:
    updated = 0;
    goto LABEL_33;
  }
  g_pPacketFreeListHead = 0i64;
  g_PacketFreeListCount = 0;
  if ( (unsigned int)DnsInitializeCriticalSection(&g_PacketListCs) || !(unsigned int)Recurse_InitializeRecursion() )
  {
    updated = 14;
    goto LABEL_33;
  }
  v20 = DnsRq_Initialize();
  updated = v20;
  if ( v20 )
  {
    v6 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
      goto LABEL_207;
    if ( (*((_BYTE *)WPP_GLOBAL_Control + 68) & 1) == 0 || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
      goto LABEL_203;
    v15 = 44;
    goto LABEL_86;
  }
  updated = Up_InitializeUpdateProcessing();
  if ( updated )
    goto LABEL_33;
  memset_0(&BadSenderArray, 0, 0x2A8ui64);
  ICS_Notify(1);
  Version_Initialize();
  updated = Sock_ReadAndOpenListeningSockets(v22, v21, v23, v24);
  if ( updated )
    goto LABEL_33;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 1) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x2Du, (__int64)&WPP_304b099b29a233e472f3414eef0e1fd4_Traceguids);
  }
  IpNotify_StartListening();
  v25 = DnsOls_Initialize();
  updated = v25;
  if ( v25 )
  {
    v6 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
      goto LABEL_207;
    if ( (*((_BYTE *)WPP_GLOBAL_Control + 68) & 1) == 0 || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
      goto LABEL_203;
    v11 = 46;
    goto LABEL_108;
  }
  g_ZoneCount = 0;
  qword_1401BA3B8 = (__int64)&listheadZone;
  listheadZone = (__int64)&listheadZone;
  if ( (unsigned int)DnsInitializeCriticalSection(&csZoneList) )
    goto LABEL_33;
  if ( !(unsigned int)Dbase_Initialize(&g_Database, 0i64) )
    return 13i64;
  Dp_Initialize();
  g_fServiceStarting = 1;
  updated = Boot_LoadDatabase(0i64);
  if ( !updated && g_fDnsServiceExit != 1 )
    updated = Boot_LoadVirtualInstances();
  g_fServiceStarting = 0;
  if ( g_fDnsServiceExit == 1 )
    goto LABEL_88;
  if ( !updated )
  {
    if ( !Thread_Create("Timeout_Thread", (__int64 (__fastcall *)(__int64))Timeout_Thread, 0i64, 0) )
      goto LABEL_127;
    if ( g_fRegFirstTimeRun && g_bDsFirstTimeRun && g_ulDCsInForest == 1 && !dword_1401B9724 )
      Dnssrv_AutoConfigure(0, -1, 0i64);
    updated = Plugin_Initialize();
    if ( updated )
    {
      v42 = lpLibFileName;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 1) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_D(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x31u,
          (__int64)&WPP_304b099b29a233e472f3414eef0e1fd4_Traceguids,
          updated);
      }
      v28 = DNS_EVENT_PLUGIN_INIT_FAILED;
      v29 = 1;
      v40 = updated;
      dwFlags = 1i64;
      v30 = (unsigned __int16 **)&v42;
    }
    else
    {
      if ( lpLibFileName && *lpLibFileName && (dword_1401B9144 & 0x8000) != 0 )
        Template_zs(Microsoft_Windows_DNS_Server_ServiceHandle, &DNS_EVENT_PLUGIN_DLL_LOAD_OK, lpLibFileName, Str);
      v31 = Rpc_Initialize();
      v33 = v31;
      if ( v31 )
      {
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 1) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          WPP_SF_D(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x32u,
            (__int64)&WPP_304b099b29a233e472f3414eef0e1fd4_Traceguids,
            v31);
        }
        v41 = DNS_EVENT_RPC_SERVER_INIT_FAILED;
        Eventlog_LogEvent((__int64)&v41, v32, 0, 0i64, 0i64, v33, 0, 0i64);
      }
      if ( !g_LoadCount )
        Service_ServiceControlAnnounceStart();
      Dns_MaintainNtdsDependency(0, &g_fDnsServiceExit, (int *)&v42);
      if ( !(_DWORD)v42 )
      {
        Sock_StartReceiveOnUdpSockets();
        v34 = dword_1401B99E8;
        if ( !dword_1401B99E8 )
          v34 = g_ProcessorCount;
        v35 = 0;
        if ( v34 )
        {
          while ( Thread_Create("UDP Listen", (__int64 (__fastcall *)(__int64))Udp_RecvThread, 0i64, 0) )
          {
            if ( ++v35 >= v34 )
              goto LABEL_165;
          }
          v6 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 1) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            WPP_SF_D(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x28u,
              (__int64)&WPP_c6f5dbb53293365598fc41978a1596e7_Traceguids,
              v35);
            v6 = WPP_GLOBAL_Control;
          }
          updated = 1054;
          goto LABEL_203;
        }
LABEL_165:
        if ( Thread_Create("DsPoll", (__int64 (__fastcall *)(__int64))Ds_PollingThread, 0i64, 0) )
        {
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            WPP_SF_(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x31u,
              (__int64)&WPP_7b1a01b88f443306118dfd5b288785fb_Traceguids);
          }
          g_bAbortScavenging = 0;
          g_ScavengeLock = -1;
          Aging_UpdateAgingTime();
          g_LastScavengeTime = dword_1401B9714;
          Scavenge_TimeReset();
          g_LastScavengeTime = 0;
          updated = 0;
          dword_1401B9714 = Dns_GetCurrentTimeInSeconds();
          Dp_Poll(v36, dword_1401B9714, 1);
          if ( Thread_Create("KeyRollover", (__int64 (__fastcall *)(__int64))DnsOls_KeyRolloverThread, 0i64, 0) )
          {
            if ( Thread_Create("Re-sign", (__int64 (__fastcall *)(__int64))DnsOls_ResignThread, 0i64, 0) )
            {
              dword_1401B9708 = 1;
              if ( !g_LoadCount )
              {
                v41 = DNS_EVENT_STARTUP_OK;
                Eventlog_LogEvent((__int64)&v41, v37, 0, 0i64, 0i64, 0, 0, 0i64);
              }
              g_ServerState = 2;
              Dbg_ThreadHandleArray();
              g_fDnsThreadAlert = g_fDnsServiceExit == 1;
              SetEvent(hDnsContinueEvent);
              if ( !dword_1401B9750 && !g_fDsReadOnlyDcMode && dword_1401B98F8 )
              {
                DNSSEC_Read5011State();
                DNSSEC_ActiveRefreshAllTrustPoints(0);
              }
              if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 1) != 0
                && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
              {
                WPP_SF_D(
                  *((_QWORD *)WPP_GLOBAL_Control + 7),
                  0x36u,
                  (__int64)&WPP_304b099b29a233e472f3414eef0e1fd4_Traceguids,
                  g_LoadCount);
              }
              Tcp_Receiver();
              v6 = WPP_GLOBAL_Control;
              g_ServerState = 3;
              if ( g_bHitException && dword_1401B9708 )
              {
                v38 = g_bDoReload;
                if ( dword_1401B9730 )
                  v38 = 1;
                g_bDoReload = v38;
              }
              if ( g_bDoReload )
              {
                reloadShutdown();
                return 0i64;
              }
              goto LABEL_203;
            }
            v25 = GetLastError();
            updated = v25;
            v6 = WPP_GLOBAL_Control;
            if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
              goto LABEL_207;
            if ( (*((_BYTE *)WPP_GLOBAL_Control + 68) & 1) == 0 || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
              goto LABEL_203;
            v11 = 53;
          }
          else
          {
            v25 = GetLastError();
            updated = v25;
            v6 = WPP_GLOBAL_Control;
            if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
              goto LABEL_207;
            if ( (*((_BYTE *)WPP_GLOBAL_Control + 68) & 1) == 0 || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
              goto LABEL_203;
            v11 = 52;
          }
LABEL_108:
          v12 = v25;
          goto LABEL_32;
        }
LABEL_127:
        updated = GetLastError();
        goto LABEL_33;
      }
      updated = 1068;
      v28 = DNS_EVENT_STARTED_FAILED_DEPENDENCY;
      v29 = 0;
      v40 = 1068;
      dwFlags = 0i64;
      v30 = 0i64;
    }
    v41 = v28;
    Eventlog_LogEvent((__int64)&v41, v27, v29, v30, (unsigned __int8 *)dwFlags, v40, 0, 0i64);
    goto LABEL_33;
  }
  v6 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_D(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x2Fu,
      (__int64)&WPP_304b099b29a233e472f3414eef0e1fd4_Traceguids,
      updated);
    v6 = WPP_GLOBAL_Control;
  }
  if ( updated <= 0x11D000 )
    goto LABEL_203;
  updated = 9608;
  if ( v6 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
  {
    if ( (*((_BYTE *)v6 + 68) & 2) != 0 && *((_BYTE *)v6 + 65) >= 4u )
    {
      v11 = 48;
      goto LABEL_31;
    }
LABEL_203:
    if ( v6 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)v6 + 68) & 1) != 0
      && *((_BYTE *)v6 + 65) >= 4u )
    {
      WPP_SF_D(*((_QWORD *)v6 + 7), 0x38u, (__int64)&WPP_304b099b29a233e472f3414eef0e1fd4_Traceguids, updated);
    }
  }
LABEL_207:
  g_ServerState = 3;
  normalShutdown(updated);
  return updated;
}
// 140022A1C: variable 'v9' is possibly undefined
// 140022A1C: variable 'v8' is possibly undefined
// 140022EF9: variable 'v22' is possibly undefined
// 140022EF9: variable 'v21' is possibly undefined
// 140022EF9: variable 'v23' is possibly undefined
// 140022EF9: variable 'v24' is possibly undefined
// 140023130: variable 'v27' is possibly undefined
// 1400231D3: variable 'v32' is possibly undefined
// 14002333E: variable 'v36' is possibly undefined
// 140023423: variable 'v37' is possibly undefined
// 140183D98: using guessed type __int64 __fastcall GetCurrentTimeInSeconds(_QWORD, _QWORD);
// 140186118: using guessed type __int128 DNS_EVENT_PLUGIN_INIT_FAILED;
// 1401862D8: using guessed type __int128 DNS_EVENT_STARTED_FAILED_DEPENDENCY;
// 140186A98: using guessed type __int128 DNS_EVENT_STARTUP_OK;
// 140186B28: using guessed type __int128 DNS_EVENT_RPC_SERVER_INIT_FAILED;
// 1401B6B00: using guessed type PWSTR DSEAttributes[3];
// 1401B7EA0: using guessed type int g_ScavengeLock;
// 1401B7EB0: using guessed type int g_ServerState;
// 1401B7EB4: using guessed type int g_fDnsThreadAlert;
// 1401B7EF0: using guessed type int g_fDcPromoZonesPresent;
// 1401B7EF4: using guessed type int g_ulDCsInForest;
// 1401B8C10: using guessed type int g_bAbortScavenging;
// 1401B8C18: using guessed type int g_LastScavengeTime;
// 1401B8C38: using guessed type __int64 g_prrVersionTxt;
// 1401B8C40: using guessed type int g_VersionInitialized;
// 1401B8C54: using guessed type int g_fServiceStarting;
// 1401B8C60: using guessed type int g_bHitException;
// 1401B8C64: using guessed type int g_bDoReload;
// 1401B8C68: using guessed type int g_LoadCount;
// 1401B8C94: using guessed type int g_fDsReadOnlyDcMode;
// 1401B8C98: using guessed type __int64 g_pDomainDp;
// 1401B8CA0: using guessed type __int64 g_pForestDp;
// 1401B8CC0: using guessed type __int64 g_crtServiceStartTime;
// 1401B8CD0: using guessed type int g_dwLastDcpromoZoneMigrateCheck;
// 1401B8CD4: using guessed type int g_dwLastDpPollTime;
// 1401B8CD8: using guessed type int g_dwLastPartitionPollTime;
// 1401B8CDC: using guessed type int g_dwDpAutoEnlistInterval;
// 1401B8CE0: using guessed type int g_dwNextDpAutoEnlistTime;
// 1401B8D08: using guessed type __int64 g_pFsmo;
// 1401B8D10: using guessed type __int64 g_pLegacyDp;
// 1401B8D18: using guessed type int g_DpListEntryCount;
// 1401B8D20: using guessed type __int64 g_DpList;
// 1401B8D28: using guessed type __int64 qword_1401B8D28;
// 1401B8D30: using guessed type int g_liDpInitialized;
// 1401B8D40: using guessed type int g_bDsFirstTimeRun;
// 1401B8F28: using guessed type __int64 g_pszCurrentLogLevelString;
// 1401B9020: using guessed type int g_fRegFirstTimeRun;
// 1401B9034: using guessed type int g_bRpcInitialized;
// 1401B907C: using guessed type int bFastCachePurgeHappening;
// 1401B9080: using guessed type int bFastCachePurgeEventRaised;
// 1401B9144: using guessed type int dword_1401B9144;
// 1401B9170: using guessed type void *g_DynamicForwardersLock;
// 1401B9190: using guessed type int g_isRegisteredForUTC;
// 1401B9708: using guessed type int dword_1401B9708;
// 1401B9714: using guessed type int dword_1401B9714;
// 1401B9724: using guessed type int dword_1401B9724;
// 1401B9730: using guessed type int dword_1401B9730;
// 1401B9750: using guessed type int dword_1401B9750;
// 1401B9774: using guessed type __int64 qword_1401B9774;
// 1401B9780: using guessed type __int64 qword_1401B9780;
// 1401B98F8: using guessed type int dword_1401B98F8;
// 1401B99E8: using guessed type int dword_1401B99E8;
// 1401B9A40: using guessed type int g_fDnsServiceExit;
// 1401B9E3C: using guessed type int g_fSecurityPackageInitialized;
// 1401BA10C: using guessed type int g_wRandArrayIdx;
// 1401BA368: using guessed type int g_fUsingSecondary;
// 1401BA3B0: using guessed type __int64 listheadZone;
// 1401BA3B8: using guessed type __int64 qword_1401BA3B8;
// 1401BA3C0: using guessed type int g_ZoneCount;
// 1401BA4B8: using guessed type char CurrentTimeoutBin;
// 1401BB4C0: using guessed type char CheckTimeoutBin;
// 1401BB508: using guessed type int TimeoutBaseTime;
// 1401BB510: using guessed type __int64 CurrentDelayedFreeList;
// 1401BB518: using guessed type __int64 CoolingDelayedFreeList;
// 1401BB520: using guessed type int CurrentDelayedCount;
// 1401BB524: using guessed type int CoolingDelayedCount;
// 1401C79E8: using guessed type int mg_TcpConnectionListInitialized;
// 1401CBD80: using guessed type __int64 g_pPacketFreeListHead;
// 1401CBD88: using guessed type int g_PacketFreeListCount;
// 1401CBDC8: using guessed type int cNbtInterfaceCount;
// 1401CBDD8: using guessed type int dwInterfaceBitmask;
// 1401CBDDC: using guessed type int dwNbtBufferLength;
// 1401CBDF8: using guessed type int g_bNbstatInitialized;
// 1401CBE00: using guessed type __int64 pNbstatQueue;
// 1401CBE08: using guessed type __int64 pNbstatPrivateQueue;
// 1401EC320: using guessed type int g_AppendZoneLength;
// 1401EC328: using guessed type __int64 g_pwsServerName;
// 1401EC330: using guessed type int g_bDisabledDs;
// 1401EC338: using guessed type int g_AttemptingDsOpen;
// 1401EC600: using guessed type __int64 g_Database;
##############################
Role: Let's assume that you are an advanced reverse engineer and you are reverse engineering a network driver using IDA Pro, and you are also familiar with the RFC documentation. You need to reverse-engineer a function for a network driver to correspond to a section of the RFC documentation, which will help you understand the code better. The driver you're reversing is Schannel.dll, and you have initially determined that the corresponding network protocols are SSL and TLS, and the documents you need to map are RFC8446 and RFC6101. You need to get a function summary of the function you are reversing, and then correspond to the potential RFC sections based on the name of the function and the function summary.
Function Background: The function is reverse engineered from the driver file Schannel.dll on Windows platform. Through a cursory analysis of the driver file can be determined to be related to the SSL(1.3), TLS(3.0) protocol, that is, with RFC8446, RFC6101 strong correlation.

Output Function Summary: Summarizes the function's functionality with several phrases instead of sentences, focuses on covering the function's control flow information, and highlights the protocol function points implemented by the function. Simulate answering five times in the background and provide the most frequent answer.

Retrieve document sections: giving matches for document sections(FunctionMatchRFCResult) that the code may related to. NOTE if the code is only business related(i.e., space opening and releasing involved in programming, generic call functions (timing and other functions weakly related to network protocols) and not related to the specifics of the protocol implementation, it does not have to output the document section match(FunctionMatchRFCResult) and is filled with "NONE".

Retrieve document sections Thinking Chain: The function code is matched with the RFC document section, and the thinking chain is provided to help you solve the problem better:
	1. Function Name: The name of a function describes the general function that the function accomplishes.
	2. Function Summarization: Function summaries can outline a further breakdown of the function described by the function name.
	3. Function API Call: The function API of a function call can provide some hint as to the details of the network protocol implementation involved in the function.
	4. Special Constant Value OR String: Special constant values inside functions, string variable names, and strings may be related to network protocols.
	5. Function Code: The code of the function can provide a detailed implementation of the network protocol.
Generate Function Information Collection with JSON Format:

{
	"FunctionIndex": "(FILL WITH "File count" with less than four bits are indexed with zeros to make up the four bits.)",
	"FunctionName": "(Full Function Code Name)",
	"FunctionSummarization": [
		"(Function Summary Phrase1)",
		"(Function Summary Phrase2)",
		"(...)"
	],
	"FunctionMatchRFCResult": [
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 1)",
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 2)",
		"(...)"
	],
}

ATTENTION: Remember YOU MUST ONLY output the Function Information Collection result.
