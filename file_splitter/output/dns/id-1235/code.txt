Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 1235
// Total lines: 166

//----- (000000014009F868) ----------------------------------------------------
__int64 Sock_InitializePortExclusionState()
{
  _QWORD *v0; // rax
  unsigned int v1; // ebx
  unsigned __int16 v2; // bp
  CDnsClientSubnetRecordsTrie *v3; // rcx
  unsigned __int16 v4; // dx
  char *v5; // rax
  __int64 v6; // r8
  _QWORD *v7; // r14
  __int16 *v8; // r15
  const char **v9; // r12
  const char *v10; // rax
  int v11; // eax
  int v12; // r11d
  int v13; // r10d
  CDnsClientSubnetRecordsTrie *v14; // rcx
  unsigned int i; // ebp
  unsigned int v17; // [rsp+60h] [rbp+8h] BYREF
  unsigned int v18; // [rsp+68h] [rbp+10h] BYREF

  v0 = (_QWORD *)qword_1401B97C8;
  v1 = 0;
  v2 = 0;
  if ( !qword_1401B97C8 )
  {
    v3 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x2000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      v4 = 45;
LABEL_57:
      WPP_SF_(*((_QWORD *)v3 + 7), v4, (__int64)&WPP_0e6d7f56a09830e1f84833a99c0e37ce_Traceguids);
      return v1;
    }
    return v1;
  }
  if ( *(_QWORD *)qword_1401B97C8 )
  {
    do
    {
      if ( ++v2 == 1000 )
        break;
      ++v0;
    }
    while ( *v0 );
    if ( v2 )
    {
      v5 = (char *)Mem_Alloc(8 * (unsigned int)v2 + 8, 0i64, "ds\\dns\\server\\server\\socket.c", 2387);
      v7 = v5;
      if ( !v5 )
      {
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x2000) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x2Fu, (__int64)&WPP_0e6d7f56a09830e1f84833a99c0e37ce_Traceguids);
        }
        return 14;
      }
      v8 = (__int16 *)(v5 + 6);
      *v5 = 0;
      *((_WORD *)v5 + 3) = 0;
      *(_DWORD *)(v5 + 2) = 49151;
      v9 = (const char **)qword_1401B97C8;
      v10 = *(const char **)qword_1401B97C8;
      if ( !*(_QWORD *)qword_1401B97C8 )
      {
LABEL_28:
        v14 = WPP_GLOBAL_Control;
LABEL_29:
        if ( *v8 )
        {
          if ( v14 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)v14 + 17) & 0x2000) != 0
            && *((_BYTE *)v14 + 65) >= 4u )
          {
            WPP_SF_H(*((_QWORD *)v14 + 7), 0x31u, (__int64)&WPP_0e6d7f56a09830e1f84833a99c0e37ce_Traceguids, *v8);
          }
          for ( i = 0; i < (unsigned __int16)*v8; ++i )
          {
            HIDWORD(v7[i + 1]) = 0;
            if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x2000) != 0
              && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
            {
              WPP_SF_HH(*((_QWORD *)WPP_GLOBAL_Control + 7), i, v6, v7[i + 1]);
            }
          }
          g_DnsPortExclusionState = (__int64)v7;
        }
        else
        {
          if ( v14 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)v14 + 17) & 0x2000) != 0
            && *((_BYTE *)v14 + 65) >= 4u )
          {
            WPP_SF_(*((_QWORD *)v14 + 7), 0x33u, (__int64)&WPP_0e6d7f56a09830e1f84833a99c0e37ce_Traceguids);
          }
          Mem_Free(v7, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\socket.c", 2484);
        }
        return v1;
      }
      while ( 1 )
      {
        v11 = sscanf_s(v10, "%u-%u", &v17, &v18);
        v12 = v18;
        v13 = v17;
        if ( v11 == 2 && v17 <= v18 && v18 )
        {
          if ( v17 )
          {
            if ( v17 > 0xFFFF )
              v13 = 0xFFFF;
            v17 = v13;
          }
          else
          {
            LOWORD(v13) = 1;
            v17 = 1;
          }
          if ( v18 > 0xFFFF )
            v12 = 0xFFFF;
          v18 = v12;
          Sock_AddNewRangeToRangeArray(v13, v12, (__int64)(v7 + 1), v2, (unsigned __int16 *)v8);
          if ( *v8 == v2 )
            goto LABEL_28;
        }
        else
        {
          v14 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x2000) == 0
            || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
          {
            goto LABEL_46;
          }
          WPP_SF_Dd(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x30u,
            (__int64)&WPP_0e6d7f56a09830e1f84833a99c0e37ce_Traceguids,
            v17);
        }
        v14 = WPP_GLOBAL_Control;
LABEL_46:
        v10 = *++v9;
        if ( !*v9 )
          goto LABEL_29;
      }
    }
  }
  v3 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x2000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    v4 = 46;
    goto LABEL_57;
  }
  return v1;
}
// 14009FA92: variable 'v6' is possibly undefined
// 1401B9050: using guessed type __int64 g_DnsPortExclusionState;
// 1401B97C8: using guessed type __int64 qword_1401B97C8;
