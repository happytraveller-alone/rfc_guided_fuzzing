Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 2114
// Total lines: 374

//----- (000000014010A880) ----------------------------------------------------
__int64 __fastcall DnsOls_RefreshSignaturesAtNode(_QWORD *a1, __int64 a2, _DWORD *a3, unsigned __int16 *a4)
{
  unsigned int v4; // r15d
  _DWORD *v6; // rsi
  __int64 v7; // rdi
  _QWORD *v8; // rax
  __int64 v9; // r14
  CDnsClientSubnetRecordsTrie *v10; // r10
  char *v11; // rax
  unsigned __int16 v12; // dx
  __int64 v13; // rcx
  __int64 NextRecord; // rax
  __int64 v15; // rsi
  u_short v16; // cx
  u_short v17; // r12
  char *v18; // rbx
  time_t v19; // rdi
  time_t v20; // rbx
  unsigned __int16 v21; // dx
  __int64 v22; // rcx
  __int64 v23; // rax
  unsigned int v24; // r9d
  _QWORD *v25; // rax
  _WORD *v26; // r10
  _QWORD *v27; // r9
  bool v28; // r11
  __int64 *v29; // rcx
  unsigned __int16 v30; // r8
  _QWORD *v31; // rax
  char v32; // r8
  char *v33; // rdx
  __int64 v34; // rcx
  __int64 i; // rcx
  char *v36; // rax
  const char *v37; // rbx
  char *v38; // rax
  __int64 v40; // [rsp+28h] [rbp-59h]
  __int64 v41; // [rsp+30h] [rbp-51h]
  u_short v42; // [rsp+48h] [rbp-39h] BYREF
  __int64 v43; // [rsp+50h] [rbp-31h]
  char v44; // [rsp+58h] [rbp-29h] BYREF
  char v45; // [rsp+60h] [rbp-21h] BYREF
  char pExceptionObject[24]; // [rsp+68h] [rbp-19h] BYREF
  char v47[8]; // [rsp+80h] [rbp-1h] BYREF
  _QWORD *v48; // [rsp+88h] [rbp+7h]
  __int64 v49; // [rsp+90h] [rbp+Fh]

  v4 = 0;
  v49 = 0i64;
  v6 = a3;
  v7 = a2;
  v8 = operator new(0x20ui64);
  if ( !v8 )
  {
    std::bad_alloc::bad_alloc((std::bad_alloc *)pExceptionObject, 0i64);
    CxxThrowException_0(pExceptionObject, (_ThrowInfo *)&TI2_AVbad_alloc_std__);
  }
  v48 = v8;
  *v8 = v8;
  v48[1] = v48;
  v48[2] = v48;
  *((_BYTE *)v48 + 26) = 1;
  *((_BYTE *)v48 + 27) = 1;
  if ( v7 )
    v9 = *(_QWORD *)(v7 + 56);
  else
    v9 = 0i64;
  v10 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
  {
    v11 = Dbg_NodeName(v7);
    WPP_SF_ss(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x18u,
      (__int64)&WPP_9f96d4c672f338bf067ce342b88232b8_Traceguids,
      v11,
      *(_QWORD *)(v9 + 16));
    v10 = WPP_GLOBAL_Control;
  }
  if ( !a4 )
  {
LABEL_29:
    NextRecord = RR_FindNextRecordEx(v7, 0, 0x2Eu, 0i64, 0, 0);
    v10 = WPP_GLOBAL_Control;
    v15 = NextRecord;
    if ( !NextRecord )
    {
LABEL_109:
      v6 = a3;
      goto LABEL_102;
    }
    while ( 1 )
    {
      if ( *(_WORD *)(v15 + 12) != 46 )
        goto LABEL_109;
      v16 = *(_WORD *)(v15 + 56);
      v43 = *(_QWORD *)v15;
      v17 = ntohs(v16);
      v42 = v17;
      v10 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
      {
        v18 = Dbg_NodeName(v7);
        LODWORD(v41) = v17;
        LODWORD(v40) = ntohs(*(_WORD *)(v15 + 72));
        WPP_SF_qDDs(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x1Cu,
          (__int64)&WPP_9f96d4c672f338bf067ce342b88232b8_Traceguids,
          v15,
          v40,
          v41,
          v18);
        v10 = WPP_GLOBAL_Control;
        v7 = a2;
      }
      if ( v17 != 48 || (*(_BYTE *)(v9 + 1040) & 2) != 0 )
        break;
LABEL_76:
      v15 = v43;
      if ( !v43 )
        goto LABEL_109;
    }
    v19 = time(0i64);
    v20 = ntohl(*(_DWORD *)(v15 + 64));
    if ( v20 > v19 )
    {
      if ( v19 <= v20 - (v20 - ntohl(*(_DWORD *)(v15 + 68))) / 5 )
      {
        v10 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
        {
          WPP_SF_q(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x17u,
            (__int64)&WPP_9f96d4c672f338bf067ce342b88232b8_Traceguids,
            v15);
          v10 = WPP_GLOBAL_Control;
        }
LABEL_96:
        v7 = a2;
        goto LABEL_76;
      }
      v10 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        v21 = 22;
        goto LABEL_47;
      }
    }
    else
    {
      v10 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        v21 = 21;
LABEL_47:
        WPP_SF_q(*((_QWORD *)v10 + 7), v21, (__int64)&WPP_9f96d4c672f338bf067ce342b88232b8_Traceguids, v15);
        v10 = WPP_GLOBAL_Control;
      }
    }
    v6 = a3;
    if ( a3 )
    {
      *a3 = 1;
      v10 = WPP_GLOBAL_Control;
    }
    if ( !a4 )
      goto LABEL_96;
    v22 = (__int64)v48;
    v23 = v48[1];
    if ( *(_BYTE *)(v23 + 27) )
      goto LABEL_58;
    do
    {
      if ( *(_WORD *)(v23 + 24) >= v17 )
      {
        v22 = v23;
        v23 = *(_QWORD *)v23;
      }
      else
      {
        v23 = *(_QWORD *)(v23 + 16);
      }
    }
    while ( !*(_BYTE *)(v23 + 27) );
    if ( (_QWORD *)v22 == v48 || v17 < *(_WORD *)(v22 + 24) )
LABEL_58:
      v22 = (__int64)v48;
    v7 = a2;
    if ( (_QWORD *)v22 != v48 )
      goto LABEL_76;
    v24 = 512;
    if ( v17 == 48 )
      v24 = 528;
    v4 = DnsOls_SignZone((struct _zone_info *)v9, a2, v17, v24, a4);
    if ( v4 )
    {
      v10 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
        goto LABEL_112;
      if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0 && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        v36 = Dbg_NodeName(a2);
        WPP_SF_Dds(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x1Du,
          (__int64)&WPP_9f96d4c672f338bf067ce342b88232b8_Traceguids,
          v4,
          v17,
          (__int64)v36);
        v10 = WPP_GLOBAL_Control;
      }
      goto LABEL_102;
    }
    if ( a1 )
      ++*a1;
    v25 = std::_Tree_val<std::_Tset_traits<unsigned short,std::less<unsigned short>,std::allocator<unsigned short>,0>>::_Buynode<unsigned short &>(
            (__int64)v47,
            &v42);
    v26 = v25;
    v27 = v48;
    v28 = 1;
    v29 = (__int64 *)v48[1];
    if ( !*((_BYTE *)v29 + 27) )
    {
      v30 = *((_WORD *)v25 + 12);
      do
      {
        v27 = v29;
        v28 = v30 < *((_WORD *)v29 + 12);
        if ( v30 >= *((_WORD *)v29 + 12) )
          v29 = (__int64 *)v29[2];
        else
          v29 = (__int64 *)*v29;
      }
      while ( !*((_BYTE *)v29 + 27) );
    }
    v31 = v27;
    if ( v28 )
    {
      if ( v27 == (_QWORD *)*v48 )
      {
        v32 = 1;
        v33 = &v44;
        goto LABEL_74;
      }
      if ( *((_BYTE *)v27 + 27) )
      {
        v31 = (_QWORD *)v27[2];
      }
      else
      {
        v34 = *v27;
        if ( *(_BYTE *)(*v27 + 27i64) )
        {
          for ( i = v27[1]; !*(_BYTE *)(i + 27) && v31 == *(_QWORD **)i; i = *(_QWORD *)(i + 8) )
            v31 = (_QWORD *)i;
          if ( !*((_BYTE *)v31 + 27) )
            v31 = (_QWORD *)i;
        }
        else
        {
          do
          {
            v31 = (_QWORD *)v34;
            v34 = *(_QWORD *)(v34 + 16);
          }
          while ( !*(_BYTE *)(v34 + 27) );
        }
      }
    }
    if ( *((_WORD *)v31 + 12) >= v26[12] )
    {
      operator delete(v26);
      goto LABEL_75;
    }
    v32 = v28;
    v33 = &v45;
LABEL_74:
    std::_Tree<std::_Tmap_traits<unsigned char,bool,std::less<unsigned char>,std::allocator<std::pair<unsigned char const,bool>>,0>>::_Insert(
      (__int64)v47,
      v33,
      v32,
      v27,
      v26);
LABEL_75:
    v10 = WPP_GLOBAL_Control;
    goto LABEL_76;
  }
  if ( *(int *)(v9 + 432) <= 0 )
  {
    if ( *(_DWORD *)(v9 + 372) != 1 || (*(_BYTE *)(v9 + 1040) & 4) == 0 )
    {
      v4 = 1169409;
      if ( v10 == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
        goto LABEL_112;
      if ( (*((_DWORD *)v10 + 17) & 0x200000) == 0 || *((_BYTE *)v10 + 65) < 4u )
        goto LABEL_102;
      v12 = 26;
      goto LABEL_15;
    }
    v13 = v9;
    if ( *(_QWORD *)(v9 + 328) )
      v13 = *(_QWORD *)(v9 + 328);
    if ( *(_DWORD *)(v13 + 1100) )
    {
      v4 = 1169409;
      if ( v10 == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
        goto LABEL_112;
      if ( (*((_DWORD *)v10 + 17) & 0x200000) == 0 || *((_BYTE *)v10 + 65) < 4u )
        goto LABEL_102;
      v12 = 27;
      goto LABEL_15;
    }
    goto LABEL_29;
  }
  v4 = 1169409;
  if ( v10 == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
    goto LABEL_112;
  if ( (*((_DWORD *)v10 + 17) & 0x200000) != 0 && *((_BYTE *)v10 + 65) >= 4u )
  {
    v12 = 25;
LABEL_15:
    WPP_SF_s(
      *((_QWORD *)v10 + 7),
      v12,
      (__int64)&WPP_9f96d4c672f338bf067ce342b88232b8_Traceguids,
      *(const char **)(v9 + 16));
    v10 = WPP_GLOBAL_Control;
  }
LABEL_102:
  if ( v10 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)v10 + 17) & 0x200000) != 0
    && *((_BYTE *)v10 + 65) >= 5u )
  {
    if ( v6 )
    {
      v37 = "false";
      if ( *v6 )
        v37 = "true";
    }
    else
    {
      v37 = 0i64;
    }
    v38 = Dbg_NodeName(v7);
    WPP_SF_Dss(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x1Eu,
      (__int64)&WPP_9f96d4c672f338bf067ce342b88232b8_Traceguids,
      v4,
      (__int64)v37,
      (__int64)v38);
  }
LABEL_112:
  std::_Tree<std::_Tmap_traits<unsigned char,bool,std::less<unsigned char>,std::allocator<std::pair<unsigned char const,bool>>,0>>::~_Tree<std::_Tmap_traits<unsigned char,bool,std::less<unsigned char>,std::allocator<std::pair<unsigned char const,bool>>,0>>((__int64)v47);
  return v4;
}
// 14010AB02: variable 'v40' is possibly undefined
// 14010AB02: variable 'v41' is possibly undefined
// 140184CA8: using guessed type void __stdcall operator delete(void *);
// 14010A880: using guessed type char var_58[8];
