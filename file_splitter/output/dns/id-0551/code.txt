Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 551
// Total lines: 431

//----- (000000014004D3C8) ----------------------------------------------------
_QWORD *__fastcall Ds_GetRangedAttributeValues(
        LDAP *ld,
        LDAPMessage *a2,
        WCHAR *a3,
        unsigned __int16 *a4,
        int a5,
        int a6,
        ULONG *a7)
{
  unsigned int v7; // r14d
  ULONG v8; // ebx
  _QWORD *v9; // r13
  WCHAR *v10; // rdi
  __int64 v11; // r15
  PWCHAR *valuesW; // rsi
  unsigned __int16 *v15; // r15
  LDAPMessage *v16; // rsi
  WCHAR *v17; // r14
  const unsigned __int16 *attributeW; // rax
  wchar_t *v19; // rax
  int v20; // edi
  wchar_t *v21; // rax
  PWCHAR *v22; // rdx
  int v23; // esi
  __int64 v24; // rcx
  int v25; // r8d
  __int64 v26; // rax
  unsigned int v27; // ebx
  WCHAR *v28; // rax
  PWSTR v29; // rsi
  int v30; // edi
  unsigned int v31; // r15d
  unsigned int v32; // r12d
  unsigned int v33; // eax
  __int64 *v34; // rsi
  _QWORD *v35; // rdi
  __int64 v36; // rax
  void *v37; // rax
  __int64 v38; // rsi
  __int64 *v39; // rdi
  _QWORD *v40; // rsi
  _QWORD **v41; // rdi
  __int64 v42; // rdx
  __int64 v43; // r8
  PZPWSTR attrs; // [rsp+20h] [rbp-E0h]
  PZPWSTR attrsa; // [rsp+20h] [rbp-E0h]
  int v47; // [rsp+60h] [rbp-A0h]
  unsigned int v48; // [rsp+64h] [rbp-9Ch]
  LDAPMessage *res; // [rsp+70h] [rbp-90h] BYREF
  WCHAR *v51; // [rsp+78h] [rbp-88h]
  BerElement *ptr; // [rsp+80h] [rbp-80h] BYREF
  PWCHAR *v53; // [rsp+88h] [rbp-78h]
  LDAPMessage *entry; // [rsp+90h] [rbp-70h]
  PWSTR base; // [rsp+98h] [rbp-68h]
  PWSTR v56[2]; // [rsp+A0h] [rbp-60h] BYREF
  ULONG *v57; // [rsp+B0h] [rbp-50h]
  __int64 v58[20]; // [rsp+C0h] [rbp-40h] BYREF

  v7 = 0;
  v57 = a7;
  v8 = 0;
  v9 = 0i64;
  ptr = 0i64;
  v10 = 0i64;
  v11 = -1i64;
  base = a3;
  entry = a2;
  do
    ++v11;
  while ( a4[v11] );
  memset_0(v58, 0, sizeof(v58));
  v48 = 0;
  *(_OWORD *)v56 = 0i64;
  res = 0i64;
  v47 = 0;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_SS(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0xAu,
      (__int64)&WPP_6556903f7baf3084970f02573b864ea9_Traceguids,
      a4,
      (__int64)base);
  }
  valuesW = ldap_get_valuesW(ld, entry, a4);
  v53 = valuesW;
  if ( valuesW && *valuesW )
  {
    v9 = copyStringArray(valuesW);
    if ( v9 )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        v15 = a4;
        WPP_SF_S(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0xBu,
          (__int64)&WPP_6556903f7baf3084970f02573b864ea9_Traceguids,
          a4);
        goto LABEL_102;
      }
    }
    else
    {
      v8 = 14;
    }
  }
  else
  {
    v16 = entry;
    v17 = 0i64;
LABEL_16:
    if ( v17 )
    {
      ldap_memfreeW(v17);
      v17 = 0i64;
    }
    if ( ptr )
    {
      ber_free(ptr, 0i64);
      ptr = 0i64;
    }
    while ( 1 )
    {
      if ( v17 )
      {
        ldap_memfreeW(v17);
        attributeW = ldap_next_attributeW(ld, v16, ptr);
      }
      else
      {
        attributeW = ldap_first_attributeW(ld, v16, &ptr);
      }
      v51 = (WCHAR *)attributeW;
      v17 = (WCHAR *)attributeW;
      if ( !attributeW )
        break;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_Sq(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0xDu,
          (__int64)&WPP_6556903f7baf3084970f02573b864ea9_Traceguids,
          attributeW);
      }
      if ( !_wcsnicmp(v17, a4, (unsigned int)v11) && v17[(unsigned int)v11] == 59 )
      {
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          WPP_SF_S(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0xFu,
            (__int64)&WPP_6556903f7baf3084970f02573b864ea9_Traceguids,
            v17);
        }
        v19 = wcschr(v17, 0x3Bu);
        v20 = 0;
        if ( v19 )
        {
          v21 = wcschr(v19, 0x2Du);
          if ( v21 )
          {
            LOBYTE(v20) = v21[1] == 42;
            v22 = ldap_get_valuesW(ld, v16, v17);
            v53 = v22;
            if ( !v22 )
              goto LABEL_72;
            v23 = v47;
            LODWORD(v24) = 0;
            v58[v48] = (__int64)v22;
            v25 = ++v48;
            if ( *v22 )
            {
              do
              {
                v24 = (unsigned int)(v24 + 1);
                ++v23;
              }
              while ( v22[v24] );
              v47 = v23;
            }
            if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
              && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
            {
              WPP_SF_DDS(
                *((_QWORD *)WPP_GLOBAL_Control + 7),
                0x10u,
                (__int64)&WPP_6556903f7baf3084970f02573b864ea9_Traceguids,
                v25,
                v23,
                (__int64)a4);
            }
            v53 = 0i64;
            if ( !v20 )
            {
              Mem_Free((_QWORD *)v56[0], 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\dsutil.c", 336);
              v26 = -1i64;
              do
                ++v26;
              while ( a4[v26] );
              v27 = 2 * v26 + 60;
              v28 = (WCHAR *)Mem_Alloc(2 * (int)v26 + 61, 0i64, "ds\\dns\\server\\server\\dsutil.c", 338);
              v56[0] = v28;
              if ( v28 )
              {
                LODWORD(attrs) = v23;
                v8 = StringCbPrintfW(v28, v27, L"%ws;range=%d-*", a4, attrs);
                if ( !v8 )
                {
                  v56[1] = 0i64;
                  if ( res != entry )
                  {
                    ldap_msgfree(res);
                    res = 0i64;
                  }
                  v29 = base;
                  v8 = ldap_search_ext_sW(ld, base, 0, g_szWildCardFilter, v56, 0, 0i64, 0i64, &g_LdapTimeout, 0, &res);
                  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
                    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
                  {
                    WPP_SF_Sdq(
                      *((_QWORD *)WPP_GLOBAL_Control + 7),
                      0x11u,
                      (__int64)&WPP_6556903f7baf3084970f02573b864ea9_Traceguids,
                      v56[0]);
                  }
                  if ( v8 )
                  {
                    if ( v8 == 1 )
                      v8 = 0;
                    else
                      v8 = Ds_ErrorHandler(v8, (__int64)v29, ld, 0);
                  }
                  else
                  {
                    if ( res )
                    {
                      v16 = ldap_first_entry(ld, res);
                      if ( v16 )
                      {
                        if ( v48 < 0x14 )
                          goto LABEL_16;
                        v8 = 9002;
                        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
                          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
                        {
                          WPP_SF_S(
                            *((_QWORD *)WPP_GLOBAL_Control + 7),
                            0xCu,
                            (__int64)&WPP_6556903f7baf3084970f02573b864ea9_Traceguids,
                            a4);
                        }
                        goto LABEL_63;
                      }
                      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
                        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
                      {
                        WPP_SF_q(
                          *((_QWORD *)WPP_GLOBAL_Control + 7),
                          0x12u,
                          (__int64)&WPP_6556903f7baf3084970f02573b864ea9_Traceguids,
                          0i64);
                      }
                    }
LABEL_72:
                    v8 = 9002;
                  }
                }
              }
              else
              {
                v8 = 14;
              }
            }
          }
        }
LABEL_63:
        v30 = v47;
        goto LABEL_64;
      }
    }
    v30 = v47;
    v8 = v47 == 0 ? 0x10 : 0;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_D(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0xEu,
        (__int64)&WPP_6556903f7baf3084970f02573b864ea9_Traceguids,
        v47 == 0 ? 0x10 : 0);
    }
LABEL_64:
    v31 = 0;
    v7 = 0;
    if ( v48 && !v8 )
    {
      v9 = Mem_Alloc(8 * v30 + 8, 0i64, "ds\\dns\\server\\server\\dsutil.c", 447);
      if ( v9 )
      {
        v32 = 0;
        v33 = v48;
        v34 = v58;
        while ( 1 )
        {
          v35 = (_QWORD *)*v34;
          if ( !*v34 )
          {
            v8 = 9002;
            goto LABEL_95;
          }
          if ( *v35 )
            break;
LABEL_93:
          ++v32;
          ++v34;
          v31 = 0;
          if ( v32 >= v33 )
          {
            v9[v7] = 0i64;
            goto LABEL_95;
          }
        }
        v36 = 0i64;
        while ( 1 )
        {
          v37 = Dns_StringCopyAllocate((char *)v35[v36], 0, 1i64, 1);
          v9[v7] = v37;
          if ( !v37 )
            break;
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            WPP_SF_DS(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x13u,
              (__int64)&WPP_6556903f7baf3084970f02573b864ea9_Traceguids,
              v7,
              (__int64)v37);
          }
          ++v31;
          ++v7;
          v36 = v31;
          if ( !v35[v36] )
          {
            v33 = v48;
            goto LABEL_93;
          }
        }
      }
      v8 = 14;
    }
LABEL_95:
    v38 = v48;
    if ( v48 )
    {
      v39 = v58;
      do
      {
        if ( *v39 )
          ldap_value_freeW((PWCHAR *)*v39);
        ++v39;
        --v38;
      }
      while ( v38 );
    }
    valuesW = v53;
    v10 = v51;
  }
  v15 = a4;
LABEL_102:
  if ( ptr )
    ber_free(ptr, 0i64);
  if ( valuesW )
    ldap_value_freeW(valuesW);
  v40 = 0i64;
  if ( v10 )
    ldap_memfreeW(v10);
  if ( res != entry )
    ldap_msgfree(res);
  if ( v8 && v9 )
  {
    if ( v7 )
    {
      v41 = (_QWORD **)v9;
      v40 = (_QWORD *)v7;
      do
      {
        Mem_Free(*v41++, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\dsutil.c", 523);
        v40 = (_QWORD *)((char *)v40 - 1);
      }
      while ( v40 );
    }
    Mem_Free(v9, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\dsutil.c", 525);
    v9 = v40;
  }
  Mem_Free((_QWORD *)v56[0], 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\dsutil.c", 528);
  if ( v57 )
    *v57 = v8;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    LODWORD(attrsa) = v7;
    WPP_SF_qdSS(*((_QWORD *)WPP_GLOBAL_Control + 7), v42, v43, v9, attrsa, v15, base);
  }
  return v9;
}
// 14004D697: conditional instruction was optimized away because %var_14C.4<14u
// 14004D9E3: conditional instruction was optimized away because %var_14C.4!=0
// 14004D78B: variable 'attrs' is possibly undefined
// 14004DBC9: variable 'v42' is possibly undefined
// 14004DBC9: variable 'v43' is possibly undefined
// 14004DBC9: variable 'attrsa' is possibly undefined
// 140184190: using guessed type __int64 __fastcall ber_free(_QWORD, _QWORD);
// 14004D3C8: using guessed type __int64 var_F0[20];
