Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 2773
// Total lines: 180

//----- (0000000140146C60) ----------------------------------------------------
__int64 __fastcall CDnsPolicy::DeletePolicy(const void **this, int a2, __int64 a3)
{
  char v5; // bl
  unsigned int v6; // r14d
  CDnsClientSubnetRecordsTrie *v7; // rcx
  __int64 v8; // rax
  const void **v9; // rax
  _QWORD **v10; // rbx
  int v11; // eax
  _QWORD *v12; // rdi
  const void ***v13; // rax
  const void **v14; // rcx
  const void **v15; // rbx
  char *v16; // rdi
  const void *v17; // rbp
  _QWORD *v18; // rax
  _QWORD *v19; // rbx
  WCHAR *v20; // rdx
  const unsigned __int16 *v21; // rcx
  const unsigned __int16 *v22; // rdx
  void **v23; // rax
  void **v24; // rbx
  void **v25; // rbp
  void ***v26; // rbx
  __int64 v28; // [rsp+28h] [rbp-70h] BYREF
  __int64 v29[2]; // [rsp+30h] [rbp-68h] BYREF
  void *v30[5]; // [rsp+40h] [rbp-58h] BYREF

  v29[1] = -2i64;
  v5 = 0;
  v6 = 0;
  v7 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    v8 = CDnsPolicy::Name(this, (__int64)v30);
    v5 = 1;
    if ( *(_QWORD *)(v8 + 24) >= 8ui64 )
      v8 = *(_QWORD *)v8;
    WPP_SF_S(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x4Fu,
      (__int64)&WPP_42dbba61d26d3062f1ad4e084cdc81fe_Traceguids,
      (const unsigned __int16 *)v8);
    v7 = WPP_GLOBAL_Control;
  }
  if ( (v5 & 1) != 0 && v30[3] >= (void *)8 )
  {
    operator delete(v30[0]);
    v7 = WPP_GLOBAL_Control;
  }
  v9 = (const void **)this[14];
  v10 = (_QWORD **)*v9;
  if ( *v9 != v9 )
  {
    while ( 1 )
    {
      if ( v7 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)v7 + 17) & 0x400000) != 0
        && *((_BYTE *)v7 + 65) >= 4u )
      {
        v11 = (*(__int64 (__fastcall **)(_QWORD *))(*v10[2] + 40i64))(v10[2]);
        WPP_SF_D(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x50u,
          (__int64)&WPP_42dbba61d26d3062f1ad4e084cdc81fe_Traceguids,
          v11);
      }
      v6 = (*(__int64 (__fastcall **)(_QWORD *))(*v10[2] + 8i64))(v10[2]);
      v12 = v10[2];
      if ( v12 )
      {
        if ( v12[6] >= 8ui64 )
          operator delete((void *)v12[3]);
        v12[6] = 7i64;
        v12[5] = 0i64;
        *((_WORD *)v12 + 12) = 0;
        operator delete(v12);
      }
      v10 = (_QWORD **)*v10;
      if ( v10 == this[14] )
        break;
      v7 = WPP_GLOBAL_Control;
    }
  }
  v13 = (const void ***)this[14];
  v14 = *v13;
  *v13 = (const void **)v13;
  *((_QWORD *)this[14] + 1) = this[14];
  this[15] = 0i64;
  if ( v14 != this[14] )
  {
    do
    {
      v15 = (const void **)*v14;
      operator delete(v14);
      v14 = v15;
    }
    while ( v15 != this[14] );
  }
  v16 = (char *)this[17];
  if ( v16 )
  {
    v17 = this[18];
    v18 = (_QWORD *)*((_QWORD *)v16 + 2);
    v19 = (_QWORD *)*v18;
    if ( (_QWORD *)*v18 != v18 )
    {
      do
      {
        if ( v17 )
        {
          v28 = 0i64;
          if ( a2 )
          {
            v20 = (WCHAR *)(v19 + 2);
            if ( v19[5] >= 8ui64 )
              v20 = *(WCHAR **)v20;
            GetZoneScope((__int64)v17, v20, &v28);
            _InterlockedDecrement((volatile signed __int32 *)(v28 + 308));
          }
        }
        else
        {
          v29[0] = 0i64;
          v21 = (const unsigned __int16 *)(v19 + 2);
          if ( v19[5] < 8ui64 )
            v22 = (const unsigned __int16 *)(v19 + 2);
          else
            v22 = *(const unsigned __int16 **)v21;
          if ( *v22 != Source[0] || v22[1] != Source[1] )
          {
            if ( v19[5] >= 8ui64 )
              v21 = *(const unsigned __int16 **)v21;
            GetServerScope(v21, v29, a3);
            _InterlockedDecrement((volatile signed __int32 *)(v29[0] + 24));
          }
        }
        v19 = (_QWORD *)*v19;
      }
      while ( v19 != *((_QWORD **)v16 + 2) );
    }
    v23 = (void **)*((_QWORD *)v16 + 2);
    v24 = (void **)*v23;
    *v23 = v23;
    *(_QWORD *)(*((_QWORD *)v16 + 2) + 8i64) = *((_QWORD *)v16 + 2);
    *((_QWORD *)v16 + 3) = 0i64;
    if ( v24 != *((void ***)v16 + 2) )
    {
      do
      {
        v25 = (void **)*v24;
        if ( (unsigned __int64)v24[5] >= 8 )
          operator delete(v24[2]);
        v24[5] = (void *)7;
        v24[4] = 0i64;
        *((_WORD *)v24 + 8) = 0;
        operator delete(v24);
        v24 = v25;
      }
      while ( v25 != *((void ***)v16 + 2) );
    }
    *(_QWORD *)(v16 + 4) = 0i64;
    *(_DWORD *)v16 = 0;
    v26 = (void ***)this[17];
    if ( v26 )
    {
      std::list<std::pair<std::wstring,unsigned long>>::~list<std::pair<std::wstring,unsigned long>>(v26 + 2);
      operator delete(v26);
    }
    this[17] = 0i64;
  }
  this[18] = 0i64;
  return v6;
}
// 140146EA8: variable 'a3' is possibly undefined
// 140184CA8: using guessed type void __stdcall operator delete(void *);
// 140185140: using guessed type __int64 (__fastcall *_guard_dispatch_icall_fptr)(_QWORD, _QWORD);
