Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 608
// Total lines: 119

//----- (0000000140056654) ----------------------------------------------------
signed __int64 writeAndResetLogBuffer()
{
  signed int v0; // ebx
  unsigned int v1; // ecx
  ULONGLONG v2; // rax
  ULONGLONG v3; // rax
  int LastError; // eax
  int v5; // eax
  signed __int64 result; // rax
  DWORD NumberOfBytesWritten; // [rsp+60h] [rbp+30h] BYREF
  union _ULARGE_INTEGER TotalNumberOfFreeBytes; // [rsp+68h] [rbp+38h] BYREF
  union _ULARGE_INTEGER TotalNumberOfBytes; // [rsp+70h] [rbp+40h] BYREF

  v0 = (_DWORD)lpMultiByteStr - qword_1401B8F78;
  g_iBytesWrittenToLog += (unsigned int)((_DWORD)lpMultiByteStr - qword_1401B8F78);
  while ( 1 )
  {
    if ( g_pwszLogFileDrive )
    {
      if ( dword_1401B8F50 || (v1 = g_dwLogsSinceFreeSpaceCheck, ++g_dwLogsSinceFreeSpaceCheck, v1 > 0x320) )
      {
        TotalNumberOfFreeBytes.QuadPart = 0i64;
        TotalNumberOfBytes.QuadPart = 0i64;
        if ( GetDiskFreeSpaceExW(g_pwszLogFileDrive, 0i64, &TotalNumberOfBytes, &TotalNumberOfFreeBytes) )
        {
          v2 = 0x280000000i64;
          if ( TotalNumberOfBytes.QuadPart >> 6 < 0x280000000i64 )
            v2 = TotalNumberOfBytes.QuadPart >> 6;
          if ( v2 >= 0x40000000 )
          {
            v3 = 0x280000000i64;
            if ( TotalNumberOfBytes.QuadPart >> 6 < 0x280000000i64 )
              v3 = TotalNumberOfBytes.QuadPart >> 6;
          }
          else
          {
            v3 = 0x40000000i64;
          }
          if ( TotalNumberOfFreeBytes.QuadPart < v3 )
          {
            if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 1) != 0
              && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
            {
              WPP_SF_D(
                *((_QWORD *)WPP_GLOBAL_Control + 7),
                0xAu,
                (__int64)&WPP_7aabcfb4077e3de7a2cc491a12601782_Traceguids,
                TotalNumberOfFreeBytes.LowPart);
            }
            if ( !dword_1401B8F50 )
            {
              WriteFile(
                g_hLogFile,
                "\nThe disk is dangerously full.\nNo more logs will be written until disk space is freed.\n\n",
                0x58u,
                &NumberOfBytesWritten,
                0i64);
              dword_1401B8F50 = 1;
            }
            goto LABEL_31;
          }
        }
        else if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
               && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 1) != 0
               && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          LastError = GetLastError();
          WPP_SF_D(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0xBu,
            (__int64)&WPP_7aabcfb4077e3de7a2cc491a12601782_Traceguids,
            LastError);
        }
        g_dwLogsSinceFreeSpaceCheck = 0;
      }
    }
    dword_1401B8F50 = 0;
    if ( !WriteFile(g_hLogFile, &pchLogBuffer, v0, &NumberOfBytesWritten, 0i64) )
      break;
    v0 -= NumberOfBytesWritten;
    if ( v0 <= 0 )
      goto LABEL_31;
  }
  v5 = GetLastError();
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 1) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_Dd(*((_QWORD *)WPP_GLOBAL_Control + 7), 0xCu, (__int64)&WPP_7aabcfb4077e3de7a2cc491a12601782_Traceguids, v5);
  }
LABEL_31:
  lpMultiByteStr = (STRSAFE_LPSTR)qword_1401B8F78;
  LODWORD(qword_1401B8F90) = dword_1401B8F70;
  result = (unsigned int)dword_1401B9788;
  if ( (unsigned int)dword_1401B9788 < 0x10000 )
    result = 0x10000i64;
  dword_1401B9788 = result;
  if ( !dword_1401B8F50 && g_iBytesWrittenToLog >= result )
  {
    if ( !dword_1401B978C )
      return Log_InitializeLogging(1, 0, 0i64);
    result = Dns_GetCurrentTimeInSeconds();
    dword_1401B9714 = result;
    if ( (unsigned int)result > g_LastLogFileOpenTime + 1 )
      return Log_InitializeLogging(1, 0, 0i64);
  }
  return result;
}
// 1401B8058: using guessed type int g_dwLogsSinceFreeSpaceCheck;
// 1401B8F50: using guessed type int dword_1401B8F50;
// 1401B8F70: using guessed type int dword_1401B8F70;
// 1401B8F78: using guessed type __int64 qword_1401B8F78;
// 1401B8F98: using guessed type __int64 g_iBytesWrittenToLog;
// 1401B8FA0: using guessed type int g_LastLogFileOpenTime;
// 1401B9714: using guessed type int dword_1401B9714;
// 1401B9788: using guessed type int dword_1401B9788;
// 1401B978C: using guessed type int dword_1401B978C;
