Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 2777
// Total lines: 387

//----- (000000014014723C) ----------------------------------------------------
__int64 __fastcall CDnsPolicy::UpdateCriteria(CDnsPolicy *this, struct _DnssrvRpcPolicy *a2)
{
  struct _DnssrvRpcPolicy *v2; // r13
  CDnsPolicy *v3; // r12
  char v4; // r14
  unsigned int v5; // esi
  __int64 v6; // rax
  char *v7; // rdx
  unsigned __int64 v8; // r8
  void **v9; // rax
  void **v10; // rdx
  unsigned __int64 v11; // r8
  char *v12; // rbx
  void **v13; // rax
  unsigned __int64 v14; // rdi
  wint_t *v15; // r15
  unsigned __int64 v16; // r12
  wint_t *v17; // r13
  __int64 i; // rsi
  void **v19; // rax
  unsigned __int64 v20; // rdx
  unsigned __int64 v21; // rbx
  __int64 v22; // r8
  int v23; // ebx
  int v24; // eax
  __int64 v25; // r8
  int v26; // ebx
  int v27; // eax
  __int64 v28; // rdi
  int v29; // ecx
  CDNSPolicyCriteriaSubnetRecord *v30; // rax
  CDNSPolicyCriteriaSubnetRecord *v31; // rbx
  void **v32; // rax
  CDNSPolicyCriteriaSubnetRecord *v33; // rax
  CDNSPolicyCriteriaSubnetRecord *v34; // rax
  CDNSPolicyCriteriaFqdn *v35; // rax
  CDNSPolicyCriteriaInterfaceIP *v36; // rax
  CDNSPolicyCriteriaTime *v37; // rax
  CDNSPolicyCriteriaSubnetRecord *v38; // rax
  char *v39; // rdx
  __int64 v40; // r8
  int *v41; // rdi
  __int64 v42; // rbx
  __int64 v43; // rcx
  _QWORD *v44; // rax
  __int64 v45; // rdx
  const char *CriteriaTypeString; // rax
  __int64 v47; // r8
  __int64 *v48; // rax
  __int64 v49; // r8
  _DWORD *v50; // rcx
  unsigned int v52; // [rsp+38h] [rbp-D0h]
  CDNSPolicyCriteriaSubnetRecord *v53; // [rsp+40h] [rbp-C8h] BYREF
  __int64 v54; // [rsp+48h] [rbp-C0h]
  __int64 v55[2]; // [rsp+50h] [rbp-B8h] BYREF
  struct _DnssrvRpcPolicy *v56; // [rsp+60h] [rbp-A8h]
  CDnsPolicy *v57; // [rsp+68h] [rbp-A0h]
  __int64 v58; // [rsp+70h] [rbp-98h]
  CDNSPolicyCriteriaSubnetRecord *v59; // [rsp+78h] [rbp-90h]
  CDNSPolicyCriteriaFqdn *v60; // [rsp+80h] [rbp-88h]
  CDNSPolicyCriteriaInterfaceIP *v61; // [rsp+88h] [rbp-80h]
  CDNSPolicyCriteriaTime *v62; // [rsp+90h] [rbp-78h]
  void *v63[2]; // [rsp+98h] [rbp-70h] BYREF
  __int64 v64; // [rsp+A8h] [rbp-60h]
  unsigned __int64 v65; // [rsp+B0h] [rbp-58h]
  void *v66[3]; // [rsp+C0h] [rbp-48h] BYREF
  unsigned __int64 v67; // [rsp+D8h] [rbp-30h]
  __int16 v68; // [rsp+E8h] [rbp-20h]
  __int64 v69; // [rsp+F8h] [rbp-10h]
  __int64 v70; // [rsp+100h] [rbp-8h]

  v58 = -2i64;
  v2 = a2;
  v56 = a2;
  v3 = this;
  v57 = this;
  v4 = 0;
  v5 = 0;
  v55[0] = 0i64;
  v65 = 7i64;
  v64 = 0i64;
  LOWORD(v63[0]) = 0;
  v70 = 7i64;
  v69 = 0i64;
  v68 = 0;
  v6 = 0i64;
  v52 = 0;
  if ( !*((_DWORD *)a2 + 14) )
    goto LABEL_105;
  while ( 1 )
  {
    v54 = v6;
    v7 = *(char **)(*((_QWORD *)v2 + v6 + 8) + 8i64);
    v8 = -1i64;
    do
      ++v8;
    while ( *(_WORD *)&v7[2 * v8] );
    std::wstring::assign((char *)v63, v7, v8);
    v9 = v63;
    v10 = (void **)v63[0];
    v11 = v65;
    if ( v65 >= 8 )
      v9 = (void **)v63[0];
    v12 = (char *)v9 + 2 * v64;
    v13 = v63;
    if ( v65 >= 8 )
      v13 = (void **)v63[0];
    v14 = (unsigned __int64)v13 + 2 * v64;
    v15 = (wint_t *)v63;
    if ( v65 >= 8 )
      v15 = (wint_t *)v63[0];
    if ( v15 != (wint_t *)v14 )
    {
      do
      {
        if ( iswspace(*v15) )
          break;
        ++v15;
      }
      while ( v15 != (wint_t *)v14 );
      if ( v15 != (wint_t *)v14 )
      {
        v55[1] = 0i64;
        v16 = (v14 - (unsigned __int64)(v15 + 1) + 1) >> 1;
        if ( (unsigned __int64)(v15 + 1) > v14 )
          v16 = 0i64;
        if ( v16 )
        {
          v17 = v15 + 1;
          for ( i = 0i64; i != v16; ++i )
          {
            if ( !iswspace(*v17) )
              *v15++ = *v17;
            ++v17;
          }
          v5 = 0;
          v2 = v56;
        }
        v3 = v57;
      }
      v10 = (void **)v63[0];
      v11 = v65;
    }
    v19 = v63;
    if ( v11 >= 8 )
      v19 = v10;
    v20 = v15 ? ((char *)v15 - (char *)v19) >> 1 : 0i64;
    v21 = v12 ? (v12 - (char *)v15) >> 1 : 0i64;
    std::wstring::erase(v63, v20, v21);
    if ( !v64 )
      break;
    v23 = std::wstring::find((char *)v63, L"EQ,", v22, 3ui64);
    v24 = std::wstring::rfind((char *)v63, L"EQ,");
    if ( v23 != -1 && v23 != v24 )
      break;
    v26 = std::wstring::find((char *)v63, L"NE,", v25, 3ui64);
    v27 = std::wstring::rfind((char *)v63, L"NE,");
    if ( v26 != -1 && v26 != v27 )
      break;
    v28 = v54;
    v29 = **((_DWORD **)v2 + v54 + 8);
    if ( v29 == 1 )
    {
      v30 = (CDNSPolicyCriteriaSubnetRecord *)operator new(0xB0ui64);
      v31 = v30;
      v54 = (__int64)v30;
      if ( v30 )
      {
        *((_WORD *)v30 + 4) = 0;
        *((_QWORD *)v30 + 6) = 7i64;
        *((_QWORD *)v30 + 5) = 0i64;
        *((_WORD *)v30 + 12) = 0;
        v32 = &CDNSPolicyCriteriaTransProtocol::`vftable';
LABEL_40:
        *(_QWORD *)v31 = v32;
        *((_QWORD *)v31 + 8) = 0i64;
        *((_QWORD *)v31 + 9) = 0i64;
        *((_QWORD *)v31 + 10) = 0i64;
        *((_QWORD *)v31 + 12) = 0i64;
        *((_QWORD *)v31 + 13) = 0i64;
        *((_QWORD *)v31 + 14) = 0i64;
        *((_QWORD *)v31 + 16) = 0i64;
        *((_QWORD *)v31 + 17) = 0i64;
        *((_QWORD *)v31 + 18) = 0i64;
        *((_QWORD *)v31 + 20) = 0i64;
LABEL_63:
        *((_QWORD *)v31 + 2) = v3;
        goto LABEL_65;
      }
      goto LABEL_64;
    }
    if ( v29 == 2 )
    {
      v33 = (CDNSPolicyCriteriaSubnetRecord *)operator new(0xB0ui64);
      v31 = v33;
      v54 = (__int64)v33;
      if ( v33 )
      {
        *((_WORD *)v33 + 4) = 0;
        *((_QWORD *)v33 + 6) = 7i64;
        *((_QWORD *)v33 + 5) = 0i64;
        *((_WORD *)v33 + 12) = 0;
        v32 = &CDNSPolicyCriteriaNetProtocol::`vftable';
        goto LABEL_40;
      }
      goto LABEL_64;
    }
    if ( v29 )
    {
      switch ( v29 )
      {
        case 4:
          v35 = (CDNSPolicyCriteriaFqdn *)operator new(0x78ui64);
          v60 = v35;
          if ( v35 )
            v31 = CDNSPolicyCriteriaFqdn::CDNSPolicyCriteriaFqdn(v35, v3);
          else
            v31 = 0i64;
          break;
        case 3:
          v36 = (CDNSPolicyCriteriaInterfaceIP *)operator new(0x78ui64);
          v61 = v36;
          if ( v36 )
            v31 = CDNSPolicyCriteriaInterfaceIP::CDNSPolicyCriteriaInterfaceIP(v36, v3);
          else
            v31 = 0i64;
          break;
        case 6:
          v37 = (CDNSPolicyCriteriaTime *)operator new(0x98ui64);
          v62 = v37;
          if ( v37 )
            v31 = CDNSPolicyCriteriaTime::CDNSPolicyCriteriaTime(v37, v3);
          else
            v31 = 0i64;
          break;
        case 5:
          v38 = (CDNSPolicyCriteriaSubnetRecord *)operator new(0xB0ui64);
          v31 = v38;
          v54 = (__int64)v38;
          if ( v38 )
          {
            *((_WORD *)v38 + 4) = 0;
            *((_QWORD *)v38 + 6) = 7i64;
            *((_QWORD *)v38 + 5) = 0i64;
            *((_WORD *)v38 + 12) = 0;
            *(_QWORD *)v38 = &CDNSPolicyCriteriaQueryType::`vftable';
            *((_QWORD *)v38 + 9) = 0i64;
            *((_QWORD *)v38 + 10) = 0i64;
            *((_QWORD *)v38 + 11) = 0i64;
            *((_QWORD *)v38 + 13) = 0i64;
            *((_QWORD *)v38 + 14) = 0i64;
            *((_QWORD *)v38 + 15) = 0i64;
            *((_QWORD *)v38 + 17) = 0i64;
            *((_QWORD *)v38 + 18) = 0i64;
            *((_QWORD *)v38 + 19) = 0i64;
            *((_QWORD *)v38 + 21) = 0i64;
            goto LABEL_63;
          }
LABEL_64:
          v31 = 0i64;
          break;
        default:
          v5 = 87;
          goto LABEL_105;
      }
    }
    else
    {
      v34 = (CDNSPolicyCriteriaSubnetRecord *)operator new(0x78ui64);
      v59 = v34;
      if ( v34 )
        v31 = CDNSPolicyCriteriaSubnetRecord::CDNSPolicyCriteriaSubnetRecord(v34, v3);
      else
        v31 = 0i64;
    }
LABEL_65:
    v53 = v31;
    v39 = (char *)v63;
    if ( v65 >= 8 )
      v39 = (char *)v63[0];
    v5 = ParseInputString(**((_DWORD **)v2 + v28 + 8), v39, v55);
    if ( v5 )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        v48 = (__int64 *)CDnsPolicy::Name((const void **)v3, (__int64)v66);
        v49 = (__int64)v48;
        v4 = 1;
        if ( (unsigned __int64)v48[3] >= 8 )
          v49 = *v48;
        WPP_SF_dSd(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x5Bu,
          (__int64)&WPP_42dbba61d26d3062f1ad4e084cdc81fe_Traceguids,
          **((_DWORD **)v2 + v52 + 8),
          v49);
      }
      if ( (v4 & 1) != 0 && v67 >= 8 )
        operator delete(v66[0]);
      goto LABEL_105;
    }
    v40 = *(_QWORD *)(*((_QWORD *)v2 + v28 + 8) + 8i64);
    v41 = (int *)v55[0];
    v5 = (**(__int64 (__fastcall ***)(CDNSPolicyCriteriaSubnetRecord *, __int64, __int64))v31)(v31, v55[0], v40);
    if ( v5 )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        CDnsPolicy::Name((const void **)v3, (__int64)v66);
        v4 = 2;
        CriteriaTypeString = GetCriteriaTypeString(**((_DWORD **)v2 + v52 + 8));
        WPP_SF_sSD(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x5Cu,
          (__int64)&WPP_42dbba61d26d3062f1ad4e084cdc81fe_Traceguids,
          CriteriaTypeString,
          v47);
      }
      if ( (v4 & 2) != 0 && v67 >= 8 )
        operator delete(v66[0]);
      FreePolicyCriteriaList(v41);
      goto LABEL_105;
    }
    FreePolicyCriteriaList(v41);
    v42 = *((_QWORD *)v3 + 14);
    v44 = std::_List_val<CDNSPolicyCriteria *>::_Buynode(v43, v42, *(_QWORD *)(v42 + 8), &v53);
    v45 = *((_QWORD *)v3 + 15);
    if ( v45 == 0x1FFFFFFFFFFFFFFEi64 )
      std::_Xlength_error("list<T> too long");
    *((_QWORD *)v3 + 15) = v45 + 1;
    *(_QWORD *)(v42 + 8) = v44;
    *(_QWORD *)v44[1] = v44;
    v6 = v52 + 1;
    v52 = v6;
    if ( (unsigned int)v6 >= *((_DWORD *)v2 + 14) )
      goto LABEL_105;
  }
  v50 = (_DWORD *)*((_QWORD *)v2 + v52 + 8);
  if ( *v50 )
  {
    switch ( *v50 )
    {
      case 1:
        v5 = 9991;
        break;
      case 2:
        v5 = 9992;
        break;
      case 3:
        v5 = 9993;
        break;
      case 4:
        v5 = 9994;
        break;
      case 5:
        v5 = 9995;
        break;
      case 6:
        v5 = 9996;
        break;
    }
  }
  else
  {
    v5 = 9990;
  }
LABEL_105:
  if ( v65 >= 8 )
    operator delete(v63[0]);
  return v5;
}
// 1401473F9: variable 'v22' is possibly undefined
// 14014742F: variable 'v25' is possibly undefined
// 1401476C4: variable 'v43' is possibly undefined
// 140147791: variable 'v47' is possibly undefined
// 140171EA8: using guessed type void *CDNSPolicyCriteriaTransProtocol::`vftable';
// 140171F00: using guessed type void *CDNSPolicyCriteriaNetProtocol::`vftable';
// 140171F58: using guessed type void *CDNSPolicyCriteriaQueryType::`vftable';
// 140184CA8: using guessed type void __stdcall operator delete(void *);
// 140185140: using guessed type __int64 (__fastcall *_guard_dispatch_icall_fptr)(_QWORD, _QWORD);
// 140194B70: using guessed type wchar_t aEq_0[4];
// 140194B78: using guessed type wchar_t aNe_1[4];
