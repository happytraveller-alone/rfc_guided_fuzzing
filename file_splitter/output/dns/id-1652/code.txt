Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 1652
// Total lines: 351

//----- (00000001400D1D30) ----------------------------------------------------
__int64 __fastcall Rpc_ResetZoneTypeEx(__int64 a1, const wchar_t **a2, __int64 a3, __int64 a4, int a5, __int64 a6)
{
  const wchar_t *v6; // rax
  unsigned int v9; // edi
  CDnsClientSubnetRecordsTrie *v10; // r10
  int v12; // r13d
  int v13; // r15d
  unsigned int v14; // r14d
  const wchar_t *v15; // rdx
  const char *v16; // rcx
  int v17; // ecx
  unsigned int v18; // eax
  CDnsClientSubnetRecordsTrie *v19; // rcx
  unsigned __int16 v20; // dx
  UINT v21; // ecx
  __int64 v22; // rdx
  __int64 v23; // rcx
  __int64 v24; // rax
  __int128 *v25; // r9
  const wchar_t *v26; // rcx
  const wchar_t *v27; // rax
  unsigned __int16 v28; // r8
  __int128 *v29; // rcx
  __int128 v30; // xmm0
  const wchar_t *v31; // rcx
  const wchar_t *v32; // rax
  const char *v33; // rax
  const char *v34; // rcx
  const char *v35; // rcx
  const wchar_t *v36; // rax
  int v37; // [rsp+50h] [rbp-B0h] BYREF
  int v38[3]; // [rsp+54h] [rbp-ACh] BYREF
  __int128 v39; // [rsp+60h] [rbp-A0h] BYREF
  void *v40; // [rsp+70h] [rbp-90h]
  __int128 v41; // [rsp+80h] [rbp-80h] BYREF
  const wchar_t *v42; // [rsp+90h] [rbp-70h]
  WCHAR Buffer[64]; // [rsp+A0h] [rbp-60h] BYREF

  v6 = L".";
  v37 = 0;
  if ( a6 )
  {
    v12 = *(_DWORD *)(a3 + 372);
    v13 = *(_DWORD *)(a6 + 16);
    v14 = *(_DWORD *)(a6 + 40);
    if ( a2 )
    {
      if ( v12 != 1 && v13 != 1 )
      {
        v9 = 9611;
LABEL_18:
        v10 = WPP_GLOBAL_Control;
        goto LABEL_7;
      }
      if ( v14 )
      {
        v9 = 9553;
        goto LABEL_18;
      }
    }
    v10 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      if ( a2 )
        v15 = *a2;
      else
        v15 = L".";
      v16 = "file-backed";
      if ( v14 )
        v16 = "DS-integrated";
      WPP_SF_sSDDss(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        (__int64)v15,
        a3,
        *(const char **)(a3 + 16),
        (__int64)v15,
        v13,
        *(_DWORD *)(a6 + 44),
        (__int64)v16,
        *(_QWORD *)(a6 + 32));
      v10 = WPP_GLOBAL_Control;
    }
    v17 = *(_DWORD *)(a3 + 388);
    if ( (v17 & 1) != 0 && (v17 & 6) != 0 )
    {
      v9 = 9568;
      goto LABEL_6;
    }
    if ( *(_DWORD *)(a3 + 372) == 1
      && ((*(_BYTE *)(a3 + 1040) & 4) != 0 || *(_QWORD *)(a3 + 1136))
      && ((v17 & 1) != 0 || v13 != 1 || v14) )
    {
      v9 = 9102;
      goto LABEL_6;
    }
    if ( ((v17 & 1) != 0 && (dword_1401B9750 || g_fDsReadOnlyDcMode) || (*(_BYTE *)(a3 + 1160) & 0x40) != 0) && v14 )
    {
      v9 = 9569;
      goto LABEL_6;
    }
    if ( *(_QWORD *)(a3 + 184) && (unsigned int)(v13 - 1) > 1 )
    {
      v9 = 9955;
      goto LABEL_6;
    }
    v9 = Zone_LockForWriteEx(a3, 1, 0x2710u, (__int64)"ds\\dns\\server\\server\\zonerpc.c", 137);
    if ( v9 )
    {
LABEL_110:
      v10 = WPP_GLOBAL_Control;
      v6 = L".";
      goto LABEL_7;
    }
    if ( v13 != 1 )
    {
      switch ( v13 )
      {
        case 2:
          v18 = zoneResetToSecondary(a3, *(CHAR **)(a6 + 32), *(_DWORD **)(a6 + 56));
          break;
        case 3:
          v18 = zoneResetToStub(
                  a3,
                  v14,
                  *(CHAR **)(a6 + 32),
                  *(_DWORD **)(a6 + 56),
                  *(_DWORD *)(a6 + 88),
                  *(char **)(a6 + 96));
          break;
        case 4:
          v18 = zoneResetToForwarder(
                  a3,
                  v14,
                  *(CHAR **)(a6 + 32),
                  *(_DWORD **)(a6 + 56),
                  *(_DWORD *)(a6 + 88),
                  *(char **)(a6 + 96));
LABEL_66:
          v9 = v18;
          if ( v12 == 1 )
          {
            if ( *(_DWORD *)(a3 + 372) == 1 )
              goto LABEL_81;
            v9 = Reg_DeleteValue(0, 0i64, a3, "IsKeymaster");
            if ( v9 )
            {
              v19 = WPP_GLOBAL_Control;
              if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x10) != 0
                && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
              {
                v20 = 44;
LABEL_73:
                WPP_SF_s(
                  *((_QWORD *)v19 + 7),
                  v20,
                  (__int64)&WPP_5efa35e0870730ffd13051b9da022308_Traceguids,
                  *(const char **)(a3 + 16));
                goto LABEL_81;
              }
              goto LABEL_81;
            }
          }
          else
          {
            if ( *(_DWORD *)(a3 + 372) != 1 || (*(_BYTE *)(a3 + 1040) & 2) == 0 )
              goto LABEL_81;
            v38[0] = 1;
            v9 = Reg_SetValue(0, 0i64, a3, "IsKeymaster", 4u, (BYTE *)v38, 4u);
            if ( v9 )
            {
              v19 = WPP_GLOBAL_Control;
              if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x10) != 0
                && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
              {
                v20 = 45;
                goto LABEL_73;
              }
LABEL_81:
              if ( v9 )
                goto LABEL_83;
            }
          }
          Config_UpdateBootInfo();
          goto LABEL_83;
        default:
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            WPP_SF_sd(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x2Bu,
              (__int64)&WPP_5efa35e0870730ffd13051b9da022308_Traceguids,
              *(const char **)(a3 + 16));
          }
          v9 = 9611;
LABEL_83:
          Zone_UnlockAfterWriteEx(a3, 1, (__int64)"ds\\dns\\server\\server\\zonerpc.c", 13);
          if ( v37 )
            Xfr_ForceZoneExpiration(a3, 0);
          if ( v9 )
            goto LABEL_110;
          memset_0(Buffer, 0, sizeof(Buffer));
          switch ( v13 )
          {
            case 1:
              v21 = 12022;
              break;
            case 2:
              v21 = 12023;
              break;
            case 3:
              v21 = 12024;
              break;
            case 4:
              v21 = 12025;
              break;
            default:
              goto LABEL_95;
          }
          Dns_GetResourceString(v21, Buffer, 64i64);
LABEL_95:
          LogZoneProperty(a3, "Type", Buffer);
          LogZoneProperty(a3, "DatabaseFile", *(const unsigned __int16 **)(a3 + 144));
          v23 = *(unsigned int *)(a3 + 372);
          v24 = *(_QWORD *)(a3 + 16);
          if ( (*(_BYTE *)(a3 + 388) & 1) != 0 )
          {
            if ( v12 != (_DWORD)v23 )
            {
              *((_QWORD *)&v41 + 1) = *(unsigned int *)(a3 + 372);
              v25 = &v41;
              *(_QWORD *)&v41 = v24;
              v26 = L"N/A";
              v27 = *(const wchar_t **)(a3 + 840);
              v28 = 3;
              LOWORD(v37) = 1027;
              BYTE2(v37) = 1;
              if ( v27 )
                v26 = v27;
              v42 = v26;
              v29 = &v39;
              v39 = DNS_EVENT_ZONE_RESET_TYPE_COMPLETE_DS;
              goto LABEL_109;
            }
            v30 = DNS_EVENT_ZONE_MOVE_COMPLETE_DS;
            *(_QWORD *)&v39 = *(_QWORD *)(a3 + 16);
            v31 = L"N/A";
            v32 = *(const wchar_t **)(a3 + 840);
            v25 = &v39;
            LOWORD(v37) = 259;
            v28 = 2;
            if ( v32 )
              v31 = v32;
            *((_QWORD *)&v39 + 1) = v31;
          }
          else
          {
            *(_QWORD *)&v39 = *(_QWORD *)(a3 + 16);
            v33 = *(const char **)(a3 + 136);
            if ( v12 == (_DWORD)v23 )
            {
              v35 = "N/A";
              if ( v33 )
                v35 = *(const char **)(a3 + 136);
              *((_QWORD *)&v39 + 1) = v35;
              if ( a2 )
                v36 = *a2;
              else
                v36 = L".";
              v30 = DNS_EVENT_ZONE_MOVE_COMPLETE_FILE;
              v40 = (void *)v36;
              LOWORD(v37) = 771;
            }
            else
            {
              v30 = DNS_EVENT_ZONE_RESET_TYPE_COMPLETE_FILE;
              *((_QWORD *)&v39 + 1) = v23;
              v34 = "N/A";
              LOWORD(v37) = 1027;
              if ( v33 )
                v34 = v33;
              v40 = (void *)v34;
            }
            BYTE2(v37) = 3;
            v28 = 3;
            v25 = &v39;
          }
          v41 = v30;
          v29 = &v41;
LABEL_109:
          Eventlog_LogEvent((__int64)v29, v22, v28, (unsigned __int16 **)v25, (unsigned __int8 *)&v37, 0, 0, 0i64);
          goto LABEL_110;
      }
      v37 = 1;
      goto LABEL_66;
    }
    if ( v14 )
      v18 = Rpc_ZoneResetToDsPrimary(
              a3,
              *(unsigned int *)(a6 + 44),
              0i64,
              *(_DWORD *)(a6 + 88),
              *(char **)(a6 + 96),
              0x10000000);
    else
      v18 = zoneResetToPrimary(a2, a3, *(CHAR **)(a6 + 32));
    goto LABEL_66;
  }
  v9 = 87;
  v10 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
    return v9;
  if ( (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0 && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
  {
    WPP_SF_D(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x29u, (__int64)&WPP_5efa35e0870730ffd13051b9da022308_Traceguids, 87);
    v10 = WPP_GLOBAL_Control;
LABEL_6:
    v6 = L".";
  }
LABEL_7:
  if ( v10 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)v10 + 68) & 4) != 0
    && *((_BYTE *)v10 + 65) >= 4u )
  {
    if ( a2 )
      v6 = *a2;
    WPP_SF_DsS(
      *((_QWORD *)v10 + 7),
      0x2Eu,
      (__int64)&WPP_5efa35e0870730ffd13051b9da022308_Traceguids,
      v9,
      *(_QWORD *)(a3 + 16),
      (__int64)v6);
  }
  return v9;
}
// 1400D2370: variable 'v22' is possibly undefined
// 140186C38: using guessed type __int128 DNS_EVENT_ZONE_RESET_TYPE_COMPLETE_DS;
// 140186DF0: using guessed type __int128 DNS_EVENT_ZONE_MOVE_COMPLETE_DS;
// 1401870D0: using guessed type __int128 DNS_EVENT_ZONE_RESET_TYPE_COMPLETE_FILE;
// 140187A88: using guessed type __int128 DNS_EVENT_ZONE_MOVE_COMPLETE_FILE;
// 14018B7F8: using guessed type wchar_t aNA[4];
// 1401B8C94: using guessed type int g_fDsReadOnlyDcMode;
// 1401B9750: using guessed type int dword_1401B9750;
// 1400D1D30: using guessed type int var_10C[3];
