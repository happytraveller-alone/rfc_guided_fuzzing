Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 711
// Total lines: 227

//----- (000000014006369C) ----------------------------------------------------
u_short *__fastcall Name_PlaceNodeNameInPacketEx(__int64 a1, unsigned __int64 a2, __int64 *a3)
{
  __int64 *v3; // r15
  u_short *v4; // rdi
  __int64 *v6; // r14
  __int64 v7; // rcx
  __int64 v9; // r8
  unsigned int v10; // r13d
  bool v11; // cc
  int v12; // ecx
  int v13; // r12d
  __int64 v14; // rax
  __int64 v15; // r13
  CDnsClientSubnetRecordsTrie *v16; // rcx
  __int64 v17; // rax
  __int64 *v18; // rdx
  unsigned __int8 *v19; // r15
  unsigned __int8 v20; // bp
  unsigned __int8 *v21; // r15
  unsigned __int8 *v22; // rcx
  BOOL v23; // eax
  char *v24; // rdi
  unsigned __int16 v25; // dx
  int v26; // [rsp+40h] [rbp-38h]
  __int64 *v27; // [rsp+48h] [rbp-30h]
  unsigned int v29; // [rsp+98h] [rbp+20h]

  v3 = a3;
  v4 = (u_short *)a2;
  v6 = a3;
  if ( *(__int64 **)(a1 + 3104) == a3
    && (v7 = *(unsigned __int16 *)(a1 + 3100), v7 + a1 + 6304 < a2)
    && (unsigned __int16)v7 < 0x4000u )
  {
    if ( !(unsigned int)Wire_TestForBytesRemaining(a2, *(_QWORD *)(a1 + 24), 2i64) )
      return 0i64;
    *v4 = htons(*(_WORD *)(a1 + 3100) | 0xC000);
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
    {
      WPP_SF_qqDq(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        *(unsigned __int16 *)(a1 + 3100),
        v9,
        v3,
        a1,
        *(unsigned __int16 *)(a1 + 3100),
        v4);
    }
    return v4 + 1;
  }
  else
  {
    v10 = *(_DWORD *)(a1 + 3096);
    v11 = a2 <= *(_QWORD *)(a1 + 24);
    v29 = v10;
LABEL_12:
    if ( !v11 )
      goto LABEL_60;
    v26 = *((unsigned __int8 *)v6 + 101);
    if ( *((_BYTE *)v6 + 101) )
    {
      v12 = *(_DWORD *)(a1 + 3096);
      v13 = v12;
      v14 = v12;
      if ( v12 )
      {
        while ( 1 )
        {
          --v14;
          --v13;
          if ( *(__int64 **)(a1 + 8 * v14 + 3112) == v6 )
            break;
          if ( !v14 )
            goto LABEL_17;
        }
      }
      else
      {
LABEL_17:
        v13 = *(_DWORD *)(a1 + 3096);
        v15 = v13;
        if ( !v12 )
          goto LABEL_41;
        v16 = WPP_GLOBAL_Control;
        while ( 1 )
        {
          --v15;
          --v13;
          if ( !*(_QWORD *)(a1 + 8 * v15 + 3112) && *(_BYTE *)(a1 + v15 + 3612) == *((_BYTE *)v6 + 100) )
          {
            v17 = *(unsigned __int16 *)(a1 + 2 * v15 + 3512);
            v18 = v6;
            v19 = (unsigned __int8 *)(v17 + a1 + 6304);
            v27 = v6;
            if ( v16 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              && (*((_DWORD *)v16 + 17) & 0x800) != 0
              && *((_BYTE *)v16 + 65) >= 5u )
            {
              WPP_SF_qqq(
                *((_QWORD *)v16 + 7),
                0xFu,
                (__int64)&WPP_7fc80419a8b133cb02be4345e744511d_Traceguids,
                a1,
                v17 + a1 + 6304,
                v6);
              v16 = WPP_GLOBAL_Control;
              v18 = v6;
            }
            if ( (unsigned __int64)v19 < *(_QWORD *)(a1 + 32) )
              break;
          }
LABEL_39:
          if ( !v15 )
          {
            v3 = a3;
LABEL_41:
            if ( !(unsigned int)Wire_TestForBytesRemaining((unsigned __int64)v4, *(_QWORD *)(a1 + 24), v26 + 1i64) )
              return 0i64;
            if ( (unsigned int)((_DWORD)v4 - a1 - 6305) > 0x3FFE || *(_BYTE *)(a1 + 1454) )
            {
              v10 = v29;
            }
            else
            {
              v10 = v29;
              if ( v29 < 0x32 )
              {
                *(_WORD *)(a1 + 2i64 * v29 + 3512) = (_WORD)v4 - a1 - 6304;
                *(_QWORD *)(a1 + 8i64 * v29 + 3112) = v6;
                *(_BYTE *)(v29 + a1 + 3612) = *((_BYTE *)v6 + 100);
                v10 = ++v29;
              }
            }
            if ( v6 == v3 )
            {
              *((_BYTE *)v6 + 98) = CurrentTimeoutBin;
              *(_QWORD *)(a1 + 3104) = v6;
              *(_WORD *)(a1 + 3100) = (_WORD)v4 - a1 - 6304;
            }
            *(_BYTE *)v4 = v26;
            v24 = (char *)v4 + 1;
            memcpy_0(v24, (char *)v6 + 102, v26);
            v6 = (__int64 *)*v6;
            v4 = (u_short *)&v24[v26];
            v11 = (unsigned __int64)v4 <= *(_QWORD *)(a1 + 24);
            goto LABEL_12;
          }
        }
        while ( 2 )
        {
          v20 = *v19;
          v21 = v19 + 1;
          while ( (v20 & 0xC0) != 0 )
          {
            v22 = (unsigned __int8 *)(((v20 & 0x3F) << 8) + *v21 + a1 + 6304);
            if ( v22 >= v21 )
            {
              v23 = 0;
              goto LABEL_37;
            }
            v20 = *v22;
            v21 = v22 + 1;
          }
          if ( (unsigned int)Name_CaseInsensitiveLabelCompare(
                               v21,
                               v20,
                               (unsigned __int8 *)v18 + 102,
                               *((unsigned __int8 *)v18 + 101)) )
            goto LABEL_38;
          v19 = &v21[v20];
          v18 = (__int64 *)*v27;
          v27 = v18;
          if ( v18 && *v18 )
          {
            if ( (unsigned __int64)v19 < *(_QWORD *)(a1 + 32) )
              continue;
            goto LABEL_38;
          }
          break;
        }
        v23 = *v19 == 0;
LABEL_37:
        if ( !v23 )
        {
LABEL_38:
          v16 = WPP_GLOBAL_Control;
          goto LABEL_39;
        }
        v10 = v29;
      }
      v25 = *(_WORD *)(a1 + 2i64 * v13 + 3512);
      if ( (unsigned __int16)((_WORD)v4 - a1 - 6304) <= v25 )
      {
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
        {
          WPP_SF_Ddq(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x12u,
            (__int64)&WPP_7fc80419a8b133cb02be4345e744511d_Traceguids,
            v25);
        }
        return 0i64;
      }
      if ( !(unsigned int)Wire_TestForBytesRemaining((unsigned __int64)v4, *(_QWORD *)(a1 + 24), 2i64) )
        return 0i64;
      *v4++ = htons(*(_WORD *)(a1 + 2i64 * v13 + 3512) | 0xC000);
      *(_QWORD *)(a1 + 8i64 * v13 + 3112) = v6;
    }
    else
    {
      if ( !(unsigned int)Wire_TestForBytesRemaining((unsigned __int64)v4, *(_QWORD *)(a1 + 24), 1i64) )
        return 0i64;
      *(_BYTE *)v4 = 0;
      v4 = (u_short *)((char *)v4 + 1);
    }
LABEL_60:
    *(_DWORD *)(a1 + 3096) = v10;
    return v4;
  }
}
// 140063770: variable 'v9' is possibly undefined
// 1401BA4B8: using guessed type char CurrentTimeoutBin;
