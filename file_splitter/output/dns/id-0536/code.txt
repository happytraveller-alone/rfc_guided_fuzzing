Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 536
// Total lines: 169

//----- (000000014004ACEC) ----------------------------------------------------
__int64 __fastcall Ds_BootFromDs(int a1, const unsigned __int16 **a2)
{
  unsigned int v4; // edi
  CDnsClientSubnetRecordsTrie *v5; // rcx
  int v6; // eax
  unsigned int v7; // ebx
  unsigned int v8; // eax
  unsigned __int64 v9; // rbp
  unsigned int v10; // r9d
  __int64 v11; // rdx
  unsigned __int64 i; // rsi
  int v13; // eax
  __int64 v15; // [rsp+40h] [rbp-68h] BYREF
  __int128 v16; // [rsp+50h] [rbp-58h] BYREF
  unsigned __int16 *v17[3]; // [rsp+60h] [rbp-48h] BYREF

  v4 = 0;
  v5 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_D(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x21Du, (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids, a1);
    v5 = WPP_GLOBAL_Control;
  }
  if ( a2 )
  {
    v7 = v15;
  }
  else
  {
    v6 = Ds_OpenServer(a1);
    v7 = v6;
    if ( !v6 )
    {
LABEL_37:
      v5 = WPP_GLOBAL_Control;
      while ( g_fDnsServiceExit != 1 )
      {
        v8 = v4++;
        if ( v8 >= 0xA )
          goto LABEL_42;
        if ( v5 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)v5 + 17) & 0x400) != 0
          && *((_BYTE *)v5 + 65) >= 4u )
        {
          WPP_SF_D(*((_QWORD *)v5 + 7), 0x21Fu, (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids, v4);
          v5 = WPP_GLOBAL_Control;
        }
        if ( v4 > 1 )
        {
          v17[2] = 0i64;
          v9 = v4 - 2;
          v17[0] = (unsigned __int16 *)(int)v7;
          if ( v9 >= 5 )
            v9 = 4i64;
          LOWORD(v15) = 1028;
          v10 = dword_14018CD00[v9];
          v11 = v10 / 0x3E8;
          v17[1] = (unsigned __int16 *)v11;
          if ( v5 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)v5 + 17) & 0x400) != 0
            && *((_BYTE *)v5 + 65) >= 4u )
          {
            WPP_SF_D(*((_QWORD *)v5 + 7), 0x220u, (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids, v10);
          }
          v16 = DNS_EVENT_ZONE_LIST_RETRY;
          Eventlog_LogEvent((__int64)&v16, v11, 2u, v17, (unsigned __int8 *)&v15, 0, 0, 0i64);
          for ( i = 0i64; g_fDnsServiceExit != 1; ++i )
          {
            if ( i >= dword_14018CD00[v9] / 0x64u )
              break;
            Sleep(0x64u);
          }
        }
        if ( isDNinDS(pServerLdap, g_pwszDnsContainerDN, 0, 0i64, 0i64) )
        {
          v13 = buildZoneListFromDs();
          v7 = v13;
          if ( !v13 )
          {
            setNotifyForIncomingZone();
            v5 = WPP_GLOBAL_Control;
            goto LABEL_42;
          }
          v5 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            WPP_SF_D(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x222u,
              (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
              v13);
            goto LABEL_37;
          }
        }
        else
        {
          v5 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            WPP_SF_(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x221u,
              (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids);
            goto LABEL_37;
          }
        }
      }
      goto LABEL_43;
    }
    v5 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_D(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x21Eu,
        (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
        v6);
      v5 = WPP_GLOBAL_Control;
    }
    v7 = 9717;
  }
LABEL_42:
  if ( g_fDnsServiceExit == 1 )
  {
LABEL_43:
    v7 = 0;
    goto LABEL_53;
  }
  if ( dword_1401B9728 )
  {
    v7 &= -((unsigned int)Boot_ProcessRegistryAfterAlternativeLoad(0, 1, a2) != 0);
    goto LABEL_52;
  }
  if ( !v7 )
  {
    Boot_ProcessRegistryAfterAlternativeLoad(0, 0, a2);
    goto LABEL_52;
  }
  if ( v5 == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
    return v7;
  if ( (*((_DWORD *)v5 + 17) & 0x400) != 0 && *((_BYTE *)v5 + 65) >= 4u )
  {
    WPP_SF_(*((_QWORD *)v5 + 7), 0x223u, (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids);
LABEL_52:
    v5 = WPP_GLOBAL_Control;
  }
LABEL_53:
  if ( v5 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)v5 + 17) & 0x400) != 0
    && *((_BYTE *)v5 + 65) >= 4u )
  {
    WPP_SF_D(*((_QWORD *)v5 + 7), 0x224u, (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids, v7);
  }
  return v7;
}
// 14004AE9A: variable 'v11' is possibly undefined
// 140187AC8: using guessed type __int128 DNS_EVENT_ZONE_LIST_RETRY;
// 14018CD00: using guessed type _DWORD dword_14018CD00[6];
// 1401B9728: using guessed type int dword_1401B9728;
// 1401B9A40: using guessed type int g_fDnsServiceExit;
