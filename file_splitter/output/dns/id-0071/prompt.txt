Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 71
// Total lines: 572

//----- (000000014000735C) ----------------------------------------------------
_BYTE *__fastcall getNextAdditionalNode(struct _DNS_MSGINFO *a1, _DWORD *a2, _DWORD *a3)
{
  unsigned int v5; // r13d
  int v6; // edi
  unsigned int v7; // r15d
  __int64 v8; // rax
  int v9; // eax
  __int16 v10; // cx
  __int64 v11; // rax
  unsigned __int16 v12; // dx
  int v13; // ebx
  _BYTE *v14; // r14
  CDnsClientSubnetRecordsTrie *v15; // rcx
  char *v16; // rax
  __int64 v17; // rdx
  __int64 v18; // r8
  __int64 v19; // r9
  __int64 v20; // rdi
  char *v21; // rax
  unsigned __int16 v22; // cx
  int v23; // eax
  struct _DNS_MSGINFO *v24; // rcx
  int matched; // eax
  __int64 v26; // rax
  char *v27; // rax
  unsigned __int16 v28; // dx
  __int64 v29; // r10
  __int64 v30; // rax
  __int64 v31; // rbx
  char *v32; // rax
  char *v33; // rax
  __int64 v34; // rcx
  bool v35; // zf
  int Scope; // eax
  unsigned __int16 v37; // r9
  int v38; // eax
  int v39; // edx
  CDnsClientSubnetRecordsTrie *v40; // rcx
  unsigned __int16 v41; // dx
  __int16 v42; // ax
  char *v43; // rax
  __int64 v45; // [rsp+20h] [rbp-E0h]
  wchar_t *String1; // [rsp+28h] [rbp-D8h]
  __int64 v47; // [rsp+30h] [rbp-D0h]
  __int64 v48; // [rsp+38h] [rbp-C8h]
  unsigned __int16 v49; // [rsp+40h] [rbp-C0h]
  int v50; // [rsp+44h] [rbp-BCh]
  int Cleanup; // [rsp+48h] [rbp-B8h] BYREF
  int v52; // [rsp+4Ch] [rbp-B4h]
  int v53; // [rsp+50h] [rbp-B0h]
  int v54; // [rsp+54h] [rbp-ACh]
  __int64 v55; // [rsp+58h] [rbp-A8h]
  _DWORD *v56; // [rsp+60h] [rbp-A0h]
  __int16 v57[184]; // [rsp+70h] [rbp-90h] BYREF
  wchar_t v58[256]; // [rsp+1E0h] [rbp+E0h] BYREF
  int v59; // [rsp+3E0h] [rbp+2E0h]

  v56 = a2;
  v5 = 536872960;
  v50 = 0;
  v6 = 0;
  v53 = 0;
  v52 = 0;
  v54 = 1;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
  {
    WPP_SF_qDddd(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      (__int64)&WPP_GLOBAL_Control,
      0i64,
      a1,
      *((_DWORD *)a1 + 572),
      *((_DWORD *)a1 + 569),
      *((_DWORD *)a1 + 570),
      *((_DWORD *)a1 + 571));
  }
  *a3 = 0;
  v7 = *((_DWORD *)a1 + 570);
  if ( *((_BYTE *)a1 + 1448) )
  {
    v5 = 537397256;
  }
  else if ( *((_DWORD *)a1 + 571) )
  {
    v6 = 1;
    v50 = 1;
    v7 = *((_DWORD *)a1 + 571);
    v5 = 536872968;
  }
  v8 = *((_QWORD *)a1 + 28);
  if ( v8 && *(_BYTE *)(v8 + 96) == 67 && *((_DWORD *)a1 + 569) )
    v5 |= 0x80000u;
  if ( v7 != *((_DWORD *)a1 + 569) || !*((_WORD *)a1 + 3157) || (v9 = *((_DWORD *)a1 + 572), (v9 & 1) != 0) )
  {
LABEL_20:
    if ( !v6 )
      goto LABEL_22;
    goto LABEL_21;
  }
  *((_DWORD *)a1 + 570) = 0;
  *((_DWORD *)a1 + 572) = v9 | 2;
  v7 = 0;
  v5 = 2056;
  v50 = 1;
  v6 = 1;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x63u, (__int64)&WPP_a00dfa190cfc31699b498ea413aa2a5c_Traceguids, a1);
    goto LABEL_20;
  }
LABEL_21:
  v5 |= 4u;
  while ( 1 )
  {
LABEL_22:
    if ( *((_DWORD *)a1 + 569) <= v7 )
    {
      *((_DWORD *)a1 + 570) = (unsigned __int16)v7;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
      {
        LODWORD(v45) = v7;
        WPP_SF_qd(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x70u,
          (__int64)&WPP_a00dfa190cfc31699b498ea413aa2a5c_Traceguids,
          a1,
          v45);
      }
      v14 = 0i64;
      goto LABEL_179;
    }
    if ( (*((_BYTE *)a1 + 2288) & 2) == 0 )
      break;
    v10 = *((_WORD *)a1 + v7 + 1498);
    if ( v10 == 1 || v10 == 28 )
      break;
    ++v7;
  }
  v11 = v7++;
  v12 = *((_WORD *)a1 + v11 + 1498);
  *((_WORD *)a1 + 220) = v12;
  LOWORD(v13) = *((_WORD *)a1 + v11 + 1448);
  v14 = (_BYTE *)*((_QWORD *)a1 + v11 + 287);
  v49 = v13;
  v52 = *((_DWORD *)a1 + v11 + 674);
  v15 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
  {
    v13 = v12;
    v16 = Dbg_NodeName((__int64)v14);
    LODWORD(v48) = v5;
    LODWORD(v47) = v13;
    LODWORD(String1) = v49;
    HIDWORD(v45) = HIDWORD(a1);
    WPP_SF_sqddD(*((_QWORD *)WPP_GLOBAL_Control + 7), v17, v18, v16);
    v15 = WPP_GLOBAL_Control;
    LOWORD(v13) = v49;
    v6 = v50;
  }
  if ( (unsigned __int8)(*((_BYTE *)a1 + 1415) - 1) <= 1u )
  {
    if ( (unsigned int)DnsIsNSECType(*((unsigned __int16 *)a1 + 220)) || v52 )
    {
      *((_BYTE *)a1 + 1415) = 2;
      goto LABEL_37;
    }
    v15 = WPP_GLOBAL_Control;
  }
  if ( (*((_BYTE *)a1 + 2288) & 4) == 0 )
  {
    *((_BYTE *)a1 + 1415) = 3;
LABEL_37:
    v15 = WPP_GLOBAL_Control;
  }
  v19 = v6;
  v55 = v6;
  while ( 1 )
  {
    v20 = *((_QWORD *)a1 + 28);
    if ( v15 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)v15 + 17) & 0x40000) != 0
      && *((_BYTE *)v15 + 65) >= 5u )
    {
      v21 = Dbg_NodeName(*((_QWORD *)a1 + 28));
      WPP_SF_s(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x65u,
        (__int64)&WPP_a00dfa190cfc31699b498ea413aa2a5c_Traceguids,
        v21);
      v15 = WPP_GLOBAL_Control;
      v19 = v55;
    }
    if ( v14 )
      goto LABEL_69;
    Cleanup = 0;
    if ( *((_QWORD *)a1 + 33) && v54 )
      Cleanup = Plugin_DnsQueryCleanup((__int64)a1);
    if ( *((_BYTE *)a1 + 1448) || *((_BYTE *)a1 + 1449) )
    {
      v22 = 279;
      goto LABEL_54;
    }
    if ( v19 || *((_BYTE *)a1 + 1415) == 3 )
    {
      v22 = 280;
LABEL_54:
      Etw_LogInternalLookupQuery(
        v22,
        (struct in_addr *)a1,
        *((_WORD *)a1 + 220),
        (unsigned __int8 *)a1 + (unsigned __int16)v13 + 6304,
        v5,
        0i64);
    }
    if ( dword_1401B9934 && dword_1401B9938 )
    {
      memset_0(v58, 0, 0x204ui64);
      memset_0(v57, 0, sizeof(v57));
      v23 = Name_ConvertPacketNameToLookupNameEx(
              (__int64)a1,
              (unsigned __int8 *)a1 + (unsigned __int16)v13 + 6304,
              (unsigned __int16 *)v57,
              0);
      v24 = a1;
      if ( !v23 )
        goto LABEL_155;
      matched = MatchPolicy(a1, 0i64, (__int64)v57, 1u, 0, v58, 0i64);
      Cleanup = matched;
      if ( matched )
      {
        v40 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
        {
          v41 = 102;
          LODWORD(v45) = matched;
LABEL_153:
          WPP_SF_qd(
            *((_QWORD *)v40 + 7),
            v41,
            (__int64)&WPP_a00dfa190cfc31699b498ea413aa2a5c_Traceguids,
            a1,
            v45,
            String1,
            v47,
            v48);
        }
LABEL_154:
        v24 = a1;
LABEL_155:
        Reject_Request((__int64)v24, 2u, 1);
        *a3 = 1;
        goto LABEL_179;
      }
      if ( !v59 )
      {
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          WPP_SF_q(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x67u,
            (__int64)&WPP_a00dfa190cfc31699b498ea413aa2a5c_Traceguids,
            a1);
        }
        *a3 = 1;
        *((_DWORD *)a1 + 1572) |= 0x800u;
        v39 = 0;
        goto LABEL_148;
      }
      if ( v59 == 2 )
      {
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          WPP_SF_q(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x68u,
            (__int64)&WPP_a00dfa190cfc31699b498ea413aa2a5c_Traceguids,
            a1);
        }
        *a3 = 1;
        v39 = 1;
LABEL_148:
        Send_QueryResponse(a1, v39);
        goto LABEL_179;
      }
    }
    v26 = Lookup_NodeForPacketEx(a1, (unsigned __int8 *)a1 + (unsigned __int16)v13 + 6304, v5, 0i64, &Cleanup);
    v14 = (_BYTE *)v26;
    switch ( Cleanup )
    {
      case -5:
        *a3 = 1;
LABEL_163:
        Send_QueryResponse(a1, 1);
        goto LABEL_179;
      case -3:
        goto LABEL_67;
      case -4:
        Send_QueryResponse(a1, 0);
        *a3 = 1;
        goto LABEL_179;
    }
    if ( Cleanup != -6 )
    {
      if ( !Cleanup )
        goto LABEL_67;
      v40 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        v41 = 105;
        LODWORD(v45) = Cleanup;
        goto LABEL_153;
      }
      goto LABEL_154;
    }
    *((_DWORD *)a1 + 1572) |= 2u;
LABEL_67:
    if ( !v26 )
      goto LABEL_70;
    v15 = WPP_GLOBAL_Control;
LABEL_69:
    if ( (*((_DWORD *)v14 + 23) & 0x40000) != 0 )
      goto LABEL_86;
LABEL_70:
    if ( !(unsigned int)Gnz_IsUsable() )
      goto LABEL_85;
    if ( dword_1401B9990 )
    {
      if ( dword_1401B9990 != 1 || v14 || !*((_QWORD *)a1 + 32) )
        goto LABEL_85;
      v14 = (_BYTE *)*((_QWORD *)a1 + 32);
      v15 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
      {
        v13 = (unsigned __int16)v13;
        v27 = Dbg_NodeName((__int64)v14);
        v28 = 107;
        goto LABEL_84;
      }
    }
    else
    {
      if ( !*((_QWORD *)a1 + 32) )
        goto LABEL_85;
      v14 = (_BYTE *)*((_QWORD *)a1 + 32);
      v15 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
      {
        v13 = (unsigned __int16)v13;
        v27 = Dbg_NodeName((__int64)v14);
        v28 = 106;
LABEL_84:
        LODWORD(String1) = v13;
        HIDWORD(v45) = HIDWORD(a1);
        WPP_SF_sqD(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          v28,
          (__int64)&WPP_a00dfa190cfc31699b498ea413aa2a5c_Traceguids,
          v27);
LABEL_85:
        v15 = WPP_GLOBAL_Control;
      }
    }
LABEL_86:
    v29 = *((_QWORD *)a1 + 26);
    if ( v14 )
      goto LABEL_165;
    if ( v29 && *(_DWORD *)(v29 + 372) == 3 )
    {
      v14 = Lookup_ZoneNode(v29, (unsigned __int8 *)a1 + v49 + 6304, (__int64)a1, 0i64, 0, 0i64, 0i64, 0i64);
      if ( v14 )
        goto LABEL_165;
      v15 = WPP_GLOBAL_Control;
    }
    v30 = *((_QWORD *)a1 + 25);
    if ( v30 )
    {
      if ( (*(_DWORD *)(v30 + 92) & 0x20000) != 0 )
        break;
    }
    v31 = *((_QWORD *)a1 + 57);
    if ( v15 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)v15 + 17) & 0x40000) != 0
      && *((_BYTE *)v15 + 65) >= 5u )
    {
      v32 = Dbg_NodeName(*((_QWORD *)a1 + 57));
      WPP_SF_s(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x6Cu,
        (__int64)&WPP_a00dfa190cfc31699b498ea413aa2a5c_Traceguids,
        v32);
      v15 = WPP_GLOBAL_Control;
    }
    if ( !v31 )
    {
      if ( v15 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)v15 + 17) & 0x40000) != 0
        && *((_BYTE *)v15 + 65) >= 5u )
      {
        v33 = Dbg_NodeName(v20);
        WPP_SF_s(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x6Du,
          (__int64)&WPP_a00dfa190cfc31699b498ea413aa2a5c_Traceguids,
          v33);
      }
      v31 = v20;
      if ( !v20 )
        goto LABEL_108;
    }
    v34 = *(_QWORD *)(v31 + 56);
    if ( v34 )
    {
      LOWORD(v13) = v49;
      v14 = Lookup_ZoneNode(v34, (unsigned __int8 *)a1 + v49 + 6304, (__int64)a1, 0i64, 1, 0i64, 0i64, 0i64);
      if ( (unsigned int)DnsBL_TestNodeAgainstBlockList((__int64)v14) )
        v14 = 0i64;
      if ( v14 )
        goto LABEL_166;
    }
    else
    {
LABEL_108:
      LOWORD(v13) = v49;
    }
    *((_DWORD *)a1 + 1572) &= ~1u;
    v35 = g_pfnPluginDnsQuery4 == 0;
    *((_QWORD *)a1 + 458) = 0i64;
    if ( v35 )
      goto LABEL_117;
    Scope = Plugin_DnsQueryScope((__int64)a1, (__int64)a1 + (unsigned __int16)v13 + 6304, 0i64);
    if ( !Scope )
      goto LABEL_117;
    if ( Scope == -5 )
    {
      *a3 = 1;
      goto LABEL_163;
    }
    if ( Scope != -3 )
    {
      if ( Scope == -4 )
      {
        Send_QueryResponse(a1, 0);
        *a3 = 1;
      }
      else
      {
        if ( Scope != -6 )
        {
          Reject_Request((__int64)a1, 2u, 1);
          *a3 = 1;
          goto LABEL_179;
        }
        *((_DWORD *)a1 + 1572) |= 2u;
      }
    }
LABEL_117:
    if ( v53 || !g_pfnPluginDnsQuery2 && !g_pfnPluginDnsQuery || (*((_BYTE *)a1 + 6288) & 1) != 0 )
      goto LABEL_124;
    v37 = *((_WORD *)a1 + 220);
    v53 = 1;
    v38 = Plugin_DnsQuery((__int64)a1, (unsigned __int8 *)a1 + (unsigned __int16)v13 + 6304, 0i64, v37, 0i64);
    if ( v38 )
    {
      if ( v38 == -4 )
        goto LABEL_179;
LABEL_124:
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
      {
        LODWORD(v45) = (unsigned __int16)v13;
        WPP_SF_qd(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x6Eu,
          (__int64)&WPP_a00dfa190cfc31699b498ea413aa2a5c_Traceguids,
          a1,
          v45);
      }
      v6 = v50;
      if ( *((_DWORD *)a1 + 569) == v7 && !*((_BYTE *)a1 + 1448) && !*((_WORD *)a1 + 3157) && !v50 )
      {
        if ( *((_BYTE *)a1 + 1417) )
        {
          *((_DWORD *)a1 + 572) |= 2u;
          v7 = 0;
          *((_DWORD *)a1 + 570) = 0;
          v5 = 2056;
          v6 = 1;
          v50 = 1;
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
          {
            WPP_SF_q(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x6Fu,
              (__int64)&WPP_a00dfa190cfc31699b498ea413aa2a5c_Traceguids,
              a1);
          }
        }
      }
      goto LABEL_22;
    }
    v15 = WPP_GLOBAL_Control;
    v19 = v55;
    v54 = 0;
  }
  v14 = (_BYTE *)*((_QWORD *)a1 + 25);
LABEL_165:
  LOWORD(v13) = v49;
LABEL_166:
  *((_WORD *)a1 + 221) = v13;
  if ( v50 )
    *((_DWORD *)a1 + 571) = v7;
  else
    *((_DWORD *)a1 + 570) = v7;
  *(_WORD *)((char *)a1 + 1419) = 0;
  v42 = *((_WORD *)a1 + 220);
  if ( v42 == 1 || v42 == 28 )
    *((_DWORD *)a1 + 572) |= 1u;
LABEL_179:
  if ( v56 )
    *v56 = v14 != 0i64 ? v52 : 0;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    v43 = Dbg_NodeName((__int64)v14);
    WPP_SF_sqq(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x71u,
      (__int64)&WPP_a00dfa190cfc31699b498ea413aa2a5c_Traceguids,
      v43);
  }
  return v14;
}
// 1400075A1: variable 'v17' is possibly undefined
// 1400075A1: variable 'v18' is possibly undefined
// 1400076A8: variable 'v19' is possibly undefined
// 140007BAC: variable 'v45' is possibly undefined
// 140007D35: variable 'String1' is possibly undefined
// 140007D35: variable 'v47' is possibly undefined
// 140007D35: variable 'v48' is possibly undefined
// 140183D90: using guessed type __int64 __fastcall DnsIsNSECType(_QWORD);
// 1401B8FC8: using guessed type __int64 g_pfnPluginDnsQuery4;
// 1401B8FD0: using guessed type __int64 g_pfnPluginDnsQuery;
// 1401B8FD8: using guessed type __int64 g_pfnPluginDnsQuery2;
// 1401B9934: using guessed type int dword_1401B9934;
// 1401B9938: using guessed type int dword_1401B9938;
// 1401B9990: using guessed type int dword_1401B9990;
// 14000735C: using guessed type unsigned __int16 var_3C0[184];
##############################
Role: Let's assume that you are an advanced reverse engineer and you are reverse engineering a network driver using IDA Pro, and you are also familiar with the RFC documentation. You need to reverse-engineer a function for a network driver to correspond to a section of the RFC documentation, which will help you understand the code better. The driver you're reversing is Schannel.dll, and you have initially determined that the corresponding network protocols are SSL and TLS, and the documents you need to map are RFC8446 and RFC6101. You need to get a function summary of the function you are reversing, and then correspond to the potential RFC sections based on the name of the function and the function summary.
Function Background: The function is reverse engineered from the driver file Schannel.dll on Windows platform. Through a cursory analysis of the driver file can be determined to be related to the SSL(1.3), TLS(3.0) protocol, that is, with RFC8446, RFC6101 strong correlation.

Output Function Summary: Summarizes the function's functionality with several phrases instead of sentences, focuses on covering the function's control flow information, and highlights the protocol function points implemented by the function. Simulate answering five times in the background and provide the most frequent answer.

Retrieve document sections: giving matches for document sections(FunctionMatchRFCResult) that the code may related to. NOTE if the code is only business related(i.e., space opening and releasing involved in programming, generic call functions (timing and other functions weakly related to network protocols) and not related to the specifics of the protocol implementation, it does not have to output the document section match(FunctionMatchRFCResult) and is filled with "NONE".

Retrieve document sections Thinking Chain: The function code is matched with the RFC document section, and the thinking chain is provided to help you solve the problem better:
	1. Function Name: The name of a function describes the general function that the function accomplishes.
	2. Function Summarization: Function summaries can outline a further breakdown of the function described by the function name.
	3. Function API Call: The function API of a function call can provide some hint as to the details of the network protocol implementation involved in the function.
	4. Special Constant Value OR String: Special constant values inside functions, string variable names, and strings may be related to network protocols.
	5. Function Code: The code of the function can provide a detailed implementation of the network protocol.
Generate Function Information Collection with JSON Format:

{
	"FunctionIndex": "(FILL WITH "File count" with less than four bits are indexed with zeros to make up the four bits.)",
	"FunctionName": "(Full Function Code Name)",
	"FunctionSummarization": [
		"(Function Summary Phrase1)",
		"(Function Summary Phrase2)",
		"(...)"
	],
	"FunctionMatchRFCResult": [
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 1)",
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 2)",
		"(...)"
	],
}

ATTENTION: Remember YOU MUST ONLY output the Function Information Collection result.
