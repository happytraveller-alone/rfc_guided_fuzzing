Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 1711
// Total lines: 250

//----- (00000001400DAF9C) ----------------------------------------------------
void __fastcall processNotify(struct _DNS_MSGINFO *a1)
{
  __int64 v2; // rax
  __int64 v3; // rdi
  char *v4; // rax
  CDnsClientSubnetRecordsTrie *v5; // rcx
  u_long v6; // r14d
  int v7; // r8d
  char *v8; // rax
  __int64 v9; // rax
  int v10; // esi
  const char *v11; // rax
  const char *v12; // rax
  const char *v13; // rax
  int v14; // eax
  __int64 v15; // rcx
  const char *v16; // rax
  char *v17; // rax
  u_long v18; // [rsp+60h] [rbp+8h] BYREF

  v18 = 0;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x40) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x45u, (__int64)&WPP_8f5c62d9956434feed7ea8f9d17b2299_Traceguids, a1);
  }
  _InterlockedAdd(&dword_1401C8088, 1u);
  if ( *((_WORD *)a1 + 240) != 6 )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x40) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_q(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x46u,
        (__int64)&WPP_8f5c62d9956434feed7ea8f9d17b2299_Traceguids,
        a1);
    }
LABEL_10:
    _InterlockedAdd(&dword_1401C808C, 1u);
    return;
  }
  *((_BYTE *)a1 + 6306) |= 0x80u;
  v2 = readZoneFromSoaAnswer(a1, 6i64, &v18, 0i64);
  v3 = v2;
  if ( v2 )
  {
    *((_DWORD *)a1 + 1572) |= 0x280u;
    *((_QWORD *)a1 + 460) = v2;
  }
  Etw_LogIncomingPacket(0x111u, (__int64)a1, 0i64, 1);
  if ( !v3 )
  {
    if ( (*((_BYTE *)a1 + 6288) & 0x40) == 0 )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x40) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        v4 = Dbg_PacketName(*((unsigned __int8 **)a1 + 4), (__int64)a1 + 6304, 0i64);
        WPP_SF_s(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x47u,
          (__int64)&WPP_8f5c62d9956434feed7ea8f9d17b2299_Traceguids,
          v4);
      }
      goto LABEL_10;
    }
    *((_BYTE *)a1 + 1412) = 0;
    Reject_RequestIntact((__int64)a1, 2u, 1);
    return;
  }
  *((_BYTE *)a1 + 6306) &= ~0x80u;
  v5 = WPP_GLOBAL_Control;
  v6 = v18;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x40) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_sdD(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x48u,
      (__int64)&WPP_8f5c62d9956434feed7ea8f9d17b2299_Traceguids,
      *(const char **)(v3 + 16));
    v5 = WPP_GLOBAL_Control;
  }
  v7 = *(_DWORD *)(v3 + 372);
  if ( v7 == 1 )
  {
    if ( (*(_BYTE *)(v3 + 388) & 1) != 0 )
    {
      if ( v5 == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
      {
LABEL_34:
        _InterlockedAdd(&dword_1401C8090, 1u);
        return;
      }
      if ( (*((_BYTE *)v5 + 68) & 0x40) != 0 && *((_BYTE *)v5 + 65) >= 4u )
      {
        WPP_SF_s(
          *((_QWORD *)v5 + 7),
          0x49u,
          (__int64)&WPP_8f5c62d9956434feed7ea8f9d17b2299_Traceguids,
          *(const char **)(v3 + 16));
        v5 = WPP_GLOBAL_Control;
      }
    }
    if ( v5 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)v5 + 68) & 0x40) != 0
      && *((_BYTE *)v5 + 65) >= 4u )
    {
      v8 = Dbg_PacketName(*((unsigned __int8 **)a1 + 4), (__int64)a1 + 6304, 0i64);
      WPP_SF_s(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x4Au,
        (__int64)&WPP_8f5c62d9956434feed7ea8f9d17b2299_Traceguids,
        v8);
    }
    goto LABEL_34;
  }
  if ( (unsigned int)(v7 - 3) > 1 )
  {
    v9 = *((unsigned __int16 *)a1 + 3151);
    *((_BYTE *)a1 + 6306) |= 0x80u;
    *((_QWORD *)a1 + 4) = (char *)a1 + v9 + 6304;
    *((_BYTE *)a1 + 1412) = 0;
    Send_Msg((__int64)a1, 0);
    if ( *(_QWORD *)(v3 + 336) )
    {
      if ( v6 )
      {
        v10 = *(_DWORD *)(v3 + 512);
        if ( v6 == v10 )
        {
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x40) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            v11 = DnsAddr_Ntoa((struct in_addr *)a1 + 16);
            WPP_SF_sd(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x4Du,
              (__int64)&WPP_8f5c62d9956434feed7ea8f9d17b2299_Traceguids,
              v11);
          }
          _InterlockedAdd(&dword_1401C80A0, 1u);
          return;
        }
        if ( (int)(v6 - v10) < 0 )
        {
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x40) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            v12 = DnsAddr_Ntoa((struct in_addr *)a1 + 16);
            WPP_SF_sdD(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x4Eu,
              (__int64)&WPP_8f5c62d9956434feed7ea8f9d17b2299_Traceguids,
              v12);
          }
          _InterlockedAdd(&dword_1401C80A4, 1u);
          return;
        }
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x40) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          v13 = DnsAddr_Ntoa((struct in_addr *)a1 + 16);
          WPP_SF_sdD(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x4Fu,
            (__int64)&WPP_8f5c62d9956434feed7ea8f9d17b2299_Traceguids,
            v13);
        }
        _InterlockedAdd(&dword_1401C809C, 1u);
      }
    }
    else
    {
      _InterlockedAdd(&dword_1401C8098, 1u);
    }
    memset_0((void *)(v3 + 1248), 0, 0x40ui64);
    v14 = *(_DWORD *)(v3 + 1160) | 2;
    *(_DWORD *)(v3 + 1280) = 32;
    *(_DWORD *)(v3 + 1160) = v14;
    if ( *(_DWORD *)(v3 + 372) != 3 && (v14 & 0x40) == 0 || (v15 = *(_QWORD *)(v3 + 1176)) == 0 )
      v15 = *(_QWORD *)(v3 + 1168);
    if ( !(unsigned int)DnsAddrArray_ContainsAddr(v15, (_WORD *)a1 + 32, 3)
      || (*(_OWORD *)(v3 + 1248) = *((_OWORD *)a1 + 4),
          *(_OWORD *)(v3 + 1264) = *((_OWORD *)a1 + 5),
          *(_OWORD *)(v3 + 1280) = *((_OWORD *)a1 + 6),
          *(_OWORD *)(v3 + 1296) = *((_OWORD *)a1 + 7),
          !(unsigned int)Xfr_SendUdpIxfrQuery(v3, (_OWORD *)a1 + 4)) )
    {
      _InterlockedAdd(&dword_1401C80A8, 1u);
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x40) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        v16 = DnsAddr_Ntoa((struct in_addr *)a1 + 16);
        WPP_SF_qss(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x50u,
          (__int64)&WPP_8f5c62d9956434feed7ea8f9d17b2299_Traceguids,
          a1,
          *(_QWORD *)(v3 + 16),
          v16);
      }
      Xfr_SendSoaQuery((struct _zone_info *)v3);
    }
    return;
  }
  if ( v5 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
  {
    if ( (*((_BYTE *)v5 + 68) & 0x40) != 0 && *((_BYTE *)v5 + 65) >= 4u )
    {
      WPP_SF_sd(
        *((_QWORD *)v5 + 7),
        0x4Bu,
        (__int64)&WPP_8f5c62d9956434feed7ea8f9d17b2299_Traceguids,
        *(const char **)(v3 + 16));
      v5 = WPP_GLOBAL_Control;
    }
    if ( v5 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)v5 + 68) & 0x40) != 0
      && *((_BYTE *)v5 + 65) >= 4u )
    {
      v17 = Dbg_PacketName(*((unsigned __int8 **)a1 + 4), (__int64)a1 + 6304, 0i64);
      WPP_SF_s(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x4Cu,
        (__int64)&WPP_8f5c62d9956434feed7ea8f9d17b2299_Traceguids,
        v17);
    }
  }
  _InterlockedAdd(&dword_1401C8094, 1u);
}
// 1401C8088: using guessed type int dword_1401C8088;
// 1401C808C: using guessed type int dword_1401C808C;
// 1401C8090: using guessed type int dword_1401C8090;
// 1401C8094: using guessed type int dword_1401C8094;
// 1401C8098: using guessed type int dword_1401C8098;
// 1401C809C: using guessed type int dword_1401C809C;
// 1401C80A0: using guessed type int dword_1401C80A0;
// 1401C80A4: using guessed type int dword_1401C80A4;
// 1401C80A8: using guessed type int dword_1401C80A8;
