Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 482
// Total lines: 245

//----- (000000014003E3BC) ----------------------------------------------------
__int64 __fastcall Ds_StartDsZoneSearch(CHAR *a1, __int64 a2, __int64 a3, unsigned __int16 *a4)
{
  unsigned __int16 *v4; // rsi
  int v5; // ebp
  ULONG v8; // r13d
  CHAR *v9; // r12
  int CurrentUsn; // eax
  __int64 v11; // rdx
  __int64 v12; // r9
  __int64 v13; // r8
  unsigned int v14; // ebx
  CDnsClientSubnetRecordsTrie *v15; // rcx
  __int64 v16; // rdx
  __int64 v17; // rbx
  __int64 v18; // rcx
  __int64 v19; // rax
  CHAR *v20; // rax
  CHAR v21; // cl
  int v22; // eax
  int LastError; // eax
  WCHAR *v24; // rbp
  const wchar_t *v25; // rdx
  int v26; // r12d
  DWORD TickCount; // ebx
  PLDAPSearch inited; // rbp
  ULONG v29; // eax
  int v31; // [rsp+60h] [rbp-128h]
  PLDAPControlW ServerControls[3]; // [rsp+68h] [rbp-120h] BYREF
  WCHAR WideCharStr[64]; // [rsp+80h] [rbp-108h] BYREF
  CHAR MultiByteStr[64]; // [rsp+100h] [rbp-88h] BYREF

  v31 = a3;
  ServerControls[0] = (PLDAPControlW)&NoDsSvrReferralControl;
  v4 = a4;
  v5 = a3;
  ServerControls[1] = 0i64;
  if ( a4 )
  {
    v8 = 0;
  }
  else
  {
    v4 = *(unsigned __int16 **)(a2 + 840);
    v8 = 1;
  }
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
  {
    WPP_SF_sSLD(*((_QWORD *)WPP_GLOBAL_Control + 7), a2, a3, *(const char **)(a2 + 16), (__int64)v4);
  }
  memset_0(a1, 0, 0x190ui64);
  v9 = a1 + 80;
  *((_DWORD *)a1 + 15) = 1;
  CurrentUsn = getCurrentUsn(a1 + 80);
  v13 = 0i64;
  v14 = CurrentUsn;
  if ( CurrentUsn )
  {
    v15 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
      return v14;
    if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0 && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      WPP_SF_D(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0xC5u,
        (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
        CurrentUsn);
      v15 = WPP_GLOBAL_Control;
    }
LABEL_54:
    if ( v15 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)v15 + 17) & 0x400) != 0
      && *((_BYTE *)v15 + 65) >= 2u )
    {
      WPP_SF_DS(
        *((_QWORD *)v15 + 7),
        0xCCu,
        (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
        v14,
        (__int64)v4);
    }
    return v14;
  }
  *((_DWORD *)a1 + 14) = 32;
  if ( v5 != 1 )
  {
    v26 = v31;
    v24 = g_szDnsNodeFilter;
    if ( !v31 )
      *((_DWORD *)a1 + 14) = (*(_BYTE *)(a2 + 388) & 4) != 0 ? 34 : 288;
    goto LABEL_43;
  }
  v16 = -1i64;
  v17 = a2 + 868;
  v18 = -1i64;
  do
    ++v18;
  while ( v9[v18] );
  v19 = -1i64;
  do
    ++v19;
  while ( *(_BYTE *)(v17 + v19) );
  if ( (_DWORD)v18 == (_DWORD)v19 )
  {
    v20 = a1 + 80;
    v16 = v17 - (_QWORD)v9;
    while ( 1 )
    {
      v21 = *v20;
      if ( *v20 != v20[v16] )
        break;
      ++v20;
      if ( !v21 )
      {
        v22 = 0;
        goto LABEL_26;
      }
    }
    v22 = (unsigned __int8)*v20 < (unsigned __int8)v20[v16] ? -1 : 1;
LABEL_26:
    if ( v22 < 0 && *v9 )
    {
      v15 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
      {
        WPP_SF_Sss(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0xC6u,
          (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
          v4,
          (__int64)v9,
          a2 + 868);
        v15 = WPP_GLOBAL_Control;
      }
      v14 = 1168897;
      goto LABEL_54;
    }
    goto LABEL_33;
  }
  if ( (unsigned int)v18 <= (unsigned int)v19 )
  {
    v22 = -1;
    goto LABEL_26;
  }
LABEL_33:
  buildUpdateFilter(MultiByteStr, v16, (_BYTE *)(a2 + 868));
  WideCharStr[0] = 0;
  MultiByteToWideChar(0xFDE9u, 0, MultiByteStr, -1, WideCharStr, 64);
  if ( !WideCharStr[0] )
  {
    v15 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      LastError = GetLastError();
      WPP_SF_D(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0xC7u,
        (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
        LastError);
      v15 = WPP_GLOBAL_Control;
    }
    v14 = 123;
    goto LABEL_54;
  }
  v24 = WideCharStr;
  _InterlockedIncrement(&dword_1401C7CBC);
  if ( (qword_1401B9780 & 0x2000) != 0 && (unsigned int)Log_EnterLock() )
  {
    v25 = *(const wchar_t **)(a2 + 24);
    g_pszCurrentLogLevelString = (__int64)"DSPOLL";
    Log_Printf(
      "Opening update search in zone %S\n"
      "                     current USN  = %s\n"
      "                     zone USN     = %s\n"
      "                     poll filter  = %S\n",
      v25,
      a1 + 80,
      (const char *)(a2 + 868),
      WideCharStr);
    g_pszCurrentLogLevelString = 0i64;
    Log_LeaveLock();
  }
  v26 = v31;
LABEL_43:
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
  {
    WPP_SF_qSLS(*((_QWORD *)WPP_GLOBAL_Control + 7), v11, v13, v12, (__int64)v4, v8, (__int64)v24);
  }
  TickCount = GetTickCount();
  inited = ldap_search_init_pageW(pServerLdap, v4, v8, v24, &DsTypeAttributeTable, 0, ServerControls, 0i64, 0, 0, 0i64);
  _InterlockedExchangeAdd(&dword_1401C7D48, GetTickCount() - TickCount);
  if ( !inited )
  {
    v29 = LdapGetLastError();
    v14 = Ds_ErrorHandler(v29, (__int64)v4, pServerLdap, 0);
    v15 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      WPP_SF_DS(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0xCAu,
        (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
        v14,
        (__int64)v4);
      v15 = WPP_GLOBAL_Control;
    }
    if ( !v14 )
      v14 = 1168899;
    goto LABEL_54;
  }
  *(_QWORD *)a1 = inited;
  *((_QWORD *)a1 + 3) = a2;
  *((_DWORD *)a1 + 13) = v26;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
  {
    WPP_SF_qq(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0xCBu,
      (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
      a1,
      inited);
  }
  return 0i64;
}
// 14003E6DB: variable 'v11' is possibly undefined
// 14003E6DB: variable 'v13' is possibly undefined
// 14003E6DB: variable 'v12' is possibly undefined
// 1401B8F28: using guessed type __int64 g_pszCurrentLogLevelString;
// 1401B9780: using guessed type __int64 qword_1401B9780;
// 1401C7CBC: using guessed type int dword_1401C7CBC;
// 1401C7D48: using guessed type int dword_1401C7D48;
// 1401EC420: using guessed type __int64 NoDsSvrReferralControl;
