Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 372
// Total lines: 253

//----- (0000000140031478) ----------------------------------------------------
__int64 __fastcall Dp_ScanDpForZones(struct ldap *a1, __int64 a2, int a3, int a4, int a5)
{
  unsigned int v9; // edi
  const char *v10; // r9
  PLDAP v11; // rax
  DWORD TickCount; // ebx
  PLDAPSearch inited; // rsi
  ULONG LastError; // eax
  unsigned int NextMessageInSearch; // eax
  int v16; // eax
  __int64 v17; // rcx
  __int64 v18; // rdx
  bool v19; // zf
  unsigned __int16 *v20; // rax
  unsigned __int16 *v21; // rax
  __int64 v22; // rbx
  int v23; // eax
  CDnsClientSubnetRecordsTrie *v24; // rcx
  unsigned __int16 v25; // dx
  __int64 v26; // r8
  __int64 v28; // [rsp+68h] [rbp-A0h] BYREF
  _QWORD v29[3]; // [rsp+70h] [rbp-98h] BYREF
  __int64 v30[7]; // [rsp+88h] [rbp-80h] BYREF
  int v31; // [rsp+C4h] [rbp-44h]
  PLDAPControlW ServerControls[3]; // [rsp+218h] [rbp+110h] BYREF
  unsigned __int16 *v33[3]; // [rsp+230h] [rbp+128h] BYREF

  ServerControls[0] = (PLDAPControlW)&SecurityDescriptorControl_DGO;
  ServerControls[2] = 0i64;
  ServerControls[1] = (PLDAPControlW)&NoDsSvrReferralControl;
  v9 = 0;
  if ( !dword_1401B9954 || !(unsigned int)Ds_IsDsServer(0) || dword_1401B9728 != 3 )
    return 0i64;
  memset_0(v30, 0, 0x190ui64);
  v31 = 0;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    if ( a2 )
      v10 = *(const char **)(a2 + 24);
    else
      v10 = "NULL";
    WPP_SF_s(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x52u, (__int64)&WPP_0f7f6e0c97433b7ed77e9ce4b2e20f93_Traceguids, v10);
  }
  if ( !a2 || *(_DWORD *)(a2 + 16) )
    goto LABEL_78;
  v11 = pServerLdap;
  if ( a1 )
    v11 = a1;
  if ( !v11 )
  {
    v9 = 9717;
    goto LABEL_78;
  }
  TickCount = GetTickCount();
  inited = ldap_search_init_pageW(
             pServerLdap,
             *(const PWSTR *)(a2 + 40),
             2u,
             g_szDnsZoneFilter,
             &DsTypeAttributeTable,
             0,
             ServerControls,
             0i64,
             0xB4u,
             0,
             0i64);
  _InterlockedExchangeAdd(&dword_1401C7D48, GetTickCount() - TickCount);
  if ( !inited )
  {
    LastError = LdapGetLastError();
    v9 = Ds_ErrorHandler(LastError, (__int64)g_pwszDnsContainerDN, pServerLdap, 0);
    goto LABEL_78;
  }
  v30[0] = (__int64)inited;
  v28 = 0i64;
  v29[0] = 0i64;
  while ( g_fDnsServiceExit != 1 )
  {
    if ( a3 )
      Service_LoadCheckpoint();
    NextMessageInSearch = Ds_GetNextMessageInSearch((__int64)v30);
    v9 = NextMessageInSearch;
    if ( NextMessageInSearch )
    {
      if ( NextMessageInSearch == 1168897 )
      {
        v9 = 0;
        goto LABEL_78;
      }
      v24 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        v25 = 84;
LABEL_77:
        WPP_SF_(*((_QWORD *)v24 + 7), v25, (__int64)&WPP_0f7f6e0c97433b7ed77e9ce4b2e20f93_Traceguids);
      }
      goto LABEL_78;
    }
    v16 = Ds_CreateZoneFromDs((LDAPMessage *)v30[2], a2, &v28, v29);
    v9 = v16;
    if ( v16 )
    {
      if ( v16 != 9609 )
      {
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          WPP_SF_D(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x55u,
            (__int64)&WPP_0f7f6e0c97433b7ed77e9ce4b2e20f93_Traceguids,
            v16);
        }
        goto LABEL_72;
      }
      v17 = v29[0];
      if ( v29[0] && *(_DWORD *)(v29[0] + 372i64) )
      {
        if ( !*(_QWORD *)(v29[0] + 848i64) && (*(_BYTE *)(v29[0] + 388i64) & 1) != 0 )
          *(_QWORD *)(v29[0] + 848i64) = g_pLegacyDp;
        v18 = *(_QWORD *)(v17 + 848);
        if ( v18 != a2 )
        {
          if ( !a4 )
          {
            v19 = (*(_BYTE *)(v17 + 388) & 1) == 0;
            v33[0] = *(unsigned __int16 **)(v17 + 24);
            if ( v19 )
            {
              v20 = L"FILE";
            }
            else if ( v18 )
            {
              v20 = (unsigned __int16 *)&LocaleName;
              if ( *(_QWORD *)(v18 + 32) )
                v20 = *(unsigned __int16 **)(v18 + 32);
            }
            else
            {
              v20 = L"MicrosoftDNS";
            }
            v19 = *(_QWORD *)(a2 + 32) == 0i64;
            v33[1] = v20;
            v21 = (unsigned __int16 *)&LocaleName;
            if ( !v19 )
              v21 = *(unsigned __int16 **)(a2 + 32);
            v33[2] = v21;
            *(_OWORD *)&v29[1] = DNS_EVENT_DP_ZONE_CONFLICT;
            Eventlog_LogEvent((__int64)&v29[1], v18, 3u, v33, (unsigned __int8 *)1, 9609, 0, 0i64);
          }
          goto LABEL_72;
        }
        *(_DWORD *)(v17 + 440) = a5;
        goto LABEL_66;
      }
    }
    else
    {
      v22 = v28;
      if ( v28 )
      {
        *(_DWORD *)(v28 + 440) = a5;
        *(_DWORD *)(v22 + 436) = 0;
      }
      if ( a4 || v22 == g_pCacheZone || v22 == g_pTrustAnchorsZone )
      {
        v23 = Zone_Load(v22, 0);
        v9 = v23;
        if ( v23 )
        {
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            WPP_SF_D(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x57u,
              (__int64)&WPP_0f7f6e0c97433b7ed77e9ce4b2e20f93_Traceguids,
              v23);
          }
          Zone_Delete((struct _zone_info *)v22, 0, 0, 0, 0);
          goto LABEL_72;
        }
        if ( *(char *)(v22 + 428) < 0 && *(_BYTE *)(v22 + 400) )
          Zone_UnlockAfterWriteEx(v22, 1, (__int64)"ds\\dns\\server\\server\\dpart.c", 98);
        if ( v22 == g_pCacheZone )
        {
          if ( (unsigned int)Zone_LockForWriteEx(v22, 1, 0x2710u, (__int64)"ds\\dns\\server\\server\\dpart.c", 107) )
          {
            if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
              && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
            {
              WPP_SF_(
                *((_QWORD *)WPP_GLOBAL_Control + 7),
                0x56u,
                (__int64)&WPP_0f7f6e0c97433b7ed77e9ce4b2e20f93_Traceguids);
            }
          }
          else
          {
            Zone_ActivateLoadedZone(v22);
            Zone_UnlockAfterWriteEx(v22, 1, (__int64)"ds\\dns\\server\\server\\dpart.c", 110);
          }
        }
      }
      if ( v22 && v22 != g_pCacheZone && v22 != g_pTrustAnchorsZone )
      {
        v17 = v22;
LABEL_66:
        BuildZoneScopesfromZoneinAD(v17, a4, a5, a3);
      }
    }
LABEL_72:
    v28 = 0i64;
    v29[0] = 0i64;
  }
  v24 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    v25 = 83;
    goto LABEL_77;
  }
LABEL_78:
  Ds_CleanupSearchBlob((__int64)v30);
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_LD(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x58u, v26, v9);
  }
  return v9;
}
// 1400319DE: variable 'v26' is possibly undefined
// 140187000: using guessed type __int128 DNS_EVENT_DP_ZONE_CONFLICT;
// 14018B468: using guessed type wchar_t aFile_0[5];
// 1401B8C48: using guessed type __int64 g_pTrustAnchorsZone;
// 1401B8D10: using guessed type __int64 g_pLegacyDp;
// 1401B9728: using guessed type int dword_1401B9728;
// 1401B9954: using guessed type int dword_1401B9954;
// 1401B9A40: using guessed type int g_fDnsServiceExit;
// 1401C7D48: using guessed type int dword_1401C7D48;
// 1401EC420: using guessed type __int64 NoDsSvrReferralControl;
// 1401EC440: using guessed type __int64 SecurityDescriptorControl_DGO;
// 1401EC628: using guessed type __int64 g_pCacheZone;
##############################
Role: Let's assume that you are an advanced reverse engineer and you are reverse engineering a network driver using IDA Pro, and you are also familiar with the RFC documentation. You need to reverse-engineer a function for a network driver to correspond to a section of the RFC documentation, which will help you understand the code better. The driver you're reversing is Schannel.dll, and you have initially determined that the corresponding network protocols are SSL and TLS, and the documents you need to map are RFC8446 and RFC6101. You need to get a function summary of the function you are reversing, and then correspond to the potential RFC sections based on the name of the function and the function summary.
Function Background: The function is reverse engineered from the driver file Schannel.dll on Windows platform. Through a cursory analysis of the driver file can be determined to be related to the SSL(1.3), TLS(3.0) protocol, that is, with RFC8446, RFC6101 strong correlation.

Output Function Summary: Summarizes the function's functionality with several phrases instead of sentences, focuses on covering the function's control flow information, and highlights the protocol function points implemented by the function. Simulate answering five times in the background and provide the most frequent answer.

Retrieve document sections: giving matches for document sections(FunctionMatchRFCResult) that the code may related to. NOTE if the code is only business related(i.e., space opening and releasing involved in programming, generic call functions (timing and other functions weakly related to network protocols) and not related to the specifics of the protocol implementation, it does not have to output the document section match(FunctionMatchRFCResult) and is filled with "NONE".

Retrieve document sections Thinking Chain: The function code is matched with the RFC document section, and the thinking chain is provided to help you solve the problem better:
	1. Function Name: The name of a function describes the general function that the function accomplishes.
	2. Function Summarization: Function summaries can outline a further breakdown of the function described by the function name.
	3. Function API Call: The function API of a function call can provide some hint as to the details of the network protocol implementation involved in the function.
	4. Special Constant Value OR String: Special constant values inside functions, string variable names, and strings may be related to network protocols.
	5. Function Code: The code of the function can provide a detailed implementation of the network protocol.
Generate Function Information Collection with JSON Format:

{
	"FunctionIndex": "(FILL WITH "File count" with less than four bits are indexed with zeros to make up the four bits.)",
	"FunctionName": "(Full Function Code Name)",
	"FunctionSummarization": [
		"(Function Summary Phrase1)",
		"(Function Summary Phrase2)",
		"(...)"
	],
	"FunctionMatchRFCResult": [
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 1)",
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 2)",
		"(...)"
	],
}

ATTENTION: Remember YOU MUST ONLY output the Function Information Collection result.
