Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 70
// Total lines: 1125

//----- (0000000140005B04) ----------------------------------------------------
__int64 __fastcall Answer_QuestionFromDatabase(
        struct _DNS_MSGINFO *a1,
        __int64 a2,
        __int64 a3,
        unsigned __int8 *a4,
        unsigned __int16 a5)
{
  unsigned __int16 v5; // r12
  unsigned int v6; // edi
  __int64 v7; // rbx
  unsigned __int16 v8; // r15
  int Scope; // r13d
  CDnsClientSubnetRecordsTrie *v12; // rdx
  const char *v13; // rcx
  char *v14; // rax
  CDnsClientSubnetRecordsTrie **v15; // r11
  CDnsClientSubnetRecordsTrie *v16; // r10
  __int64 v17; // rax
  __int64 *NextAdditionalNode; // rax
  char *v19; // rax
  char *v20; // rax
  __int64 v21; // rax
  __int64 v22; // rcx
  __int16 v23; // ax
  __int64 v24; // rbx
  char *v25; // rax
  char *v26; // rax
  __int64 *NoExistRecord; // rax
  CDnsClientSubnetRecordsTrie *v28; // rcx
  unsigned __int16 v29; // dx
  int IndexForType; // eax
  int v31; // eax
  __int64 v32; // r15
  __int64 v33; // rax
  char *v34; // rbx
  char *v35; // rax
  char *v36; // rbx
  char *v37; // rax
  unsigned __int16 v38; // bx
  char v39; // al
  __int64 v40; // rdx
  unsigned __int16 v41; // r8
  int WinsRequest; // eax
  char *v43; // rbx
  char *v44; // rax
  const char *v45; // r10
  char *v46; // rbx
  char *v47; // rax
  _BYTE *v48; // rax
  unsigned __int16 v49; // dx
  bool v50; // zf
  __int64 v51; // rbx
  __int64 v52; // rax
  __int64 v53; // rax
  unsigned __int8 *v54; // rdx
  int v55; // eax
  int v56; // eax
  _QWORD *v57; // rdx
  _QWORD *v58; // rax
  _QWORD *v59; // rcx
  __int64 v60; // rbx
  __int64 v61; // rax
  __int64 v62; // rax
  __int64 v63; // rax
  int v64; // eax
  __int64 *v65; // rax
  char *v66; // rax
  unsigned __int16 v67; // dx
  int v68; // eax
  __int64 v69; // rbx
  char *v70; // rax
  int v71; // eax
  unsigned __int16 v72; // dx
  unsigned __int16 v73; // dx
  unsigned __int16 v74; // dx
  CDnsClientSubnetRecordsTrie *v75; // rcx
  unsigned __int16 v76; // dx
  __int64 v77; // rcx
  struct _DNS_MSGINFO *v79; // [rsp+20h] [rbp-E0h]
  struct _DNS_MSGINFO *v80; // [rsp+28h] [rbp-D8h]
  struct _DNS_MSGINFO *v81; // [rsp+30h] [rbp-D0h]
  __int16 v82; // [rsp+50h] [rbp-B0h]
  __int64 v83; // [rsp+54h] [rbp-ACh] BYREF
  __int64 v84; // [rsp+60h] [rbp-A0h]
  int v85; // [rsp+68h] [rbp-98h] BYREF
  int v86; // [rsp+6Ch] [rbp-94h]
  int v87; // [rsp+70h] [rbp-90h] BYREF
  int v88; // [rsp+74h] [rbp-8Ch] BYREF
  int v89; // [rsp+78h] [rbp-88h]
  int v90; // [rsp+7Ch] [rbp-84h] BYREF
  int v91; // [rsp+80h] [rbp-80h]
  __int64 *v92; // [rsp+88h] [rbp-78h]
  unsigned __int8 *v93; // [rsp+90h] [rbp-70h]
  char v94[512]; // [rsp+A0h] [rbp-60h] BYREF
  int v95; // [rsp+2A0h] [rbp+1A0h]

  v5 = a5;
  v6 = 0;
  v7 = 0i64;
  v93 = a4;
  v8 = a3;
  v84 = 0i64;
  v82 = a3;
  v85 = 0;
  Scope = 0;
  v92 = 0i64;
  v89 = 1;
  v86 = 0;
  v83 = 0i64;
  v87 = 0;
  v91 = 0;
  v12 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
  {
    if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0 && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
    {
      v13 = "NULL";
      if ( a2 )
        v13 = (const char *)(a2 + 102);
      WPP_SF_qsqHqH(*((_QWORD *)WPP_GLOBAL_Control + 7), (__int64)WPP_GLOBAL_Control, a3, a1, v13, a2, a3, a4, a5);
      v12 = WPP_GLOBAL_Control;
      a4 = v93;
    }
    if ( v12 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)v12 + 17) & 0x40000) != 0
      && *((_BYTE *)v12 + 65) >= 5u )
    {
      v14 = Dbg_LookupName((unsigned __int16 *)a4);
      WPP_SF_s(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x40u,
        (__int64)&WPP_a00dfa190cfc31699b498ea413aa2a5c_Traceguids,
        v14);
    }
  }
  Answer_SetBufferEnd((__int64)a1);
LABEL_12:
  v16 = WPP_GLOBAL_Control;
  while ( 1 )
  {
    while ( 1 )
    {
      if ( !a2 )
      {
        if ( v93 )
        {
          v17 = Lookup_NodeForPacketEx(a1, v93, 0x20040000u, 0i64, (int *)&v83);
        }
        else
        {
          if ( !v8 )
            goto LABEL_19;
          v17 = Lookup_NodeForPacketEx(a1, (unsigned __int8 *)a1 + v8 + 6304, 0x20000000u, 0i64, (int *)&v83);
        }
        v16 = WPP_GLOBAL_Control;
        Scope = v83;
        a2 = v17;
LABEL_19:
        switch ( Scope )
        {
          case -5:
LABEL_320:
            v6 = 1;
            Send_QueryResponse(a1, 1);
            goto LABEL_388;
          case -3:
            Scope = 0;
            LODWORD(v83) = 0;
            break;
          case -4:
            goto LABEL_284;
          case -6:
            *((_DWORD *)a1 + 1572) |= 2u;
            Scope = 0;
            v16 = WPP_GLOBAL_Control;
            LODWORD(v83) = 0;
            break;
          default:
            if ( Scope )
            {
              if ( v16 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                && (*((_DWORD *)v16 + 17) & 0x40000) != 0
                && *((_BYTE *)v16 + 65) >= 2u )
              {
                v73 = 65;
                goto LABEL_319;
              }
              goto LABEL_387;
            }
            break;
        }
        if ( !a2 && *((_BYTE *)a1 + 1415) == 3 )
          goto LABEL_28;
        if ( v16 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
        {
          if ( (*((_DWORD *)v16 + 17) & 0x40000) != 0 && *((_BYTE *)v16 + 65) >= 2u )
          {
            v72 = 66;
LABEL_313:
            WPP_SF_(*((_QWORD *)v16 + 7), v72, (__int64)&WPP_a00dfa190cfc31699b498ea413aa2a5c_Traceguids);
LABEL_314:
            v16 = WPP_GLOBAL_Control;
            goto LABEL_284;
          }
          goto LABEL_284;
        }
        goto LABEL_288;
      }
      if ( v89 )
      {
        v89 = 0;
        if ( !*(_QWORD *)a2 )
        {
          v86 = 1;
          if ( v16 == (CDnsClientSubnetRecordsTrie *)v15 )
            goto LABEL_43;
          if ( (*((_DWORD *)v16 + 17) & 0x40000) != 0 && *((_BYTE *)v16 + 65) >= 5u )
          {
            WPP_SF_q(*((_QWORD *)v16 + 7), 0x43u, (__int64)&WPP_a00dfa190cfc31699b498ea413aa2a5c_Traceguids, a1);
            v16 = WPP_GLOBAL_Control;
            v15 = &WPP_GLOBAL_Control;
          }
        }
      }
      if ( v16 != (CDnsClientSubnetRecordsTrie *)v15
        && (*((_DWORD *)v16 + 17) & 0x40000) != 0
        && *((_BYTE *)v16 + 65) >= 5u )
      {
        v19 = Dbg_NodeName(a2);
        v80 = (struct _DNS_MSGINFO *)a2;
        WPP_SF_Dsq(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x44u,
          (__int64)&WPP_a00dfa190cfc31699b498ea413aa2a5c_Traceguids,
          *((unsigned __int8 *)a1 + 1415),
          (__int64)v19);
        v16 = WPP_GLOBAL_Control;
        v15 = &WPP_GLOBAL_Control;
      }
LABEL_43:
      if ( (*(_BYTE *)(a2 + 92) & 1) == 0 )
        goto LABEL_70;
      v85 = 0;
      if ( v16 != (CDnsClientSubnetRecordsTrie *)v15
        && (*((_DWORD *)v16 + 17) & 0x40000) != 0
        && *((_BYTE *)v16 + 65) >= 4u )
      {
        v20 = Dbg_NodeName(a2);
        WPP_SF_s(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x45u,
          (__int64)&WPP_a00dfa190cfc31699b498ea413aa2a5c_Traceguids,
          v20);
        v16 = WPP_GLOBAL_Control;
        v15 = &WPP_GLOBAL_Control;
      }
      if ( a2 != *((_QWORD *)a1 + 32) )
        break;
      v21 = *((_QWORD *)a1 + 24);
      if ( !v21 )
        break;
      v22 = *(_QWORD *)(v21 + 56);
      if ( v22 )
      {
        if ( *(_DWORD *)(v22 + 372) == 5 )
          break;
      }
      a2 = *((_QWORD *)a1 + 24);
    }
    if ( v16 != (CDnsClientSubnetRecordsTrie *)v15
      && (*((_DWORD *)v16 + 17) & 0x40000) != 0
      && *((_BYTE *)v16 + 65) >= 5u )
    {
      WPP_SF_qq(*((_QWORD *)v16 + 7), 0x9Fu, (__int64)&WPP_a00dfa190cfc31699b498ea413aa2a5c_Traceguids, a1, a2);
    }
    if ( !(unsigned int)RR_CheckNameErrorTimeout(a2, 0, *((_DWORD *)a1 + 142), 0i64) )
      goto LABEL_32;
    if ( *((_BYTE *)a1 + 1415) != 1 )
      goto LABEL_256;
    v23 = *((_WORD *)a1 + 3155);
    if ( v23 )
    {
      if ( v23 != *((_WORD *)a1 + 726) )
        goto LABEL_256;
    }
    v24 = *(_QWORD *)(a2 + 64);
    if ( (*(_BYTE *)(v24 + 28) & 4) == 0 )
    {
      if ( (unsigned int)Dnssec_RecordMeetsPolicy((__int64)a1, *(_QWORD *)(a2 + 64)) )
      {
        *((_QWORD *)a1 + 24) = a2;
LABEL_323:
        Send_NameError(a1, 0i64);
        goto LABEL_324;
      }
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        LODWORD(v79) = 13;
        WPP_SF_qd(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x47u,
          (__int64)&WPP_a00dfa190cfc31699b498ea413aa2a5c_Traceguids,
          a1,
          v79);
      }
      goto LABEL_329;
    }
    v16 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
    {
      if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x100000) != 0 && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        v25 = Dbg_NodeName(a2);
        WPP_SF_Dqs(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0xA0u,
          (__int64)&WPP_a00dfa190cfc31699b498ea413aa2a5c_Traceguids,
          *(unsigned __int16 *)(v24 + 12),
          v24,
          (__int64)v25);
        v16 = WPP_GLOBAL_Control;
      }
      if ( v16 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)v16 + 17) & 0x40000) != 0
        && *((_BYTE *)v16 + 65) >= 4u )
      {
        v26 = Dbg_NodeName(a2);
        WPP_SF_s(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x46u,
          (__int64)&WPP_a00dfa190cfc31699b498ea413aa2a5c_Traceguids,
          v26);
        v16 = WPP_GLOBAL_Control;
LABEL_70:
        if ( v85 )
        {
          HIDWORD(v83) = 0;
          NoExistRecord = Dnssec_FindNoExistRecord(a2, v5);
          if ( !NoExistRecord )
          {
            v28 = WPP_GLOBAL_Control;
            if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) == 0
              || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
            {
              goto LABEL_329;
            }
            v29 = 72;
            goto LABEL_77;
          }
          Send_AddCachedNoExistAuthToMessage(a1, a2, (__int64)NoExistRecord, (_DWORD *)&v83 + 1);
          if ( !HIDWORD(v83) )
          {
            v28 = WPP_GLOBAL_Control;
            if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) == 0
              || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
            {
              goto LABEL_329;
            }
            v29 = 73;
LABEL_77:
            WPP_SF_q(
              *((_QWORD *)v28 + 7),
              v29,
              (__int64)&WPP_a00dfa190cfc31699b498ea413aa2a5c_Traceguids,
              a1,
              v79,
              v80,
              v81);
LABEL_329:
            Reject_Request((__int64)a1, 2u, 1);
            goto LABEL_324;
          }
LABEL_28:
          *((_QWORD *)a1 + 785) = 0i64;
          NextAdditionalNode = (__int64 *)getNextAdditionalNode(a1, &v85, &v87);
          a2 = (__int64)NextAdditionalNode;
          if ( v87 )
          {
LABEL_289:
            v6 = 1;
            goto LABEL_388;
          }
          if ( NextAdditionalNode )
          {
            v8 = *((_WORD *)a1 + 221);
            v5 = *((_WORD *)a1 + 220);
            v82 = v8;
            v92 = NextAdditionalNode;
            HIDWORD(v83) = 0;
LABEL_31:
            v7 = v84;
            goto LABEL_32;
          }
          goto LABEL_283;
        }
      }
    }
    if ( (*(_BYTE *)(a2 + 92) & 0x20) != 0 )
    {
      if ( v5 == 1
        || (v5 > 0x34u ? (IndexForType = (unsigned __int16)QueryIndexForType(v5)) : (IndexForType = v5),
            *((_BYTE *)&RecordTypePropertyTable + 6 * IndexForType)) )
      {
        if ( *((_BYTE *)a1 + 1415) == 1 )
        {
          if ( RR_FindNextRecordEx(a2, 0, 5u, 0i64, *((_DWORD *)a1 + 142), 0) )
          {
            v31 = v5 > 0x34u ? (unsigned __int16)QueryIndexForType(v5) : v5;
            if ( !*((_BYTE *)&RecordTypePropertyTable + 6 * v31 + 1) && (*(_QWORD *)(a2 + 56) || v5 != 6)
              || !RR_FindNextRecordEx(a2, 0, v5, 0i64, *((_DWORD *)a1 + 142), 0) )
            {
              if ( *((_BYTE *)a1 + 1450) >= 0x14u )
              {
                v16 = WPP_GLOBAL_Control;
                if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
                  goto LABEL_288;
                if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800) == 0 || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
                  goto LABEL_284;
                v74 = 74;
                goto LABEL_338;
              }
              *((_BYTE *)a1 + 1448) = 1;
              v5 = 5;
            }
          }
          v16 = WPP_GLOBAL_Control;
        }
      }
    }
    v32 = *((_QWORD *)a1 + 4);
    if ( v5 == 1
      && (unsigned __int16)(v82 - 1) <= 0x3FFEu
      && (!dword_1401B98F8 || (*((_BYTE *)a1 + 592) & 1) == 0 || *((char *)a1 + 598) >= 0)
      && (*(_DWORD *)(a2 + 92) & 0x40000) == 0 )
    {
      v33 = *(_QWORD *)(a2 + 56);
      if ( !v33 || (*(_BYTE *)(v33 + 396) & 0x10) == 0 )
      {
        if ( (qword_1401B9780 & 0x100000) != 0 )
        {
          v34 = 0i64;
          if ( (unsigned int)Log_EnterLock() )
          {
            g_pszCurrentLogLevelString = (__int64)"LOOKUP";
            v34 = Log_FormatNodeName((__int64 *)a2);
            v35 = Log_CurrentSection((__int64)a1);
            Log_Printf(
              "Writing A records for node %s (%p)\n                     to %s section of packet %p\n",
              v34,
              (const void *)a2,
              v35,
              a1);
            g_pszCurrentLogLevelString = 0i64;
            Log_LeaveLock();
          }
          Mem_Free(v34, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\answer.c", 2131);
          v16 = WPP_GLOBAL_Control;
        }
        if ( v16 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)v16 + 17) & 0x40000) != 0
          && *((_BYTE *)v16 + 65) >= 4u )
        {
          v36 = Log_CurrentSection((__int64)a1);
          v37 = Dbg_NodeName(a2);
          v80 = a1;
          WPP_SF_ssq(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x4Bu,
            (__int64)&WPP_a00dfa190cfc31699b498ea413aa2a5c_Traceguids,
            v37,
            (__int64)v36);
        }
        v38 = Wire_WriteAddressRecords((__int64)a1, a2, v82);
        if ( !*((_DWORD *)a1 + 372) || (*((_BYTE *)a1 + 6307) & 0x10) != 0 )
        {
          v16 = WPP_GLOBAL_Control;
          goto LABEL_115;
        }
        v75 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) == 0
          || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
        {
          goto LABEL_387;
        }
        v76 = 76;
        goto LABEL_385;
      }
    }
    if ( (qword_1401B9780 & 0x100000) != 0 )
    {
      v43 = 0i64;
      if ( (unsigned int)Log_EnterLock() )
      {
        g_pszCurrentLogLevelString = (__int64)"LOOKUP";
        v43 = Log_FormatNodeName((__int64 *)a2);
        private_StringForRecordType(v5);
        v44 = Log_CurrentSection((__int64)a1);
        Log_Printf(
          "Writing %s records for node %s (%p)\n                     to %s section of packet %p\n",
          v45,
          v43,
          (const void *)a2,
          v44,
          a1);
        g_pszCurrentLogLevelString = 0i64;
        Log_LeaveLock();
      }
      Mem_Free(v43, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\answer.c", 2182);
      v16 = WPP_GLOBAL_Control;
    }
    if ( v16 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)v16 + 17) & 0x40000) != 0
      && *((_BYTE *)v16 + 65) >= 4u )
    {
      v46 = Log_CurrentSection((__int64)a1);
      v47 = Dbg_NodeName(a2);
      v81 = a1;
      WPP_SF_Dssq(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x4Du,
        (__int64)&WPP_a00dfa190cfc31699b498ea413aa2a5c_Traceguids,
        v5,
        (__int64)v47,
        (__int64)v46);
      v16 = WPP_GLOBAL_Control;
    }
    if ( *((_BYTE *)a1 + 1415) == 1 && v5 == 50 )
    {
      if ( v16 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)v16 + 17) & 0x40000) != 0
        && *((_BYTE *)v16 + 65) >= 3u )
      {
        WPP_SF_(*((_QWORD *)v16 + 7), 0x4Eu, (__int64)&WPP_a00dfa190cfc31699b498ea413aa2a5c_Traceguids);
        v16 = WPP_GLOBAL_Control;
      }
      v38 = 0;
    }
    else
    {
      v90 = 0;
      v38 = Wire_WriteRecordsAtNodeToMessage((__int64)a1, a2, v5, 0i64, v82, 0, &v90);
      if ( v90 )
      {
        v75 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) == 0
          || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
        {
          goto LABEL_387;
        }
        v76 = 79;
LABEL_385:
        v77 = *((_QWORD *)v75 + 7);
        goto LABEL_386;
      }
      if ( dword_1401B9928
        && *((_BYTE *)a1 + 1456) == 1
        && *((_BYTE *)a1 + 1450)
        && (*(_DWORD *)(a2 + 92) & 0x200000) != 0 )
      {
        if ( v91 )
          goto LABEL_283;
        v91 = 1;
      }
      v16 = WPP_GLOBAL_Control;
    }
    if ( *((_DWORD *)a1 + 372)
      && (!dword_1401B98F8
       || (*((_BYTE *)a1 + 592) & 1) == 0
       || *((char *)a1 + 598) >= 0
       || (*((_BYTE *)a1 + 6307) & 0x10) == 0) )
    {
      if ( v16 == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_DWORD *)v16 + 17) & 0x40000) == 0
        || *((_BYTE *)v16 + 65) < 2u )
      {
        goto LABEL_387;
      }
      v77 = *((_QWORD *)v16 + 7);
      v76 = 80;
LABEL_386:
      WPP_SF_q(v77, v76, (__int64)&WPP_a00dfa190cfc31699b498ea413aa2a5c_Traceguids, a1, v79, v80, v81);
      goto LABEL_387;
    }
    v85 = 0;
    if ( *((_BYTE *)a1 + 1448) )
    {
      v5 = *((_WORD *)a1 + 240);
      ++*((_BYTE *)a1 + 1450);
      if ( !v38 )
      {
        v8 = v82;
        *((_BYTE *)a1 + 1448) = 0;
        goto LABEL_31;
      }
      if ( dword_1401B9928 )
      {
        v16 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
        {
          if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0 && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
          {
            WPP_SF_qq(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x51u,
              (__int64)&WPP_a00dfa190cfc31699b498ea413aa2a5c_Traceguids,
              a2,
              a1);
            goto LABEL_314;
          }
          goto LABEL_284;
        }
        goto LABEL_288;
      }
      *((_QWORD *)a1 + 785) = 0i64;
      v48 = getNextAdditionalNode(a1, &v85, &v87);
      a2 = (__int64)v48;
      if ( v87 )
      {
LABEL_324:
        v6 = 1;
        goto LABEL_388;
      }
      *(_QWORD *)((char *)a1 + 2276) = 0i64;
      *((_BYTE *)a1 + 1448) = 0;
      *((_BYTE *)a1 + 1415) = 1;
      if ( !v48 )
      {
        v16 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
        {
          if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0 && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 3u )
          {
            v72 = 83;
            goto LABEL_313;
          }
LABEL_284:
          if ( v16 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)v16 + 17) & 0x40000) != 0
            && *((_BYTE *)v16 + 65) >= 4u )
          {
            WPP_SF_q(*((_QWORD *)v16 + 7), 0x60u, (__int64)&WPP_a00dfa190cfc31699b498ea413aa2a5c_Traceguids, a1);
          }
        }
LABEL_288:
        Send_QueryResponse(a1, 0);
        goto LABEL_289;
      }
      v8 = *((_WORD *)a1 + 221);
      v82 = v8;
      if ( (*((_DWORD *)v48 + 23) & 0x20000) == 0 || *((_QWORD *)a1 + 24) || v48 != *((_BYTE **)a1 + 25) )
        goto LABEL_31;
      v16 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
      {
        goto LABEL_389;
      }
      v49 = 82;
      goto LABEL_169;
    }
LABEL_115:
    if ( (*((_BYTE *)a1 + 6306) & 2) != 0 )
    {
      if ( v16 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)v16 + 17) & 0x40000) != 0
        && *((_BYTE *)v16 + 65) >= 4u )
      {
        LODWORD(v79) = *((unsigned __int16 *)a1 + 3155);
        WPP_SF_qd(*((_QWORD *)v16 + 7), 0x54u, (__int64)&WPP_a00dfa190cfc31699b498ea413aa2a5c_Traceguids, a1, v79);
        v16 = WPP_GLOBAL_Control;
      }
      if ( !*((_BYTE *)a1 + 1413) )
      {
        if ( *((_BYTE *)a1 + 1415) == 3 && *((_WORD *)a1 + 3157) > v38 )
        {
          *((_QWORD *)a1 + 4) = v32;
          *((_WORD *)a1 + 3157) -= v38;
          *((_BYTE *)a1 + 6306) &= ~2u;
          goto LABEL_314;
        }
        goto LABEL_284;
      }
      if ( v16 == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
        goto LABEL_288;
      if ( (*((_DWORD *)v16 + 17) & 0x800) == 0 || *((_BYTE *)v16 + 65) < 3u )
        goto LABEL_284;
      v74 = 85;
LABEL_338:
      WPP_SF_q(*((_QWORD *)v16 + 7), v74, (__int64)&WPP_a00dfa190cfc31699b498ea413aa2a5c_Traceguids, a1, v79, v80, v81);
      goto LABEL_314;
    }
    v39 = *(_BYTE *)(a2 + 96);
    v40 = 0i64;
    v84 = 0i64;
    if ( v39 == -14 || v5 == 43 && v39 == 67 )
    {
      v40 = *(_QWORD *)(a2 + 56);
      v84 = v40;
    }
    if ( *((_BYTE *)a1 + 1455) && v40 && (*(_BYTE *)(v40 + 396) & 2) == 0 )
    {
      v8 = v82;
      if ( *(_QWORD *)(v40 + 344) )
      {
        v41 = 12;
        if ( v82 )
          v41 = v82;
        WinsRequest = Wins_MakeWinsRequest((__int64)a1, v40, v41, a2);
        v16 = WPP_GLOBAL_Control;
        if ( WinsRequest )
        {
          v6 = 1;
          goto LABEL_389;
        }
      }
    }
    else
    {
      v8 = v82;
    }
    v50 = v38 == 0;
    v7 = v84;
    if ( !v50 )
      goto LABEL_257;
    if ( v84 && *(_DWORD *)(v84 + 372) )
    {
      v51 = *((_QWORD *)a1 + 24);
      *((_QWORD *)a1 + 24) = a2;
      if ( (unsigned int)Answer_QuestionWithWildcard(a1, a2, v5, v8, 0i64, 0i64) )
        goto LABEL_289;
      *((_QWORD *)a1 + 24) = v51;
      v7 = v84;
    }
    *((_QWORD *)a1 + 458) = 0i64;
    v52 = *(_QWORD *)(a2 + 56);
    if ( v52 && *(_DWORD *)(v52 + 372) == 5 || v86 )
      goto LABEL_203;
    if ( !dword_1401B9934 || !dword_1401B9938 )
    {
      if ( g_pfnPluginDnsQuery4 )
      {
        Scope = Plugin_DnsQueryScope((__int64)a1, 0i64, (__int64 *)a2);
        LODWORD(v83) = Scope;
      }
      goto LABEL_195;
    }
    memset_0(v94, 0, 0x204ui64);
    LODWORD(v83) = MatchPolicyRecursion(a1, 0i64, (__int64 *)a2, (__int64)v94);
    Scope = v83;
    if ( (_DWORD)v83 )
    {
      v16 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        LODWORD(v79) = v83;
        WPP_SF_qd(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x56u,
          (__int64)&WPP_a00dfa190cfc31699b498ea413aa2a5c_Traceguids,
          a1,
          v79);
LABEL_195:
        v16 = WPP_GLOBAL_Control;
      }
    }
    else
    {
      if ( !v95 )
      {
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          WPP_SF_q(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x57u,
            (__int64)&WPP_a00dfa190cfc31699b498ea413aa2a5c_Traceguids,
            a1);
        }
        *((_DWORD *)a1 + 1572) |= 0x800u;
        goto LABEL_314;
      }
      if ( v95 != 2 )
        goto LABEL_203;
      v16 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_q(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x58u,
          (__int64)&WPP_a00dfa190cfc31699b498ea413aa2a5c_Traceguids,
          a1);
        v16 = WPP_GLOBAL_Control;
      }
      Scope = -5;
      LODWORD(v83) = -5;
    }
    switch ( Scope )
    {
      case 0:
        goto LABEL_204;
      case -5:
        goto LABEL_320;
      case -3:
        Scope = 0;
        LODWORD(v83) = 0;
        goto LABEL_204;
      case -4:
        goto LABEL_284;
    }
    if ( Scope != -6 )
      break;
    LODWORD(v83) = 0;
    *((_DWORD *)a1 + 1572) |= 2u;
    Scope = 0;
LABEL_203:
    v16 = WPP_GLOBAL_Control;
LABEL_204:
    if ( !HIDWORD(v83) && (g_pfnPluginDnsQuery2 || g_pfnPluginDnsQuery) && (*((_BYTE *)a1 + 6288) & 1) == 0 )
    {
      v53 = *(_QWORD *)(a2 + 56);
      if ( (!v53 || *(_DWORD *)(v53 + 372) != 5) && !v86 )
      {
        HIDWORD(v83) = 1;
        v88 = 0;
        if ( v92 )
          v54 = 0i64;
        else
          v54 = (unsigned __int8 *)a1 + *((unsigned __int16 *)a1 + 221) + 6304;
        v55 = Plugin_DnsQuery((__int64)a1, v54, v92, v5, &v88);
        if ( !v55 )
        {
          v56 = HIDWORD(v83);
          v57 = (_QWORD *)*((_QWORD *)a1 + 33);
          if ( v88 )
            v56 = 0;
          HIDWORD(v83) = v56;
          if ( v57 )
          {
            v58 = *(_QWORD **)a2;
            v59 = (_QWORD *)a2;
            while ( v58 )
            {
              v59 = v58;
              v58 = (_QWORD *)*v58;
            }
            if ( v59 != v57 )
            {
              v88 = 0;
              v60 = Lookup_NodeForPacketEx(a1, (unsigned __int8 *)a1 + v8 + 6304, 0, 0i64, &v88);
              if ( !_stricmp((const char *)(a2 + 102), (const char *)(v60 + 102)) )
              {
                insertNodeIntoTimeoutSystem(a2);
                a2 = v60;
              }
            }
          }
          goto LABEL_31;
        }
        if ( v55 == -4 )
          goto LABEL_283;
        v16 = WPP_GLOBAL_Control;
      }
    }
    if ( !v7 )
    {
      v61 = *(_QWORD *)(a2 + 56);
      if ( !v61 || *(_DWORD *)(v61 + 372) != 5 )
      {
        if ( *((_BYTE *)a1 + 1417)
          || (v62 = *((_QWORD *)a1 + 28)) != 0
          && (v63 = *(_QWORD *)(v62 + 56)) != 0
          && (*(_DWORD *)(v63 + 372) == 4 || *(_DWORD *)(v63 + 372) == 3) )
        {
          if ( (!*((_BYTE *)a1 + 1419) || !*((_BYTE *)a1 + 1420))
            && (*((_BYTE *)a1 + 1415) != 3 || *((_DWORD *)a1 + 571) || !*((_WORD *)a1 + 3157))
            && (*(_DWORD *)(a2 + 92) & 0x10000) == 0 )
          {
            *(_BYTE *)(a2 + 98) = CurrentTimeoutBin;
            *((_QWORD *)a1 + 24) = a2;
            *((_WORD *)a1 + 220) = v5;
            *((_WORD *)a1 + 221) = v8;
            Recurse_Question(a1, a2, 1u, 0);
            goto LABEL_289;
          }
        }
        else if ( *((_BYTE *)a1 + 1415) == 1 && !*((_WORD *)a1 + 3155) )
        {
          v64 = Recurse_WriteReferral(a1, (_BYTE *)a2);
          v16 = WPP_GLOBAL_Control;
          if ( v64 )
          {
            v6 = 1;
            goto LABEL_389;
          }
        }
        goto LABEL_244;
      }
      if ( v16 == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_DWORD *)v16 + 17) & 0x40000) == 0
        || *((_BYTE *)v16 + 65) < 5u )
      {
        goto LABEL_389;
      }
      v49 = 90;
LABEL_169:
      WPP_SF_qq(*((_QWORD *)v16 + 7), v49, (__int64)&WPP_a00dfa190cfc31699b498ea413aa2a5c_Traceguids, a2, a1, v80, v81);
      goto LABEL_388;
    }
    if ( (*(_BYTE *)(v7 + 396) & 2) != 0 && *(_QWORD *)(v7 + 344) && (v5 == 12 || v5 == 255) )
    {
      if ( (unsigned int)Nbstat_MakeRequest((__int64)a1, v7) )
        goto LABEL_289;
LABEL_256:
      v16 = WPP_GLOBAL_Control;
    }
LABEL_257:
    if ( v7 && *((_BYTE *)a1 + 1415) == 1 )
    {
      if ( !*((_WORD *)a1 + 3155) )
        goto LABEL_323;
      if ( !dword_1401B98BC )
        goto LABEL_28;
      *((_BYTE *)a1 + 1415) = 2;
      a2 = *(_QWORD *)(v7 + 40);
      v5 = 2;
      *((_BYTE *)a1 + 1416) = 1;
      v8 = 0;
      v82 = 0;
      v16 = WPP_GLOBAL_Control;
      v15 = &WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
      {
        v66 = Dbg_NodeName(a2);
        v67 = 91;
        goto LABEL_302;
      }
    }
    else
    {
LABEL_244:
      v65 = (__int64 *)*((_QWORD *)a1 + 34);
      if ( v65 && *((_BYTE *)a1 + 1415) == 1 && dword_1401B98BC )
      {
        *(_WORD *)((char *)a1 + 1415) = 258;
        v8 = 0;
        HIDWORD(v83) = 0;
        v5 = 2;
        v82 = 0;
        a2 = (__int64)v65;
        v92 = v65;
        v16 = WPP_GLOBAL_Control;
        v15 = &WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
        {
          v66 = Dbg_NodeName((__int64)v65);
          v67 = 92;
          goto LABEL_302;
        }
      }
      else
      {
        v68 = *(_DWORD *)(a2 + 92);
        if ( (v68 & 0x2000000) != 0 && *((_BYTE *)a1 + 1415) == 1 && dword_1401B98BC && !v86 )
        {
          v69 = a2;
          while ( (*(_DWORD *)(v69 + 92) & 0x2000010) != 33554448 )
          {
            if ( (*(_DWORD *)(v69 + 92) & 0x2000000) == 0 && (*(_BYTE *)(v69 + 92) & 0x10) != 0 )
            {
              v69 = 0i64;
              break;
            }
            v69 = *(_QWORD *)v69;
            if ( !v69 )
              break;
          }
          if ( v16 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)v16 + 17) & 0x40000) != 0
            && *((_BYTE *)v16 + 65) >= 5u )
          {
            v70 = Dbg_NodeName(v69);
            WPP_SF_s(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x5Du,
              (__int64)&WPP_a00dfa190cfc31699b498ea413aa2a5c_Traceguids,
              v70);
          }
          if ( !v69 )
          {
            v71 = Plugin_DnsQuery((__int64)a1, 0i64, (__int64 *)a2, v5, 0i64);
            if ( v71 )
            {
              if ( v71 == -4 )
              {
LABEL_283:
                v16 = WPP_GLOBAL_Control;
                goto LABEL_284;
              }
              goto LABEL_28;
            }
          }
          *(_WORD *)((char *)a1 + 1415) = 258;
          v8 = 0;
          v5 = 2;
          v82 = 0;
          a2 = v69;
          if ( !v69 )
            a2 = *((_QWORD *)a1 + 34);
          if ( !a2 )
          {
            v16 = WPP_GLOBAL_Control;
            v15 = &WPP_GLOBAL_Control;
            if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) == 0
              || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
            {
              goto LABEL_298;
            }
            WPP_SF_q(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x5Eu,
              (__int64)&WPP_a00dfa190cfc31699b498ea413aa2a5c_Traceguids,
              a1);
          }
          v16 = WPP_GLOBAL_Control;
          v15 = &WPP_GLOBAL_Control;
LABEL_298:
          HIDWORD(v83) = 0;
          v92 = (__int64 *)a2;
          v7 = v84;
          if ( v16 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)v16 + 17) & 0x40000) != 0
            && *((_BYTE *)v16 + 65) >= 5u )
          {
            v66 = Dbg_NodeName(a2);
            v67 = 95;
LABEL_302:
            v79 = a1;
            WPP_SF_sq(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              v67,
              (__int64)&WPP_a00dfa190cfc31699b498ea413aa2a5c_Traceguids,
              v66);
LABEL_32:
            v15 = &WPP_GLOBAL_Control;
            goto LABEL_12;
          }
        }
        else
        {
          if ( (v68 & 0x10000) == 0 || *((_WORD *)a1 + 3155) )
            goto LABEL_28;
          *((_BYTE *)a1 + 1415) = 2;
          if ( v7 )
            a2 = *(_QWORD *)(v7 + 40);
          else
            a2 = *(_QWORD *)(g_pCacheZone + 40);
          v8 = 0;
          *((_BYTE *)a1 + 1417) = 0;
          v16 = WPP_GLOBAL_Control;
          v15 = &WPP_GLOBAL_Control;
          v82 = 0;
          v5 = 6;
        }
      }
    }
  }
  if ( v16 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)v16 + 17) & 0x40000) != 0
    && *((_BYTE *)v16 + 65) >= 2u )
  {
    v73 = 89;
LABEL_319:
    LODWORD(v79) = Scope;
    WPP_SF_qd(*((_QWORD *)v16 + 7), v73, (__int64)&WPP_a00dfa190cfc31699b498ea413aa2a5c_Traceguids, a1, v79, v80, v81);
  }
LABEL_387:
  Reject_Request((__int64)a1, 2u, 1);
  v6 = 1;
LABEL_388:
  v16 = WPP_GLOBAL_Control;
LABEL_389:
  if ( v16 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)v16 + 17) & 0x40000) != 0
    && *((_BYTE *)v16 + 65) >= 4u )
  {
    WPP_SF_D(*((_QWORD *)v16 + 7), 0x61u, (__int64)&WPP_a00dfa190cfc31699b498ea413aa2a5c_Traceguids, v6);
  }
  return v6;
}
// 140005D81: variable 'v15' is possibly undefined
// 140006072: variable 'v79' is possibly undefined
// 140006072: variable 'v80' is possibly undefined
// 140006072: variable 'v81' is possibly undefined
// 140006269: variable 'v16' is possibly undefined
// 1400063F3: variable 'v45' is possibly undefined
// 1401B8F28: using guessed type __int64 g_pszCurrentLogLevelString;
// 1401B8FC8: using guessed type __int64 g_pfnPluginDnsQuery4;
// 1401B8FD0: using guessed type __int64 g_pfnPluginDnsQuery;
// 1401B8FD8: using guessed type __int64 g_pfnPluginDnsQuery2;
// 1401B9780: using guessed type __int64 qword_1401B9780;
// 1401B98BC: using guessed type int dword_1401B98BC;
// 1401B98F8: using guessed type int dword_1401B98F8;
// 1401B9928: using guessed type int dword_1401B9928;
// 1401B9934: using guessed type int dword_1401B9934;
// 1401B9938: using guessed type int dword_1401B9938;
// 1401BA4B8: using guessed type char CurrentTimeoutBin;
// 1401EC628: using guessed type __int64 g_pCacheZone;
##############################
Role: Let's assume that you are an advanced reverse engineer and you are reverse engineering a network driver using IDA Pro, and you are also familiar with the RFC documentation. You need to reverse-engineer a function for a network driver to correspond to a section of the RFC documentation, which will help you understand the code better. The driver you're reversing is Schannel.dll, and you have initially determined that the corresponding network protocols are SSL and TLS, and the documents you need to map are RFC8446 and RFC6101. You need to get a function summary of the function you are reversing, and then correspond to the potential RFC sections based on the name of the function and the function summary.
Function Background: The function is reverse engineered from the driver file Schannel.dll on Windows platform. Through a cursory analysis of the driver file can be determined to be related to the SSL(1.3), TLS(3.0) protocol, that is, with RFC8446, RFC6101 strong correlation.

Output Function Summary: Summarizes the function's functionality with several phrases instead of sentences, focuses on covering the function's control flow information, and highlights the protocol function points implemented by the function. Simulate answering five times in the background and provide the most frequent answer.

Retrieve document sections: giving matches for document sections(FunctionMatchRFCResult) that the code may related to. NOTE if the code is only business related(i.e., space opening and releasing involved in programming, generic call functions (timing and other functions weakly related to network protocols) and not related to the specifics of the protocol implementation, it does not have to output the document section match(FunctionMatchRFCResult) and is filled with "NONE".

Retrieve document sections Thinking Chain: The function code is matched with the RFC document section, and the thinking chain is provided to help you solve the problem better:
	1. Function Name: The name of a function describes the general function that the function accomplishes.
	2. Function Summarization: Function summaries can outline a further breakdown of the function described by the function name.
	3. Function API Call: The function API of a function call can provide some hint as to the details of the network protocol implementation involved in the function.
	4. Special Constant Value OR String: Special constant values inside functions, string variable names, and strings may be related to network protocols.
	5. Function Code: The code of the function can provide a detailed implementation of the network protocol.
Generate Function Information Collection with JSON Format:

{
	"FunctionIndex": "(FILL WITH "File count" with less than four bits are indexed with zeros to make up the four bits.)",
	"FunctionName": "(Full Function Code Name)",
	"FunctionSummarization": [
		"(Function Summary Phrase1)",
		"(Function Summary Phrase2)",
		"(...)"
	],
	"FunctionMatchRFCResult": [
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 1)",
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 2)",
		"(...)"
	],
}

ATTENTION: Remember YOU MUST ONLY output the Function Information Collection result.
