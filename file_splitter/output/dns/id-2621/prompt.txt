Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 2621
// Total lines: 946

//----- (0000000140135DC4) ----------------------------------------------------
__int64 __fastcall CDnsPolicyManager::AddCriteriaToPolicyTree(
        int a1,
        __int64 a2,
        _QWORD *a3,
        unsigned __int16 a4,
        __int64 a5,
        __int64 **a6,
        __int64 a7)
{
  __int64 v7; // rbx
  const void **v8; // rdi
  int v9; // esi
  CDnsClientSubnetRecordsTrie *v10; // r9
  _QWORD *v11; // rdi
  type_info *v12; // rax
  const char *v13; // rbx
  type_info *v14; // rax
  const char *v15; // rax
  __int64 *v16; // rax
  int v17; // edi
  type_info *v18; // rax
  const char *v19; // rbx
  type_info *v20; // rax
  const char *v21; // rax
  __int64 v22; // r8
  unsigned __int16 *v23; // rdi
  __int64 result; // rax
  void **v25; // rbx
  __int64 v26; // rax
  __int64 v27; // rax
  char *v28; // rcx
  char *v29; // rax
  const char *v30; // rdx
  __int64 *v31; // rax
  type_info *v32; // rax
  const char *v33; // rdi
  char *v34; // rax
  __int64 v35; // r8
  __int64 v36; // rax
  __int64 v37; // rax
  const unsigned __int16 *v38; // r9
  const char *v39; // rdx
  __int64 *v40; // rax
  const unsigned __int16 *v41; // rdi
  type_info *v42; // rax
  const char *v43; // rax
  __int64 v44; // r8
  __int64 v45; // rax
  __int64 v46; // rax
  unsigned __int16 *v47; // rcx
  unsigned __int16 v48; // di
  const char *v49; // rdx
  __int64 *v50; // rax
  __int64 v51; // rdi
  type_info *v52; // rax
  const char *v53; // rax
  __int64 v54; // r8
  __int64 v55; // rax
  struct in_addr *v56; // rbx
  __int64 v57; // rax
  _QWORD *v58; // rcx
  const char *v59; // rax
  const char *v60; // rdx
  __int64 *v61; // rax
  type_info *v62; // rax
  const char *v63; // rdi
  const char *v64; // rax
  __int64 v65; // r8
  __int64 v66; // rax
  __int64 v67; // rax
  unsigned __int16 *v68; // rcx
  unsigned __int16 v69; // di
  const char *v70; // r9
  const char *v71; // rdx
  __int64 *v72; // rax
  __int64 v73; // rdi
  type_info *v74; // rax
  const char *v75; // rax
  __int64 v76; // r8
  const char *v77; // r9
  __int64 v78; // rax
  __int64 v79; // rax
  unsigned __int16 *v80; // rcx
  unsigned __int16 v81; // di
  const char *v82; // r9
  const char *v83; // rdx
  __int64 *v84; // rax
  __int64 v85; // rdi
  type_info *v86; // rax
  const char *v87; // rax
  __int64 v88; // r8
  const char *v89; // r9
  __int64 v90; // rax
  __int64 v91; // rax
  __int64 v92; // rdi
  const char *v93; // rdx
  __int64 *v94; // rax
  type_info *v95; // rax
  const char *v96; // rax
  __int64 v97; // r8
  unsigned __int16 v98; // di
  CDnsPolicy_CriteriaNode *v99; // rax
  CDnsPolicy_CriteriaNode *v100; // rbx
  struct CDnsPolicy_CriteriaTree *NextCriteriaTree; // rax
  type_info *v102; // rax
  const char *v103; // rax
  _QWORD *v104; // rcx
  _QWORD *v105; // rbx
  _QWORD *v106; // rcx
  _QWORD *v107; // rbx
  __int64 *v108; // rax
  __int64 v109; // rdi
  type_info *v110; // rax
  const char *v111; // rbx
  char *v112; // rax
  __int64 v113; // r8
  __int64 *v114; // rax
  __int64 v115; // rdi
  const unsigned __int16 *v116; // rbx
  type_info *v117; // rax
  const char *v118; // rax
  __int64 v119; // r8
  __int64 *v120; // rax
  __int64 v121; // rbx
  type_info *v122; // rax
  const char *v123; // rax
  __int64 v124; // r8
  __int64 *v125; // rax
  __int64 v126; // rdi
  type_info *v127; // rax
  const char *v128; // rbx
  const char *v129; // rax
  __int64 v130; // r8
  __int64 *v131; // rax
  __int64 v132; // rbx
  type_info *v133; // rax
  const char *v134; // rax
  __int64 v135; // r8
  const char *v136; // r9
  __int64 *v137; // rax
  __int64 v138; // rbx
  type_info *v139; // rax
  const char *v140; // rax
  __int64 v141; // r8
  const char *v142; // r9
  __int64 *v143; // rax
  __int64 v144; // rbx
  type_info *v145; // rax
  const char *v146; // rax
  __int64 v147; // r8
  int v148; // [rsp+40h] [rbp-C0h]
  __int64 v150; // [rsp+58h] [rbp-A8h]
  void **v151; // [rsp+58h] [rbp-A8h]
  __int64 v152; // [rsp+60h] [rbp-A0h]
  __int64 v153; // [rsp+60h] [rbp-A0h]
  unsigned __int16 v154; // [rsp+60h] [rbp-A0h]
  struct in_addr *v155; // [rsp+60h] [rbp-A0h]
  unsigned __int16 v156; // [rsp+60h] [rbp-A0h]
  unsigned __int16 v157; // [rsp+60h] [rbp-A0h]
  __int64 v159; // [rsp+80h] [rbp-80h]
  __int64 v160; // [rsp+80h] [rbp-80h]
  struct CDnsPolicy_CriteriaTree *v161; // [rsp+80h] [rbp-80h]
  unsigned __int16 *v162; // [rsp+88h] [rbp-78h]
  void *v165[3]; // [rsp+B0h] [rbp-50h] BYREF
  unsigned __int64 v166; // [rsp+C8h] [rbp-38h]
  const void *v167[3]; // [rsp+D8h] [rbp-28h] BYREF
  unsigned __int64 v168; // [rsp+F0h] [rbp-10h]
  const void *v169[3]; // [rsp+100h] [rbp+0h] BYREF
  unsigned __int64 v170; // [rsp+118h] [rbp+18h]
  void *Src[3]; // [rsp+128h] [rbp+28h] BYREF
  unsigned __int64 v172; // [rsp+140h] [rbp+40h]
  int pExceptionObject[24]; // [rsp+150h] [rbp+50h] BYREF
  __int16 v174[24]; // [rsp+1D0h] [rbp+D0h] BYREF

  v7 = a2;
  v8 = (const void **)a5;
  v9 = 0;
  v148 = 0;
  v10 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
  {
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x61u, (__int64)&WPP_bbbcc621566c3408fe84d6a85874d543_Traceguids);
    v10 = WPP_GLOBAL_Control;
  }
  v162 = *(unsigned __int16 **)(*a3 + 8i64 * a4);
  if ( v10 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)v10 + 17) & 0x400000) != 0
    && *((_BYTE *)v10 + 65) >= 4u )
  {
    v11 = (_QWORD *)CDnsPolicy::Name((const void **)a5, (__int64)v169);
    v9 = 1;
    v148 = 1;
    if ( v11[3] >= 8ui64 )
      v11 = (_QWORD *)*v11;
    v12 = (type_info *)__RTtypeid(v7);
    v13 = type_info::name(v12);
    v14 = (type_info *)__RTtypeid(v162);
    v15 = type_info::name(v14);
    WPP_SF_sSs(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x62u,
      (__int64)&WPP_bbbcc621566c3408fe84d6a85874d543_Traceguids,
      v15,
      (__int64)v11,
      (__int64)v13);
    v10 = WPP_GLOBAL_Control;
    v7 = a2;
    v8 = (const void **)a5;
  }
  if ( (v9 & 1) != 0 )
  {
    v9 &= ~1u;
    v148 = v9;
    if ( v170 >= 8 )
    {
      operator delete((void *)v169[0]);
      v10 = WPP_GLOBAL_Control;
    }
  }
  if ( v10 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)v10 + 17) & 0x400000) != 0
    && *((_BYTE *)v10 + 65) >= 4u )
  {
    v16 = (__int64 *)CDnsPolicy::Name(v8, (__int64)v169);
    v150 = (__int64)v16;
    v9 |= 2u;
    v148 = v9;
    if ( (unsigned __int64)v16[3] >= 8 )
      v150 = *v16;
    v17 = v162[4];
    v18 = (type_info *)__RTtypeid(v7);
    v19 = type_info::name(v18);
    v20 = (type_info *)__RTtypeid(v162);
    v21 = type_info::name(v20);
    WPP_SF_dsSs(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x63u, v22, v17, (__int64)v21, v150, (__int64)v19);
  }
  if ( (v9 & 2) != 0 )
  {
    v9 &= ~2u;
    v148 = v9;
    if ( v170 >= 8 )
      operator delete((void *)v169[0]);
  }
  v23 = v162;
  (*(void (__fastcall **)(unsigned __int16 *))(*(_QWORD *)v162 + 64i64))(v162);
  while ( 1 )
  {
    result = (*(__int64 (__fastcall **)(unsigned __int16 *))(*(_QWORD *)v23 + 72i64))(v23);
    if ( (_DWORD)result )
      return result;
    v25 = 0i64;
    v151 = 0i64;
    v26 = __RTtypeid(v23);
    if ( (unsigned int)type_info::operator==(v26, &CDNSPolicyCriteriaFqdn `RTTI Type Descriptor') )
    {
      v27 = _RTDynamicCast_0(
              v23,
              0i64,
              &CDNSPolicyCriteria `RTTI Type Descriptor',
              &CDNSPolicyCriteriaFqdn `RTTI Type Descriptor',
              0);
      CDNSPolicyCriteriaFqdn::GetNext(v27, (const void **)Src);
      v28 = (char *)Src;
      if ( v172 >= 0x10 )
        v28 = (char *)Src[0];
      Name_ConvertDottedNameToLookupName(v28, 0, (unsigned __int16 *)v174);
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        v29 = Dbg_LookupName((unsigned __int16 *)v174);
        WPP_SF_s(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x64u,
          (__int64)&WPP_bbbcc621566c3408fe84d6a85874d543_Traceguids,
          v29);
      }
      v25 = (void **)(*(__int64 (__fastcall **)(__int64, __int16 *, __int64))(*(_QWORD *)a2 + 48i64))(a2, v174, a7);
      v151 = v25;
      if ( !v25 || !v25[1] )
      {
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
        {
          v108 = (__int64 *)CDnsPolicy::Name((const void **)a5, (__int64)v165);
          v109 = (__int64)v108;
          LOBYTE(v9) = v9 | 4;
          if ( (unsigned __int64)v108[3] >= 8 )
            v109 = *v108;
          v110 = (type_info *)__RTtypeid(a2);
          v111 = type_info::name(v110);
          v112 = Dbg_LookupName((unsigned __int16 *)v174);
          WPP_SF_sSsq(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x65u, v113, v112, v109, (__int64)v111);
        }
        if ( (v9 & 4) != 0 )
          std::pair<std::wstring,unsigned long>::~pair<std::wstring,unsigned long>((__int64)v165);
        CDnsPolicyAddException::CDnsPolicyAddException((CDnsPolicyAddException *)pExceptionObject, v30, 2828);
        CxxThrowException_0(pExceptionObject, (_ThrowInfo *)&TI3_AVCDnsPolicyAddException__);
      }
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        v31 = (__int64 *)CDnsPolicy::Name((const void **)a5, (__int64)v165);
        v152 = (__int64)v31;
        v9 |= 8u;
        v148 = v9;
        if ( (unsigned __int64)v31[3] >= 8 )
          v152 = *v31;
        v32 = (type_info *)__RTtypeid(a2);
        v33 = type_info::name(v32);
        v34 = Dbg_LookupName((unsigned __int16 *)v174);
        WPP_SF_sSsqq(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x66u, v35, v34, v152, (__int64)v33);
      }
      if ( (v9 & 8) != 0 )
      {
        v9 &= ~8u;
        v148 = v9;
        if ( v166 >= 8 )
          operator delete(v165[0]);
      }
      if ( v172 >= 0x10 )
        operator delete(Src[0]);
      v172 = 15i64;
      Src[2] = 0i64;
      LOBYTE(Src[0]) = 0;
      goto LABEL_173;
    }
    v36 = __RTtypeid(v23);
    if ( (unsigned int)type_info::operator==(v36, &CDNSPolicyCriteriaSubnetRecord `RTTI Type Descriptor') )
    {
      v37 = _RTDynamicCast_0(
              v23,
              0i64,
              &CDNSPolicyCriteria `RTTI Type Descriptor',
              &CDNSPolicyCriteriaSubnetRecord `RTTI Type Descriptor',
              0);
      CDNSPolicyCriteriaSubnetRecord::GetNext(v37, (__int64)v167);
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        v38 = (const unsigned __int16 *)v167;
        if ( v168 >= 8 )
          v38 = (const unsigned __int16 *)v167[0];
        WPP_SF_S(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x67u,
          (__int64)&WPP_bbbcc621566c3408fe84d6a85874d543_Traceguids,
          v38);
      }
      v170 = 7i64;
      v169[2] = 0i64;
      LOWORD(v169[0]) = 0;
      std::wstring::assign(v169, v167, 0i64, 0xFFFFFFFFFFFFFFFFui64);
      v25 = (void **)(*(__int64 (__fastcall **)(__int64, const void **, __int64))(*(_QWORD *)a2 + 40i64))(a2, v169, a7);
      v151 = v25;
      if ( !v25 || !v25[1] )
      {
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
        {
          v114 = (__int64 *)CDnsPolicy::Name((const void **)a5, (__int64)v165);
          v115 = (__int64)v114;
          LOBYTE(v9) = v9 | 0x10;
          if ( (unsigned __int64)v114[3] >= 8 )
            v115 = *v114;
          v116 = (const unsigned __int16 *)v167;
          if ( v168 >= 8 )
            v116 = (const unsigned __int16 *)v167[0];
          v117 = (type_info *)__RTtypeid(a2);
          v118 = type_info::name(v117);
          WPP_SF_SSsq(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x68u, v119, v116, v115, (__int64)v118);
        }
        if ( (v9 & 0x10) != 0 )
          std::pair<std::wstring,unsigned long>::~pair<std::wstring,unsigned long>((__int64)v165);
        CDnsPolicyAddException::CDnsPolicyAddException((CDnsPolicyAddException *)pExceptionObject, v39, 2843);
        CxxThrowException_0(pExceptionObject, (_ThrowInfo *)&TI3_AVCDnsPolicyAddException__);
      }
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        v40 = (__int64 *)CDnsPolicy::Name((const void **)a5, (__int64)v165);
        v153 = (__int64)v40;
        v9 |= 0x20u;
        v148 = v9;
        if ( (unsigned __int64)v40[3] >= 8 )
          v153 = *v40;
        v41 = (const unsigned __int16 *)v167;
        if ( v168 >= 8 )
          v41 = (const unsigned __int16 *)v167[0];
        v42 = (type_info *)__RTtypeid(a2);
        v43 = type_info::name(v42);
        WPP_SF_SSsqq(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x69u, v44, v41, v153, (__int64)v43);
      }
      if ( (v9 & 0x20) != 0 )
      {
        v9 &= ~0x20u;
        v148 = v9;
        if ( v166 >= 8 )
          operator delete(v165[0]);
      }
      if ( v168 >= 8 )
        operator delete((void *)v167[0]);
      v168 = 7i64;
      v167[2] = 0i64;
      LOWORD(v167[0]) = 0;
      goto LABEL_173;
    }
    v45 = __RTtypeid(v23);
    if ( (unsigned int)type_info::operator==(v45, &CDNSPolicyCriteriaQueryType `RTTI Type Descriptor') )
    {
      v46 = _RTDynamicCast_0(
              v23,
              0i64,
              &CDNSPolicyCriteria `RTTI Type Descriptor',
              &CDNSPolicyCriteriaQueryType `RTTI Type Descriptor',
              0);
      if ( !*(_DWORD *)(v46 + 12) || *(_QWORD *)(v46 + 168) == *(_QWORD *)(v46 + 144) )
      {
        v48 = 0;
        v154 = 0;
      }
      else
      {
        v47 = *(unsigned __int16 **)(v46 + 168);
        *(_QWORD *)(v46 + 168) = v47 + 1;
        v48 = *v47;
        v154 = *v47;
      }
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_D(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x6Au,
          (__int64)&WPP_bbbcc621566c3408fe84d6a85874d543_Traceguids,
          v48);
      }
      v25 = (void **)(*(__int64 (__fastcall **)(__int64, _QWORD, __int64))(*(_QWORD *)a2 + 32i64))(a2, v48, a7);
      v151 = v25;
      if ( !v25 || !v25[1] )
      {
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
        {
          v120 = (__int64 *)CDnsPolicy::Name((const void **)a5, (__int64)v165);
          v121 = (__int64)v120;
          LOBYTE(v9) = v9 | 0x40;
          if ( (unsigned __int64)v120[3] >= 8 )
            v121 = *v120;
          v122 = (type_info *)__RTtypeid(a2);
          v123 = type_info::name(v122);
          WPP_SF_dSsq(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x6Bu, v124, v48, v121, (__int64)v123);
        }
        if ( (v9 & 0x40) != 0 )
          std::pair<std::wstring,unsigned long>::~pair<std::wstring,unsigned long>((__int64)v165);
        CDnsPolicyAddException::CDnsPolicyAddException((CDnsPolicyAddException *)pExceptionObject, v49, 2858);
        CxxThrowException_0(pExceptionObject, (_ThrowInfo *)&TI3_AVCDnsPolicyAddException__);
      }
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        v50 = (__int64 *)CDnsPolicy::Name((const void **)a5, (__int64)v165);
        v51 = (__int64)v50;
        v9 |= 0x80u;
        v148 = v9;
        if ( (unsigned __int64)v50[3] >= 8 )
          v51 = *v50;
        v52 = (type_info *)__RTtypeid(a2);
        v53 = type_info::name(v52);
        WPP_SF_dSsqq(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x6Cu, v54, v154, v51, (__int64)v53);
      }
      if ( (v9 & 0x80u) != 0 )
      {
        v9 &= ~0x80u;
        goto LABEL_88;
      }
    }
    else
    {
      v55 = __RTtypeid(v23);
      if ( (unsigned int)type_info::operator==(v55, &CDNSPolicyCriteriaInterfaceIP `RTTI Type Descriptor') )
      {
        v56 = 0i64;
        v57 = _RTDynamicCast_0(
                v23,
                0i64,
                &CDNSPolicyCriteria `RTTI Type Descriptor',
                &CDNSPolicyCriteriaInterfaceIP `RTTI Type Descriptor',
                0);
        if ( *(_DWORD *)(v57 + 12) && *(_QWORD *)(v57 + 112) != *(_QWORD *)(v57 + 64) )
        {
          v58 = *(_QWORD **)(v57 + 112);
          *(_QWORD *)(v57 + 112) = *v58;
          v56 = (struct in_addr *)v58[2];
        }
        v155 = v56;
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          v59 = DnsAddr_Ntoa(v56);
          WPP_SF_s(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x6Du,
            (__int64)&WPP_bbbcc621566c3408fe84d6a85874d543_Traceguids,
            v59);
        }
        v25 = (void **)(*(__int64 (__fastcall **)(__int64, struct in_addr *, __int64))(*(_QWORD *)a2 + 24i64))(
                         a2,
                         v56,
                         a7);
        v151 = v25;
        if ( !v25 || !v25[1] )
        {
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
          {
            v125 = (__int64 *)CDnsPolicy::Name((const void **)a5, (__int64)v165);
            v126 = (__int64)v125;
            LOWORD(v9) = v9 | 0x100;
            if ( (unsigned __int64)v125[3] >= 8 )
              v126 = *v125;
            v127 = (type_info *)__RTtypeid(a2);
            v128 = type_info::name(v127);
            v129 = DnsAddr_Ntoa(v155);
            WPP_SF_sSsq(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x6Eu, v130, v129, v126, (__int64)v128);
          }
          if ( (v9 & 0x100) != 0 )
            std::pair<std::wstring,unsigned long>::~pair<std::wstring,unsigned long>((__int64)v165);
          CDnsPolicyAddException::CDnsPolicyAddException((CDnsPolicyAddException *)pExceptionObject, v60, 2873);
          CxxThrowException_0(pExceptionObject, (_ThrowInfo *)&TI3_AVCDnsPolicyAddException__);
        }
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          v61 = (__int64 *)CDnsPolicy::Name((const void **)a5, (__int64)v165);
          v159 = (__int64)v61;
          v9 |= 0x200u;
          v148 = v9;
          if ( (unsigned __int64)v61[3] >= 8 )
            v159 = *v61;
          v62 = (type_info *)__RTtypeid(a2);
          v63 = type_info::name(v62);
          v64 = DnsAddr_Ntoa(v155);
          WPP_SF_sSsqq(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x6Fu, v65, v64, v159, (__int64)v63);
        }
        if ( (v9 & 0x200) != 0 )
        {
          v9 &= ~0x200u;
          goto LABEL_88;
        }
      }
      else
      {
        v66 = __RTtypeid(v23);
        if ( (unsigned int)type_info::operator==(v66, &CDNSPolicyCriteriaTransProtocol `RTTI Type Descriptor') )
        {
          v67 = _RTDynamicCast_0(
                  v23,
                  0i64,
                  &CDNSPolicyCriteria `RTTI Type Descriptor',
                  &CDNSPolicyCriteriaTransProtocol `RTTI Type Descriptor',
                  0);
          if ( !*(_DWORD *)(v67 + 12) || *(_QWORD *)(v67 + 160) == *(_QWORD *)(v67 + 136) )
          {
            v69 = 0;
            v156 = 0;
          }
          else
          {
            v68 = *(unsigned __int16 **)(v67 + 160);
            *(_QWORD *)(v67 + 160) = v68 + 1;
            v69 = *v68;
            v156 = *v68;
          }
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            v70 = "TCP";
            if ( v69 )
              v70 = "UDP";
            WPP_SF_s(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x70u,
              (__int64)&WPP_bbbcc621566c3408fe84d6a85874d543_Traceguids,
              v70);
          }
          v25 = (void **)(*(__int64 (__fastcall **)(__int64, _QWORD, __int64))(*(_QWORD *)a2 + 32i64))(a2, v69, a7);
          v151 = v25;
          if ( !v25 || !v25[1] )
          {
            if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
              && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
            {
              v131 = (__int64 *)CDnsPolicy::Name((const void **)a5, (__int64)v165);
              v132 = (__int64)v131;
              LOWORD(v9) = v9 | 0x400;
              if ( (unsigned __int64)v131[3] >= 8 )
                v132 = *v131;
              v133 = (type_info *)__RTtypeid(a2);
              v134 = type_info::name(v133);
              v136 = "TCP";
              if ( v69 )
                v136 = "UDP";
              WPP_SF_sSsq(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x71u, v135, v136, v132, (__int64)v134);
            }
            if ( (v9 & 0x400) != 0 )
              std::pair<std::wstring,unsigned long>::~pair<std::wstring,unsigned long>((__int64)v165);
            CDnsPolicyAddException::CDnsPolicyAddException((CDnsPolicyAddException *)pExceptionObject, v71, 2889);
            CxxThrowException_0(pExceptionObject, (_ThrowInfo *)&TI3_AVCDnsPolicyAddException__);
          }
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            v72 = (__int64 *)CDnsPolicy::Name((const void **)a5, (__int64)v165);
            v73 = (__int64)v72;
            v9 |= 0x800u;
            v148 = v9;
            if ( (unsigned __int64)v72[3] >= 8 )
              v73 = *v72;
            v74 = (type_info *)__RTtypeid(a2);
            v75 = type_info::name(v74);
            v77 = "TCP";
            if ( v156 )
              v77 = "UDP";
            WPP_SF_sSsqq(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x72u, v76, v77, v73, (__int64)v75);
          }
          if ( (v9 & 0x800) != 0 )
          {
            v9 &= ~0x800u;
            goto LABEL_88;
          }
        }
        else
        {
          v78 = __RTtypeid(v23);
          if ( (unsigned int)type_info::operator==(v78, &CDNSPolicyCriteriaNetProtocol `RTTI Type Descriptor') )
          {
            v79 = _RTDynamicCast_0(
                    v23,
                    0i64,
                    &CDNSPolicyCriteria `RTTI Type Descriptor',
                    &CDNSPolicyCriteriaNetProtocol `RTTI Type Descriptor',
                    0);
            if ( !*(_DWORD *)(v79 + 12) || *(_QWORD *)(v79 + 160) == *(_QWORD *)(v79 + 136) )
            {
              v81 = 0;
              v157 = 0;
            }
            else
            {
              v80 = *(unsigned __int16 **)(v79 + 160);
              *(_QWORD *)(v79 + 160) = v80 + 1;
              v81 = *v80;
              v157 = *v80;
            }
            if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
              && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
            {
              v82 = "IPv6";
              if ( v81 )
                v82 = "IPv4";
              WPP_SF_s(
                *((_QWORD *)WPP_GLOBAL_Control + 7),
                0x73u,
                (__int64)&WPP_bbbcc621566c3408fe84d6a85874d543_Traceguids,
                v82);
            }
            v25 = (void **)(*(__int64 (__fastcall **)(__int64, _QWORD, __int64))(*(_QWORD *)a2 + 32i64))(a2, v81, a7);
            v151 = v25;
            if ( !v25 || !v25[1] )
            {
              if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
                && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
              {
                v137 = (__int64 *)CDnsPolicy::Name((const void **)a5, (__int64)v165);
                v138 = (__int64)v137;
                LOWORD(v9) = v9 | 0x1000;
                if ( (unsigned __int64)v137[3] >= 8 )
                  v138 = *v137;
                v139 = (type_info *)__RTtypeid(a2);
                v140 = type_info::name(v139);
                v142 = "IPv6";
                if ( v81 )
                  v142 = "IPv4";
                WPP_SF_sSsq(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x74u, v141, v142, v138, (__int64)v140);
              }
              if ( (v9 & 0x1000) != 0 )
                std::pair<std::wstring,unsigned long>::~pair<std::wstring,unsigned long>((__int64)v165);
              CDnsPolicyAddException::CDnsPolicyAddException((CDnsPolicyAddException *)pExceptionObject, v83, 2906);
              CxxThrowException_0(pExceptionObject, (_ThrowInfo *)&TI3_AVCDnsPolicyAddException__);
            }
            if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
              && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
            {
              v84 = (__int64 *)CDnsPolicy::Name((const void **)a5, (__int64)v165);
              v85 = (__int64)v84;
              v9 |= 0x2000u;
              v148 = v9;
              if ( (unsigned __int64)v84[3] >= 8 )
                v85 = *v84;
              v86 = (type_info *)__RTtypeid(a2);
              v87 = type_info::name(v86);
              v89 = "IPv6";
              if ( v157 )
                v89 = "IPv4";
              WPP_SF_sSsqq(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x75u, v88, v89, v85, (__int64)v87);
            }
            if ( (v9 & 0x2000) != 0 )
            {
              v9 &= ~0x2000u;
              goto LABEL_88;
            }
          }
          else
          {
            v90 = __RTtypeid(v23);
            if ( (unsigned int)type_info::operator==(v90, &CDNSPolicyCriteriaTime `RTTI Type Descriptor') )
            {
              v91 = _RTDynamicCast_0(
                      v23,
                      0i64,
                      &CDNSPolicyCriteria `RTTI Type Descriptor',
                      &CDNSPolicyCriteriaTime `RTTI Type Descriptor',
                      0);
              if ( !*(_DWORD *)(v91 + 12)
                || (v92 = *(unsigned __int16 *)(v91 + 144),
                    v92 == (__int64)(*(_QWORD *)(v91 + 120) - *(_QWORD *)(v91 + 112)) >> 1) )
              {
                LOWORD(v92) = -1;
              }
              else
              {
                *(_WORD *)(v91 + 144) = v92 + 1;
              }
              if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
                && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
              {
                WPP_SF_D(
                  *((_QWORD *)WPP_GLOBAL_Control + 7),
                  0x76u,
                  (__int64)&WPP_bbbcc621566c3408fe84d6a85874d543_Traceguids,
                  (unsigned __int16)v92);
              }
              v25 = (void **)(*(__int64 (__fastcall **)(__int64, _QWORD, __int64))(*(_QWORD *)a2 + 32i64))(
                               a2,
                               (unsigned __int16)v92,
                               a7);
              v151 = v25;
              if ( !v25 || !v25[1] )
              {
                if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                  && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
                  && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
                {
                  v143 = (__int64 *)CDnsPolicy::Name((const void **)a5, (__int64)v165);
                  v144 = (__int64)v143;
                  LOWORD(v9) = v9 | 0x4000;
                  if ( (unsigned __int64)v143[3] >= 8 )
                    v144 = *v143;
                  v145 = (type_info *)__RTtypeid(a2);
                  v146 = type_info::name(v145);
                  WPP_SF_dSsq(
                    *((_QWORD *)WPP_GLOBAL_Control + 7),
                    0x77u,
                    v147,
                    (unsigned __int16)v92,
                    v144,
                    (__int64)v146);
                }
                if ( (v9 & 0x4000) != 0 )
                  std::pair<std::wstring,unsigned long>::~pair<std::wstring,unsigned long>((__int64)v165);
                CDnsPolicyAddException::CDnsPolicyAddException((CDnsPolicyAddException *)pExceptionObject, v93, 2926);
                CxxThrowException_0(pExceptionObject, (_ThrowInfo *)&TI3_AVCDnsPolicyAddException__);
              }
              if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
                && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
              {
                v94 = (__int64 *)CDnsPolicy::Name((const void **)a5, (__int64)v165);
                v160 = (__int64)v94;
                v9 |= 0x8000u;
                v148 = v9;
                if ( (unsigned __int64)v94[3] >= 8 )
                  v160 = *v94;
                v95 = (type_info *)__RTtypeid(a2);
                v96 = type_info::name(v95);
                WPP_SF_dSsqq(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x78u, v97, (unsigned __int16)v92, v160, (__int64)v96);
              }
              if ( (v9 & 0x8000) != 0 )
              {
                v9 &= ~0x8000u;
LABEL_88:
                v148 = v9;
                if ( v166 >= 8 )
                  operator delete(v165[0]);
              }
            }
          }
        }
      }
    }
LABEL_173:
    if ( *(_DWORD *)(a5 + 80) )
    {
      if ( *(_DWORD *)(a5 + 80) != 1 )
        goto LABEL_187;
LABEL_186:
      std::list<CDnsPolicy_CriteriaNode *>::_Insert<std::_List_iterator<std::_List_val<CDnsPolicy_CriteriaNode *>>>(
        (__int64)a6,
        **a6,
        *(_QWORD **)*v25,
        *v25);
      goto LABEL_187;
    }
    v98 = a4 + 1;
    if ( (unsigned __int16)(a4 + 1) >= 7u )
      goto LABEL_186;
    while ( !*(_QWORD *)(*a3 + 8i64 * v98) )
    {
      if ( ++v98 >= 7u )
        goto LABEL_186;
    }
    v99 = (CDnsPolicy_CriteriaNode *)*v25;
    v100 = *(CDnsPolicy_CriteriaNode **)*v25;
    if ( v100 != v99 )
    {
      do
      {
        NextCriteriaTree = CDnsPolicy_CriteriaNode::GetNextCriteriaTree(
                             *((CDnsPolicy_CriteriaNode **)v100 + 2),
                             v98,
                             1,
                             a7);
        v161 = NextCriteriaTree;
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          v102 = (type_info *)__RTtypeid(NextCriteriaTree);
          v103 = type_info::name(v102);
          WPP_SF_Dsq(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x79u,
            (__int64)&WPP_bbbcc621566c3408fe84d6a85874d543_Traceguids,
            v98,
            (__int64)v103);
          NextCriteriaTree = v161;
        }
        CDnsPolicyManager::AddCriteriaToPolicyTree(a1, (__int64)NextCriteriaTree, a3, v98, a5, a6, a7);
        v100 = *(CDnsPolicy_CriteriaNode **)v100;
      }
      while ( v100 != *v151 );
      v9 = v148;
    }
LABEL_187:
    v104 = *(_QWORD **)*v151;
    *(_QWORD *)*v151 = *v151;
    *((_QWORD *)*v151 + 1) = *v151;
    v151[1] = 0i64;
    if ( v104 != *v151 )
    {
      do
      {
        v105 = (_QWORD *)*v104;
        operator delete(v104);
        v104 = v105;
      }
      while ( v105 != *v151 );
    }
    v106 = *(_QWORD **)*v151;
    *(_QWORD *)*v151 = *v151;
    *((_QWORD *)*v151 + 1) = *v151;
    v151[1] = 0i64;
    if ( v106 != *v151 )
    {
      do
      {
        v107 = (_QWORD *)*v106;
        operator delete(v106);
        v106 = v107;
      }
      while ( v107 != *v151 );
    }
    operator delete(*v151);
    operator delete(v151);
    v23 = v162;
  }
}
// 140136011: variable 'v22' is possibly undefined
// 140136212: variable 'v35' is possibly undefined
// 140136402: variable 'v44' is possibly undefined
// 1401365D9: variable 'v54' is possibly undefined
// 1401367A3: variable 'v65' is possibly undefined
// 14013696A: variable 'v76' is possibly undefined
// 140136B31: variable 'v88' is possibly undefined
// 140136CD7: variable 'v97' is possibly undefined
// 140136F45: variable 'v113' is possibly undefined
// 140136F64: variable 'v30' is possibly undefined
// 140137003: variable 'v119' is possibly undefined
// 140137022: variable 'v39' is possibly undefined
// 1401370B8: variable 'v124' is possibly undefined
// 1401370D7: variable 'v49' is possibly undefined
// 14013717E: variable 'v130' is possibly undefined
// 14013719D: variable 'v60' is possibly undefined
// 140137249: variable 'v135' is possibly undefined
// 140137268: variable 'v71' is possibly undefined
// 140137314: variable 'v141' is possibly undefined
// 140137333: variable 'v83' is possibly undefined
// 1401373CA: variable 'v147' is possibly undefined
// 1401373E9: variable 'v93' is possibly undefined
// 140169C46: using guessed type __int64 __fastcall _RTDynamicCast_0(_QWORD, _QWORD, _QWORD, _QWORD, _DWORD);
// 140184CA8: using guessed type void __stdcall operator delete(void *);
// 140184DA8: using guessed type const char *type_info::name(type_info *__hidden this);
// 140184DB0: using guessed type __int64 __fastcall type_info::operator==(_QWORD, _QWORD);
// 140184DB8: using guessed type __int64 __fastcall __RTtypeid(_QWORD);
// 140185140: using guessed type __int64 (__fastcall *_guard_dispatch_icall_fptr)(_QWORD, _QWORD);
// 1401B7928: using guessed type void **CDNSPolicyCriteriaFqdn `RTTI Type Descriptor';
// 1401B7958: using guessed type void **CDNSPolicyCriteriaNetProtocol `RTTI Type Descriptor';
// 1401B7990: using guessed type void **CDNSPolicyCriteriaSubnetRecord `RTTI Type Descriptor';
// 1401B7A78: using guessed type void **CDNSPolicyCriteria `RTTI Type Descriptor';
// 1401B7AA8: using guessed type void **CDNSPolicyCriteriaTransProtocol `RTTI Type Descriptor';
// 1401B7B48: using guessed type void **CDNSPolicyCriteriaInterfaceIP `RTTI Type Descriptor';
// 1401B7B80: using guessed type void **CDNSPolicyCriteriaQueryType `RTTI Type Descriptor';
// 1401B7C88: using guessed type void **CDNSPolicyCriteriaTime `RTTI Type Descriptor';
// 140135DC4: using guessed type unsigned __int16 var_1A0[24];
##############################
Role: Let's assume that you are an advanced reverse engineer and you are reverse engineering a network driver using IDA Pro, and you are also familiar with the RFC documentation. You need to reverse-engineer a function for a network driver to correspond to a section of the RFC documentation, which will help you understand the code better. The driver you're reversing is Schannel.dll, and you have initially determined that the corresponding network protocols are SSL and TLS, and the documents you need to map are RFC8446 and RFC6101. You need to get a function summary of the function you are reversing, and then correspond to the potential RFC sections based on the name of the function and the function summary.
Function Background: The function is reverse engineered from the driver file Schannel.dll on Windows platform. Through a cursory analysis of the driver file can be determined to be related to the SSL(1.3), TLS(3.0) protocol, that is, with RFC8446, RFC6101 strong correlation.

Output Function Summary: Summarizes the function's functionality with several phrases instead of sentences, focuses on covering the function's control flow information, and highlights the protocol function points implemented by the function. Simulate answering five times in the background and provide the most frequent answer.

Retrieve document sections: giving matches for document sections(FunctionMatchRFCResult) that the code may related to. NOTE if the code is only business related(i.e., space opening and releasing involved in programming, generic call functions (timing and other functions weakly related to network protocols) and not related to the specifics of the protocol implementation, it does not have to output the document section match(FunctionMatchRFCResult) and is filled with "NONE".

Retrieve document sections Thinking Chain: The function code is matched with the RFC document section, and the thinking chain is provided to help you solve the problem better:
	1. Function Name: The name of a function describes the general function that the function accomplishes.
	2. Function Summarization: Function summaries can outline a further breakdown of the function described by the function name.
	3. Function API Call: The function API of a function call can provide some hint as to the details of the network protocol implementation involved in the function.
	4. Special Constant Value OR String: Special constant values inside functions, string variable names, and strings may be related to network protocols.
	5. Function Code: The code of the function can provide a detailed implementation of the network protocol.
Generate Function Information Collection with JSON Format:

{
	"FunctionIndex": "(FILL WITH "File count" with less than four bits are indexed with zeros to make up the four bits.)",
	"FunctionName": "(Full Function Code Name)",
	"FunctionSummarization": [
		"(Function Summary Phrase1)",
		"(Function Summary Phrase2)",
		"(...)"
	],
	"FunctionMatchRFCResult": [
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 1)",
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 2)",
		"(...)"
	],
}

ATTENTION: Remember YOU MUST ONLY output the Function Information Collection result.
