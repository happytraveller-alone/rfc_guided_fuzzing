Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 520
// Total lines: 182

//----- (00000001400479C8) ----------------------------------------------------
__int64 __fastcall Ds_InitializeSecurity(LDAP *ld, int *a2)
{
  int v2; // eax
  int v3; // edi
  int v6; // r15d
  CDnsClientSubnetRecordsTrie *v7; // rcx
  const char *v8; // r9
  HANDLE CurrentProcess; // rax
  _QWORD *v10; // rcx
  int DnsAdminGroup; // eax
  __int64 v12; // rdx
  int ProcessSids; // eax
  __int64 v14; // rdx
  __int64 v15; // rcx
  unsigned int StandardSids; // ebx
  CDnsClientSubnetRecordsTrie *v17; // rcx
  unsigned __int16 v18; // dx
  int v19; // eax
  __int64 v20; // rdx
  void *TokenHandle; // [rsp+48h] [rbp-28h] BYREF
  struct _TOKEN_PRIVILEGES NewState; // [rsp+50h] [rbp-20h] BYREF

  v2 = g_fDsReadOnlyDcMode;
  v3 = g_fDsReadOnlyDcMode;
  v6 = 0;
  if ( dword_1401B9750 )
    v3 = 1;
  v7 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
  {
    if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0 && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      if ( dword_1401B9750 )
        v2 = 1;
      v8 = "writeable";
      if ( v2 )
        v8 = "read-only";
      WPP_SF_s(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x1C1u,
        (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
        v8);
      v7 = WPP_GLOBAL_Control;
    }
    if ( v7 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)v7 + 17) & 0x400) != 0
      && *((_BYTE *)v7 + 65) >= 4u )
    {
      WPP_SF_D(*((_QWORD *)v7 + 7), 0x1C0u, (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids, 1);
    }
  }
  CurrentProcess = GetCurrentProcess();
  if ( OpenProcessToken(CurrentProcess, 0x28u, &TokenHandle) )
  {
    NewState.Privileges[0].Luid = (LUID)8i64;
    NewState.PrivilegeCount = 1;
    NewState.Privileges[0].Attributes = 2;
    AdjustTokenPrivileges(TokenHandle, 0, &NewState, 0x10u, 0i64, 0i64);
    if ( TokenHandle )
      CloseHandle(TokenHandle);
  }
  if ( g_pServerObjectSD )
  {
    Mem_Free((_QWORD *)g_pServerObjectSD, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\ds.c", 17226);
    v10 = 0i64;
    g_pDefaultServerSD = 0i64;
  }
  else
  {
    v10 = (_QWORD *)g_pDefaultServerSD;
  }
  if ( v10 )
  {
    Mem_Free(v10, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\ds.c", 17231);
    g_pDefaultServerSD = 0i64;
  }
  if ( g_pServerSid )
  {
    operator delete(g_pServerSid);
    g_pServerSid = 0i64;
  }
  if ( g_pServerGroupSid )
  {
    operator delete(g_pServerGroupSid);
    g_pServerGroupSid = 0i64;
  }
  DnsAdminGroup = SD_LoadDnsAdminGroup(v3 == 0);
  if ( DnsAdminGroup == 9714 )
  {
    v6 = 1;
  }
  else if ( DnsAdminGroup && !v3 )
  {
    NewState = (struct _TOKEN_PRIVILEGES)DNS_EVENT_DS_DNSADMINS_ERROR;
    Eventlog_LogEvent((__int64)&NewState, v12, 0, 0i64, 0i64, DnsAdminGroup, 0, 0i64);
  }
  ProcessSids = CSecurityDescriptor::GetProcessSids(&g_pServerSid, &g_pServerGroupSid);
  StandardSids = ProcessSids;
  if ( ProcessSids )
  {
    v17 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      v18 = 450;
LABEL_37:
      WPP_SF_D(*((_QWORD *)v17 + 7), v18, (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids, ProcessSids);
LABEL_51:
      v17 = WPP_GLOBAL_Control;
      goto LABEL_52;
    }
    goto LABEL_52;
  }
  ProcessSids = SD_CreateServerSD(v15);
  StandardSids = ProcessSids;
  if ( ProcessSids )
  {
    v17 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      v18 = 451;
      goto LABEL_37;
    }
LABEL_52:
    if ( !StandardSids )
      goto LABEL_60;
    goto LABEL_55;
  }
  StandardSids = Security_CreateStandardSids();
  if ( !StandardSids )
  {
    if ( v3 )
      goto LABEL_60;
    v19 = Ds_RegisterSpnDnsServer(ld);
    StandardSids = v19;
    if ( !v19 )
      goto LABEL_60;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_D(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x1C4u,
        (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
        v19);
    }
    NewState = (struct _TOKEN_PRIVILEGES)DNS_EVENT_DS_SECURITY_INIT_FAILURE;
    Eventlog_LogEvent((__int64)&NewState, v20, 0, 0i64, 0i64, StandardSids, 0, 0i64);
    StandardSids = 0;
    goto LABEL_51;
  }
  v17 = WPP_GLOBAL_Control;
LABEL_55:
  if ( v17 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)v17 + 17) & 0x400) != 0
    && *((_BYTE *)v17 + 65) >= 4u )
  {
    WPP_SF_D(*((_QWORD *)v17 + 7), 0x1C5u, (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids, StandardSids);
  }
  NewState = (struct _TOKEN_PRIVILEGES)DNS_EVENT_DS_SECURITY_INIT_FAILURE;
  Eventlog_LogEvent((__int64)&NewState, v14, 0, 0i64, 0i64, StandardSids, 0, 0i64);
LABEL_60:
  if ( a2 )
    *a2 = v6;
  return StandardSids;
}
// 140047BE2: variable 'v12' is possibly undefined
// 140047C4B: variable 'v15' is possibly undefined
// 140047D17: variable 'v20' is possibly undefined
// 140047D8F: variable 'v14' is possibly undefined
// 140184CA8: using guessed type void __stdcall operator delete(void *);
// 140187310: using guessed type __int128 DNS_EVENT_DS_SECURITY_INIT_FAILURE;
// 140187878: using guessed type __int128 DNS_EVENT_DS_DNSADMINS_ERROR;
// 1401B8C94: using guessed type int g_fDsReadOnlyDcMode;
// 1401B9750: using guessed type int dword_1401B9750;
// 1401C94B0: using guessed type __int64 g_pServerObjectSD;
// 1401C94C8: using guessed type __int64 g_pDefaultServerSD;
