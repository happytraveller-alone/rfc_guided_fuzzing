Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 2057
// Total lines: 388

//----- (0000000140100140) ----------------------------------------------------
__int64 __fastcall Rpc_SetZoneSKDState(
        __int64 a1,
        __int64 a2,
        __int64 a3,
        __int64 a4,
        int a5,
        __int64 a6,
        _DWORD *a7,
        unsigned __int16 *a8)
{
  __int64 v9; // r12
  char v10; // r14
  char v11; // r15
  __int64 v12; // rcx
  unsigned int Key; // ebx
  char *v14; // rax
  __int64 v15; // rdx
  _QWORD *ZoneSkdByGuid; // rax
  char *v17; // rax
  char *v18; // rcx
  int v19; // esi
  unsigned __int16 **v20; // r15
  unsigned __int16 *v21; // rax
  int v22; // r8d
  int v23; // r9d
  unsigned __int16 *v24; // r14
  int v25; // eax
  unsigned int v26; // edx
  char *v27; // rax
  char *v28; // rax
  struct _DnsRpcSigningKeyDescriptorState *SkdState; // rax
  __int64 v30; // rax
  int v31; // eax
  __int64 v32; // rdx
  __int64 v33; // rcx
  unsigned __int16 *v34; // rsi
  char v36; // [rsp+5Ah] [rbp-AEh]
  unsigned __int16 *v37; // [rsp+60h] [rbp-A8h] BYREF
  __int64 v38[4]; // [rsp+68h] [rbp-A0h] BYREF
  WCHAR v39[64]; // [rsp+88h] [rbp-80h] BYREF
  WCHAR Buffer[64]; // [rsp+108h] [rbp+0h] BYREF

  v9 = 0i64;
  v37 = a8;
  v10 = 0;
  v36 = 0;
  v11 = 0;
  *a7 = 0;
  *(_QWORD *)a8 = 0i64;
  if ( !a3 || a5 != 47 || !a6 )
  {
    Key = 87;
    goto LABEL_42;
  }
  v12 = a3;
  if ( *(_QWORD *)(a3 + 328) )
    v12 = *(_QWORD *)(a3 + 328);
  if ( *(_QWORD *)(v12 + 200) )
  {
    Key = 9553;
    goto LABEL_42;
  }
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    v14 = Dbg_GuidString((const IID *)(a6 + 8));
    WPP_SF_sS(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x36u,
      (__int64)&WPP_fcf90f505e41335ad1a88e0d5ede2d0c_Traceguids,
      *(const char **)(a3 + 16),
      (__int64)v14);
  }
  Key = RpcUtil_SwitchSecurityContext(0);
  if ( !Key )
  {
    v10 = 1;
    Key = Zone_LockForRPCSeqEx(a3, 0x2710u);
    if ( Key )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x10) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_s(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x37u,
          (__int64)&WPP_fcf90f505e41335ad1a88e0d5ede2d0c_Traceguids,
          *(const char **)(a3 + 16));
      }
      goto LABEL_42;
    }
    v36 = 1;
    Key = Zone_LockForWriteEx(a3, 1, 0x2710u, (__int64)"ds\\dns\\server\\server\\olsrpc.cpp", 184);
    if ( Key )
      goto LABEL_42;
    v11 = 1;
    if ( *(_DWORD *)(a3 + 372) != 1 )
    {
      Key = 9611;
      goto LABEL_42;
    }
    DnsOls_ResetZoneKeymasterFlagForZone(a3, v15, 1, 0, 0i64, 0i64, 0i64, 0i64, 0i64);
    if ( (*(_BYTE *)(a3 + 1040) & 2) == 0 )
    {
      Key = 9101;
      goto LABEL_42;
    }
    ZoneSkdByGuid = DnsOls_FindZoneSkdByGuid(a3, (const IID *)(a6 + 8));
    v9 = (__int64)ZoneSkdByGuid;
    if ( !ZoneSkdByGuid )
    {
      Key = 1168;
      goto LABEL_42;
    }
    if ( !*((_DWORD *)ZoneSkdByGuid + 9) )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        v17 = Dbg_GuidString((const IID *)(ZoneSkdByGuid + 1));
        WPP_SF_S(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x38u,
          (__int64)&WPP_fcf90f505e41335ad1a88e0d5ede2d0c_Traceguids,
          (const unsigned __int16 *)v17);
      }
      Key = 9118;
      goto LABEL_42;
    }
    v18 = *(char **)(a6 + 48);
    if ( v18 )
    {
      v19 = 0;
    }
    else
    {
      v18 = *(char **)(a6 + 56);
      if ( v18 )
      {
        v19 = 1;
      }
      else
      {
        v18 = *(char **)(a6 + 64);
        if ( !v18 )
        {
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
          {
            WPP_SF_(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x39u,
              (__int64)&WPP_fcf90f505e41335ad1a88e0d5ede2d0c_Traceguids);
          }
          Key = 87;
          goto LABEL_42;
        }
        v19 = 2;
      }
    }
    v20 = (unsigned __int16 **)&ZoneSkdByGuid[3 * v19 + 18];
    if ( *(_DWORD *)(a3 + 372) == 1 && (*(_BYTE *)(a3 + 1040) & 4) != 0 )
    {
      if ( v19 != 2 )
      {
        Key = 9102;
LABEL_41:
        v11 = 1;
        goto LABEL_42;
      }
    }
    else
    {
      if ( v19 == 2 )
      {
        Key = 87;
        goto LABEL_41;
      }
      if ( v19 == 1 && (*(_DWORD *)(a3 + 1040) & 0x1000) == 0 )
      {
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
        {
          WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x3Bu, (__int64)&WPP_fcf90f505e41335ad1a88e0d5ede2d0c_Traceguids);
        }
        v11 = 1;
        Key = 87;
        goto LABEL_42;
      }
    }
    if ( *v20 )
    {
      v21 = (unsigned __int16 *)v18;
      do
      {
        v22 = *(unsigned __int16 *)((char *)v21 + (char *)*v20 - v18);
        v23 = *v21 - v22;
        if ( v23 )
          break;
        ++v21;
      }
      while ( v22 );
      if ( !v23 )
        goto LABEL_41;
    }
    v24 = (unsigned __int16 *)Dns_StringCopyAllocate(v18, 0, 1i64, 1);
    if ( v24 )
    {
      Key = ZoneScopes_LockAll(a3, 1, 10000, 0i64, 0i64);
      if ( Key )
      {
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
        {
          WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x3Cu, (__int64)&WPP_fcf90f505e41335ad1a88e0d5ede2d0c_Traceguids);
        }
      }
      else
      {
        v38[0] = (__int64)v24;
        v38[2] = 0i64;
        v38[1] = 0i64;
        v25 = DnsOls_ValidateSigningKey(a3, (struct _dnsskd *)v9, (struct _dnsskdkey *)v38);
        Key = v25;
        if ( v25 )
        {
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
          {
            WPP_SF_DS(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x3Du,
              (__int64)&WPP_fcf90f505e41335ad1a88e0d5ede2d0c_Traceguids,
              v25,
              (__int64)v24);
          }
          if ( Key == 87 )
            Key = 9107;
        }
        else
        {
          DnsOls_DeleteSkdKeyPairObject(v9 + 24 * (v19 + 6i64));
          if ( v19 == 2 )
          {
            Key = setNextKey((struct _zone_info *)a3, (struct _dnsskd *)v9, v24);
          }
          else
          {
            DnsOls_DeleteCertAndKey((struct _zone_info *)a3, (struct _dnsskd *)v9, *v20);
            Mem_Free(*v20, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\olsrpc.cpp", 2457);
            *v20 = v24;
            *((_DWORD *)v20 + 4) = v19 != 0 ? 3 : 0;
          }
          if ( Key )
          {
            if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
              && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
            {
              WPP_SF_DS(
                *((_QWORD *)WPP_GLOBAL_Control + 7),
                0x3Eu,
                (__int64)&WPP_fcf90f505e41335ad1a88e0d5ede2d0c_Traceguids,
                Key,
                (__int64)v24);
            }
          }
          else
          {
            Key = DnsOls_WriteSkdToStorage(0, a3, v9, 0);
            if ( Key )
            {
              if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
                && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
              {
                v27 = Dbg_GuidString((const IID *)(v9 + 8));
                WPP_SF_DS(
                  *((_QWORD *)WPP_GLOBAL_Control + 7),
                  0x3Fu,
                  (__int64)&WPP_fcf90f505e41335ad1a88e0d5ede2d0c_Traceguids,
                  Key,
                  (__int64)v27);
              }
            }
            else if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                   && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
                   && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
            {
              v28 = Dbg_GuidString((const IID *)(v9 + 8));
              WPP_SF_S(
                *((_QWORD *)WPP_GLOBAL_Control + 7),
                0x40u,
                (__int64)&WPP_fcf90f505e41335ad1a88e0d5ede2d0c_Traceguids,
                (const unsigned __int16 *)v28);
            }
          }
        }
        ZoneScopes_UnLockAll(a3, v26, 0i64);
      }
      v10 = 1;
      v11 = 1;
    }
    else
    {
      v10 = 1;
      Key = 14;
      v11 = 1;
    }
  }
LABEL_42:
  Mem_Free(0i64, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\olsrpc.cpp", 2496);
  if ( !Key )
  {
    if ( v9 )
    {
      SkdState = Rpc_AllocateSkdState((struct _dnsskd *)v9);
      *(_QWORD *)v37 = SkdState;
      if ( SkdState )
        *a7 = 47;
      else
        Key = 14;
    }
    else
    {
      Key = 13;
    }
  }
  if ( v10 )
    RpcUtil_SwitchSecurityContext(1);
  if ( v11 )
    Zone_UnlockAfterWriteEx(a3, 1, (__int64)"ds\\dns\\server\\server\\olsrpc.cpp", 234);
  if ( v36 )
    Lock_ReleaseWrite(*(_QWORD *)(a3 + 312));
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    if ( a3 )
      v30 = *(_QWORD *)(a3 + 16);
    else
      v30 = 0i64;
    WPP_SF_Ds(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x41u,
      (__int64)&WPP_fcf90f505e41335ad1a88e0d5ede2d0c_Traceguids,
      Key,
      v30);
  }
  if ( !Key )
  {
    memset_0(Buffer, 0, sizeof(Buffer));
    memset_0(v39, 0, sizeof(v39));
    v31 = *(_DWORD *)(v9 + 36);
    v37 = 0i64;
    Dns_GetResourceString(12053 - (v31 != 0), Buffer, 64i64);
    Dns_GetResourceString(12015 - (*(_DWORD *)(v9 + 36) != 0), v39, 64i64);
    StringFromGuid((const IID *)(v9 + 8), (void **)&v37);
    v34 = v37;
    if ( (dword_1401B9104 & 2) != 0 )
      Template_zzzzzzz(
        v33,
        v32,
        Buffer,
        v39,
        v37,
        *(const unsigned __int16 **)(a3 + 24),
        *(const unsigned __int16 **)(v9 + 144),
        *(const unsigned __int16 **)(v9 + 168),
        *(const unsigned __int16 **)(v9 + 192));
    Mem_Free(v34, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\olsrpc.cpp", 2564);
  }
  return Key;
}
// 1401003DD: conditional instruction was optimized away because rcx.8!=0
// 140100320: variable 'v15' is possibly undefined
// 140100724: variable 'v26' is possibly undefined
// 1401008DF: variable 'v33' is possibly undefined
// 1401008DF: variable 'v32' is possibly undefined
// 1401B9104: using guessed type int dword_1401B9104;
