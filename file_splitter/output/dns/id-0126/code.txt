Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 126
// Total lines: 127

//----- (0000000140010C7C) ----------------------------------------------------
__int64 __fastcall loadZonesIntoDbase(const unsigned __int16 **a1)
{
  int v1; // r15d
  unsigned int v2; // edi
  int StartLoadingThreads; // r14d
  const unsigned __int16 **i; // rax
  __int64 v6; // rcx
  int v7; // ebp
  int Zone; // eax
  __int64 v9; // rdx
  const wchar_t *v10; // rax
  const unsigned __int16 **v11; // rax
  const unsigned __int16 *v12; // rcx
  __int64 v13; // rax
  __int64 v14; // rbx
  __int64 v15; // rdx
  __int128 v17; // [rsp+40h] [rbp-28h] BYREF

  v1 = 0;
  v2 = 0;
  StartLoadingThreads = 13;
  for ( i = Zone_ListGetNextZoneEx(a1, 0i64, 0); ; i = Zone_ListGetNextZoneEx(a1, (__int64 *)v14, 0) )
  {
    v14 = (__int64)i;
    if ( !i )
      break;
    if ( *((_DWORD *)i + 93) )
    {
      v7 = _stricmp((const char *)i[2], "TrustAnchors") == 0;
      Zone = loadZone(v14, v7);
      StartLoadingThreads = Zone;
      if ( !Zone || (unsigned int)(*(_DWORD *)(v14 + 372) - 2) <= 1 && Zone == 2 )
      {
        if ( (Microsoft_Windows_DNS_Server_ServiceEnableBits & 2) != 0 )
        {
          v11 = *(const unsigned __int16 ***)(v14 + 200);
          if ( v11 )
            v12 = *v11;
          else
            v12 = L".";
          Template_zzsz(
            (__int64)v12,
            v9,
            *(const unsigned __int16 **)(v14 + 24),
            *(const unsigned __int16 **)(v14 + 144),
            Str,
            v12);
        }
        ++v1;
        if ( (*(_BYTE *)(v14 + 388) & 2) != 0 )
          ++v2;
        if ( dword_1401B98F8 )
        {
          v13 = g_pTrustAnchorsZone;
          if ( v7 )
            v13 = v14;
          g_pTrustAnchorsZone = v13;
        }
        if ( *(_QWORD *)(v14 + 184) )
          loadZoneScopes(v14);
      }
      else
      {
        if ( v7 && (Microsoft_Windows_DNS_Server_ServiceEnableBits & 0x10000) != 0 )
          Template_z(
            Microsoft_Windows_DNS_Server_ServiceHandle,
            &DNS_EVENT_CANNOT_LOAD_TRUST_ANCHORS,
            *(const unsigned __int16 **)(v14 + 24));
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          if ( a1 )
            v10 = *a1;
          else
            v10 = L".";
          WPP_SF_SS(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x24u,
            (__int64)&WPP_7130a3a4d89e343b55addd3e43accbbd_Traceguids,
            *(const unsigned __int16 **)(v14 + 24),
            (__int64)v10);
        }
      }
    }
  }
  DnsOls_ResetZoneKeymasterFlags(v6, 1);
  if ( v1 <= 0 && !a1 )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x25u, (__int64)&WPP_7130a3a4d89e343b55addd3e43accbbd_Traceguids);
    }
    v17 = DNS_EVENT_CACHING_SERVER_ONLY;
    Eventlog_LogEvent((__int64)&v17, v15, 0, 0i64, 0i64, 0, 0, 0i64);
LABEL_40:
    if ( v2 )
      return 0i64;
    goto LABEL_41;
  }
  if ( v2 )
  {
    StartLoadingThreads = DsLoad_StartLoadingThreads(v2);
    goto LABEL_40;
  }
LABEL_41:
  if ( v1 > 0 )
  {
    v17 = DNS_EVENT_ZONE_LOAD_COMPLETE;
    Eventlog_LogEvent((__int64)&v17, v15, 0, 0i64, 0i64, StartLoadingThreads, 0, 0i64);
  }
  DnsBL_AutoconfigureBlocklist();
  return 0i64;
}
// 140010EEC: conditional instruction was optimized away because edi.4==0
// 140010DCD: variable 'v9' is possibly undefined
// 140010E35: variable 'v6' is possibly undefined
// 140010E9B: variable 'v15' is possibly undefined
// 140186308: using guessed type __int128 DNS_EVENT_CACHING_SERVER_ONLY;
// 140186D30: using guessed type EVENT_DESCRIPTOR DNS_EVENT_CANNOT_LOAD_TRUST_ANCHORS;
// 140186FB0: using guessed type __int128 DNS_EVENT_ZONE_LOAD_COMPLETE;
// 1401B8C48: using guessed type __int64 g_pTrustAnchorsZone;
// 1401B9140: using guessed type int Microsoft_Windows_DNS_Server_ServiceEnableBits;
// 1401B98F8: using guessed type int dword_1401B98F8;
