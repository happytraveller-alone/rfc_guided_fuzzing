Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 1249
// Total lines: 215

//----- (00000001400A1B70) ----------------------------------------------------
__int64 __fastcall Sock_ResetBoundSocketsToMatchIpArray(__int64 a1, __int64 a2, __int64 a3, __int16 a4)
{
  __int64 v4; // rbx
  int v6; // ebp
  unsigned int v7; // esi
  unsigned int LastError; // r14d
  CDnsClientSubnetRecordsTrie *v9; // rdx
  unsigned __int64 v10; // rcx
  struct in_addr *v11; // rdi
  const char *v12; // rax
  const char *v13; // rax
  const char *v14; // rax
  int i; // esi
  int v16; // r15d
  int v17; // edi
  __int64 v18; // rbx
  __int64 *v19; // r9
  int v20; // eax
  __int64 v21; // rdx
  __int64 v22; // r8
  CDnsClientSubnetRecordsTrie *v23; // rcx
  void *v25; // r10
  u_long v26; // eax
  int v27; // ebx
  struct sockaddr name; // [rsp+40h] [rbp-88h] BYREF
  __int128 v29; // [rsp+80h] [rbp-48h] BYREF

  v4 = g_BoundAddrs;
  v6 = a2;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x2000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_qddHd(*((_QWORD *)WPP_GLOBAL_Control + 7), a2, a3, g_BoundAddrs, *(_DWORD *)(g_BoundAddrs + 4), a2);
  }
  v7 = 0;
  LastError = Sock_CloseSocketsListeningOnUnusedAddrs(v4, v6);
  if ( *(_DWORD *)(v4 + 4) )
  {
    v9 = WPP_GLOBAL_Control;
    do
    {
      v10 = (unsigned __int64)v7 << 6;
      v11 = (struct in_addr *)(v10 + v4 + 32);
      if ( v9 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)v9 + 17) & 0x2000) != 0
        && *((_BYTE *)v9 + 65) >= 4u )
      {
        v12 = DnsAddr_Ntoa((struct in_addr *)(v10 + v4 + 32));
        WPP_SF_Ds(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x61u,
          (__int64)&WPP_0e6d7f56a09830e1f84833a99c0e37ce_Traceguids,
          v6,
          (__int64)v12);
      }
      if ( sockFindDnsSocketForIpAddr(v11, v6) )
      {
        v9 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x2000) == 0
          || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
        {
          goto LABEL_23;
        }
        v13 = DnsAddr_Ntoa(v11);
        WPP_SF_Ds(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x62u,
          (__int64)&WPP_0e6d7f56a09830e1f84833a99c0e37ce_Traceguids,
          v6,
          (__int64)v13);
      }
      else
      {
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x2000) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          v14 = DnsAddr_Ntoa(v11);
          WPP_SF_Ds(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x63u,
            (__int64)&WPP_0e6d7f56a09830e1f84833a99c0e37ce_Traceguids,
            v6,
            (__int64)v14);
        }
        if ( !Sock_CreateSocket(v6, (struct sockaddr *)v11, a4, 0i64) )
          LastError = GetLastError();
      }
      v9 = WPP_GLOBAL_Control;
LABEL_23:
      ++v7;
    }
    while ( v7 < *(_DWORD *)(v4 + 4) );
  }
  for ( i = 0; i < 2; ++i )
  {
    v16 = 0;
    v17 = i != 0 ? 23 : 2;
    EnterCriticalSection(&g_SocketListCs);
    v18 = g_SocketList;
    v19 = &g_SocketList;
    while ( (__int64 *)v18 != v19 )
    {
      if ( *(_DWORD *)(v18 + 96) == v6 && *(_WORD *)(v18 + 34) == 13568 )
      {
        LOBYTE(v20) = DnsAddr_IsLoopback((_DWORD *)(v18 + 32), v17);
        if ( v20 )
          goto LABEL_32;
      }
      v18 = *(_QWORD *)v18;
    }
    v18 = 0i64;
LABEL_32:
    LeaveCriticalSection(&g_SocketListCs);
    if ( !v18 )
    {
      v23 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
        goto LABEL_58;
      if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x2000) != 0 && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_Dd(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x20u,
          (__int64)&WPP_0e6d7f56a09830e1f84833a99c0e37ce_Traceguids,
          v17);
        goto LABEL_41;
      }
LABEL_54:
      if ( v23 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)v23 + 17) & 0x2000) != 0
        && *((_BYTE *)v23 + 65) >= 4u )
      {
        WPP_SF_D(*((_QWORD *)v23 + 7), 0x65u, (__int64)&WPP_0e6d7f56a09830e1f84833a99c0e37ce_Traceguids, v17);
      }
LABEL_58:
      v25 = g_ServerAddrs;
      if ( (i != 0 ? 0x15 : 0) != 21 || (unsigned int)DnsAddrArray_GetFamilyCount((__int64)g_ServerAddrs, 23) )
      {
        if ( (i != 0 ? 0x15 : 0) != 0 )
          goto LABEL_64;
        if ( (unsigned int)DnsAddrArray_GetFamilyCount((__int64)v25, 2) )
        {
LABEL_63:
          v26 = ntohl(0x7F000001u);
          DnsAddr_BuildFromIp4((struct in_addr *)&name, (struct in_addr)v26, 0x3500u);
LABEL_65:
          if ( Sock_CreateSocket(v6, &name, a4 | (unsigned __int16)(v16 != 0 ? 0x80 : 0), 0i64) )
            goto LABEL_47;
          v27 = GetLastError();
          v23 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x2000) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            WPP_SF_D(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x66u,
              (__int64)&WPP_0e6d7f56a09830e1f84833a99c0e37ce_Traceguids,
              v27);
            v23 = WPP_GLOBAL_Control;
          }
          if ( !v16 )
            LastError = v27;
          continue;
        }
      }
      v16 = 1;
      if ( (i != 0 ? 0x15 : 0) == 0 )
        goto LABEL_63;
LABEL_64:
      *(_QWORD *)&v29 = 0i64;
      *((_QWORD *)&v29 + 1) = 0x100000000000000i64;
      DnsAddr_BuildFromIp6((char *)&name, &v29, v22, 0x3500u);
      goto LABEL_65;
    }
    v23 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x2000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_dddq(*((_QWORD *)WPP_GLOBAL_Control + 7), v21, v22, v17);
LABEL_41:
      v23 = WPP_GLOBAL_Control;
    }
    if ( !v18 )
      goto LABEL_54;
    if ( v23 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)v23 + 17) & 0x2000) != 0
      && *((_BYTE *)v23 + 65) >= 4u )
    {
      WPP_SF_Dd(*((_QWORD *)v23 + 7), 0x64u, (__int64)&WPP_0e6d7f56a09830e1f84833a99c0e37ce_Traceguids, v6);
LABEL_47:
      v23 = WPP_GLOBAL_Control;
      continue;
    }
  }
  if ( v23 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)v23 + 17) & 0x2000) != 0
    && *((_BYTE *)v23 + 65) >= 4u )
  {
    WPP_SF_D(*((_QWORD *)v23 + 7), 0x67u, (__int64)&WPP_0e6d7f56a09830e1f84833a99c0e37ce_Traceguids, LastError);
  }
  return LastError;
}
// 1400A1F88: conditional instruction was optimized away because edi.4==17
// 1400A1D96: variable 'v20' is possibly undefined
// 1400A1D9E: variable 'v19' is possibly undefined
// 1400A1DF1: variable 'v21' is possibly undefined
// 1400A1DF1: variable 'v22' is possibly undefined
// 1400A1F4D: variable 'v25' is possibly undefined
// 1401C87F0: using guessed type __int64 g_SocketList;
