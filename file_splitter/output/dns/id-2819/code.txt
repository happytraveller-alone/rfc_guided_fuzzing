Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 2819
// Total lines: 263

//----- (000000014014C770) ----------------------------------------------------
int DnsRRL_Thread()
{
  int v0; // esi
  HANDLE EventW; // rcx
  int v2; // eax
  CDnsClientSubnetRecordsTrie *v3; // rcx
  unsigned __int16 v4; // dx
  int v5; // ebp
  CDnsRRLManager *v6; // rcx
  int v7; // eax
  int v8; // eax
  CDnsRRLManager *v9; // rcx
  int v10; // eax
  CDnsRRLManager *v11; // rcx
  int v12; // ebp
  int FreeListSize; // eax
  CDnsRRLManager *v14; // rcx
  int v15; // eax
  CDnsClientSubnetRecordsTrie *v16; // rcx
  _QWORD *v18; // rcx
  int LastError; // eax
  int v20; // eax
  HANDLE Handles; // [rsp+30h] [rbp-38h] BYREF
  HANDLE v22; // [rsp+38h] [rbp-30h]
  HANDLE hEvent; // [rsp+40h] [rbp-28h]

  v0 = 0;
  hDnsRRLDisableEvent = CreateEventW(0i64, 1, 0, 0i64);
  EventW = CreateEventW(0i64, 1, 0, 0i64);
  hDnsRRLLRUEvent = EventW;
  if ( !hDnsRRLDisableEvent || !EventW )
  {
    LastError = GetLastError();
    v0 = LastError;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 1) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_D(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0xCu,
        (__int64)&WPP_fb17dad7faab38b20f3316f2d4e4b278_Traceguids,
        LastError);
    }
    if ( SetEvent(hDnsInitRRLEvent)
      || (v2 = GetLastError(),
          v0 = v2,
          v3 = WPP_GLOBAL_Control,
          WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control)
      || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
    {
LABEL_83:
      if ( !SetEvent(hDnsRRLDisableComplete) )
      {
        v20 = GetLastError();
        v0 = v20;
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
        {
          WPP_SF_D(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x1Bu,
            (__int64)&WPP_fb17dad7faab38b20f3316f2d4e4b278_Traceguids,
            v20);
        }
      }
      return v0;
    }
    v4 = 26;
LABEL_82:
    WPP_SF_D(*((_QWORD *)v3 + 7), v4, (__int64)&WPP_fb17dad7faab38b20f3316f2d4e4b278_Traceguids, v2);
    goto LABEL_83;
  }
  Handles = hDnsRRLDisableEvent;
  hEvent = EventW;
  v22 = hDnsShutdownEvent;
  gDnsRRLInitStatus = 1;
  if ( !SetEvent(hDnsInitRRLEvent) )
  {
    v2 = GetLastError();
    v0 = v2;
    v3 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
    {
      goto LABEL_83;
    }
    v4 = 13;
    goto LABEL_82;
  }
  v5 = WaitForMultipleObjects(3u, &Handles, 0, 1000 * *(_DWORD *)&gTimeForLazyLRU);
  if ( v5 == -1 )
    return GetLastError();
  while ( v5 )
  {
    switch ( v5 )
    {
      case 1:
        goto LABEL_55;
      case 2:
        v11 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800000) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x11u, (__int64)&WPP_fb17dad7faab38b20f3316f2d4e4b278_Traceguids);
        }
        v12 = CDnsRRLManager::ApplyAggressiveLRUOnHashTable(v11);
        if ( v12 )
        {
          CDnsRRLManager::ResetFreeListAllocationTrigger(g_DnsRRLManager);
          FreeListSize = CDnsRRLManager::GetFreeListSize(g_DnsRRLManager);
          v14 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800000) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            WPP_SF_D(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x12u,
              (__int64)&WPP_fb17dad7faab38b20f3316f2d4e4b278_Traceguids,
              FreeListSize);
          }
          v15 = CDnsRRLManager::ResetFreeListSize(v14);
          v12 = v15;
          v16 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
          {
            if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800000) != 0 && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
            {
              WPP_SF_D(
                *((_QWORD *)WPP_GLOBAL_Control + 7),
                0x13u,
                (__int64)&WPP_fb17dad7faab38b20f3316f2d4e4b278_Traceguids,
                v15);
              goto LABEL_42;
            }
LABEL_43:
            if ( v16 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              && (*((_DWORD *)v16 + 17) & 0x800000) != 0
              && *((_BYTE *)v16 + 65) >= 4u )
            {
              WPP_SF_D(*((_QWORD *)v16 + 7), 0x14u, (__int64)&WPP_fb17dad7faab38b20f3316f2d4e4b278_Traceguids, v12);
            }
          }
          if ( !ResetEvent(hEvent)
            && WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
          {
            GetLastError();
            WPP_SF_Dd(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x15u,
              (__int64)&WPP_fb17dad7faab38b20f3316f2d4e4b278_Traceguids,
              2);
          }
          break;
        }
LABEL_42:
        v16 = WPP_GLOBAL_Control;
        goto LABEL_43;
      case 258:
        v6 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800000) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x16u, (__int64)&WPP_fb17dad7faab38b20f3316f2d4e4b278_Traceguids);
        }
        v7 = CDnsRRLManager::ApplyLazyLRUOnHashTable(v6);
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800000) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          WPP_SF_D(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x17u,
            (__int64)&WPP_fb17dad7faab38b20f3316f2d4e4b278_Traceguids,
            v7);
        }
        v8 = CDnsRRLManager::GetFreeListSize(g_DnsRRLManager);
        v9 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800000) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          WPP_SF_D(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x18u,
            (__int64)&WPP_fb17dad7faab38b20f3316f2d4e4b278_Traceguids,
            v8);
        }
        v10 = CDnsRRLManager::ResetFreeListSize(v9);
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800000) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          WPP_SF_D(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x19u,
            (__int64)&WPP_fb17dad7faab38b20f3316f2d4e4b278_Traceguids,
            v10);
        }
        break;
    }
    v5 = WaitForMultipleObjects(3u, &Handles, 0, 1000 * *(_DWORD *)&gTimeForLazyLRU);
    if ( v5 == -1 )
      return GetLastError();
  }
  gDnsRRLInitStatus = 0;
LABEL_55:
  v18 = Mem_AllocZero(8ui64, 0i64, "ds\\dns\\server\\rrl\\rrlutil.cpp", 162);
  if ( v18 )
  {
    *v18 = g_DnsRRLManager;
    Timeout_FreeWithFunctionEx(
      (__int64)v18,
      (__int64)DnsRRLFreeMemory,
      (__int64)"ds\\dns\\server\\rrl\\rrlutil.cpp",
      174);
  }
  else
  {
    v0 = 14;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      WPP_SF_D(*((_QWORD *)WPP_GLOBAL_Control + 7), 0xEu, (__int64)&WPP_fb17dad7faab38b20f3316f2d4e4b278_Traceguids, 14);
    }
  }
  if ( !v5 )
  {
    if ( !ResetEvent(Handles)
      && WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      GetLastError();
      WPP_SF_Dd(*((_QWORD *)WPP_GLOBAL_Control + 7), 0xFu, (__int64)&WPP_fb17dad7faab38b20f3316f2d4e4b278_Traceguids, 0);
    }
    goto LABEL_83;
  }
  if ( !ResetEvent(v22)
    && WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
  {
    GetLastError();
    WPP_SF_Dd(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x10u, (__int64)&WPP_fb17dad7faab38b20f3316f2d4e4b278_Traceguids, v5);
  }
  return 0;
}
// 14014C8E7: variable 'v6' is possibly undefined
// 14014C950: variable 'v9' is possibly undefined
// 14014C9BB: variable 'v11' is possibly undefined
// 14014CA0A: variable 'v14' is possibly undefined
// 1401B9254: using guessed type int gDnsRRLInitStatus;
