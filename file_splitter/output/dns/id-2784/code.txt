Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 2784
// Total lines: 218

//----- (0000000140148434) ----------------------------------------------------
__int64 __fastcall CDnsPolicyOrder::RemovePolicy(CDnsPolicyOrder *this, struct CDnsPolicy *a2)
{
  int v4; // esi
  __int64 v5; // rcx
  unsigned int v6; // ebx
  _QWORD *ZoneName; // rdi
  __int64 PolicyName; // rax
  bool v9; // cf
  __int64 v10; // rax
  __int64 v11; // rbx
  __int64 i; // rax
  const void ***j; // rdi
  _QWORD *v14; // r15
  __int64 v15; // rax
  _WORD *v16; // rcx
  unsigned __int64 v17; // r9
  unsigned __int64 v18; // r8
  unsigned __int64 v19; // rdx
  int v20; // eax
  __int64 v21; // rcx
  int v22; // eax
  bool v23; // r15
  __int64 v24; // rcx
  __int64 v25; // rcx
  __int64 v26; // rax
  const WCHAR *v27; // r15
  __int64 v28; // rax
  int updated; // r15d
  __int64 v30; // rax
  void *v32[3]; // [rsp+48h] [rbp-39h] BYREF
  unsigned __int64 v33; // [rsp+60h] [rbp-21h]
  void *v34[2]; // [rsp+70h] [rbp-11h] BYREF
  __int64 v35; // [rsp+80h] [rbp-1h]
  unsigned __int64 v36; // [rsp+88h] [rbp+7h]

  v4 = 0;
  v5 = *((_QWORD *)a2 + 18);
  if ( v5 )
  {
    v6 = Policy_AcquireWriteLock((__int64 *)(v5 + 296), (unsigned int)a2);
    if ( v6 )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        ZoneName = (_QWORD *)CDnsPolicy::GetZoneName((__int64)a2, (__int64)v32);
        PolicyName = CDnsPolicy::GetPolicyName((const void **)a2, (__int64)v34);
        LOBYTE(v4) = 3;
        if ( ZoneName[3] >= 0x10ui64 )
          ZoneName = (_QWORD *)*ZoneName;
        if ( *(_QWORD *)(PolicyName + 24) >= 8ui64 )
          PolicyName = *(_QWORD *)PolicyName;
        WPP_SF_Ssd(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x66u,
          (__int64)&WPP_42dbba61d26d3062f1ad4e084cdc81fe_Traceguids,
          (const unsigned __int16 *)PolicyName,
          (__int64)ZoneName);
      }
      if ( (v4 & 2) != 0 )
      {
        LOBYTE(v4) = v4 & 0xFD;
        if ( v36 >= 8 )
          operator delete(v34[0]);
        v36 = 7i64;
        v35 = 0i64;
        LOWORD(v34[0]) = 0;
      }
      if ( (v4 & 1) != 0 )
      {
        v9 = v33 < 0x10;
        goto LABEL_17;
      }
      return v6;
    }
LABEL_28:
    v11 = *(_QWORD *)this + 8 * (*((unsigned int *)a2 + 26) - 1i64);
    memmove((void *)v11, (const void *)(v11 + 8), (*((_QWORD *)this + 1) - (v11 + 8)) & 0xFFFFFFFFFFFFFFF8ui64);
    *((_QWORD *)this + 1) -= 8i64;
    for ( i = v11; i != *((_QWORD *)this + 1); i += 8i64 )
      --*(_DWORD *)(*(_QWORD *)i + 104i64);
    for ( j = (const void ***)*((_QWORD *)this + 4); j != *((const void ****)this + 5); ++j )
    {
      v14 = (_QWORD *)CDnsPolicy::GetPolicyName((const void **)a2, (__int64)v32);
      v15 = CDnsPolicy::GetPolicyName(*j, (__int64)v34);
      v16 = (_WORD *)v15;
      v17 = v14[2];
      if ( v14[3] >= 8ui64 )
        v14 = (_QWORD *)*v14;
      v18 = *(_QWORD *)(v15 + 16);
      if ( *(_QWORD *)(v15 + 24) >= 8ui64 )
        v16 = *(_WORD **)v15;
      v19 = v17;
      if ( v18 < v17 )
        v19 = *(_QWORD *)(v15 + 16);
      if ( v19 )
      {
        while ( *v16 == *(_WORD *)v14 )
        {
          ++v16;
          v14 = (_QWORD *)((char *)v14 + 2);
          if ( !--v19 )
            goto LABEL_42;
        }
        v20 = *v16 < *(_WORD *)v14 ? -1 : 1;
      }
      else
      {
LABEL_42:
        v20 = 0;
      }
      v21 = v20;
      v22 = v18 != v17;
      if ( v18 < v17 )
        v22 = -1;
      if ( v21 )
        v22 = v21;
      v23 = v22 == 0;
      if ( v36 >= 8 )
        operator delete(v34[0]);
      v36 = 7i64;
      v35 = 0i64;
      LOWORD(v34[0]) = 0;
      if ( v33 >= 8 )
        operator delete(v32[0]);
      if ( v23 )
      {
        memmove(j, j + 1, (*((_QWORD *)this + 5) - (_QWORD)(j + 1)) & 0xFFFFFFFFFFFFFFF8ui64);
        *((_QWORD *)this + 5) -= 8i64;
        break;
      }
    }
    v24 = *((_QWORD *)a2 + 18);
    if ( v24 )
      v25 = *(_QWORD *)(v24 + 296);
    else
      v25 = g_hServerLevelNegativePolicyLock;
    Lock_ReleaseWrite(v25);
    for ( ; v11 != *((_QWORD *)this + 1); v11 += 8i64 )
    {
      v26 = *(_QWORD *)(*(_QWORD *)v11 + 144i64);
      if ( v26 )
      {
        if ( *(_DWORD *)(v26 + 372) )
          v27 = *(const WCHAR **)(v26 + 24);
        else
          v27 = L"..Cache";
      }
      else
      {
        v27 = 0i64;
      }
      v28 = CDnsPolicy::GetPolicyName(*(const void ***)v11, (__int64)v32);
      if ( *(_QWORD *)(v28 + 24) >= 8ui64 )
        v28 = *(_QWORD *)v28;
      updated = UpdateProcessingOrderInRegistry(
                  v27,
                  (const unsigned __int16 *)v28,
                  *(_DWORD *)(*(_QWORD *)v11 + 84i64),
                  *(_DWORD *)(*(_QWORD *)v11 + 104i64));
      if ( v33 >= 8 )
        operator delete(v32[0]);
      if ( updated )
      {
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
        {
          v30 = CDnsPolicy::GetPolicyName(*(const void ***)v11, (__int64)v32);
          v4 |= 8u;
          if ( *(_QWORD *)(v30 + 24) >= 8ui64 )
            v30 = *(_QWORD *)v30;
          WPP_SF_SD(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x68u,
            (__int64)&WPP_42dbba61d26d3062f1ad4e084cdc81fe_Traceguids,
            (const unsigned __int16 *)v30);
        }
        if ( (v4 & 8) != 0 )
        {
          v4 &= ~8u;
          if ( v33 >= 8 )
            operator delete(v32[0]);
        }
      }
    }
    return 0;
  }
  v6 = Policy_AcquireWriteLock(&g_hServerLevelNegativePolicyLock, (unsigned int)a2);
  if ( !v6 )
    goto LABEL_28;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
  {
    v10 = CDnsPolicy::GetPolicyName((const void **)a2, (__int64)v32);
    LOBYTE(v4) = 4;
    if ( *(_QWORD *)(v10 + 24) >= 8ui64 )
      v10 = *(_QWORD *)v10;
    WPP_SF_SD(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x67u,
      (__int64)&WPP_42dbba61d26d3062f1ad4e084cdc81fe_Traceguids,
      (const unsigned __int16 *)v10);
  }
  if ( (v4 & 4) != 0 )
  {
    v9 = v33 < 8;
LABEL_17:
    if ( !v9 )
      operator delete(v32[0]);
  }
  return v6;
}
// 140184CA8: using guessed type void __stdcall operator delete(void *);
// 1401B91C8: using guessed type __int64 g_hServerLevelNegativePolicyLock;
