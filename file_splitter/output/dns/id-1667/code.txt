Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 1667
// Total lines: 229

//----- (00000001400D3CA0) ----------------------------------------------------
__int64 __fastcall Rpc_ResetZoneAllowAutoNS(__int64 a1, __int64 a2, __int64 a3, __int64 a4, int a5, unsigned int *Src)
{
  __int64 v6; // rsi
  __int64 v8; // rbp
  int v9; // r15d
  int v10; // r14d
  __int64 v11; // rdx
  __int64 v12; // r8
  int v13; // r9d
  unsigned int v14; // edi
  int v15; // ecx
  unsigned int *v16; // rax
  unsigned int v17; // eax
  __int64 v18; // rcx
  CDnsClientSubnetRecordsTrie *v19; // rcx
  unsigned __int16 v20; // dx
  int v21; // r9d
  int v22; // r9d
  _BYTE *Ptr; // rax
  int updated; // r9d
  CDnsClientSubnetRecordsTrie *v25; // rcx
  unsigned __int16 v26; // dx
  int v27; // r9d
  char v29[40]; // [rsp+30h] [rbp-58h] BYREF
  int v30; // [rsp+58h] [rbp-30h]

  v6 = 0i64;
  v8 = 0i64;
  v9 = 0;
  v10 = 1;
  memset_0(v29, 0, 0x40ui64);
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_s(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x51u,
      (__int64)&WPP_5efa35e0870730ffd13051b9da022308_Traceguids,
      *(const char **)(a3 + 16));
  }
  if ( a5 == 4 || a5 == 34 )
  {
    if ( *(_DWORD *)(a3 + 372) != 1 || (v15 = *(_DWORD *)(a3 + 388), (v15 & 1) == 0) )
    {
      v14 = 9611;
      goto LABEL_63;
    }
    if ( dword_1401B9750 || g_fDsReadOnlyDcMode || (*(_BYTE *)(a3 + 1160) & 0x40) != 0 )
    {
      v14 = 9569;
      goto LABEL_63;
    }
    if ( (v15 & 6) != 0 )
    {
      v14 = 9568;
      goto LABEL_63;
    }
    if ( Src )
    {
      v16 = a5 == 4
          ? DnsAddrArray_CreateFromIp4Array(Src, v11, v12, v13)
          : DnsAddrArray_CopyAndExpand(Src, 0i64, 0i64, v13);
      v6 = (__int64)v16;
      if ( !v16 )
      {
        v14 = 14;
        goto LABEL_63;
      }
    }
    v17 = Zone_LockForWriteEx(a3, 1, 0x4E20u, (__int64)"ds\\dns\\server\\server\\zonerpc.c", 83);
    v14 = v17;
    if ( v17 )
    {
      v19 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x10) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
      {
LABEL_58:
        if ( v14 )
          goto LABEL_60;
        goto LABEL_59;
      }
      v20 = 82;
      v21 = v17;
LABEL_57:
      WPP_SF_Ds(
        *((_QWORD *)v19 + 7),
        v20,
        (__int64)&WPP_5efa35e0870730ffd13051b9da022308_Traceguids,
        v21,
        *(_QWORD *)(a3 + 16));
      goto LABEL_58;
    }
    v9 = 1;
    Timeout_FreeAndReplaceZoneDataEx(
      v18,
      (__int64 *)(a3 + 1032),
      v6,
      (__int64)DnsAddrArray_Free,
      (__int64)"ds\\dns\\server\\server\\zonerpc.c",
      4705);
    Zone_SetAutoCreateLocalNS(a3);
    Ds_WriteZoneProperties(0i64, a3);
    v22 = *(_DWORD *)(a3 + 528);
    v30 |= 4u;
    Ptr = RR_CreatePtr(0i64, Str, 2u, v22, 0x21u);
    v8 = (__int64)Ptr;
    if ( Ptr )
    {
      if ( (unsigned int)RR_IsRecordInRRList(*(_QWORD *)(*(_QWORD *)(a3 + 40) + 64i64), (__int64)Ptr) )
      {
        if ( (*(_BYTE *)(a3 + 396) & 0x40) == 0 )
          goto LABEL_59;
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          WPP_SF_s(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x53u,
            (__int64)&WPP_5efa35e0870730ffd13051b9da022308_Traceguids,
            *(const char **)(a3 + 16));
        }
        Up_CreateAppendUpdate((__int64)v29, *(_QWORD *)(a3 + 40), 0i64, 0, v8);
      }
      else
      {
        if ( (*(_BYTE *)(a3 + 396) & 0x40) != 0 )
          goto LABEL_59;
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          WPP_SF_s(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x54u,
            (__int64)&WPP_5efa35e0870730ffd13051b9da022308_Traceguids,
            *(const char **)(a3 + 16));
        }
        Up_CreateAppendUpdate((__int64)v29, *(_QWORD *)(a3 + 40), v8, 0, 0i64);
      }
      v8 = 0i64;
      updated = Up_PrepareUpdateListForExecution(a3, 0i64, (__int64)v29, 0);
      if ( updated )
      {
        v25 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) == 0
          || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
        {
          goto LABEL_59;
        }
        v26 = 85;
        goto LABEL_46;
      }
      updated = Up_ApplyUpdatesToDatabase((__int64)v29, a3, 4i64, 0);
      if ( updated )
      {
        v25 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) == 0
          || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
        {
          goto LABEL_59;
        }
        v26 = 86;
LABEL_46:
        WPP_SF_Ds(
          *((_QWORD *)v25 + 7),
          v26,
          (__int64)&WPP_5efa35e0870730ffd13051b9da022308_Traceguids,
          updated,
          *(_QWORD *)(a3 + 16));
        goto LABEL_59;
      }
      Up_ApplyTempUpdatesToDatabase(a3, (__int64)v29);
      Up_CompleteZoneUpdate(a3, (__int64)v29, 0x80000i64, v27);
      v10 = 0;
      v21 = Ds_WriteNodeToDs(0i64, *(_QWORD *)(a3 + 40), 0xFFu, 2, a3, 0);
      if ( v21 )
      {
        v19 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          v20 = 87;
          goto LABEL_57;
        }
      }
    }
LABEL_59:
    LogAddrArrayProperty(0x202u, a3, "AllowNSRecordsAutoCreation", *(_QWORD *)(a3 + 1032));
LABEL_60:
    if ( !v10 )
      goto LABEL_64;
    goto LABEL_63;
  }
  v14 = 87;
LABEL_63:
  Up_FreeUpdatesInUpdateList((__int64)v29);
LABEL_64:
  if ( v9 )
    Zone_UnlockAfterWriteEx(a3, 1, (__int64)"ds\\dns\\server\\server\\zonerpc.c", 11);
  RR_Free(v8);
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_Ds(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x58u,
      (__int64)&WPP_5efa35e0870730ffd13051b9da022308_Traceguids,
      v14,
      *(_QWORD *)(a3 + 16));
  }
  return v14;
}
// 1400D3D8B: variable 'v11' is possibly undefined
// 1400D3D8B: variable 'v12' is possibly undefined
// 1400D3D8B: variable 'v13' is possibly undefined
// 1400D3E31: variable 'v18' is possibly undefined
// 1400D400C: variable 'v27' is possibly undefined
// 1401560E0: using guessed type __int64 __fastcall DnsAddrArray_Free();
// 1401B8C94: using guessed type int g_fDsReadOnlyDcMode;
// 1401B9750: using guessed type int dword_1401B9750;
