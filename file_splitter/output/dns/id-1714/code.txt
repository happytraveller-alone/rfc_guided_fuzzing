Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 1714
// Total lines: 135

//----- (00000001400DC090) ----------------------------------------------------
__int64 __fastcall startTcpXfr(__int64 a1, __int64 a2, int a3, __int64 a4)
{
  unsigned int v5; // r15d
  unsigned int v8; // esi
  CDnsClientSubnetRecordsTrie *v9; // rbx
  unsigned int v10; // r14d
  unsigned int v11; // ecx
  const char *v12; // rbx
  const char *v13; // rax
  __int64 v14; // rdx
  __int64 v15; // r8
  __int64 v16; // rdx
  HANDLE v17; // r9
  const char *v18; // rax
  int v20; // [rsp+50h] [rbp-78h] BYREF
  __int128 v21; // [rsp+60h] [rbp-68h] BYREF
  unsigned __int16 *v22[3]; // [rsp+70h] [rbp-58h] BYREF

  v20 = a3;
  v5 = a3;
  v8 = 87;
  v9 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x40) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_s(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x69u,
      (__int64)&WPP_8f5c62d9956434feed7ea8f9d17b2299_Traceguids,
      *(const char **)(a1 + 16));
    v9 = WPP_GLOBAL_Control;
  }
  if ( !a2 )
    goto LABEL_37;
  v10 = *(_DWORD *)(a1 + 1540);
  if ( v10 )
  {
    if ( (unsigned int)DnsAddr_IsEqual((_WORD *)(a1 + 1312), (_WORD *)a2, 3) )
    {
      v11 = 10 * (v10 + 6);
      if ( v11 > 0xA )
        v11 = 10;
    }
    else
    {
      v11 = 0;
      if ( v10 > 5 )
        v11 = 60;
    }
    if ( *(_DWORD *)(a1 + 1536) + v11 > dword_1401B9714 )
    {
      if ( v9 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)v9 + 68) & 0x40) != 0
        && *((_BYTE *)v9 + 65) >= 4u )
      {
        v12 = DnsAddr_Ntoa((struct in_addr *)(a1 + 1312));
        v13 = DnsAddr_Ntoa((struct in_addr *)a2);
        WPP_SF_sssdddd(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          v14,
          v15,
          *(const char **)(a1 + 16),
          (__int64)v13,
          (__int64)v12);
      }
LABEL_37:
      Zone_UnlockAfterWriteEx(a1, 256, (__int64)"ds\\dns\\server\\server\\zonesec.c", 7);
      return v8;
    }
    v5 = v20;
  }
  *(_OWORD *)(a1 + 1312) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 1328) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 1344) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 1360) = *(_OWORD *)(a2 + 48);
  memset_0((void *)(a1 + 1376), 0, 0x40ui64);
  *(_DWORD *)(a1 + 1408) = 32;
  if ( a4
    && !(unsigned int)Sock_GetAssociatedIpAddr(a4, (_OWORD *)(a1 + 1376))
    && WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x40) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_D(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x6Bu, (__int64)&WPP_8f5c62d9956434feed7ea8f9d17b2299_Traceguids, a4);
  }
  if ( !*(_DWORD *)(a1 + 1540) )
  {
    v22[0] = (unsigned __int16 *)v5;
    v22[1] = *(unsigned __int16 **)(a1 + 24);
    v22[2] = (unsigned __int16 *)a2;
    LOWORD(v20) = 260;
    BYTE2(v20) = 5;
    v21 = DNS_EVENT_ZONE_TRANSFER_IN_PROGRESS;
    Eventlog_LogEvent((__int64)&v21, v16, 3u, v22, (unsigned __int8 *)&v20, 0, 0, 0i64);
  }
  Zone_TransferWriteLockEx(a1);
  v17 = Thread_Create("Zone Transfer Receive", Xfr_ReceiveThread, a1, 0);
  if ( !v17 )
  {
    v8 = 565;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x40) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      v18 = DnsAddr_Ntoa((struct in_addr *)a2);
      WPP_SF_ss(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x6Du,
        (__int64)&WPP_8f5c62d9956434feed7ea8f9d17b2299_Traceguids,
        *(const char **)(a1 + 16),
        (__int64)v18);
    }
    Zone_AssumeWriteLockEx(a1);
    goto LABEL_37;
  }
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x40) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_qs(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x6Cu,
      (__int64)&WPP_8f5c62d9956434feed7ea8f9d17b2299_Traceguids,
      v17,
      *(_QWORD *)(a1 + 16));
  }
  return 0;
}
// 1400DC1E0: variable 'v14' is possibly undefined
// 1400DC1E0: variable 'v15' is possibly undefined
// 1400DC2E8: variable 'v16' is possibly undefined
// 140186458: using guessed type __int128 DNS_EVENT_ZONE_TRANSFER_IN_PROGRESS;
// 1401B9714: using guessed type int dword_1401B9714;
