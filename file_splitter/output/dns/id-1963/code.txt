Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 1963
// Total lines: 148

//----- (00000001400F1D0C) ----------------------------------------------------
void __fastcall DnsOls_DeleteCertAndKey(struct _zone_info *a1, struct _dnsskd *a2, unsigned __int16 *Src)
{
  CDnsClientSubnetRecordsTrie *v6; // rcx
  char *v7; // rax
  __int64 v8; // r8
  const wchar_t *v9; // rcx
  void **v10; // rax
  const unsigned __int16 *v11; // r9
  void **v12; // rcx
  void **v13; // rax
  const unsigned __int16 *v14; // r9
  PCCERT_CONTEXT pCertContext; // [rsp+48h] [rbp-E8h] BYREF
  HCERTSTORE hCertStore; // [rsp+50h] [rbp-E0h] BYREF
  const wchar_t *v17; // [rsp+58h] [rbp-D8h] BYREF
  char v18; // [rsp+60h] [rbp-D0h]
  __int64 v19[3]; // [rsp+68h] [rbp-C8h] BYREF
  __int128 v20; // [rsp+80h] [rbp-B0h] BYREF
  __int64 v21; // [rsp+90h] [rbp-A0h]
  __int64 v22; // [rsp+A0h] [rbp-90h]
  void *v23[2]; // [rsp+B0h] [rbp-80h] BYREF
  __int64 v24; // [rsp+C0h] [rbp-70h]
  unsigned __int64 v25; // [rsp+C8h] [rbp-68h]
  void *v26[3]; // [rsp+D8h] [rbp-58h] BYREF
  unsigned __int64 v27; // [rsp+F0h] [rbp-40h]

  v22 = -2i64;
  v6 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
  {
    v7 = Dbg_GuidString((const IID *)((char *)a2 + 8));
    WPP_SF_SSs(*((_QWORD *)WPP_GLOBAL_Control + 7), 0xA6u, v8, Src, (__int64)v7, *((_QWORD *)a1 + 2));
    v6 = WPP_GLOBAL_Control;
  }
  if ( Src )
  {
    if ( *((_DWORD *)a2 + 8) )
    {
      if ( *((_QWORD *)a2 + 3) )
      {
        if ( !_wcsicmp(*((const wchar_t **)a2 + 3), L"Microsoft Software Key Storage Provider") )
          return;
        v6 = WPP_GLOBAL_Control;
      }
      if ( v6 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)v6 + 17) & 0x200000) != 0
        && *((_BYTE *)v6 + 65) >= 5u )
      {
        WPP_SF_SS(
          *((_QWORD *)v6 + 7),
          0xA7u,
          (__int64)&WPP_4a0a7bf065bf32df4bbeec8f9c7ea0c3_Traceguids,
          *((const unsigned __int16 **)a2 + 3),
          (__int64)Src);
      }
      deleteNonCertKey(a1, a2, Src);
    }
    else
    {
      v27 = 7i64;
      v26[2] = 0i64;
      LOWORD(v26[0]) = 0;
      v25 = 7i64;
      v24 = 0i64;
      LOWORD(v23[0]) = 0;
      if ( (unsigned int)crackKeyPointerString((char *)Src, (char *)v26, v23)
        || (v9 = (const wchar_t *)*((_QWORD *)a2 + 3)) != 0i64
        && !_wcsicmp(v9, L"Microsoft Software Key Storage Provider") )
      {
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
        {
          v10 = v23;
          if ( v25 >= 8 )
            v10 = (void **)v23[0];
          v11 = (const unsigned __int16 *)v26;
          if ( v27 >= 8 )
            v11 = (const unsigned __int16 *)v26[0];
          WPP_SF_SS(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0xA8u,
            (__int64)&WPP_4a0a7bf065bf32df4bbeec8f9c7ea0c3_Traceguids,
            v11,
            (__int64)v10);
        }
        v17 = L"MS-DNSSEC";
        v18 = 1;
        hCertStore = 0i64;
        DnsSign::CCertificateStore::OpenStore(&hCertStore, (const struct DnsSign::CertificateStoreSpec *)&v17, 0x4000);
        memset(v19, 0, sizeof(v19));
        v20 = 0i64;
        v21 = 0i64;
        pCertContext = 0i64;
        v12 = v23;
        if ( v25 >= 8 )
          v12 = (void **)v23[0];
        DnsSign::ParseHexIntegerString(v12, (__int64 *)&v20);
        DnsSign::CCertificateStore::SelectSingleCertificate(
          &hCertStore,
          (const struct DnsSign::CertificateStoreSpec *)&v17,
          (const struct DnsSign::CertificateSelectionSpec *)v19,
          &pCertContext);
        DnsSign::CCertificate::DeleteCertificateAndPrivateKey(&pCertContext);
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
        {
          v13 = v23;
          if ( v25 >= 8 )
            v13 = (void **)v23[0];
          v14 = (const unsigned __int16 *)v26;
          if ( v27 >= 8 )
            v14 = (const unsigned __int16 *)v26[0];
          WPP_SF_SS(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0xA9u,
            (__int64)&WPP_4a0a7bf065bf32df4bbeec8f9c7ea0c3_Traceguids,
            v14,
            (__int64)v13);
        }
        if ( pCertContext )
          CertFreeCertificateContext(pCertContext);
        if ( (_QWORD)v20 )
          operator delete((void *)v20);
        if ( hCertStore )
          CertCloseStore(hCertStore, 0);
      }
      else
      {
        deleteNonCertKey(a1, a2, Src);
      }
      if ( v25 >= 8 )
        operator delete(v23[0]);
      v25 = 7i64;
      v24 = 0i64;
      LOWORD(v23[0]) = 0;
      if ( v27 >= 8 )
        operator delete(v26[0]);
    }
  }
}
// 1400F1D0C: could not find valid save-restore pair for rbp
// 1400F1D8E: variable 'v8' is possibly undefined
// 140184CA8: using guessed type void __stdcall operator delete(void *);
// 140192B98: using guessed type wchar_t aMsDnssec[10];
