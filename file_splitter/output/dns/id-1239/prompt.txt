Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 1239
// Total lines: 442

//----- (00000001400A0338) ----------------------------------------------------
char *__fastcall Sock_CreateSocket(int type, struct sockaddr *name, __int16 a3, _QWORD *a4)
{
  struct sockaddr *v5; // rdi
  int v6; // r12d
  int v7; // ebx
  bool v8; // zf
  int sa_family; // ecx
  char *v10; // r14
  int Error; // eax
  __int64 v12; // rdx
  int v13; // r12d
  int v14; // r15d
  __int128 v15; // xmm0
  CDnsClientSubnetRecordsTrie *v16; // rcx
  unsigned __int16 v17; // dx
  int v18; // eax
  char v19; // si
  int v20; // eax
  CDnsClientSubnetRecordsTrie *v21; // rcx
  char v22; // al
  __int64 v23; // r8
  int v24; // ebx
  __int64 v25; // r8
  CDnsClientSubnetRecordsTrie *v26; // rcx
  int v27; // eax
  int v28; // r9d
  __int64 v29; // rcx
  const char *v30; // rax
  int v31; // eax
  unsigned __int16 v32; // r8
  __int64 *v33; // rcx
  __int128 v34; // xmm0
  u_short v35; // ax
  __int64 v36; // rbx
  unsigned int v37; // ecx
  u_short *v38; // rdx
  __int64 v39; // rdi
  __int64 v40; // r9
  __int64 v41; // rdx
  const char *v42; // rax
  __int64 v43; // rdx
  __int64 v44; // r8
  CDnsClientSubnetRecordsTrie *v46; // rax
  int v47; // eax
  struct in_addr *v48; // r12
  const char *v49; // rax
  __int64 v50; // rdx
  __int64 v51; // r8
  __int64 g; // [rsp+20h] [rbp-E0h]
  __int64 ga; // [rsp+20h] [rbp-E0h]
  int dwFlags; // [rsp+28h] [rbp-D8h]
  int lpcbBytesReturned; // [rsp+30h] [rbp-D0h]
  int lpcbBytesReturneda; // [rsp+30h] [rbp-D0h]
  char optval[4]; // [rsp+60h] [rbp-A0h] BYREF
  int v58; // [rsp+64h] [rbp-9Ch]
  struct sockaddr *v59; // [rsp+68h] [rbp-98h] BYREF
  int v60[2]; // [rsp+70h] [rbp-90h] BYREF
  DWORD cbBytesReturned[2]; // [rsp+78h] [rbp-88h] BYREF
  __int64 v62[2]; // [rsp+80h] [rbp-80h] BYREF
  __int64 vInBuffer[2]; // [rsp+90h] [rbp-70h] BYREF
  __int128 v64; // [rsp+A0h] [rbp-60h] BYREF
  struct sockaddr namea; // [rsp+B0h] [rbp-50h] BYREF
  char pszDest[16]; // [rsp+D0h] [rbp-30h] BYREF
  char v67[80]; // [rsp+E0h] [rbp-20h] BYREF

  v62[0] = (__int64)a4;
  v59 = name;
  v58 = type;
  v5 = name;
  v6 = type;
  v7 = 0;
  if ( a4 )
    *a4 = 0i64;
  v8 = type == 2;
  sa_family = name->sa_family;
  if ( v8 )
  {
    v10 = (char *)WSASocketW(sa_family, 2, 17, 0i64, 0, 1u);
    if ( v10 == (char *)-1i64 )
    {
      Error = WSAGetLastError();
      v13 = Error;
      v14 = a3 & 0x80;
      if ( (a3 & 0x80) != 0 )
      {
LABEL_91:
        v21 = WPP_GLOBAL_Control;
LABEL_92:
        if ( v21 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)v21 + 17) & 0x2000) != 0
          && *((_BYTE *)v21 + 65) >= 4u )
        {
          ntohs(*(_WORD *)v59->sa_data);
          v42 = DnsAddr_Ntoa((struct in_addr *)v59);
          WPP_SF_dsdddd(*((_QWORD *)WPP_GLOBAL_Control + 7), v43, v44, v58, (__int64)v42);
          v21 = WPP_GLOBAL_Control;
          v5 = v59;
        }
        if ( !v14 )
        {
          v64 = DNS_EVENT_OPEN_SOCKET_FOR_ADDRESS;
          v59 = v5;
          Eventlog_LogEvent((__int64)&v64, v12, 1u, (unsigned __int16 **)&v59, (unsigned __int8 *)5, 0, 0, 0i64);
          v21 = WPP_GLOBAL_Control;
        }
        if ( (unsigned __int64)(v10 - 1) <= 0xFFFFFFFFFFFFFFFDui64 )
        {
          if ( v21 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)v21 + 17) & 0x2000) != 0
            && *((_BYTE *)v21 + 65) >= 4u )
          {
            WPP_SF_D(*((_QWORD *)v21 + 7), 0x4Bu, (__int64)&WPP_0e6d7f56a09830e1f84833a99c0e37ce_Traceguids, (int)v10);
          }
          closesocket((SOCKET)v10);
        }
        WSASetLastError(v13);
        return 0i64;
      }
      v15 = DNS_EVENT_CANNOT_CREATE_UDP_SOCKET;
LABEL_7:
      *(_OWORD *)v62 = v15;
      Eventlog_LogEvent((__int64)v62, v12, 0, 0i64, 0i64, Error, 0, 0i64);
      goto LABEL_91;
    }
    v16 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x2000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
    {
      v17 = 63;
LABEL_19:
      WPP_SF_D(*((_QWORD *)v16 + 7), v17, (__int64)&WPP_0e6d7f56a09830e1f84833a99c0e37ce_Traceguids, (int)v10);
    }
  }
  else
  {
    v10 = (char *)socket(sa_family, v6, 0);
    if ( v10 == (char *)-1i64 )
    {
      Error = WSAGetLastError();
      v13 = Error;
      v14 = a3 & 0x80;
      if ( (a3 & 0x80) != 0 )
        goto LABEL_91;
      v15 = DNS_EVENT_CANNOT_CREATE_TCP_SOCKET;
      goto LABEL_7;
    }
    v16 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x2000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
    {
      v17 = 64;
      goto LABEL_19;
    }
  }
  if ( *(_WORD *)v5->sa_data )
  {
    if ( v6 == 2 && (a3 & 0x20) == 0 && !dword_1401B9988 )
    {
      *(_DWORD *)optval = 1;
      if ( setsockopt((SOCKET)v10, 0xFFFF, -5, optval, 4) == -1 )
      {
        v18 = WSAGetLastError();
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x2000) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          WPP_SF_Dd(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x42u,
            (__int64)&WPP_0e6d7f56a09830e1f84833a99c0e37ce_Traceguids,
            v18);
        }
      }
    }
  }
  vInBuffer[0] = 0i64;
  v19 = 0;
  v60[0] = a3 & 0x100;
  if ( (a3 & 0x100) != 0 && !*(_WORD *)v5->sa_data )
  {
    if ( g_DnsPortExclusionState )
    {
      v19 = 1;
      v20 = Sock_AcquirePortReservation((SOCKET)v10, vInBuffer);
      if ( v20 )
      {
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x2000) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          WPP_SF_Dd(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x43u,
            (__int64)&WPP_0e6d7f56a09830e1f84833a99c0e37ce_Traceguids,
            v20);
        }
      }
    }
  }
  if ( bind((SOCKET)v10, v5, *(_DWORD *)&v5[2].sa_family) )
  {
    while ( 1 )
    {
      v13 = WSAGetLastError();
      DnsAddr_WriteIpString_A(v67, (char *)v5);
      v21 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x2000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        v22 = ntohs(*(_WORD *)v5->sa_data);
        WPP_SF_ddds(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x44u, v23, v13, (char)v10, v22, (__int64)v67);
        v21 = WPP_GLOBAL_Control;
      }
      if ( v7 || v13 != 10048 && v13 != 10013 )
        break;
      *(_DWORD *)optval = 0;
      v24 = setsockopt((SOCKET)v10, 0xFFFF, -5, optval, 4);
      v26 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x2000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        if ( v24 )
        {
          v27 = WSAGetLastError();
          v26 = WPP_GLOBAL_Control;
          v28 = v27;
        }
        else
        {
          v28 = 0;
        }
        v29 = *((_QWORD *)v26 + 7);
        v30 = "failed";
        if ( !v24 )
          v30 = "succeeded";
        WPP_SF_ddds(v29, 0x45u, v25, v28, (char)v10, optval[0], (__int64)v30);
      }
      *(_DWORD *)optval = 1;
      if ( setsockopt((SOCKET)v10, 0xFFFF, 4, optval, 4) )
      {
        v21 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x2000) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          v31 = WSAGetLastError();
          WPP_SF_Ddd(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x47u,
            (__int64)&WPP_0e6d7f56a09830e1f84833a99c0e37ce_Traceguids,
            v31);
          v21 = WPP_GLOBAL_Control;
        }
        break;
      }
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x2000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_D(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x46u,
          (__int64)&WPP_0e6d7f56a09830e1f84833a99c0e37ce_Traceguids,
          (int)v10);
      }
      v7 = 1;
      if ( !bind((SOCKET)v10, v5, *(_DWORD *)&v5[2].sa_family) )
      {
        v6 = v58;
        goto LABEL_61;
      }
    }
    v14 = a3 & 0x80;
    if ( (a3 & 0x80) != 0 )
      goto LABEL_92;
    lpcbBytesReturneda = v14 & lpcbBytesReturned;
    v32 = v14 + 1;
    dwFlags = v13;
    v33 = v62;
    *(_QWORD *)v60 = v67;
    ga = 3i64;
    if ( v58 == 2 )
      v34 = DNS_EVENT_CANNOT_BIND_UDP_SOCKET;
    else
      v34 = DNS_EVENT_CANNOT_BIND_TCP_SOCKET;
    *(_OWORD *)v62 = v34;
    goto LABEL_90;
  }
LABEL_61:
  if ( v19 )
  {
    if ( vInBuffer[0] )
    {
      WSAIoctl((SOCKET)v10, 0x98000065, vInBuffer, 8u, 0i64, 0, cbBytesReturned, 0i64, 0i64);
    }
    else
    {
      *(_DWORD *)optval = 28;
      if ( getsockname((SOCKET)v10, &namea, (int *)optval) != -1 )
      {
        v35 = ntohs(*(u_short *)namea.sa_data);
        v36 = g_DnsPortExclusionState;
        v37 = 0;
        if ( *(_WORD *)(g_DnsPortExclusionState + 6) )
        {
          v38 = (u_short *)(g_DnsPortExclusionState + 10);
          while ( v35 > *v38 )
          {
            ++v37;
            v38 += 4;
            if ( v37 >= *(unsigned __int16 *)(g_DnsPortExclusionState + 6) )
              goto LABEL_83;
          }
          v39 = v37;
          if ( v35 >= *(_WORD *)(g_DnsPortExclusionState + 8i64 * v37 + 8)
            && (*(_BYTE *)(g_DnsPortExclusionState + 8i64 * v37 + 12) & 1) == 0 )
          {
            v40 = *(unsigned __int16 *)(g_DnsPortExclusionState + 8i64 * v37 + 8);
            *(_QWORD *)cbBytesReturned = pszDest;
            LODWORD(g) = *(unsigned __int16 *)(g_DnsPortExclusionState + 8i64 * v37 + 10);
            StringCbPrintfA(pszDest, 0x10ui64, "%hu-%hu", v40, g);
            v64 = DNS_EVENT_BOUND_SOCKET_TO_EXCLUDED_PORT;
            Eventlog_LogEvent(
              (__int64)&v64,
              v41,
              1u,
              (unsigned __int16 **)cbBytesReturned,
              (unsigned __int8 *)3,
              0,
              0,
              0i64);
            *(_DWORD *)(v36 + 8 * v39 + 12) |= 1u;
          }
          v5 = v59;
        }
      }
    }
  }
LABEL_83:
  if ( (a3 & 4) == 0 )
  {
    *(_DWORD *)optval = 1;
    ioctlsocket((SOCKET)v10, -2147195266, (u_long *)optval);
  }
  if ( (a3 & 1) == 0 )
    goto LABEL_114;
  if ( v6 == 1 )
  {
    if ( listen((SOCKET)v10, 20) == -1 )
    {
      *(_QWORD *)v60 = v5;
      v13 = WSAGetLastError();
      Sock_CloseSocket((SOCKET)v10);
      v14 = a3 & 0x80;
      if ( (a3 & 0x80) != 0 )
        goto LABEL_91;
      v32 = v14 + 1;
      lpcbBytesReturneda = v14 & lpcbBytesReturned;
      dwFlags = v13;
      v33 = (__int64 *)&v64;
      ga = 5i64;
      v64 = DNS_EVENT_CANNOT_LISTEN_TCP_SOCKET;
LABEL_90:
      Eventlog_LogEvent(
        (__int64)v33,
        v12,
        v32,
        (unsigned __int16 **)v60,
        (unsigned __int8 *)ga,
        dwFlags,
        lpcbBytesReturneda,
        0i64);
      goto LABEL_91;
    }
    goto LABEL_114;
  }
  if ( !*(_DWORD *)g_UdpRecvBufferSize || !setsockopt((SOCKET)v10, 0xFFFF, 4098, g_UdpRecvBufferSize, 4) )
    goto LABEL_111;
  v46 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x2000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    v47 = WSAGetLastError();
    WPP_SF_Dd(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x48u,
      (__int64)&WPP_0e6d7f56a09830e1f84833a99c0e37ce_Traceguids,
      v47);
LABEL_111:
    v46 = WPP_GLOBAL_Control;
  }
  if ( v6 == 2 )
  {
    *(_DWORD *)optval = -1;
    cbBytesReturned[0] = 4;
    getsockopt((SOCKET)v10, 0xFFFF, 4097, optval, (int *)cbBytesReturned);
    *(_DWORD *)optval = 50000;
    setsockopt((SOCKET)v10, 0xFFFF, 4097, optval, 4);
LABEL_114:
    v46 = WPP_GLOBAL_Control;
  }
  if ( (a3 & 0x10) == 0 )
  {
    Sock_EnlistSocket(v10, v6, (__int64)v5, a3 & 1, v60[0], (_QWORD *)v62[0]);
    v46 = WPP_GLOBAL_Control;
  }
  if ( v46 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)v46 + 17) & 0x2000) != 0
    && *((_BYTE *)v46 + 65) >= 5u )
  {
    v48 = (struct in_addr *)v59;
    ntohs(*(_WORD *)v59->sa_data);
    v49 = DnsAddr_Ntoa(v48);
    WPP_SF_ddsddddd(*((_QWORD *)WPP_GLOBAL_Control + 7), v50, v51, (int)v10, v58, (__int64)v49);
  }
  return v10;
}
// 1400A03FA: variable 'v12' is possibly undefined
// 1400A062A: variable 'v23' is possibly undefined
// 1400A06E6: variable 'v25' is possibly undefined
// 1400A0835: variable 'lpcbBytesReturned' is possibly undefined
// 1400A0910: variable 'g' is possibly undefined
// 1400A0945: variable 'v41' is possibly undefined
// 1400A0A75: variable 'v43' is possibly undefined
// 1400A0A75: variable 'v44' is possibly undefined
// 1400A0CA8: variable 'v50' is possibly undefined
// 1400A0CA8: variable 'v51' is possibly undefined
// 140185F48: using guessed type __int128 DNS_EVENT_CANNOT_LISTEN_TCP_SOCKET;
// 140186198: using guessed type __int128 DNS_EVENT_CANNOT_CREATE_UDP_SOCKET;
// 1401866B8: using guessed type __int128 DNS_EVENT_BOUND_SOCKET_TO_EXCLUDED_PORT;
// 140186C28: using guessed type __int128 DNS_EVENT_CANNOT_BIND_UDP_SOCKET;
// 140186E00: using guessed type __int128 DNS_EVENT_CANNOT_CREATE_TCP_SOCKET;
// 140187648: using guessed type __int128 DNS_EVENT_OPEN_SOCKET_FOR_ADDRESS;
// 140187658: using guessed type __int128 DNS_EVENT_CANNOT_BIND_TCP_SOCKET;
// 1401B9050: using guessed type __int64 g_DnsPortExclusionState;
// 1401B9988: using guessed type int dword_1401B9988;
##############################
Role: Let's assume that you are an advanced reverse engineer and you are reverse engineering a network driver using IDA Pro, and you are also familiar with the RFC documentation. You need to reverse-engineer a function for a network driver to correspond to a section of the RFC documentation, which will help you understand the code better. The driver you're reversing is Schannel.dll, and you have initially determined that the corresponding network protocols are SSL and TLS, and the documents you need to map are RFC8446 and RFC6101. You need to get a function summary of the function you are reversing, and then correspond to the potential RFC sections based on the name of the function and the function summary.
Function Background: The function is reverse engineered from the driver file Schannel.dll on Windows platform. Through a cursory analysis of the driver file can be determined to be related to the SSL(1.3), TLS(3.0) protocol, that is, with RFC8446, RFC6101 strong correlation.

Output Function Summary: Summarizes the function's functionality with several phrases instead of sentences, focuses on covering the function's control flow information, and highlights the protocol function points implemented by the function. Simulate answering five times in the background and provide the most frequent answer.

Retrieve document sections: giving matches for document sections(FunctionMatchRFCResult) that the code may related to. NOTE if the code is only business related(i.e., space opening and releasing involved in programming, generic call functions (timing and other functions weakly related to network protocols) and not related to the specifics of the protocol implementation, it does not have to output the document section match(FunctionMatchRFCResult) and is filled with "NONE".

Retrieve document sections Thinking Chain: The function code is matched with the RFC document section, and the thinking chain is provided to help you solve the problem better:
	1. Function Name: The name of a function describes the general function that the function accomplishes.
	2. Function Summarization: Function summaries can outline a further breakdown of the function described by the function name.
	3. Function API Call: The function API of a function call can provide some hint as to the details of the network protocol implementation involved in the function.
	4. Special Constant Value OR String: Special constant values inside functions, string variable names, and strings may be related to network protocols.
	5. Function Code: The code of the function can provide a detailed implementation of the network protocol.
Generate Function Information Collection with JSON Format:

{
	"FunctionIndex": "(FILL WITH "File count" with less than four bits are indexed with zeros to make up the four bits.)",
	"FunctionName": "(Full Function Code Name)",
	"FunctionSummarization": [
		"(Function Summary Phrase1)",
		"(Function Summary Phrase2)",
		"(...)"
	],
	"FunctionMatchRFCResult": [
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 1)",
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 2)",
		"(...)"
	],
}

ATTENTION: Remember YOU MUST ONLY output the Function Information Collection result.
