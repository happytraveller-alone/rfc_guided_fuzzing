Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 2182
// Total lines: 505

//----- (00000001401133D4) ----------------------------------------------------
void __fastcall DnsTelemetryPolicyInfo(__int64 a1, int a2)
{
  int v2; // esi
  int v3; // ebp
  int v5; // edi
  int v7; // r12d
  __int64 v8; // r14
  int v9; // ecx
  int v10; // ebp
  int v11; // ebp
  int **v12; // r9
  __int64 v13; // r10
  int v14; // r8d
  int v15; // r8d
  int v16; // edi
  int **v17; // r9
  __int64 i; // r10
  int v19; // r8d
  int v20; // r8d
  int v21; // r8d
  int v22; // r8d
  int v23; // r8d
  int v24; // edi
  int v25; // edi
  int **v26; // r9
  __int64 v27; // r10
  int v28; // r8d
  int v29; // r8d
  int v30; // r8d
  int v31; // r8d
  int v32; // r8d

  v2 = *(_DWORD *)(a1 + 8);
  v3 = *(_DWORD *)(a1 + 12);
  v5 = *(_DWORD *)(a1 + 16);
  v7 = *(_DWORD *)(a1 + 20);
  v8 = *(unsigned int *)(a1 + 56);
  if ( v2 == 1 )
    v9 = _stricmp(*(const char **)(a1 + 32), "..Cache");
  else
    v9 = 0;
  if ( g_isRegisteredForUTC != 1 )
    return;
  if ( !v3 )
  {
    if ( v2 )
    {
      if ( v2 == 1 )
      {
        if ( v9 )
        {
          if ( v5 )
          {
            v24 = v5 - 1;
            if ( v24 )
            {
              if ( v24 == 1 )
              {
                if ( a2 )
                  _InterlockedAdd(&dword_1401B9654, 1u);
                else
                  _InterlockedAdd(&dword_1401B9654, 0xFFFFFFFF);
              }
            }
            else if ( a2 )
            {
              _InterlockedAdd(&dword_1401B9658, 1u);
            }
            else
            {
              _InterlockedAdd(&dword_1401B9658, 0xFFFFFFFF);
            }
          }
          else if ( a2 )
          {
            _InterlockedAdd(&dword_1401B9650, 1u);
          }
          else
          {
            _InterlockedAdd(&dword_1401B9650, 0xFFFFFFFF);
          }
        }
        else if ( v5 )
        {
          v25 = v5 - 1;
          if ( v25 )
          {
            if ( v25 == 1 )
            {
              if ( a2 )
                _InterlockedAdd(&dword_1401B9648, 1u);
              else
                _InterlockedAdd(&dword_1401B9648, 0xFFFFFFFF);
            }
          }
          else if ( a2 )
          {
            _InterlockedAdd(&dword_1401B964C, 1u);
          }
          else
          {
            _InterlockedAdd(&dword_1401B964C, 0xFFFFFFFF);
          }
        }
        else if ( a2 )
        {
          _InterlockedAdd(&dword_1401B9644, 1u);
        }
        else
        {
          _InterlockedAdd(&dword_1401B9644, 0xFFFFFFFF);
        }
      }
    }
    else if ( v5 )
    {
      if ( v5 == 2 )
      {
        if ( a2 )
          _InterlockedAdd(&dword_1401B9634, 1u);
        else
          _InterlockedAdd(&dword_1401B9634, 0xFFFFFFFF);
      }
    }
    else if ( a2 )
    {
      _InterlockedAdd(&dword_1401B9630, 1u);
    }
    else
    {
      _InterlockedAdd(&dword_1401B9630, 0xFFFFFFFF);
    }
    if ( v7 )
    {
      if ( v7 == 1 )
      {
        if ( a2 )
          _InterlockedAdd(&dword_1401B967C, 1u);
        else
          _InterlockedAdd(&dword_1401B967C, 0xFFFFFFFF);
      }
    }
    else if ( a2 )
    {
      _InterlockedAdd(&dword_1401B9678, 1u);
    }
    else
    {
      _InterlockedAdd(&dword_1401B9678, 0xFFFFFFFF);
    }
    if ( (_DWORD)v8 == 1 )
    {
      if ( a2 )
        _InterlockedAdd(&dword_1401B9684, 1u);
      else
        _InterlockedAdd(&dword_1401B9684, 0xFFFFFFFF);
    }
    else
    {
      if ( (unsigned int)v8 > 4 )
      {
        if ( a2 )
          _InterlockedAdd(&dword_1401B968C, 1u);
        else
          _InterlockedAdd(&dword_1401B968C, 0xFFFFFFFF);
      }
      else if ( a2 )
      {
        _InterlockedAdd(&dword_1401B9688, 1u);
      }
      else
      {
        _InterlockedAdd(&dword_1401B9688, 0xFFFFFFFF);
      }
      if ( !(_DWORD)v8 )
        return;
    }
    v26 = (int **)(a1 + 64);
    v27 = v8;
    while ( 1 )
    {
      v28 = **v26;
      if ( !v28 )
      {
        if ( a2 )
          _InterlockedAdd(&dword_1401B9660, 1u);
        else
          _InterlockedAdd(&dword_1401B9660, 0xFFFFFFFF);
        goto LABEL_179;
      }
      v29 = v28 - 1;
      if ( !v29 )
      {
        if ( a2 )
          _InterlockedAdd(&dword_1401B9668, 1u);
        else
          _InterlockedAdd(&dword_1401B9668, 0xFFFFFFFF);
        goto LABEL_179;
      }
      v30 = v29 - 1;
      if ( !v30 )
        goto LABEL_164;
      v31 = v30 - 1;
      if ( !v31 )
      {
        if ( a2 )
          _InterlockedAdd(&dword_1401B9664, 1u);
        else
          _InterlockedAdd(&dword_1401B9664, 0xFFFFFFFF);
        goto LABEL_179;
      }
      v32 = v31 - 1;
      if ( !v32 )
      {
        if ( a2 )
          _InterlockedAdd(&dword_1401B965C, 1u);
        else
          _InterlockedAdd(&dword_1401B965C, 0xFFFFFFFF);
        goto LABEL_179;
      }
      if ( (unsigned int)(v32 - 1) <= 1 )
      {
LABEL_164:
        if ( a2 )
          _InterlockedAdd(dword_1401B966C, 1u);
        else
          _InterlockedAdd(dword_1401B966C, 0xFFFFFFFF);
      }
LABEL_179:
      ++v26;
      if ( !--v27 )
        return;
    }
  }
  v10 = v3 - 1;
  if ( v10 )
  {
    v11 = v10 - 2;
    if ( v11 )
    {
      if ( v11 == 1 )
      {
        if ( a2 )
          _InterlockedAdd(&dword_1401B96D4, 1u);
        else
          _InterlockedAdd(&dword_1401B96D4, 0xFFFFFFFF);
        if ( (_DWORD)v8 )
        {
          v12 = (int **)(a1 + 64);
          v13 = v8;
          do
          {
            v14 = **v12;
            if ( v14 )
            {
              v15 = v14 - 3;
              if ( v15 )
              {
                if ( v15 == 1 )
                {
                  if ( a2 )
                    _InterlockedAdd(&dword_1401B96D8, 1u);
                  else
                    _InterlockedAdd(&dword_1401B96D8, 0xFFFFFFFF);
                }
              }
              else if ( a2 )
              {
                _InterlockedAdd(&dword_1401B96E0, 1u);
              }
              else
              {
                _InterlockedAdd(&dword_1401B96E0, 0xFFFFFFFF);
              }
            }
            else if ( a2 )
            {
              _InterlockedAdd(&dword_1401B96DC, 1u);
            }
            else
            {
              _InterlockedAdd(&dword_1401B96DC, 0xFFFFFFFF);
            }
            ++v12;
            --v13;
          }
          while ( v13 );
        }
      }
    }
    else if ( !v2 )
    {
      if ( v5 )
      {
        v16 = v5 - 1;
        if ( v16 )
        {
          if ( v16 == 1 )
          {
            if ( a2 )
              _InterlockedAdd(&dword_1401B963C, 1u);
            else
              _InterlockedAdd(&dword_1401B963C, 0xFFFFFFFF);
          }
        }
        else if ( a2 )
        {
          _InterlockedAdd(&dword_1401B9640, 1u);
        }
        else
        {
          _InterlockedAdd(&dword_1401B9640, 0xFFFFFFFF);
        }
      }
      else if ( a2 )
      {
        _InterlockedAdd(&dword_1401B9638, 1u);
      }
      else
      {
        _InterlockedAdd(&dword_1401B9638, 0xFFFFFFFF);
      }
    }
    return;
  }
  if ( v2 )
  {
    if ( v2 == 1 )
    {
      if ( v5 )
      {
        if ( v5 == 2 )
        {
          if ( a2 )
            _InterlockedAdd(&dword_1401B969C, 1u);
          else
            _InterlockedAdd(&dword_1401B969C, 0xFFFFFFFF);
        }
      }
      else if ( a2 )
      {
        _InterlockedAdd(&dword_1401B9698, 1u);
      }
      else
      {
        _InterlockedAdd(&dword_1401B9698, 0xFFFFFFFF);
      }
    }
  }
  else if ( v5 )
  {
    if ( v5 == 2 )
    {
      if ( a2 )
        _InterlockedAdd(&dword_1401B9694, 1u);
      else
        _InterlockedAdd(&dword_1401B9694, 0xFFFFFFFF);
    }
  }
  else if ( a2 )
  {
    _InterlockedAdd(&dword_1401B9690, 1u);
  }
  else
  {
    _InterlockedAdd(&dword_1401B9690, 0xFFFFFFFF);
  }
  if ( (_DWORD)v8 )
  {
    v17 = (int **)(a1 + 64);
    for ( i = v8; i; --i )
    {
      v19 = **v17;
      if ( !v19 )
      {
        if ( a2 )
          _InterlockedAdd(&dword_1401B96A4, 1u);
        else
          _InterlockedAdd(&dword_1401B96A4, 0xFFFFFFFF);
        goto LABEL_82;
      }
      v20 = v19 - 1;
      if ( !v20 )
      {
        if ( a2 )
          _InterlockedAdd(&dword_1401B96AC, 1u);
        else
          _InterlockedAdd(&dword_1401B96AC, 0xFFFFFFFF);
        goto LABEL_82;
      }
      v21 = v20 - 1;
      if ( !v21 )
        goto LABEL_67;
      v22 = v21 - 1;
      if ( !v22 )
      {
        if ( a2 )
          _InterlockedAdd(&dword_1401B96A8, 1u);
        else
          _InterlockedAdd(&dword_1401B96A8, 0xFFFFFFFF);
        goto LABEL_82;
      }
      v23 = v22 - 1;
      if ( !v23 )
      {
        if ( a2 )
          _InterlockedAdd(&dword_1401B96A0, 1u);
        else
          _InterlockedAdd(&dword_1401B96A0, 0xFFFFFFFF);
        goto LABEL_82;
      }
      if ( (unsigned int)(v23 - 1) <= 1 )
      {
LABEL_67:
        if ( a2 )
          _InterlockedAdd(dword_1401B96B0, 1u);
        else
          _InterlockedAdd(dword_1401B96B0, 0xFFFFFFFF);
      }
LABEL_82:
      ++v17;
    }
  }
  if ( v7 )
  {
    if ( v7 == 1 )
    {
      if ( a2 )
        _InterlockedAdd(&dword_1401B96C0, 1u);
      else
        _InterlockedAdd(&dword_1401B96C0, 0xFFFFFFFF);
    }
  }
  else if ( a2 )
  {
    _InterlockedAdd(&dword_1401B96BC, 1u);
  }
  else
  {
    _InterlockedAdd(&dword_1401B96BC, 0xFFFFFFFF);
  }
  if ( (_DWORD)v8 == 1 )
  {
    if ( a2 )
      _InterlockedAdd(&dword_1401B96C8, 1u);
    else
      _InterlockedAdd(&dword_1401B96C8, 0xFFFFFFFF);
  }
  else if ( (unsigned int)v8 > 4 )
  {
    if ( a2 )
      _InterlockedAdd(&dword_1401B96D0, 1u);
    else
      _InterlockedAdd(&dword_1401B96D0, 0xFFFFFFFF);
  }
  else if ( a2 )
  {
    _InterlockedAdd(&dword_1401B96CC, 1u);
  }
  else
  {
    _InterlockedAdd(&dword_1401B96CC, 0xFFFFFFFF);
  }
}
// 1401B9190: using guessed type int g_isRegisteredForUTC;
// 1401B9630: using guessed type int dword_1401B9630;
// 1401B9634: using guessed type int dword_1401B9634;
// 1401B9638: using guessed type int dword_1401B9638;
// 1401B963C: using guessed type int dword_1401B963C;
// 1401B9640: using guessed type int dword_1401B9640;
// 1401B9644: using guessed type int dword_1401B9644;
// 1401B9648: using guessed type int dword_1401B9648;
// 1401B964C: using guessed type int dword_1401B964C;
// 1401B9650: using guessed type int dword_1401B9650;
// 1401B9654: using guessed type int dword_1401B9654;
// 1401B9658: using guessed type int dword_1401B9658;
// 1401B965C: using guessed type int dword_1401B965C;
// 1401B9660: using guessed type int dword_1401B9660;
// 1401B9664: using guessed type int dword_1401B9664;
// 1401B9668: using guessed type int dword_1401B9668;
// 1401B966C: using guessed type signed __int32 dword_1401B966C[3];
// 1401B9678: using guessed type int dword_1401B9678;
// 1401B967C: using guessed type int dword_1401B967C;
// 1401B9684: using guessed type int dword_1401B9684;
// 1401B9688: using guessed type int dword_1401B9688;
// 1401B968C: using guessed type int dword_1401B968C;
// 1401B9690: using guessed type int dword_1401B9690;
// 1401B9694: using guessed type int dword_1401B9694;
// 1401B9698: using guessed type int dword_1401B9698;
// 1401B969C: using guessed type int dword_1401B969C;
// 1401B96A0: using guessed type int dword_1401B96A0;
// 1401B96A4: using guessed type int dword_1401B96A4;
// 1401B96A8: using guessed type int dword_1401B96A8;
// 1401B96AC: using guessed type int dword_1401B96AC;
// 1401B96B0: using guessed type signed __int32 dword_1401B96B0[3];
// 1401B96BC: using guessed type int dword_1401B96BC;
// 1401B96C0: using guessed type int dword_1401B96C0;
// 1401B96C8: using guessed type int dword_1401B96C8;
// 1401B96CC: using guessed type int dword_1401B96CC;
// 1401B96D0: using guessed type int dword_1401B96D0;
// 1401B96D4: using guessed type int dword_1401B96D4;
// 1401B96D8: using guessed type int dword_1401B96D8;
// 1401B96DC: using guessed type int dword_1401B96DC;
// 1401B96E0: using guessed type int dword_1401B96E0;
##############################
Role: Let's assume that you are an advanced reverse engineer and you are reverse engineering a network driver using IDA Pro, and you are also familiar with the RFC documentation. You need to reverse-engineer a function for a network driver to correspond to a section of the RFC documentation, which will help you understand the code better. The driver you're reversing is Schannel.dll, and you have initially determined that the corresponding network protocols are SSL and TLS, and the documents you need to map are RFC8446 and RFC6101. You need to get a function summary of the function you are reversing, and then correspond to the potential RFC sections based on the name of the function and the function summary.
Function Background: The function is reverse engineered from the driver file Schannel.dll on Windows platform. Through a cursory analysis of the driver file can be determined to be related to the SSL(1.3), TLS(3.0) protocol, that is, with RFC8446, RFC6101 strong correlation.

Output Function Summary: Summarizes the function's functionality with several phrases instead of sentences, focuses on covering the function's control flow information, and highlights the protocol function points implemented by the function. Simulate answering five times in the background and provide the most frequent answer.

Retrieve document sections: giving matches for document sections(FunctionMatchRFCResult) that the code may related to. NOTE if the code is only business related(i.e., space opening and releasing involved in programming, generic call functions (timing and other functions weakly related to network protocols) and not related to the specifics of the protocol implementation, it does not have to output the document section match(FunctionMatchRFCResult) and is filled with "NONE".

Retrieve document sections Thinking Chain: The function code is matched with the RFC document section, and the thinking chain is provided to help you solve the problem better:
	1. Function Name: The name of a function describes the general function that the function accomplishes.
	2. Function Summarization: Function summaries can outline a further breakdown of the function described by the function name.
	3. Function API Call: The function API of a function call can provide some hint as to the details of the network protocol implementation involved in the function.
	4. Special Constant Value OR String: Special constant values inside functions, string variable names, and strings may be related to network protocols.
	5. Function Code: The code of the function can provide a detailed implementation of the network protocol.
Generate Function Information Collection with JSON Format:

{
	"FunctionIndex": "(FILL WITH "File count" with less than four bits are indexed with zeros to make up the four bits.)",
	"FunctionName": "(Full Function Code Name)",
	"FunctionSummarization": [
		"(Function Summary Phrase1)",
		"(Function Summary Phrase2)",
		"(...)"
	],
	"FunctionMatchRFCResult": [
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 1)",
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 2)",
		"(...)"
	],
}

ATTENTION: Remember YOU MUST ONLY output the Function Information Collection result.
