Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 200
// Total lines: 988

//----- (0000000140018324) ----------------------------------------------------
__int64 __fastcall Lookup_NodeForPacketEx(
        struct _DNS_MSGINFO *a1,
        unsigned __int8 *a2,
        unsigned int a3,
        __int64 a4,
        int *a5)
{
  unsigned __int8 *v5; // rax
  unsigned __int16 v7; // dx
  __int64 v8; // r13
  __int64 v9; // r15
  __int64 v10; // r12
  CDnsClientSubnetRecordsTrie *v11; // rcx
  int v12; // edi
  char *v13; // rax
  unsigned __int16 v14; // dx
  __int16 *v15; // rax
  int v16; // eax
  char v17; // cl
  __int64 v18; // r14
  char *v19; // rax
  wchar_t *v20; // r14
  const unsigned __int16 *v21; // r15
  int v22; // edi
  __int64 v23; // rdi
  CDnsClientSubnetRecordsTrie *v24; // rcx
  const unsigned __int16 **v25; // rax
  const wchar_t *v26; // r8
  const unsigned __int16 **v27; // rax
  const wchar_t *v28; // r8
  unsigned int v29; // r14d
  unsigned __int16 *v30; // rdi
  __int64 v31; // rax
  __int64 v32; // r8
  __int64 v33; // r15
  __int64 v34; // rdx
  __int64 *ZoneTreeParent; // rax
  CDnsClientSubnetRecordsTrie *v36; // rcx
  int v37; // eax
  int v38; // eax
  __int64 v39; // r9
  int v40; // edi
  CDnsClientSubnetRecordsTrie *v41; // rcx
  bool v42; // zf
  __int64 *v43; // rax
  __int64 v44; // r8
  __int64 v45; // r8
  int v46; // eax
  CDnsClientSubnetRecordsTrie *v47; // rcx
  __int64 v48; // rax
  unsigned __int16 v49; // dx
  const unsigned __int16 *v50; // r9
  unsigned __int16 *v51; // r12
  unsigned __int16 v52; // di
  int v53; // eax
  BOOL v54; // eax
  int v55; // ecx
  CDnsClientSubnetRecordsTrie *v56; // rcx
  const unsigned __int16 *v57; // r9
  unsigned __int16 v58; // dx
  __int64 v59; // rax
  __int64 *v60; // rdx
  _BYTE *v61; // r14
  __int64 v62; // rax
  __int64 v63; // rax
  __int64 v64; // rax
  __int64 v65; // rdi
  int v66; // eax
  unsigned int v67; // eax
  int v68; // ecx
  __int64 v69; // rax
  __int64 v70; // rdx
  __int64 v71; // rdi
  __int64 v72; // rsi
  __int64 v73; // rax
  CDnsClientSubnetRecordsTrie *v74; // rax
  __int64 v75; // rdi
  char *v76; // rax
  __int64 v77; // rdx
  __int64 v78; // r8
  char *v79; // rax
  char *v80; // rax
  char *v81; // rax
  char *v82; // rax
  char *v83; // rax
  char *v84; // rax
  char *v85; // rax
  char *v86; // rax
  char *v87; // rax
  __int64 v88; // rax
  __int64 v90; // [rsp+20h] [rbp-E0h]
  __int64 v91; // [rsp+20h] [rbp-E0h]
  wchar_t *String1; // [rsp+28h] [rbp-D8h]
  unsigned int v93; // [rsp+60h] [rbp-A0h]
  _BYTE *v94; // [rsp+68h] [rbp-98h]
  int VirtualInstance; // [rsp+70h] [rbp-90h] BYREF
  unsigned __int16 v96; // [rsp+74h] [rbp-8Ch]
  __int64 v97; // [rsp+78h] [rbp-88h] BYREF
  __int64 v98; // [rsp+80h] [rbp-80h]
  __int64 v99; // [rsp+88h] [rbp-78h] BYREF
  __int64 v100; // [rsp+90h] [rbp-70h] BYREF
  __int64 v101; // [rsp+98h] [rbp-68h]
  BOOL v102; // [rsp+A0h] [rbp-60h]
  __int64 v103; // [rsp+A8h] [rbp-58h]
  __int64 v104; // [rsp+B0h] [rbp-50h] BYREF
  unsigned __int8 *v105; // [rsp+B8h] [rbp-48h]
  __int64 v106; // [rsp+C0h] [rbp-40h] BYREF
  __int64 v107; // [rsp+D0h] [rbp-30h] BYREF
  __int64 v108; // [rsp+D8h] [rbp-28h] BYREF
  __int64 v109; // [rsp+E0h] [rbp-20h] BYREF
  __int64 v110; // [rsp+E8h] [rbp-18h]
  __int16 v111[184]; // [rsp+F0h] [rbp-10h] BYREF
  wchar_t v112[256]; // [rsp+260h] [rbp+160h] BYREF
  int v113; // [rsp+460h] [rbp+360h]

  v5 = a2;
  v110 = a4;
  v105 = a2;
  v7 = *((_WORD *)a1 + 220);
  v8 = 0i64;
  v9 = 0i64;
  v99 = 0i64;
  v10 = 0i64;
  v103 = 0i64;
  v106 = 0i64;
  v101 = 0i64;
  v107 = 0i64;
  v108 = 0i64;
  v104 = 0i64;
  v100 = 0i64;
  v109 = 0i64;
  v102 = 0;
  v96 = v7;
  VirtualInstance = 0;
  v97 = 0i64;
  v93 = a3;
  v11 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_qdD(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x37u,
      (__int64)&WPP_3afa02460cfc3c89a49f4b71a68cfa7c_Traceguids,
      a1,
      a3,
      v7);
    v11 = WPP_GLOBAL_Control;
    a3 = v93;
    v5 = v105;
  }
  v12 = a3 & 0x40000;
  if ( (a3 & 0x40000) != 0 )
  {
    if ( v11 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)v11 + 17) & 0x40000) != 0
      && *((_BYTE *)v11 + 65) >= 5u )
    {
      v13 = Dbg_LookupName((unsigned __int16 *)v5);
      v14 = 56;
LABEL_14:
      WPP_SF_s(*((_QWORD *)WPP_GLOBAL_Control + 7), v14, (__int64)&WPP_3afa02460cfc3c89a49f4b71a68cfa7c_Traceguids, v13);
      a3 = v93;
      v11 = WPP_GLOBAL_Control;
    }
  }
  else if ( v11 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
         && (*((_DWORD *)v11 + 17) & 0x40000) != 0
         && *((_BYTE *)v11 + 65) >= 5u )
  {
    v13 = Dbg_PacketName(v5, (__int64)a1 + 6304, 0i64);
    v14 = 57;
    goto LABEL_14;
  }
  if ( a5 )
  {
    *a5 = 0;
    v11 = WPP_GLOBAL_Control;
  }
  if ( v12 )
  {
    v15 = (__int16 *)v105;
  }
  else
  {
    v102 = ((a3 >> 6) & 1) == 0;
    if ( ((a3 >> 6) & 1) != 0 )
      v16 = Name_ConvertRawNameToLookupName(v105, (unsigned __int16 *)v111);
    else
      v16 = Name_ConvertPacketNameToLookupNameEx((__int64)a1, v105, (unsigned __int16 *)v111, 1);
    if ( !v16 )
    {
      v17 = CurrentTimeoutBin;
      v18 = 0i64;
LABEL_248:
      if ( v99 )
        *(_BYTE *)(v99 + 98) = v17;
      if ( v9 )
        *(_BYTE *)(v9 + 98) = v17;
      v70 = v101;
      if ( v101 )
        *(_BYTE *)(v101 + 98) = v17;
      if ( v10 )
        *(_BYTE *)(v10 + 98) = v17;
      v71 = v108;
      if ( v108 )
        *(_BYTE *)(v108 + 98) = v17;
      if ( v104 )
        *(_BYTE *)(v104 + 98) = v17;
      if ( v100 )
        *(_BYTE *)(v100 + 98) = v17;
      v72 = v109;
      if ( v109 )
        *(_BYTE *)(v109 + 98) = v17;
      *((_QWORD *)a1 + 25) = v99;
      *((_QWORD *)a1 + 24) = v18;
      *((_QWORD *)a1 + 26) = v8;
      if ( (v93 & 0x80000) == 0 || v9 )
        v73 = v9;
      else
        v73 = *((_QWORD *)a1 + 28);
      *((_QWORD *)a1 + 28) = v73;
      *((_QWORD *)a1 + 31) = v104;
      *((_QWORD *)a1 + 32) = v100;
      *((_QWORD *)a1 + 27) = v70;
      *((_QWORD *)a1 + 29) = v10;
      *((_QWORD *)a1 + 30) = v71;
      *((_QWORD *)a1 + 56) = v72;
      v74 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
      {
        if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0 && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          if ( v8 )
            v75 = *(_QWORD *)(v8 + 16);
          else
            v75 = 0i64;
          v76 = Dbg_NodeName(v18);
          LODWORD(String1) = v93;
          LODWORD(v90) = v96;
          WPP_SF_qDDss(*((_QWORD *)WPP_GLOBAL_Control + 7), v77, v78, a1, v90, String1, v75, v76);
          v74 = WPP_GLOBAL_Control;
          v71 = v108;
        }
        if ( v74 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
        {
          if ( (*((_DWORD *)v74 + 17) & 0x40000) != 0 && *((_BYTE *)v74 + 65) >= 5u )
          {
            v79 = Dbg_NodeName(v18);
            WPP_SF_s(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x53u,
              (__int64)&WPP_3afa02460cfc3c89a49f4b71a68cfa7c_Traceguids,
              v79);
            v74 = WPP_GLOBAL_Control;
          }
          if ( v74 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
          {
            if ( (*((_DWORD *)v74 + 17) & 0x40000) != 0 && *((_BYTE *)v74 + 65) >= 5u )
            {
              v80 = Dbg_NodeName(v99);
              WPP_SF_s(
                *((_QWORD *)WPP_GLOBAL_Control + 7),
                0x54u,
                (__int64)&WPP_3afa02460cfc3c89a49f4b71a68cfa7c_Traceguids,
                v80);
              v74 = WPP_GLOBAL_Control;
            }
            if ( v74 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
            {
              if ( (*((_DWORD *)v74 + 17) & 0x40000) != 0 && *((_BYTE *)v74 + 65) >= 5u )
              {
                v81 = Dbg_NodeName(v9);
                WPP_SF_s(
                  *((_QWORD *)WPP_GLOBAL_Control + 7),
                  0x55u,
                  (__int64)&WPP_3afa02460cfc3c89a49f4b71a68cfa7c_Traceguids,
                  v81);
                v74 = WPP_GLOBAL_Control;
              }
              if ( v74 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
              {
                if ( (*((_DWORD *)v74 + 17) & 0x40000) != 0 && *((_BYTE *)v74 + 65) >= 5u )
                {
                  v82 = Dbg_NodeName(v101);
                  WPP_SF_s(
                    *((_QWORD *)WPP_GLOBAL_Control + 7),
                    0x56u,
                    (__int64)&WPP_3afa02460cfc3c89a49f4b71a68cfa7c_Traceguids,
                    v82);
                  v74 = WPP_GLOBAL_Control;
                }
                if ( v74 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
                {
                  if ( (*((_DWORD *)v74 + 17) & 0x40000) != 0 && *((_BYTE *)v74 + 65) >= 5u )
                  {
                    v83 = Dbg_NodeName(v10);
                    WPP_SF_s(
                      *((_QWORD *)WPP_GLOBAL_Control + 7),
                      0x57u,
                      (__int64)&WPP_3afa02460cfc3c89a49f4b71a68cfa7c_Traceguids,
                      v83);
                    v74 = WPP_GLOBAL_Control;
                  }
                  if ( v74 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
                  {
                    if ( (*((_DWORD *)v74 + 17) & 0x40000) != 0 && *((_BYTE *)v74 + 65) >= 5u )
                    {
                      v84 = Dbg_NodeName(v71);
                      WPP_SF_s(
                        *((_QWORD *)WPP_GLOBAL_Control + 7),
                        0x58u,
                        (__int64)&WPP_3afa02460cfc3c89a49f4b71a68cfa7c_Traceguids,
                        v84);
                      v74 = WPP_GLOBAL_Control;
                    }
                    if ( v74 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
                    {
                      if ( (*((_DWORD *)v74 + 17) & 0x40000) != 0 && *((_BYTE *)v74 + 65) >= 5u )
                      {
                        v85 = Dbg_NodeName(v104);
                        WPP_SF_s(
                          *((_QWORD *)WPP_GLOBAL_Control + 7),
                          0x59u,
                          (__int64)&WPP_3afa02460cfc3c89a49f4b71a68cfa7c_Traceguids,
                          v85);
                        v74 = WPP_GLOBAL_Control;
                      }
                      if ( v74 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
                      {
                        if ( (*((_DWORD *)v74 + 17) & 0x40000) != 0 && *((_BYTE *)v74 + 65) >= 5u )
                        {
                          v86 = Dbg_NodeName(v100);
                          WPP_SF_s(
                            *((_QWORD *)WPP_GLOBAL_Control + 7),
                            0x5Au,
                            (__int64)&WPP_3afa02460cfc3c89a49f4b71a68cfa7c_Traceguids,
                            v86);
                          v74 = WPP_GLOBAL_Control;
                        }
                        if ( v74 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                          && (*((_DWORD *)v74 + 17) & 0x40000) != 0
                          && *((_BYTE *)v74 + 65) >= 5u )
                        {
                          v87 = Dbg_NodeName(v72);
                          WPP_SF_s(
                            *((_QWORD *)WPP_GLOBAL_Control + 7),
                            0x5Bu,
                            (__int64)&WPP_3afa02460cfc3c89a49f4b71a68cfa7c_Traceguids,
                            v87);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if ( v102 && v18 && v105 && (v93 & 0x40000000) == 0 )
        Name_SaveCompressionWithNode((__int64)a1, (unsigned __int64)v105, v18);
      goto LABEL_163;
    }
    v11 = WPP_GLOBAL_Control;
    v15 = v111;
  }
  v98 = (__int64)v15;
  if ( v11 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)v11 + 17) & 0x40000) != 0
    && *((_BYTE *)v11 + 65) >= 4u )
  {
    v19 = Dbg_LookupName((unsigned __int16 *)v15);
    WPP_SF_s(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x3Au, (__int64)&WPP_3afa02460cfc3c89a49f4b71a68cfa7c_Traceguids, v19);
    v11 = WPP_GLOBAL_Control;
  }
  v20 = qword_1401B9A30;
  if ( !qword_1401B9A30 )
    v20 = (wchar_t *)((char *)a1 + 1120);
  v21 = L".";
  if ( (*((_DWORD *)a1 + 1572) & 0x1000) != 0 || !v20 || !*v20 )
    goto LABEL_67;
  if ( !_wcsicmp(v20, L".") )
  {
    v11 = WPP_GLOBAL_Control;
LABEL_67:
    if ( v11 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)v11 + 17) & 0x40000) != 0
      && *((_BYTE *)v11 + 65) >= 4u )
    {
      v27 = (const unsigned __int16 **)*((_QWORD *)a1 + 463);
      if ( v27 )
        v28 = v27[1];
      else
        v28 = L"Default";
      if ( v27 )
        v21 = *v27;
      WPP_SF_SS(
        *((_QWORD *)v11 + 7),
        0x3Fu,
        (__int64)&WPP_3afa02460cfc3c89a49f4b71a68cfa7c_Traceguids,
        v21,
        (__int64)v28);
    }
    goto LABEL_76;
  }
  if ( !g_pVirtualizationManager )
  {
    v22 = 14;
    goto LABEL_37;
  }
  VirtualInstance = Dns_FindVirtualInstance((__int64)v20, &v97);
  v22 = VirtualInstance;
  if ( VirtualInstance )
  {
    if ( VirtualInstance != 9922 || qword_1401B9A30 )
    {
LABEL_37:
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        WPP_SF_SD(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x3Eu,
          (__int64)&WPP_3afa02460cfc3c89a49f4b71a68cfa7c_Traceguids,
          v20);
      }
      v18 = 0i64;
LABEL_42:
      if ( a5 )
        *a5 = v22;
      goto LABEL_163;
    }
    v24 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
    {
      if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0 && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        WPP_SF_SD(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x3Cu,
          (__int64)&WPP_3afa02460cfc3c89a49f4b71a68cfa7c_Traceguids,
          v20);
        v24 = WPP_GLOBAL_Control;
      }
      if ( v24 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)v24 + 17) & 0x40000) != 0
        && *((_BYTE *)v24 + 65) >= 4u )
      {
        v25 = (const unsigned __int16 **)*((_QWORD *)a1 + 463);
        if ( v25 )
          v26 = v25[1];
        else
          v26 = L"Default";
        if ( v25 )
          v21 = *v25;
        WPP_SF_SS(
          *((_QWORD *)v24 + 7),
          0x3Du,
          (__int64)&WPP_3afa02460cfc3c89a49f4b71a68cfa7c_Traceguids,
          v21,
          (__int64)v26);
      }
    }
  }
  else
  {
    v23 = v97;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_qS(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x3Bu,
        (__int64)&WPP_3afa02460cfc3c89a49f4b71a68cfa7c_Traceguids,
        v97,
        v20);
    }
    *((_QWORD *)a1 + 463) = v23;
  }
  *((_DWORD *)a1 + 1572) |= 0x1000u;
LABEL_76:
  v29 = v93;
  v30 = (unsigned __int16 *)v98;
  v31 = Lookup_ZoneTreeNodeEx((unsigned __int16 *)v98, v93 & 0x8000000 | 0x10000000, *((_QWORD *)a1 + 463));
  v33 = v31;
  v34 = 6i64;
  if ( v96 == 43 )
  {
    if ( !v31 )
    {
      v9 = v103;
      v51 = v30;
      v64 = 0i64;
      goto LABEL_231;
    }
    if ( *v30 == *(unsigned __int8 *)(v31 + 100) )
    {
      ZoneTreeParent = Lookup_FindZoneTreeParent((__int64 **)v31);
      if ( ZoneTreeParent )
        v33 = (__int64)ZoneTreeParent;
      v34 = 6i64;
    }
  }
  if ( !v33 )
  {
    v9 = v103;
    v51 = v30;
    v65 = 0i64;
    v64 = 0i64;
    goto LABEL_232;
  }
LABEL_83:
  v36 = WPP_GLOBAL_Control;
  while ( 1 )
  {
    v8 = *(_QWORD *)(v33 + 56);
    v37 = *(_DWORD *)(v8 + 372);
    if ( v37 == 4 || v37 == 3 )
    {
      v65 = *(_QWORD *)(v8 + 40);
      v8 = 0i64;
      v9 = v103;
      v51 = (unsigned __int16 *)v98;
      v64 = v101;
      goto LABEL_232;
    }
    if ( (v29 & 0x80004000) != 0 )
    {
      if ( (v29 & 0x4000) != 0 )
      {
        if ( !v110 || (v59 = *(_QWORD *)(v110 + 328)) == 0 )
          v59 = v110;
        if ( v59 == v8 )
          v8 = v110;
      }
      goto LABEL_129;
    }
    v97 = 0i64;
    if ( *((_WORD *)a1 + 220) == 6 && (*((_BYTE *)a1 + 592) & 4) != 0 )
      break;
    if ( dword_1401B9934 && *(_DWORD *)(v8 + 304) )
    {
      memset_0(v112, 0, 0x204ui64);
      VirtualInstance = MatchPolicy(a1, (__int64 *)v8, v98, 2u, 0, v112, (__int64 **)&v97);
      v22 = VirtualInstance;
      if ( VirtualInstance )
      {
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
        {
          LODWORD(v91) = VirtualInstance;
          WPP_SF_qd(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x43u,
            (__int64)&WPP_3afa02460cfc3c89a49f4b71a68cfa7c_Traceguids,
            a1,
            v91);
        }
        goto LABEL_153;
      }
      if ( !v113 )
      {
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          WPP_SF_q(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x44u,
            (__int64)&WPP_3afa02460cfc3c89a49f4b71a68cfa7c_Traceguids,
            a1);
        }
        if ( a5 )
          *a5 = -4;
        *((_DWORD *)a1 + 1572) |= 0x800u;
        goto LABEL_162;
      }
      if ( v113 == 2 )
      {
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          WPP_SF_q(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x45u,
            (__int64)&WPP_3afa02460cfc3c89a49f4b71a68cfa7c_Traceguids,
            a1);
        }
        v18 = 0i64;
        if ( a5 )
          *a5 = -5;
        goto LABEL_163;
      }
      v8 = v97;
      v56 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 5u )
      {
        goto LABEL_129;
      }
      v57 = *(const unsigned __int16 **)(v97 + 192);
      v58 = 70;
LABEL_178:
      WPP_SF_S(*((_QWORD *)v56 + 7), v58, (__int64)&WPP_3afa02460cfc3c89a49f4b71a68cfa7c_Traceguids, v57);
      goto LABEL_129;
    }
    if ( (*(_DWORD *)(v8 + 396) & 0x20000) != 0 )
    {
      VirtualInstance = Plugin_DnsQueryZoneScopeSourceIP((__int64)a1, v8, (unsigned __int16 *)v98, &v97);
      v22 = VirtualInstance;
      if ( VirtualInstance )
      {
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
        {
          WPP_SF_D(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x47u,
            (__int64)&WPP_3afa02460cfc3c89a49f4b71a68cfa7c_Traceguids,
            VirtualInstance);
        }
LABEL_153:
        v18 = 0i64;
        goto LABEL_42;
      }
      if ( !v97 )
      {
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
        {
          WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x49u, (__int64)&WPP_3afa02460cfc3c89a49f4b71a68cfa7c_Traceguids);
        }
        goto LABEL_129;
      }
      v8 = v97;
      v56 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 5u )
      {
        goto LABEL_129;
      }
      v57 = *(const unsigned __int16 **)(v97 + 192);
      v58 = 72;
      goto LABEL_178;
    }
    if ( !*((_WORD *)a1 + 304) )
      goto LABEL_128;
    if ( v36 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)v36 + 17) & 0x40000) != 0
      && *((_BYTE *)v36 + 65) >= 4u )
    {
      WPP_SF_SSdq(
        *((_QWORD *)v36 + 7),
        0x4Au,
        (__int64)&WPP_3afa02460cfc3c89a49f4b71a68cfa7c_Traceguids,
        (const unsigned __int16 *)a1 + 304,
        *(_QWORD *)(v8 + 24));
    }
    v38 = LookUp_ScopeMap(
            *(_QWORD *)(v8 + 160),
            *(_QWORD *)(v8 + 168),
            v32,
            0xFFFFFFFF,
            (const unsigned __int16 *)a1 + 304,
            &v97);
    v39 = v97;
    VirtualInstance = v38;
    v40 = v38;
    if ( !v38 && v97 )
    {
      v8 = v97;
      v47 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
      {
        v48 = *(_QWORD *)(v97 + 24);
        v49 = 79;
        v50 = *(const unsigned __int16 **)(v97 + 192);
LABEL_127:
        WPP_SF_SS(*((_QWORD *)v47 + 7), v49, (__int64)&WPP_3afa02460cfc3c89a49f4b71a68cfa7c_Traceguids, v50, v48);
      }
      goto LABEL_128;
    }
    v41 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      WPP_SF_dqSS(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x4Bu,
        (__int64)&WPP_3afa02460cfc3c89a49f4b71a68cfa7c_Traceguids,
        v38,
        v97,
        (__int64)a1 + 608,
        *(_QWORD *)(v8 + 24));
      v39 = v97;
      v41 = WPP_GLOBAL_Control;
    }
    if ( !dword_1401B9930 )
      goto LABEL_140;
    v42 = v40 == 0;
    if ( v40 )
      goto LABEL_141;
    if ( v39 )
      goto LABEL_140;
    if ( v41 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)v41 + 17) & 0x40000) != 0
      && *((_BYTE *)v41 + 65) >= 4u )
    {
      WPP_SF_S(
        *((_QWORD *)v41 + 7),
        0x4Cu,
        (__int64)&WPP_3afa02460cfc3c89a49f4b71a68cfa7c_Traceguids,
        *(const unsigned __int16 **)(v8 + 24));
    }
    v43 = Lookup_FindZoneTreeParent((__int64 **)v33);
    v33 = (__int64)v43;
    if ( !v43 )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        WPP_SF_S(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x4Eu,
          (__int64)&WPP_3afa02460cfc3c89a49f4b71a68cfa7c_Traceguids,
          *(const unsigned __int16 **)(v8 + 24));
      }
LABEL_140:
      v42 = v40 == 0;
LABEL_141:
      if ( v42 )
        v40 = 9952;
      if ( a5 )
        *a5 = v40;
      if ( v40 == 9952 )
      {
        *((_DWORD *)a1 + 1572) |= 0x20u;
        v18 = 0i64;
        if ( a5 )
          *a5 = -4;
        goto LABEL_163;
      }
LABEL_162:
      v18 = 0i64;
      goto LABEL_163;
    }
    v36 = WPP_GLOBAL_Control;
    v34 = 6i64;
    v29 = v93;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_qs(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x4Du,
        (__int64)&WPP_3afa02460cfc3c89a49f4b71a68cfa7c_Traceguids,
        v43,
        (char *)v43 + 102);
      v34 = 6i64;
      goto LABEL_83;
    }
  }
  if ( v36 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)v36 + 17) & 0x40000) != 0
    && *((_BYTE *)v36 + 65) >= 4u )
  {
    WPP_SF_SSdq(
      *((_QWORD *)v36 + 7),
      0x40u,
      (__int64)&WPP_3afa02460cfc3c89a49f4b71a68cfa7c_Traceguids,
      (const unsigned __int16 *)a1 + 304,
      *(_QWORD *)(v8 + 24));
  }
  if ( !(unsigned int)wcsicmp_ThatWorks((PCNZWCH)a1 + 304, *(const WCHAR **)(v8 + 24)) )
  {
    v45 = v8;
    v97 = v8;
    v40 = 0;
    VirtualInstance = 0;
    goto LABEL_122;
  }
  v46 = LookUp_ScopeMap(
          *(_QWORD *)(v8 + 160),
          *(_QWORD *)(v8 + 168),
          v44,
          0xFFFFFFFF,
          (const unsigned __int16 *)a1 + 304,
          &v97);
  v45 = v97;
  VirtualInstance = v46;
  v40 = v46;
  if ( v46 )
  {
LABEL_136:
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      WPP_SF_dqSS(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x41u,
        (__int64)&WPP_3afa02460cfc3c89a49f4b71a68cfa7c_Traceguids,
        v40,
        v45,
        (__int64)a1 + 608,
        *(_QWORD *)(v8 + 24));
    }
    goto LABEL_140;
  }
LABEL_122:
  if ( !v45 )
    goto LABEL_136;
  v8 = v45;
  v47 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
  {
    v48 = *(_QWORD *)(v45 + 24);
    v49 = 66;
    v50 = *(const unsigned __int16 **)(v45 + 192);
    goto LABEL_127;
  }
LABEL_128:
  v29 = v93;
LABEL_129:
  v51 = (unsigned __int16 *)v98;
  v52 = *(_WORD *)v98;
  *(_WORD *)v98 -= *(unsigned __int8 *)(v33 + 100);
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
  {
    WPP_SF_sd(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x50u,
      (__int64)&WPP_3afa02460cfc3c89a49f4b71a68cfa7c_Traceguids,
      *(const char **)(v8 + 16));
  }
  v53 = *(_DWORD *)(v8 + 396);
  v54 = (v53 & 0x10) != 0 && (v53 & 0x20) == 0;
  v60 = &v100;
  if ( (v29 & 4) != 0 )
    v60 = 0i64;
  v94 = Lookup_ZoneNode(
          v8,
          0i64,
          0i64,
          v51,
          v29 | 0x20,
          &v99,
          (__int64 *)((unsigned __int64)&v104 & -(__int64)v54),
          v60);
  v61 = v94;
  if ( (unsigned int)DnsBL_TestNodeAgainstBlockList((__int64)v94) )
  {
    v104 = 0i64;
    v61 = 0i64;
    v100 = 0i64;
    v94 = 0i64;
  }
  v62 = v100;
  if ( v100 )
  {
    if ( *((_QWORD *)a1 + 32) == v100 )
      v62 = 0i64;
    v100 = v62;
  }
  v63 = v99;
  *v51 = v52;
  if ( v63
    && (*(_BYTE *)(v63 + 96) == 0xF2 || v96 == 43
                                     && *(_BYTE *)(v63 + 96) == 67
                                     && v52 == *(unsigned __int8 *)(v63 + 100)) )
  {
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 5u )
    {
      v18 = (__int64)v94;
      v9 = v103;
    }
    else
    {
      WPP_SF_s(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x51u,
        (__int64)&WPP_3afa02460cfc3c89a49f4b71a68cfa7c_Traceguids,
        *(const char **)(v8 + 16));
      v18 = (__int64)v94;
      v9 = v103;
    }
LABEL_245:
    v17 = CurrentTimeoutBin;
    goto LABEL_246;
  }
  v9 = v99;
  v64 = (__int64)v61;
  v29 = v93;
  v8 = 0i64;
  v106 = v99;
  v101 = v64;
LABEL_231:
  v65 = 0i64;
LABEL_232:
  if ( (v29 & 0x20000) != 0 )
  {
    v18 = v64;
    v99 = v9;
    goto LABEL_245;
  }
  v18 = lookupNodeForPacketInCache(a1, v34, v29, v64, v51, &v99, &v107, &v108, &v106, &v109, &VirtualInstance);
  v66 = VirtualInstance;
  if ( a5 )
    *a5 = VirtualInstance;
  v67 = v66 + 6;
  if ( v67 <= 6 )
  {
    v68 = 73;
    if ( _bittest(&v68, v67) )
    {
      if ( !v65 || (v69 = *(_QWORD *)(v65 + 56)) == 0 )
      {
        v9 = v106;
        goto LABEL_245;
      }
      v17 = CurrentTimeoutBin;
      *(_BYTE *)(v65 + 98) = CurrentTimeoutBin;
      if ( *(_DWORD *)(v69 + 372) != 3 || (v9 = v106) == 0 || *(_BYTE *)(v106 + 100) < *(_BYTE *)(v65 + 100) )
        v9 = v65;
LABEL_246:
      v10 = v107;
      if ( v18 )
        *(_BYTE *)(v18 + 98) = v17;
      goto LABEL_248;
    }
  }
LABEL_163:
  v55 = *((_DWORD *)a1 + 1572);
  if ( (v55 & 0x280) == 0 )
  {
    if ( v8 && *(_DWORD *)(v8 + 372) )
    {
      *((_QWORD *)a1 + 460) = v8;
    }
    else
    {
      v88 = *((_QWORD *)a1 + 785);
      if ( !v88 || !*(_QWORD *)(v88 + 192) )
        v88 = 0i64;
      *((_QWORD *)a1 + 462) = v88;
    }
    *((_DWORD *)a1 + 1572) = v55 | 0x280;
  }
  return v18;
}
// 1400188F2: variable 'v32' is possibly undefined
// 140018ACD: variable 'v44' is possibly undefined
// 140018CCE: variable 'v91' is possibly undefined
// 140019188: variable 'v34' is possibly undefined
// 140019333: variable 'v77' is possibly undefined
// 140019333: variable 'v78' is possibly undefined
// 140019333: variable 'v90' is possibly undefined
// 140019333: variable 'String1' is possibly undefined
// 140188260: using guessed type wchar_t aDefault_1[8];
// 1401B9270: using guessed type struct CDnsVirtualizationManager *g_pVirtualizationManager;
// 1401B9930: using guessed type int dword_1401B9930;
// 1401B9934: using guessed type int dword_1401B9934;
// 1401B99AC: using guessed type int dword_1401B99AC;
// 1401B99B0: using guessed type int dword_1401B99B0;
// 1401BA4B8: using guessed type char CurrentTimeoutBin;
// 140018324: using guessed type unsigned __int16 var_3D0[184];
##############################
Role: Let's assume that you are an advanced reverse engineer and you are reverse engineering a network driver using IDA Pro, and you are also familiar with the RFC documentation. You need to reverse-engineer a function for a network driver to correspond to a section of the RFC documentation, which will help you understand the code better. The driver you're reversing is Schannel.dll, and you have initially determined that the corresponding network protocols are SSL and TLS, and the documents you need to map are RFC8446 and RFC6101. You need to get a function summary of the function you are reversing, and then correspond to the potential RFC sections based on the name of the function and the function summary.
Function Background: The function is reverse engineered from the driver file Schannel.dll on Windows platform. Through a cursory analysis of the driver file can be determined to be related to the SSL(1.3), TLS(3.0) protocol, that is, with RFC8446, RFC6101 strong correlation.

Output Function Summary: Summarizes the function's functionality with several phrases instead of sentences, focuses on covering the function's control flow information, and highlights the protocol function points implemented by the function. Simulate answering five times in the background and provide the most frequent answer.

Retrieve document sections: giving matches for document sections(FunctionMatchRFCResult) that the code may related to. NOTE if the code is only business related(i.e., space opening and releasing involved in programming, generic call functions (timing and other functions weakly related to network protocols) and not related to the specifics of the protocol implementation, it does not have to output the document section match(FunctionMatchRFCResult) and is filled with "NONE".

Retrieve document sections Thinking Chain: The function code is matched with the RFC document section, and the thinking chain is provided to help you solve the problem better:
	1. Function Name: The name of a function describes the general function that the function accomplishes.
	2. Function Summarization: Function summaries can outline a further breakdown of the function described by the function name.
	3. Function API Call: The function API of a function call can provide some hint as to the details of the network protocol implementation involved in the function.
	4. Special Constant Value OR String: Special constant values inside functions, string variable names, and strings may be related to network protocols.
	5. Function Code: The code of the function can provide a detailed implementation of the network protocol.
Generate Function Information Collection with JSON Format:

{
	"FunctionIndex": "(FILL WITH "File count" with less than four bits are indexed with zeros to make up the four bits.)",
	"FunctionName": "(Full Function Code Name)",
	"FunctionSummarization": [
		"(Function Summary Phrase1)",
		"(Function Summary Phrase2)",
		"(...)"
	],
	"FunctionMatchRFCResult": [
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 1)",
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 2)",
		"(...)"
	],
}

ATTENTION: Remember YOU MUST ONLY output the Function Information Collection result.
