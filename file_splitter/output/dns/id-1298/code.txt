Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 1298
// Total lines: 263

//----- (00000001400A6EC4) ----------------------------------------------------
__int64 __fastcall AddClientSubnetRecordToRegistry(__int64 a1, __int64 a2, char a3)
{
  const WCHAR *v3; // rdx
  unsigned int *v5; // r15
  unsigned int *v6; // rsi
  HKEY v8; // rax
  HKEY v9; // rbx
  unsigned int v10; // ebx
  _QWORD *v11; // r13
  int v13; // r9d
  _DWORD *v14; // rbx
  _DWORD *v15; // rcx
  _DWORD *v16; // rcx
  _DWORD *v17; // rdx
  int v18; // eax
  _DWORD *v19; // rdx
  bool v20; // zf
  int v21; // eax
  HKEY v22; // r14
  CDnsClientSubnetRecordsTrie *v23; // rcx
  unsigned __int16 v24; // dx
  const char *v25; // rax
  unsigned int *v26; // [rsp+30h] [rbp-20h] BYREF
  unsigned int *v27; // [rsp+38h] [rbp-18h] BYREF
  HKEY hKey; // [rsp+40h] [rbp-10h]
  _DWORD *AddrArray; // [rsp+90h] [rbp+40h]
  int v30; // [rsp+98h] [rbp+48h]
  _DWORD *Src; // [rsp+A8h] [rbp+58h]

  v3 = *(const WCHAR **)a1;
  Src = 0i64;
  v26 = 0i64;
  v5 = 0i64;
  v27 = 0i64;
  v6 = 0i64;
  v30 = 0;
  v8 = Reg_OpenClientSubnetRecord(0i64, v3);
  hKey = v8;
  v9 = v8;
  if ( v8 )
  {
    Src = Reg_GetAddrArrayEx(v8, 0i64, "IPv4Addresses", 1u, 0i64);
    if ( !Src )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_S(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x7Cu,
          (__int64)&WPP_44543417c05739f4a9c82c388f6d5836_Traceguids,
          *(const unsigned __int16 **)a1);
      }
      Src = Mem_AllocZero(0x60ui64, 0i64, "ds\\dns\\server\\server\\srvcfg.c", 6794);
      if ( !Src )
      {
        v10 = 14;
        v11 = 0i64;
        goto LABEL_80;
      }
    }
    AddrArray = Reg_GetAddrArrayEx(v9, 0i64, "IPv6Addresses", 1u, 0i64);
    v14 = AddrArray;
    if ( !AddrArray )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_S(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x7Du,
          (__int64)&WPP_44543417c05739f4a9c82c388f6d5836_Traceguids,
          *(const unsigned __int16 **)a1);
      }
      AddrArray = Mem_AllocZero(0x60ui64, 0i64, "ds\\dns\\server\\server\\srvcfg.c", 6816);
      v14 = AddrArray;
      if ( !AddrArray )
      {
        v10 = 14;
        v11 = 0i64;
        goto LABEL_80;
      }
    }
    if ( (a3 & 3) != 0 )
    {
      v17 = *(_DWORD **)(a1 + 8);
      v30 = 1;
      if ( v17 )
      {
        if ( (a3 & 1) != 0 )
          v18 = DnsAddrArray_Union((__int64)Src, (__int64)v17, &v26, v13);
        else
          v18 = DnsAddrArray_Diff(Src, v17, -1, &v26, 0i64, 0i64);
        v10 = v18;
        if ( v18 )
        {
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
          {
            WPP_SF_D(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x7Eu,
              (__int64)&WPP_44543417c05739f4a9c82c388f6d5836_Traceguids,
              v18);
          }
          v5 = v26;
          v11 = AddrArray;
          goto LABEL_80;
        }
        v5 = v26;
      }
      else if ( Src && Src[1] )
      {
        v5 = DnsAddrArray_CopyAndExpand(Src, 0i64, 0i64, v13);
      }
      v19 = *(_DWORD **)(a1 + 16);
      if ( v19 )
      {
        v20 = (a3 & 1) == 0;
        v11 = AddrArray;
        if ( v20 )
          v21 = DnsAddrArray_Diff(AddrArray, v19, -1, &v27, 0i64, 0i64);
        else
          v21 = DnsAddrArray_Union((__int64)AddrArray, (__int64)v19, &v27, v13);
        v10 = v21;
        if ( v21 )
        {
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
          {
            WPP_SF_D(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x7Fu,
              (__int64)&WPP_44543417c05739f4a9c82c388f6d5836_Traceguids,
              v21);
          }
          v6 = v27;
          goto LABEL_80;
        }
        v6 = v27;
        goto LABEL_65;
      }
      if ( !AddrArray || !AddrArray[1] )
      {
        v11 = AddrArray;
LABEL_65:
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          WPP_SF_Sq(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x80u,
            (__int64)&WPP_44543417c05739f4a9c82c388f6d5836_Traceguids,
            *(const unsigned __int16 **)a1);
        }
        v22 = hKey;
        v10 = Reg_SetAddrArrayEx(0x10000000, hKey, 0i64, "IPv4Addresses", (__int64)v5, 1);
        if ( v10 )
        {
          v23 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
            || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
          {
            goto LABEL_80;
          }
          v24 = 129;
          v25 = "IPv4Addresses";
        }
        else
        {
          v10 = Reg_SetAddrArrayEx(0x10000000, v22, 0i64, "IPv6Addresses", (__int64)v6, 1);
          if ( !v10 )
            goto LABEL_80;
          v23 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
            || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
          {
            goto LABEL_80;
          }
          v24 = 130;
          v25 = "IPv6Addresses";
        }
        WPP_SF_Ds(
          *((_QWORD *)v23 + 7),
          v24,
          (__int64)&WPP_44543417c05739f4a9c82c388f6d5836_Traceguids,
          v10,
          (__int64)v25);
LABEL_80:
        RegCloseKey(hKey);
        goto LABEL_7;
      }
      v16 = AddrArray;
      goto LABEL_33;
    }
    if ( (a3 & 4) == 0 )
    {
      v5 = *(unsigned int **)(a1 + 8);
      v6 = *(unsigned int **)(a1 + 16);
      goto LABEL_34;
    }
    v15 = *(_DWORD **)(a1 + 8);
    v30 = 1;
    if ( v15 )
    {
      if ( !v15[1] )
        goto LABEL_30;
    }
    else
    {
      v15 = Src;
    }
    v5 = DnsAddrArray_CopyAndExpand(v15, 0i64, 0i64, v13);
LABEL_30:
    v16 = *(_DWORD **)(a1 + 16);
    if ( v16 )
    {
      if ( !v16[1] )
      {
LABEL_34:
        v11 = AddrArray;
        goto LABEL_65;
      }
    }
    else
    {
      v16 = v14;
    }
LABEL_33:
    v6 = DnsAddrArray_CopyAndExpand(v16, 0i64, 0i64, v13);
    goto LABEL_34;
  }
  v10 = 1011;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
  {
    WPP_SF_S(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x7Bu,
      (__int64)&WPP_44543417c05739f4a9c82c388f6d5836_Traceguids,
      *(const unsigned __int16 **)a1);
  }
  v11 = 0i64;
LABEL_7:
  Mem_Free(Src, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\srvcfg.c", 6951);
  Mem_Free(v11, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\srvcfg.c", 6952);
  if ( v30 )
  {
    Mem_Free(v5, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\srvcfg.c", 6955);
    Mem_Free(v6, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\srvcfg.c", 6956);
  }
  return v10;
}
// 1400A7105: variable 'v13' is possibly undefined
