Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 2736
// Total lines: 141

//----- (0000000140143BD0) ----------------------------------------------------
__int64 __fastcall CDNSPolicyCriteriaInterfaceIP::AddCriteria(
        CDNSPolicyCriteriaInterfaceIP *this,
        struct _PolicyCriteriaList *a2,
        char *a3)
{
  int v3; // r9d
  char *v4; // rax
  unsigned int v8; // r14d
  __int64 v9; // rsi
  __int64 v10; // rdx
  unsigned int i; // r15d
  __int64 v12; // rdx
  int v13; // r9d
  __int64 v14; // r12
  __int64 v15; // rcx
  _QWORD *v16; // rax
  __int64 v17; // rdx
  __int64 v18; // rax
  __int64 v19; // rdx
  unsigned int j; // r15d
  __int64 v21; // rdx
  int v22; // r9d
  __int64 v23; // r12
  __int64 v24; // rcx
  _QWORD *v25; // rax
  __int64 v26; // rdx
  __int64 v27; // rax
  unsigned __int64 v28; // r8

  v3 = *((_DWORD *)a2 + 1);
  v4 = a3;
  if ( v3 == 3 )
  {
    v8 = 0;
    if ( *(_DWORD *)a2 )
    {
      do
      {
        v9 = 16i64 * v8;
        v10 = v9 + *((_QWORD *)a2 + 1);
        if ( *(_DWORD *)v10 == 1 )
        {
          for ( i = 0; i < *(_DWORD *)(v10 + 4); v10 = v9 + *((_QWORD *)a2 + 1) )
          {
            if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
              && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
            {
              v12 = *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8i64 * i);
              if ( *(_WORD *)v12 == 2 )
                v13 = *(_DWORD *)(v12 + 4);
              else
                v13 = -1;
              WPP_SF_D(
                *((_QWORD *)WPP_GLOBAL_Control + 7),
                0x35u,
                (__int64)&WPP_42dbba61d26d3062f1ad4e084cdc81fe_Traceguids,
                v13);
            }
            v14 = *((_QWORD *)this + 8);
            v15 = *(_QWORD *)(v9 + *((_QWORD *)a2 + 1) + 8);
            v16 = std::_List_val<CDNSPolicyCriteria *>::_Buynode(
                    v15,
                    v14,
                    *(_QWORD *)(v14 + 8),
                    (_QWORD *)(v15 + 8i64 * i));
            v17 = *((_QWORD *)this + 9);
            if ( v17 == 0x1FFFFFFFFFFFFFFEi64 )
              std::_Xlength_error("list<T> too long");
            *((_QWORD *)this + 9) = v17 + 1;
            *(_QWORD *)(v14 + 8) = v16;
            *(_QWORD *)v16[1] = v16;
            v18 = i++;
            *(_QWORD *)(*(_QWORD *)(v9 + *((_QWORD *)a2 + 1) + 8) + 8 * v18) = 0i64;
          }
        }
        v19 = v9 + *((_QWORD *)a2 + 1);
        if ( *(_DWORD *)v19 == 2 )
        {
          for ( j = 0; j < *(_DWORD *)(v19 + 4); v19 = v9 + *((_QWORD *)a2 + 1) )
          {
            if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
              && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
            {
              v21 = *(_QWORD *)(*(_QWORD *)(v19 + 8) + 8i64 * j);
              if ( *(_WORD *)v21 == 2 )
                v22 = *(_DWORD *)(v21 + 4);
              else
                v22 = -1;
              WPP_SF_D(
                *((_QWORD *)WPP_GLOBAL_Control + 7),
                0x36u,
                (__int64)&WPP_42dbba61d26d3062f1ad4e084cdc81fe_Traceguids,
                v22);
            }
            v23 = *((_QWORD *)this + 11);
            v24 = *(_QWORD *)(v9 + *((_QWORD *)a2 + 1) + 8);
            v25 = std::_List_val<CDNSPolicyCriteria *>::_Buynode(
                    v24,
                    v23,
                    *(_QWORD *)(v23 + 8),
                    (_QWORD *)(v24 + 8i64 * j));
            v26 = *((_QWORD *)this + 12);
            if ( v26 == 0x1FFFFFFFFFFFFFFEi64 )
              std::_Xlength_error("list<T> too long");
            *((_QWORD *)this + 12) = v26 + 1;
            *(_QWORD *)(v23 + 8) = v25;
            *(_QWORD *)v25[1] = v25;
            v27 = j++;
            *(_QWORD *)(*(_QWORD *)(v9 + *((_QWORD *)a2 + 1) + 8) + 8 * v27) = 0i64;
          }
        }
        ++v8;
      }
      while ( v8 < *(_DWORD *)a2 );
      v4 = a3;
    }
    v28 = -1i64;
    do
      ++v28;
    while ( *(_WORD *)&v4[2 * v28] );
    std::wstring::assign((char *)this + 24, v4, v28);
    return 0i64;
  }
  else
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      WPP_SF_D(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x34u,
        (__int64)&WPP_42dbba61d26d3062f1ad4e084cdc81fe_Traceguids,
        v3);
    }
    return 87i64;
  }
}
