Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 627
// Total lines: 141

//----- (0000000140057AA4) ----------------------------------------------------
__int64 __fastcall Log_InitializeLogging(int a1, int a2, char *a3)
{
  int v3; // edi
  unsigned int v4; // ebx
  int LastError; // eax
  char *v8; // rax
  int v9; // r8d
  struct _SYSTEMTIME SystemTime; // [rsp+30h] [rbp-68h] BYREF
  CHAR v12[64]; // [rsp+40h] [rbp-58h] BYREF

  v3 = 0;
  v4 = 0;
  if ( fLogCsInit )
  {
    if ( !a1 )
    {
      EnterCriticalSection(&csLogLock);
      v3 = 1;
    }
  }
  else
  {
    v4 = DnsInitializeCriticalSection(&csLogLock);
    if ( v4 )
      return v4;
    fLogCsInit = 1;
    EnterCriticalSection(&csLogLock);
    v3 = 1;
    if ( !dword_1401B978C && !g_pwszLogFileName )
      massageLogFile((unsigned __int16 *)qword_1401B9760);
  }
  if ( g_hLogFile )
  {
    CloseHandle(g_hLogFile);
    g_hLogFile = 0i64;
  }
  if ( !a2
    && !dword_1401B978C
    && g_pwszLogFileName
    && !MoveFileExW(g_pwszLogFileName, L"dns\\backup\\dns.log", 3u)
    && WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 1) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    LastError = GetLastError();
    WPP_SF_DSS(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x13u,
      (__int64)&WPP_7aabcfb4077e3de7a2cc491a12601782_Traceguids,
      LastError,
      (__int64)g_pwszLogFileName,
      (__int64)L"dns\\backup\\dns.log");
  }
  if ( a3 )
    StringCchCopyW(a3, 256i64, (char *)g_pwszLogFileName);
  Timeout_FreeWithFunctionEx((__int64)g_pwszLogFileName, 0i64, (__int64)"ds\\dns\\server\\server\\log.c", 2065);
  g_pwszLogFileName = 0i64;
  Timeout_FreeWithFunctionEx((__int64)g_pwszLogFileDrive, 0i64, (__int64)"ds\\dns\\server\\server\\log.c", 2067);
  g_pwszLogFileDrive = 0i64;
  massageLogFile((unsigned __int16 *)qword_1401B9760);
  regenerateBackupExclusionKey();
  memset_0(&LogBuffer, 0, 0x30ui64);
  g_iBytesWrittenToLog = 0i64;
  dword_1401B8F70 = 0x20000;
  qword_1401B8F90 = 0x20000i64;
  qword_1401B8F78 = (__int64)&pchLogBuffer;
  lpMultiByteStr = (STRSAFE_LPSTR)&pchLogBuffer;
  qword_1401B8F80 = (__int64)&csLogLock;
  LogBuffer = (__int64)g_hLogFile;
  g_hLogFile = OpenWriteFileEx2W(0i64, g_pwszLogFileName, 0);
  if ( g_hLogFile )
  {
    dword_1401B9714 = Dns_GetCurrentTimeInSeconds();
    g_LastLogFileOpenTime = dword_1401B9714;
    writeAndResetLogBuffer();
    if ( dword_1401B9708 )
    {
      writeLogBootInfo();
      memset_0(v12, 0, 0x3Dui64);
      GetLocalTime(&SystemTime);
      Dns_WriteFormattedSystemTimeToBuffer(v12, &SystemTime);
      v8 = sprintfSafeA(lpMultiByteStr, (unsigned int)qword_1401B8F90, "Log file wrap at %s\r\n", v12);
      if ( v8 )
      {
        v9 = (_DWORD)v8 - (_DWORD)lpMultiByteStr;
        if ( v8 - lpMultiByteStr <= (unsigned __int64)(unsigned int)qword_1401B8F90 )
        {
          lpMultiByteStr = v8;
          LODWORD(qword_1401B8F90) = qword_1401B8F90 - v9;
        }
      }
    }
    else
    {
      writeLogBootInfo();
    }
    writeMessageInfoHeader();
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 1) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_Dd(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x15u,
        (__int64)&WPP_7aabcfb4077e3de7a2cc491a12601782_Traceguids,
        dword_1401B9770);
    }
  }
  else
  {
    v4 = GetLastError();
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 1) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_DS(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x14u,
        (__int64)&WPP_7aabcfb4077e3de7a2cc491a12601782_Traceguids,
        v4,
        (__int64)g_pwszLogFileName);
    }
    if ( v4 == 997 )
      v4 = 2;
  }
  if ( v3 )
    LeaveCriticalSection(&csLogLock);
  return v4;
}
// 1401B8F54: using guessed type int fLogCsInit;
// 1401B8F68: using guessed type __int64 LogBuffer;
// 1401B8F70: using guessed type int dword_1401B8F70;
// 1401B8F78: using guessed type __int64 qword_1401B8F78;
// 1401B8F80: using guessed type __int64 qword_1401B8F80;
// 1401B8F98: using guessed type __int64 g_iBytesWrittenToLog;
// 1401B8FA0: using guessed type int g_LastLogFileOpenTime;
// 1401B9708: using guessed type int dword_1401B9708;
// 1401B9714: using guessed type int dword_1401B9714;
// 1401B9770: using guessed type int dword_1401B9770;
// 1401B978C: using guessed type int dword_1401B978C;
