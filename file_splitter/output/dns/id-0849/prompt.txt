Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 849
// Total lines: 318

//----- (0000000140075578) ----------------------------------------------------
__int64 __fastcall Reg_SetValue(
        int a1,
        HKEY a2,
        __int64 a3,
        const CHAR *a4,
        DWORD dwType,
        BYTE *lpMultiByteStr,
        DWORD a7)
{
  int v7; // ebp
  const CHAR *v8; // rsi
  wchar_t *v11; // r12
  __int64 v12; // rdx
  unsigned int v13; // ebx
  const unsigned __int16 *v14; // r9
  const WCHAR **v15; // rax
  const WCHAR *v16; // rcx
  HKEY v17; // rax
  __int64 v18; // rcx
  __int64 v19; // rax
  __int64 v20; // rax
  __int64 v21; // rax
  const WCHAR *v22; // rdx
  DWORD v23; // ebp
  __int64 v24; // r13
  wchar_t *v25; // rax
  const BYTE *lpData; // rcx
  DWORD cbData; // edi
  char **v28; // rsi
  int v29; // ecx
  __int64 v30; // r8
  BYTE *v31; // rax
  BYTE *v32; // r9
  __int64 v33; // rax
  unsigned int v34; // ecx
  unsigned int v35; // ebx
  wchar_t *v36; // rax
  __int64 v37; // rbp
  char *v38; // rbx
  char *v39; // rbp
  char *v40; // rax
  char *v41; // r14
  __int64 v42; // rcx
  __int64 v43; // rcx
  bool v44; // cf
  unsigned int v45; // ebx
  int v46; // esi
  wchar_t *v47; // rax
  LSTATUS v48; // eax
  int v50; // [rsp+44h] [rbp-54h]
  __int128 v51[4]; // [rsp+50h] [rbp-48h] BYREF
  int v52; // [rsp+A0h] [rbp+8h]

  v50 = 0;
  v7 = a1 & 0x10000000;
  v8 = a4;
  v52 = a1 & 0x10000000;
  v11 = 0i64;
  if ( (a1 & 0x10000000) != 0 )
  {
    v13 = RpcUtil_SwitchSecurityContext(0);
    if ( v13 )
      goto LABEL_81;
  }
  if ( !a2 )
  {
    if ( a3 )
    {
      v14 = *(const unsigned __int16 **)(a3 + 192);
      if ( v14 )
      {
        v18 = *(_QWORD *)(a3 + 328);
        v19 = a3;
        if ( v18 )
          v19 = *(_QWORD *)(a3 + 328);
        if ( *(_QWORD *)(v19 + 200) )
        {
          v20 = a3;
          if ( v18 )
            v20 = *(_QWORD *)(a3 + 328);
          if ( *(_QWORD *)(v20 + 200) )
          {
            v21 = a3;
            if ( v18 )
              v21 = *(_QWORD *)(a3 + 328);
            v22 = **(const WCHAR ***)(v21 + 200);
          }
          else
          {
            v22 = L".";
          }
        }
        else
        {
          v22 = 0i64;
        }
        v17 = Reg_OpenScope(0i64, v22, *(const WCHAR **)(a3 + 24), v14, 0);
      }
      else
      {
        v15 = *(const WCHAR ***)(a3 + 200);
        if ( v15 )
          v16 = *v15;
        else
          v16 = 0i64;
        v17 = Reg_OpenZone(v16, *(const WCHAR **)(a3 + 24), 0i64);
      }
    }
    else
    {
      v17 = Reg_OpenParameters();
    }
    a2 = v17;
    if ( !v17 )
    {
      v13 = 110;
      goto LABEL_81;
    }
    v50 = 1;
  }
  if ( (dwType & 0xF0000000) == 0 )
  {
    v48 = RegSetValueExA(a2, v8, 0, dwType, lpMultiByteStr, a7);
    goto LABEL_78;
  }
  v23 = (unsigned __int16)dwType;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_SD(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x1Fu,
      (__int64)&WPP_6ba06e9d807b3b6640892c588bf1aced_Traceguids,
      (const unsigned __int16 *)v8);
  }
  v24 = -1i64;
  if ( dwType == -16777215 )
  {
    v25 = (wchar_t *)Dns_StringCopyAllocate((char *)lpMultiByteStr, 0, 2i64, 1);
    v11 = v25;
    if ( !v25 )
    {
      v13 = 14;
LABEL_35:
      v7 = v52;
      goto LABEL_79;
    }
    lpData = (const BYTE *)v25;
    cbData = 0;
    goto LABEL_72;
  }
  if ( dwType == -16777209 )
  {
    v28 = (char **)lpMultiByteStr;
    LODWORD(v12) = 0;
    cbData = 0;
    v29 = 0;
    if ( !lpMultiByteStr )
      goto LABEL_65;
    v30 = *(_QWORD *)lpMultiByteStr;
    v31 = lpMultiByteStr;
    if ( !*(_QWORD *)lpMultiByteStr )
      goto LABEL_65;
    do
    {
      ++v29;
      v31 += 8;
    }
    while ( *(_QWORD *)v31 );
    if ( !v29 )
    {
LABEL_65:
      v8 = a4;
      lpData = (const BYTE *)v11;
      goto LABEL_71;
    }
    v32 = lpMultiByteStr;
    while ( 1 )
    {
      v33 = -1i64;
      do
        ++v33;
      while ( *(_BYTE *)(v30 + v33) );
      v34 = v12 + 2 * v33 + 2;
      if ( v34 < (unsigned int)v12 )
        break;
      v32 += 8;
      v12 = v34;
      v30 = *(_QWORD *)v32;
      if ( !*(_QWORD *)v32 )
        goto LABEL_49;
    }
    v12 = 0i64;
LABEL_49:
    v35 = 0;
    if ( (int)v12 + 2 >= (unsigned int)v12 )
      v35 = v12 + 2;
    if ( v35 )
    {
      v36 = (wchar_t *)Mem_AllocZero(v35, 19i64, "ds\\dns\\server\\server\\registry.c", 1232);
      v11 = v36;
      if ( v36 )
      {
        v37 = v35;
        v38 = (char *)v36;
        v39 = (char *)v36 + v37;
        while ( *v28 )
        {
          v40 = (char *)Dns_StringCopyAllocate(*v28, 0, 2i64, 1);
          v41 = v40;
          if ( !v40 || (int)StringCchCopyW(v38, (v39 - v38) >> 1, v40) < 0 )
          {
            v23 = (unsigned __int16)dwType;
            goto LABEL_65;
          }
          v42 = -1i64;
          do
            ++v42;
          while ( *(_WORD *)&v41[2 * v42] );
          v43 = (unsigned int)(v42 + 1);
          ++v28;
          v38 += 2 * v43;
          cbData += 2 * v43;
        }
        v44 = v38 < v39;
        v23 = (unsigned __int16)dwType;
        if ( v44 )
        {
          *(_WORD *)v38 = 0;
          cbData += 2;
        }
        goto LABEL_65;
      }
    }
    goto LABEL_62;
  }
  cbData = a7;
  if ( dwType == -268435453 )
  {
    v45 = 2 * a7 + 1;
    v46 = 2 * v45;
    v47 = (wchar_t *)Mem_AllocZero(2 * v45, 19i64, "ds\\dns\\server\\server\\registry.c", 1296);
    v11 = v47;
    if ( !v47 )
    {
LABEL_62:
      v13 = 14;
LABEL_63:
      v8 = a4;
      goto LABEL_35;
    }
    v13 = Reg_BinaryBlobToString(lpMultiByteStr, v47, a7, v45);
    if ( v13 )
      goto LABEL_63;
    cbData = v46;
    v23 = 1;
    v8 = a4;
    lpData = (const BYTE *)v11;
  }
  else
  {
    lpData = lpMultiByteStr;
  }
LABEL_71:
  if ( !cbData )
  {
LABEL_72:
    if ( lpData && v23 - 1 <= 1 )
    {
      do
        ++v24;
      while ( *(_WORD *)&lpData[2 * v24] );
      cbData = 2 * v24 + 2;
    }
  }
  v48 = RegSetValueExW(a2, (LPCWSTR)v8, 0, v23, lpData, cbData);
  v7 = v52;
LABEL_78:
  v13 = v48;
LABEL_79:
  if ( v50 )
    RegCloseKey(a2);
LABEL_81:
  if ( v7 )
    v13 = RpcUtil_SwitchSecurityContext(1);
  if ( v13 )
  {
    v51[0] = DNS_EVENT_REGISTRY_WRITE_FAILED;
    Eventlog_LogEvent((__int64)v51, v12, 0, 0i64, 0i64, v13, 0, 0i64);
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_s(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x20u,
        (__int64)&WPP_6ba06e9d807b3b6640892c588bf1aced_Traceguids,
        v8);
    }
  }
  else if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
         && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
         && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_sdD(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x21u,
      (__int64)&WPP_6ba06e9d807b3b6640892c588bf1aced_Traceguids,
      v8);
  }
  Mem_Free(v11, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\registry.c", 1383);
  return v13;
}
// 1400759B0: variable 'v12' is possibly undefined
// 140187688: using guessed type __int128 DNS_EVENT_REGISTRY_WRITE_FAILED;
// 140075578: using guessed type __int128 var_48[4];
##############################
Role: Let's assume that you are an advanced reverse engineer and you are reverse engineering a network driver using IDA Pro, and you are also familiar with the RFC documentation. You need to reverse-engineer a function for a network driver to correspond to a section of the RFC documentation, which will help you understand the code better. The driver you're reversing is Schannel.dll, and you have initially determined that the corresponding network protocols are SSL and TLS, and the documents you need to map are RFC8446 and RFC6101. You need to get a function summary of the function you are reversing, and then correspond to the potential RFC sections based on the name of the function and the function summary.
Function Background: The function is reverse engineered from the driver file Schannel.dll on Windows platform. Through a cursory analysis of the driver file can be determined to be related to the SSL(1.3), TLS(3.0) protocol, that is, with RFC8446, RFC6101 strong correlation.

Output Function Summary: Summarizes the function's functionality with several phrases instead of sentences, focuses on covering the function's control flow information, and highlights the protocol function points implemented by the function. Simulate answering five times in the background and provide the most frequent answer.

Retrieve document sections: giving matches for document sections(FunctionMatchRFCResult) that the code may related to. NOTE if the code is only business related(i.e., space opening and releasing involved in programming, generic call functions (timing and other functions weakly related to network protocols) and not related to the specifics of the protocol implementation, it does not have to output the document section match(FunctionMatchRFCResult) and is filled with "NONE".

Retrieve document sections Thinking Chain: The function code is matched with the RFC document section, and the thinking chain is provided to help you solve the problem better:
	1. Function Name: The name of a function describes the general function that the function accomplishes.
	2. Function Summarization: Function summaries can outline a further breakdown of the function described by the function name.
	3. Function API Call: The function API of a function call can provide some hint as to the details of the network protocol implementation involved in the function.
	4. Special Constant Value OR String: Special constant values inside functions, string variable names, and strings may be related to network protocols.
	5. Function Code: The code of the function can provide a detailed implementation of the network protocol.
Generate Function Information Collection with JSON Format:

{
	"FunctionIndex": "(FILL WITH "File count" with less than four bits are indexed with zeros to make up the four bits.)",
	"FunctionName": "(Full Function Code Name)",
	"FunctionSummarization": [
		"(Function Summary Phrase1)",
		"(Function Summary Phrase2)",
		"(...)"
	],
	"FunctionMatchRFCResult": [
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 1)",
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 2)",
		"(...)"
	],
}

ATTENTION: Remember YOU MUST ONLY output the Function Information Collection result.
