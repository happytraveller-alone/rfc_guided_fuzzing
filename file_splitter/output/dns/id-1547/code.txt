Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 1547
// Total lines: 118

//----- (00000001400C3240) ----------------------------------------------------
void __fastcall Zone_WriteBackDirtyZones(const unsigned __int16 **a1, int a2)
{
  int v2; // r12d
  const wchar_t *v5; // r9
  const unsigned __int16 **i; // rax
  unsigned int v7; // r9d
  __int64 v8; // rdx
  __int64 v9; // rcx
  __int64 *v10; // rdi
  int v11; // eax
  __int64 v12; // rcx
  __int64 v13; // rax
  __int64 v14; // rdx
  __int64 v15; // rdi
  unsigned __int16 *v16; // rax
  __int64 v17; // rbx
  __int128 v18; // [rsp+50h] [rbp-10h] BYREF
  unsigned __int16 *v19; // [rsp+90h] [rbp+30h] BYREF
  __int64 *v20; // [rsp+A0h] [rbp+40h] BYREF

  v2 = dword_1401B99EC;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x10) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
  {
    if ( a1 )
      v5 = *a1;
    else
      v5 = L".";
    WPP_SF_SD(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x44u, (__int64)&WPP_e9a0d5dea449334d7c383477da81f939_Traceguids, v5);
  }
  for ( i = Zone_ListGetNextZoneEx(a1, 0i64, 0); ; i = Zone_ListGetNextZoneEx(a1, (__int64 *)v17, 0) )
  {
    v17 = (__int64)i;
    if ( !i )
      break;
    if ( a2 || v2 && dword_1401B9714 > (unsigned int)g_NextZoneWritebackTime )
    {
      Zone_WriteBack((__int64)i, a2, 0);
      if ( *(_QWORD *)(v17 + 184) && *(_DWORD *)(v17 + 372) )
      {
        v8 = *(_QWORD *)(v17 + 168);
        v9 = *(_QWORD *)(v17 + 160);
        v20 = 0i64;
        LODWORD(v19) = 0;
        if ( (unsigned int)Get_SnapShot_ScopeMap(v9, v8, 1, v7, &v19, &v20) )
        {
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x10) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
          {
            WPP_SF_SD(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x104u,
              (__int64)&WPP_e9a0d5dea449334d7c383477da81f939_Traceguids,
              *(const unsigned __int16 **)(v17 + 192));
          }
          goto LABEL_24;
        }
        if ( !(_DWORD)v19 )
          goto LABEL_24;
        v10 = v20;
        if ( v20 )
        {
          do
          {
            if ( !*(_DWORD *)(*v10 + 432) )
              Zone_WriteBack(*v10, a2, 0);
            v10 = (__int64 *)v10[1];
          }
          while ( v10 );
LABEL_24:
          if ( v20 )
            Free_ScopeList(v20);
        }
      }
      if ( a2 )
        continue;
    }
    v11 = *(_DWORD *)(v17 + 396);
    if ( (v11 & 0x8000) == 0 && dword_1401B9984 )
    {
      if ( (v11 & 0xB000) == 0
        && (dword_1401B9984 & 1) != 0
        && *(_DWORD *)(v17 + 372) == 1
        && (v11 & 4) == 0
        && (*(_BYTE *)(v17 + 392) & 3) != 0 )
      {
        v12 = *(_QWORD *)(v17 + 336);
        if ( v12 )
        {
          v19 = 0i64;
          v13 = Lookup_NsHostNode(v12 + 76, 0x80000000, v17, &v19, 0i64, 0, 0i64, 0i64);
          v15 = v13;
          if ( !v13 || !RR_FindNextRecordEx(v13, 0, 1u, 0i64, 0, 0) && !RR_FindNextRecordEx(v15, 0, 0x1Cu, 0i64, 0, 0) )
          {
            v16 = *(unsigned __int16 **)(v17 + 24);
            v18 = DNS_EVENT_ZONE_BAD_PRIMARY_SERVER;
            v19 = v16;
            Eventlog_LogEvent((__int64)&v18, v14, 1u, &v19, (unsigned __int8 *)1, 0, 0, 0i64);
          }
        }
      }
      *(_DWORD *)(v17 + 396) |= 0x8000u;
    }
  }
  if ( !a1 && v2 && dword_1401B9714 > (unsigned int)g_NextZoneWritebackTime )
    g_NextZoneWritebackTime = dword_1401B9714 + 60 * v2;
  DNSSEC_Write5011State();
}
// 1400C333C: variable 'v7' is possibly undefined
// 1400C34D5: variable 'v14' is possibly undefined
// 1401879C8: using guessed type __int128 DNS_EVENT_ZONE_BAD_PRIMARY_SERVER;
// 1401B90B8: using guessed type int g_NextZoneWritebackTime;
// 1401B9714: using guessed type int dword_1401B9714;
// 1401B9984: using guessed type int dword_1401B9984;
// 1401B99EC: using guessed type int dword_1401B99EC;
