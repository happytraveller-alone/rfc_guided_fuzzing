Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 1364
// Total lines: 484

//----- (00000001400ACE3C) ----------------------------------------------------
__int64 Tcp_Receiver()
{
  int v0; // r15d
  int CurrentTimeInSeconds; // r14d
  CDnsClientSubnetRecordsTrie *v2; // rcx
  unsigned __int16 v3; // dx
  __int64 v4; // rdx
  fd_set *v5; // rax
  fd_set *v6; // rcx
  __int128 v7; // xmm1
  __int128 v8; // xmm0
  __int128 v9; // xmm1
  __int128 v10; // xmm0
  __int128 v11; // xmm1
  __int128 v12; // xmm0
  __int128 v13; // xmm1
  __int128 v14; // xmm1
  __int128 v15; // xmm0
  __int128 v16; // xmm1
  __int128 v17; // xmm0
  __int128 v18; // xmm1
  SOCKET v19; // rax
  __int64 v20; // rdx
  int v21; // edi
  __int64 v22; // rdx
  CDnsClientSubnetRecordsTrie *v23; // rcx
  __int64 v24; // rdx
  __int64 v25; // rcx
  __int64 v26; // rdx
  __int64 v27; // rcx
  int v28; // ebx
  int v29; // eax
  int Error; // eax
  __int64 v31; // rdx
  int v32; // ebx
  SOCKET v33; // rbx
  int v34; // edi
  __int64 *fd_array; // rbx
  int v36; // esi
  SOCKET *v37; // rdi
  __int64 v38; // rbx
  __int64 *v39; // rax
  __int64 fd_count; // rsi
  SOCKET v41; // rdi
  __int64 *v42; // rax
  __int64 *v43; // rbx
  _BYTE *TcpMessage; // rax
  __int64 v45; // rax
  unsigned __int16 v46; // dx
  __int64 v48[2]; // [rsp+40h] [rbp-28h] BYREF
  __int128 v49; // [rsp+50h] [rbp-18h] BYREF
  unsigned int v50; // [rsp+B0h] [rbp+48h] BYREF
  int v51; // [rsp+B8h] [rbp+50h]
  struct timeval timeout; // [rsp+C8h] [rbp+60h] BYREF

  v0 = 0;
  CurrentTimeInSeconds = Dns_GetCurrentTimeInSeconds();
  dword_1401B9714 = CurrentTimeInSeconds;
  v2 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x2000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    v3 = 10;
LABEL_5:
    WPP_SF_(*((_QWORD *)v2 + 7), v3, (__int64)&WPP_f9fc202ba18b3dea1e527425a0953a6a_Traceguids);
LABEL_6:
    v2 = WPP_GLOBAL_Control;
    goto LABEL_7;
  }
  while ( 1 )
  {
LABEL_7:
    v50 = 0;
    if ( g_fDnsServiceExit == 1 )
      goto LABEL_126;
    if ( !(unsigned int)Thread_ServiceCheck(1) )
      break;
    v4 = 18i64;
    v5 = &g_fdsListenTcp;
    v6 = &fdsReadTcp;
    do
    {
      v7 = *(_OWORD *)&v5->fd_array[1];
      *(_OWORD *)&v6->fd_count = *(_OWORD *)&v5->fd_count;
      v8 = *(_OWORD *)&v5->fd_array[3];
      *(_OWORD *)&v6->fd_array[1] = v7;
      v9 = *(_OWORD *)&v5->fd_array[5];
      *(_OWORD *)&v6->fd_array[3] = v8;
      v10 = *(_OWORD *)&v5->fd_array[7];
      *(_OWORD *)&v6->fd_array[5] = v9;
      v11 = *(_OWORD *)&v5->fd_array[9];
      *(_OWORD *)&v6->fd_array[7] = v10;
      v12 = *(_OWORD *)&v5->fd_array[11];
      *(_OWORD *)&v6->fd_array[9] = v11;
      v13 = *(_OWORD *)&v5->fd_array[13];
      v5 = (fd_set *)((char *)v5 + 128);
      *(_OWORD *)&v6->fd_array[11] = v12;
      v6 = (fd_set *)((char *)v6 + 128);
      *(_OWORD *)&v6[-1].fd_array[62] = v13;
      --v4;
    }
    while ( v4 );
    v14 = *(_OWORD *)&v5->fd_array[1];
    *(_OWORD *)&v6->fd_count = *(_OWORD *)&v5->fd_count;
    v15 = *(_OWORD *)&v5->fd_array[3];
    *(_OWORD *)&v6->fd_array[1] = v14;
    v16 = *(_OWORD *)&v5->fd_array[5];
    *(_OWORD *)&v6->fd_array[3] = v15;
    v17 = *(_OWORD *)&v5->fd_array[7];
    *(_OWORD *)&v6->fd_array[5] = v16;
    v18 = *(_OWORD *)&v5->fd_array[9];
    v19 = v5->fd_array[11];
    *(_OWORD *)&v6->fd_array[7] = v17;
    *(_OWORD *)&v6->fd_array[9] = v18;
    v6->fd_array[11] = v19;
    v21 = Tcp_ConnectionListFdSet(
            &fdsReadTcp.fd_count,
            &fdsWriteTcp.fd_count,
            &fdsExceptTcp.fd_count,
            CurrentTimeInSeconds,
            &v50);
    timeout.tv_sec = v50;
    timeout.tv_usec = 0;
    if ( v21 )
    {
      if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x2000) != 0 )
      {
        DnsPrint_Lock();
        v23 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x2000) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          WPP_SF_D(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0xCu,
            (__int64)&WPP_f9fc202ba18b3dea1e527425a0953a6a_Traceguids,
            timeout.tv_sec);
        }
        DnsPrint_FdSet((__int64)v23, v22, "TCP select() read fd_set:", (int *)&fdsReadTcp);
        DnsPrint_FdSet(v25, v24, "TCP select() write fd_set:", (int *)&fdsWriteTcp);
        DnsPrint_FdSet(v27, v26, "TCP select() except fd_set:", (int *)&fdsExceptTcp);
        DnsPrint_Unlock();
      }
      v28 = select(0, &fdsReadTcp, &fdsWriteTcp, &fdsExceptTcp, &timeout);
      if ( v28 )
        goto LABEL_26;
      CurrentTimeInSeconds = Dns_GetCurrentTimeInSeconds();
      dword_1401B9714 = CurrentTimeInSeconds;
      v2 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x2000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        v3 = 13;
        goto LABEL_5;
      }
    }
    else
    {
      if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x2000) != 0 )
        DnsPrint_FdSet(v50, v20, "TCP select() fd_set:", (int *)&fdsReadTcp);
      v28 = select(0, &fdsReadTcp, 0i64, 0i64, 0i64);
LABEL_26:
      CurrentTimeInSeconds = Dns_GetCurrentTimeInSeconds();
      v51 = CurrentTimeInSeconds;
      dword_1401B9714 = CurrentTimeInSeconds;
      v2 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x2000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_Dd(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0xEu,
          (__int64)&WPP_f9fc202ba18b3dea1e527425a0953a6a_Traceguids,
          CurrentTimeInSeconds);
        v2 = WPP_GLOBAL_Control;
      }
      if ( g_fDnsThreadAlert )
      {
        if ( g_fDnsServiceExit == 1 || (v29 = Thread_ServiceCheck(1), v2 = WPP_GLOBAL_Control, !v29) )
        {
          if ( v2 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)v2 + 17) & 0x2000) != 0
            && *((_BYTE *)v2 + 65) >= 4u )
          {
            v46 = 15;
LABEL_130:
            WPP_SF_(*((_QWORD *)v2 + 7), v46, (__int64)&WPP_f9fc202ba18b3dea1e527425a0953a6a_Traceguids);
            return 1i64;
          }
          return 1i64;
        }
      }
      if ( g_bTcpSelectWoken )
      {
        if ( v2 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)v2 + 17) & 0x2000) != 0
          && *((_BYTE *)v2 + 65) >= 4u )
        {
          WPP_SF_Dd(*((_QWORD *)v2 + 7), 0x10u, (__int64)&WPP_f9fc202ba18b3dea1e527425a0953a6a_Traceguids, v28);
          goto LABEL_6;
        }
      }
      else if ( v28 == -1 )
      {
        Error = WSAGetLastError();
        v32 = Error;
        v2 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x2000) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          WPP_SF_Dd(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x11u,
            (__int64)&WPP_f9fc202ba18b3dea1e527425a0953a6a_Traceguids,
            Error);
          v2 = WPP_GLOBAL_Control;
        }
        if ( ++v0 >= 20 )
        {
          if ( v0 == 20 )
          {
            v49 = DNS_EVENT_SELECT_CALL_FAILED;
            Eventlog_LogEvent((__int64)&v49, v31, 0, 0i64, 0i64, v32, 0, 0i64);
          }
          v33 = fdsReadTcp.fd_array[fdsReadTcp.fd_count - 2];
          if ( __WSAFDIsSet(v33, &g_fdsListenTcp) )
          {
            if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x2000) != 0
              && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
            {
              WPP_SF_(
                *((_QWORD *)WPP_GLOBAL_Control + 7),
                0x12u,
                (__int64)&WPP_f9fc202ba18b3dea1e527425a0953a6a_Traceguids);
            }
            Sleep(0xAu);
          }
          else
          {
            Tcp_ConnectionDeleteForSocket(v33, 0i64);
          }
          v2 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x2000) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            WPP_SF_Ddd(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x13u,
              (__int64)&WPP_f9fc202ba18b3dea1e527425a0953a6a_Traceguids,
              v0);
            goto LABEL_6;
          }
        }
      }
      else
      {
        v0 = 0;
        if ( v21 )
        {
          v34 = 0;
          if ( (int)fdsWriteTcp.fd_count > 0 )
          {
            fd_array = (__int64 *)fdsWriteTcp.fd_array;
            do
            {
              Tcp_ConnectionCompletion(*fd_array);
              ++v34;
              ++fd_array;
            }
            while ( v34 < (int)fdsWriteTcp.fd_count );
            v2 = WPP_GLOBAL_Control;
          }
          v36 = 0;
          if ( (int)fdsExceptTcp.fd_count > 0 )
          {
            v37 = fdsExceptTcp.fd_array;
            do
            {
              v38 = *v37;
              if ( v2 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                && (*((_DWORD *)v2 + 17) & 0x2000) != 0
                && *((_BYTE *)v2 + 65) >= 4u )
              {
                WPP_SF_D(*((_QWORD *)v2 + 7), 0x28u, (__int64)&WPP_9f19520dfb7e38d3377701f712cb1704_Traceguids, v38);
              }
              v48[1] = (__int64)v48;
              v48[0] = (__int64)v48;
              EnterCriticalSection(&mg_TcpConnectionListCS);
              v39 = Tcp_ConnectionFindForSocket(v38);
              if ( v39 )
              {
                tcpConnectionDelete(v39, (__int64)v48);
                LeaveCriticalSection(&mg_TcpConnectionListCS);
                callbackConnectFailureList(v48);
              }
              else
              {
                if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                  && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x2000) != 0
                  && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
                {
                  WPP_SF_D(
                    *((_QWORD *)WPP_GLOBAL_Control + 7),
                    0x29u,
                    (__int64)&WPP_9f19520dfb7e38d3377701f712cb1704_Traceguids,
                    v38);
                }
                LeaveCriticalSection(&mg_TcpConnectionListCS);
              }
              v2 = WPP_GLOBAL_Control;
              ++v36;
              ++v37;
            }
            while ( v36 < (int)fdsExceptTcp.fd_count );
            CurrentTimeInSeconds = v51;
          }
        }
        fd_count = (int)fdsReadTcp.fd_count;
        if ( fdsReadTcp.fd_count )
        {
          while ( 1 )
          {
            v41 = *((_QWORD *)&fdsReadTcp.fd_count + fd_count--);
            if ( v41 == g_TcpSelectWakeupSocket )
            {
              if ( v2 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                && (*((_DWORD *)v2 + 17) & 0x2000) != 0
                && *((_BYTE *)v2 + 65) >= 4u )
              {
                WPP_SF_D(*((_QWORD *)v2 + 7), 0x14u, (__int64)&WPP_f9fc202ba18b3dea1e527425a0953a6a_Traceguids, v41);
                v2 = WPP_GLOBAL_Control;
              }
              g_bTcpSelectWoken = 1;
              goto LABEL_118;
            }
            if ( __WSAFDIsSet(v41, &g_fdsListenTcp) )
              break;
            v42 = Tcp_ConnectionFindForSocket(v41);
            v43 = v42;
            if ( v42 )
            {
              if ( !v42[17] )
              {
                if ( *((_DWORD *)v42 + 36) != -1 )
                  *((_DWORD *)v42 + 36) = dword_1401B9714 + 60;
                TcpMessage = (_BYTE *)v42[27];
                if ( !TcpMessage )
                {
                  TcpMessage = Packet_AllocateTcpMessage(0);
                  if ( !TcpMessage )
                  {
                    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x2000) != 0
                      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
                    {
                      WPP_SF_Dq(
                        *((_QWORD *)WPP_GLOBAL_Control + 7),
                        0x1Cu,
                        (__int64)&WPP_9f19520dfb7e38d3377701f712cb1704_Traceguids,
                        v41);
                    }
                    tcpConnectionDelete(v43, 0i64);
LABEL_105:
                    v2 = WPP_GLOBAL_Control;
LABEL_106:
                    if ( v2 == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                      || (*((_DWORD *)v2 + 17) & 0x2000) == 0
                      || *((_BYTE *)v2 + 65) < 4u )
                    {
                      goto LABEL_118;
                    }
                    WPP_SF_D(*((_QWORD *)v2 + 7), 0x15u, (__int64)&WPP_f9fc202ba18b3dea1e527425a0953a6a_Traceguids, v41);
LABEL_117:
                    v2 = WPP_GLOBAL_Control;
                    goto LABEL_118;
                  }
                  *((_QWORD *)TcpMessage + 161) = v43;
                  *((_QWORD *)TcpMessage + 7) = v41;
                  *((_OWORD *)TcpMessage + 4) = *(_OWORD *)((char *)v43 + 148);
                  *((_OWORD *)TcpMessage + 5) = *(_OWORD *)((char *)v43 + 164);
                  *((_OWORD *)TcpMessage + 6) = *(_OWORD *)((char *)v43 + 180);
                  *((_OWORD *)TcpMessage + 7) = *(_OWORD *)((char *)v43 + 196);
                  v43[27] = (__int64)TcpMessage;
                }
                v45 = Tcp_ReceiveMessage((__int64)TcpMessage);
                if ( v45 && *(_BYTE *)(v45 + 1414) )
                {
                  if ( *(char *)(v45 + 6306) >= 0 )
                  {
                    _InterlockedIncrement(&dword_1401C867C);
                    _InterlockedIncrement((volatile signed __int32 *)pcTcpQueryReceived);
                    _InterlockedIncrement((volatile signed __int32 *)pcTotalQueryReceived);
                  }
                  else
                  {
                    _InterlockedIncrement(&dword_1401C8688);
                  }
                  Answer_ProcessMessage(v45, 0);
                }
                goto LABEL_117;
              }
              v2 = WPP_GLOBAL_Control;
              if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
              {
                if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x2000) != 0 && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
                {
                  WPP_SF_Dq(
                    *((_QWORD *)WPP_GLOBAL_Control + 7),
                    0x1Bu,
                    (__int64)&WPP_9f19520dfb7e38d3377701f712cb1704_Traceguids,
                    v41);
                  goto LABEL_105;
                }
                goto LABEL_106;
              }
            }
            else
            {
              v2 = WPP_GLOBAL_Control;
              if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
              {
                if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x2000) != 0 && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
                {
                  WPP_SF_D(
                    *((_QWORD *)WPP_GLOBAL_Control + 7),
                    0x1Au,
                    (__int64)&WPP_9f19520dfb7e38d3377701f712cb1704_Traceguids,
                    v41);
                  goto LABEL_105;
                }
                goto LABEL_106;
              }
            }
LABEL_118:
            if ( !fd_count )
            {
              CurrentTimeInSeconds = v51;
              v0 = 0;
              goto LABEL_7;
            }
          }
          Tcp_AcceptRequest(v41);
          goto LABEL_117;
        }
      }
    }
  }
  v2 = WPP_GLOBAL_Control;
LABEL_126:
  if ( v2 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)v2 + 17) & 0x2000) != 0
    && *((_BYTE *)v2 + 65) >= 4u )
  {
    v46 = 11;
    goto LABEL_130;
  }
  return 1i64;
}
// 1400ACFF2: variable 'v23' is possibly undefined
// 1400ACFF2: variable 'v22' is possibly undefined
// 1400AD005: variable 'v25' is possibly undefined
// 1400AD005: variable 'v24' is possibly undefined
// 1400AD014: variable 'v27' is possibly undefined
// 1400AD014: variable 'v26' is possibly undefined
// 1400AD09A: variable 'v20' is possibly undefined
// 1400AD219: variable 'v31' is possibly undefined
// 1401869B8: using guessed type __int128 DNS_EVENT_SELECT_CALL_FAILED;
// 1401B7EB4: using guessed type int g_fDnsThreadAlert;
// 1401B9714: using guessed type int dword_1401B9714;
// 1401B9A40: using guessed type int g_fDnsServiceExit;
// 1401C7A30: using guessed type int g_bTcpSelectWoken;
// 1401C8538: using guessed type __int64 pcTotalQueryReceived;
// 1401C8548: using guessed type __int64 pcTcpQueryReceived;
// 1401C867C: using guessed type int dword_1401C867C;
// 1401C8688: using guessed type int dword_1401C8688;
// 1400ACE3C: using guessed type __int128 var_18;
