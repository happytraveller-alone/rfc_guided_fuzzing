Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 516
// Total lines: 239

//----- (00000001400468E4) ----------------------------------------------------
__int64 __fastcall addProxiesGroup(LDAP *ld)
{
  ULONG v2; // edi
  WCHAR *v3; // rsi
  __int64 v4; // rbx
  size_t v5; // rbx
  int LastError; // eax
  _QWORD *v7; // rax
  DWORD TickCount; // eax
  WCHAR *v9; // rdx
  LDAP *v10; // rsi
  DWORD v11; // ebx
  LDAPMessage *entry; // rax
  struct berval **values_lenW; // rax
  struct berval **v14; // rbx
  void *v15; // rax
  struct ldap *v16; // r8
  ULONG attrsonly; // [rsp+28h] [rbp-D8h]
  PWSTR base; // [rsp+60h] [rbp-A0h] BYREF
  PLDAPMessage res; // [rsp+68h] [rbp-98h] BYREF
  struct berval **vals; // [rsp+70h] [rbp-90h]
  LDAP *lda; // [rsp+78h] [rbp-88h]
  __int64 v23[2]; // [rsp+80h] [rbp-80h] BYREF
  __int64 v24[2]; // [rsp+90h] [rbp-70h] BYREF
  __int64 v25[2]; // [rsp+A0h] [rbp-60h] BYREF
  __int64 v26[2]; // [rsp+B0h] [rbp-50h] BYREF
  PWSTR attrs[2]; // [rsp+C0h] [rbp-40h] BYREF
  int v28; // [rsp+D0h] [rbp-30h] BYREF
  const wchar_t *v29; // [rsp+D8h] [rbp-28h]
  __int64 *v30; // [rsp+E0h] [rbp-20h]
  int v31; // [rsp+E8h] [rbp-18h] BYREF
  const WCHAR *v32; // [rsp+F0h] [rbp-10h]
  __int64 *v33; // [rsp+F8h] [rbp-8h]
  int v34; // [rsp+100h] [rbp+0h] BYREF
  const wchar_t *v35; // [rsp+108h] [rbp+8h]
  __int64 *v36; // [rsp+110h] [rbp+10h]
  int v37; // [rsp+118h] [rbp+18h] BYREF
  const wchar_t *v38; // [rsp+120h] [rbp+20h]
  __int64 *v39; // [rsp+128h] [rbp+28h]
  LDAPModW *v40[6]; // [rsp+130h] [rbp+30h] BYREF
  WCHAR filter[64]; // [rsp+160h] [rbp+60h] BYREF
  wchar_t Buffer[128]; // [rsp+1E0h] [rbp+E0h] BYREF
  WCHAR v43[256]; // [rsp+2E0h] [rbp+1E0h] BYREF

  lda = ld;
  attrs[0] = (PWSTR)L"objectSid";
  v23[0] = (__int64)L"DnsUpdateProxy";
  v29 = L"samAccountName";
  v2 = 0;
  v30 = v23;
  v3 = 0i64;
  base = 0i64;
  v24[0] = (__int64)L"group";
  v32 = L"objectClass";
  v33 = v24;
  v25[0] = (__int64)Buffer;
  v35 = L"groupType";
  v36 = v25;
  v26[0] = (__int64)v43;
  v38 = L"Description";
  v39 = v26;
  v40[0] = (LDAPModW *)&v28;
  v40[1] = (LDAPModW *)&v31;
  v40[2] = (LDAPModW *)&v34;
  v40[3] = (LDAPModW *)&v37;
  res = 0i64;
  vals = 0i64;
  attrs[1] = 0i64;
  v23[1] = 0i64;
  v28 = 0;
  v24[1] = 0i64;
  v31 = 0;
  v25[1] = 0i64;
  v34 = 0;
  v26[1] = 0i64;
  v37 = 0;
  v40[4] = 0i64;
  if ( dword_1401B9750 || g_fDsReadOnlyDcMode )
    goto LABEL_48;
  if ( !ld )
  {
LABEL_4:
    v2 = 87;
    goto LABEL_48;
  }
  _ultow(0x80000002, Buffer, 10);
  sprintfSafe(filter, 0x40ui64, L"samAccountName=%s", L"DnsUpdateProxy");
  if ( isDNinDS(ld, DistinguishedName, 2u, filter, (char **)&base) )
  {
    v3 = base;
  }
  else
  {
    v4 = -1i64;
    do
      ++v4;
    while ( DistinguishedName[v4] );
    v5 = v4 + 45;
    base = (PWSTR)Mem_Alloc(2 * (int)v5, 9i64, "ds\\dns\\server\\server\\ds.c", 16382);
    v3 = base;
    if ( !base )
    {
      v2 = 14;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_D(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x19Eu,
          (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
          14);
      }
      goto LABEL_48;
    }
    sprintfSafe(base, v5, L"CN=%s,CN=Users,%s", L"DnsUpdateProxy", DistinguishedName);
    if ( !Dns_GetResourceString(0xC004u, v43, 255i64) )
    {
      LastError = GetLastError();
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_D(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x19Fu,
          (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
          LastError);
      }
      if ( (int)StringCchCopyW(
                  (char *)v43,
                  255i64,
                  (char *)L"DNS clients who are permitted to perform dynamic updates on behalf of some other clients (such"
                           " as DHCP servers).") < 0 )
        goto LABEL_4;
    }
    v2 = Dns_LdapAddExt(lda, v3, v40, 0i64, 0i64, attrsonly, 0);
    if ( v2 )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_Sq(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x1A0u,
          (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
          v3);
      }
      goto LABEL_48;
    }
  }
  v7 = g_pDynuproxSid;
  if ( g_pDynuproxSid )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x1A1u, (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids);
      v7 = g_pDynuproxSid;
    }
    Mem_Free(v7, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\ds.c", 16458);
    g_pDynuproxSid = 0i64;
  }
  TickCount = GetTickCount();
  v9 = v3;
  v10 = lda;
  v11 = TickCount;
  v2 = ldap_search_ext_sW(lda, v9, 0, g_szWildCardFilter, attrs, 0, 0i64, 0i64, &g_LdapTimeout, 0, &res);
  _InterlockedExchangeAdd(&dword_1401C7D48, GetTickCount() - v11);
  if ( v2 )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_D(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x1A3u,
        (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
        v2);
    }
    v16 = v10;
    v3 = base;
    v2 = Ds_ErrorHandler(v2, (__int64)base, v16, 0);
  }
  else
  {
    entry = ldap_first_entry(v10, res);
    if ( entry )
    {
      values_lenW = ldap_get_values_lenW(v10, entry, (const PWSTR)L"objectSid");
      vals = values_lenW;
      v14 = values_lenW;
      if ( values_lenW && *values_lenW )
      {
        v15 = Mem_Alloc((*values_lenW)->bv_len, 12i64, "ds\\dns\\server\\server\\ds.c", 16495);
        g_pDynuproxSid = v15;
        if ( v15 )
        {
          memcpy_0(v15, (*v14)->bv_val, (*v14)->bv_len);
          ldap_value_free_len(v14);
          vals = 0i64;
          ldap_msgfree(res);
          res = 0i64;
        }
        else
        {
          v2 = 14;
        }
      }
      else if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
             && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
             && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x1A2u, (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids);
      }
    }
    v3 = base;
  }
LABEL_48:
  Mem_Free(v3, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\ds.c", 16516);
  ldap_value_free_len(vals);
  ldap_msgfree(res);
  return v2;
}
// 140046BCB: variable 'attrsonly' is possibly undefined
// 1401883D8: using guessed type wchar_t aDescription[12];
// 14018C7A0: using guessed type wchar_t aDnsupdateproxy[15];
// 14018C7C0: using guessed type wchar_t aSamaccountname_0[15];
// 14018C7E0: using guessed type wchar_t aGroup[6];
// 14018C7F0: using guessed type wchar_t aGrouptype[10];
// 14018C808: using guessed type wchar_t aSamaccountname[18];
// 14018C830: using guessed type wchar_t aCnSCnUsersS[18];
// 1401B8C94: using guessed type int g_fDsReadOnlyDcMode;
// 1401B9750: using guessed type int dword_1401B9750;
// 1401C7D48: using guessed type int dword_1401C7D48;
##############################
Role: Let's assume that you are an advanced reverse engineer and you are reverse engineering a network driver using IDA Pro, and you are also familiar with the RFC documentation. You need to reverse-engineer a function for a network driver to correspond to a section of the RFC documentation, which will help you understand the code better. The driver you're reversing is Schannel.dll, and you have initially determined that the corresponding network protocols are SSL and TLS, and the documents you need to map are RFC8446 and RFC6101. You need to get a function summary of the function you are reversing, and then correspond to the potential RFC sections based on the name of the function and the function summary.
Function Background: The function is reverse engineered from the driver file Schannel.dll on Windows platform. Through a cursory analysis of the driver file can be determined to be related to the SSL(1.3), TLS(3.0) protocol, that is, with RFC8446, RFC6101 strong correlation.

Output Function Summary: Summarizes the function's functionality with several phrases instead of sentences, focuses on covering the function's control flow information, and highlights the protocol function points implemented by the function. Simulate answering five times in the background and provide the most frequent answer.

Retrieve document sections: giving matches for document sections(FunctionMatchRFCResult) that the code may related to. NOTE if the code is only business related(i.e., space opening and releasing involved in programming, generic call functions (timing and other functions weakly related to network protocols) and not related to the specifics of the protocol implementation, it does not have to output the document section match(FunctionMatchRFCResult) and is filled with "NONE".

Retrieve document sections Thinking Chain: The function code is matched with the RFC document section, and the thinking chain is provided to help you solve the problem better:
	1. Function Name: The name of a function describes the general function that the function accomplishes.
	2. Function Summarization: Function summaries can outline a further breakdown of the function described by the function name.
	3. Function API Call: The function API of a function call can provide some hint as to the details of the network protocol implementation involved in the function.
	4. Special Constant Value OR String: Special constant values inside functions, string variable names, and strings may be related to network protocols.
	5. Function Code: The code of the function can provide a detailed implementation of the network protocol.
Generate Function Information Collection with JSON Format:

{
	"FunctionIndex": "(FILL WITH "File count" with less than four bits are indexed with zeros to make up the four bits.)",
	"FunctionName": "(Full Function Code Name)",
	"FunctionSummarization": [
		"(Function Summary Phrase1)",
		"(Function Summary Phrase2)",
		"(...)"
	],
	"FunctionMatchRFCResult": [
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 1)",
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 2)",
		"(...)"
	],
}

ATTENTION: Remember YOU MUST ONLY output the Function Information Collection result.
