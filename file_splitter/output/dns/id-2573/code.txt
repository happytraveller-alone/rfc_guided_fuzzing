Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 2573
// Total lines: 141

//----- (00000001401301D8) ----------------------------------------------------
struct CDnsPolicy_CriteriaTree *__fastcall CDnsPolicy_CriteriaNode::GetNextCriteriaTree(
        CDnsPolicy_CriteriaNode *this,
        unsigned __int16 a2,
        int a3,
        __int64 a4)
{
  unsigned __int16 v5; // r10
  _QWORD *v6; // rax
  _QWORD *v7; // rbx
  int v8; // esi
  int v9; // edx
  CDnsPolicy_QTypeCriteriaTree *v10; // rdi
  int v11; // esi
  int v12; // esi
  int v13; // esi
  int v14; // esi
  int v15; // esi
  CDnsPolicy_TimeofDayCriteriaTree *v16; // rax
  CDnsPolicy_QTypeCriteriaTree *v17; // rax
  CDnsPolicy_TimeofDayCriteriaTree *v18; // rax
  CDnsPolicy_InterfaceCriteriaTree *v19; // rax
  CDnsPolicy_TimeofDayCriteriaTree *v20; // rax
  CDnsPolicy_TimeofDayCriteriaTree *v21; // rax
  CDnsPolicy_SubnetRecordCriteriaTree *v22; // rax
  CDnsPolicy_TimeofDayCriteriaTree *v24; // [rsp+50h] [rbp+8h] BYREF

  v5 = 1;
  v6 = (_QWORD *)*((_QWORD *)this + 3);
  v7 = (_QWORD *)*v6;
  if ( (_QWORD *)*v6 != v6 )
  {
    v8 = a2;
    v9 = a2 - *((unsigned __int16 *)this + 24);
    while ( v5 != v9 )
    {
      ++v5;
      v7 = (_QWORD *)*v7;
      if ( v7 == v6 )
        return (struct CDnsPolicy_CriteriaTree *)v7[2];
    }
    v10 = 0i64;
    if ( !v7[2] )
    {
      if ( a3 )
      {
        LODWORD(v24) = -1;
        acquireWrite(a4, 0x2710u, (unsigned int *)&v24);
        if ( v8 )
        {
          v11 = v8 - 1;
          if ( v11 )
          {
            v12 = v11 - 1;
            if ( v12 )
            {
              v13 = v12 - 1;
              if ( v13 )
              {
                v14 = v13 - 1;
                if ( !v14 )
                {
                  v18 = (CDnsPolicy_TimeofDayCriteriaTree *)operator new(0x10ui64);
                  v24 = v18;
                  if ( v18 )
                  {
                    *(_QWORD *)v18 = &CDnsPolicy_FQDNCriteriaTree::`vftable';
                    *((_QWORD *)v18 + 1) = 0i64;
                  }
                  else
                  {
                    v18 = 0i64;
                  }
                  v7[2] = v18;
                  goto LABEL_37;
                }
                v15 = v14 - 1;
                if ( v15 )
                {
                  if ( v15 != 1 )
                  {
LABEL_37:
                    Lock_ReleaseWrite(a4);
                    return (struct CDnsPolicy_CriteriaTree *)v7[2];
                  }
                  v16 = (CDnsPolicy_TimeofDayCriteriaTree *)operator new(0x10ui64);
                  v24 = v16;
                  if ( v16 )
                    v10 = CDnsPolicy_TimeofDayCriteriaTree::CDnsPolicy_TimeofDayCriteriaTree(v16);
                }
                else
                {
                  v17 = (CDnsPolicy_QTypeCriteriaTree *)operator new(0x10ui64);
                  v24 = v17;
                  if ( v17 )
                    v10 = CDnsPolicy_QTypeCriteriaTree::CDnsPolicy_QTypeCriteriaTree(v17);
                }
              }
              else
              {
                v19 = (CDnsPolicy_InterfaceCriteriaTree *)operator new(0x18ui64);
                v24 = v19;
                if ( v19 )
                  v10 = CDnsPolicy_InterfaceCriteriaTree::CDnsPolicy_InterfaceCriteriaTree(v19);
              }
            }
            else
            {
              v20 = (CDnsPolicy_TimeofDayCriteriaTree *)operator new(0x18ui64);
              v24 = v20;
              if ( v20 )
                v10 = (CDnsPolicy_QTypeCriteriaTree *)CDnsPolicy_ProtocolCriteriaTree::CDnsPolicy_ProtocolCriteriaTree(
                                                        (__int64)v20,
                                                        2);
            }
          }
          else
          {
            v21 = (CDnsPolicy_TimeofDayCriteriaTree *)operator new(0x18ui64);
            v24 = v21;
            if ( v21 )
              v10 = (CDnsPolicy_QTypeCriteriaTree *)CDnsPolicy_ProtocolCriteriaTree::CDnsPolicy_ProtocolCriteriaTree(
                                                      (__int64)v21,
                                                      1);
          }
        }
        else
        {
          v22 = (CDnsPolicy_SubnetRecordCriteriaTree *)operator new(0x10ui64);
          v24 = v22;
          if ( v22 )
            v10 = CDnsPolicy_SubnetRecordCriteriaTree::CDnsPolicy_SubnetRecordCriteriaTree(v22);
        }
        v7[2] = v10;
        goto LABEL_37;
      }
    }
  }
  return (struct CDnsPolicy_CriteriaTree *)v7[2];
}
// 140171AD0: using guessed type void *CDnsPolicy_FQDNCriteriaTree::`vftable';
