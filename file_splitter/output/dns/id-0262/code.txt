Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 262
// Total lines: 258

//----- (0000000140021FA4) ----------------------------------------------------
__int64 __fastcall normalShutdown(DWORD a1)
{
  __int64 *v2; // rbx
  __int64 *v3; // rax
  __int64 *i; // rax
  BCRYPT_ALG_HANDLE *v5; // rbx
  __int64 v6; // rdi
  int v7; // r9d
  unsigned __int64 v8; // rbx
  CDnsClientSubnetRecordsTrie *v9; // rcx
  __int64 result; // rax

  indicateShutdown();
  if ( !g_bDoReload )
  {
    DnsServiceStatus.dwCurrentState = 3;
    DnsServiceStatus.dwCheckPoint = 1;
    DnsServiceStatus.dwWaitHint = 30000;
    DnsServiceStatus.dwWin32ExitCode = a1;
    DnsServiceStatus.dwServiceSpecificExitCode = a1;
    announceServiceStatus();
  }
  Thread_ShutdownWait();
  EnterCriticalSection(&g_csRFC5011_Trust_Points);
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x100000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 3u )
  {
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x55u, (__int64)&WPP_4831604f5a2431d08120905ab66c1365_Traceguids);
  }
  v2 = *(__int64 **)qword_1401B9288;
  while ( v2 != (__int64 *)qword_1401B9288 )
  {
    TrustPoint::DescheduleActiveRefresh((LPCRITICAL_SECTION)v2[36]);
    if ( !*((_BYTE *)v2 + 297) )
    {
      v3 = (__int64 *)v2[2];
      if ( *((_BYTE *)v3 + 297) )
      {
        for ( i = (__int64 *)v2[1]; !*((_BYTE *)i + 297) && v2 == (__int64 *)i[2]; i = (__int64 *)i[1] )
          v2 = i;
        v2 = i;
      }
      else
      {
        do
        {
          v2 = v3;
          v3 = (__int64 *)*v3;
        }
        while ( !*((_BYTE *)v3 + 297) );
      }
    }
  }
  LeaveCriticalSection(&g_csRFC5011_Trust_Points);
  Plugin_Cleanup();
  Rpc_Shutdown();
  if ( dword_1401B9708 )
  {
    Zone_WriteBackDirtyVirtualizationInstances(1);
    if ( !dword_1401B9728 )
    {
      if ( dword_1401B9720 )
        File_WriteBootFile();
    }
  }
  if ( hDnsContinueEvent )
  {
    CloseHandle(hDnsContinueEvent);
    hDnsContinueEvent = 0i64;
  }
  if ( hDnsShutdownEvent )
  {
    CloseHandle(hDnsShutdownEvent);
    hDnsShutdownEvent = 0i64;
  }
  if ( g_fSecurityPackageInitialized )
  {
    if ( g_hLibSecurity )
      FreeLibrary(g_hLibSecurity);
    if ( g_hLibNtdsa )
      FreeLibrary(g_hLibNtdsa);
    DeleteCriticalSection(&SecurityContextListCS);
  }
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 25) >= 4u )
  {
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0xBu, (__int64)&WPP_c53e2308f6cf3329db3757b8a77c9921_Traceguids);
  }
  EnterCriticalSection(&DnsVal_Lock);
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 25) >= 4u )
  {
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0xAu, (__int64)&WPP_947e11a9df68314c5ba2a482e5517539_Traceguids);
  }
  if ( g_hAlg )
    BCryptCloseAlgorithmProvider(g_hAlg, 0);
  g_fNSECCryptoInited = 0;
  v5 = (BCRYPT_ALG_HANDLE *)&unk_1401B6858;
  g_hAlg = 0i64;
  v6 = 6i64;
  do
  {
    if ( *((_BYTE *)v5 - 16) )
    {
      if ( *(v5 - 4) )
      {
        BCryptCloseAlgorithmProvider(*v5, 0);
        *v5 = 0i64;
        *((_DWORD *)v5 + 2) = 0;
        *((_DWORD *)v5 + 3) = 0;
      }
      if ( *(v5 - 6) )
      {
        BCryptCloseAlgorithmProvider(*(v5 - 1), 0);
        *(v5 - 1) = 0i64;
      }
      *((_BYTE *)v5 - 16) = 0;
    }
    v5 += 9;
    --v6;
  }
  while ( v6 );
  LeaveCriticalSection(&DnsVal_Lock);
  DnsDeleteCriticalSection(&DnsVal_Lock);
  WSACleanup();
  if ( g_Database )
    Lock_Destroy(DbaseLock);
  if ( hRemoteLock )
  {
    Lock_Destroy(hRemoteLock);
    hRemoteLock = 0i64;
  }
  DnsRq_Cleanup();
  Wins_Shutdown();
  Nbstat_Shutdown();
  PQ_CleanupPacketQueueHandles(g_UpdateQueue);
  PQ_CleanupPacketQueueHandles(g_UpdateForwardingQueue);
  PQ_CleanupPacketQueueHandles(g_SecureNegoQueue);
  Lock_Destroy(g_hPeerUpdateLock);
  Zone_VirtualizationInstanceListShutdown();
  PQ_CleanupPacketQueueHandles(g_SecondaryQueue);
  CloseHandle(g_hWakeSecondaryEvent);
  g_hWakeSecondaryEvent = 0i64;
  Tcp_ConnectionListShutdown();
  if ( dword_1401B9954 )
  {
    v7 = _InterlockedDecrement(&g_liDpInitialized);
    if ( v7 )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_D(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0xA0u,
          (__int64)&WPP_0f7f6e0c97433b7ed77e9ce4b2e20f93_Traceguids,
          v7);
      }
      _InterlockedIncrement(&g_liDpInitialized);
    }
    else
    {
      DnsDeleteCriticalSection(&g_DpCS);
    }
  }
  if ( _InterlockedExchangeAdd(&g_VersionInitialized, 0xFFFFFFFF) == 1 )
    DnsDeleteCriticalSection(&g_VersionCritSec);
  DnsDeleteCriticalSection(&g_csGlobalNames);
  v8 = 8i64 * (unsigned int)g_dwSocketPoolSocketCount;
  if ( v8 <= 0xFFFFFFFF )
  {
    if ( g_pUdpSocketPool4 )
    {
      Mem_Free((_QWORD *)g_pUdpSocketPool4, (unsigned int)v8, 17i64, (__int64)"ds\\dns\\server\\server\\socket.c", 3072);
      g_pUdpSocketPool4 = 0i64;
    }
    if ( g_pUdpSocketPool6 )
    {
      Mem_Free((_QWORD *)g_pUdpSocketPool6, (unsigned int)v8, 17i64, (__int64)"ds\\dns\\server\\server\\socket.c", 3078);
      g_pUdpSocketPool6 = 0i64;
    }
    goto LABEL_73;
  }
  v9 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x2000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_D(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x3Eu, (__int64)&WPP_0e6d7f56a09830e1f84833a99c0e37ce_Traceguids, 87);
LABEL_73:
    v9 = WPP_GLOBAL_Control;
  }
  if ( g_hOlsKeyRolloverEvent )
  {
    CloseHandle(g_hOlsKeyRolloverEvent);
    v9 = WPP_GLOBAL_Control;
    g_hOlsKeyRolloverEvent = 0i64;
  }
  if ( g_hOlsResignChangeEvent )
  {
    CloseHandle(g_hOlsResignChangeEvent);
    v9 = WPP_GLOBAL_Control;
    g_hOlsResignChangeEvent = 0i64;
  }
  if ( v9 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)v9 + 17) & 0x4000) != 0
    && *((_BYTE *)v9 + 65) >= 4u )
  {
    WPP_SF_(*((_QWORD *)v9 + 7), 0xCu, (__int64)&WPP_66b23b5e6a3832dd7e122b01e64c7d31_Traceguids);
  }
  Lock_Destroy((__int64)g_DynamicForwardersLock);
  if ( g_isRegisteredForUTC == 1 )
  {
    EventUnregister(RegHandle);
    RegHandle = 0i64;
    dword_1401B5F20 = 0;
    DnsDeleteCriticalSection(&csTelemetry);
  }
  Log_Shutdown();
  if ( g_hCryptProv )
  {
    CryptReleaseContext(g_hCryptProv, 0);
    g_hCryptProv = 0i64;
  }
  result = DnsDeleteCriticalSection(&g_csDnsRand);
  g_wRandArrayIdx = -1;
  return result;
}
// 1401B5F20: using guessed type int dword_1401B5F20;
// 1401B8C40: using guessed type int g_VersionInitialized;
// 1401B8C64: using guessed type int g_bDoReload;
// 1401B8D30: using guessed type int g_liDpInitialized;
// 1401B9028: using guessed type __int64 hRemoteLock;
// 1401B90B0: using guessed type __int64 g_hPeerUpdateLock;
// 1401B9170: using guessed type void *g_DynamicForwardersLock;
// 1401B9190: using guessed type int g_isRegisteredForUTC;
// 1401B9288: using guessed type __int64 qword_1401B9288;
// 1401B9708: using guessed type int dword_1401B9708;
// 1401B9720: using guessed type int dword_1401B9720;
// 1401B9728: using guessed type int dword_1401B9728;
// 1401B9954: using guessed type int dword_1401B9954;
// 1401B9DF0: using guessed type int g_fNSECCryptoInited;
// 1401B9E3C: using guessed type int g_fSecurityPackageInitialized;
// 1401BA10C: using guessed type int g_wRandArrayIdx;
// 1401BA370: using guessed type __int64 g_SecondaryQueue;
// 1401BA4A0: using guessed type __int64 g_SecureNegoQueue;
// 1401BA4A8: using guessed type __int64 g_UpdateQueue;
// 1401BA4B0: using guessed type __int64 g_UpdateForwardingQueue;
// 1401C8840: using guessed type __int64 g_pUdpSocketPool4;
// 1401C8848: using guessed type __int64 g_pUdpSocketPool6;
// 1401C8850: using guessed type int g_dwSocketPoolSocketCount;
// 1401EC5E8: using guessed type __int64 DbaseLock;
// 1401EC600: using guessed type __int64 g_Database;
