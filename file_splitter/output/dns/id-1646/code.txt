Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 1646
// Total lines: 166

//----- (00000001400D04CC) ----------------------------------------------------
__int64 __fastcall Rpc_ZoneResetToDsPrimary(__int64 a1, __int64 a2, __int64 a3, int a4, char *a5, int a6)
{
  int v6; // edi
  int v7; // eax
  int v8; // esi
  CDnsClientSubnetRecordsTrie *v10; // rcx
  int v11; // edx
  char *v13; // rcx
  int v14; // ecx
  unsigned int v15; // edi
  __int64 v16; // rcx
  __int64 v17; // rcx
  unsigned int v18; // eax
  __int64 v19; // rdx
  __int64 *i; // rsi
  int v21; // eax
  __int64 *v22; // [rsp+48h] [rbp-19h] BYREF
  unsigned __int16 *v23; // [rsp+50h] [rbp-11h]
  __int64 v24; // [rsp+58h] [rbp-9h] BYREF
  unsigned __int16 *v25[3]; // [rsp+60h] [rbp-1h] BYREF
  __int128 v26[3]; // [rsp+78h] [rbp+17h] BYREF
  __int64 v27; // [rsp+B8h] [rbp+57h] BYREF
  unsigned int v28; // [rsp+C0h] [rbp+5Fh]
  unsigned int v29; // [rsp+C8h] [rbp+67h]
  int v30; // [rsp+D0h] [rbp+6Fh]

  v30 = a4;
  v29 = a3;
  v28 = a2;
  v23 = 0i64;
  v6 = a4;
  v7 = *(_DWORD *)(a1 + 372);
  v8 = a2;
  v22 = 0i64;
  LODWORD(v27) = v7;
  v10 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_sDDDs(*((_QWORD *)WPP_GLOBAL_Control + 7), a2, a3, *(const char **)(a1 + 16), a2, a3, a4, (__int64)a5);
    v10 = WPP_GLOBAL_Control;
  }
  v11 = *(_DWORD *)(a1 + 388);
  if ( (v11 & 1) != 0 && (v11 & 6) != 0 )
    return 9568i64;
  if ( (*(_DWORD *)(a1 + 388) & 1) != 0 || *(_DWORD *)(a1 + 372) < 2u )
  {
    if ( (unsigned int)(*(_DWORD *)(a1 + 372) - 3) <= 1 )
      goto LABEL_63;
    v13 = *(char **)(a1 + 144);
    if ( v13 )
      v23 = (unsigned __int16 *)Dns_StringCopyAllocate(v13, 0, 1i64, 1);
    v14 = *(_DWORD *)(a1 + 372);
    if ( v14 && (!*(_QWORD *)(a1 + 336) || (*(_DWORD *)(a1 + 396) & 0x4000) != 0) )
    {
      v15 = 13;
      goto LABEL_64;
    }
    if ( (*(_BYTE *)(a1 + 388) & 1) != 0 )
    {
      if ( (v14 & 0xFFFFFFFD) != 0 )
      {
        if ( *(_QWORD *)(a1 + 192) )
        {
          v16 = a1;
          if ( *(_QWORD *)(a1 + 328) )
            v16 = *(_QWORD *)(a1 + 328);
          if ( *(_QWORD *)(a1 + 848) != *(_QWORD *)(v16 + 848) )
            goto LABEL_37;
        }
        if ( (unsigned int)Dp_FindPartitionForZone(v6, a5, 0, &v24)
          || (v17 = *(_QWORD *)(a1 + 848), v24 != v17)
          && (v24 || v17 && (*(_BYTE *)(v17 + 100) & 2) == 0)
          && (v17 || v24 && (*(_BYTE *)(v24 + 100) & 2) == 0) )
        {
LABEL_37:
          v15 = 9553;
          goto LABEL_64;
        }
        goto LABEL_36;
      }
LABEL_63:
      v15 = 9611;
      goto LABEL_64;
    }
    if ( (unsigned int)Ds_OpenServer(0) )
    {
      v15 = 9717;
      goto LABEL_64;
    }
    if ( *(_DWORD *)(a1 + 372) )
      *(_DWORD *)(a1 + 372) = 1;
    *(_DWORD *)(a1 + 388) |= 1u;
    if ( *(_DWORD *)(a1 + 372) )
    {
      v15 = Zone_ResetType(a1, 1, 0i64, a6 | 0x10u);
      if ( v15 )
        goto LABEL_62;
      v6 = v30;
    }
    v15 = Zone_DatabaseSetup(a1, 1u, 0i64, 0, v8 & 0x10000000, 0i64, v6, a5);
    if ( !v15 )
    {
      v18 = (v8 & 0x10) != 0 ? Zone_Load(a1, 0) : Ds_WriteZoneToDs(a1, v8, v29);
      v15 = v18;
      if ( !v18 )
      {
        File_MoveToBackupDirectory((wchar_t *)a1, v23);
        if ( !*(_QWORD *)(a1 + 192) && *(_QWORD *)(a1 + 184) )
        {
          v15 = ZoneScopes_LockAll(a1, 1, 10000, &v27, &v22);
          if ( v15 )
          {
            Free_ScopeList(v22);
            return v15;
          }
          for ( i = v22; i; i = (__int64 *)i[1] )
          {
            v27 = *i;
            v15 = Rpc_ZoneResetToDsPrimary(v27, v28, v29, v30, (__int64)a5, a6);
            if ( v15 )
            {
              v25[0] = *(unsigned __int16 **)(a1 + 24);
              v26[0] = DNS_EVENT_ZONE_CONVERSION_FAILURE;
              v25[1] = *(unsigned __int16 **)(v27 + 192);
              Eventlog_LogEvent((__int64)v26, v19, 2u, v25, 0i64, 0, 0, 0i64);
              break;
            }
          }
          ZoneScopes_UnLockAll(a1, v19, &v22);
          Free_ScopeList(v22);
          if ( v15 )
          {
LABEL_64:
            Mem_Free(v23, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\zonerpc.c", 1272);
            return v15;
          }
        }
LABEL_36:
        v15 = 0;
        goto LABEL_64;
      }
    }
LABEL_62:
    v21 = v27;
    *(_DWORD *)(a1 + 388) &= ~1u;
    *(_DWORD *)(a1 + 372) = v21;
    goto LABEL_64;
  }
  if ( v10 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)v10 + 68) & 4) != 0
    && *((_BYTE *)v10 + 65) >= 4u )
  {
    WPP_SF_s(
      *((_QWORD *)v10 + 7),
      0x15u,
      (__int64)&WPP_5efa35e0870730ffd13051b9da022308_Traceguids,
      *(const char **)(a1 + 16));
  }
  return 9611i64;
}
// 1400D0840: variable 'v19' is possibly undefined
// 140185FC8: using guessed type __int128 DNS_EVENT_ZONE_CONVERSION_FAILURE;
// 1400D04CC: using guessed type __int128 var_30[3];
