Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 2411
// Total lines: 196

//----- (00000001401260A0) ----------------------------------------------------
_BYTE *__fastcall DnsSign::CDnsKeyPair::GenerateSignature(DnsSign::CDnsKeyPair *this, __int64 a2, unsigned int a3)
{
  int v6; // r9d
  BCRYPT_ALG_HANDLE v7; // rbx
  BCRYPT_ALG_HANDLE v8; // rax
  u_short KeyTag; // ax
  __int64 v10; // rdx
  unsigned __int16 v11; // si
  NTSTATUS v12; // eax
  unsigned __int8 *v13; // rdx
  NTSTATUS v14; // eax
  unsigned __int8 *v15; // rdx
  char v16; // r8
  _BYTE *v17; // rax
  unsigned __int8 Algorithm; // al
  __int64 v19; // r10
  _BYTE *v20; // rbx
  BCRYPT_HASH_HANDLE hHash_8[6]; // [rsp+38h] [rbp-D0h] BYREF
  __int128 pExceptionObject_8; // [rsp+68h] [rbp-A0h] BYREF
  __int64 v24; // [rsp+78h] [rbp-90h]
  char v25[56]; // [rsp+A0h] [rbp-68h] BYREF
  char v26[56]; // [rsp+D8h] [rbp-30h] BYREF

  hHash_8[5] = (BCRYPT_HASH_HANDLE)-2i64;
  v6 = *((unsigned __int8 *)this + 9);
  if ( v6 == 5 || v6 == 7 )
  {
    v7 = DnsSign::g_CNGAlgMgr;
    if ( !DnsSign::g_CNGAlgMgr )
    {
      v8 = DnsSign::OpenBCryptAlgorithmProvider(L"SHA1", (const unsigned __int16 *)a2);
      DnsSign::g_CNGAlgMgr = v8;
      goto LABEL_20;
    }
    goto LABEL_21;
  }
  if ( v6 == 8 )
    goto LABEL_16;
  if ( v6 != 10 )
  {
    if ( v6 != 13 )
    {
      if ( v6 != 14 )
      {
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 7) & 0x100000) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 25) >= 4u )
        {
          WPP_SF_D(
            *((_QWORD *)WPP_GLOBAL_Control + 2),
            0xBu,
            (__int64)&WPP_a9354bd5cd823ab7126e1b8d4348d392_Traceguids,
            v6);
        }
        DnsSign::CRunTimeException::CRunTimeException((DnsSign::CRunTimeException *)v25, a2, 2);
        DnsSign::CException::AppendErrorMessageByID((DnsSign::CException *)v25, 0xD6D89u);
        DnsSign::CRunTimeException::CRunTimeException(
          (DnsSign::CRunTimeException *)&pExceptionObject_8,
          (const struct DnsSign::CRunTimeException *)v25);
        CxxThrowException_0(&pExceptionObject_8, (_ThrowInfo *)&TI2_AVCRunTimeException_DnsSign__);
      }
      v7 = qword_1401B84A0;
      if ( !qword_1401B84A0 )
      {
        v8 = DnsSign::OpenBCryptAlgorithmProvider(L"SHA384", (const unsigned __int16 *)a2);
        qword_1401B84A0 = v8;
LABEL_20:
        v7 = v8;
        goto LABEL_21;
      }
      goto LABEL_21;
    }
LABEL_16:
    v7 = hAlgorithm;
    if ( !hAlgorithm )
    {
      v8 = DnsSign::OpenBCryptAlgorithmProvider(L"SHA256", (const unsigned __int16 *)a2);
      hAlgorithm = v8;
      goto LABEL_20;
    }
    goto LABEL_21;
  }
  v7 = qword_1401B8498;
  if ( !qword_1401B8498 )
  {
    v8 = DnsSign::OpenBCryptAlgorithmProvider(L"SHA512", (const unsigned __int16 *)a2);
    qword_1401B8498 = v8;
    goto LABEL_20;
  }
LABEL_21:
  *(_BYTE *)(*(_QWORD *)a2 + 2i64) = *((_BYTE *)this + 9);
  KeyTag = DnsSign::CDnsKeyPair::GetKeyTag(this);
  *(_WORD *)(*(_QWORD *)a2 + 16i64) = htons(KeyTag);
  switch ( *((_BYTE *)this + 9) )
  {
    case 5:
    case 7:
      v11 = word_1401B84A8;
      break;
    case 8:
      goto LABEL_34;
    case 0xA:
      v11 = word_1401B84AC;
      break;
    case 0xD:
LABEL_34:
      v11 = word_1401B84AA;
      break;
    case 0xE:
      v11 = word_1401B84AE;
      break;
    default:
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 7) & 0x100000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 25) >= 4u )
      {
        WPP_SF_D(
          *((_QWORD *)WPP_GLOBAL_Control + 2),
          0xEu,
          (__int64)&WPP_a9354bd5cd823ab7126e1b8d4348d392_Traceguids,
          *((unsigned __int8 *)this + 9));
      }
      DnsSign::CRunTimeException::CRunTimeException((DnsSign::CRunTimeException *)v25, v10, 2);
      DnsSign::CException::AppendErrorMessageByID((DnsSign::CException *)v25, 0xD6D89u);
      DnsSign::CRunTimeException::CRunTimeException(
        (DnsSign::CRunTimeException *)&pExceptionObject_8,
        (const struct DnsSign::CRunTimeException *)v25);
      CxxThrowException_0(&pExceptionObject_8, (_ThrowInfo *)&TI2_AVCRunTimeException_DnsSign__);
  }
  pExceptionObject_8 = 0i64;
  v24 = 0i64;
  std::vector<unsigned char>::resize((__int64 *)&pExceptionObject_8, v11);
  memset(hHash_8, 0, 32);
  DnsSign::CHashObject::Start(hHash_8, v7);
  v12 = BCryptHashData(hHash_8[0], *(PUCHAR *)a2, *(_DWORD *)(a2 + 8) - *(_DWORD *)a2, 0);
  if ( v12 < 0 )
    DnsSign::CHashObject::HashData((DnsSign::CHashObject *)(unsigned int)v12, v13);
  v14 = BCryptFinishHash(hHash_8[0], (PUCHAR)pExceptionObject_8, v11, 0);
  if ( v14 < 0 )
    DnsSign::CHashObject::End((DnsSign::CHashObject *)(unsigned int)v14, v15);
  v16 = *((_BYTE *)this + 9);
  if ( v16 != 5 )
  {
    if ( (unsigned __int8)v16 <= 6u )
      goto LABEL_46;
    if ( (unsigned __int8)v16 > 8u && v16 != 10 )
    {
      if ( (unsigned __int8)(v16 - 13) <= 1u )
      {
        v17 = DnsSign::SignData(
                (DnsSign::CCNGAlgorithmManager *)&pExceptionObject_8,
                a3,
                v16,
                *((_QWORD *)this + 13),
                0);
        goto LABEL_52;
      }
LABEL_46:
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 7) & 0x100000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 25) >= 4u )
      {
        Algorithm = DnsSign::CDnsKeySpec::GetAlgorithm((DnsSign::CDnsKeyPair *)((char *)this + 8));
        WPP_SF_D(*(_QWORD *)(v19 + 16), 0x36u, (__int64)&WPP_52544f7432c93905eab44474fa1b3f20_Traceguids, Algorithm);
      }
      DnsSign::CRunTimeException::CRunTimeException((DnsSign::CRunTimeException *)v25, (__int64)v15, 2);
      DnsSign::CException::AppendErrorMessageByID((DnsSign::CException *)v25, 0xD6D89u);
      DnsSign::CRunTimeException::CRunTimeException(
        (DnsSign::CRunTimeException *)v26,
        (const struct DnsSign::CRunTimeException *)v25);
      CxxThrowException_0(v26, (_ThrowInfo *)&TI2_AVCRunTimeException_DnsSign__);
    }
  }
  v17 = DnsSign::SignData((DnsSign::CCNGAlgorithmManager *)&pExceptionObject_8, a3, v16, *((_QWORD *)this + 13), 1);
LABEL_52:
  v20 = v17;
  if ( hHash_8[0] )
    BCryptDestroyHash(hHash_8[0]);
  if ( hHash_8[1] )
    operator delete(hHash_8[1]);
  memset(&hHash_8[1], 0, 24);
  if ( (_QWORD)pExceptionObject_8 )
    operator delete((void *)pExceptionObject_8);
  return v20;
}
// 140126154: variable 'a2' is possibly undefined
// 1401262A9: variable 'v10' is possibly undefined
// 140126359: variable 'v13' is possibly undefined
// 14012637B: variable 'v15' is possibly undefined
// 1401263F2: variable 'v19' is possibly undefined
// 140184CA8: using guessed type void __stdcall operator delete(void *);
// 1401B84A8: using guessed type __int16 word_1401B84A8;
// 1401B84AA: using guessed type __int16 word_1401B84AA;
// 1401B84AC: using guessed type __int16 word_1401B84AC;
// 1401B84AE: using guessed type __int16 word_1401B84AE;
