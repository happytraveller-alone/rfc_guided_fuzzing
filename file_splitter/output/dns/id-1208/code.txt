Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 1208
// Total lines: 148

//----- (000000014009C26C) ----------------------------------------------------
__int64 __fastcall Send_AddNsecRecordsToResponse(
        __int64 a1,
        __int64 a2,
        __int64 *a3,
        __int64 *a4,
        __int64 *a5,
        int a6,
        __int16 a7,
        unsigned __int16 a8)
{
  unsigned int v11; // edi
  unsigned int v12; // ebx
  unsigned int v13; // eax
  __int16 v14; // r13
  int v15; // eax
  __int64 *NsecNodeCoveringDbaseName; // rcx
  __int64 v17; // rax
  __int64 *v18; // rax
  __int64 *v19; // rcx
  __int64 v20; // rax
  __int64 **v21; // rsi
  unsigned int i; // edi
  int v23; // ecx
  __int64 *v24; // r14
  void *v25; // rax
  int v27[68]; // [rsp+40h] [rbp-C0h] BYREF
  unsigned __int8 v28[272]; // [rsp+150h] [rbp+50h] BYREF
  unsigned __int8 v29[272]; // [rsp+260h] [rbp+160h] BYREF
  __int64 *v30[3]; // [rsp+370h] [rbp+270h] BYREF

  v11 = 0;
  v12 = 1;
  if ( !a2 )
    return v12;
  v13 = *(_DWORD *)(a2 + 396);
  if ( (v13 & 0x10) == 0 )
    return v12;
  v14 = 0;
  v15 = (v13 >> 5) & 1;
  if ( !v15 )
    v14 = a7;
  if ( (*(_BYTE *)(a1 + 6307) & 0xF) != 0 || !a3 )
  {
    if ( a4 )
    {
      Name_NodeToCountName(v29, a4, 0);
      v27[0] = 704708867;
      Name_AppendCountName((unsigned __int8 *)v27, v29);
      if ( (*(_BYTE *)(a2 + 396) & 0x20) != 0 )
      {
        v30[0] = Lookup_FindNsecNodeMatchingDbaseName(a2, 0i64, v29);
        v11 = 1;
      }
      if ( !(unsigned int)Name_ConvertLookupNameToCountName(v28, *(unsigned __int16 **)(a1 + 1400)) )
      {
        Name_TruncateCountName(v28, v28[1] - BYTE1(v27[0]));
        NsecNodeCoveringDbaseName = Lookup_FindNsecNodeCoveringDbaseName(a2, *(__int64 **)(a1 + 248), v28);
        v17 = v11++;
        v30[v17] = NsecNodeCoveringDbaseName;
        if ( !NsecNodeCoveringDbaseName )
          return 0;
      }
      v18 = (*(_BYTE *)(a1 + 6307) & 0xF) != 0
          ? Lookup_FindNsecNodeCoveringDbaseName(a2, a5, (unsigned __int8 *)v27)
          : Lookup_FindNsecNodeMatchingDbaseName(a2, a5, (unsigned __int8 *)v27);
      v19 = v18;
      v20 = v11++;
      v30[v20] = v19;
      if ( v11 >= 3 )
        goto LABEL_33;
    }
  }
  else if ( v15 )
  {
    Name_NodeToCountName((unsigned __int8 *)v27, a3, 0);
    v30[0] = Lookup_FindNsecNodeMatchingDbaseName(a2, 0i64, (unsigned __int8 *)v27);
    if ( v30[0] )
    {
      v11 = 1;
    }
    else if ( *(_WORD *)(a1 + 480) == 43 || a6 )
    {
      while ( 1 )
      {
        Name_CopyCountName(v28, (unsigned __int8 *)v27);
        if ( (unsigned int)Name_TruncateCountName((unsigned __int8 *)v27, 1u) || !BYTE1(v27[0]) )
          break;
        v30[0] = Lookup_FindNsecNodeMatchingDbaseName(a2, 0i64, (unsigned __int8 *)v27);
        if ( v30[0] )
        {
          v30[1] = Lookup_FindNsecNodeCoveringDbaseName(a2, 0i64, v28);
          v11 = 2;
          break;
        }
      }
    }
  }
  else
  {
    if ( RR_FindNextRecordEx((__int64)a3, 0, 0x2Fu, 0i64, *(_DWORD *)(a1 + 568), 0) )
    {
      v30[0] = a3;
    }
    else
    {
      v30[0] = 0i64;
      NTree_FindBestNSECNode(v30, (__int64)a3, *a3, 0);
    }
    v11 = 1;
  }
  memset_0(&v30[v11], 0, 8i64 * (3 - v11));
LABEL_33:
  v21 = v30;
  for ( i = 0; i < 3; ++i )
  {
    v23 = 0;
    if ( i )
    {
      while ( v30[v23] != *v21 )
      {
        if ( ++v23 >= i )
          goto LABEL_39;
      }
      *v21 = 0i64;
    }
LABEL_39:
    v24 = *v21;
    if ( *v21 )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x100000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
      {
        v25 = FormatLabelA(*((unsigned __int8 *)v24 + 101), (char *)v24 + 102);
        WPP_SF_Dsq(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x35u,
          (__int64)&WPP_398a615c07233f5235cf23860937c5e7_Traceguids,
          i,
          (__int64)v25);
      }
      Wire_WriteRecordsAtNodeToMessage(a1, (__int64)v24, 0xFFF1u, 0i64, v14, a8, 0i64);
    }
    ++v21;
  }
  return v12;
}
