Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 1709
// Total lines: 226

//----- (00000001400DA960) ----------------------------------------------------
__int64 __fastcall readZoneFromSoaAnswer(struct _DNS_MSGINFO *a1, __int64 a2, u_long *a3, __int64 *a4)
{
  int v4; // r14d
  __int64 v5; // rbp
  u_long *v7; // rsi
  unsigned __int16 v8; // di
  __int64 v10; // rax
  __int64 v11; // rdi
  CDnsClientSubnetRecordsTrie *v12; // rcx
  char *v13; // rax
  int matched; // eax
  __int64 *v15; // r13
  __int64 v16; // r8
  int v17; // eax
  bool v18; // zf
  const char *v20; // rax
  __int64 v21; // rax
  __int64 RecordFromWire; // rax
  __int64 v23; // [rsp+20h] [rbp-288h]
  __int64 v25; // [rsp+48h] [rbp-260h] BYREF
  wchar_t String1[256]; // [rsp+50h] [rbp-258h] BYREF
  int v27; // [rsp+250h] [rbp-58h]

  v4 = 0;
  v5 = 0i64;
  v7 = a3;
  v8 = a2;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x40) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x3Au, (__int64)&WPP_8f5c62d9956434feed7ea8f9d17b2299_Traceguids, a1);
  }
  if ( !(unsigned int)Msg_ValidateResponse((__int64)a1, a2, v8) )
    goto LABEL_11;
  v10 = Lookup_ZoneForPacketName((unsigned __int8 *)a1 + 6316, (__int64)a1);
  v11 = v10;
  if ( v10 )
  {
    if ( !*((_QWORD *)a1 + 785) )
    {
      if ( dword_1401B9934 && *(_DWORD *)(v10 + 304) )
      {
        v25 = 0i64;
        memset_0(String1, 0, 0x204ui64);
        matched = MatchPolicy(a1, (__int64 *)v11, 0i64, 2u, 1, String1, (__int64 **)&v25);
        if ( matched )
        {
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
          {
            LODWORD(v23) = matched;
            WPP_SF_qd(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x3Cu,
              (__int64)&WPP_8f5c62d9956434feed7ea8f9d17b2299_Traceguids,
              a1,
              v23);
          }
          return 0i64;
        }
        if ( !v27 )
        {
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            WPP_SF_q(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x3Du,
              (__int64)&WPP_8f5c62d9956434feed7ea8f9d17b2299_Traceguids,
              a1);
          }
          return 0i64;
        }
        if ( v27 == 2 )
        {
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            WPP_SF_q(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              v27 + 60,
              (__int64)&WPP_8f5c62d9956434feed7ea8f9d17b2299_Traceguids,
              a1);
          }
          Etw_LogIncomingPacket(0x103u, (__int64)a1, 0i64, 0);
          return 0i64;
        }
      }
      if ( (*((_BYTE *)a1 + 592) & 4) != 0 && *((_WORD *)a1 + 304) )
      {
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          WPP_SF_SSdq(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x3Fu,
            (__int64)&WPP_8f5c62d9956434feed7ea8f9d17b2299_Traceguids,
            (const unsigned __int16 *)a1 + 304,
            *(_QWORD *)(v11 + 24));
        }
        v15 = (__int64 *)(v11 + 24);
        if ( (unsigned int)wcsicmp_ThatWorks((PCNZWCH)a1 + 304, *(const WCHAR **)(v11 + 24))
          && (v17 = LookUp_ScopeMap(
                      *(_QWORD *)(v11 + 160),
                      *(_QWORD *)(v11 + 168),
                      v16,
                      0xFFFFFFFF,
                      (const unsigned __int16 *)a1 + 304,
                      &v25),
              v11 = v25,
              (v4 = v17) != 0)
          || !v11 )
        {
          v12 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
          {
            WPP_SF_dqSS(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x40u,
              (__int64)&WPP_8f5c62d9956434feed7ea8f9d17b2299_Traceguids,
              v4,
              v11,
              (__int64)a1 + 608,
              *v15);
            v12 = WPP_GLOBAL_Control;
          }
          if ( !v4 )
            v4 = 9952;
          if ( v4 == 9952 )
          {
            *((_DWORD *)a1 + 1572) |= 0x20u;
            v12 = WPP_GLOBAL_Control;
          }
          goto LABEL_59;
        }
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
        {
          WPP_SF_SS(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x41u,
            (__int64)&WPP_8f5c62d9956434feed7ea8f9d17b2299_Traceguids,
            *(const unsigned __int16 **)(v11 + 192),
            *(_QWORD *)(v11 + 24));
        }
        v7 = a3;
      }
    }
    if ( *((_QWORD *)a1 + 785) )
      v11 = *((_QWORD *)a1 + 785);
    *((_QWORD *)a1 + 26) = v11;
    if ( (unsigned int)(*(_DWORD *)(v11 + 372) - 2) <= 1 )
    {
      if ( *((_WORD *)a1 + 3155) )
      {
        v21 = Wire_SkipPacketName((__int64)a1, *((_QWORD *)a1 + 4));
        if ( !v21 )
          goto LABEL_11;
        RecordFromWire = Wire_CreateRecordFromWire((__int64)a1, 0i64, v21, 0x1Du);
        v5 = RecordFromWire;
        if ( !RecordFromWire || *(_WORD *)(RecordFromWire + 12) != 6 )
          goto LABEL_11;
        *v7 = ntohl(*(_DWORD *)(RecordFromWire + 56));
        if ( a4 )
          *a4 = v5;
        else
          RR_Free(v5);
        return v11;
      }
      v18 = (*((_BYTE *)a1 + 6306) & 0x78) == 32;
    }
    else
    {
      v18 = (*((_BYTE *)a1 + 6306) & 0x78) == 32;
    }
    if ( !v18 )
      goto LABEL_11;
    return v11;
  }
  v12 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
  {
    if ( (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x40) == 0 || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
    {
LABEL_59:
      if ( v12 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)v12 + 68) & 0x40) != 0
        && *((_BYTE *)v12 + 65) >= 4u )
      {
        v20 = DnsAddr_Ntoa((struct in_addr *)a1 + 16);
        WPP_SF_qs(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x42u,
          (__int64)&WPP_8f5c62d9956434feed7ea8f9d17b2299_Traceguids,
          a1,
          v20);
      }
      goto LABEL_63;
    }
    v13 = Dbg_PacketName(*((unsigned __int8 **)a1 + 4), (__int64)a1 + 6304, 0i64);
    WPP_SF_s(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x3Bu, (__int64)&WPP_8f5c62d9956434feed7ea8f9d17b2299_Traceguids, v13);
LABEL_11:
    v12 = WPP_GLOBAL_Control;
    goto LABEL_59;
  }
LABEL_63:
  if ( a4 )
    *a4 = 0i64;
  if ( v5 )
    RR_Free(v5);
  return 0i64;
}
// 1400DA9E0: variable 'a2' is possibly undefined
// 1400DABB8: variable 'v23' is possibly undefined
// 1400DAC61: variable 'v16' is possibly undefined
// 1401B9934: using guessed type int dword_1401B9934;
// 1401B99B0: using guessed type int dword_1401B99B0;
