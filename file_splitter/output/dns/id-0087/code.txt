Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 87
// Total lines: 272

//----- (000000014000A658) ----------------------------------------------------
__int64 __fastcall readAdapterParams(char *a1, __int64 a2, __int16 *a3, __int16 a4, __int64 a5)
{
  __int16 v8; // r14
  unsigned __int64 v9; // rbp
  __int64 v10; // r8
  __int64 v11; // rax
  signed int v12; // ebx
  _BYTE *v13; // rax
  _BYTE *v14; // rcx
  int RegistryStringValue; // ebx
  __int64 v16; // r9
  __int64 v17; // rdx
  __int64 v18; // rsi
  char v19; // al
  HKEY *v20; // rsi
  char **v21; // r14
  const char *v22; // r12
  char *v23; // rsi
  char *v24; // rcx
  _BYTE *v25; // rax
  __int64 v26; // r8
  int v27; // r9d
  __int64 v28; // rdx
  _DWORD *v29; // rax
  _QWORD *v30; // rax
  char *i; // rcx
  char *v32; // rax
  __int64 v33; // r8
  __int64 v34; // rsi
  _DWORD *v35; // rcx
  __int64 v36; // rax
  unsigned int v37; // ebp
  __int64 v38; // rdx
  __int64 v39; // r8
  int v40; // r9d
  _DWORD *v41; // rax
  unsigned __int16 *v42; // rdx
  unsigned int *v43; // rbp
  __int64 v44; // r8
  _DWORD *v45; // rcx
  __int64 result; // rax
  _QWORD *v47; // [rsp+30h] [rbp-88h]
  char v48[120]; // [rsp+40h] [rbp-78h] BYREF
  char *Context; // [rsp+D0h] [rbp+18h] BYREF
  __int16 v50; // [rsp+D8h] [rbp+20h]

  v50 = a4;
  v47 = 0i64;
  v8 = a4;
  memset_0(a3, 0, 0x48ui64);
  v9 = -1i64;
  v10 = -1i64;
  do
    ++v10;
  while ( a1[v10] );
  v11 = -1i64;
  do
    ++v11;
  while ( *(_BYTE *)(a2 + v11) );
  v12 = v10 + v11 + 20;
  v13 = Mem_Alloc(v12, 21i64, "ds\\dns\\server\\server\\autoconfigure.c", 374);
  *((_QWORD *)a3 + 1) = v13;
  v14 = v13;
  if ( !v13 )
  {
    RegistryStringValue = 14;
    goto LABEL_73;
  }
  v16 = v12;
  RegistryStringValue = 0;
  if ( (unsigned __int64)(v16 - 1) > 0x7FFFFFFE )
    RegistryStringValue = -2147024809;
  if ( RegistryStringValue >= 0 )
  {
    v17 = v16;
    RegistryStringValue = 0;
    if ( !v16 )
      goto LABEL_16;
    v18 = a2 - (_QWORD)v13;
    do
    {
      if ( !(2147483646 - v16 + v17) )
        break;
      v19 = v14[v18];
      if ( !v19 )
        break;
      *v14++ = v19;
      --v17;
    }
    while ( v17 );
    if ( !v17 )
    {
LABEL_16:
      --v14;
      RegistryStringValue = -2147024774;
    }
    goto LABEL_18;
  }
  if ( v16 )
LABEL_18:
    *v14 = 0;
  if ( RegistryStringValue < 0 )
    goto LABEL_73;
  RegistryStringValue = StringCchCatA(*((char **)a3 + 1), v16, a1);
  if ( RegistryStringValue < 0 )
    goto LABEL_73;
  v20 = (HKEY *)(a3 + 8);
  RegistryStringValue = RegOpenKeyExA(HKEY_LOCAL_MACHINE, *((LPCSTR *)a3 + 1), 0, 0x2001Fu, (PHKEY)a3 + 2);
  if ( !RegistryStringValue )
  {
    v21 = (char **)(a3 + 20);
    RegistryStringValue = allocateRegistryStringValue(*v20, "NameServer", (char **)a3 + 5, (_BYTE *)a3 + 48);
    if ( RegistryStringValue )
      goto LABEL_72;
    v22 = "DhcpNameServer";
    RegistryStringValue = allocateRegistryStringValue(*v20, "DhcpNameServer", (char **)a3 + 3, (_BYTE *)a3 + 32);
    if ( RegistryStringValue )
      goto LABEL_72;
    v23 = *v21;
    if ( *v21 && *v23 )
    {
      *((_DWORD *)a3 + 13) = 1;
    }
    else
    {
      *((_DWORD *)a3 + 13) = 0;
      v23 = (char *)*((_QWORD *)a3 + 3);
    }
    v24 = (char *)&Annotation;
    if ( v23 )
      v24 = v23;
    v25 = Dns_StringCopyAllocate(v24, 0, 2i64, 2);
    *((_QWORD *)a3 + 7) = v25;
    if ( !v25 )
    {
LABEL_37:
      RegistryStringValue = 14;
LABEL_72:
      v8 = v50;
      goto LABEL_73;
    }
    if ( *v25 )
    {
      Context = 0i64;
      if ( v23 )
      {
        do
          ++v9;
        while ( v23[v9] );
        v28 = (unsigned int)(v9 / 3) + 3;
      }
      else
      {
        v28 = 1i64;
      }
      v29 = DnsAddrArray_Create(v28, v28, v26, v27);
      *((_QWORD *)a3 + 8) = v29;
      if ( !v29 )
        goto LABEL_37;
      v30 = Dns_StringCopyAllocate(v23, 0, 2i64, 2);
      v47 = v30;
      if ( !v30 )
        goto LABEL_37;
      for ( i = (char *)v30; ; i = 0i64 )
      {
        v32 = strtok_s(i, " ,\t;", &Context);
        if ( !v32 )
          break;
        if ( (unsigned int)Dns_StringToDnsAddrEx(
                             (struct in_addr *)(*((_QWORD *)a3 + 8)
                                              + 32i64
                                              + ((unsigned __int64)*(unsigned int *)(*((_QWORD *)a3 + 8) + 4i64) << 6)),
                             (const WCHAR *)v32,
                             v33,
                             0) )
          ++*(_DWORD *)(*((_QWORD *)a3 + 8) + 4i64);
      }
    }
    v34 = *(_QWORD *)(a5 + 48);
    if ( v34 )
    {
      v35 = (_DWORD *)*((_QWORD *)a3 + 8);
      if ( !v35 || !v35[1] )
      {
        v36 = *(_QWORD *)(a5 + 48);
        v37 = 0;
        do
        {
          if ( ++v37 > 0x3E8 )
          {
            RegistryStringValue = 9852;
            goto LABEL_72;
          }
          v36 = *(_QWORD *)(v36 + 8);
        }
        while ( v36 );
        Dns_Free(v35);
        *((_QWORD *)a3 + 8) = 0i64;
        v41 = DnsAddrArray_Create(v37, v38, v39, v40);
        *((_QWORD *)a3 + 8) = v41;
        if ( !v41 )
          goto LABEL_37;
        while ( v34 )
        {
          v42 = *(unsigned __int16 **)(v34 + 16);
          if ( v42 )
          {
            v43 = (unsigned int *)*((_QWORD *)a3 + 8);
            if ( !(unsigned int)DnsAddr_Build(v48, v42, 0)
              || !(unsigned int)DnsAddrArray_AddAddr(v43, (__int64)v48, v44, 0) )
            {
              break;
            }
          }
          v34 = *(_QWORD *)(v34 + 8);
        }
        v45 = (_DWORD *)*((_QWORD *)a3 + 8);
        if ( v45[1] )
        {
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            if ( *((_DWORD *)a3 + 13) )
              v22 = "NameServer";
            WPP_SF_ss(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0xEu,
              (__int64)&WPP_dd5a12aafb1b34b87fc868998e41e2af_Traceguids,
              v22,
              (__int64)a1);
          }
        }
        else
        {
          Dns_Free(v45);
          *((_QWORD *)a3 + 8) = 0i64;
        }
      }
    }
    goto LABEL_72;
  }
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_Ds(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0xDu,
      (__int64)&WPP_dd5a12aafb1b34b87fc868998e41e2af_Traceguids,
      RegistryStringValue,
      *((_QWORD *)a3 + 1));
  }
  v8 = v50;
  if ( RegistryStringValue == 2 )
    RegistryStringValue = 0;
LABEL_73:
  Mem_Free(v47, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\autoconfigure.c", 636);
  if ( RegistryStringValue )
    freeAdapterParams(a3);
  result = (unsigned int)RegistryStringValue;
  *a3 = v8;
  return result;
}
// 14000A8C7: variable 'v26' is possibly undefined
// 14000A8C7: variable 'v27' is possibly undefined
// 14000A90C: variable 'v33' is possibly undefined
// 14000A988: variable 'v38' is possibly undefined
// 14000A988: variable 'v39' is possibly undefined
// 14000A988: variable 'v40' is possibly undefined
// 14000A9C5: variable 'v44' is possibly undefined
