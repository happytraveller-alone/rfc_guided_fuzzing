Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 379
// Total lines: 256

//----- (00000001400327C0) ----------------------------------------------------
const unsigned __int16 **__fastcall Dp_MigrateDcpromoZones(int a1)
{
  int v1; // r13d
  const unsigned __int16 **result; // rax
  int v4; // eax
  CDnsClientSubnetRecordsTrie *v5; // rcx
  unsigned __int16 v6; // dx
  int v7; // r9d
  __int64 *i; // rbx
  __int64 v9; // r8
  int v10; // eax
  CDnsClientSubnetRecordsTrie *v11; // rcx
  __int64 v12; // r14
  int v13; // eax
  __int64 v14; // rdx
  __int64 v15; // r8
  int v16; // [rsp+78h] [rbp+10h] BYREF

  v1 = 0;
  if ( !dword_1401B9954
    || !g_fDcPromoZonesPresent
    || !Zone_ListGetNextZoneEx(0i64, 0i64, 0)
    || dword_1401B9750
    || g_fDsReadOnlyDcMode )
  {
    result = (const unsigned __int16 **)WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      Zone_ListGetNextZoneEx(0i64, 0i64, 0);
      return (const unsigned __int16 **)WPP_SF_ddqd(*((_QWORD *)WPP_GLOBAL_Control + 7), v14, v15, dword_1401B9954);
    }
    return result;
  }
  if ( !a1 && dword_1401B9714 < (unsigned int)(g_dwLastDcpromoZoneMigrateCheck + 900) )
  {
    result = (const unsigned __int16 **)WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      v4 = time(0i64);
      v5 = WPP_GLOBAL_Control;
      v6 = 114;
      v7 = v4 - g_dwLastDcpromoZoneMigrateCheck;
      return (const unsigned __int16 **)WPP_SF_D(
                                          *((_QWORD *)v5 + 7),
                                          v6,
                                          (__int64)&WPP_0f7f6e0c97433b7ed77e9ce4b2e20f93_Traceguids,
                                          v7);
    }
    return result;
  }
  g_dwLastDcpromoZoneMigrateCheck = dword_1401B9714;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x73u, (__int64)&WPP_0f7f6e0c97433b7ed77e9ce4b2e20f93_Traceguids);
  }
  result = Zone_ListGetNextZoneEx(0i64, 0i64, 0);
  for ( i = (__int64 *)result; result; i = (__int64 *)result )
  {
    v16 = 0;
    if ( (unsigned int)Zone_LockForWriteEx((__int64)i, 1, 0x2710u, (__int64)"ds\\dns\\server\\server\\dpart.c", 92) )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_s(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x74u,
          (__int64)&WPP_0f7f6e0c97433b7ed77e9ce4b2e20f93_Traceguids,
          (const char *)i[2]);
      }
      goto LABEL_73;
    }
    v10 = *((_DWORD *)i + 94);
    if ( v10 == 1 )
    {
      if ( g_ulDownlevelDCsInDomain )
      {
        v11 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          WPP_SF_sqD(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x75u,
            (__int64)&WPP_0f7f6e0c97433b7ed77e9ce4b2e20f93_Traceguids,
            (const char *)i[2]);
          v11 = WPP_GLOBAL_Control;
        }
        v12 = g_pLegacyDp;
      }
      else
      {
        v11 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          WPP_SF_sq(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x76u,
            (__int64)&WPP_0f7f6e0c97433b7ed77e9ce4b2e20f93_Traceguids,
            (const char *)i[2]);
          v11 = WPP_GLOBAL_Control;
        }
        v12 = g_pDomainDp;
      }
    }
    else
    {
      if ( v10 != 2 )
        goto LABEL_72;
      v11 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_sq(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x77u,
          (__int64)&WPP_0f7f6e0c97433b7ed77e9ce4b2e20f93_Traceguids,
          (const char *)i[2]);
        v11 = WPP_GLOBAL_Control;
      }
      v12 = g_pForestDp;
    }
    v1 = 1;
    if ( !v12 )
    {
      if ( v11 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)v11 + 17) & 0x400) != 0
        && *((_BYTE *)v11 + 65) >= 4u )
      {
        WPP_SF_sq(
          *((_QWORD *)v11 + 7),
          0x78u,
          (__int64)&WPP_0f7f6e0c97433b7ed77e9ce4b2e20f93_Traceguids,
          (const char *)i[2]);
        v11 = WPP_GLOBAL_Control;
      }
      v12 = g_pLegacyDp;
      if ( !g_pLegacyDp )
        goto LABEL_72;
      v16 = *((_DWORD *)i + 94);
    }
    if ( v12 != i[106] )
    {
      if ( !v12 || (*(_BYTE *)(v12 + 100) & 0x10) == 0 )
      {
        if ( v11 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)v11 + 17) & 0x400) != 0
          && *((_BYTE *)v11 + 65) >= 4u )
        {
          WPP_SF_s(
            *((_QWORD *)v11 + 7),
            0x79u,
            (__int64)&WPP_0f7f6e0c97433b7ed77e9ce4b2e20f93_Traceguids,
            (const char *)i[2]);
        }
        goto LABEL_72;
      }
      if ( (*((_BYTE *)i + 388) & 1) != 0 )
      {
        if ( v11 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)v11 + 17) & 0x400) != 0
          && *((_BYTE *)v11 + 65) >= 4u )
        {
          WPP_SF_s(
            *((_QWORD *)v11 + 7),
            0x7Au,
            (__int64)&WPP_0f7f6e0c97433b7ed77e9ce4b2e20f93_Traceguids,
            (const char *)i[2]);
        }
        v13 = Dp_ChangeZonePartition((__int64)i, v12, v9);
      }
      else
      {
        if ( v11 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)v11 + 17) & 0x400) != 0
          && *((_BYTE *)v11 + 65) >= 4u )
        {
          WPP_SF_s(
            *((_QWORD *)v11 + 7),
            0x7Bu,
            (__int64)&WPP_0f7f6e0c97433b7ed77e9ce4b2e20f93_Traceguids,
            (const char *)i[2]);
        }
        v13 = Rpc_ZoneResetToDsPrimary((__int64)i, 0i64, 0i64, *(_DWORD *)(v12 + 100), *(char **)(v12 + 24), 0);
      }
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_Ds(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x7Cu,
          (__int64)&WPP_0f7f6e0c97433b7ed77e9ce4b2e20f93_Traceguids,
          v13,
          i[2]);
      }
    }
    *((_DWORD *)i + 94) = v16;
    Zone_SetAllowUpdate((__int64)i, 2u);
    i[127] = 0i64;
    Ds_WriteZoneProperties(0i64, (__int64)i);
    if ( *((_DWORD *)i + 94) )
    {
      v16 = *((_DWORD *)i + 94);
      Reg_SetValue(0, 0i64, (__int64)i, "DcPromoConvert", 4u, (BYTE *)&v16, 4u);
    }
    else
    {
      Reg_DeleteValue(0, 0i64, (__int64)i, "DcPromoConvert");
    }
LABEL_72:
    Zone_UnlockAfterWriteEx((__int64)i, 1, (__int64)"ds\\dns\\server\\server\\dpart.c", 254);
LABEL_73:
    result = Zone_ListGetNextZoneEx(0i64, i, 0);
  }
  g_fDcPromoZonesPresent = v1;
  v5 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    v6 = 125;
    v7 = v1;
    return (const unsigned __int16 **)WPP_SF_D(
                                        *((_QWORD *)v5 + 7),
                                        v6,
                                        (__int64)&WPP_0f7f6e0c97433b7ed77e9ce4b2e20f93_Traceguids,
                                        v7);
  }
  return result;
}
// 140032B05: variable 'v9' is possibly undefined
// 140032CE5: variable 'v14' is possibly undefined
// 140032CE5: variable 'v15' is possibly undefined
// 1401B7EF0: using guessed type int g_fDcPromoZonesPresent;
// 1401B7F04: using guessed type int g_ulDownlevelDCsInDomain;
// 1401B8C94: using guessed type int g_fDsReadOnlyDcMode;
// 1401B8C98: using guessed type __int64 g_pDomainDp;
// 1401B8CA0: using guessed type __int64 g_pForestDp;
// 1401B8CD0: using guessed type int g_dwLastDcpromoZoneMigrateCheck;
// 1401B8D10: using guessed type __int64 g_pLegacyDp;
// 1401B9714: using guessed type int dword_1401B9714;
// 1401B9750: using guessed type int dword_1401B9750;
// 1401B9954: using guessed type int dword_1401B9954;
