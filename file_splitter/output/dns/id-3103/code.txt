Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 3103
// Total lines: 121

//----- (0000000140162DB0) ----------------------------------------------------
BOOL __fastcall DnsPrint_Record(__int64 a1, __int64 a2, __int64 a3, _QWORD *a4)
{
  __int64 v5; // r8
  __int64 v6; // rcx
  unsigned __int16 v7; // r12
  unsigned __int16 v8; // r13
  char *v9; // rax
  const char *v10; // r15
  char *v11; // rax
  const wchar_t *v12; // rbx
  const char *v13; // r15
  unsigned __int16 v14; // ax
  char v15; // r9
  void (__fastcall *v16)(_QWORD, _QWORD, _QWORD *); // rax
  unsigned int v18; // [rsp+38h] [rbp-2A0h]
  unsigned int v19; // [rsp+50h] [rbp-288h]
  const wchar_t *v20; // [rsp+90h] [rbp-248h]
  __int16 v21[256]; // [rsp+A0h] [rbp-238h] BYREF

  DnsPrint_Lock();
  if ( a4 )
  {
    v7 = *((_WORD *)a4 + 8);
    v8 = *((_WORD *)a4 + 9);
    if ( v7 == 41 )
    {
      if ( (byte_1401BA001 & 4) != 0 )
      {
        v9 = private_StringForRecordType(0x29u);
        v10 = "UNKNOWN";
        v20 = (const wchar_t *)a4[1];
        if ( v9 )
          v10 = v9;
        if ( (*((_DWORD *)a4 + 5) & 0x18) != 8 )
          v20 = recordStringWide((__int64)a4, (WCHAR *)a4[1], v21);
        v19 = (*((_DWORD *)a4 + 5) >> 2) & 1;
        WPP_SF_qqSsddDddddddddd(
          *((unsigned __int16 *)a4 + 14),
          v19,
          a4,
          *a4,
          v20,
          v10,
          41,
          *((unsigned __int16 *)a4 + 14),
          *((_DWORD *)a4 + 5),
          *((_DWORD *)a4 + 5) & 3,
          v19,
          (*((_DWORD *)a4 + 5) >> 3) & 3,
          *((unsigned __int8 *)a4 + 26),
          *((unsigned __int8 *)a4 + 27),
          *((unsigned __int16 *)a4 + 12) >> 15,
          a4[3] & 0x7FFF,
          *((unsigned __int16 *)a4 + 15),
          v8);
      }
    }
    else if ( (byte_1401BA001 & 4) != 0 )
    {
      v11 = private_StringForRecordType(v7);
      v12 = (const wchar_t *)a4[1];
      v13 = "UNKNOWN";
      if ( v11 )
        v13 = v11;
      if ( (*((_DWORD *)a4 + 5) & 0x18) != 8 )
        v12 = recordStringWide((__int64)a4, (WCHAR *)a4[1], v21);
      v18 = *((_DWORD *)a4 + 5);
      WPP_SF_qqSsdDdddddd(
        v8,
        v18 & 3,
        a4,
        *a4,
        v12,
        v13,
        v7,
        v18,
        v18 & 3,
        (v18 >> 2) & 1,
        (v18 >> 3) & 3,
        *((_DWORD *)a4 + 6),
        *((_DWORD *)a4 + 7),
        v8);
    }
    if ( v8 )
    {
      v14 = Dns_RecordTableIndexForType(v7);
      if ( v14 )
      {
        v16 = (void (__fastcall *)(_QWORD, _QWORD, _QWORD *))RRPrintTable[v14];
        if ( v16 )
        {
          v16(0i64, 0i64, a4);
        }
        else if ( (v15 & 4) != 0 )
        {
          v6 = 44i64;
          goto LABEL_25;
        }
      }
      else if ( (v15 & 4) != 0 )
      {
        v6 = 43i64;
        goto LABEL_25;
      }
    }
  }
  else if ( (byte_1401BA001 & 4) != 0 )
  {
    v6 = 39i64;
LABEL_25:
    WPP_SF_(v6, (unsigned __int16)&WPP_cb270f16dde935b5e1552b160c3fa946_Traceguids, v5);
  }
  return DnsPrint_Unlock();
}
// 14016300A: variable 'v15' is possibly undefined
// 140163029: variable 'v5' is possibly undefined
// 140172480: using guessed type _QWORD RRPrintTable[1];
// 140185140: using guessed type __int64 (__fastcall *_guard_dispatch_icall_fptr)(_QWORD, _QWORD);
// 1401BA001: using guessed type char byte_1401BA001;
// 140162DB0: using guessed type _WORD var_238[256];
