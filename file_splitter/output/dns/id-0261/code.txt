Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 261
// Total lines: 299

//----- (00000001400219D0) ----------------------------------------------------
void __fastcall startDnsServer(__int64 a1, __int64 a2)
{
  __int64 v2; // rdx
  __int64 *v3; // rbx
  __int64 *v4; // rdi
  __int64 v5; // r8
  __int64 v6; // rdi
  int v7; // eax
  DWORD v8; // esi
  __int64 v9; // rdx
  __int64 v10; // rcx
  int LastError; // eax
  int CurrentTimeInSeconds; // eax
  int v13; // eax
  int v14; // eax
  __int64 v15; // rdx
  CDnsClientSubnetRecordsTrie *v16; // rcx
  DWORD DatabaseAndRunDns; // eax
  CDnsClientSubnetRecordsTrie *v18; // rcx
  int v19; // eax
  struct _RTL_CRITICAL_SECTION *v20; // rbx
  CDnsClientSubnetRecordsTrie *v21; // rbx
  __int64 v22[2]; // [rsp+40h] [rbp-58h] BYREF
  struct _SYSTEM_INFO SystemInfo; // [rsp+50h] [rbp-48h] BYREF

  McGenEventRegister(&DNSServer, a2, &DNSServer_Context, &Microsoft_Windows_DNSServerHandle);
  McGenEventRegister(
    &S_Microsoft_Windows_DNS_Server_Service,
    v2,
    &S_Microsoft_Windows_DNS_Server_Service_Context,
    &Microsoft_Windows_DNS_Server_ServiceHandle);
  WPP_MAIN_CB = (__int64)&qword_1401EC508;
  v3 = &WPP_MAIN_CB;
  qword_1401EC4F0 = 0i64;
  WPP_REGISTRATION_GUIDS = (__int64)&WPP_ThisDir_CTLGUID_Dnslib;
  v4 = &WPP_REGISTRATION_GUIDS;
  qword_1401EC518 = 0i64;
  qword_1401EC4F8 = 1i64;
  qword_1401EC4D8 = (__int64)&WPP_ThisDir_CTLGUID_DnsServer;
  qword_1401EC508 = 0i64;
  qword_1401EC520 = 1i64;
  WPP_GLOBAL_Control = (CDnsClientSubnetRecordsTrie *)&WPP_MAIN_CB;
  do
  {
    v5 = *v4;
    v22[0] = v5;
    ++v4;
    v22[1] = 0i64;
    v3[4] = v5;
    ((void (__fastcall *)(__int64 (__fastcall *)(int, __int64, _DWORD *, __int64), __int64 *, __int64, __int64, __int64 *, _QWORD, _QWORD, __int64 *))EtwRegisterTraceGuidsW)(
      WppControlCallback,
      v3,
      v5,
      1i64,
      v22,
      0i64,
      0i64,
      v3 + 1);
    v3 = (__int64 *)*v3;
  }
  while ( v3 );
  v6 = 4i64;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 1) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x1Bu, (__int64)&WPP_304b099b29a233e472f3414eef0e1fd4_Traceguids);
  }
  DnsServiceStatus.dwServiceType = 48;
  *(_QWORD *)&DnsServiceStatus.dwCurrentState = 2i64;
  DnsServiceStatus.dwCheckPoint = 1;
  DnsServiceStatus.dwWaitHint = 20000;
  *(_QWORD *)&DnsServiceStatus.dwWin32ExitCode = 0i64;
  GetSystemInfo(&SystemInfo);
  g_ProcessorCount = SystemInfo.dwNumberOfProcessors;
  if ( !(unsigned int)DnsInitializeCriticalSection(&g_csGeneralServer)
    && !(unsigned int)DnsInitializeCriticalSection(&g_csRFC5011_Trust_Points)
    && !(unsigned int)DnsInitializeCriticalSection(&g_csPolicyContent) )
  {
    if ( !(unsigned int)Mem_HeapInit() )
    {
      DnsDeleteCriticalSection(&g_csGeneralServer);
      DnsDeleteCriticalSection(&g_csRFC5011_Trust_Points);
      DnsDeleteCriticalSection(&g_csPolicyContent);
      return;
    }
    pDnsAllocFunction = (__int64 (__fastcall *)(_QWORD))Mem_DnslibAlloc;
    pDnsFreeFunction = (__int64 (*)(void))Mem_DnslibFree;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 1) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x1Cu, (__int64)&WPP_304b099b29a233e472f3414eef0e1fd4_Traceguids);
    }
    DnsServiceStatusHandle = RegisterServiceCtrlHandlerW(L"DNS", (LPHANDLER_FUNCTION)respondToServiceControlMessage);
    if ( DnsServiceStatusHandle )
    {
      announceServiceStatus();
      if ( _InterlockedIncrement(&dword_1401B8D74) == 1 && !g_hEventSource )
      {
        g_hEventSource = RegisterEventSourceW(0i64, L"DNS");
        if ( !g_hEventSource
          && WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 1) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
        {
          LastError = GetLastError();
          WPP_SF_D(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0xEu,
            (__int64)&WPP_caa869e6ff163d02017b6802bda44fe7_Traceguids,
            LastError);
        }
      }
      _InterlockedDecrement(&dword_1401B8D74);
      CurrentTimeInSeconds = GetCurrentTimeInSeconds(v10, v9);
      g_StartupTime = CurrentTimeInSeconds;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 1) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_D(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x1Eu,
          (__int64)&WPP_304b099b29a233e472f3414eef0e1fd4_Traceguids,
          CurrentTimeInSeconds);
      }
      v13 = Etw_TraceInitialize();
      if ( v13
        && WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 1) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_D(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x1Fu,
          (__int64)&WPP_304b099b29a233e472f3414eef0e1fd4_Traceguids,
          v13);
      }
      g_RemoteDcPollQueueSize = 0;
      qword_1401EC498 = (__int64)&g_RemoteDcPollQueueHead;
      g_RemoteDcPollQueueHead = (__int64)&g_RemoteDcPollQueueHead;
      v14 = DnsInitializeCriticalSection(&g_csRemoteDcPolling);
      if ( v14 )
      {
        v16 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 1) == 0
          || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
        {
          goto LABEL_43;
        }
        WPP_SF_D(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x20u,
          (__int64)&WPP_304b099b29a233e472f3414eef0e1fd4_Traceguids,
          v14);
      }
      do
      {
        v16 = WPP_GLOBAL_Control;
LABEL_43:
        g_bDoReload = 0;
        g_bHitException = 0;
        g_fDnsThreadAlert = 1;
        g_fDnsServiceExit = 0;
        if ( v16 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_BYTE *)v16 + 68) & 1) != 0
          && *((_BYTE *)v16 + 65) >= 4u )
        {
          WPP_SF_(*((_QWORD *)v16 + 7), 0x21u, (__int64)&WPP_304b099b29a233e472f3414eef0e1fd4_Traceguids);
        }
        DatabaseAndRunDns = loadDatabaseAndRunDns((__int64)v16, v15);
        ++g_LoadCount;
        v8 = DatabaseAndRunDns;
      }
      while ( g_bDoReload );
    }
    else
    {
      v7 = GetLastError();
      v8 = v7;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 1) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_D(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x1Du,
          (__int64)&WPP_304b099b29a233e472f3414eef0e1fd4_Traceguids,
          v7);
      }
    }
    ICS_Notify(0);
    if ( (Microsoft_Windows_DNS_Server_ServiceEnableBits & 1) != 0 )
      TemplateEventDescriptor(Microsoft_Windows_DNS_Server_ServiceHandle, &DNS_EVENT_SHUTDOWN);
    McGenEventUnregister(&Microsoft_Windows_DNS_Server_ServiceHandle);
    McGenEventUnregister(&Microsoft_Windows_DNSServerHandle);
    if ( g_EtwTraceInitialized )
      UnregisterTraceGuids(g_EtwTraceRegHandle);
    if ( !g_hEventSource )
    {
      v18 = WPP_GLOBAL_Control;
LABEL_61:
      if ( v18 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && *((char *)v18 + 28) < 0
        && *((_BYTE *)v18 + 25) >= 4u )
      {
        WPP_SF_q(*((_QWORD *)v18 + 2), 0x18u, (__int64)&WPP_772ae84e4aa83dd2ec494ba833f0aab1_Traceguids, hDnsHeap);
      }
      RtlDestroyHeap(hDnsHeap);
      v20 = (struct _RTL_CRITICAL_SECTION *)&unk_1401B8130;
      do
      {
        DnsDeleteCriticalSection(v20);
        v20 = (struct _RTL_CRITICAL_SECTION *)((char *)v20 + 88);
        --v6;
      }
      while ( v6 );
      DnsDeleteCriticalSection(&g_csPolicyContent);
      DnsDeleteCriticalSection(&g_csRFC5011_Trust_Points);
      DnsDeleteCriticalSection(&g_csGeneralServer);
      *(_QWORD *)&DnsServiceStatus.dwCurrentState = 1i64;
      *(_QWORD *)&DnsServiceStatus.dwCheckPoint = 0i64;
      DnsServiceStatus.dwWin32ExitCode = v8;
      DnsServiceStatus.dwServiceSpecificExitCode = v8;
      announceServiceStatus();
      v21 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
      {
        while ( v21 )
        {
          if ( *((_QWORD *)v21 + 1) )
          {
            EtwUnregisterTraceGuids();
            *((_QWORD *)v21 + 1) = 0i64;
          }
          v21 = *(CDnsClientSubnetRecordsTrie **)v21;
        }
        WPP_GLOBAL_Control = (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control;
      }
      return;
    }
    if ( !DeregisterEventSource(g_hEventSource) )
    {
      v18 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 1) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
      {
        goto LABEL_59;
      }
      v19 = GetLastError();
      WPP_SF_D(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x11u,
        (__int64)&WPP_caa869e6ff163d02017b6802bda44fe7_Traceguids,
        v19);
    }
    v18 = WPP_GLOBAL_Control;
LABEL_59:
    g_hEventSource = 0i64;
    goto LABEL_61;
  }
}
// 140021A1A: variable 'v2' is possibly undefined
// 140021CE6: variable 'v10' is possibly undefined
// 140021CE6: variable 'v9' is possibly undefined
// 140021DEC: variable 'v16' is possibly undefined
// 140021DEC: variable 'v15' is possibly undefined
// 140183D98: using guessed type __int64 __fastcall GetCurrentTimeInSeconds(_QWORD, _QWORD);
// 140184FB8: using guessed type __int64 EtwUnregisterTraceGuids(void);
// 140184FC0: using guessed type __int64 __fastcall EtwRegisterTraceGuidsW(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
// 140186A58: using guessed type GUID S_Microsoft_Windows_DNS_Server_Service;
// 1401875C8: using guessed type EVENT_DESCRIPTOR DNS_EVENT_SHUTDOWN;
// 140187698: using guessed type GUID DNSServer;
// 1401B7EB4: using guessed type int g_fDnsThreadAlert;
// 1401B8C58: using guessed type int g_StartupTime;
// 1401B8C60: using guessed type int g_bHitException;
// 1401B8C64: using guessed type int g_bDoReload;
// 1401B8C68: using guessed type int g_LoadCount;
// 1401B8C8C: using guessed type int g_RemoteDcPollQueueSize;
// 1401B8D74: using guessed type int dword_1401B8D74;
// 1401B8F38: using guessed type int g_EtwTraceInitialized;
// 1401B9140: using guessed type int Microsoft_Windows_DNS_Server_ServiceEnableBits;
// 1401B9A40: using guessed type int g_fDnsServiceExit;
// 1401B9EC8: using guessed type __int64 (*pDnsFreeFunction)(void);
// 1401B9ED0: using guessed type __int64 (__fastcall *pDnsAllocFunction)(_QWORD);
// 1401EC490: using guessed type __int64 g_RemoteDcPollQueueHead;
// 1401EC498: using guessed type __int64 qword_1401EC498;
// 1401EC4D0: using guessed type __int64 WPP_REGISTRATION_GUIDS;
// 1401EC4D8: using guessed type __int64 qword_1401EC4D8;
// 1401EC4E0: using guessed type __int64 WPP_MAIN_CB;
// 1401EC4F0: using guessed type __int64 qword_1401EC4F0;
// 1401EC4F8: using guessed type __int64 qword_1401EC4F8;
// 1401EC508: using guessed type __int64 qword_1401EC508;
// 1401EC518: using guessed type __int64 qword_1401EC518;
// 1401EC520: using guessed type __int64 qword_1401EC520;
