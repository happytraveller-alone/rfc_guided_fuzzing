Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 656
// Total lines: 672

//----- (000000014005CE98) ----------------------------------------------------
__int16 __fastcall Etw_LogIncomingPacket(unsigned __int16 a1, __int64 a2, _QWORD *a3, int a4)
{
  int v6; // ebx
  rsize_t v7; // rsi
  unsigned __int16 v8; // r14
  const unsigned __int16 *v9; // r15
  int IsEventEnabled; // eax
  int v11; // r8d
  _WORD *v12; // r12
  unsigned int v13; // esi
  const char *v14; // rax
  struct in_addr *v15; // rsi
  const char *v16; // rax
  _WORD *v17; // rax
  char v18; // dl
  int v19; // ebx
  int v20; // ebx
  int v21; // ebx
  int v22; // ebx
  __int64 v23; // rdx
  const unsigned __int16 *v24; // r15
  const unsigned __int16 *v25; // rsi
  __int64 v26; // rsi
  int v27; // ebx
  char v28; // di
  const char *v29; // rax
  const char *v30; // r9
  const EVENT_DESCRIPTOR *v31; // rdx
  char v32; // r14
  bool v33; // r15
  char v34; // bl
  const char *v35; // rax
  __int64 v36; // rdx
  const unsigned __int16 **v37; // rax
  __int64 v38; // rax
  const wchar_t *v39; // rax
  const wchar_t *v40; // rcx
  __int64 v41; // rax
  const wchar_t *v42; // rax
  const unsigned __int16 **v43; // rax
  char v44; // r13
  char v45; // al
  bool v46; // bl
  char v47; // si
  bool v48; // r12
  const char *v49; // rax
  __int64 v50; // rdx
  int v51; // eax
  UINT v52; // ecx
  const unsigned __int16 **v53; // rbx
  const unsigned __int16 *v54; // rbx
  __int64 v55; // r15
  const wchar_t *v56; // rcx
  char v57; // r12
  char v58; // al
  char v59; // si
  char v60; // r14
  char v61; // bl
  const char *v62; // rax
  __int64 v63; // rdx
  __int64 v64; // rax
  __int64 v65; // r15
  _QWORD *v66; // rax
  __int64 v67; // rcx
  const unsigned __int16 *v68; // r14
  __int64 v69; // r14
  int v70; // ebx
  char v71; // di
  char v72; // si
  const char *v73; // rax
  const EVENT_DESCRIPTOR *v74; // rdx
  int v75; // ebx
  int v76; // ebx
  int v77; // ebx
  int v78; // ebx
  __int64 v79; // rdx
  __int64 v80; // r14
  const char *v81; // rax
  __int64 v82; // rdx
  __int64 v83; // rcx
  __int64 v84; // rdx
  const unsigned __int16 *v85; // r15
  const unsigned __int16 *v86; // rdi
  __int64 v87; // rdi
  const char *v88; // rax
  __int64 v89; // rax
  __int64 v90; // r15
  _QWORD *v91; // rax
  __int64 v92; // rcx
  const unsigned __int16 *v93; // rsi
  __int64 v94; // rsi
  char v95; // bl
  const char *v96; // rax
  __int64 v97; // rdx
  __int64 v98; // rsi
  __int16 v100; // [rsp+90h] [rbp-80h]
  unsigned __int16 v101; // [rsp+94h] [rbp-7Ch]
  char v102; // [rsp+98h] [rbp-78h]
  char *v103; // [rsp+A0h] [rbp-70h]
  const unsigned __int16 *v105; // [rsp+A8h] [rbp-68h]
  const unsigned __int16 *v106; // [rsp+A8h] [rbp-68h]
  const unsigned __int16 *v107; // [rsp+B0h] [rbp-60h]
  __int64 v108; // [rsp+B8h] [rbp-58h]
  const unsigned __int16 *v109; // [rsp+C0h] [rbp-50h]
  struct in_addr *v111; // [rsp+D0h] [rbp-40h]
  char Destination[64]; // [rsp+E0h] [rbp-30h] BYREF
  char v113[64]; // [rsp+120h] [rbp+10h] BYREF
  WCHAR Buffer[256]; // [rsp+160h] [rbp+50h] BYREF

  v6 = a1;
  v7 = 64i64;
  memset_0(Destination, 0, sizeof(Destination));
  memset_0(v113, 0, sizeof(v113));
  memset_0(Buffer, 0, sizeof(Buffer));
  v8 = 0;
  v102 = 0;
  v101 = 0;
  v9 = 0i64;
  v103 = 0i64;
  IsEventEnabled = Etw_IsEventEnabled(v6);
  if ( !IsEventEnabled )
    return IsEventEnabled;
  v12 = (_WORD *)(a2 + 6304);
  v100 = *(_WORD *)(a2 + 6304);
  v108 = a2 + 6304;
  if ( dword_1401B979C != v11 )
  {
    v13 = *(unsigned __int16 *)(a2 + 6302);
    if ( v13 > dword_1401B98E8 )
      LOWORD(v13) = dword_1401B98E8;
    *v12 = __ROL2__(*v12, 8);
    *(_WORD *)(a2 + 6308) = __ROL2__(*(_WORD *)(a2 + 6308), 8);
    *(_WORD *)(a2 + 6310) = __ROL2__(*(_WORD *)(a2 + 6310), 8);
    *(_WORD *)(a2 + 6312) = __ROL2__(*(_WORD *)(a2 + 6312), 8);
    v101 = v13;
    v7 = (unsigned int)(v11 + 64);
    *(_WORD *)(a2 + 6314) = __ROL2__(*(_WORD *)(a2 + 6314), 8);
  }
  v14 = DnsAddr_Ntoa((struct in_addr *)(a2 + 128));
  if ( v14 )
    strcpy_s(Destination, v7, v14);
  v15 = (struct in_addr *)(a2 + 64);
  v111 = (struct in_addr *)(a2 + 64);
  v16 = DnsAddr_Ntoa((struct in_addr *)(a2 + 64));
  if ( v16 )
    strcpy_s(v113, 0x40ui64, v16);
  if ( a4 )
  {
    v17 = (_WORD *)Dns_SkipPacketName(a2 + 6316, *(unsigned __int16 *)(a2 + 6302) + a2 + 6304);
    if ( v17 )
    {
      v8 = __ROL2__(*v17, 8);
      v102 = v8;
      *(_WORD *)(a2 + 480) = v8;
    }
    if ( (unsigned int)Name_ConvertPacketNameToLookupNameEx(
                         a2,
                         (unsigned __int8 *)(a2 + 6316),
                         *(unsigned __int16 **)(a2 + 1400),
                         0) )
      v103 = Etw_LookupName(*(_WORD **)(a2 + 1400));
    v15 = (struct in_addr *)(a2 + 64);
  }
  else
  {
    v8 = *(_WORD *)(a2 + 480);
    v102 = v8;
    v103 = Etw_LookupName(*(_WORD **)(a2 + 1400));
  }
  v18 = __ROL2__(*(_WORD *)(a2 + 6306), 8);
  if ( v6 <= 268 )
  {
    if ( v6 != 268 )
    {
      v19 = v6 - 256;
      if ( !v19 )
      {
        if ( (Microsoft_Windows_DNSServerEnableBits & 1) == 0 )
          goto LABEL_177;
        v56 = L".";
        v57 = v18;
        if ( *(_WORD *)(a2 + 1120) )
          v56 = (const wchar_t *)(a2 + 1120);
        v106 = v56;
        v58 = ntohs(*(_WORD *)(a2 + 66));
        v59 = v8;
        v60 = *(_BYTE *)(a2 + 6306) & 1;
        v61 = v58;
        v62 = DnsAddr_Ntoa((struct in_addr *)(a2 + 64));
        Template_csscsqqqqqbz(
          (__int64)v103,
          v63,
          *(_BYTE *)(a2 + 1413),
          Destination,
          v62,
          v60,
          v103,
          v59,
          v100,
          v61,
          v57,
          v101,
          a2 + 6304,
          v106);
        goto LABEL_85;
      }
      v20 = v19 - 3;
      if ( !v20 )
      {
        v51 = *(_DWORD *)(a2 + 6288);
        if ( (v51 & 8) != 0 )
        {
          v52 = 12008;
        }
        else if ( (v51 & 0x40) != 0 )
        {
          v52 = 12011;
        }
        else if ( (v51 & 0x400) != 0 )
        {
          v52 = 12012;
        }
        else if ( (v51 & 0x10) != 0 )
        {
          v52 = 12009;
        }
        else
        {
          v52 = 12010;
          if ( (v51 & 0x20) == 0 )
            v52 = 12007;
        }
        Dns_GetResourceString(v52, Buffer, 256i64);
        if ( (Microsoft_Windows_DNSServerEnableBits & 8) != 0 )
        {
          v53 = *(const unsigned __int16 ***)(a2 + 3704);
          if ( v53 )
            v54 = *v53;
          else
            v54 = L".";
          if ( !*(_WORD *)(a2 + 3712) || !*(_WORD *)(a2 + 4736) || lstrcmpiW((LPCWSTR)(a2 + 3712), (LPCWSTR)(a2 + 4736)) )
          {
            v55 = *(_QWORD *)(a2 + 3680);
            if ( v55 )
            {
              if ( *(_DWORD *)(v55 + 372) )
                v9 = *(const unsigned __int16 **)(v55 + 24);
              else
                v9 = L"..Cache";
            }
            else
            {
              v9 = (const unsigned __int16 *)((unsigned __int64)L"..Cache" & -(__int64)((*(_DWORD *)(a2 + 6288) & 0x80u) != 0));
            }
          }
          Template_csszsqqzzz(
            (__int64)v103,
            v8,
            *(_BYTE *)(a2 + 1413),
            Destination,
            v113,
            Buffer,
            v103,
            v8,
            v100,
            v9,
            (const unsigned __int16 *)((a2 + 3712) & -(__int64)(*(_WORD *)(a2 + 3712) != 0)),
            v54);
        }
        goto LABEL_177;
      }
      v21 = v20 - 2;
      if ( v21 )
      {
        v22 = v21 - 2;
        if ( !v22 )
        {
          if ( (Microsoft_Windows_DNSServerEnableBits & 0x80u) != 0 )
          {
            v32 = v18;
            v33 = ((*(_WORD *)(a2 + 6314) - 256) & 0xFEFF) == 0;
            v34 = ntohs(*(_WORD *)(a2 + 66));
            v35 = DnsAddr_Ntoa((struct in_addr *)(a2 + 64));
            Template_csssqqqcqb(
              (__int64)v103,
              v36,
              *(_BYTE *)(a2 + 1413),
              Destination,
              v35,
              v103,
              v100,
              v34,
              v32,
              v33,
              v101,
              a2 + 6304);
          }
          goto LABEL_177;
        }
        if ( v22 == 3 && (Microsoft_Windows_DNSServerEnableBits & 0x400) != 0 )
        {
          v23 = *(_QWORD *)(a2 + 3680);
          if ( v23 )
          {
            if ( *(_DWORD *)(v23 + 372) )
              v24 = *(const unsigned __int16 **)(v23 + 24);
            else
              v24 = L"..Cache";
          }
          else
          {
            v24 = (const unsigned __int16 *)((unsigned __int64)L"..Cache" & -(__int64)((*(_DWORD *)(a2 + 6288) & 0x80u) != 0));
          }
          if ( v23 )
          {
            v25 = L"Default";
            if ( *(_QWORD *)(v23 + 192) )
              v25 = *(const unsigned __int16 **)(v23 + 192);
          }
          else
          {
            v26 = *(_QWORD *)(a2 + 3696);
            if ( v26 )
              v25 = *(const unsigned __int16 **)(v26 + 192);
            else
              v25 = L"Default";
          }
          v27 = v101;
          v28 = v100;
          v29 = DnsAddr_Ntoa((struct in_addr *)(a2 + 64));
          v30 = Destination;
          v31 = (const EVENT_DESCRIPTOR *)&DNS_EVENT_IXFR_REQ_IN;
LABEL_176:
          Template_csssqzzqb((__int64)v103, v31, *(_BYTE *)(a2 + 1413), v30, v29, v103, v28, v25, v24, v27, a2 + 6304);
          goto LABEL_177;
        }
        goto LABEL_177;
      }
      if ( (Microsoft_Windows_DNSServerEnableBits & 0x20) == 0 )
        goto LABEL_177;
      v37 = *(const unsigned __int16 ***)(a2 + 3704);
      v105 = L".";
      if ( v37 )
        v109 = *v37;
      else
        v109 = L".";
      if ( !a3 )
        goto LABEL_51;
      v38 = a3[460];
      if ( v38 )
      {
        v39 = *(const wchar_t **)(v38 + 192);
        v40 = L"Default";
        if ( v39 )
          v40 = v39;
        v107 = v40;
        goto LABEL_53;
      }
      v41 = a3[462];
      if ( v41 )
        v42 = *(const wchar_t **)(v41 + 192);
      else
LABEL_51:
        v42 = L"Default";
      v107 = v42;
LABEL_53:
      if ( a3 )
      {
        v43 = (const unsigned __int16 **)a3[461];
        if ( v43 )
          v105 = *v43;
      }
      else
      {
        v105 = L".";
      }
      v44 = v18;
      v45 = ntohs(*(_WORD *)(a2 + 130));
      v46 = (*(_BYTE *)(a2 + 6306) & 4) != 0;
      v47 = v45;
      v48 = (*(_BYTE *)(a2 + 6307) & 0x20) != 0;
      v49 = DnsAddr_Ntoa(v111);
      Template_cssccsqqqqzzqbz(
        (__int64)v103,
        v50,
        *(_BYTE *)(a2 + 1413),
        v49,
        Destination,
        v46,
        v48,
        v103,
        v102,
        v100,
        v47,
        v44,
        v105,
        v107,
        v101,
        v108,
        v109);
LABEL_85:
      v12 = (_WORD *)v108;
      goto LABEL_177;
    }
    if ( a3 )
    {
      v64 = a3[460];
      if ( v64 )
        v9 = *(const unsigned __int16 **)(v64 + 24);
    }
    if ( (Microsoft_Windows_DNSServerEnableBits & 0x1000) == 0 )
      goto LABEL_177;
    if ( !a3 )
    {
      v65 = *(_QWORD *)(a2 + 3680);
      if ( v65 )
      {
        if ( *(_DWORD *)(v65 + 372) )
          v9 = *(const unsigned __int16 **)(v65 + 24);
        else
          v9 = L"..Cache";
      }
      else
      {
        v9 = (const unsigned __int16 *)(-(__int64)((*(_DWORD *)(a2 + 6288) & 0x80u) != 0) & (unsigned __int64)L"..Cache");
      }
    }
    v66 = (_QWORD *)a2;
    if ( a3 )
      v66 = a3;
    v67 = v66[460];
    if ( v67 )
    {
      v68 = L"Default";
      if ( *(_QWORD *)(v67 + 192) )
        v68 = *(const unsigned __int16 **)(v67 + 192);
    }
    else
    {
      v69 = v66[462];
      if ( v69 )
        v68 = *(const unsigned __int16 **)(v69 + 192);
      else
        v68 = L"Default";
    }
    v70 = v101;
    v71 = *(_BYTE *)(a2 + 6307) & 0xF;
    v72 = v100;
    v73 = DnsAddr_Ntoa((struct in_addr *)(a2 + 64));
    v74 = (const EVENT_DESCRIPTOR *)&DNS_EVENT_IXFR_RESP_IN;
LABEL_125:
    Template_csssqzzqqb(
      (__int64)v103,
      v74,
      *(_BYTE *)(a2 + 1413),
      Destination,
      v73,
      v103,
      v72,
      v68,
      v9,
      v71,
      v70,
      a2 + 6304);
    goto LABEL_177;
  }
  v75 = v6 - 270;
  if ( !v75 )
  {
    if ( (Microsoft_Windows_DNSServerEnableBits & 0x4000) == 0 )
      goto LABEL_177;
    v97 = *(_QWORD *)(a2 + 3680);
    if ( v97 )
    {
      if ( *(_DWORD *)(v97 + 372) )
        v24 = *(const unsigned __int16 **)(v97 + 24);
      else
        v24 = L"..Cache";
    }
    else
    {
      v24 = (const unsigned __int16 *)((unsigned __int64)L"..Cache" & -(__int64)((*(_DWORD *)(a2 + 6288) & 0x80u) != 0));
    }
    if ( v97 )
    {
      v25 = L"Default";
      if ( *(_QWORD *)(v97 + 192) )
        v25 = *(const unsigned __int16 **)(v97 + 192);
    }
    else
    {
      v98 = *(_QWORD *)(a2 + 3696);
      if ( v98 )
        v25 = *(const unsigned __int16 **)(v98 + 192);
      else
        v25 = L"Default";
    }
    v27 = v101;
    v28 = v100;
    v30 = DnsAddr_Ntoa((struct in_addr *)(a2 + 64));
    v31 = (const EVENT_DESCRIPTOR *)&DNS_EVENT_AXFR_REQ_IN;
    v29 = Destination;
    goto LABEL_176;
  }
  v76 = v75 - 2;
  if ( !v76 )
  {
    if ( a3 )
    {
      v89 = a3[460];
      if ( v89 )
        v9 = *(const unsigned __int16 **)(v89 + 24);
    }
    if ( (Microsoft_Windows_DNSServerEnableBits & 0x10000) != 0 )
    {
      if ( !a3 )
      {
        v90 = *(_QWORD *)(a2 + 3680);
        if ( v90 )
        {
          if ( *(_DWORD *)(v90 + 372) )
            v9 = *(const unsigned __int16 **)(v90 + 24);
          else
            v9 = L"..Cache";
        }
        else
        {
          v9 = (const unsigned __int16 *)(-(__int64)((*(_DWORD *)(a2 + 6288) & 0x80u) != 0) & (unsigned __int64)L"..Cache");
        }
      }
      v91 = (_QWORD *)a2;
      if ( a3 )
        v91 = a3;
      v92 = v91[460];
      if ( v92 )
      {
        v93 = L"Default";
        if ( *(_QWORD *)(v92 + 192) )
          v93 = *(const unsigned __int16 **)(v92 + 192);
      }
      else
      {
        v94 = v91[462];
        if ( v94 )
          v93 = *(const unsigned __int16 **)(v94 + 192);
        else
          v93 = L"Default";
      }
      v95 = *(_BYTE *)(a2 + 6307) & 0xF;
      v96 = DnsAddr_Ntoa((struct in_addr *)(a2 + 64));
      Template_csssqzzq(
        (__int64)v103,
        &DNS_EVENT_AXFR_RESP_IN,
        *(_BYTE *)(a2 + 1413),
        Destination,
        v96,
        v103,
        v100,
        v93,
        v9,
        v95);
    }
    goto LABEL_177;
  }
  v77 = v76 - 1;
  if ( !v77 )
  {
    if ( (Microsoft_Windows_DNSServerEnableBits & 0x20000) != 0 )
    {
      v84 = *(_QWORD *)(a2 + 3680);
      if ( v84 )
      {
        if ( *(_DWORD *)(v84 + 372) )
          v85 = *(const unsigned __int16 **)(v84 + 24);
        else
          v85 = L"..Cache";
      }
      else
      {
        v85 = (const unsigned __int16 *)((unsigned __int64)L"..Cache" & -(__int64)((*(_DWORD *)(a2 + 6288) & 0x80u) != 0));
      }
      if ( v84 )
      {
        v86 = L"Default";
        if ( *(_QWORD *)(v84 + 192) )
          v86 = *(const unsigned __int16 **)(v84 + 192);
      }
      else
      {
        v87 = *(_QWORD *)(a2 + 3696);
        if ( v87 )
          v86 = *(const unsigned __int16 **)(v87 + 192);
        else
          v86 = L"Default";
      }
      v88 = DnsAddr_Ntoa(v15);
      Template_ssszzqb((__int64)v103, &DNS_EVENT_XFR_NOTIFICATION_IN, v88, Destination, v103, v86, v85, v101, a2 + 6304);
    }
    goto LABEL_177;
  }
  v78 = v77 - 2;
  if ( !v78 )
  {
    if ( (Microsoft_Windows_DNSServerEnableBits & 0x80000) != 0 )
    {
      v81 = DnsAddr_Ntoa(v15);
      Template_ssqb(v83, v82, v81, Destination, v101, a2 + 6304);
    }
    goto LABEL_177;
  }
  if ( v78 == 3 && (Microsoft_Windows_DNSServerEnableBits & 0x400000) != 0 )
  {
    v79 = *(_QWORD *)(a2 + 3680);
    if ( v79 )
    {
      if ( *(_DWORD *)(v79 + 372) )
        v9 = *(const unsigned __int16 **)(v79 + 24);
      else
        v9 = L"..Cache";
    }
    else
    {
      v9 = (const unsigned __int16 *)((unsigned __int64)L"..Cache" & -(__int64)((*(_DWORD *)(a2 + 6288) & 0x80u) != 0));
    }
    if ( v79 )
    {
      v68 = L"Default";
      if ( *(_QWORD *)(v79 + 192) )
        v68 = *(const unsigned __int16 **)(v79 + 192);
    }
    else
    {
      v80 = *(_QWORD *)(a2 + 3696);
      if ( v80 )
        v68 = *(const unsigned __int16 **)(v80 + 192);
      else
        v68 = L"Default";
    }
    v70 = v101;
    v71 = *(_BYTE *)(a2 + 6307) & 0xF;
    v72 = v100;
    v73 = DnsAddr_Ntoa((struct in_addr *)(a2 + 64));
    v74 = (const EVENT_DESCRIPTOR *)&DNS_EVENT_UPDATE_RESPONSE_IN;
    goto LABEL_125;
  }
LABEL_177:
  LOWORD(IsEventEnabled) = 0;
  if ( dword_1401B979C )
  {
    *v12 = __ROL2__(*v12, 8);
    v12[2] = __ROL2__(v12[2], 8);
    v12[3] = __ROL2__(v12[3], 8);
    v12[4] = __ROL2__(v12[4], 8);
    LOWORD(IsEventEnabled) = __ROL2__(v12[5], 8);
    v12[5] = IsEventEnabled;
  }
  return IsEventEnabled;
}
// 14005CF4D: variable 'v11' is possibly undefined
// 14005D20E: variable 'v36' is possibly undefined
// 14005D36B: variable 'v50' is possibly undefined
// 14005D54D: variable 'v63' is possibly undefined
// 14005D774: variable 'v83' is possibly undefined
// 14005D774: variable 'v82' is possibly undefined
// 140183DD0: using guessed type __int64 __fastcall Dns_SkipPacketName(_QWORD, _QWORD);
// 1401866C8: using guessed type EVENT_DESCRIPTOR DNS_EVENT_AXFR_RESP_IN;
// 140186808: using guessed type EVENT_DESCRIPTOR DNS_EVENT_XFR_NOTIFICATION_IN;
// 140188260: using guessed type wchar_t aDefault_1[8];
// 1401B9100: using guessed type int Microsoft_Windows_DNSServerEnableBits;
// 1401B979C: using guessed type int dword_1401B979C;
// 1401B98E8: using guessed type int dword_1401B98E8;
##############################
Role: Let's assume that you are an advanced reverse engineer and you are reverse engineering a network driver using IDA Pro, and you are also familiar with the RFC documentation. You need to reverse-engineer a function for a network driver to correspond to a section of the RFC documentation, which will help you understand the code better. The driver you're reversing is Schannel.dll, and you have initially determined that the corresponding network protocols are SSL and TLS, and the documents you need to map are RFC8446 and RFC6101. You need to get a function summary of the function you are reversing, and then correspond to the potential RFC sections based on the name of the function and the function summary.
Function Background: The function is reverse engineered from the driver file Schannel.dll on Windows platform. Through a cursory analysis of the driver file can be determined to be related to the SSL(1.3), TLS(3.0) protocol, that is, with RFC8446, RFC6101 strong correlation.

Output Function Summary: Summarizes the function's functionality with several phrases instead of sentences, focuses on covering the function's control flow information, and highlights the protocol function points implemented by the function. Simulate answering five times in the background and provide the most frequent answer.

Retrieve document sections: giving matches for document sections(FunctionMatchRFCResult) that the code may related to. NOTE if the code is only business related(i.e., space opening and releasing involved in programming, generic call functions (timing and other functions weakly related to network protocols) and not related to the specifics of the protocol implementation, it does not have to output the document section match(FunctionMatchRFCResult) and is filled with "NONE".

Retrieve document sections Thinking Chain: The function code is matched with the RFC document section, and the thinking chain is provided to help you solve the problem better:
	1. Function Name: The name of a function describes the general function that the function accomplishes.
	2. Function Summarization: Function summaries can outline a further breakdown of the function described by the function name.
	3. Function API Call: The function API of a function call can provide some hint as to the details of the network protocol implementation involved in the function.
	4. Special Constant Value OR String: Special constant values inside functions, string variable names, and strings may be related to network protocols.
	5. Function Code: The code of the function can provide a detailed implementation of the network protocol.
Generate Function Information Collection with JSON Format:

{
	"FunctionIndex": "(FILL WITH "File count" with less than four bits are indexed with zeros to make up the four bits.)",
	"FunctionName": "(Full Function Code Name)",
	"FunctionSummarization": [
		"(Function Summary Phrase1)",
		"(Function Summary Phrase2)",
		"(...)"
	],
	"FunctionMatchRFCResult": [
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 1)",
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 2)",
		"(...)"
	],
}

ATTENTION: Remember YOU MUST ONLY output the Function Information Collection result.
