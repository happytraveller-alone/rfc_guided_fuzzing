Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 2350
// Total lines: 147

//----- (0000000140121140) ----------------------------------------------------
__int64 __fastcall RrsigFileRead(__int64 a1, unsigned int a2, __int64 a3, __int64 a4, int a5)
{
  unsigned int v8; // edi
  u_short v9; // r15
  unsigned int v10; // edi
  char v11; // r13
  unsigned int v12; // edi
  bool v13; // zf
  u_long v14; // eax
  u_long v15; // eax
  unsigned __int16 v16; // cx
  _BYTE *v17; // rax
  _BYTE *v18; // r14
  u_short v19; // ax
  u_long v20; // ecx
  u_long v21; // eax
  u_long v22; // ecx
  u_long v23; // eax
  u_long v24; // ecx
  u_long v25; // eax
  u_short v26; // cx
  u_short v27; // ax
  size_t v28; // r8
  void *v29; // rdx
  _BYTE *v30; // rcx
  u_long v32; // [rsp+30h] [rbp-D0h] BYREF
  unsigned int Size; // [rsp+34h] [rbp-CCh] BYREF
  u_long Size_4; // [rsp+38h] [rbp-C8h]
  u_long v35; // [rsp+3Ch] [rbp-C4h]
  u_long v36; // [rsp+40h] [rbp-C0h]
  u_long hostlong; // [rsp+44h] [rbp-BCh]
  void *Src; // [rsp+48h] [rbp-B8h] BYREF
  unsigned __int8 v39[272]; // [rsp+50h] [rbp-B0h] BYREF

  Src = 0i64;
  if ( a2 < 8 )
  {
    v8 = -1072573181;
    goto LABEL_33;
  }
  v9 = Dns_RecordTypeForNameA(*(_BYTE **)a3, *(_DWORD *)(a3 + 8));
  if ( !v9 )
  {
    v9 = DnsRecordTypeForUnknownRecords(*(const char **)a3, *(_DWORD *)(a3 + 8));
    if ( !v9 )
      goto LABEL_32;
  }
  v10 = a2 - 1;
  v11 = Dns_ValueForString((__int64)&DnssecAlgorithmTable, 1, *(_QWORD *)(a3 + 16), *(_DWORD *)(a3 + 24));
  if ( v11 == -1 )
  {
    if ( !(unsigned int)File_ParseDwordToken(&v32, a3 + 16, a4) || v32 > 0xFF )
      goto LABEL_32;
    v11 = v32;
  }
  if ( !(unsigned int)File_ParseDwordToken(&v32, a3 + 32, a4) )
    goto LABEL_32;
  v36 = v32;
  if ( v32 > 0x7F || !(unsigned int)File_ParseDwordToken(&v32, a3 + 48, a4) )
    goto LABEL_32;
  v12 = v10 - 3;
  v13 = *(_DWORD *)(a3 + 72) == 14;
  hostlong = v32;
  if ( v13 )
  {
    v14 = Dns_ParseSigTime(*(_QWORD *)(a3 + 64), 14);
  }
  else
  {
    if ( !(unsigned int)File_ParseDwordToken(&v32, a3 + 64, a4) )
      goto LABEL_32;
    v14 = v32;
  }
  v13 = *(_DWORD *)(a3 + 88) == 14;
  Size_4 = v14;
  if ( !v13 )
  {
    if ( (unsigned int)File_ParseDwordToken(&v32, a3 + 80, a4) )
    {
      v15 = v32;
      goto LABEL_20;
    }
LABEL_32:
    v8 = -1072573183;
    goto LABEL_33;
  }
  v15 = Dns_ParseSigTime(*(_QWORD *)(a3 + 80), 14);
LABEL_20:
  v35 = v15;
  if ( !(unsigned int)File_ParseDwordToken(&v32, a3 + 96, a4)
    || v32 > 0xFFFF
    || (unsigned int)File_ReadCountNameFromToken(v39, 0i64, a4, (const void **)(a3 + 112), a5) )
  {
    goto LABEL_32;
  }
  v8 = buildKeyOrSignatureFromTokens(&Src, &Size, v12 - 4, a3 + 128);
  if ( !v8 )
  {
    if ( Size > 0xFFFF
      || (unsigned int)v39[0] + 2 > 0xFFFF
      || (v16 = v39[0] + 20, v16 < 0x12u)
      || (unsigned __int16)(v16 + Size) < v16 )
    {
      v8 = 13;
    }
    else
    {
      v17 = RR_AllocateEx(v16 + (unsigned __int16)Size, 0, 0);
      v18 = v17;
      if ( v17 )
      {
        *(_QWORD *)(a4 + 800) = v17;
        Name_CopyCountName(v17 + 74, v39);
        v19 = htons(v9);
        v20 = hostlong;
        *((_WORD *)v18 + 28) = v19;
        v18[59] = v36;
        v18[58] = v11;
        v21 = htonl(v20);
        v22 = Size_4;
        *((_DWORD *)v18 + 15) = v21;
        v23 = htonl(v22);
        v24 = v35;
        *((_DWORD *)v18 + 16) = v23;
        v25 = htonl(v24);
        v26 = v32;
        *((_DWORD *)v18 + 17) = v25;
        v27 = htons(v26);
        v28 = Size;
        v29 = Src;
        v30 = &v18[(unsigned __int8)v18[74] + 76];
        *((_WORD *)v18 + 36) = v27;
        memcpy_0(v30, v29, v28);
      }
      else
      {
        v8 = 14;
      }
    }
  }
LABEL_33:
  Mem_Free(Src, 0i64, 0i64, (__int64)"ds\\dns\\server\\dnscore\\rrfile.c", 3106);
  if ( v8 == -1072573183 )
    *(_DWORD *)(a4 + 1596) = -1072573180;
  return v8;
}
