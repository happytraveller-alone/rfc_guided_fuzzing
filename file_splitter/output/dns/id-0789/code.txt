Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 789
// Total lines: 101

//----- (000000014006ECB0) ----------------------------------------------------
void __fastcall RR_Free(__int64 a1)
{
  int v2; // ebp
  CDnsClientSubnetRecordsTrie *v3; // rcx
  __int16 v4; // ax
  __int16 v5; // ax
  _QWORD **v6; // rdi
  __int64 v7; // rsi
  unsigned int v8; // edi
  __int64 v9; // [rsp+20h] [rbp-28h]

  if ( a1 )
  {
    v2 = 0;
    v3 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x80000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
    {
      WPP_SF_qd(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0xBu,
        (__int64)&WPP_103a918d359034d16f977c36c11204c8_Traceguids,
        a1,
        *(unsigned __int8 *)(a1 - 11));
      v3 = WPP_GLOBAL_Control;
    }
    if ( (*((_DWORD *)v3 + 17) & 0x10000) != 0
      && (*(_WORD *)(a1 + 12) & 0xFFFC) == 0xFF00
      && v3 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && *((char *)v3 + 68) < 0
      && *((_BYTE *)v3 + 65) >= 5u )
    {
      WPP_SF_q(*((_QWORD *)v3 + 7), 0xCu, (__int64)&WPP_103a918d359034d16f977c36c11204c8_Traceguids, a1);
    }
    if ( *(_QWORD *)a1 != 0xFE0B0BEFFE0B0BEFui64 )
    {
      v4 = *(_WORD *)(a1 + 12);
      if ( (v4 == 2 || v4 == 6 || (unsigned __int16)(v4 + 255) <= 1u) && (v5 = *(_WORD *)(a1 + 10), (v5 & 0x200) == 0) )
      {
        *(_WORD *)(a1 + 10) = v5 | 0x200;
        Timeout_FreeWithFunctionEx(a1, (__int64)RR_Free, (__int64)"ds\\dns\\server\\server\\record.c", 168);
        _InterlockedAdd(&dword_1401B9A6C, 1u);
      }
      else
      {
        if ( (*(_BYTE *)(a1 + 8) & 1) != 0 )
        {
          _InterlockedDecrement(&dword_1401B9A64);
          _InterlockedAdd(&dword_1401B9A68, 1u);
        }
        if ( (*(_WORD *)(a1 + 10) & 0x200) != 0 )
          _InterlockedAdd(&dword_1401B9A70, 1u);
        v6 = (_QWORD **)(a1 + 32);
        v7 = 3i64;
        do
        {
          RR_ListFree(*v6++);
          --v7;
        }
        while ( v7 );
        if ( *(_WORD *)(a1 + 12) == 0xF0F0 || *(char *)(a1 + 10) < 0 )
        {
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x100) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
          {
            LODWORD(v9) = *(unsigned __int16 *)(a1 + 12);
            WPP_SF_qd(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0xAu,
              (__int64)&WPP_103a918d359034d16f977c36c11204c8_Traceguids,
              a1,
              v9);
          }
          RR_ListFree(*(_QWORD **)(a1 + 56));
        }
        v8 = *(unsigned __int16 *)(a1 + 14) + 56;
        LOBYTE(v2) = v8 <= 0xA0;
        if ( v2 != *(unsigned __int8 *)(a1 + 9) >> 7 )
          Dbg_HardAssert(
            "ds\\dns\\server\\server\\record.c",
            0xCFu,
            "Mem_IsStandardBlockLength( length ) == pRR->Reserved.StandardAlloc");
        Mem_Free((_QWORD *)a1, v8, 0i64, (__int64)"ds\\dns\\server\\server\\record.c", 210);
        _InterlockedAdd(&dword_1401B9A58, 1u);
        _InterlockedDecrement(&dword_1401B9A50);
        _InterlockedExchangeAdd(&dword_1401B9A5C, -v8);
      }
    }
  }
}
// 14006EE5E: variable 'v9' is possibly undefined
// 1401B9A50: using guessed type int dword_1401B9A50;
// 1401B9A58: using guessed type int dword_1401B9A58;
// 1401B9A5C: using guessed type int dword_1401B9A5C;
// 1401B9A64: using guessed type int dword_1401B9A64;
// 1401B9A68: using guessed type int dword_1401B9A68;
// 1401B9A6C: using guessed type int dword_1401B9A6C;
// 1401B9A70: using guessed type int dword_1401B9A70;
