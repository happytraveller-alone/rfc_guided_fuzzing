Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 2634
// Total lines: 358

//----- (000000014013AB44) ----------------------------------------------------
__int64 *__fastcall std::_Tree<std::_Tmap_traits<IP6_ADDRESS,CDnsPolicy_CriteriaNode *,bool (*)(IP6_ADDRESS const &,IP6_ADDRESS const &),std::allocator<std::pair<IP6_ADDRESS const,CDnsPolicy_CriteriaNode *>>,0>>::erase(
        __int64 a1,
        __int64 *a2,
        __int64 *a3)
{
  __int64 *v5; // rcx
  __int64 *v6; // r10
  __int64 i; // r9
  __int64 j; // rax
  __int64 v9; // r8
  __int64 v10; // rdx
  __int64 v11; // rax
  __int64 **v12; // r9
  __int64 *v13; // rax
  __int64 *v14; // rcx
  __int64 v15; // r9
  __int64 v16; // rax
  __int64 v17; // rcx
  __int64 v18; // rax
  __int64 *v19; // rax
  char v20; // cl
  __int64 *v21; // rcx
  __int64 *v22; // rcx
  __int64 v23; // rax
  __int64 **v24; // rax
  __int64 v25; // r9
  __int64 v26; // rax
  __int64 v27; // rax
  __int64 *v28; // rcx
  __int64 v29; // rax
  __int64 v30; // rax
  __int64 **v31; // rax
  __int64 *v32; // rax
  __int64 *v33; // rcx
  __int64 v34; // rax
  __int64 **v35; // rax
  __int64 **v36; // r9
  __int64 v37; // rax
  __int64 **v38; // rax
  __int64 v39; // rax
  __int64 v40; // rax
  __int64 **v41; // rax
  __int64 v42; // rax
  __int64 v44; // [rsp+40h] [rbp+18h]

  if ( *((_BYTE *)a3 + 49) )
    std::_Xout_of_range("invalid map/set<T> iterator");
  v5 = a3 + 2;
  v6 = a3;
  i = a3[2];
  if ( *(_BYTE *)(i + 49) )
  {
    for ( i = a3[1]; !*(_BYTE *)(i + 49) && a3 == *(__int64 **)(i + 16); i = *(_QWORD *)(i + 8) )
      a3 = (__int64 *)i;
  }
  else
  {
    for ( j = *(_QWORD *)i; !*(_BYTE *)(j + 49); j = *(_QWORD *)j )
      i = j;
  }
  v44 = i;
  if ( *(_BYTE *)(*v6 + 49) )
  {
    v9 = *v5;
LABEL_16:
    v10 = v6[1];
    if ( !*(_BYTE *)(v9 + 49) )
      *(_QWORD *)(v9 + 8) = v10;
    v11 = *(_QWORD *)(a1 + 8);
    if ( *(__int64 **)(v11 + 8) == v6 )
    {
      *(_QWORD *)(v11 + 8) = v9;
    }
    else if ( *(__int64 **)v10 == v6 )
    {
      *(_QWORD *)v10 = v9;
    }
    else
    {
      *(_QWORD *)(v10 + 16) = v9;
    }
    v12 = *(__int64 ***)(a1 + 8);
    if ( *v12 == v6 )
    {
      if ( *(_BYTE *)(v9 + 49) )
      {
        v13 = (__int64 *)v10;
      }
      else
      {
        v14 = *(__int64 **)v9;
        v13 = (__int64 *)v9;
        while ( !*((_BYTE *)v14 + 49) )
        {
          v13 = v14;
          v14 = (__int64 *)*v14;
        }
      }
      *v12 = v13;
    }
    v15 = *(_QWORD *)(a1 + 8);
    if ( *(__int64 **)(v15 + 16) == v6 )
    {
      if ( *(_BYTE *)(v9 + 49) )
      {
        v16 = v10;
      }
      else
      {
        v17 = *(_QWORD *)(v9 + 16);
        v16 = v9;
        while ( !*(_BYTE *)(v17 + 49) )
        {
          v16 = v17;
          v17 = *(_QWORD *)(v17 + 16);
        }
      }
      *(_QWORD *)(v15 + 16) = v16;
    }
    goto LABEL_48;
  }
  if ( *(_BYTE *)(*v5 + 49) )
  {
    v9 = *v6;
    goto LABEL_16;
  }
  v9 = *(_QWORD *)(i + 16);
  if ( (__int64 *)i == v6 )
    goto LABEL_16;
  *(_QWORD *)(*v6 + 8) = i;
  *(_QWORD *)i = *v6;
  if ( i == *v5 )
  {
    v10 = i;
  }
  else
  {
    v10 = *(_QWORD *)(i + 8);
    if ( !*(_BYTE *)(v9 + 49) )
      *(_QWORD *)(v9 + 8) = v10;
    *(_QWORD *)v10 = v9;
    *(_QWORD *)(i + 16) = *v5;
    *(_QWORD *)(*v5 + 8) = i;
  }
  v18 = *(_QWORD *)(a1 + 8);
  if ( *(__int64 **)(v18 + 8) == v6 )
  {
    *(_QWORD *)(v18 + 8) = i;
  }
  else
  {
    v19 = (__int64 *)v6[1];
    if ( (__int64 *)*v19 == v6 )
      *v19 = i;
    else
      v19[2] = i;
  }
  *(_QWORD *)(i + 8) = v6[1];
  v20 = *(_BYTE *)(i + 48);
  *(_BYTE *)(i + 48) = *((_BYTE *)v6 + 48);
  *((_BYTE *)v6 + 48) = v20;
LABEL_48:
  if ( *((_BYTE *)v6 + 48) != 1 )
    goto LABEL_114;
  while ( v9 != *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8i64) && *(_BYTE *)(v9 + 48) == 1 )
  {
    v21 = *(__int64 **)v10;
    if ( v9 == *(_QWORD *)v10 )
    {
      v21 = *(__int64 **)(v10 + 16);
      if ( !*((_BYTE *)v21 + 48) )
      {
        *((_BYTE *)v21 + 48) = 1;
        v22 = *(__int64 **)(v10 + 16);
        *(_BYTE *)(v10 + 48) = 0;
        *(_QWORD *)(v10 + 16) = *v22;
        if ( !*(_BYTE *)(*v22 + 49) )
          *(_QWORD *)(*v22 + 8) = v10;
        v22[1] = *(_QWORD *)(v10 + 8);
        v23 = *(_QWORD *)(a1 + 8);
        if ( v10 == *(_QWORD *)(v23 + 8) )
        {
          *(_QWORD *)(v23 + 8) = v22;
        }
        else
        {
          v24 = *(__int64 ***)(v10 + 8);
          if ( (__int64 *)v10 == *v24 )
            *v24 = v22;
          else
            v24[2] = v22;
        }
        *v22 = v10;
        *(_QWORD *)(v10 + 8) = v22;
        v21 = *(__int64 **)(v10 + 16);
      }
      if ( !*((_BYTE *)v21 + 49) )
      {
        if ( *(_BYTE *)(*v21 + 48) != 1 || *(_BYTE *)(v21[2] + 48) != 1 )
        {
          if ( *(_BYTE *)(v21[2] + 48) == 1 )
          {
            *(_BYTE *)(*v21 + 48) = 1;
            v25 = *v21;
            *((_BYTE *)v21 + 48) = 0;
            *v21 = *(_QWORD *)(v25 + 16);
            v26 = *(_QWORD *)(v25 + 16);
            if ( !*(_BYTE *)(v26 + 49) )
              *(_QWORD *)(v26 + 8) = v21;
            *(_QWORD *)(v25 + 8) = v21[1];
            v27 = *(_QWORD *)(a1 + 8);
            if ( v21 == *(__int64 **)(v27 + 8) )
            {
              *(_QWORD *)(v27 + 8) = v25;
            }
            else
            {
              v32 = (__int64 *)v21[1];
              if ( v21 == (__int64 *)v32[2] )
                v32[2] = v25;
              else
                *v32 = v25;
            }
            *(_QWORD *)(v25 + 16) = v21;
            v21[1] = v25;
            v21 = *(__int64 **)(v10 + 16);
          }
          *((_BYTE *)v21 + 48) = *(_BYTE *)(v10 + 48);
          *(_BYTE *)(v10 + 48) = 1;
          *(_BYTE *)(v21[2] + 48) = 1;
          v33 = *(__int64 **)(v10 + 16);
          *(_QWORD *)(v10 + 16) = *v33;
          if ( !*(_BYTE *)(*v33 + 49) )
            *(_QWORD *)(*v33 + 8) = v10;
          v33[1] = *(_QWORD *)(v10 + 8);
          v34 = *(_QWORD *)(a1 + 8);
          if ( v10 == *(_QWORD *)(v34 + 8) )
          {
            *(_QWORD *)(v34 + 8) = v33;
          }
          else
          {
            v35 = *(__int64 ***)(v10 + 8);
            if ( (__int64 *)v10 == *v35 )
              *v35 = v33;
            else
              v35[2] = v33;
          }
          *v33 = v10;
LABEL_112:
          *(_QWORD *)(v10 + 8) = v33;
          break;
        }
LABEL_81:
        *((_BYTE *)v21 + 48) = 0;
      }
    }
    else
    {
      if ( !*((_BYTE *)v21 + 48) )
      {
        *((_BYTE *)v21 + 48) = 1;
        v28 = *(__int64 **)v10;
        *(_BYTE *)(v10 + 48) = 0;
        *(_QWORD *)v10 = v28[2];
        v29 = v28[2];
        if ( !*(_BYTE *)(v29 + 49) )
          *(_QWORD *)(v29 + 8) = v10;
        v28[1] = *(_QWORD *)(v10 + 8);
        v30 = *(_QWORD *)(a1 + 8);
        if ( v10 == *(_QWORD *)(v30 + 8) )
        {
          *(_QWORD *)(v30 + 8) = v28;
        }
        else
        {
          v31 = *(__int64 ***)(v10 + 8);
          if ( (__int64 *)v10 == v31[2] )
            v31[2] = v28;
          else
            *v31 = v28;
        }
        v28[2] = v10;
        *(_QWORD *)(v10 + 8) = v28;
        v21 = *(__int64 **)v10;
      }
      if ( !*((_BYTE *)v21 + 49) )
      {
        if ( *(_BYTE *)(v21[2] + 48) != 1 || *(_BYTE *)(*v21 + 48) != 1 )
        {
          if ( *(_BYTE *)(*v21 + 48) == 1 )
          {
            *(_BYTE *)(v21[2] + 48) = 1;
            v36 = (__int64 **)v21[2];
            *((_BYTE *)v21 + 48) = 0;
            v21[2] = (__int64)*v36;
            if ( !*((_BYTE *)*v36 + 49) )
              (*v36)[1] = (__int64)v21;
            v36[1] = (__int64 *)v21[1];
            v37 = *(_QWORD *)(a1 + 8);
            if ( v21 == *(__int64 **)(v37 + 8) )
            {
              *(_QWORD *)(v37 + 8) = v36;
            }
            else
            {
              v38 = (__int64 **)v21[1];
              if ( v21 == *v38 )
                *v38 = (__int64 *)v36;
              else
                v38[2] = (__int64 *)v36;
            }
            *v36 = v21;
            v21[1] = (__int64)v36;
            v21 = *(__int64 **)v10;
          }
          *((_BYTE *)v21 + 48) = *(_BYTE *)(v10 + 48);
          *(_BYTE *)(v10 + 48) = 1;
          *(_BYTE *)(*v21 + 48) = 1;
          v33 = *(__int64 **)v10;
          *(_QWORD *)v10 = *(_QWORD *)(*(_QWORD *)v10 + 16i64);
          v39 = v33[2];
          if ( !*(_BYTE *)(v39 + 49) )
            *(_QWORD *)(v39 + 8) = v10;
          v33[1] = *(_QWORD *)(v10 + 8);
          v40 = *(_QWORD *)(a1 + 8);
          if ( v10 == *(_QWORD *)(v40 + 8) )
          {
            *(_QWORD *)(v40 + 8) = v33;
          }
          else
          {
            v41 = *(__int64 ***)(v10 + 8);
            if ( (__int64 *)v10 == v41[2] )
              v41[2] = v33;
            else
              *v41 = v33;
          }
          v33[2] = v10;
          goto LABEL_112;
        }
        goto LABEL_81;
      }
    }
    v9 = v10;
    v10 = *(_QWORD *)(v10 + 8);
  }
  *(_BYTE *)(v9 + 48) = 1;
LABEL_114:
  operator delete(v6);
  v42 = *(_QWORD *)(a1 + 16);
  if ( v42 )
    *(_QWORD *)(a1 + 16) = v42 - 1;
  *a2 = v44;
  return a2;
}
// 140184CA8: using guessed type void __stdcall operator delete(void *);
