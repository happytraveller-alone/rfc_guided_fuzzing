Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 658
// Total lines: 125

//----- (000000014005DE18) ----------------------------------------------------
__int16 __fastcall Etw_LogInternalLookupQuery(
        unsigned __int16 a1,
        struct in_addr *a2,
        char a3,
        unsigned __int8 *a4,
        unsigned int a5,
        unsigned __int8 *a6)
{
  int v7; // ebx
  unsigned int s_w2; // ebp
  char *v10; // rax
  struct in_addr *v11; // r12
  USHORT s_w1; // r14
  const char *v13; // rax
  char v14; // dl
  int v15; // ebx
  char v16; // r15
  char v17; // al
  char v18; // di
  char v19; // si
  char v20; // bl
  const char *v21; // rax
  const EVENT_DESCRIPTOR *v22; // rdx
  char v23; // al
  const char *v26; // [rsp+78h] [rbp-200h]
  __int16 v27[184]; // [rsp+80h] [rbp-1F8h] BYREF
  char Destination[64]; // [rsp+1F0h] [rbp-88h] BYREF

  v7 = a1;
  memset_0(Destination, 0, sizeof(Destination));
  LOWORD(s_w2) = 0;
  LODWORD(v10) = Etw_IsEventEnabled(v7);
  if ( !(_DWORD)v10 )
    return (__int16)v10;
  v11 = a2 + 1576;
  s_w1 = a2[1576].S_un.S_un_w.s_w1;
  if ( dword_1401B979C )
  {
    s_w2 = a2[1575].S_un.S_un_w.s_w2;
    if ( s_w2 > dword_1401B98E8 )
      LOWORD(s_w2) = dword_1401B98E8;
    v11->S_un.S_un_w.s_w1 = __ROL2__(s_w1, 8);
    a2[1577].S_un.S_un_w.s_w1 = __ROL2__(a2[1577].S_un.S_un_w.s_w1, 8);
    a2[1577].S_un.S_un_w.s_w2 = __ROL2__(a2[1577].S_un.S_un_w.s_w2, 8);
    a2[1578].S_un.S_un_w.s_w1 = __ROL2__(a2[1578].S_un.S_un_w.s_w1, 8);
    a2[1578].S_un.S_un_w.s_w2 = __ROL2__(a2[1578].S_un.S_un_w.s_w2, 8);
  }
  v13 = DnsAddr_Ntoa(a2 + 32);
  if ( v13 )
    strcpy_s(Destination, 0x40ui64, v13);
  if ( a6 )
  {
    a4 = a6;
  }
  else if ( (a5 & 0x40000) == 0 )
  {
    if ( (~(a5 >> 6) & 1) != 0 )
      LODWORD(v10) = Name_ConvertPacketNameToLookupNameEx((__int64)a2, a4, (unsigned __int16 *)v27, 1);
    else
      LODWORD(v10) = Name_ConvertRawNameToLookupName(a4, (unsigned __int16 *)v27);
    if ( !(_DWORD)v10 )
      goto LABEL_23;
    a4 = (unsigned __int8 *)v27;
  }
  v10 = Etw_LookupName(a4);
  v14 = __ROL2__(a2[1576].S_un.S_un_w.s_w2, 8);
  v26 = v10;
  v15 = v7 - 279;
  if ( !v15 )
  {
    if ( (Microsoft_Windows_DNSServerEnableBits & 0x800000) == 0 )
      goto LABEL_23;
    s_w2 = (unsigned __int16)s_w2;
    v16 = v14;
    v23 = ntohs(a2[16].S_un.S_un_w.s_w2);
    v18 = a3;
    v19 = a2[1576].S_un.S_un_b.s_b3 & 1;
    v20 = v23;
    v21 = DnsAddr_Ntoa(a2 + 16);
    v22 = (const EVENT_DESCRIPTOR *)&DNS_EVENT_INTERNAL_LOOKUP_CNAME;
    goto LABEL_22;
  }
  if ( v15 == 1 && (Microsoft_Windows_DNSServerEnableBits & 0x1000000) != 0 )
  {
    s_w2 = (unsigned __int16)s_w2;
    v16 = v14;
    v17 = ntohs(a2[16].S_un.S_un_w.s_w2);
    v18 = a3;
    v19 = a2[1576].S_un.S_un_b.s_b3 & 1;
    v20 = v17;
    v21 = DnsAddr_Ntoa(a2 + 16);
    v22 = (const EVENT_DESCRIPTOR *)&DNS_EVENT_INTERNAL_LOOKUP_ADDITIONAL;
LABEL_22:
    LOWORD(v10) = Template_csscsqqqqqb(
                    (__int64)v26,
                    v22,
                    a2[353].S_un.S_un_b.s_b2,
                    Destination,
                    v21,
                    v19,
                    v26,
                    v18,
                    v20,
                    v16,
                    s_w1,
                    s_w2,
                    (__int64)&a2[1576]);
  }
LABEL_23:
  if ( dword_1401B979C )
  {
    v11->S_un.S_un_w.s_w1 = __ROL2__(v11->S_un.S_un_w.s_w1, 8);
    a2[1577].S_un.S_un_w.s_w1 = __ROL2__(a2[1577].S_un.S_un_w.s_w1, 8);
    a2[1577].S_un.S_un_w.s_w2 = __ROL2__(a2[1577].S_un.S_un_w.s_w2, 8);
    a2[1578].S_un.S_un_w.s_w1 = __ROL2__(a2[1578].S_un.S_un_w.s_w1, 8);
    LOWORD(v10) = __ROL2__(a2[1578].S_un.S_un_w.s_w2, 8);
    a2[1578].S_un.S_un_w.s_w2 = (unsigned __int16)v10;
  }
  return (__int16)v10;
}
// 1401B9100: using guessed type int Microsoft_Windows_DNSServerEnableBits;
// 1401B979C: using guessed type int dword_1401B979C;
// 1401B98E8: using guessed type int dword_1401B98E8;
// 14005DE18: using guessed type unsigned __int16 var_1F8[184];
