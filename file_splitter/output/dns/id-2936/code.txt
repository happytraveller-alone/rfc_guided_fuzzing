Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 2936
// Total lines: 161

//----- (00000001401550CC) ----------------------------------------------------
__int64 __fastcall CDnsVirtualizationManager::UpdateVirtualInstance(
        CDnsVirtualizationManager *this,
        struct _DnssrvRpcVirtualizationInstance *a2)
{
  __int64 *v2; // r12
  unsigned int v3; // ebx
  void *v4; // r15
  void *v5; // rbp
  char v6; // r13
  const unsigned __int16 **v8; // r14
  char *v9; // rcx
  CDnsClientSubnetRecordsTrie *v10; // rcx
  unsigned __int16 v11; // dx
  char *v12; // rcx
  __int64 v13; // rcx
  __int64 *v14; // rax
  __int64 v15; // rcx
  void *v16; // rax
  void *v17; // rax
  __int64 *v19; // [rsp+50h] [rbp+8h] BYREF

  v19 = (__int64 *)this;
  v2 = (__int64 *)g_pVirtualizationManager;
  v3 = 0;
  v4 = 0i64;
  v5 = 0i64;
  v6 = 0;
  if ( !a2 )
  {
    v3 = 87;
LABEL_33:
    MIDL_user_free(v4);
    MIDL_user_free(v5);
    goto LABEL_46;
  }
  v8 = (const unsigned __int16 **)((char *)a2 + 16);
  if ( !*((_QWORD *)a2 + 2) )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      WPP_SF_q(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x13u,
        (__int64)&WPP_4801f8127c993977e52bcb676d808450_Traceguids,
        a2);
    }
    v3 = 9924;
    goto LABEL_33;
  }
  if ( (*((_BYTE *)a2 + 8) & 2) != 0 )
  {
    v9 = (char *)*((_QWORD *)a2 + 3);
    if ( v9 )
    {
      v4 = Dns_StringCopyAllocate(v9, 0, 1i64, 1);
      if ( !v4 )
      {
        v10 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) == 0
          || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
        {
          goto LABEL_17;
        }
        v11 = 20;
LABEL_16:
        WPP_SF_S(*((_QWORD *)v10 + 7), v11, (__int64)&WPP_4801f8127c993977e52bcb676d808450_Traceguids, *v8);
LABEL_17:
        v3 = 14;
        goto LABEL_33;
      }
    }
  }
  if ( (*((_BYTE *)a2 + 8) & 4) != 0 )
  {
    v12 = (char *)*((_QWORD *)a2 + 4);
    if ( v12 )
    {
      v5 = Dns_StringCopyAllocate(v12, 0, 1i64, 1);
      if ( !v5 )
      {
        v10 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) == 0
          || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
        {
          goto LABEL_17;
        }
        v11 = 21;
        goto LABEL_16;
      }
    }
  }
  v13 = v2[1];
  LODWORD(v19) = -1;
  if ( (unsigned int)acquireRead(v13, 0x2710u, (unsigned int *)&v19) == -1 )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x16u, (__int64)&WPP_4801f8127c993977e52bcb676d808450_Traceguids);
    }
    v3 = 9923;
    goto LABEL_33;
  }
  v6 = 1;
  v14 = *std::_Tree<std::_Tmap_traits<unsigned short *,_DnsServerScopeInfo_ *,bool (*)(unsigned short *,unsigned short *),std::allocator<std::pair<unsigned short * const,_DnsServerScopeInfo_ *>>,0>>::find(
           *v2,
           &v19,
           v8);
  if ( v14 == *(__int64 **)(*v2 + 8) )
  {
    v3 = 9922;
    goto LABEL_33;
  }
  v15 = v14[4];
  if ( (*((_BYTE *)a2 + 8) & 2) != 0 )
  {
    v16 = *(void **)(v15 + 8);
    *(_QWORD *)(v15 + 8) = v4;
    v4 = v16;
  }
  if ( (*((_BYTE *)a2 + 8) & 4) != 0 )
  {
    v17 = *(void **)(v15 + 16);
    *(_QWORD *)(v15 + 16) = v5;
    v5 = v17;
  }
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_S(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x17u, (__int64)&WPP_4801f8127c993977e52bcb676d808450_Traceguids, *v8);
  }
  if ( v4 )
    Timeout_FreeWithFunctionEx(
      (__int64)v4,
      0i64,
      (__int64)"ds\\dns\\server\\virtualization\\virtualizationmanager.cpp",
      355);
  if ( !v5 )
    goto LABEL_47;
  Timeout_FreeWithFunctionEx(
    (__int64)v5,
    0i64,
    (__int64)"ds\\dns\\server\\virtualization\\virtualizationmanager.cpp",
    359);
LABEL_46:
  if ( v6 )
  {
LABEL_47:
    LODWORD(v19) = -1;
    releaseRead(v2[1], (unsigned int *)&v19, 1);
  }
  return v3;
}
// 1401B9270: using guessed type struct CDnsVirtualizationManager *g_pVirtualizationManager;
