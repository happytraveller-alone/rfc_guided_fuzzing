Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 1943
// Total lines: 240

//----- (00000001400ED3D4) ----------------------------------------------------
__int64 __fastcall DnsOls_CreateMissingKeys(__int64 a1)
{
  __int64 v1; // rbx
  unsigned int Key; // ebp
  CDnsClientSubnetRecordsTrie *v4; // rcx
  __int64 v5; // rdi
  int v6; // r12d
  char *v7; // rax
  __int64 *v8; // rax
  char *v9; // rax
  __int64 *v10; // rax
  char *v11; // rax
  __int64 *v12; // rax
  int v13; // eax
  char *v14; // rax
  unsigned __int16 v15; // dx
  __int64 v17; // [rsp+20h] [rbp-38h]

  v1 = 0i64;
  Key = 0;
  if ( !a1 )
  {
    Key = 87;
    v4 = WPP_GLOBAL_Control;
    goto LABEL_61;
  }
  v5 = *(_QWORD *)(a1 + 1136);
  v4 = WPP_GLOBAL_Control;
  if ( !v5 )
    goto LABEL_67;
  while ( 1 )
  {
    v6 = 0;
    if ( v4 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)v4 + 17) & 0x200000) != 0
      && *((_BYTE *)v4 + 65) >= 4u )
    {
      v7 = Dbg_GuidString((const IID *)(v5 + 8));
      WPP_SF_Ss(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x43u,
        (__int64)&WPP_4a0a7bf065bf32df4bbeec8f9c7ea0c3_Traceguids,
        (const unsigned __int16 *)v7,
        *(_QWORD *)(a1 + 16));
      v4 = WPP_GLOBAL_Control;
    }
    v8 = (__int64 *)(v5 + 144);
    if ( !*(_QWORD *)(v5 + 144) )
      break;
LABEL_15:
    if ( (*(_DWORD *)(a1 + 1040) & 0x1000) != 0 )
    {
      if ( *(_DWORD *)(v5 + 36) )
      {
        v10 = (__int64 *)(v5 + 168);
        if ( !*(_QWORD *)(v5 + 168) )
        {
          if ( v4 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)v4 + 17) & 0x200000) != 0
            && *((_BYTE *)v4 + 65) >= 4u )
          {
            v11 = Dbg_GuidString((const IID *)(v5 + 8));
            WPP_SF_Ss(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x46u,
              (__int64)&WPP_4a0a7bf065bf32df4bbeec8f9c7ea0c3_Traceguids,
              (const unsigned __int16 *)v11,
              *(_QWORD *)(a1 + 16));
            v10 = (__int64 *)(v5 + 168);
          }
          LODWORD(v17) = 0;
          *(_DWORD *)(v5 + 184) = 3;
          Key = DnsOls_CreateKey((LDAPModW *)a1, v5, 3, v10, v17);
          if ( Key )
          {
            v4 = WPP_GLOBAL_Control;
            if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) == 0
              || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
            {
              goto LABEL_60;
            }
            v14 = Dbg_GuidString((const IID *)(v5 + 8));
            v15 = 71;
            goto LABEL_46;
          }
          v4 = WPP_GLOBAL_Control;
          ++v6;
        }
      }
    }
    if ( !*(_DWORD *)(v5 + 64) && *(_DWORD *)(v5 + 68) != -1 )
    {
      v12 = (__int64 *)(v5 + 192);
      if ( !*(_QWORD *)(v5 + 192) )
      {
        if ( v4 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)v4 + 17) & 0x200000) != 0
          && *((_BYTE *)v4 + 65) >= 4u )
        {
          WPP_SF_qs(
            *((_QWORD *)v4 + 7),
            0x48u,
            (__int64)&WPP_4a0a7bf065bf32df4bbeec8f9c7ea0c3_Traceguids,
            v5,
            *(_QWORD *)(a1 + 16));
          v12 = (__int64 *)(v5 + 192);
        }
        LODWORD(v17) = 0;
        *(_DWORD *)(v5 + 208) = 3;
        Key = DnsOls_CreateKey((LDAPModW *)a1, v5, 3, v12, v17);
        if ( !Key )
        {
          ++v6;
          GetSystemTimeAsFileTime((LPFILETIME)(v5 + 116));
          v4 = WPP_GLOBAL_Control;
          goto LABEL_33;
        }
        v4 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) == 0
          || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
        {
          goto LABEL_60;
        }
        v14 = Dbg_GuidString((const IID *)(v5 + 8));
        v15 = 73;
LABEL_46:
        WPP_SF_DSs(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          v15,
          (__int64)&WPP_4a0a7bf065bf32df4bbeec8f9c7ea0c3_Traceguids,
          Key,
          (__int64)v14,
          *(_QWORD *)(a1 + 16));
        goto LABEL_59;
      }
    }
LABEL_33:
    if ( v4 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)v4 + 17) & 0x200000) != 0
      && *((_BYTE *)v4 + 65) >= 4u )
    {
      WPP_SF_Dqs(
        *((_QWORD *)v4 + 7),
        0x4Au,
        (__int64)&WPP_4a0a7bf065bf32df4bbeec8f9c7ea0c3_Traceguids,
        v6,
        v5,
        *(_QWORD *)(a1 + 16));
      v4 = WPP_GLOBAL_Control;
    }
    if ( v6 <= 0 )
      goto LABEL_40;
    v13 = DnsOls_WriteSkdToStorage(0, a1, v5, 0);
    Key = v13;
    if ( v13 )
    {
      v4 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
      {
        goto LABEL_60;
      }
      WPP_SF_D(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x4Bu,
        (__int64)&WPP_4a0a7bf065bf32df4bbeec8f9c7ea0c3_Traceguids,
        v13);
LABEL_59:
      v4 = WPP_GLOBAL_Control;
      goto LABEL_60;
    }
    v4 = WPP_GLOBAL_Control;
LABEL_40:
    v5 = *(_QWORD *)v5;
    if ( !v5 )
      goto LABEL_60;
  }
  if ( v4 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)v4 + 17) & 0x200000) != 0
    && *((_BYTE *)v4 + 65) >= 4u )
  {
    v9 = Dbg_GuidString((const IID *)(v5 + 8));
    WPP_SF_Ss(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x44u,
      (__int64)&WPP_4a0a7bf065bf32df4bbeec8f9c7ea0c3_Traceguids,
      (const unsigned __int16 *)v9,
      *(_QWORD *)(a1 + 16));
    v8 = (__int64 *)(v5 + 144);
  }
  *(_DWORD *)(v5 + 160) = 0;
  LODWORD(v17) = 0;
  Key = DnsOls_CreateKey((LDAPModW *)a1, v5, 0, v8, v17);
  if ( !Key )
  {
    v4 = WPP_GLOBAL_Control;
    v6 = 1;
    goto LABEL_15;
  }
  v4 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
  {
    v14 = Dbg_GuidString((const IID *)(v5 + 8));
    v15 = 69;
    goto LABEL_46;
  }
LABEL_60:
  if ( Key )
  {
LABEL_61:
    if ( v4 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)v4 + 17) & 0x200000) != 0
      && *((_BYTE *)v4 + 65) >= 2u )
    {
      if ( a1 )
        v1 = *(_QWORD *)(a1 + 16);
      WPP_SF_Ds(*((_QWORD *)v4 + 7), 0x4Du, (__int64)&WPP_4a0a7bf065bf32df4bbeec8f9c7ea0c3_Traceguids, Key, v1);
    }
    return Key;
  }
LABEL_67:
  if ( v4 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)v4 + 17) & 0x200000) != 0
    && *((_BYTE *)v4 + 65) >= 4u )
  {
    WPP_SF_s(
      *((_QWORD *)v4 + 7),
      0x4Cu,
      (__int64)&WPP_4a0a7bf065bf32df4bbeec8f9c7ea0c3_Traceguids,
      *(const char **)(a1 + 16));
  }
  return Key;
}
// 1400ED4F3: variable 'v17' is possibly undefined
