Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 114
// Total lines: 110

//----- (000000014000EEE4) ----------------------------------------------------
__int64 __fastcall DnsBL_TestNodeAgainstBlockList(__int64 a1)
{
  const char **v1; // rdi
  unsigned int v3; // r14d
  __int64 v4; // rax
  unsigned int v5; // ecx
  const char *v6; // rsi
  __int64 v7; // rcx
  void *v8; // rax
  char *v9; // rax
  __int64 v10; // rdx
  char *v11; // rbx
  const char **v12; // rdi
  __int128 v14; // [rsp+40h] [rbp-38h] BYREF
  EVENT_DESCRIPTOR v15; // [rsp+50h] [rbp-28h] BYREF
  __int16 v16; // [rsp+80h] [rbp+8h] BYREF

  v1 = (const char **)qword_1401B99D0;
  v3 = 0;
  if ( a1 )
    v4 = *(_QWORD *)(a1 + 56);
  else
    v4 = 0i64;
  if ( a1 )
  {
    if ( dword_1401B99C8 )
    {
      if ( qword_1401B99D0 )
      {
        if ( v4 )
        {
          v5 = *(_DWORD *)(v4 + 372);
          if ( v5 - 1 <= 1 || v5 >= 5 )
          {
            while ( *v1 )
            {
              v6 = *v1;
              if ( !_strnicmp(*v1, (const char *)(a1 + 102), *(unsigned __int8 *)(a1 + 101)) )
              {
                v7 = -1i64;
                do
                  ++v7;
                while ( v6[v7] );
                if ( v7 == *(unsigned __int8 *)(a1 + 101) )
                {
                  v3 = 1;
                  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
                    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
                  {
                    v8 = FormatLabelA(*(unsigned __int8 *)(a1 + 101), (const void *)(a1 + 102));
                    WPP_SF_qs(
                      *((_QWORD *)WPP_GLOBAL_Control + 7),
                      0xFu,
                      (__int64)&WPP_6d98d6afaca73fdcffe2f9d2c94dcc9e_Traceguids,
                      a1,
                      v8);
                  }
                  v16 = 771;
                  v14 = 0i64;
                  if ( g_fBlockListEventLogged <= 0 && _InterlockedIncrement(&g_fBlockListEventLogged) == 1 )
                  {
                    *(_QWORD *)&v14 = Log_FormatNodeName((__int64 *)a1);
                    if ( (_QWORD)v14 )
                    {
                      v9 = (char *)Mem_AllocZero(0x3E8ui64, 0i64, "ds\\dns\\server\\server\\blocklist.c", 103);
                      v11 = v9;
                      if ( v9 )
                      {
                        v12 = (const char **)qword_1401B99D0;
                        *((_QWORD *)&v14 + 1) = v9;
                        while ( *v12
                             && (!*v11 || (int)StringCchCatA(v11, 1000i64, "\n") >= 0)
                             && (int)StringCchCatA(v11, 1000i64, *v12) >= 0 )
                          ++v12;
                        if ( *v11 )
                        {
                          v15 = DNS_EVENT_GLOBAL_QUERY_BLACKLIST;
                          Eventlog_LogEvent(
                            (__int64)&v15,
                            v10,
                            2u,
                            (unsigned __int16 **)&v14,
                            (unsigned __int8 *)&v16,
                            0,
                            0,
                            0i64);
                        }
                      }
                    }
                  }
                  Mem_Free((_QWORD *)v14, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\blocklist.c", 155);
                  Mem_Free(*((_QWORD **)&v14 + 1), 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\blocklist.c", 156);
                  return v3;
                }
              }
              ++v1;
            }
          }
        }
      }
    }
  }
  return v3;
}
// 14000F0E7: variable 'v10' is possibly undefined
// 1401B8C28: using guessed type int g_fBlockListEventLogged;
// 1401B99C8: using guessed type int dword_1401B99C8;
// 1401B99D0: using guessed type __int64 qword_1401B99D0;
