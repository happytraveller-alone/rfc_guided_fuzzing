Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 961
// Total lines: 158

//----- (0000000140081894) ----------------------------------------------------
__int64 __fastcall W2KRpc_GetServerInfo(int a1, __int64 a2, _DWORD *a3, void ***a4)
{
  void **zero; // rax
  __int64 v7; // r8
  void **v8; // rbx
  CDnsClientSubnetRecordsTrie *v9; // rcx
  unsigned __int16 v10; // dx
  void *v11; // rcx
  void *v12; // rcx
  void *v13; // rcx
  void *v14; // rcx
  void *v15; // rcx
  __int64 result; // rax
  void *v17; // rax

  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_D(*((_QWORD *)WPP_GLOBAL_Control + 7), 0xBu, (__int64)&WPP_50c900b4444f32b255c2c8e70b282079_Traceguids, a1);
  }
  zero = (void **)MIDL_user_allocate_zero(0xD0ui64);
  v8 = zero;
  if ( !zero )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0xCu, (__int64)&WPP_50c900b4444f32b255c2c8e70b282079_Traceguids);
    }
    return 14i64;
  }
  *(_DWORD *)zero = SrvInfo;
  *((_DWORD *)zero + 25) = dword_1401B9754;
  *((_DWORD *)zero + 22) = dword_1401B9770;
  *((_DWORD *)zero + 23) = dword_1401B9798;
  *((_DWORD *)zero + 26) = dword_1401B9854;
  *((_DWORD *)zero + 27) = dword_1401B98B4;
  *((_DWORD *)zero + 28) = dword_1401B97FC;
  *((_DWORD *)zero + 29) = dword_1401B9800;
  *((_DWORD *)zero + 24) = dword_1401B97E0;
  *((_DWORD *)zero + 30) = dword_1401B9808;
  *((_DWORD *)zero + 31) = dword_1401B9858;
  *((_DWORD *)zero + 32) = dword_1401B9904;
  *((_DWORD *)zero + 33) = dword_1401B990C;
  *((_DWORD *)zero + 34) = dword_1401B9910;
  *((_BYTE *)zero + 4) = dword_1401B9728;
  *((_BYTE *)zero + 5) = dword_1401B9724;
  *((_BYTE *)zero + 6) = dword_1401B9838;
  *((_BYTE *)zero + 180) = dword_1401B989C == 0;
  *((_BYTE *)zero + 181) = dword_1401B98A0;
  *((_BYTE *)zero + 182) = dword_1401B97E4;
  *((_BYTE *)zero + 183) = dword_1401B9818;
  *((_BYTE *)zero + 184) = dword_1401B97EC;
  *((_BYTE *)zero + 185) = dword_1401B9814;
  *((_BYTE *)zero + 186) = dword_1401B98A8;
  *((_BYTE *)zero + 187) = dword_1401B98AC;
  *((_BYTE *)zero + 188) = byte_1401B98B8;
  *((_BYTE *)zero + 189) = dword_1401B98BC;
  *((_BYTE *)zero + 190) = dword_1401B98C0;
  *((_BYTE *)zero + 191) = byte_1401B98C8;
  *((_BYTE *)zero + 192) = dword_1401B9908;
  *((_BYTE *)zero + 7) = dword_1401B9740;
  if ( !(unsigned int)RpcUtil_CopyStringToRpcBuffer(zero + 1, Str, v7) )
  {
    v9 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
    {
      goto LABEL_16;
    }
    v10 = 13;
LABEL_15:
    WPP_SF_(*((_QWORD *)v9 + 7), v10, (__int64)&WPP_50c900b4444f32b255c2c8e70b282079_Traceguids);
LABEL_16:
    v11 = v8[1];
    if ( v11 )
      MIDL_user_free(v11);
    v12 = v8[3];
    if ( v12 )
      MIDL_user_free(v12);
    v13 = v8[4];
    if ( v13 )
      MIDL_user_free(v13);
    v14 = v8[5];
    if ( v14 )
      MIDL_user_free(v14);
    v15 = v8[2];
    if ( v15 )
      MIDL_user_free(v15);
    MIDL_user_free(v8);
    return 14i64;
  }
  if ( g_pwszDnsContainerDN )
  {
    v17 = Dns_StringCopyAllocate((char *)g_pwszDnsContainerDN, 0, 1i64, 1);
    v8[2] = v17;
    if ( !v17 )
    {
      v9 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
      {
        goto LABEL_16;
      }
      v10 = 14;
      goto LABEL_15;
    }
  }
  if ( !(unsigned int)RpcUtil_CopyIpArrayToRpcBuffer(v8 + 3, (__int64)g_ServerAddrs)
    || !(unsigned int)RpcUtil_CopyIpArrayToRpcBuffer(v8 + 4, qword_1401B97A0)
    || !(unsigned int)RpcUtil_CopyIpArrayToRpcBuffer(v8 + 5, qword_1401B97D0) )
  {
    goto LABEL_16;
  }
  *a4 = v8;
  result = 0i64;
  *a3 = 6;
  return result;
}
// 140081A8D: variable 'v7' is possibly undefined
// 1401B96F0: using guessed type int SrvInfo;
// 1401B9724: using guessed type int dword_1401B9724;
// 1401B9728: using guessed type int dword_1401B9728;
// 1401B9740: using guessed type int dword_1401B9740;
// 1401B9754: using guessed type int dword_1401B9754;
// 1401B9770: using guessed type int dword_1401B9770;
// 1401B9798: using guessed type int dword_1401B9798;
// 1401B97A0: using guessed type __int64 qword_1401B97A0;
// 1401B97D0: using guessed type __int64 qword_1401B97D0;
// 1401B97E0: using guessed type int dword_1401B97E0;
// 1401B97E4: using guessed type int dword_1401B97E4;
// 1401B97EC: using guessed type int dword_1401B97EC;
// 1401B97FC: using guessed type int dword_1401B97FC;
// 1401B9800: using guessed type int dword_1401B9800;
// 1401B9808: using guessed type int dword_1401B9808;
// 1401B9814: using guessed type int dword_1401B9814;
// 1401B9818: using guessed type int dword_1401B9818;
// 1401B9838: using guessed type int dword_1401B9838;
// 1401B9854: using guessed type int dword_1401B9854;
// 1401B9858: using guessed type int dword_1401B9858;
// 1401B989C: using guessed type int dword_1401B989C;
// 1401B98A0: using guessed type int dword_1401B98A0;
// 1401B98A8: using guessed type int dword_1401B98A8;
// 1401B98AC: using guessed type int dword_1401B98AC;
// 1401B98B4: using guessed type int dword_1401B98B4;
// 1401B98B8: using guessed type char byte_1401B98B8;
// 1401B98BC: using guessed type int dword_1401B98BC;
// 1401B98C0: using guessed type int dword_1401B98C0;
// 1401B98C8: using guessed type char byte_1401B98C8;
// 1401B9904: using guessed type int dword_1401B9904;
// 1401B9908: using guessed type int dword_1401B9908;
// 1401B990C: using guessed type int dword_1401B990C;
// 1401B9910: using guessed type int dword_1401B9910;
##############################
Role: Let's assume that you are an advanced reverse engineer and you are reverse engineering a network driver using IDA Pro, and you are also familiar with the RFC documentation. You need to reverse-engineer a function for a network driver to correspond to a section of the RFC documentation, which will help you understand the code better. The driver you're reversing is Schannel.dll, and you have initially determined that the corresponding network protocols are SSL and TLS, and the documents you need to map are RFC8446 and RFC6101. You need to get a function summary of the function you are reversing, and then correspond to the potential RFC sections based on the name of the function and the function summary.
Function Background: The function is reverse engineered from the driver file Schannel.dll on Windows platform. Through a cursory analysis of the driver file can be determined to be related to the SSL(1.3), TLS(3.0) protocol, that is, with RFC8446, RFC6101 strong correlation.

Output Function Summary: Summarizes the function's functionality with several phrases instead of sentences, focuses on covering the function's control flow information, and highlights the protocol function points implemented by the function. Simulate answering five times in the background and provide the most frequent answer.

Retrieve document sections: giving matches for document sections(FunctionMatchRFCResult) that the code may related to. NOTE if the code is only business related(i.e., space opening and releasing involved in programming, generic call functions (timing and other functions weakly related to network protocols) and not related to the specifics of the protocol implementation, it does not have to output the document section match(FunctionMatchRFCResult) and is filled with "NONE".

Retrieve document sections Thinking Chain: The function code is matched with the RFC document section, and the thinking chain is provided to help you solve the problem better:
	1. Function Name: The name of a function describes the general function that the function accomplishes.
	2. Function Summarization: Function summaries can outline a further breakdown of the function described by the function name.
	3. Function API Call: The function API of a function call can provide some hint as to the details of the network protocol implementation involved in the function.
	4. Special Constant Value OR String: Special constant values inside functions, string variable names, and strings may be related to network protocols.
	5. Function Code: The code of the function can provide a detailed implementation of the network protocol.
Generate Function Information Collection with JSON Format:

{
	"FunctionIndex": "(FILL WITH "File count" with less than four bits are indexed with zeros to make up the four bits.)",
	"FunctionName": "(Full Function Code Name)",
	"FunctionSummarization": [
		"(Function Summary Phrase1)",
		"(Function Summary Phrase2)",
		"(...)"
	],
	"FunctionMatchRFCResult": [
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 1)",
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 2)",
		"(...)"
	],
}

ATTENTION: Remember YOU MUST ONLY output the Function Information Collection result.
