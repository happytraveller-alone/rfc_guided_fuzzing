Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 1173
// Total lines: 195

//----- (0000000140097C10) ----------------------------------------------------
__int64 __fastcall updateWinsRecord(struct _zone_info *a1, __int64 a2, __int64 a3, __int64 a4)
{
  int v4; // r12d
  int v5; // r15d
  struct _zone_info *v8; // rbx
  int v9; // eax
  __int64 v10; // rcx
  unsigned int refreshed; // edi
  __int64 result; // rax
  struct _zone_info *v13; // rcx
  __int64 v14; // rdx
  unsigned int v15; // eax
  __int64 v16; // rsi
  LPVOID AppendUpdate; // rax
  int v18; // eax
  __int64 v19; // rdx
  char v20[64]; // [rsp+40h] [rbp-68h] BYREF
  __int64 v21; // [rsp+C0h] [rbp+18h] BYREF

  v21 = 0i64;
  v4 = 0;
  v5 = 0;
  v8 = a1;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_qqqq(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x3Fu,
      (__int64)&WPP_94ace1326352386894146b7c4d888c88_Traceguids,
      a1,
      a2,
      0i64,
      a4);
  }
  if ( !v8 || !a2 || a2 != *((_QWORD *)v8 + 5) )
    return 87i64;
  v9 = *((_DWORD *)v8 + 93);
  if ( v9 == 1 )
  {
    memset_0(v20, 0, sizeof(v20));
    if ( (*((_BYTE *)v8 + 1040) & 4) != 0 )
    {
      v10 = (__int64)v8;
      if ( *((_QWORD *)v8 + 41) )
        v10 = *((_QWORD *)v8 + 41);
      refreshed = Zone_LockForRPCSeqEx(v10, 0xBB8u);
      if ( refreshed )
      {
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          WPP_SF_Ds(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x40u,
            (__int64)&WPP_94ace1326352386894146b7c4d888c88_Traceguids,
            refreshed,
            *((_QWORD *)v8 + 2));
        }
        return refreshed;
      }
      v5 = 1;
    }
    refreshed = Zone_LockForWriteEx((__int64)v8, 1, 0x2710u, (__int64)"ds\\dns\\server\\server\\rrrpc.c", 118);
    if ( !refreshed )
    {
      if ( *((_DWORD *)v8 + 93) == 1 && (*((_BYTE *)v8 + 1040) & 4) != 0 )
      {
        refreshed = DnsOls_RefreshAllDnsKeyPairObject(v8);
        if ( refreshed )
        {
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            WPP_SF_sd(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x41u,
              (__int64)&WPP_94ace1326352386894146b7c4d888c88_Traceguids,
              *((const char **)v8 + 2));
          }
          goto LABEL_58;
        }
        if ( v5 )
        {
          v13 = v8;
          if ( *((_QWORD *)v8 + 41) )
            v13 = (struct _zone_info *)*((_QWORD *)v8 + 41);
          Lock_ReleaseWrite(*((_QWORD *)v13 + 39));
          v5 = 0;
        }
      }
      Dbase_LockEx(0i64, 2, (__int64)"ds\\dns\\server\\server\\rrrpc.c", 149);
      if ( a4 )
      {
        v15 = Dnssrv_Flat_RecordRead(v8, v14, a4, &v21);
        v16 = v21;
        refreshed = v15;
        if ( v15
          || !v21
          || (AppendUpdate = Up_CreateAppendUpdate((__int64)v20, a2, v21, 0, 0i64),
              (refreshed = RR_UpdateAdd((__int64)v8, a2, v16, (__int64)AppendUpdate, 33562626, 0i64)) != 0) )
        {
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            WPP_SF_D(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x44u,
              (__int64)&WPP_94ace1326352386894146b7c4d888c88_Traceguids,
              refreshed);
          }
          RR_Free(v16);
          Dbase_UnlockEx(0i64, 2, (__int64)"ds\\dns\\server\\server\\rrrpc.c", 74);
          Zone_UnlockAfterWriteEx((__int64)v8, 1, (__int64)"ds\\dns\\server\\server\\rrrpc.c", 75);
          if ( v5 )
          {
            if ( *((_QWORD *)v8 + 41) )
              v8 = (struct _zone_info *)*((_QWORD *)v8 + 41);
            Lock_ReleaseWrite(*((_QWORD *)v8 + 39));
          }
          return refreshed;
        }
      }
      else
      {
        Wins_StopZoneWinsLookup((__int64)v8);
      }
      *((_DWORD *)v8 + 99) |= 0x400u;
      Dbase_UnlockEx(0i64, 2, (__int64)"ds\\dns\\server\\server\\rrrpc.c", 235);
      v18 = Up_ExecuteUpdateEx((const char **)v8, (__int64)v20, 2, 0, (__int64)"ds\\dns\\server\\server\\rrrpc.c", 239);
      refreshed = v18;
      if ( v18
        && WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_D(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x42u,
          (__int64)&WPP_94ace1326352386894146b7c4d888c88_Traceguids,
          v18);
      }
      goto LABEL_58;
    }
    goto LABEL_58;
  }
  if ( (unsigned int)(v9 - 2) > 1 )
    return 87i64;
  result = Zone_LockForWriteEx((__int64)v8, 1, 0x2710u, (__int64)"ds\\dns\\server\\server\\rrrpc.c", 2);
  if ( !(_DWORD)result )
  {
    v4 = 1;
    if ( a4 )
    {
      *(_DWORD *)(a4 + 24) |= 0x10000u;
      refreshed = Dnssrv_Flat_RecordRead(v8, v19, a4, &v21);
      if ( refreshed )
        goto LABEL_58;
      if ( !v21 )
        goto LABEL_58;
      refreshed = Wins_RecordCheck((__int64)v8, a2, v21);
      if ( refreshed != 9753 )
        goto LABEL_58;
      Zone_GetZoneInfoFromResourceRecords((__int64)v8);
    }
    else
    {
      Wins_StopZoneWinsLookup((__int64)v8);
    }
    refreshed = 0;
LABEL_58:
    *((_DWORD *)v8 + 99) |= 0x200u;
    if ( v4 )
      Zone_UnlockAfterWriteEx((__int64)v8, 1, (__int64)"ds\\dns\\server\\server\\rrrpc.c", 62);
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_D(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x43u,
        (__int64)&WPP_94ace1326352386894146b7c4d888c88_Traceguids,
        refreshed);
    }
    return refreshed;
  }
  return result;
}
// 140097E36: variable 'v14' is possibly undefined
// 140098005: variable 'v19' is possibly undefined
