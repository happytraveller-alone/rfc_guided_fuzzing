Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 1534
// Total lines: 456

//----- (00000001400C1488) ----------------------------------------------------
__int64 __fastcall Zone_DatabaseSetup(
        __int64 a1,
        unsigned int a2,
        _BYTE *a3,
        unsigned int a4,
        int a5,
        __int64 a6,
        int a7,
        char *a8)
{
  __int64 v8; // r15
  unsigned __int64 v11; // r14
  unsigned int PartitionForZone; // edi
  _QWORD *v14; // rsi
  char *v15; // r14
  int v16; // r15d
  CDnsClientSubnetRecordsTrie *v17; // rcx
  unsigned __int64 v18; // rcx
  void *v19; // rax
  unsigned int v20; // eax
  int v21; // esi
  char v22; // al
  __int64 v24; // rcx
  __int64 v25; // rcx
  _BYTE *v26; // rax
  char *v27; // r10
  __int64 v28; // rcx
  __int64 v29; // rcx
  __int64 v30; // rcx
  __int64 v31; // rcx
  int v32; // eax
  const CHAR *v33; // r9
  __int64 v34; // r8
  const WCHAR *v35; // r9
  __int64 v36; // rcx
  __int64 v37; // rax
  __int64 v38; // rax
  __int64 v39; // rax
  const WCHAR *v40; // rdx
  __int64 v41; // rax
  const WCHAR **v42; // rax
  const WCHAR *v43; // rcx
  __int64 v44; // rcx
  __int64 v45; // rax
  __int64 v46; // rax
  __int64 v47; // rax
  const WCHAR *v48; // rdx
  HKEY v49; // rax
  __int64 v50; // rdx
  bool v51; // al
  _QWORD *v52; // [rsp+48h] [rbp-B8h]
  unsigned int v53; // [rsp+50h] [rbp-B0h] BYREF
  char *v54; // [rsp+58h] [rbp-A8h]
  BYTE v55[4]; // [rsp+60h] [rbp-A0h] BYREF
  DWORD v56; // [rsp+64h] [rbp-9Ch] BYREF
  __int64 v57[3]; // [rsp+68h] [rbp-98h] BYREF
  __int16 MultiByteStr[264]; // [rsp+80h] [rbp-80h] BYREF

  v8 = a6;
  v11 = a4;
  v53 = a2;
  PartitionForZone = 0;
  v57[0] = a6;
  v52 = 0i64;
  v54 = 0i64;
  *(_DWORD *)v55 = 0;
  v56 = 4;
  if ( (a5 & 0x10000000) != 0 )
  {
    PartitionForZone = RpcUtil_SwitchSecurityContext(0);
    if ( PartitionForZone )
    {
      a5 &= ~0x10000000u;
      v14 = 0i64;
      v15 = 0i64;
      v16 = 0;
      goto LABEL_51;
    }
  }
  v17 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x10) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    if ( (_DWORD)v11 )
    {
      v18 = v11;
    }
    else if ( a3 )
    {
      v18 = -1i64;
      do
        ++v18;
      while ( a3[v18] );
    }
    else
    {
      v18 = 0i64;
    }
    v19 = FormatLabelA(v18, a3);
    WPP_SF_sds(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x2Fu,
      (__int64)&WPP_e9a0d5dea449334d7c383477da81f939_Traceguids,
      *(const char **)(a1 + 16),
      a2,
      (__int64)v19);
    v17 = WPP_GLOBAL_Control;
  }
  if ( !a2 )
  {
    if ( a3 )
    {
      v26 = Dns_StringCopyAllocate(a3, v11, 2i64, 2);
      v52 = v26;
      v27 = v26;
      if ( !v26 )
      {
        PartitionForZone = 9652;
        v14 = 0i64;
        goto LABEL_49;
      }
      while ( *v26 )
      {
        if ( *v26 == 47 )
          *v26 = 92;
        ++v26;
      }
      v15 = (char *)Dns_StringCopyAllocate(v27, 0, 2i64, 1);
      if ( !v15 )
      {
LABEL_65:
        v14 = v52;
        PartitionForZone = 9652;
        goto LABEL_50;
      }
    }
    else
    {
      if ( (unsigned int)(*(_DWORD *)(a1 + 372) - 2) <= 2 )
      {
        v15 = 0i64;
        goto LABEL_69;
      }
      if ( dword_1401B9708 )
      {
        if ( (int)StringCchCopyW((char *)MultiByteStr, 262i64, *(char **)(a1 + 24)) < 0
          || (int)StringCchCatW((unsigned __int16 *)MultiByteStr, 262i64, (char *)L".dns") < 0 )
        {
          *(_QWORD *)(a1 + 144) = 0i64;
        }
        else
        {
          *(_QWORD *)(a1 + 144) = Dns_StringCopyAllocate((char *)MultiByteStr, 0, 1i64, 1);
        }
        v17 = WPP_GLOBAL_Control;
      }
      if ( !*(_QWORD *)(a1 + 144) )
      {
        if ( v17 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_BYTE *)v17 + 68) & 0x10) != 0
          && *((_BYTE *)v17 + 65) >= 4u )
        {
          WPP_SF_S(
            *((_QWORD *)v17 + 7),
            0x30u,
            (__int64)&WPP_e9a0d5dea449334d7c383477da81f939_Traceguids,
            *(const unsigned __int16 **)(a1 + 24));
        }
        PartitionForZone = 9651;
LABEL_48:
        v14 = 0i64;
LABEL_49:
        v15 = 0i64;
LABEL_50:
        v16 = 0;
        goto LABEL_51;
      }
      v24 = *(_QWORD *)(a1 + 840);
      *(_QWORD *)(a1 + 848) = 0i64;
      Timeout_FreeWithFunctionEx(v24, 0i64, (__int64)"ds\\dns\\server\\server\\zone.c", 2654);
      v25 = *(_QWORD *)(a1 + 952);
      *(_QWORD *)(a1 + 840) = 0i64;
      Timeout_FreeWithFunctionEx(v25, 0i64, (__int64)"ds\\dns\\server\\server\\zone.c", 2656);
      v15 = *(char **)(a1 + 144);
      *(_QWORD *)(a1 + 952) = 0i64;
      *(_QWORD *)(a1 + 144) = 0i64;
      v52 = Dns_StringCopyAllocate(v15, 0, 1i64, 2);
      if ( !v52 )
      {
        PartitionForZone = 9652;
        v14 = 0i64;
        goto LABEL_50;
      }
    }
    if ( (unsigned int)File_CheckDatabaseFilePath(v15) )
      goto LABEL_69;
    goto LABEL_65;
  }
  if ( a3 )
  {
    PartitionForZone = 87;
LABEL_18:
    v14 = 0i64;
    v15 = 0i64;
    v16 = 0;
    goto LABEL_51;
  }
  v20 = *(_DWORD *)(a1 + 372);
  v21 = *(_DWORD *)(a1 + 388) & 1;
  if ( v20 == 2 || v20 >= 5 )
  {
    PartitionForZone = 9611;
    goto LABEL_18;
  }
  if ( a6 || !a7 && !a8 )
    goto LABEL_26;
  PartitionForZone = Dp_FindPartitionForZone(a7, a8, 0, v57);
  if ( PartitionForZone )
    goto LABEL_48;
  v8 = v57[0];
LABEL_26:
  v22 = v53;
  *(_DWORD *)(a1 + 388) &= ~1u;
  *(_DWORD *)(a1 + 388) |= v22 & 1;
  PartitionForZone = Ds_SetZoneDp(a1, v8, 0);
  if ( PartitionForZone )
  {
    *(_DWORD *)(a1 + 388) &= ~1u;
    *(_DWORD *)(a1 + 388) |= v21 & 1;
    goto LABEL_18;
  }
  if ( (unsigned int)dword_1401B9728 <= 1 )
  {
    LODWORD(v57[0]) = 4;
    v57[1] = 3i64;
    Config_ResetProperty(0, "BootMethod", (__int64)v57);
  }
  if ( (*(_BYTE *)(a1 + 388) & 1) != 0 )
    ++dword_1401B972C;
  Xfr_InitializeSecondaryZoneControl();
  v15 = v54;
LABEL_69:
  EnterCriticalSection(&csZoneList);
  v16 = 1;
  Timeout_FreeWithFunctionEx(*(_QWORD *)(a1 + 136), 0i64, (__int64)"ds\\dns\\server\\server\\zone.c", 2734);
  Timeout_FreeWithFunctionEx(*(_QWORD *)(a1 + 144), 0i64, (__int64)"ds\\dns\\server\\server\\zone.c", 2735);
  v14 = 0i64;
  *(_DWORD *)(a1 + 388) &= ~1u;
  v28 = v53;
  *(_QWORD *)(a1 + 136) = v52;
  *(_QWORD *)(a1 + 144) = v15;
  *(_DWORD *)(a1 + 388) |= v28 & 1;
  v15 = 0i64;
  if ( (*(_BYTE *)(a1 + 388) & 1) == 0 )
  {
    Timeout_FreeAndReplaceZoneDataEx(
      v28,
      (__int64 *)(a1 + 840),
      0i64,
      0i64,
      (__int64)"ds\\dns\\server\\server\\zone.c",
      2750);
    Timeout_FreeAndReplaceZoneDataEx(
      v29,
      (__int64 *)(a1 + 952),
      0i64,
      0i64,
      (__int64)"ds\\dns\\server\\server\\zone.c",
      2751);
    Timeout_FreeAndReplaceZoneDataEx(
      v30,
      (__int64 *)(a1 + 856),
      0i64,
      0i64,
      (__int64)"ds\\dns\\server\\server\\zone.c",
      2752);
    *(_DWORD *)(a1 + 368) = 0;
    Timeout_FreeAndReplaceZoneDataEx(
      v31,
      (__int64 *)(a1 + 360),
      0i64,
      0i64,
      (__int64)"ds\\dns\\server\\server\\zone.c",
      2754);
    LODWORD(v28) = v53;
    *(_BYTE *)(a1 + 868) = 0;
    *(_QWORD *)(a1 + 848) = 0i64;
  }
  v32 = *(_DWORD *)(a1 + 372);
  if ( !v32 )
  {
    if ( !g_bRegistryWriteBack )
      goto LABEL_51;
    if ( !(_DWORD)v28 && (unsigned int)wcsicmp_ThatWorks(*(PCNZWCH *)(a1 + 144), (const WCHAR *)L"cache.dns") )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x10) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_S(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x31u,
          (__int64)&WPP_e9a0d5dea449334d7c383477da81f939_Traceguids,
          *(const unsigned __int16 **)(a1 + 144));
      }
      Reg_SetValue(0, 0i64, 0i64, (const CHAR *)L"RootHintsFile", 0xF0000001, *(BYTE **)(a1 + 144), 0);
      goto LABEL_105;
    }
    v33 = "RootHintsFile";
    v34 = 0i64;
    goto LABEL_104;
  }
  if ( g_bRegistryWriteBack && v32 != 5 && (*(_BYTE *)(a1 + 1160) & 0x40) == 0 )
  {
    v35 = *(const WCHAR **)(a1 + 192);
    if ( (_DWORD)v28 )
    {
      if ( v35 )
      {
        v36 = *(_QWORD *)(a1 + 328);
        v37 = a1;
        if ( v36 )
          v37 = *(_QWORD *)(a1 + 328);
        if ( *(_QWORD *)(v37 + 200) )
        {
          v38 = a1;
          if ( v36 )
            v38 = *(_QWORD *)(a1 + 328);
          if ( *(_QWORD *)(v38 + 200) )
          {
            v39 = a1;
            if ( v36 )
              v39 = *(_QWORD *)(a1 + 328);
            v40 = **(const WCHAR ***)(v39 + 200);
          }
          else
          {
            v40 = L".";
          }
        }
        else
        {
          v40 = 0i64;
        }
        Reg_DeleteScope(v36, v40, *(const WCHAR **)(a1 + 24), v35, 0);
        goto LABEL_102;
      }
      v53 = v28;
      Reg_SetValue(0, 0i64, a1, "DsIntegrated", 4u, (BYTE *)&v53, 4u);
      v41 = *(_QWORD *)(a1 + 848);
      if ( !v41 || (*(_BYTE *)(v41 + 100) & 2) != 0 )
        Reg_DeleteValue(0, 0i64, a1, "DirectoryPartition");
      else
        Reg_SetValue(0, 0i64, a1, (const CHAR *)L"DirectoryPartition", 0xFF000001, *(BYTE **)(v41 + 24), 0);
    }
    else
    {
      if ( v35 )
      {
        v44 = *(_QWORD *)(a1 + 328);
        v45 = a1;
        if ( v44 )
          v45 = *(_QWORD *)(a1 + 328);
        if ( *(_QWORD *)(v45 + 200) )
        {
          v46 = a1;
          if ( v44 )
            v46 = *(_QWORD *)(a1 + 328);
          if ( *(_QWORD *)(v46 + 200) )
          {
            v47 = a1;
            if ( v44 )
              v47 = *(_QWORD *)(a1 + 328);
            v48 = **(const WCHAR ***)(v47 + 200);
          }
          else
          {
            v48 = L".";
          }
        }
        else
        {
          v48 = 0i64;
        }
        v49 = Reg_OpenScope(0i64, v48, *(const WCHAR **)(a1 + 24), v35, 0);
        if ( v49 )
          RegCloseKey(v49);
      }
      else
      {
        Reg_DeleteValue(0, 0i64, a1, "DsIntegrated");
        Reg_DeleteValue(0, 0i64, a1, "DirectoryPartition");
      }
      if ( *(_QWORD *)(a1 + 136) )
      {
        Reg_SetValue(0, 0i64, a1, (const CHAR *)L"DatabaseFile", 0xF0000001, *(BYTE **)(a1 + 144), 0);
        goto LABEL_102;
      }
    }
    Reg_DeleteValue(0, 0i64, a1, "DatabaseFile");
LABEL_102:
    if ( *(_QWORD *)(a1 + 192) )
      goto LABEL_51;
    v33 = "UseDatabase";
    v34 = a1;
LABEL_104:
    Reg_DeleteValue(0, 0i64, v34, v33);
  }
LABEL_105:
  if ( !*(_QWORD *)(a1 + 192) )
  {
    v42 = *(const WCHAR ***)(a1 + 200);
    if ( v42 )
      v43 = *v42;
    else
      v43 = 0i64;
    if ( !Reg_ZoneKeyPresent(v43, *(const WCHAR **)(a1 + 24))
      || (PartitionForZone = Reg_GetValue(0i64, a1, (const unsigned __int16 *)"IsKeymaster", 4, v55, &v56)) != 0 )
    {
      if ( (*(_BYTE *)(a1 + 388) & 1) != 0 || (v51 = 1, *(_DWORD *)(a1 + 372) != 1) )
        v51 = 0;
      *(_DWORD *)(a1 + 1040) &= ~2u;
      PartitionForZone = 0;
    }
    else
    {
      *(_DWORD *)(a1 + 1040) &= ~2u;
      v51 = *(_DWORD *)v55 != 0;
    }
    *(_DWORD *)(a1 + 1040) |= 2 * v51;
    if ( (*(_BYTE *)(a1 + 1040) & 2) != 0 )
      DnsOls_DiscoverZoneKeymasterFqdn(a1, v50, 0, 0i64);
  }
LABEL_51:
  if ( (a5 & 0x10000000) != 0 )
    PartitionForZone = RpcUtil_SwitchSecurityContext(1);
  if ( v16 )
    LeaveCriticalSection(&csZoneList);
  Mem_Free(v15, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\zone.c", 2971);
  Mem_Free(v14, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\zone.c", 2972);
  return PartitionForZone;
}
// 1400C19CC: variable 'v29' is possibly undefined
// 1400C19F2: variable 'v30' is possibly undefined
// 1400C1A1F: variable 'v31' is possibly undefined
// 1400C1DD2: variable 'v50' is possibly undefined
// 140188028: using guessed type wchar_t aDirectoryparti_1[19];
// 140188050: using guessed type wchar_t aDatabasefile_0[13];
// 1401920B8: using guessed type wchar_t aRoothintsfile[14];
// 1401B805C: using guessed type int g_bRegistryWriteBack;
// 1401B9708: using guessed type int dword_1401B9708;
// 1401B9728: using guessed type int dword_1401B9728;
// 1401B972C: using guessed type int dword_1401B972C;
// 1400C1488: using guessed type unsigned __int16 MultiByteStr[264];
