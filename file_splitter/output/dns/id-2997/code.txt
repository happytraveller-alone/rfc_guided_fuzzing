Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 2997
// Total lines: 103

//----- (0000000140158DC4) ----------------------------------------------------
__int64 __fastcall Dns_WriteGssTkeyToMessage(__int64 a1, __int64 a2, unsigned __int64 a3, _QWORD *a4)
{
  unsigned int v8; // esi
  char v9; // al
  __int64 v10; // rbx
  __int64 v12; // rax
  __int64 v13; // r8
  __int64 v14; // r8
  __int64 v15; // r10
  const char *v16; // r12
  unsigned __int16 v17; // bx
  unsigned __int16 v18; // r15
  char *v19; // rsi
  unsigned int *v20; // rsi
  unsigned int v21; // eax
  _WORD *v22; // rsi
  _WORD *v23; // rax
  int v24; // [rsp+20h] [rbp-38h]

  v8 = 13;
  v9 = byte_1401BA001;
  if ( (byte_1401BA001 & 0x20) != 0 )
  {
    WPP_SF_q(59i64, (unsigned __int16)&WPP_9b9f12dbc4273be48aea1d81c92c8dd1_Traceguids, a1);
    v9 = byte_1401BA001;
  }
  v10 = *(_QWORD *)a1;
  if ( *(_QWORD *)a1 )
  {
    *(_DWORD *)(a2 + 6) = 0;
    *(_WORD *)(a2 + 10) = 0;
    v12 = Dns_SkipToRecord(a2, a3, 0i64);
    if ( v12 )
    {
      *(_WORD *)(a2 + 6) = 1;
      if ( !*(_DWORD *)(v10 + 128) )
        *(_DWORD *)(v10 + 128) = *(_DWORD *)(a1 + 140);
      v15 = Dns_WriteDottedNameToPacket(v12, a3, *(_QWORD *)(v10 + 88), 0i64, 0, 0);
      if ( v15 )
      {
        if ( *(_DWORD *)(v10 + 128) == 3 )
        {
          v16 = (const char *)&unk_1401955C8;
          v17 = 19;
        }
        else
        {
          v16 = "\bgss-tsig";
          v17 = 10;
        }
        v18 = *(_WORD *)(a1 + 24);
        if ( (unsigned __int64)(unsigned __int16)(v17 + v18 + 16) + v15 + 10 <= a3 )
        {
          LOWORD(v24) = v17 + v18 + 16;
          v19 = (char *)Dns_WriteRecordStructureToPacketEx(v15, 249i64, 255i64, 0i64, v24);
          memcpy_0(v19, v16, v17);
          v20 = (unsigned int *)&v19[v17];
          v21 = time(0i64);
          *v20 = (((v21 << 16) | v21 & 0xFF00) << 8) | ((HIWORD(v21) | v21 & 0xFF0000) >> 8);
          v20[1] = (((v21 + 86400) & 0xFF00 | ((v21 + 86400) << 16)) << 8) | ((((v21 + 86400) >> 16) | (v21 + 86400) & 0xFF0000) >> 8);
          *((_WORD *)v20 + 4) = 768;
          *((_WORD *)v20 + 5) = __ROL2__(*(_WORD *)(a1 + 138), 8);
          *((_WORD *)v20 + 6) = __ROL2__(v18, 8);
          v20 = (unsigned int *)((char *)v20 + 14);
          memcpy_0(v20, *(const void **)(a1 + 32), v18);
          v22 = (_WORD *)((char *)v20 + v18);
          if ( (byte_1401BA001 & 0x20) != 0 )
            WPP_SF_qdq(63i64, (unsigned __int16)&WPP_9b9f12dbc4273be48aea1d81c92c8dd1_Traceguids, a2, v18, v22);
          v23 = v22 + 1;
          *v22 = 0;
          v8 = 0;
          *a4 = v23;
        }
        else
        {
          if ( (byte_1401BA001 & 4) != 0 )
            WPP_SF_(62i64, (unsigned __int16)&WPP_9b9f12dbc4273be48aea1d81c92c8dd1_Traceguids, v14);
          return 87;
        }
      }
    }
    else if ( (byte_1401BA001 & 4) != 0 )
    {
      WPP_SF_(61i64, (unsigned __int16)&WPP_9b9f12dbc4273be48aea1d81c92c8dd1_Traceguids, v13);
    }
    return v8;
  }
  else
  {
    if ( (v9 & 4) != 0 )
      WPP_SF_(60i64, (unsigned __int16)&WPP_9b9f12dbc4273be48aea1d81c92c8dd1_Traceguids, a3);
    return 9017i64;
  }
}
// 140158E2B: variable 'a3' is possibly undefined
// 140158E6D: variable 'v13' is possibly undefined
// 140158F12: variable 'v14' is possibly undefined
// 140158F36: variable 'v24' is possibly undefined
// 140183D80: using guessed type __int64 __fastcall Dns_WriteDottedNameToPacket(_QWORD, _QWORD, _QWORD, _QWORD, _DWORD, _DWORD);
// 140183DA8: using guessed type __int64 __fastcall Dns_SkipToRecord(_QWORD, _QWORD, _QWORD);
// 140183DB0: using guessed type __int64 __fastcall Dns_WriteRecordStructureToPacketEx(_QWORD, _QWORD, _QWORD, _QWORD, _DWORD);
// 1401BA001: using guessed type char byte_1401BA001;
