Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 1085
// Total lines: 173

//----- (000000014008CFBC) ----------------------------------------------------
__int64 __fastcall RR_UpdateDeleteType(__int64 a1, __int64 a2, unsigned __int16 a3, char a4)
{
  __int64 v4; // rbp
  _QWORD *v6; // rsi
  int v10; // r13d
  __int64 v11; // rcx
  _QWORD **v12; // rdi
  _QWORD *v13; // r13
  int v14; // r14d
  _WORD *v15; // rax
  __int64 v16; // rcx
  char v17; // r9
  _QWORD *v18; // rdi
  __int64 *v19; // rcx
  int v21; // [rsp+80h] [rbp+18h] BYREF

  v4 = 0i64;
  v6 = 0i64;
  v21 = -1;
  acquireUpdate(DbaseLock, 0xFFFFFFFF, (unsigned int *)&v21, 1);
  v10 = a2 && *(_QWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 76) = 0;
  v21 = v10;
  if ( *(_DWORD *)(a1 + 372) )
    deleteCachedRecordsForUpdate(a2);
  if ( a3 == 255 )
  {
    if ( (*(_DWORD *)(a2 + 92) & 0x100) != 0 )
    {
      v18 = (_QWORD *)(a2 + 64);
      Dbase_LockEx(a2, 2, (__int64)"ds\\dns\\server\\server\\rrlist.c", 140);
      v19 = *(__int64 **)(a2 + 64);
      if ( v19 )
      {
        do
        {
          if ( ((*((_WORD *)v19 + 6) - 2) & 0xFFFB) != 0 )
          {
            if ( v4 )
              *v6 = v19;
            else
              v4 = (__int64)v19;
            v6 = v19;
          }
          else
          {
            *v18 = v19;
            v18 = v19;
          }
          v19 = (__int64 *)*v19;
        }
        while ( v19 );
        if ( v4 )
        {
          *v6 = 0i64;
          *v18 = 0i64;
          RR_ListResetNodeFlags(a2);
        }
      }
      NTree_ChangeAncestorCounters((volatile signed __int32 **)a2, v10);
      v17 = -79;
    }
    else
    {
      Dbase_LockEx(a2, 2, (__int64)"ds\\dns\\server\\server\\rrlist.c", 111);
      v4 = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a2 + 64) = 0i64;
      *(_DWORD *)(a2 + 92) &= ~0x2000u;
      RR_ListResetNodeFlags(a2);
      NTree_ChangeAncestorCounters((volatile signed __int32 **)a2, v10);
      v17 = 119;
    }
LABEL_58:
    Dbase_UnlockEx(v16, 2, (__int64)"ds\\dns\\server\\server\\rrlist.c", v17);
    goto LABEL_59;
  }
  if ( (*(_DWORD *)(a2 + 92) & 0x100) == 0 || a3 != 6 && (a3 != 2 || (a4 & 1) == 0) )
  {
    v11 = a2 + 64;
    v12 = (_QWORD **)(a2 + 64);
LABEL_13:
    v13 = (_QWORD *)v11;
    while ( 1 )
    {
      v11 = *(_QWORD *)v11;
      if ( !v11 )
        break;
      if ( *(_WORD *)(v11 + 12) < 0x2Eu )
        v12 = (_QWORD **)v11;
      if ( *(_WORD *)(v11 + 12) == a3 )
      {
        v6 = (_QWORD *)v11;
        if ( !v4 )
          v4 = v11;
      }
      else
      {
        if ( *(_WORD *)(v11 + 12) < a3 )
          goto LABEL_13;
        if ( (a4 & 0x80) == 0 || !v12 || !*v12 || *((_WORD *)*v12 + 6) == 46 )
          break;
      }
    }
    if ( v4 )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x80000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_Dq(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x48u,
          (__int64)&WPP_10d39582251c332017bd035d2c946054_Traceguids,
          a3);
      }
      Dbase_LockEx(a2, 2, (__int64)"ds\\dns\\server\\server\\rrlist.c", 13);
      *v13 = *v6;
      v14 = a4 & 0x80;
      if ( !v14 || v6 != v12 )
        *v6 = 0i64;
      RR_ListResetNodeFlags(a2);
      if ( v14 )
      {
        while ( 1 )
        {
          while ( 1 )
          {
            if ( !v12 )
              goto LABEL_44;
            v15 = *v12;
            if ( !*v12 || v15[6] != 46 )
              goto LABEL_44;
            if ( ntohs(v15[28]) == a3 )
              break;
LABEL_43:
            v12 = (_QWORD **)*v12;
          }
          if ( v6 == v12 )
          {
            v6 = (_QWORD *)*v6;
            if ( v6 )
              *v13 = *v6;
            goto LABEL_43;
          }
          *v6 = *v12;
          *v12 = (_QWORD *)**v12;
          v6 = (_QWORD *)*v6;
          *v6 = 0i64;
        }
      }
LABEL_44:
      *v6 = 0i64;
      NTree_ChangeAncestorCounters((volatile signed __int32 **)a2, v21);
      v17 = 90;
      goto LABEL_58;
    }
  }
LABEL_59:
  v21 = -1;
  releaseUpdate(DbaseLock, (unsigned int *)&v21, 1);
  insertNodeIntoTimeoutSystem(a2);
  if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x80000) != 0
    && WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_Dq(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x49u, (__int64)&WPP_10d39582251c332017bd035d2c946054_Traceguids, a3);
  }
  return v4;
}
// 14008D272: variable 'v16' is possibly undefined
// 1401EC5E8: using guessed type __int64 DbaseLock;
