Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 278
// Total lines: 152

//----- (0000000140024F50) ----------------------------------------------------
void Ds_ProcessRemotePollList()
{
  LDAP *v0; // r14
  unsigned int v1; // ebp
  CDnsClientSubnetRecordsTrie *v2; // rcx
  __int64 v3; // rbx
  bool i; // zf
  __int64 *v5; // rdi
  unsigned __int16 *v6; // rdi
  int v7; // esi
  __int64 v8; // rdx
  __int64 v9; // rcx
  __int64 **v10; // rax
  __int64 outvalue; // [rsp+20h] [rbp-78h]
  ULONG v12; // [rsp+28h] [rbp-70h]
  __int128 v13; // [rsp+40h] [rbp-58h] BYREF
  LDAPModW *mods[2]; // [rsp+50h] [rbp-48h] BYREF
  int v15; // [rsp+60h] [rbp-38h] BYREF
  const wchar_t *v16; // [rsp+68h] [rbp-30h]
  __int128 *v17; // [rsp+70h] [rbp-28h]

  v0 = pServerLdap;
  v1 = 0;
  EnterCriticalSection(&g_csRemoteDcPolling);
  dword_1401B9714 = Dns_GetCurrentTimeInSeconds();
  v2 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_D(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x2Cu,
      (__int64)&WPP_b8af702b29a73bf6c1982cc5eed21171_Traceguids,
      g_RemoteDcPollQueueSize);
    v2 = WPP_GLOBAL_Control;
  }
  v3 = g_RemoteDcPollQueueHead;
  for ( i = g_RemoteDcPollQueueHead == (_QWORD)&g_RemoteDcPollQueueHead; ; i = v5 == &g_RemoteDcPollQueueHead )
  {
    if ( i )
      goto LABEL_38;
    if ( g_fDnsServiceExit == 1 )
      break;
    v5 = *(__int64 **)v3;
    if ( *(_DWORD *)(v3 + 16) <= (unsigned int)dword_1401B9714 )
    {
      LeaveCriticalSection(&g_csRemoteDcPolling);
      v15 = 0;
      mods[1] = 0i64;
      ++*(_DWORD *)(v3 + 24);
      v16 = L"replicateSingleObject";
      v17 = &v13;
      mods[0] = (LDAPModW *)&v15;
      v13 = 0i64;
      v6 = (unsigned __int16 *)Mem_Alloc(0x1404u, 0i64, "ds\\dns\\server\\server\\dnsrodc.c", 1280);
      if ( v6 )
      {
        outvalue = *(_QWORD *)(v3 + 32);
        if ( (int)StringCchPrintfW(v6, 2562i64, L"%s:%s", *(_QWORD *)(v3 + 40)) >= 0 )
        {
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            WPP_SF_S(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x2Au,
              (__int64)&WPP_b8af702b29a73bf6c1982cc5eed21171_Traceguids,
              v6);
          }
          *(_QWORD *)&v13 = v6;
          v7 = Dns_LdapModifyExt(v0, 0i64, mods, 0i64, outvalue, v12, 2);
        }
        else
        {
          v7 = 87;
        }
      }
      else
      {
        v7 = 14;
      }
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        LODWORD(outvalue) = v7;
        WPP_SF_qd(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x2Bu,
          (__int64)&WPP_b8af702b29a73bf6c1982cc5eed21171_Traceguids,
          v3,
          outvalue);
      }
      Mem_Free(v6, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\dnsrodc.c", 1323);
      EnterCriticalSection(&g_csRemoteDcPolling);
      v5 = *(__int64 **)v3;
      ++v1;
      if ( !v7 || *(_DWORD *)(v3 + 24) > 3u )
      {
        v10 = *(__int64 ***)(v3 + 8);
        if ( v5[1] != v3 || *v10 != (__int64 *)v3 )
          __fastfail(3u);
        --g_RemoteDcPollQueueSize;
        *v10 = v5;
        v5[1] = (__int64)v10;
        freeRemotePollEntry(v3);
      }
      if ( dword_1401B9878 && v1 >= dword_1401B9878 )
      {
        logExcessRSOMessage(v9, v8);
LABEL_37:
        v2 = WPP_GLOBAL_Control;
        goto LABEL_38;
      }
      v2 = WPP_GLOBAL_Control;
    }
    v3 = (__int64)v5;
  }
  if ( v2 == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
    goto LABEL_42;
  if ( (*((_DWORD *)v2 + 17) & 0x400) != 0 && *((_BYTE *)v2 + 65) >= 4u )
  {
    WPP_SF_(*((_QWORD *)v2 + 7), 0x2Du, (__int64)&WPP_b8af702b29a73bf6c1982cc5eed21171_Traceguids);
    goto LABEL_37;
  }
LABEL_38:
  if ( v2 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)v2 + 17) & 0x400) != 0
    && *((_BYTE *)v2 + 65) >= 4u )
  {
    WPP_SF_D(
      *((_QWORD *)v2 + 7),
      0x2Eu,
      (__int64)&WPP_b8af702b29a73bf6c1982cc5eed21171_Traceguids,
      g_RemoteDcPollQueueSize);
  }
LABEL_42:
  LeaveCriticalSection(&g_csRemoteDcPolling);
}
// 1400250ED: variable 'v12' is possibly undefined
// 140025123: variable 'outvalue' is possibly undefined
// 1400251AB: variable 'v9' is possibly undefined
// 1400251AB: variable 'v8' is possibly undefined
// 140189390: using guessed type wchar_t aReplicatesingl[22];
// 1401B8C8C: using guessed type int g_RemoteDcPollQueueSize;
// 1401B9714: using guessed type int dword_1401B9714;
// 1401B9878: using guessed type int dword_1401B9878;
// 1401B9A40: using guessed type int g_fDnsServiceExit;
// 1401EC490: using guessed type __int64 g_RemoteDcPollQueueHead;
