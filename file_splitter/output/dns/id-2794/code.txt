Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 2794
// Total lines: 167

//----- (000000014014A890) ----------------------------------------------------
__int64 __fastcall Add_PolicyToMap(const void **a1, __int64 a2)
{
  __int64 v2; // r14
  char v4; // si
  unsigned int v6; // r13d
  char *v7; // r14
  __int64 v8; // rax
  const void ****v9; // r12
  __int64 v10; // rax
  const unsigned __int16 *v11; // r9
  void *v12; // rcx
  void **v13; // rax
  const void **v14; // rax
  __int64 v15; // rax
  const void **v16; // rax
  __int64 v17; // rax
  bool v18; // zf
  __int64 PolicyName; // rax
  const unsigned __int16 *v20; // r9
  char v22[16]; // [rsp+38h] [rbp-71h] BYREF
  void *v23[3]; // [rsp+48h] [rbp-61h] BYREF
  unsigned __int64 v24; // [rsp+60h] [rbp-49h]
  void *v25[2]; // [rsp+70h] [rbp-39h] BYREF
  __int64 v26; // [rsp+80h] [rbp-29h]
  unsigned __int64 v27; // [rsp+88h] [rbp-21h]
  const void **v28; // [rsp+98h] [rbp-11h]
  void *v29[3]; // [rsp+A0h] [rbp-9h] BYREF
  unsigned __int64 v30; // [rsp+B8h] [rbp+Fh]

  v2 = *((int *)a1 + 22);
  v4 = 0;
  CDnsPolicy::GetPolicyName(a1, (__int64)v29);
  v6 = 0;
  if ( a2 )
    v7 = *(char **)(a2 + 8 * v2 + 216);
  else
    v7 = (char *)&g_PolicySvr + 32 * v2;
  if ( v30 >= 8 )
    operator delete(v29[0]);
  v30 = 7i64;
  v29[2] = 0i64;
  LOWORD(v29[0]) = 0;
  if ( !v7 )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      v4 = 1;
      PolicyName = CDnsPolicy::GetPolicyName(a1, (__int64)v23);
      v20 = (const unsigned __int16 *)PolicyName;
      if ( *(_QWORD *)(PolicyName + 24) >= 8ui64 )
        v20 = *(const unsigned __int16 **)PolicyName;
      WPP_SF_Sdd(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x88u,
        (__int64)&WPP_42dbba61d26d3062f1ad4e084cdc81fe_Traceguids,
        v20);
    }
    v18 = (v4 & 1) == 0;
LABEL_49:
    if ( v18 )
      return v6;
    goto LABEL_50;
  }
  v8 = *((int *)a1 + 22);
  if ( a2 )
    v9 = *(const void *****)(a2 + 8 * v8 + 256);
  else
    v9 = (const void ****)((char *)&g_PolicyOrder + 72 * v8);
  if ( !v9 )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      v4 = 2;
      v10 = CDnsPolicy::GetPolicyName(a1, (__int64)v29);
      v11 = (const unsigned __int16 *)v10;
      if ( *(_QWORD *)(v10 + 24) >= 8ui64 )
        v11 = *(const unsigned __int16 **)v10;
      WPP_SF_Sdd(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x89u,
        (__int64)&WPP_42dbba61d26d3062f1ad4e084cdc81fe_Traceguids,
        v11);
    }
    if ( (v4 & 2) != 0 && v30 >= 8 )
    {
      v12 = v29[0];
LABEL_52:
      operator delete(v12);
      return v6;
    }
    return v6;
  }
  v13 = (void **)CDnsPolicy::GetPolicyName(a1, (__int64)v23);
  v26 = 0i64;
  v27 = 7i64;
  LOWORD(v25[0]) = 0;
  std::wstring::assign(v25, v13);
  v28 = a1;
  v14 = (const void **)std::_Tree_val<std::_Tmap_traits<std::wstring,CDnsPolicy_CriteriaNode *,bool (*)(std::wstring const &,std::wstring const &),std::allocator<std::pair<std::wstring const,CDnsPolicy_CriteriaNode *>>,0>>::_Buynode<std::pair<std::wstring,CDnsPolicy_CriteriaNode *>>(
                         (__int64)v7,
                         (__int64)v25);
  std::_Tree<std::_Tmap_traits<std::wstring,CDnsPolicy *,CDnsCompareName,std::allocator<std::pair<std::wstring const,CDnsPolicy *>>,0>>::_Linsert(
    (__int64)v7,
    (__int64)v22,
    v14);
  if ( v27 >= 8 )
    operator delete(v25[0]);
  v27 = 7i64;
  v26 = 0i64;
  LOWORD(v25[0]) = 0;
  if ( v24 >= 8 )
    operator delete(v23[0]);
  v6 = CDnsPolicyOrder::AddPolicyProcessingOrder(v9, (struct CDnsPolicy *)a1);
  if ( !v6 )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      v4 = 8;
      v17 = CDnsPolicy::GetPolicyName(a1, (__int64)v23);
      if ( *(_QWORD *)(v17 + 24) >= 8ui64 )
        v17 = *(_QWORD *)v17;
      WPP_SF_SD(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x8Bu,
        (__int64)&WPP_42dbba61d26d3062f1ad4e084cdc81fe_Traceguids,
        (const unsigned __int16 *)v17);
    }
    v18 = (v4 & 8) == 0;
    goto LABEL_49;
  }
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
  {
    v4 = 4;
    v15 = CDnsPolicy::GetPolicyName(a1, (__int64)v23);
    if ( *(_QWORD *)(v15 + 24) >= 8ui64 )
      v15 = *(_QWORD *)v15;
    WPP_SF_Sdd(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x8Au,
      (__int64)&WPP_42dbba61d26d3062f1ad4e084cdc81fe_Traceguids,
      (const unsigned __int16 *)v15);
  }
  if ( (v4 & 4) != 0 && v24 >= 8 )
    operator delete(v23[0]);
  v16 = (const void **)CDnsPolicy::GetPolicyName(a1, (__int64)v23);
  std::_Tree<std::_Tmap_traits<std::wstring,CDnsPolicy *,CDnsCompareName,std::allocator<std::pair<std::wstring const,CDnsPolicy *>>,0>>::erase(
    (__int64)v7,
    v16);
LABEL_50:
  if ( v24 >= 8 )
  {
    v12 = v23[0];
    goto LABEL_52;
  }
  return v6;
}
// 140184CA8: using guessed type void __stdcall operator delete(void *);
// 14014A890: using guessed type char var_C8[16];
