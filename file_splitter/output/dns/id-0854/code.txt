Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 854
// Total lines: 185

//----- (0000000140076298) ----------------------------------------------------
LPBYTE __fastcall Reg_GetValueAllocate(HKEY hKey, __int64 a2, const char *a3, int a4, DWORD *a5)
{
  LPBYTE v10; // rdi
  BYTE *v11; // rsi
  __int64 v12; // rbx
  unsigned int v13; // r9d
  unsigned int v14; // edx
  _WORD *v15; // rcx
  __int64 v16; // rax
  unsigned int v17; // r15d
  unsigned __int64 v18; // rax
  char *v19; // r12
  void *v20; // rax
  unsigned int v21; // r9d
  __int64 v22; // rax
  BYTE *v23; // rbx
  DWORD v24; // [rsp+30h] [rbp-38h] BYREF
  unsigned int v25; // [rsp+34h] [rbp-34h]
  BYTE *i; // [rsp+38h] [rbp-30h]
  LPBYTE v27; // [rsp+40h] [rbp-28h]

  v24 = 0;
  if ( (unsigned int)Reg_GetValue(hKey, a2, (const unsigned __int16 *)a3, a4, 0i64, &v24) )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_s(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x2Cu,
        (__int64)&WPP_6ba06e9d807b3b6640892c588bf1aced_Traceguids,
        a3);
    }
    return 0i64;
  }
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_Ds(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x2Du,
      (__int64)&WPP_6ba06e9d807b3b6640892c588bf1aced_Traceguids,
      v24,
      (__int64)a3);
  }
  v27 = (LPBYTE)Mem_Alloc(v24, 19i64, "ds\\dns\\server\\server\\registry.c", 2107);
  v10 = v27;
  if ( !v27 )
    return 0i64;
  if ( (unsigned int)Reg_GetValue(hKey, a2, (const unsigned __int16 *)a3, a4, v27, &v24) )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_s(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x2Eu,
        (__int64)&WPP_6ba06e9d807b3b6640892c588bf1aced_Traceguids,
        a3);
    }
    Mem_Free(v10, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\registry.c", 2131);
    return 0i64;
  }
  if ( a4 != -16777215 )
  {
    if ( a4 != -16777209 )
    {
      if ( a4 == -268435453 )
      {
        v23 = (BYTE *)Reg_StringToBinaryBlob((CHAR *)v10, &v24);
        Mem_Free(v10, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\registry.c", 2256);
        v10 = v23;
      }
      goto LABEL_55;
    }
    v25 = 0;
    v13 = 0;
    v14 = 0;
    v15 = v10;
    for ( i = 0i64; *v15; v15 += v16 + 1 )
    {
      if ( v15 >= (_WORD *)&v10[v24] )
        break;
      ++v14;
      v16 = -1i64;
      do
        ++v16;
      while ( v15[v16] );
    }
    v17 = v14 + 1;
    if ( v14 + 1 < v14 )
    {
      v17 = -1;
    }
    else
    {
      v18 = 8i64 * v17;
      if ( v18 <= 0xFFFFFFFF )
      {
        v17 = v14;
LABEL_39:
        if ( (_DWORD)v18 )
        {
          i = (BYTE *)Mem_AllocZero((unsigned int)v18, 19i64, "ds\\dns\\server\\server\\registry.c", 2209);
          v13 = 0;
        }
        v19 = (char *)v10;
        if ( *(_WORD *)v10 )
        {
          do
          {
            if ( v13 >= v17 )
              break;
            v20 = Dns_StringCopyAllocate(v19, 0, 1i64, 2);
            v21 = v25;
            *(_QWORD *)&i[8 * v25] = v20;
            if ( !v20 )
              break;
            if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
              && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
            {
              WPP_SF_DSs(
                *((_QWORD *)WPP_GLOBAL_Control + 7),
                0x30u,
                (__int64)&WPP_6ba06e9d807b3b6640892c588bf1aced_Traceguids,
                v21 + 1,
                (__int64)a3,
                (__int64)v20);
              v21 = v25;
            }
            v22 = -1i64;
            do
              ++v22;
            while ( *(_WORD *)&v19[2 * v22] );
            v13 = v21 + 1;
            v19 += 2 * v22 + 2;
            v25 = v13;
          }
          while ( *(_WORD *)v19 );
          v10 = v27;
        }
        Mem_Free(v10, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\registry.c", 2246);
        v10 = i;
        v24 = 0;
        goto LABEL_55;
      }
    }
    LODWORD(v18) = 0;
    goto LABEL_39;
  }
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_S(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x2Fu,
      (__int64)&WPP_6ba06e9d807b3b6640892c588bf1aced_Traceguids,
      (const unsigned __int16 *)v10);
  }
  v11 = (BYTE *)Dns_StringCopyAllocate((char *)v10, 0, 1i64, 2);
  Mem_Free(v10, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\registry.c", 2153);
  v10 = v11;
  if ( !v11 )
    return 0i64;
  if ( a5 )
  {
    v12 = -1i64;
    do
      ++v12;
    while ( v11[v12] );
    v24 = v12 + 1;
LABEL_55:
    if ( a5 )
      *a5 = v24;
  }
  if ( !(unsigned int)Mem_VerifyHeapBlock((__int64)v10, 0, 0) )
    Dbg_HardAssert("ds\\dns\\server\\server\\registry.c", 0x8D9u, "Mem_VerifyHeapBlock( pdata, 0, 0 )");
  return v10;
}
