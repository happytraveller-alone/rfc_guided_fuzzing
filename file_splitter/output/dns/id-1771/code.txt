Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 1771
// Total lines: 120

//----- (00000001400DF4BC) ----------------------------------------------------
char __fastcall TrustAnchor::SetState(TrustAnchor *this, const enum TRUSTANCHOR_STATE *a2, char a3)
{
  bool v3; // cc
  __int64 v7; // rdx
  __int64 v8; // r8
  __int64 v9; // rax
  __int16 v10; // cx
  __int16 v11; // cx
  CDnsClientSubnetRecordsTrie *v12; // rcx
  unsigned __int16 v13; // dx
  struct _FILETIME v14; // r8
  int v15; // edx
  const char *v16; // rax
  __int64 v17; // r10
  __int64 v18; // r8
  int v20; // edx
  const char *v21; // rax
  __int64 v22; // r10
  __int64 v23; // r8
  struct _FILETIME SystemTimeAsFileTime; // [rsp+40h] [rbp-29h] BYREF
  int v25[2]; // [rsp+48h] [rbp-21h]
  int v26[4]; // [rsp+50h] [rbp-19h]
  int v27[7]; // [rsp+60h] [rbp-9h]
  __int64 v28; // [rsp+7Ch] [rbp+13h]
  __int64 v29; // [rsp+84h] [rbp+1Bh]
  __int64 v30; // [rsp+8Ch] [rbp+23h]
  __int64 v31; // [rsp+94h] [rbp+2Bh]
  int v32; // [rsp+9Ch] [rbp+33h]

  v27[0] = 16843008;
  v3 = *(_DWORD *)a2 <= 7u;
  v27[1] = 16843009;
  v27[2] = 65792;
  v27[3] = 0x1000000;
  v27[4] = 0x10000;
  v27[5] = 0x1000000;
  v27[6] = 0x1000000;
  v28 = 16842753i64;
  v29 = 16843009i64;
  v30 = 16843009i64;
  v31 = 16842752i64;
  v32 = 0;
  v26[0] = 65793;
  v26[1] = 0x1000000;
  v25[0] = 16777217;
  v25[1] = 16843009;
  if ( !v3 )
    return 0;
  GetSystemTimeAsFileTime(&SystemTimeAsFileTime);
  v7 = *((int *)this + 4);
  v8 = *(int *)a2;
  if ( !*((_BYTE *)&v27[2 * v7] + v8)
    || ((v9 = *(_QWORD *)this) == 0 ? (v10 = 0) : (v10 = *(_WORD *)(v9 + 12)),
        v10 == 48 && !*((_BYTE *)v25 + v8)
     || (!v9 ? (v11 = 0) : (v11 = *(_WORD *)(v9 + 12)), v11 == 43 && !*((_BYTE *)v26 + v8))) )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x100000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 3u )
    {
      DNSSEC_TrustAnchorStateToString(*(_DWORD *)a2);
      v21 = DNSSEC_TrustAnchorStateToString(v20);
      WPP_SF_Dqss(*(_QWORD *)(v22 + 56), 0x11u, v23, *((unsigned __int16 *)this + 10), (char)this, (__int64)v21, v23);
    }
    return 0;
  }
  if ( *(_DWORD *)a2 == 4 && (_DWORD)v7 == 5 && !*((_BYTE *)this + 22) )
  {
    v12 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x100000) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 5u )
    {
      return 0;
    }
    v13 = 18;
LABEL_20:
    WPP_SF_Dq(
      *((_QWORD *)v12 + 7),
      v13,
      (__int64)&WPP_4831604f5a2431d08120905ab66c1365_Traceguids,
      *((unsigned __int16 *)this + 10));
    return 0;
  }
  v14 = SystemTimeAsFileTime;
  if ( !a3 && *(_DWORD *)a2 == 4 && (_DWORD)v7 == 3 && *(__int64 *)&SystemTimeAsFileTime < *((_QWORD *)this + 3) )
  {
    v12 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x100000) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 5u )
    {
      return 0;
    }
    v13 = 19;
    goto LABEL_20;
  }
  if ( (_DWORD)v7 != *(_DWORD *)a2 )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x100000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
    {
      DNSSEC_TrustAnchorStateToString(*(_DWORD *)a2);
      v16 = DNSSEC_TrustAnchorStateToString(v15);
      WPP_SF_Dqss(*(_QWORD *)(v17 + 56), 0x14u, v18, *((unsigned __int16 *)this + 10), (char)this, (__int64)v16, v18);
      v14 = SystemTimeAsFileTime;
    }
    *((_DWORD *)this + 4) = *(_DWORD *)a2;
    *((struct _FILETIME *)this + 4) = v14;
  }
  return 1;
}
// 1400DF6AE: variable 'v15' is possibly undefined
// 1400DF6B3: variable 'v17' is possibly undefined
// 1400DF6D0: variable 'v18' is possibly undefined
// 1400DF716: variable 'v20' is possibly undefined
// 1400DF71B: variable 'v22' is possibly undefined
// 1400DF738: variable 'v23' is possibly undefined
