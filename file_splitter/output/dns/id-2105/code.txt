Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 2105
// Total lines: 186

//----- (00000001401097A0) ----------------------------------------------------
char __fastcall ____Sort_PEAPEAV__vector_EV__allocator_E_std___std___JVCCompareCanonicalizedData__1__DnsOls_GetSortedCanonicalizedRdata__YAJPEAU_Dbase_Record___KAEAV__vector_PEAV__vector_EV__allocator_E_std___std__V__allocator_PEAV__vector_EV__allocator_E_std___std___2__2__Z__std__YAXPEAPEAV__vector_EV__allocator_E_std___0_0_JVCCompareCanonicalizedData__1__DnsOls_GetSortedCanonicalizedRdata__YAJPEAU_Dbase_Record___KAEAV__vector_PEAV__vector_EV__allocator_E_std___std__V__allocator_PEAV__vector_EV__allocator_E_std___std___2__0__Z__Z(
        const void **a1,
        const void ***a2,
        __int64 a3,
        char a4)
{
  const void ***v5; // rsi
  __int64 v6; // rax
  const void **v7; // rbx
  __int64 v8; // rdi
  __int64 v9; // rsi
  const void ***v10; // rsi
  const void ***v11; // rdi
  const void **v12; // rax
  size_t v13; // r8
  int v14; // eax
  bool v15; // al
  const void ***j; // rbx
  const void ***v17; // rcx
  size_t v18; // r8
  __int64 i; // [rsp+30h] [rbp-40h]
  const void **v21; // [rsp+38h] [rbp-38h]
  const void ***v22; // [rsp+40h] [rbp-30h]
  size_t v23; // [rsp+48h] [rbp-28h]
  const void **v24; // [rsp+48h] [rbp-28h]
  size_t v25; // [rsp+50h] [rbp-20h]
  unsigned __int64 v26; // [rsp+50h] [rbp-20h]
  const void ***v27; // [rsp+58h] [rbp-18h] BYREF
  const void **v28; // [rsp+60h] [rbp-10h]
  const void **v29; // [rsp+90h] [rbp+20h] BYREF
  const void ***v30; // [rsp+98h] [rbp+28h] BYREF
  char v31; // [rsp+A8h] [rbp+38h]

  v31 = a4;
  v30 = a2;
  v29 = a1;
  v5 = a2;
  v6 = ((char *)a2 - (char *)a1) >> 3;
  v7 = a1;
  if ( v6 <= 32 )
    goto LABEL_42;
  do
  {
    if ( a3 <= 0 )
      break;
    ____Unguarded_partition_PEAPEAV__vector_EV__allocator_E_std___std__VCCompareCanonicalizedData__1__DnsOls_GetSortedCanonicalizedRdata__YAJPEAU_Dbase_Record___KAEAV__vector_PEAV__vector_EV__allocator_E_std___std__V__allocator_PEAV__vector_EV__allocator_E_std___std___2__2__Z__std__YA_AU__pair_PEAPEAV__vector_EV__allocator_E_std___std__PEAPEAV12__0_PEAPEAV__vector_EV__allocator_E_std___0_0VCCompareCanonicalizedData__1__DnsOls_GetSortedCanonicalizedRdata__YAJPEAU_Dbase_Record___KAEAV__vector_PEAV__vector_EV__allocator_E_std___std__V__allocator_PEAV__vector_EV__allocator_E_std___std___2__0__Z__Z(
      &v27,
      (const void ***)v7,
      v5);
    a3 = a3 / 2 / 2 + a3 / 2;
    if ( (__int64)(((char *)v27 - (char *)v7) & 0xFFFFFFFFFFFFFFF8ui64) >= (__int64)(((char *)v5 - (char *)v28) & 0xFFFFFFFFFFFFFFF8ui64) )
    {
      ____Sort_PEAPEAV__vector_EV__allocator_E_std___std___JVCCompareCanonicalizedData__1__DnsOls_GetSortedCanonicalizedRdata__YAJPEAU_Dbase_Record___KAEAV__vector_PEAV__vector_EV__allocator_E_std___std__V__allocator_PEAV__vector_EV__allocator_E_std___std___2__2__Z__std__YAXPEAPEAV__vector_EV__allocator_E_std___0_0_JVCCompareCanonicalizedData__1__DnsOls_GetSortedCanonicalizedRdata__YAJPEAU_Dbase_Record___KAEAV__vector_PEAV__vector_EV__allocator_E_std___std__V__allocator_PEAV__vector_EV__allocator_E_std___std___2__0__Z__Z(
        v28,
        (const void **)v5,
        a3,
        v31);
      v5 = v27;
    }
    else
    {
      ____Sort_PEAPEAV__vector_EV__allocator_E_std___std___JVCCompareCanonicalizedData__1__DnsOls_GetSortedCanonicalizedRdata__YAJPEAU_Dbase_Record___KAEAV__vector_PEAV__vector_EV__allocator_E_std___std__V__allocator_PEAV__vector_EV__allocator_E_std___std___2__2__Z__std__YAXPEAPEAV__vector_EV__allocator_E_std___0_0_JVCCompareCanonicalizedData__1__DnsOls_GetSortedCanonicalizedRdata__YAJPEAU_Dbase_Record___KAEAV__vector_PEAV__vector_EV__allocator_E_std___std__V__allocator_PEAV__vector_EV__allocator_E_std___std___2__0__Z__Z(
        v7,
        (const void **)v27,
        a3,
        v31);
      v7 = v28;
    }
    v6 = ((char *)v5 - (char *)v7) >> 3;
  }
  while ( v6 > 32 );
  v30 = v5;
  v29 = v7;
  if ( v6 <= 32 )
  {
LABEL_42:
    if ( v6 <= 1 )
      return v6;
    if ( v7 == (const void **)v5 )
      return v6;
    v11 = (const void ***)(v7 + 1);
    v22 = (const void ***)(v7 + 1);
    if ( v7 + 1 == (const void **)v5 )
      return v6;
    for ( i = 8i64; ; i += 8i64 )
    {
      v12 = (const void **)*v7;
      v21 = *v11;
      v23 = (_BYTE *)v21[1] - (_BYTE *)*v21;
      v13 = (_BYTE *)v12[1] - (_BYTE *)*v12;
      v25 = v13;
      if ( v23 < v13 )
        v13 = (_BYTE *)v21[1] - (_BYTE *)*v21;
      v14 = memcmp_0(**v11, *v12, v13);
      if ( v14 )
      {
        v15 = v14 < 0;
      }
      else
      {
        if ( v23 < v25 )
          goto LABEL_37;
        v15 = 0;
      }
      if ( !v15 )
      {
        for ( j = v11; ; j = v11 )
        {
          --v11;
          v17 = (const void ***)((_BYTE *)v21[1] - (_BYTE *)*v21);
          v27 = v17;
          v24 = *v11;
          v18 = (_BYTE *)v24[1] - (_BYTE *)*v24;
          v26 = v18;
          if ( (unsigned __int64)v17 < v18 )
            v18 = (size_t)v17;
          LODWORD(v6) = memcmp_0(*v21, **v11, v18);
          if ( (_DWORD)v6 )
          {
            LOBYTE(v6) = (int)v6 < 0;
          }
          else
          {
            if ( (unsigned __int64)v27 < v26 )
              goto LABEL_35;
            LOBYTE(v6) = 0;
          }
          if ( !(_BYTE)v6 )
          {
            v11 = v22;
            *j = v21;
            v7 = v29;
            v5 = v30;
            goto LABEL_38;
          }
LABEL_35:
          *j = v24;
        }
      }
LABEL_37:
      memmove((char *)v11 - (i & 0xFFFFFFFFFFFFFFF8ui64) + 8, v7, i & 0xFFFFFFFFFFFFFFF8ui64);
      LOBYTE(v6) = (_BYTE)v21;
      *v7 = v21;
LABEL_38:
      v22 = ++v11;
      if ( v11 == v5 )
        return v6;
    }
  }
  v8 = ((char *)v5 - (char *)v7) >> 3;
  if ( v8 > 1 )
  {
    if ( v8 / 2 > 0 )
    {
      v9 = v8 / 2;
      do
      {
        v29 = (const void **)v7[--v9];
        ____Adjust_heap_PEAPEAV__vector_EV__allocator_E_std___std___JPEAV12_VCCompareCanonicalizedData__1__DnsOls_GetSortedCanonicalizedRdata__YAJPEAU_Dbase_Record___KAEAV__vector_PEAV__vector_EV__allocator_E_std___std__V__allocator_PEAV__vector_EV__allocator_E_std___std___2__2__Z__std__YAXPEAPEAV__vector_EV__allocator_E_std___0__J1__QEAPEAV10_VCCompareCanonicalizedData__1__DnsOls_GetSortedCanonicalizedRdata__YAJPEAU_Dbase_Record___KAEAV__vector_PEAV__vector_EV__allocator_E_std___std__V__allocator_PEAV__vector_EV__allocator_E_std___std___2__0__Z__Z(
          (__int64)v7,
          v9,
          v8,
          &v29);
      }
      while ( v9 > 0 );
      v5 = v30;
    }
    v10 = v5 - 1;
    v29 = (const void **)(8i64 - (_QWORD)v7);
    do
    {
      v30 = (const void ***)*v10;
      *v10 = (const void **)*v7;
      ____Adjust_heap_PEAPEAV__vector_EV__allocator_E_std___std___JPEAV12_VCCompareCanonicalizedData__1__DnsOls_GetSortedCanonicalizedRdata__YAJPEAU_Dbase_Record___KAEAV__vector_PEAV__vector_EV__allocator_E_std___std__V__allocator_PEAV__vector_EV__allocator_E_std___std___2__2__Z__std__YAXPEAPEAV__vector_EV__allocator_E_std___0__J1__QEAPEAV10_VCCompareCanonicalizedData__1__DnsOls_GetSortedCanonicalizedRdata__YAJPEAU_Dbase_Record___KAEAV__vector_PEAV__vector_EV__allocator_E_std___std__V__allocator_PEAV__vector_EV__allocator_E_std___std___2__0__Z__Z(
        (__int64)v7,
        0i64,
        ((char *)v10-- - (char *)v7) >> 3,
        (const void ***)&v30);
      v6 = ((unsigned __int64)v29 + (_QWORD)v10) & 0xFFFFFFFFFFFFFFF8ui64;
    }
    while ( v6 > 8 );
  }
  return v6;
}
// 1401098D1: conditional instruction was optimized away because rdi.8>=2
