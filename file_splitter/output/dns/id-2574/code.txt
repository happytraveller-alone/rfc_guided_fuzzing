Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 2574
// Total lines: 232

//----- (00000001401303C0) ----------------------------------------------------
__int64 __fastcall CDnsPolicy_CriteriaNode::FindMatchingPolicyForQuery(
        __int64 ***a1,
        __int64 a2,
        __int64 a3,
        const void ***a4,
        __int64 a5,
        int a6)
{
  __int64 v7; // r15
  __int64 v8; // r14
  int v10; // esi
  __int64 *v11; // rdi
  __int64 *v12; // rbx
  CDnsClientSubnetRecordsTrie *v13; // rdx
  const char *CriteriaTypeString; // rax
  int v15; // r10d
  __int64 v16; // r8
  __int64 v17; // rdx
  _DWORD *v18; // r8
  __int64 v19; // rcx
  __int64 v20; // r8
  const void **v21; // rcx
  _QWORD *v22; // rax
  __int64 v23; // rcx
  __int64 v24; // r8
  int v25; // r15d
  __int64 v26; // rcx
  int v27; // r14d
  __int64 v28; // rax
  const wchar_t *v29; // rbx
  int v30; // eax
  const char *v31; // rax
  __int64 v32; // r8
  int v33; // eax
  const char *v34; // rax
  __int64 v36; // [rsp+28h] [rbp-A1h]
  __int64 v37; // [rsp+30h] [rbp-99h]
  __int64 v38; // [rsp+40h] [rbp-89h]
  unsigned int v39; // [rsp+54h] [rbp-75h]
  void *v42[3]; // [rsp+78h] [rbp-51h] BYREF
  unsigned __int64 v43; // [rsp+90h] [rbp-39h]
  void *v44[3]; // [rsp+A0h] [rbp-29h] BYREF
  unsigned __int64 v45; // [rsp+B8h] [rbp-11h]

  v7 = a3;
  v8 = a2;
  v10 = 0;
  v11 = *a1[3];
  v12 = **a1;
  v39 = 0;
  v13 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    CriteriaTypeString = GetCriteriaTypeString(*((unsigned __int16 *)a1 + 24));
    LODWORD(v37) = v15;
    v36 = v16;
    WPP_SF_sqqd(*(_QWORD *)(v17 + 56), v17, v16, CriteriaTypeString);
    v13 = WPP_GLOBAL_Control;
  }
  if ( v12 == (__int64 *)*a1 )
  {
LABEL_37:
    if ( v11 == (__int64 *)a1[3] )
      return v39;
    while ( 1 )
    {
      v23 = v11[2];
      if ( v23 && !(*(unsigned int (__fastcall **)(__int64))(*(_QWORD *)v23 + 16i64))(v23) )
      {
        LODWORD(v36) = a6;
        v25 = (*(__int64 (__fastcall **)(__int64, __int64, __int64, const void ***, __int64, __int64))(*(_QWORD *)v11[2] + 120i64))(
                v11[2],
                v8,
                v7,
                a4,
                a5,
                v36);
        v39 = v25;
        if ( v25 )
        {
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
          {
            v33 = (**(__int64 (__fastcall ***)(__int64, CDnsClientSubnetRecordsTrie **, __int64, _QWORD))v11[2])(
                    v11[2],
                    &WPP_GLOBAL_Control,
                    v24,
                    0i64);
            v34 = GetCriteriaTypeString(v33);
            WPP_SF_dqsq(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0xEu,
              (__int64)&WPP_bbbcc621566c3408fe84d6a85874d543_Traceguids,
              v25,
              v11[2],
              (__int64)v34);
          }
          return v39;
        }
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          v26 = (__int64)*a4;
          if ( *a4 )
            v27 = *(_DWORD *)(v26 + 104);
          else
            v27 = -1;
          if ( v26 )
          {
            v28 = CDnsPolicy::Name((const void **)v26, (__int64)v42);
            v29 = (const wchar_t *)v28;
            v10 |= 8u;
            if ( *(_QWORD *)(v28 + 24) >= 8ui64 )
              v29 = *(const wchar_t **)v28;
          }
          else
          {
            v29 = L"NULL";
          }
          v30 = (**(__int64 (__fastcall ***)(__int64))v11[2])(v11[2]);
          v31 = GetCriteriaTypeString(v30);
          LODWORD(v38) = v27;
          v8 = a2;
          WPP_SF_qsqqSd(*((_QWORD *)WPP_GLOBAL_Control + 7), 0xFu, v32, v11[2], v31, a2, *a4, v29, v38);
        }
        if ( (v10 & 8) != 0 )
        {
          v10 &= ~8u;
          if ( v43 >= 8 )
            operator delete(v42[0]);
        }
      }
      v11 = (__int64 *)*v11;
      if ( v11 == (__int64 *)a1[3] )
        return v39;
      v7 = a3;
    }
  }
  while ( 1 )
  {
    v18 = (_DWORD *)v12[2];
    if ( !v18[24] )
      goto LABEL_25;
    if ( v18[25] )
      goto LABEL_25;
    v19 = (__int64)*a4;
    if ( *a4 )
    {
      if ( *(_DWORD *)(v19 + 104) <= v18[26] )
        goto LABEL_25;
    }
    if ( v13 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)v13 + 17) & 0x400000) != 0
      && *((_BYTE *)v13 + 65) >= 4u )
    {
      if ( v19 )
      {
        v10 |= 1u;
        CDnsPolicy::Name((const void **)v19, (__int64)v42);
      }
      CDnsPolicy::Name((const void **)v12[2], (__int64)v44);
      v10 |= 2u;
      v37 = (__int64)*a4;
      LODWORD(v36) = *(_DWORD *)(v12[2] + 104);
      WPP_SF_qSdqSd(*((_QWORD *)WPP_GLOBAL_Control + 7), (unsigned int)v36, v20);
    }
    if ( (v10 & 2) != 0 )
    {
      v10 &= ~2u;
      if ( v45 >= 8 )
        operator delete(v44[0]);
      v45 = 7i64;
      v44[2] = 0i64;
      LOWORD(v44[0]) = 0;
    }
    if ( (v10 & 1) != 0 )
    {
      v10 &= ~1u;
      if ( v43 >= 8 )
        operator delete(v42[0]);
    }
    v21 = (const void **)v12[2];
    *a4 = v21;
    if ( a6 == 4 )
      break;
    v13 = WPP_GLOBAL_Control;
LABEL_25:
    v12 = (__int64 *)*v12;
    if ( v12 == (__int64 *)*a1 )
    {
      v8 = a2;
      v7 = a3;
      goto LABEL_37;
    }
  }
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    v22 = (_QWORD *)CDnsPolicy::Name(v21, (__int64)v42);
    LOBYTE(v10) = v10 | 4;
    if ( v22[3] >= 8ui64 )
      v22 = (_QWORD *)*v22;
    WPP_SF_qS(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0xDu,
      (__int64)&WPP_bbbcc621566c3408fe84d6a85874d543_Traceguids,
      *a4,
      v22,
      v36,
      v37);
  }
  if ( (v10 & 4) != 0 && v43 >= 8 )
    operator delete(v42[0]);
  return v39;
}
// 140130467: variable 'v15' is possibly undefined
// 14013046C: variable 'v16' is possibly undefined
// 140130476: variable 'v17' is possibly undefined
// 140130570: variable 'v20' is possibly undefined
// 140130653: variable 'v36' is possibly undefined
// 140130653: variable 'v37' is possibly undefined
// 1401307A6: variable 'v32' is possibly undefined
// 1401307A6: variable 'v38' is possibly undefined
// 14013080C: variable 'v24' is possibly undefined
// 140184CA8: using guessed type void __stdcall operator delete(void *);
// 140185140: using guessed type __int64 (__fastcall *_guard_dispatch_icall_fptr)(_QWORD, _QWORD);
