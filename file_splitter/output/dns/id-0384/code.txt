Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 384
// Total lines: 212

//----- (000000014003427C) ----------------------------------------------------
__int64 __fastcall Dp_TestReplicationStatus(__int64 a1, unsigned int a2, int *a3)
{
  int v3; // r12d
  __int64 v4; // r15
  __int64 v6; // rbx
  DWORD v7; // edi
  CDnsClientSubnetRecordsTrie *v8; // rcx
  __int64 v9; // rax
  _QWORD *v10; // rax
  bool v11; // zf
  const WCHAR *v12; // rsi
  unsigned __int16 v13; // dx
  int InfoW; // eax
  __int64 v15; // rsi
  CDnsClientSubnetRecordsTrie *v16; // rcx
  void *pInfo; // [rsp+70h] [rbp+40h] BYREF
  HANDLE phDS; // [rsp+80h] [rbp+50h] BYREF
  struct _FILETIME SystemTimeAsFileTime; // [rsp+88h] [rbp+58h] BYREF

  v3 = 0;
  v4 = a2;
  phDS = 0i64;
  pInfo = 0i64;
  v6 = a1;
  v7 = 87;
  if ( !a1 )
  {
    v6 = g_pLegacyDp;
    if ( !g_pLegacyDp )
    {
LABEL_6:
      v8 = WPP_GLOBAL_Control;
      goto LABEL_7;
    }
  }
  if ( !a2 && *(_DWORD *)(v6 + 112) )
  {
    v7 = 0;
    v3 = 1;
    goto LABEL_6;
  }
  if ( !v6 || (*(_BYTE *)(v6 + 100) & 2) != 0 )
  {
    v11 = g_ulDCsInDomain == 1;
LABEL_18:
    if ( v11 )
    {
      v7 = 0;
      v3 = 1;
      goto LABEL_6;
    }
    goto LABEL_20;
  }
  v10 = *(_QWORD **)(v6 + 80);
  if ( v10 && *v10 )
  {
    v11 = v10[1] == 0i64;
    goto LABEL_18;
  }
LABEL_20:
  if ( a2 )
  {
    GetSystemTimeAsFileTime(&SystemTimeAsFileTime);
    *(_QWORD *)&SystemTimeAsFileTime += -10000000 * v4;
  }
  if ( !v6 || (*(_BYTE *)(v6 + 100) & 2) != 0 )
    v12 = DistinguishedName;
  else
    v12 = *(const WCHAR **)(v6 + 40);
  v7 = DsBindA("localhost.", 0i64, &phDS);
  if ( v7 )
  {
    v8 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
    {
      if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0 && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_D(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x96u,
          (__int64)&WPP_0f7f6e0c97433b7ed77e9ce4b2e20f93_Traceguids,
          v7);
        goto LABEL_6;
      }
      goto LABEL_7;
    }
    goto LABEL_71;
  }
  if ( !phDS )
  {
    v7 = 87;
    v8 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
      goto LABEL_71;
    if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) == 0 || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
      goto LABEL_7;
    v13 = 151;
    goto LABEL_36;
  }
  InfoW = DsReplicaGetInfoW(phDS, DS_REPL_INFO_NEIGHBORS, v12, 0i64, &pInfo);
  v7 = InfoW;
  if ( InfoW )
  {
    v8 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
    {
      if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0 && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_D(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x98u,
          (__int64)&WPP_0f7f6e0c97433b7ed77e9ce4b2e20f93_Traceguids,
          InfoW);
        goto LABEL_6;
      }
      goto LABEL_7;
    }
    goto LABEL_71;
  }
  if ( !pInfo )
  {
    v7 = 87;
    v8 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
      goto LABEL_71;
    if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) == 0 || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
      goto LABEL_7;
    v13 = 153;
LABEL_36:
    WPP_SF_(*((_QWORD *)v8 + 7), v13, (__int64)&WPP_0f7f6e0c97433b7ed77e9ce4b2e20f93_Traceguids);
    goto LABEL_6;
  }
  v15 = 0i64;
  if ( !*(_DWORD *)pInfo )
    goto LABEL_6;
  while ( 1 )
  {
    v16 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_DDS(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x9Au,
        (__int64)&WPP_0f7f6e0c97433b7ed77e9ce4b2e20f93_Traceguids,
        v15,
        *((_DWORD *)pInfo + 36 * v15 + 10),
        *((_QWORD *)pInfo + 18 * v15 + 2));
      v16 = WPP_GLOBAL_Control;
    }
    if ( *(_DWORD *)(v6 + 112) )
      break;
    if ( CompareFileTime((const FILETIME *)pInfo + 18 * v15 + 16, &g_ftimeSystemBoot) > 0 )
    {
      v16 = WPP_GLOBAL_Control;
      break;
    }
LABEL_62:
    v15 = (unsigned int)(v15 + 1);
    if ( (unsigned int)v15 >= *(_DWORD *)pInfo )
      goto LABEL_6;
  }
  if ( v16 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)v16 + 17) & 0x400) != 0
    && *((_BYTE *)v16 + 65) >= 4u )
  {
    WPP_SF_Dd(*((_QWORD *)v16 + 7), 0x9Bu, (__int64)&WPP_0f7f6e0c97433b7ed77e9ce4b2e20f93_Traceguids, v15);
  }
  *(_DWORD *)(v6 + 112) = 1;
  v3 = 1;
  if ( !(_DWORD)v4 || CompareFileTime((const FILETIME *)pInfo + 18 * v15 + 16, &SystemTimeAsFileTime) <= 0 )
  {
    v3 = 0;
    goto LABEL_62;
  }
  v8 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
  {
    if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0 && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_Dd(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x9Cu,
        (__int64)&WPP_0f7f6e0c97433b7ed77e9ce4b2e20f93_Traceguids,
        v15);
      goto LABEL_6;
    }
LABEL_7:
    if ( v8 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)v8 + 17) & 0x400) != 0
      && *((_BYTE *)v8 + 65) >= 4u )
    {
      if ( v6 )
        v9 = *(_QWORD *)(v6 + 24);
      else
        v9 = 0i64;
      WPP_SF_Dds(*((_QWORD *)v8 + 7), 0x9Du, (__int64)&WPP_0f7f6e0c97433b7ed77e9ce4b2e20f93_Traceguids, v3, v7, v9);
    }
  }
LABEL_71:
  if ( a3 )
    *a3 = v3;
  if ( pInfo )
    DsReplicaFreeInfo(DS_REPL_INFO_NEIGHBORS, pInfo);
  if ( phDS )
    DsUnBindW(&phDS);
  return v7;
}
// 1401B7F00: using guessed type int g_ulDCsInDomain;
// 1401B8D10: using guessed type __int64 g_pLegacyDp;
