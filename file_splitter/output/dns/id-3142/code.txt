Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 3142
// Total lines: 276

//----- (0000000140166A0C) ----------------------------------------------------
__int64 __fastcall Dns_MaintainNtdsDependency(int a1, _DWORD *a2, int *a3)
{
  int v3; // ebx
  struct _QUERY_SERVICE_CONFIGA *v4; // r13
  struct _QUERY_SERVICE_CONFIGA *v5; // rsi
  char *lpDependencies; // r14
  size_t v7; // r12
  SC_HANDLE v8; // rax
  SC_HANDLE v9; // rdi
  unsigned int LastError; // r15d
  unsigned int ServiceConfig; // eax
  int v12; // edi
  LPSTR v13; // rbx
  LPSTR v14; // r14
  bool v15; // zf
  __int64 v16; // rax
  __int64 v17; // rax
  size_t v18; // rbx
  int v19; // edi
  char *v20; // rax
  char *v22; // rax
  LPSTR v23; // rdi
  char *v24; // rbx
  size_t v25; // r8
  __int64 v26; // rax
  char *v27; // rbx
  __int64 v28; // rax
  unsigned int v29; // ebx
  DWORD v30; // [rsp+68h] [rbp-29h] BYREF
  enum _NT_PRODUCT_TYPE ProductType; // [rsp+6Ch] [rbp-25h] BYREF
  SC_HANDLE v32; // [rsp+70h] [rbp-21h]
  int v33; // [rsp+78h] [rbp-19h]
  struct _QUERY_SERVICE_CONFIGA *v34; // [rsp+80h] [rbp-11h] BYREF
  struct _QUERY_SERVICE_CONFIGA *v35; // [rsp+88h] [rbp-9h] BYREF
  SC_HANDLE hSCObject; // [rsp+90h] [rbp-1h] BYREF
  int v40; // [rsp+110h] [rbp+7Fh]

  v3 = 0;
  v40 = 0;
  hSCObject = 0i64;
  v4 = 0i64;
  v35 = 0i64;
  v5 = 0i64;
  v34 = 0i64;
  v30 = 0;
  lpDependencies = 0i64;
  v33 = 0;
  v7 = 0i64;
  v8 = OpenSCManagerA(0i64, 0i64, 0xC0000000);
  v32 = v8;
  v9 = v8;
  if ( !v8 )
  {
    LastError = GetLastError();
    goto LABEL_41;
  }
  LastError = getServiceConfig(v8, "DNS", &hSCObject, &v35, 0i64);
  if ( LastError )
  {
    v4 = v35;
    goto LABEL_41;
  }
  ServiceConfig = getServiceConfig(v9, "NTDS", 0i64, &v34, &v30);
  LastError = ServiceConfig;
  if ( ServiceConfig == 1060 )
  {
    v12 = 0;
  }
  else
  {
    if ( ServiceConfig )
    {
      v4 = v35;
      v3 = 0;
      v5 = v34;
      goto LABEL_41;
    }
    v12 = 1;
  }
  v4 = v35;
  if ( !v35 )
    goto LABEL_25;
  v13 = v35->lpDependencies;
  if ( !v13 || !*v13 )
    goto LABEL_25;
  v14 = 0i64;
  do
  {
    v15 = _stricmp(v13, "NTDS") == 0;
    v16 = -1i64;
    if ( v15 )
      v14 = v13;
    do
      ++v16;
    while ( v13[v16] );
    v7 += v16 + 1;
    v17 = -1i64;
    do
      ++v17;
    while ( v13[v17] );
    v13 += v17 + 1;
  }
  while ( *v13 );
  v15 = v14 == 0i64;
  lpDependencies = 0i64;
  if ( !v15 )
  {
    v5 = v34;
    if ( a1 || !v12 || v34 && v34->dwStartType == 4 )
    {
      v33 = 1;
      v18 = v7;
      goto LABEL_31;
    }
  }
  else
  {
LABEL_25:
    if ( a1 || !v12 )
    {
      v5 = v34;
    }
    else
    {
      v5 = v34;
      if ( v34 && v34->dwStartType != 4 )
      {
        v18 = v7 + 9;
        v19 = 1;
        if ( v30 == 4 )
        {
LABEL_33:
          if ( v18 )
          {
            v20 = pDnsAllocFunction
                ? (char *)pDnsAllocFunction((unsigned int)v18)
                : (char *)LocalAlloc(0x40u, (unsigned int)v18);
            lpDependencies = v20;
            if ( !v20 )
            {
              LastError = 14;
              goto LABEL_39;
            }
          }
          if ( v19 && lpDependencies )
          {
            if ( v7 )
            {
              memcpy_0(lpDependencies, v4->lpDependencies, v7);
              v22 = &lpDependencies[v7];
            }
            else
            {
              v22 = lpDependencies;
            }
            *(_DWORD *)v22 = 1396986958;
            *((_WORD *)v22 + 2) = 0;
          }
          else if ( v33 )
          {
            if ( !lpDependencies )
              goto LABEL_72;
            v23 = v4->lpDependencies;
            v24 = lpDependencies;
            if ( !*v23 )
              goto LABEL_67;
            do
            {
              if ( _stricmp(v23, "NTDS") )
              {
                v25 = -1i64;
                do
                  ++v25;
                while ( v23[v25] );
                memcpy_0(v24, v23, v25);
                v26 = -1i64;
                do
                  ++v26;
                while ( v23[v26] );
                v27 = &v24[v26];
                *v27 = 0;
                v24 = v27 + 1;
              }
              v28 = -1i64;
              do
                ++v28;
              while ( v23[v28] );
              v23 += v28 + 1;
            }
            while ( *v23 );
            if ( v24 == lpDependencies )
LABEL_67:
              *v24++ = 0;
            *v24 = 0;
          }
          if ( lpDependencies
            && !ChangeServiceConfigA(
                  hSCObject,
                  0xFFFFFFFF,
                  0xFFFFFFFF,
                  0xFFFFFFFF,
                  0i64,
                  0i64,
                  0i64,
                  lpDependencies,
                  0i64,
                  0i64,
                  0i64) )
          {
            LastError = GetLastError();
            goto LABEL_39;
          }
LABEL_72:
          v3 = v40;
          v9 = v32;
          if ( !v40 )
            goto LABEL_41;
          v29 = 0;
          while ( 1 )
          {
            if ( a2 && *a2 )
            {
              LastError = 0;
              goto LABEL_40;
            }
            LastError = getServiceConfig(v9, "NTDS", 0i64, 0i64, &v30);
            if ( LastError )
              goto LABEL_79;
            if ( v30 == 4 )
            {
              v3 = 0;
              goto LABEL_41;
            }
            if ( v30 != 2 )
            {
LABEL_79:
              if ( v29 > 0x1E )
                goto LABEL_40;
            }
            Sleep(0x7D0u);
            v29 += 2;
            if ( v29 >= 0xB4 )
              goto LABEL_40;
          }
        }
        ProductType = 0;
        if ( !RtlGetNtProductType(&ProductType) || ProductType == NtProductLanManNt )
        {
          v40 = 1;
          goto LABEL_33;
        }
LABEL_31:
        v19 = 0;
        goto LABEL_33;
      }
    }
  }
LABEL_39:
  v9 = v32;
LABEL_40:
  v3 = v40;
LABEL_41:
  Dns_Free(lpDependencies);
  Dns_Free(v4);
  Dns_Free(v5);
  if ( hSCObject )
    CloseServiceHandle(hSCObject);
  if ( v9 )
    CloseServiceHandle(v9);
  if ( a3 )
    *a3 = v3;
  return LastError;
}
// 140185140: using guessed type __int64 (__fastcall *_guard_dispatch_icall_fptr)(_QWORD, _QWORD);
// 1401B9ED0: using guessed type __int64 (__fastcall *pDnsAllocFunction)(_QWORD);
