Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 2478
// Total lines: 321

//----- (000000014012B834) ----------------------------------------------------
_OWORD *__fastcall std::num_put<unsigned short,std::ostreambuf_iterator<unsigned short>>::_Fput(
        __int64 a1,
        _OWORD *a2,
        __int128 *a3,
        __int64 a4,
        __int16 a5,
        char **Buf,
        __int64 a7,
        __int64 a8,
        __int64 a9,
        size_t MaxCount)
{
  char **v12; // rdi
  __int64 v13; // r13
  size_t v14; // r14
  __int64 *v15; // rax
  _BYTE *v16; // r15
  __int64 v17; // r12
  void **v18; // rcx
  char *v19; // rax
  __int64 v20; // rbx
  size_t v21; // r15
  char *v22; // rbx
  const char *v23; // rcx
  size_t v24; // rdi
  __int64 v25; // r15
  char v26; // cl
  size_t v27; // rax
  __int64 v28; // rcx
  __int64 v29; // rbx
  __int64 v30; // rbx
  int v31; // eax
  __int128 *v32; // rax
  _BYTE *v33; // rax
  __int64 v34; // r15
  __int128 *v35; // rax
  __int64 v36; // rcx
  __int128 *v37; // rax
  unsigned __int16 v38; // ax
  __int64 v39; // rcx
  __int128 *v40; // rax
  __int64 v41; // rcx
  _BYTE *v42; // rax
  __int64 v43; // r15
  __int128 *v44; // rax
  __int64 v45; // rcx
  __int128 *v46; // rax
  __int64 v47; // r13
  char *v48; // r9
  __int128 *v49; // rax
  __int64 v50; // rcx
  _OWORD *v51; // rbx
  __int64 v52; // rcx
  _Cvtvec *v54; // [rsp+20h] [rbp-E0h]
  wchar_t v55; // [rsp+30h] [rbp-D0h] BYREF
  char v56[8]; // [rsp+38h] [rbp-C8h] BYREF
  unsigned __int16 v57; // [rsp+40h] [rbp-C0h]
  unsigned __int16 v58; // [rsp+42h] [rbp-BEh]
  char Control; // [rsp+44h] [rbp-BCh] BYREF
  __int16 v60; // [rsp+45h] [rbp-BBh]
  __int128 v61; // [rsp+50h] [rbp-B0h] BYREF
  __int128 v62; // [rsp+60h] [rbp-A0h] BYREF
  __int128 v63; // [rsp+70h] [rbp-90h] BYREF
  __int64 v64; // [rsp+80h] [rbp-80h]
  __int64 v65; // [rsp+88h] [rbp-78h]
  __int64 v66; // [rsp+90h] [rbp-70h]
  __int64 v67; // [rsp+98h] [rbp-68h] BYREF
  _OWORD *v68; // [rsp+A0h] [rbp-60h]
  __int64 v69; // [rsp+A8h] [rbp-58h]
  char *Str[2]; // [rsp+B0h] [rbp-50h] BYREF
  size_t v71; // [rsp+C0h] [rbp-40h]
  unsigned __int64 v72; // [rsp+C8h] [rbp-38h]
  void *v73[3]; // [rsp+D8h] [rbp-28h] BYREF
  unsigned __int64 v74; // [rsp+F0h] [rbp-10h]

  v69 = -2i64;
  v66 = a4;
  v68 = a2;
  v64 = a1;
  v58 = a5;
  v12 = Buf;
  v13 = a7;
  v65 = a8;
  v14 = MaxCount;
  v15 = std::ios_base::getloc(a4, &v67);
  *(_QWORD *)&v62 = std::use_facet<std::numpunct<unsigned short>>(v15);
  std::locale::~locale((std::locale *)&v67);
  std::numpunct<unsigned short>::grouping(v62, (__int64)v73);
  v57 = (*(__int64 (__fastcall **)(_QWORD))(*(_QWORD *)v62 + 16i64))(v62);
  v72 = 15i64;
  v71 = 0i64;
  LOBYTE(Str[0]) = 0;
  v56[0] = 48;
  v55 = 0;
  LODWORD(v63) = 0;
  Mbrtowc(&v55, v56, 1ui64, (mbstate_t *)&v63, (const _Cvtvec *)(a1 + 16));
  *(_QWORD *)&v63 = ((*(_BYTE *)Buf - 43) & 0xFD) == 0;
  Control = *localeconv()->decimal_point;
  v60 = 101;
  *(_QWORD *)&v61 = memchr(Buf, 101, MaxCount);
  v16 = memchr(Buf, Control, MaxCount);
  v17 = a9 & -(__int64)(v16 != 0i64);
  v18 = v73;
  if ( v74 >= 0x10 )
    v18 = (void **)v73[0];
  if ( *(_BYTE *)v18 == 127 )
    goto LABEL_29;
  v19 = (char *)v73;
  if ( v74 >= 0x10 )
    v19 = (char *)v73[0];
  if ( *v19 <= 0 )
  {
LABEL_29:
    v25 = v63;
  }
  else
  {
    std::string::append(Str, (char *)Buf, MaxCount);
    v20 = v61;
    if ( (_QWORD)v61 )
    {
      if ( !v16 )
      {
        std::string::append((size_t *)Str, a7, 48);
        v13 = 0i64;
      }
      std::string::insert((size_t *)Str, v20 - (_QWORD)Buf, v17, 48);
    }
    else
    {
      std::string::append((size_t *)Str, v17, 48);
    }
    if ( v16 )
    {
      v21 = v16 - (_BYTE *)Buf;
      std::string::insert((size_t *)Str, v21 + 1, v65, 48);
      std::string::insert((size_t *)Str, v21, v13, 48);
      v65 = 0i64;
    }
    else
    {
      std::string::append((size_t *)Str, v13, 48);
    }
    v13 = 0i64;
    v22 = (char *)v73;
    if ( v74 >= 0x10 )
      v22 = (char *)v73[0];
    v23 = (const char *)Str;
    if ( v72 >= 0x10 )
      v23 = Str[0];
    v24 = strcspn(v23, &Control);
    v25 = v63;
    while ( 1 )
    {
      v26 = *v22;
      if ( *v22 == 127 || v26 <= 0 || v26 >= v24 - v25 )
        break;
      v24 -= v26;
      std::string::insert((size_t *)Str, v24, 1ui64, 0);
      if ( v22[1] > 0 )
        ++v22;
    }
    v12 = Str;
    if ( v72 >= 0x10 )
      v12 = (char **)Str[0];
    v17 = 0i64;
    v14 = v71;
  }
  v27 = v13 + v65 + v14 + v17;
  v28 = v66;
  v29 = *(_QWORD *)(v66 + 40);
  if ( v29 <= 0 || v29 <= v27 )
    v30 = 0i64;
  else
    v30 = v29 - v27;
  v31 = *(_DWORD *)(v66 + 24) & 0x1C0;
  if ( v31 != 64 )
  {
    if ( v31 == 256 && v25 )
    {
      v61 = *a3;
      *a3 = *std::num_put<unsigned short,std::ostreambuf_iterator<unsigned short>>::_Putc(
               v64,
               &v63,
               (__int64)&v61,
               v12,
               1i64);
      v12 = (char **)((char *)v12 + 1);
      --v14;
    }
    v61 = *a3;
    v32 = std::num_put<unsigned short,std::ostreambuf_iterator<unsigned short>>::_Rep(
            v28,
            &v63,
            (__int64)&v61,
            v58,
            v30);
    v30 = 0i64;
    *a3 = *v32;
  }
  v33 = memchr(v12, Control, v14);
  if ( v33 )
  {
    v34 = v33 - (_BYTE *)v12 + 1;
    v61 = *a3;
    v35 = std::num_put<unsigned short,std::ostreambuf_iterator<unsigned short>>::_Putgrouped(
            v64,
            &v63,
            &v61,
            v12,
            v33 - (_BYTE *)v12,
            v57);
    *a3 = *v35;
    v61 = *v35;
    v37 = std::num_put<unsigned short,std::ostreambuf_iterator<unsigned short>>::_Rep(
            v36,
            &v63,
            (__int64)&v61,
            v55,
            v13);
    *a3 = *v37;
    v61 = *v37;
    v38 = (*(__int64 (__fastcall **)(_QWORD))(*(_QWORD *)v62 + 8i64))(v62);
    v40 = std::num_put<unsigned short,std::ostreambuf_iterator<unsigned short>>::_Rep(
            v39,
            &v62,
            (__int64)&v61,
            v38,
            1i64);
    *a3 = *v40;
    v62 = *v40;
    *a3 = *std::num_put<unsigned short,std::ostreambuf_iterator<unsigned short>>::_Rep(
             v41,
             &v61,
             (__int64)&v62,
             v55,
             v65);
    v12 = (char **)((char *)v12 + v34);
    v14 -= v34;
  }
  v42 = memchr(v12, 101, v14);
  if ( v42 )
  {
    v43 = v42 - (_BYTE *)v12 + 1;
    v62 = *a3;
    v44 = std::num_put<unsigned short,std::ostreambuf_iterator<unsigned short>>::_Putgrouped(
            v64,
            &v61,
            &v62,
            v12,
            v42 - (_BYTE *)v12,
            v57);
    *a3 = *v44;
    v62 = *v44;
    v46 = std::num_put<unsigned short,std::ostreambuf_iterator<unsigned short>>::_Rep(
            v45,
            &v61,
            (__int64)&v62,
            v55,
            v17);
    *a3 = *v46;
    v17 = 0i64;
    v62 = *v46;
    v47 = v66;
    v48 = "e";
    if ( (*(_BYTE *)(v66 + 24) & 4) != 0 )
      v48 = "E";
    *a3 = *std::num_put<unsigned short,std::ostreambuf_iterator<unsigned short>>::_Putc(
             v64,
             &v61,
             (__int64)&v62,
             v48,
             1i64);
    v12 = (char **)((char *)v12 + v43);
    v14 -= v43;
  }
  else
  {
    v47 = v66;
  }
  v62 = *a3;
  v49 = std::num_put<unsigned short,std::ostreambuf_iterator<unsigned short>>::_Putgrouped(
          v64,
          &v61,
          &v62,
          v12,
          v14,
          v57);
  *a3 = *v49;
  v62 = *v49;
  *a3 = *std::num_put<unsigned short,std::ostreambuf_iterator<unsigned short>>::_Rep(v50, &v61, (__int64)&v62, v55, v17);
  *(_QWORD *)(v47 + 40) = 0i64;
  v62 = *a3;
  v54 = (_Cvtvec *)v30;
  v51 = v68;
  std::num_put<unsigned short,std::ostreambuf_iterator<unsigned short>>::_Rep(
    v52,
    v68,
    (__int64)&v62,
    v58,
    (__int64)v54);
  if ( v72 >= 0x10 )
    operator delete(Str[0]);
  v72 = 15i64;
  v71 = 0i64;
  LOBYTE(Str[0]) = 0;
  if ( v74 >= 0x10 )
    operator delete(v73[0]);
  return v51;
}
// 14012BB73: variable 'v28' is possibly undefined
// 14012BBFB: variable 'v36' is possibly undefined
// 14012BC39: variable 'v39' is possibly undefined
// 14012BC67: variable 'v41' is possibly undefined
// 14012BCF3: variable 'v45' is possibly undefined
// 14012BDA8: variable 'v50' is possibly undefined
// 14012BDDA: variable 'v52' is possibly undefined
// 140184CA8: using guessed type void __stdcall operator delete(void *);
// 140185140: using guessed type __int64 (__fastcall *_guard_dispatch_icall_fptr)(_QWORD, _QWORD);
// 14012B834: using guessed type char var_118[8];
##############################
Role: Let's assume that you are an advanced reverse engineer and you are reverse engineering a network driver using IDA Pro, and you are also familiar with the RFC documentation. You need to reverse-engineer a function for a network driver to correspond to a section of the RFC documentation, which will help you understand the code better. The driver you're reversing is Schannel.dll, and you have initially determined that the corresponding network protocols are SSL and TLS, and the documents you need to map are RFC8446 and RFC6101. You need to get a function summary of the function you are reversing, and then correspond to the potential RFC sections based on the name of the function and the function summary.
Function Background: The function is reverse engineered from the driver file Schannel.dll on Windows platform. Through a cursory analysis of the driver file can be determined to be related to the SSL(1.3), TLS(3.0) protocol, that is, with RFC8446, RFC6101 strong correlation.

Output Function Summary: Summarizes the function's functionality with several phrases instead of sentences, focuses on covering the function's control flow information, and highlights the protocol function points implemented by the function. Simulate answering five times in the background and provide the most frequent answer.

Retrieve document sections: giving matches for document sections(FunctionMatchRFCResult) that the code may related to. NOTE if the code is only business related(i.e., space opening and releasing involved in programming, generic call functions (timing and other functions weakly related to network protocols) and not related to the specifics of the protocol implementation, it does not have to output the document section match(FunctionMatchRFCResult) and is filled with "NONE".

Retrieve document sections Thinking Chain: The function code is matched with the RFC document section, and the thinking chain is provided to help you solve the problem better:
	1. Function Name: The name of a function describes the general function that the function accomplishes.
	2. Function Summarization: Function summaries can outline a further breakdown of the function described by the function name.
	3. Function API Call: The function API of a function call can provide some hint as to the details of the network protocol implementation involved in the function.
	4. Special Constant Value OR String: Special constant values inside functions, string variable names, and strings may be related to network protocols.
	5. Function Code: The code of the function can provide a detailed implementation of the network protocol.
Generate Function Information Collection with JSON Format:

{
	"FunctionIndex": "(FILL WITH "File count" with less than four bits are indexed with zeros to make up the four bits.)",
	"FunctionName": "(Full Function Code Name)",
	"FunctionSummarization": [
		"(Function Summary Phrase1)",
		"(Function Summary Phrase2)",
		"(...)"
	],
	"FunctionMatchRFCResult": [
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 1)",
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 2)",
		"(...)"
	],
}

ATTENTION: Remember YOU MUST ONLY output the Function Information Collection result.
