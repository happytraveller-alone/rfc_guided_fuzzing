Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 185
// Total lines: 682

//----- (0000000140015F30) ----------------------------------------------------
_BYTE *__fastcall Lookup_ZoneNode(
        __int64 a1,
        unsigned __int8 *a2,
        __int64 a3,
        unsigned __int16 *a4,
        int a5,
        __int64 *a6,
        __int64 *a7,
        __int64 *a8)
{
  __int64 v8; // rsi
  unsigned __int8 *v9; // r11
  __int64 v10; // rdi
  __int64 *v12; // r8
  CDnsClientSubnetRecordsTrie *v13; // r10
  const char *v14; // r9
  int v15; // ebx
  __int64 *v16; // rbx
  char *v17; // rax
  u_short v18; // dx
  __int16 v19; // dx
  _BYTE *ChildNode; // rdi
  __int64 v21; // rax
  const char *v22; // r9
  int v23; // eax
  const wchar_t *v24; // rax
  unsigned __int16 v25; // dx
  const char *v26; // r9
  BOOL i; // eax
  unsigned __int16 *v28; // rdx
  __int64 v29; // rcx
  __int64 v30; // rbx
  unsigned __int16 *v31; // rax
  unsigned __int64 v32; // rcx
  _BYTE *v33; // r8
  void *v34; // rax
  int v35; // eax
  bool v36; // zf
  __int64 v37; // rdx
  char v38; // cl
  int LookupPollNode; // ebx
  const char *v40; // rax
  unsigned __int16 v41; // dx
  char v42; // cl
  __int64 *v43; // rax
  __int64 v44; // rdx
  unsigned __int8 *v45; // rax
  BOOL v46; // ebx
  unsigned __int16 *v47; // rdx
  unsigned int v48; // ecx
  _BYTE *v49; // rax
  _BYTE *v50; // rbx
  CDnsClientSubnetRecordsTrie *v51; // rcx
  __int64 v52; // rcx
  char *v54; // [rsp+20h] [rbp-E0h]
  __int64 v55; // [rsp+28h] [rbp-D8h]
  unsigned __int8 *v56; // [rsp+30h] [rbp-D0h]
  unsigned __int16 *v57; // [rsp+38h] [rbp-C8h]
  BOOL v58; // [rsp+50h] [rbp-B0h]
  char v59; // [rsp+54h] [rbp-ACh]
  unsigned __int16 v60; // [rsp+54h] [rbp-ACh]
  unsigned int v61; // [rsp+58h] [rbp-A8h] BYREF
  int v62; // [rsp+5Ch] [rbp-A4h]
  unsigned int v63; // [rsp+60h] [rbp-A0h]
  unsigned int v64; // [rsp+64h] [rbp-9Ch] BYREF
  _BYTE *v65; // [rsp+68h] [rbp-98h]
  int v66; // [rsp+70h] [rbp-90h]
  unsigned __int16 *v67; // [rsp+78h] [rbp-88h]
  unsigned __int8 *v68; // [rsp+80h] [rbp-80h]
  __int64 *v69; // [rsp+88h] [rbp-78h]
  unsigned int v70; // [rsp+90h] [rbp-70h]
  int v71; // [rsp+94h] [rbp-6Ch]
  _BYTE *v72; // [rsp+98h] [rbp-68h]
  __int64 v73; // [rsp+A0h] [rbp-60h]
  __int64 *v74; // [rsp+A8h] [rbp-58h]
  __int64 *v75; // [rsp+B0h] [rbp-50h]
  unsigned __int16 *v76; // [rsp+B8h] [rbp-48h]
  _BYTE *v77; // [rsp+C0h] [rbp-40h]
  __int16 v78[184]; // [rsp+D0h] [rbp-30h] BYREF
  __int16 v79[184]; // [rsp+240h] [rbp+140h] BYREF
  int v80; // [rsp+410h] [rbp+310h]

  v66 = 0;
  v8 = a1;
  v9 = a2;
  v63 = 0;
  v10 = a3;
  v72 = 0i64;
  v68 = a2;
  v70 = 0;
  v73 = a3;
  v12 = a7;
  v75 = a8;
  v58 = 0;
  v67 = a4;
  v69 = a6;
  v74 = a7;
  v65 = 0i64;
  v13 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
  {
    if ( a1 )
      v14 = *(const char **)(a1 + 16);
    else
      v14 = "NULL -- cache zone";
    v57 = a4;
    v56 = a2;
    v55 = v10;
    WPP_SF_sDqqq(*((_QWORD *)WPP_GLOBAL_Control + 7), 0i64, (__int64)a7, v14);
    v13 = WPP_GLOBAL_Control;
    v9 = v68;
    v12 = v74;
  }
  if ( a6 )
  {
    if ( v8 && (*(_BYTE *)(v8 + 396) & 2) == 0 && *(_QWORD *)(v8 + 344) )
      v15 = 2048;
    else
      v15 = 0;
    v62 = a5 & (v15 | 2);
    v71 = v62;
    v16 = v69;
    if ( v69 == (__int64 *)-1i64 )
    {
      v16 = 0i64;
      v69 = 0i64;
    }
  }
  else
  {
    v62 = (a5 & 1) == 0;
    v71 = v62;
    v16 = v69;
  }
  if ( v12 )
  {
    *v12 = 0i64;
    v13 = WPP_GLOBAL_Control;
  }
  if ( v16 )
  {
    *v16 = 0i64;
    v13 = WPP_GLOBAL_Control;
  }
  if ( v9 )
  {
    if ( v13 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)v13 + 17) & 0x40000) != 0
      && *((_BYTE *)v13 + 65) >= 5u )
    {
      v17 = Dbg_PacketName(v9, v10 + 6304, 0i64);
      WPP_SF_s(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0xBu,
        (__int64)&WPP_3afa02460cfc3c89a49f4b71a68cfa7c_Traceguids,
        v17);
      v9 = v68;
    }
    v67 = (unsigned __int16 *)v79;
    if ( v10 )
    {
      if ( (a5 & 0x100) == 0 )
      {
        if ( (unsigned __int64)(v9 + 1) >= *(_QWORD *)(v10 + 24) )
        {
          v10 = v73;
        }
        else
        {
          v18 = ntohs(*(_WORD *)v9);
          if ( (v18 & 0xC000) == 0xC000 )
          {
            v19 = v18 & 0x3FFF;
            if ( v19 == *(_WORD *)(v10 + 3100) )
            {
              ChildNode = *(_BYTE **)(v10 + 3104);
              if ( ChildNode )
              {
LABEL_39:
                ChildNode[98] = CurrentTimeoutBin;
                goto LABEL_123;
              }
              v10 = v73;
            }
            LODWORD(v21) = *(_DWORD *)(v10 + 3096);
            if ( (_DWORD)v21 )
            {
              do
              {
                v21 = (unsigned int)(v21 - 1);
                if ( v19 == *(_WORD *)(v73 + 2 * v21 + 3512) )
                {
                  ChildNode = *(_BYTE **)(v73 + 8 * v21 + 3112);
                  if ( ChildNode )
                    goto LABEL_39;
                }
              }
              while ( (_DWORD)v21 );
              v10 = v73;
            }
          }
        }
      }
      if ( !(unsigned int)Name_ConvertPacketNameToLookupNameEx(v10, v68, (unsigned __int16 *)v79, 1) )
      {
LABEL_41:
        ChildNode = 0i64;
LABEL_123:
        if ( v16 )
          *v16 = (__int64)ChildNode;
        goto LABEL_204;
      }
      a5 |= 0x10u;
    }
    else if ( !(unsigned int)Name_ConvertRawNameToLookupName(v9, (unsigned __int16 *)v79) )
    {
      goto LABEL_41;
    }
    v13 = WPP_GLOBAL_Control;
  }
  if ( v13 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)v13 + 17) & 0x40000) != 0
    && *((_BYTE *)v13 + 65) >= 5u )
  {
    v54 = Dbg_LookupName(v67);
    v22 = "add";
    if ( v16 )
      v22 = "find";
    WPP_SF_ss(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0xCu,
      (__int64)&WPP_3afa02460cfc3c89a49f4b71a68cfa7c_Traceguids,
      v22,
      (__int64)v54);
    v13 = WPP_GLOBAL_Control;
  }
  if ( v8 && (*(_DWORD *)(v8 + 372) || !*(_QWORD *)(v8 + 192)) )
  {
    v23 = a5;
    if ( (a5 & 0x10) != 0 )
    {
      if ( (a5 & 0x100) != 0 )
      {
        ChildNode = *(_BYTE **)(v8 + 72);
      }
      else
      {
        ChildNode = *(_BYTE **)(v8 + 48);
        if ( !ChildNode )
        {
          if ( v13 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)v13 + 17) & 0x40000) != 0
            && *((_BYTE *)v13 + 65) >= 3u )
          {
            WPP_SF_sq(
              *((_QWORD *)v13 + 7),
              0x10u,
              (__int64)&WPP_3afa02460cfc3c89a49f4b71a68cfa7c_Traceguids,
              *(const char **)(v8 + 16));
            v13 = WPP_GLOBAL_Control;
            v23 = a5;
          }
          ChildNode = *(_BYTE **)(v8 + 72);
        }
        v58 = (*(_BYTE *)(v8 + 388) & 2) != 0 && (v23 & 0x20000000) != 0;
      }
      if ( (v23 & 0x200) != 0 && *(_QWORD *)(g_Database + 56) != v8 )
        v62 = 0;
    }
    else if ( (a5 & 0x100) != 0 )
    {
      if ( (a5 & 0x400) != 0 )
        ChildNode = *(_BYTE **)(v8 + 80);
      else
        ChildNode = *(_BYTE **)(v8 + 64);
    }
    else
    {
      ChildNode = *(_BYTE **)(v8 + 40);
      if ( !ChildNode )
      {
        if ( v13 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)v13 + 17) & 0x40000) != 0
          && *((_BYTE *)v13 + 65) >= 3u )
        {
          WPP_SF_sq(
            *((_QWORD *)v13 + 7),
            0x11u,
            (__int64)&WPP_3afa02460cfc3c89a49f4b71a68cfa7c_Traceguids,
            *(const char **)(v8 + 16));
          v13 = WPP_GLOBAL_Control;
          v23 = a5;
        }
        ChildNode = *(_BYTE **)(v8 + 64);
      }
      v58 = (*(_BYTE *)(v8 + 388) & 2) != 0 && (v23 & 0x20000000) != 0;
    }
    goto LABEL_115;
  }
  if ( v10 && (ChildNode = *(_BYTE **)(v10 + 264)) != 0i64 )
  {
    if ( v13 == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_DWORD *)v13 + 17) & 0x40000) == 0
      || *((_BYTE *)v13 + 65) < 5u )
    {
      goto LABEL_115;
    }
    WPP_SF_q(*((_QWORD *)v13 + 7), 0xDu, (__int64)&WPP_3afa02460cfc3c89a49f4b71a68cfa7c_Traceguids, ChildNode);
  }
  else
  {
    if ( (a5 & 0x100) != 0 )
    {
      if ( v8 && *(_QWORD *)(v8 + 192) )
        ChildNode = *(_BYTE **)(v8 + 72);
      else
        ChildNode = *(_BYTE **)(g_pCacheZone + 72);
      if ( v13 == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_DWORD *)v13 + 17) & 0x40000) == 0
        || *((_BYTE *)v13 + 65) < 5u )
      {
        goto LABEL_115;
      }
      if ( !v8 || (v24 = *(const wchar_t **)(v8 + 192)) == 0i64 )
        v24 = L"Default";
      v25 = 15;
    }
    else
    {
      if ( v8 && *(_QWORD *)(v8 + 192) )
        ChildNode = *(_BYTE **)(v8 + 48);
      else
        ChildNode = *(_BYTE **)(g_pCacheZone + 48);
      v70 = 47;
      if ( v13 == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_DWORD *)v13 + 17) & 0x40000) == 0
        || *((_BYTE *)v13 + 65) < 5u )
      {
        goto LABEL_115;
      }
      if ( !v8 || (v24 = *(const wchar_t **)(v8 + 192)) == 0i64 )
        v24 = L"Default";
      v25 = 14;
    }
    WPP_SF_qS(
      *((_QWORD *)v13 + 7),
      v25,
      (__int64)&WPP_3afa02460cfc3c89a49f4b71a68cfa7c_Traceguids,
      ChildNode,
      v24,
      v55,
      v56,
      v57);
  }
  v13 = WPP_GLOBAL_Control;
LABEL_115:
  if ( !ChildNode )
  {
    if ( v13 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)v13 + 17) & 0x40000) != 0
      && *((_BYTE *)v13 + 65) >= 3u )
    {
      if ( v8 )
        v26 = *(const char **)(v8 + 16);
      else
        v26 = "NULL";
      WPP_SF_s(*((_QWORD *)v13 + 7), 0x12u, (__int64)&WPP_3afa02460cfc3c89a49f4b71a68cfa7c_Traceguids, v26);
    }
    goto LABEL_123;
  }
  if ( v8 )
    v8 &= -(__int64)(*(_DWORD *)(v8 + 372) != 0);
  v59 = ChildNode[96];
  if ( v13 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)v13 + 17) & 0x40000) != 0
    && *((_BYTE *)v13 + 65) >= 5u )
  {
    WPP_SF_qsq(
      *((_QWORD *)v13 + 7),
      0x13u,
      (__int64)&WPP_3afa02460cfc3c89a49f4b71a68cfa7c_Traceguids,
      ChildNode,
      ChildNode + 102,
      v8);
  }
  v77 = ChildNode;
  v66 = 1;
  v64 = -1;
  acquireRead(DbaseLock, 0xFFFFFFFF, &v64);
  for ( i = v58; ; i = 0 )
  {
    v28 = v67;
    v29 = *v67;
    v30 = v29;
    if ( *v67 )
    {
      v31 = &v67[4 * v29 + 4];
      while ( 1 )
      {
        --v30;
        v64 = v29 - 1;
        v76 = v31 - 4;
        v32 = *((unsigned __int8 *)v28 + v30 + 328);
        v33 = (_BYTE *)*((_QWORD *)v31 - 1);
        v72 = v33;
        v63 = v32;
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
        {
          v34 = FormatLabelA(v32, v33);
          WPP_SF_Ds(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x14u,
            (__int64)&WPP_3afa02460cfc3c89a49f4b71a68cfa7c_Traceguids,
            v63,
            (__int64)v34);
        }
        v35 = v62;
        if ( v62 )
        {
          v61 = -1;
          releaseRead(DbaseLock, &v61, 1);
          v35 = v62;
        }
        v65 = ChildNode;
        ChildNode = NTree_FindOrCreateChildNodeEx((__int64)ChildNode, v72, v63, v35, v8, v70, v74, 0, 0i64);
        if ( v62 )
        {
          v61 = -1;
          acquireRead(DbaseLock, 0xFFFFFFFF, &v61);
        }
        if ( !ChildNode )
          break;
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 8) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
        {
          WPP_SF_s(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x15u,
            (__int64)&WPP_3afa02460cfc3c89a49f4b71a68cfa7c_Traceguids,
            ChildNode + 102);
        }
        if ( v8 )
        {
          if ( (ChildNode[92] & 0x10) != 0 )
          {
            if ( (*((_DWORD *)ChildNode + 23) & 0x100) != 0 )
            {
              v62 = v71;
              v59 = -14;
              ChildNode[96] = -14;
            }
            else if ( v59 == -14 )
            {
              ChildNode[96] = 67;
              v59 = 35;
            }
          }
          else
          {
            ChildNode[96] = v59;
          }
        }
        v36 = (*((_DWORD *)ChildNode + 23) & 0x20000) == 0;
        *((_QWORD *)ChildNode + 7) = v8;
        if ( !v36 && v30 )
        {
          v37 = (__int64)ChildNode;
          ChildNode = 0i64;
          v65 = (_BYTE *)v37;
          goto LABEL_173;
        }
        if ( !v30 )
          goto LABEL_159;
        v31 = v76;
        LODWORD(v29) = v64;
        v28 = v67;
      }
      v37 = (__int64)v65;
LABEL_173:
      if ( v37 && (*(_DWORD *)(v37 + 92) & 0x20000) != 0 && v64 )
      {
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 8) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
        {
          v40 = (const char *)FormatLabelA(v63, v72);
          v41 = 22;
LABEL_180:
          WPP_SF_s(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            v41,
            (__int64)&WPP_3afa02460cfc3c89a49f4b71a68cfa7c_Traceguids,
            v40);
LABEL_159:
          v37 = (__int64)v65;
        }
      }
      else if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
             && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 8) != 0
             && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
      {
        v40 = (const char *)FormatLabelA(v63, v72);
        v41 = 23;
        goto LABEL_180;
      }
      i = v58;
    }
    else
    {
      v37 = (__int64)v65;
    }
    if ( !i )
      break;
    v38 = CurrentTimeoutBin;
    if ( ChildNode )
    {
      if ( *((_DWORD *)ChildNode + 19) >= (unsigned int)dword_1401B9714 )
        break;
      ChildNode[98] = CurrentTimeoutBin;
    }
    if ( v37 )
      *(_BYTE *)(v37 + 98) = v38;
    if ( v74 && *v74 )
      *(_BYTE *)(*v74 + 98) = v38;
    v61 = -1;
    releaseRead(DbaseLock, &v61, 1);
    LookupPollNode = DsLoad_LookupPollNode(v8, (__int64)v67);
    v61 = -1;
    acquireRead(DbaseLock, 0xFFFFFFFF, &v61);
    if ( !LookupPollNode )
      break;
    ChildNode = v77;
    v58 = 0;
  }
  v42 = CurrentTimeoutBin;
  v43 = v69;
  if ( ChildNode )
  {
    ChildNode[98] = CurrentTimeoutBin;
    if ( v43 )
    {
      *v43 = (__int64)ChildNode;
    }
    else if ( v72 && *v72 == 42 && v63 == 1 )
    {
      *((_DWORD *)v65 + 23) |= 0x40u;
    }
  }
  else if ( v69 )
  {
    v44 = (__int64)v65;
    if ( v65 )
      v65[98] = CurrentTimeoutBin;
    *v43 = v44;
  }
  if ( v74 && *v74 )
    *(_BYTE *)(*v74 + 98) = v42;
  if ( v73 && ChildNode && v68 )
    Name_SaveCompressionWithNode(v73, (unsigned __int64)v68, (__int64)ChildNode);
LABEL_204:
  v45 = (unsigned __int8 *)g_pzoneLocalGlobalNames;
  v46 = g_pzoneLocalGlobalNames == 0;
  v64 = v46;
  if ( !g_pzoneLocalGlobalNames )
    v45 = (unsigned __int8 *)g_pzoneRemoteGlobalNames;
  v68 = v45;
  memset_0(v78, 0, sizeof(v78));
  if ( !v75 )
    goto LABEL_242;
  if ( !(unsigned int)Gnz_IsUsable() )
    goto LABEL_242;
  v47 = v67;
  if ( !v67 )
    goto LABEL_242;
  if ( !v68 )
    goto LABEL_242;
  if ( !v8 )
    goto LABEL_242;
  v48 = *(_DWORD *)(v8 + 372);
  if ( v48 - 1 > 1 && v48 < 5 )
    goto LABEL_242;
  if ( (*(_BYTE *)(v8 + 396) & 0x10) != 0 || *(_QWORD *)(v8 + 192) )
    goto LABEL_242;
  if ( dword_1401B9990 != 1 )
  {
LABEL_218:
    if ( ChildNode && ChildNode[100] < 2u )
      goto LABEL_242;
    goto LABEL_220;
  }
  if ( !ChildNode )
  {
LABEL_220:
    v36 = (a5 & 0x20) == 0;
    v80 = a5 & 0x20;
    v60 = *v67;
    if ( v36 )
      *v67 -= *(unsigned __int8 *)(v8 + 384);
    Name_ShallowCopyLookupName(v78, (__int64)v47);
    Name_AppendLookupName((unsigned __int16 *)v78);
    if ( v46 )
    {
      v61 = -1;
      releaseRead(DbaseLock, &v61, 1);
      v66 = 0;
    }
    v49 = Lookup_ZoneNode((__int64)v68, 0i64, 0i64, (unsigned __int16 *)v78, (v46 + 1) | 0x10u, 0i64, 0i64, 0i64);
    v50 = v49;
    if ( v64 || !v49 || (v49[92] & 1) != 0 || *((_QWORD *)v49 + 8) )
    {
      v51 = WPP_GLOBAL_Control;
    }
    else
    {
      v51 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x20000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_q(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x18u,
          (__int64)&WPP_3afa02460cfc3c89a49f4b71a68cfa7c_Traceguids,
          v49);
        v51 = WPP_GLOBAL_Control;
      }
      v50 = 0i64;
    }
    if ( (*((_DWORD *)v51 + 17) & 0x20000) != 0
      && !v50
      && v51 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && *((_BYTE *)v51 + 65) >= 4u )
    {
      WPP_SF_(*((_QWORD *)v51 + 7), 0x19u, (__int64)&WPP_3afa02460cfc3c89a49f4b71a68cfa7c_Traceguids);
    }
    if ( !v80 )
      *v67 = v60;
    *v75 = (__int64)v50;
    goto LABEL_242;
  }
  if ( !*((_QWORD *)ChildNode + 8) )
    goto LABEL_218;
LABEL_242:
  if ( v66 )
  {
    v61 = -1;
    releaseRead(DbaseLock, &v61, 1);
  }
  if ( ChildNode )
  {
    v52 = (__int64)ChildNode;
LABEL_248:
    if ( v52 )
      DnsOls_ProcessWinsDataExpiry(v52);
  }
  else if ( v69 )
  {
    v52 = *v69;
    goto LABEL_248;
  }
  return ChildNode;
}
// 1400164D5: variable 'v55' is possibly undefined
// 1400164D5: variable 'v56' is possibly undefined
// 1400164D5: variable 'v57' is possibly undefined
// 140188260: using guessed type wchar_t aDefault_1[8];
// 1401B8EF0: using guessed type __int64 g_pzoneRemoteGlobalNames;
// 1401B8EF8: using guessed type __int64 g_pzoneLocalGlobalNames;
// 1401B9714: using guessed type int dword_1401B9714;
// 1401B9990: using guessed type int dword_1401B9990;
// 1401BA4B8: using guessed type char CurrentTimeoutBin;
// 1401EC5E8: using guessed type __int64 DbaseLock;
// 1401EC600: using guessed type __int64 g_Database;
// 1401EC628: using guessed type __int64 g_pCacheZone;
// 140015F30: using guessed type unsigned __int16 var_1A0[184];
// 140015F30: using guessed type unsigned __int16 var_310[184];
