Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 2056
// Total lines: 173

//----- (00000001400FFDC4) ----------------------------------------------------
__int64 __fastcall setNextKey(struct _zone_info *a1, struct _dnsskd *a2, unsigned __int16 *a3)
{
  unsigned int v3; // edi
  int v5; // ebx
  CDnsClientSubnetRecordsTrie *v8; // rcx
  __int64 v9; // rax
  int v10; // edx
  __int64 v11; // rax
  bool v12; // cc
  int v13; // eax
  unsigned __int16 *v14; // r13
  __int64 v15; // rbx
  __int64 v16; // rdx
  __int64 v17; // r8
  int v18; // r9d
  unsigned __int16 *SignedDnskeyRRListCopy; // r14
  CDnsClientSubnetRecordsTrie *v20; // rcx
  unsigned __int16 v21; // dx
  __int64 v22; // rax
  int v24; // [rsp+30h] [rbp-48h]
  int v25; // [rsp+80h] [rbp+8h]
  unsigned int v26; // [rsp+98h] [rbp+20h] BYREF

  v3 = 0;
  v5 = 0;
  v26 = 0;
  v25 = 0;
  v8 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    if ( a1 )
      v9 = *((_QWORD *)a1 + 2);
    else
      v9 = 0i64;
    WPP_SF_Sqs(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x31u,
      (__int64)&WPP_fcf90f505e41335ad1a88e0d5ede2d0c_Traceguids,
      a3,
      (char)a2,
      v9);
    v8 = WPP_GLOBAL_Control;
  }
  if ( !a1 || !a2 || !a3 || *((_DWORD *)a1 + 93) != 1 || (*((_BYTE *)a1 + 1040) & 4) == 0 )
  {
    v3 = 87;
    goto LABEL_45;
  }
  v10 = *((_DWORD *)a2 + 9);
  if ( v10 )
  {
    v12 = *((_DWORD *)a2 + 24) <= 1u;
  }
  else
  {
    v11 = *((_QWORD *)a1 + 141);
    if ( !v11 )
      goto LABEL_19;
    v12 = *(_DWORD *)(v11 + 96) <= 1u;
  }
  if ( !v12 )
  {
    v3 = 9116;
    goto LABEL_45;
  }
LABEL_19:
  if ( v10 )
  {
    DnsOls_DeleteCertAndKey(a1, a2, *((unsigned __int16 **)a2 + 24));
    Mem_Free(*((_QWORD **)a2 + 24), 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\olsrpc.cpp", 2091);
    *((_QWORD *)a2 + 24) = a3;
    *((_DWORD *)a2 + 52) = 4;
    v8 = WPP_GLOBAL_Control;
    goto LABEL_45;
  }
  v13 = *((_DWORD *)a2 + 52);
  v14 = (unsigned __int16 *)*((_QWORD *)a2 + 24);
  v15 = *(_QWORD *)((char *)a2 + 116);
  *((_QWORD *)a2 + 24) = a3;
  *((_DWORD *)a2 + 52) = 3;
  v24 = v13;
  DnsOls_DeleteSkdKeyPairObject((__int64)a2 + 192);
  GetSystemTimeAsFileTime((LPFILETIME)((char *)a2 + 116));
  SignedDnskeyRRListCopy = (unsigned __int16 *)DnsOls_CreateSignedDnskeyRRListCopy(a1, (int *)&v26);
  if ( !SignedDnskeyRRListCopy )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      WPP_SF_s(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x32u,
        (__int64)&WPP_fcf90f505e41335ad1a88e0d5ede2d0c_Traceguids,
        *((const char **)a1 + 2));
    }
    v3 = v26;
    goto LABEL_38;
  }
  v3 = Zone_LockForWriteEx((__int64)a1, 1, 0x2710u, (__int64)"ds\\dns\\server\\server\\olsrpc.cpp", 234);
  if ( v3 )
  {
    v20 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
    {
      goto LABEL_38;
    }
    v21 = 51;
  }
  else
  {
    v25 = 1;
    v3 = DnsOls_PublishDnskeyRRListAndSignScopes(a1, SignedDnskeyRRListCopy, 0, 0);
    if ( !v3 )
    {
      DnsOls_DeleteCertAndKey(a1, a2, v14);
      Mem_Free(v14, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\olsrpc.cpp", 2061);
      v14 = 0i64;
      goto LABEL_38;
    }
    v20 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
    {
      goto LABEL_38;
    }
    v21 = 52;
  }
  WPP_SF_Ds(
    *((_QWORD *)v20 + 7),
    v21,
    (__int64)&WPP_fcf90f505e41335ad1a88e0d5ede2d0c_Traceguids,
    v3,
    *((_QWORD *)a1 + 2));
LABEL_38:
  if ( v3 )
  {
    *((_DWORD *)a2 + 52) = v24;
    *((_QWORD *)a2 + 24) = v14;
    *(_QWORD *)((char *)a2 + 116) = v15;
    if ( SignedDnskeyRRListCopy )
      RR_ListFree(SignedDnskeyRRListCopy);
  }
  else
  {
    Xfr_SendNotify((__int64)a1, v16, v17, v18);
  }
  v8 = WPP_GLOBAL_Control;
  v5 = v25;
LABEL_45:
  if ( v8 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)v8 + 68) & 4) != 0
    && *((_BYTE *)v8 + 65) >= 4u )
  {
    if ( a1 )
      v22 = *((_QWORD *)a1 + 2);
    else
      v22 = 0i64;
    WPP_SF_Ds(*((_QWORD *)v8 + 7), 0x35u, (__int64)&WPP_fcf90f505e41335ad1a88e0d5ede2d0c_Traceguids, v3, v22);
  }
  if ( v5 )
    Zone_UnlockAfterWriteEx((__int64)a1, 1, (__int64)"ds\\dns\\server\\server\\olsrpc.cpp", 56);
  return v3;
}
// 140100061: variable 'v16' is possibly undefined
// 140100061: variable 'v17' is possibly undefined
// 140100061: variable 'v18' is possibly undefined
