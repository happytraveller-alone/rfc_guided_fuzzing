Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 977
// Total lines: 1378

//----- (0000000140083C54) ----------------------------------------------------
__int64 __fastcall Recurse_CacheMessageResourceRecords(__int64 a1, __int64 a2, int *a3)
{
  __int64 v3; // r13
  __int64 v4; // rbx
  int v5; // r15d
  char v6; // r14
  __int64 *v7; // r12
  char v8; // al
  unsigned int v9; // edi
  int v10; // edi
  int v11; // eax
  bool v12; // zf
  unsigned int v13; // edi
  CDnsClientSubnetRecordsTrie *v14; // rcx
  unsigned __int16 v15; // dx
  __int64 v16; // r8
  unsigned __int8 *v17; // rdi
  __int64 v18; // r9
  __int64 v19; // r14
  int v20; // r15d
  __int64 v21; // rax
  int v22; // eax
  CDnsClientSubnetRecordsTrie *v23; // rcx
  const char *v24; // rax
  const unsigned __int16 *v25; // r9
  __int64 v26; // rdx
  int v27; // r12d
  unsigned __int64 v28; // rax
  __int64 v29; // r13
  __int64 v30; // r10
  __int64 *v31; // r12
  u_short *v32; // rax
  u_short *v33; // r15
  u_short v34; // cx
  unsigned __int64 v35; // rax
  unsigned __int16 v36; // dx
  CDnsClientSubnetRecordsTrie *v37; // rdi
  int v38; // r14d
  int v39; // edi
  __int64 v40; // r14
  __int64 *v41; // rax
  const char *v42; // rax
  __int64 v43; // r8
  __int64 v44; // r9
  const char *v45; // rax
  __int64 v46; // r8
  __int64 v47; // r9
  __int64 v48; // r8
  char v49; // al
  unsigned int v50; // edi
  unsigned __int16 v51; // r14
  int v52; // eax
  __int16 v53; // ax
  int v54; // edx
  __int64 v55; // rcx
  __int64 *v56; // rdi
  __int64 *v57; // rax
  char *v58; // rax
  __int64 v59; // rcx
  int v60; // eax
  __int16 v61; // cx
  BOOL v62; // edi
  char *v63; // rax
  char *v64; // rax
  __int64 RecordFromWire; // rax
  __int64 v66; // r15
  __int16 v67; // cx
  __int16 v68; // ax
  int v69; // edi
  unsigned int v70; // edx
  unsigned int v71; // eax
  unsigned int v72; // eax
  _QWORD *v73; // rdx
  __int64 v74; // rdx
  __int64 v75; // rcx
  const char *v76; // r9
  __int64 v77; // rdi
  int v78; // eax
  __int64 v79; // r14
  unsigned int v80; // r15d
  __int64 NextRecord; // rdi
  __int64 v82; // rdx
  __int64 v83; // r8
  int v84; // ecx
  CDnsClientSubnetRecordsTrie *v85; // rcx
  unsigned __int16 v86; // dx
  const char *v87; // rax
  CDnsClientSubnetRecordsTrie *v88; // r10
  __int64 v90; // [rsp+28h] [rbp-E0h]
  __int64 v91; // [rsp+30h] [rbp-D8h]
  int v92; // [rsp+78h] [rbp-90h]
  int v93; // [rsp+7Ch] [rbp-8Ch]
  int v94; // [rsp+80h] [rbp-88h]
  int v95; // [rsp+80h] [rbp-88h]
  int v96; // [rsp+84h] [rbp-84h]
  unsigned int v97; // [rsp+88h] [rbp-80h]
  int v98; // [rsp+8Ch] [rbp-7Ch]
  __int64 i; // [rsp+90h] [rbp-78h]
  unsigned __int16 v100; // [rsp+98h] [rbp-70h]
  __int16 v101; // [rsp+9Ah] [rbp-6Eh]
  unsigned int v102; // [rsp+9Ch] [rbp-6Ch]
  __int64 v103; // [rsp+A0h] [rbp-68h]
  __int64 v104; // [rsp+A8h] [rbp-60h]
  unsigned int v105; // [rsp+B0h] [rbp-58h]
  int v106; // [rsp+B4h] [rbp-54h]
  int v107; // [rsp+B8h] [rbp-50h]
  _QWORD *v108; // [rsp+C0h] [rbp-48h] BYREF
  _QWORD *v109; // [rsp+C8h] [rbp-40h]
  int v110; // [rsp+D0h] [rbp-38h]
  int v111; // [rsp+D4h] [rbp-34h]
  unsigned int v112; // [rsp+D8h] [rbp-30h] BYREF
  int v113; // [rsp+DCh] [rbp-2Ch]
  unsigned int v114; // [rsp+E0h] [rbp-28h]
  __int64 *v115; // [rsp+E8h] [rbp-20h]
  unsigned int v116; // [rsp+F0h] [rbp-18h]
  __int64 *ZoneRootOfRespondingNs; // [rsp+F8h] [rbp-10h]
  _QWORD *v118; // [rsp+100h] [rbp-8h]
  int v119; // [rsp+108h] [rbp+0h]
  __int64 *v120; // [rsp+110h] [rbp+8h]
  _QWORD *v121; // [rsp+118h] [rbp+10h]
  int v122; // [rsp+120h] [rbp+18h]
  unsigned __int64 v123; // [rsp+128h] [rbp+20h]
  __int64 *v124; // [rsp+130h] [rbp+28h]
  u_short *v125; // [rsp+138h] [rbp+30h]
  int v126; // [rsp+140h] [rbp+38h] BYREF
  int v127; // [rsp+144h] [rbp+3Ch]
  int v128; // [rsp+148h] [rbp+40h]
  __int64 v129; // [rsp+158h] [rbp+50h]
  char v130[16]; // [rsp+170h] [rbp+68h] BYREF
  u_short *v131; // [rsp+180h] [rbp+78h]
  unsigned int v132; // [rsp+188h] [rbp+80h]
  unsigned __int16 v133; // [rsp+18Eh] [rbp+86h]
  char v137; // [rsp+200h] [rbp+F8h]

  v3 = a2;
  v114 = -1;
  v4 = a1;
  v116 = -1;
  v125 = 0i64;
  v93 = 0;
  v5 = 0;
  v115 = 0i64;
  v120 = 0i64;
  v100 = 0;
  v97 = dword_1401B9808;
  v124 = 0i64;
  v107 = 0;
  v96 = 0;
  v110 = 0;
  v111 = 0;
  v119 = 0;
  v137 = 0;
  v106 = 0;
  memset_0(&v126, 0, 0x30ui64);
  v98 = 0;
  v118 = 0i64;
  v102 = 0;
  v121 = 0i64;
  v112 = 0;
  v122 = 0;
  v101 = 0;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_qqdd(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x2Du,
      (__int64)&WPP_95413813eca334a66ae97b50395580a7_Traceguids,
      v4,
      v3,
      *(_DWORD *)(v3 + 568),
      *(unsigned __int8 *)(v3 + 1420));
  }
  if ( (*(_BYTE *)(v4 + 6306) & 4) != 0 )
    _InterlockedAdd(&dword_1401C7E7C, 1u);
  else
    _InterlockedAdd(&dword_1401C7E80, 1u);
  v6 = -1;
  if ( *(char *)(v3 + 1428) <= 0 )
  {
    ZoneRootOfRespondingNs = (__int64 *)Remote_FindZoneRootOfRespondingNs(v3, v4);
    v7 = ZoneRootOfRespondingNs;
    if ( !ZoneRootOfRespondingNs && dword_1401B9814 )
    {
      if ( (*(_BYTE *)(v4 + 6306) & 4) != 0 )
        *(_BYTE *)(v3 + 1420) = 1;
      _InterlockedAdd(&dword_1401C7E9C, 1u);
      v9 = 9505;
      goto LABEL_354;
    }
  }
  else
  {
    v7 = 0i64;
    ZoneRootOfRespondingNs = 0i64;
    _InterlockedAdd(&dword_1401C7E78, 1u);
    if ( (*(_BYTE *)(v3 + 6306) & 1) != 0 && *(char *)(v4 + 6307) < 0 )
      *(_BYTE *)(v3 + 1420) = 1;
    dword_1401B9714 = Dns_GetCurrentTimeInSeconds();
    DF_SetForwarderResponseTime((struct in_addr *)(v4 + 64), dword_1401B9714 - *(_DWORD *)(v3 + 584), v3);
  }
  v8 = *(_BYTE *)(v4 + 6307) & 0xF;
  if ( !v8 || v8 == 4 && *(_WORD *)(v3 + 480) == 43 )
  {
    if ( *(_WORD *)(v4 + 6310) )
    {
      _InterlockedAdd(&dword_1401C7E84, 1u);
      if ( *(_WORD *)(v3 + 480) != 2 || (*(_BYTE *)(v4 + 6306) & 4) != 0 )
        *(_BYTE *)(v3 + 1420) = 1;
      if ( !*(_BYTE *)(v3 + 1420)
        && WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x4000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_q(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x2Eu,
          (__int64)&WPP_95413813eca334a66ae97b50395580a7_Traceguids,
          v4);
      }
    }
    else if ( !*(_WORD *)(v4 + 6312) )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x4000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_q(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x2Fu,
          (__int64)&WPP_95413813eca334a66ae97b50395580a7_Traceguids,
          v4);
      }
      *(_BYTE *)(v3 + 1420) = 1;
      _InterlockedAdd(&dword_1401C7E90, 1u);
      v9 = 9501;
      goto LABEL_353;
    }
  }
  else
  {
    if ( v8 != 3 )
    {
      if ( (*(_BYTE *)(v4 + 6306) & 4) != 0 )
        *(_BYTE *)(v3 + 1420) = 1;
      _InterlockedAdd(&dword_1401C7E8C, 1u);
      v9 = 9504;
LABEL_353:
      v6 = -1;
      goto LABEL_354;
    }
    _InterlockedAdd(&dword_1401C7E88, 1u);
    v107 = 1;
    v126 = 1;
    *(_BYTE *)(v3 + 1420) = 1;
  }
  v10 = *(unsigned __int16 *)(v4 + 6312) + *(unsigned __int16 *)(v4 + 6314);
  v11 = *(unsigned __int16 *)(v4 + 6310);
  v12 = v11 + v10 == 0;
  v13 = v11 + v10;
  v105 = v13;
  if ( v12 )
    goto LABEL_53;
  v118 = Mem_AllocZero(8 * v13, 0i64, "ds\\dns\\server\\server\\rrcache.c", 2139);
  if ( v118 )
  {
    v121 = Mem_AllocZero(4 * v13, 0i64, "ds\\dns\\server\\server\\rrcache.c", 2154);
    if ( v121 )
      goto LABEL_53;
    v14 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x4000) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
    {
      goto LABEL_53;
    }
    v15 = 49;
  }
  else
  {
    v14 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x4000) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
    {
      goto LABEL_53;
    }
    v15 = 48;
  }
  WPP_SF_(*((_QWORD *)v14 + 7), v15, (__int64)&WPP_95413813eca334a66ae97b50395580a7_Traceguids);
LABEL_53:
  v16 = *(unsigned __int16 *)(v4 + 6308);
  v17 = (unsigned __int8 *)(v4 + 6316);
  v18 = *(unsigned __int16 *)(v4 + 6302) + v4 + 6304;
  *(_DWORD *)(v4 + 3096) = 0;
  *(_QWORD *)(v4 + 3104) = 0i64;
  v19 = *(_QWORD *)(v3 + 6280);
  v123 = v18;
  v92 = 0;
  v20 = 0;
  v94 = v16;
  v108 = 0i64;
  v109 = &v108;
  v104 = v19;
  if ( !v7 )
  {
    v21 = *(_QWORD *)(v3 + 256);
    if ( v21 )
    {
      v19 = *(_QWORD *)(v21 + 56);
      v104 = v19;
    }
  }
  if ( v19 )
  {
    v22 = *(_DWORD *)(v19 + 372);
    if ( v22 )
    {
      if ( v22 != 5 )
        v19 = 0i64;
      v104 = v19;
    }
  }
  v23 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    if ( v19 )
      v24 = *(const char **)(v19 + 16);
    else
      v24 = "NULL";
    if ( !v19 || (v25 = *(const unsigned __int16 **)(v19 + 192)) == 0i64 )
      v25 = L"Default";
    WPP_SF_Sqsqq(*((_QWORD *)WPP_GLOBAL_Control + 7), (__int64)&WPP_GLOBAL_Control, v16, v25, v19, (__int64)v24);
    v23 = WPP_GLOBAL_Control;
    LODWORD(v16) = v94;
  }
  v26 = 0i64;
  for ( i = 0i64; ; v26 = i )
  {
    do
    {
      v113 = 0;
      if ( (_WORD)v16 )
        goto LABEL_79;
      if ( v108 )
      {
        RR_CacheRecordSet(
          v3,
          v4,
          v20,
          (__int64)v115,
          &v108,
          v97,
          *(_DWORD *)(v3 + 568),
          (__int64)&v126,
          v93,
          v118,
          v102,
          v121,
          &v112,
          v105);
        v23 = WPP_GLOBAL_Control;
        v26 = i;
        v109 = &v108;
        v27 = 1;
        v97 = dword_1401B9808;
        v108 = 0i64;
        v98 = 1;
      }
      else
      {
        v27 = v98;
      }
      if ( v20 == 3 )
      {
        if ( v107 || v106 == 1 )
        {
          if ( v23 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)v23 + 17) & 0x800) != 0
            && *((_BYTE *)v23 + 65) >= 4u )
          {
            v75 = *((_QWORD *)v23 + 7);
            v76 = "empty auth";
            if ( v107 )
              v76 = "name error";
            WPP_SF_sq(v75, 0x4Du, (__int64)&WPP_95413813eca334a66ae97b50395580a7_Traceguids, v76);
          }
          v77 = (__int64)v124;
          v78 = RR_CacheNonExistence(
                  0i64,
                  v4,
                  (__int64)v124,
                  *(_WORD *)(v4 + 480),
                  *(_DWORD *)(v4 + 568),
                  v107,
                  (*(unsigned __int8 *)(v4 + 6306) >> 2) & 1,
                  (__int64)&v126);
          v23 = WPP_GLOBAL_Control;
          v27 = v78;
          v98 = v78;
        }
        else
        {
          v77 = (__int64)v124;
        }
        v79 = (__int64)v120;
        if ( v122 && v120 )
        {
          if ( v23 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)v23 + 17) & 0x800) != 0
            && *((_BYTE *)v23 + 65) >= 4u )
          {
            WPP_SF_q(*((_QWORD *)v23 + 7), 0x4Eu, (__int64)&WPP_95413813eca334a66ae97b50395580a7_Traceguids, v4);
          }
          RR_CacheNonExistence(
            0i64,
            v4,
            v79,
            0x2Bu,
            *(_DWORD *)(v4 + 568),
            0,
            (*(unsigned __int8 *)(v4 + 6306) >> 2) & 1,
            (__int64)&v126);
          v23 = WPP_GLOBAL_Control;
        }
        else if ( v127 )
        {
          if ( v77 )
          {
            RR_CacheWildcardNoExistData(
              v4,
              v77,
              *(_WORD *)(v4 + 480),
              *(_DWORD *)(v4 + 568),
              (*(unsigned __int8 *)(v4 + 6306) >> 2) & 1,
              &v126);
            v23 = WPP_GLOBAL_Control;
          }
          v27 = 1;
          v98 = 1;
        }
        else if ( v129 )
        {
          RR_CleanupNoExist((__int64)&v126);
          v23 = WPP_GLOBAL_Control;
        }
        if ( *(_WORD *)(v3 + 480) == 255
          && v114 != -1
          && *(_WORD *)(v4 + 6310)
          && (*(_BYTE *)(v4 + 6306) & 4) != 0
          && v77 )
        {
          *(_DWORD *)(v77 + 76) = v114 + *(_DWORD *)(v3 + 568);
          v23 = WPP_GLOBAL_Control;
        }
        v9 = 0;
        if ( v79 )
        {
          v80 = v116;
          if ( v116 != -1 )
          {
            NextRecord = RR_FindNextRecordEx(v79, 0, 2u, 0i64, 0, 0);
            if ( NextRecord )
            {
              do
              {
                if ( *(_BYTE *)(NextRecord + 8) != 8 )
                {
                  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800) != 0
                    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
                  {
                    LODWORD(v91) = v80 + *(_DWORD *)(v3 + 568);
                    LODWORD(v90) = *(_DWORD *)(NextRecord + 20);
                    WPP_SF_qdD(
                      *((_QWORD *)WPP_GLOBAL_Control + 7),
                      0x4Fu,
                      (__int64)&WPP_95413813eca334a66ae97b50395580a7_Traceguids,
                      v79,
                      v90,
                      v91);
                  }
                  *(_DWORD *)(NextRecord + 20) = v80 + *(_DWORD *)(v3 + 568);
                }
                NextRecord = RR_FindNextRecordEx(v79, 0, 2u, NextRecord, 0, 0);
              }
              while ( NextRecord );
              v4 = a1;
              v27 = v98;
            }
            v23 = WPP_GLOBAL_Control;
            v9 = 0;
          }
        }
        if ( v27 || (*(_BYTE *)(v4 + 6307) & 0xF) != 0 || *(_WORD *)(v4 + 6310) || !*(_WORD *)(v4 + 6312) )
        {
          if ( v106 )
          {
            *(_BYTE *)(v3 + 1420) = 1;
            _InterlockedAdd(&dword_1401C7E90, 1u);
            v9 = 9501;
          }
          else
          {
            if ( !*(_WORD *)(v4 + 6310) && *(_WORD *)(v4 + 6312) )
            {
              _InterlockedAdd(&dword_1401C7E94, 1u);
              v23 = WPP_GLOBAL_Control;
            }
            if ( *(_QWORD *)(v3 + 1264) || !v110 )
            {
              if ( *(_WORD *)(v4 + 6310) && !v111 )
                v9 = 9708;
            }
            else if ( v119 )
            {
              if ( v23 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                && (*((_DWORD *)v23 + 17) & 0x800) != 0
                && *((_BYTE *)v23 + 65) >= 4u )
              {
                WPP_SF_q(*((_QWORD *)v23 + 7), 0x51u, (__int64)&WPP_95413813eca334a66ae97b50395580a7_Traceguids, v4);
              }
            }
            else
            {
              _InterlockedAdd(&dword_1401C7E98, 1u);
              v9 = 9706;
            }
          }
        }
        else
        {
          v9 = 9504;
          if ( v23 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)v23 + 17) & 0x800) != 0
            && *((_BYTE *)v23 + 65) >= 2u )
          {
            LODWORD(v90) = 9504;
            WPP_SF_qd(*((_QWORD *)v23 + 7), 0x50u, (__int64)&WPP_95413813eca334a66ae97b50395580a7_Traceguids, v4, v90);
          }
        }
        goto LABEL_352;
      }
      ++v26;
      v92 = ++v20;
      i = v26;
      LODWORD(v16) = *(unsigned __int16 *)(v4 + 2 * v26 + 6308);
    }
    while ( !(_WORD)v16 );
    v28 = (((unsigned __int64)*(unsigned __int8 *)(v4 + 6306) >> 2) & 1) + 2 * v26;
    v26 = (__int64)CachingRankArray;
    v137 = CachingRankArray[v28];
LABEL_79:
    LOWORD(v16) = v16 - 1;
    v29 = (__int64)v17;
    v30 = v19;
    v95 = v16;
    if ( (unsigned __int64)v17 >= v123 )
    {
      if ( v23 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)v23 + 17) & 0x800) != 0
        && *((_BYTE *)v23 + 65) >= 2u )
      {
        WPP_SF_Dd(
          *((_QWORD *)v23 + 7),
          0x21u,
          (__int64)&WPP_3afa02460cfc3c89a49f4b71a68cfa7c_Traceguids,
          *(unsigned __int16 *)(v4 + 6302));
LABEL_430:
        v23 = WPP_GLOBAL_Control;
      }
LABEL_431:
      v31 = 0i64;
      if ( !v20 && v107 )
      {
        if ( v23 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)v23 + 17) & 0x800) != 0
          && *((_BYTE *)v23 + 65) >= 4u )
        {
          WPP_SF_q(*((_QWORD *)v23 + 7), 0x33u, (__int64)&WPP_95413813eca334a66ae97b50395580a7_Traceguids, v4);
        }
        v9 = 9003;
LABEL_352:
        v5 = v93;
        goto LABEL_353;
      }
      goto LABEL_384;
    }
    if ( v19 && *(_DWORD *)(v19 + 372) != 5 )
      v30 = -(__int64)(*(_QWORD *)(v19 + 192) != 0i64) & v19;
    v31 = (__int64 *)Lookup_ZoneNode(v30, v17, v4, 0i64, 0, 0i64, 0i64, 0i64);
    if ( !v31 )
    {
      v23 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        v87 = DnsAddr_Ntoa((struct in_addr *)(v4 + 64));
        WPP_SF_qqs(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x22u,
          (__int64)&WPP_3afa02460cfc3c89a49f4b71a68cfa7c_Traceguids,
          v17,
          v4,
          v87);
        goto LABEL_430;
      }
      goto LABEL_431;
    }
    v32 = (u_short *)Wire_SkipPacketName(v4, (__int64)v17);
    v33 = v32;
    if ( !v32 )
    {
      v23 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x23u, (__int64)&WPP_3afa02460cfc3c89a49f4b71a68cfa7c_Traceguids);
        v23 = WPP_GLOBAL_Control;
      }
      v20 = v92;
      goto LABEL_431;
    }
    v34 = *v32;
    v17 = (unsigned __int8 *)v32;
    v125 = v32;
    if ( ntohs(v34) == 41 )
      break;
    if ( v31 == v115 )
    {
      v38 = v96;
    }
    else
    {
      v37 = WPP_GLOBAL_Control;
      v38 = 0;
      v96 = 0;
      if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800) != 0
        && WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_qq(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x38u,
          (__int64)&WPP_95413813eca334a66ae97b50395580a7_Traceguids,
          v31,
          v115);
        v37 = WPP_GLOBAL_Control;
      }
      if ( *((_BYTE *)v31 + 100) == 1
        && *((_BYTE *)v31 + 101) == 9
        && v31[14] == *(_QWORD *)"localhost"
        && *((_BYTE *)v31 + 120) == aLocalhost[8] )
      {
        if ( v37 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)v37 + 17) & 0x40000) != 0
          && *((_BYTE *)v37 + 65) >= 4u )
        {
          WPP_SF_(*((_QWORD *)v37 + 7), 0x39u, (__int64)&WPP_95413813eca334a66ae97b50395580a7_Traceguids);
        }
        goto LABEL_113;
      }
      if ( dword_1401B9814 && ZoneRootOfRespondingNs )
      {
        v40 = ZoneRootOfRespondingNs[7];
        if ( v40 )
        {
          if ( !(unsigned int)Dbase_IsNodeInSubtreeByLabelCompare(v31, ZoneRootOfRespondingNs) )
          {
            if ( v37 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              && (*((_DWORD *)v37 + 17) & 0x800) != 0
              && *((_BYTE *)v37 + 65) >= 4u )
            {
              v45 = DnsAddr_Ntoa((struct in_addr *)(v4 + 64));
              v39 = v92;
              WPP_SF_Ddqssss(
                *((_QWORD *)WPP_GLOBAL_Control + 7),
                (__int64)ZoneRootOfRespondingNs + 102,
                v46,
                v47,
                v92,
                v4,
                (__int64)ZoneRootOfRespondingNs + 102,
                *(_QWORD *)(v40 + 16),
                (__int64)v31 + 102,
                (__int64)v45);
              goto LABEL_114;
            }
LABEL_113:
            v39 = v92;
LABEL_114:
            v96 = 1;
            v38 = 1;
            Timeout_SetTimeoutOnNodeEx((__int64)v31, 0i64, 0i64);
            goto LABEL_133;
          }
        }
        else
        {
          v41 = v31;
          while ( v41 != ZoneRootOfRespondingNs )
          {
            v41 = (__int64 *)*v41;
            if ( !v41 )
            {
              if ( v37 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                && (*((_DWORD *)v37 + 17) & 0x800) != 0
                && *((_BYTE *)v37 + 65) >= 4u )
              {
                v42 = DnsAddr_Ntoa((struct in_addr *)(v4 + 64));
                v39 = v92;
                WPP_SF_Ddqsss(
                  *((_QWORD *)WPP_GLOBAL_Control + 7),
                  (__int64)ZoneRootOfRespondingNs + 102,
                  v43,
                  v44,
                  v92,
                  v4,
                  (__int64)ZoneRootOfRespondingNs + 102,
                  (__int64)v31 + 102,
                  (__int64)v42);
                goto LABEL_114;
              }
              goto LABEL_113;
            }
          }
        }
        v38 = 0;
      }
    }
    v39 = v92;
LABEL_133:
    *((_BYTE *)v31 + 98) = CurrentTimeoutBin;
    *(_QWORD *)(v4 + 192) = v31;
    if ( !v39 )
    {
      v17 = (unsigned __int8 *)(v33 + 2);
      if ( (unsigned __int64)(v33 + 2) <= v123 )
      {
        *(_WORD *)(v4 + 480) = ntohs(*v33);
        v49 = *(_BYTE *)(v4 + 6307) & 0xF;
        v124 = v31;
        v115 = v31;
        if ( v49 == 3 )
        {
          v50 = *(_DWORD *)(v4 + 568);
          if ( RR_NodeHasUnexpiredCachedData((__int64)v31, v50, v48)
            || v31[4]
            && Lookup_ForEachChildNodeCallFunction(
                 (__int64)v31,
                 (__int64 (__fastcall *)(__int64, __int64))RR_NodeHasUnexpiredCachedData,
                 v50) )
          {
            if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800) != 0
              && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
            {
              WPP_SF_(
                *((_QWORD *)WPP_GLOBAL_Control + 7),
                0x3Du,
                (__int64)&WPP_95413813eca334a66ae97b50395580a7_Traceguids);
            }
            v3 = a2;
            *(_BYTE *)(v4 + 6307) &= 0xF0u;
            v17 = (unsigned __int8 *)(v33 + 2);
            v107 = 0;
            *(_BYTE *)(a2 + 1420) = 0;
            goto LABEL_146;
          }
          v17 = (unsigned __int8 *)(v33 + 2);
        }
        v3 = a2;
LABEL_146:
        if ( v38 )
        {
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            WPP_SF_s(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x3Eu,
              (__int64)&WPP_95413813eca334a66ae97b50395580a7_Traceguids,
              (const char *)v31 + 102);
          }
          goto LABEL_384;
        }
        v23 = WPP_GLOBAL_Control;
        goto LABEL_295;
      }
      v85 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
      {
        goto LABEL_416;
      }
      v86 = 60;
LABEL_415:
      WPP_SF_(*((_QWORD *)v85 + 7), v86, (__int64)&WPP_95413813eca334a66ae97b50395580a7_Traceguids);
      goto LABEL_416;
    }
    v103 = Wire_ParseWireRecord((__int64)v33, v123, 1, (__int64)v130);
    if ( !v103 )
    {
      v85 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
      {
        goto LABEL_416;
      }
      v86 = 63;
      goto LABEL_415;
    }
    v51 = v133;
    v26 = 2i64;
    if ( v133 == 2 )
    {
      v52 = v113;
      if ( !*v31 )
        v52 = 1;
      v113 = v52;
    }
    v20 = v92;
    if ( v92 != 1 )
    {
      if ( v92 != 2 )
      {
        if ( v133 <= 0x30u && (v59 = 0x1420010000002i64, _bittest64(&v59, v133)) )
        {
          v23 = WPP_GLOBAL_Control;
          v60 = v96;
        }
        else
        {
          v23 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            HIDWORD(v90) = HIDWORD(v4);
            WPP_SF_Dq(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x43u,
              (__int64)&WPP_95413813eca334a66ae97b50395580a7_Traceguids,
              v133);
            v23 = WPP_GLOBAL_Control;
          }
          v60 = 1;
          v96 = 1;
        }
        if ( !v60 || *(_WORD *)(v4 + 6310) || (*(_BYTE *)(v4 + 6306) & 4) == 0 || v110 )
          goto LABEL_214;
        if ( v23 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)v23 + 17) & 0x800) != 0
          && *((_BYTE *)v23 + 65) >= 4u )
        {
          WPP_SF_(*((_QWORD *)v23 + 7), 0x44u, (__int64)&WPP_95413813eca334a66ae97b50395580a7_Traceguids);
        }
        v61 = v95;
        v95 = 0;
        v119 = 1;
        *(_WORD *)(v4 + 6302) = v29 - v4 - 6304;
        *(_WORD *)(v4 + 6314) += -1 - v61;
        goto LABEL_213;
      }
      if ( v133 > 0x32u || (v55 = 0x4C80000000044i64, !_bittest64(&v55, v133)) )
      {
        if ( v133 != 0xFFF1 )
        {
          v23 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            HIDWORD(v90) = HIDWORD(v4);
            WPP_SF_Dq(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x41u,
              (__int64)&WPP_95413813eca334a66ae97b50395580a7_Traceguids,
              v133);
            v23 = WPP_GLOBAL_Control;
          }
          v96 = 1;
          goto LABEL_214;
        }
      }
      v56 = ZoneRootOfRespondingNs;
      if ( ZoneRootOfRespondingNs && !v96 )
      {
        if ( *(_BYTE *)(a2 + 1420) )
          goto LABEL_181;
        v57 = v31;
        while ( v57 != ZoneRootOfRespondingNs )
        {
          v57 = (__int64 *)*v57;
          if ( !v57 )
            goto LABEL_184;
        }
        if ( v31 != ZoneRootOfRespondingNs )
        {
LABEL_181:
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x4000) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            v58 = Dbg_NodeName((__int64)ZoneRootOfRespondingNs);
            WPP_SF_qs(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x42u,
              (__int64)&WPP_95413813eca334a66ae97b50395580a7_Traceguids,
              v4,
              v58);
          }
          Remote_SetValidResponse((_QWORD *)a2, v56);
          LOWORD(v26) = 2;
        }
      }
LABEL_184:
      if ( v51 == 6 )
      {
LABEL_187:
        if ( (*(_BYTE *)(v4 + 6307) & 0xF) == 0 && !*(_WORD *)(v4 + 6310) )
        {
          if ( v51 == 6 )
            ++v106;
          v126 = 1;
        }
        LOWORD(v26) = 2;
      }
      else if ( v51 == 46 )
      {
        if ( ntohs(*v131) == 6 )
          goto LABEL_187;
LABEL_213:
        v23 = WPP_GLOBAL_Control;
        goto LABEL_214;
      }
      if ( v51 == (_WORD)v26 )
        v120 = v31;
      goto LABEL_213;
    }
    v53 = *(_WORD *)(a2 + 440);
    if ( v133 == v53 )
    {
      v111 = 1;
      goto LABEL_213;
    }
    if ( v133 == 46 || v133 == 39 )
      goto LABEL_213;
    if ( v133 == 5 )
    {
      v23 = WPP_GLOBAL_Control;
      v54 = 1;
      v93 = 1;
      goto LABEL_215;
    }
    v23 = WPP_GLOBAL_Control;
    if ( (unsigned __int16)(v53 - 253) > 2u )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_ddqq(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x40u,
          (__int64)&WPP_95413813eca334a66ae97b50395580a7_Traceguids,
          v133);
      }
      goto LABEL_384;
    }
    v111 = 1;
LABEL_214:
    v54 = v93;
LABEL_215:
    v62 = 0;
    if ( v108 )
    {
      if ( v51 == v100 && v31 == v115 )
      {
        v3 = a2;
        if ( v51 == 46 )
          v62 = v100 == 46;
      }
      else
      {
        v3 = a2;
        RR_CacheRecordSet(
          a2,
          v4,
          v92,
          (__int64)v115,
          &v108,
          v97,
          *(_DWORD *)(a2 + 568),
          (__int64)&v126,
          v54,
          v118,
          v102,
          v121,
          &v112,
          v105);
        v23 = WPP_GLOBAL_Control;
        v109 = &v108;
        v97 = dword_1401B9808;
        v108 = 0i64;
        v98 = 1;
      }
    }
    else
    {
      v3 = a2;
    }
    v100 = v51;
    v115 = v31;
    if ( v96 )
    {
      v110 = 1;
      if ( v23 == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
        goto LABEL_230;
      if ( (*((_DWORD *)v23 + 17) & 0x800) != 0 && *((_BYTE *)v23 + 65) >= 4u )
      {
        v63 = Dbg_NodeName((__int64)ZoneRootOfRespondingNs);
        WPP_SF_Dqs(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x45u,
          (__int64)&WPP_95413813eca334a66ae97b50395580a7_Traceguids,
          v51,
          v4,
          (__int64)v63);
        v23 = WPP_GLOBAL_Control;
      }
      if ( v23 == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_DWORD *)v23 + 17) & 0x800) == 0
        || *((_BYTE *)v23 + 65) < 4u )
      {
        goto LABEL_230;
      }
      v64 = Dbg_NodeName((__int64)v31);
      WPP_SF_s(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x46u,
        (__int64)&WPP_95413813eca334a66ae97b50395580a7_Traceguids,
        v64);
LABEL_232:
      v23 = WPP_GLOBAL_Control;
      v17 = (unsigned __int8 *)v103;
      v19 = v104;
      goto LABEL_297;
    }
    if ( (unsigned __int16)(v51 + 255) > 1u )
    {
      RecordFromWire = Wire_CreateRecordFromWire(v4, v130, (__int64)v131, 0x22u);
      v66 = RecordFromWire;
      if ( !RecordFromWire )
      {
        v85 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800) == 0
          || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
        {
          goto LABEL_416;
        }
        v86 = 72;
        goto LABEL_415;
      }
      if ( v51 == 46 && (v67 = *(_WORD *)(RecordFromWire + 56), v68 = v101, v101 = *(_WORD *)(v66 + 56), v62) )
      {
        v69 = v92;
        if ( v68 != v67 )
        {
          RR_CacheRecordSet(
            v3,
            v4,
            v92,
            (__int64)v31,
            &v108,
            v97,
            *(_DWORD *)(v3 + 568),
            (__int64)&v126,
            v93,
            v118,
            v102,
            v121,
            &v112,
            v105);
          v98 = 1;
          v109 = &v108;
          v97 = dword_1401B9808;
          v108 = 0i64;
        }
      }
      else
      {
        v69 = v92;
      }
      *(_BYTE *)(v66 + 8) = v137;
      v70 = ((v132 & 0xFF00 | (v132 << 16)) << 8) | ((HIWORD(v132) | v132 & 0xFF0000) >> 8);
      v71 = v97;
      v132 = v70;
      if ( v70 < v97 )
        v71 = v70;
      v97 = v71;
      v72 = v114;
      if ( v70 < v114 )
        v72 = v70;
      v73 = v118;
      v114 = v72;
      *v109 = v66;
      v109 = (_QWORD *)v66;
      if ( v73 && v102 < v105 )
      {
        v73[v102++] = v66;
        goto LABEL_251;
      }
      v23 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x49u, (__int64)&WPP_95413813eca334a66ae97b50395580a7_Traceguids);
LABEL_251:
        v23 = WPP_GLOBAL_Control;
      }
      if ( !v126 )
      {
        if ( v69 == 1 )
        {
          if ( v51 == 46
            && *(_BYTE *)(v66 + 59) < *((_BYTE *)v31 + 100)
            && (*((_BYTE *)v31 + 101) != 1 || *((_BYTE *)v31 + 102) != 42) )
          {
            if ( v23 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              && (*((_DWORD *)v23 + 17) & 0x800) != 0
              && *((_BYTE *)v23 + 65) >= 4u )
            {
              WPP_SF_q(*((_QWORD *)v23 + 7), 0x4Au, (__int64)&WPP_95413813eca334a66ae97b50395580a7_Traceguids, v4);
              v23 = WPP_GLOBAL_Control;
            }
            v126 = 1;
            v127 = 1;
          }
          goto LABEL_287;
        }
        if ( v69 == 2 )
        {
          if ( !v120 || v51 != 47 && v51 != 50 )
          {
LABEL_287:
            if ( v113 )
            {
              if ( !g_fUsingInternetRootServers && *(_BYTE *)(v66 + 57) == 3 && *(_BYTE *)(v66 + 56) > 0x13u )
              {
                v74 = *(unsigned __int8 *)(v66 + 58);
                if ( *(_QWORD *)(v74 + v66 + 59) == g_InternetRootNsDomain
                  && *(_QWORD *)(v74 + v66 + 67) == qword_1401B8078 )
                {
                  g_fUsingInternetRootServers = *(_WORD *)(v74 + v66 + 75) == (unsigned __int16)word_1401B8080;
                }
              }
            }
            v17 = (unsigned __int8 *)v103;
LABEL_295:
            v19 = v104;
LABEL_296:
            v20 = v92;
            goto LABEL_297;
          }
          if ( v23 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)v23 + 17) & 0x800) != 0
            && *((_BYTE *)v23 + 65) >= 4u )
          {
            WPP_SF_q(*((_QWORD *)v23 + 7), 0x4Bu, (__int64)&WPP_95413813eca334a66ae97b50395580a7_Traceguids, v4);
            v23 = WPP_GLOBAL_Control;
          }
          v126 = 1;
          v128 = 1;
          v122 = 1;
        }
      }
      if ( v69 == 3 && v120 && (v51 == 1 || v51 == 28) && v120[7] == v31[7] && (v116 == -1 || v132 < v116) )
      {
        while ( *((_BYTE *)v31 + 100) >= *((_BYTE *)v120 + 100) )
        {
          if ( v31 == v120 )
          {
            v116 = v132;
            if ( v23 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              && (*((_DWORD *)v23 + 17) & 0x800) != 0
              && *((_BYTE *)v23 + 65) >= 4u )
            {
              HIDWORD(v90) = HIDWORD(v120);
              WPP_SF_Dq(*((_QWORD *)v23 + 7), 0x4Cu, (__int64)&WPP_95413813eca334a66ae97b50395580a7_Traceguids, v132);
              v23 = WPP_GLOBAL_Control;
            }
            goto LABEL_287;
          }
          v31 = (__int64 *)*v31;
          if ( !v31 )
            goto LABEL_287;
        }
      }
      goto LABEL_287;
    }
    if ( v23 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)v23 + 17) & 0x800) != 0
      && *((_BYTE *)v23 + 65) >= 4u )
    {
      WPP_SF_q(*((_QWORD *)v23 + 7), 0x47u, (__int64)&WPP_95413813eca334a66ae97b50395580a7_Traceguids, v4);
      goto LABEL_232;
    }
LABEL_230:
    v17 = (unsigned __int8 *)v103;
    v19 = v104;
LABEL_297:
    LODWORD(v16) = v95;
LABEL_298:
    ;
  }
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x34u, (__int64)&WPP_95413813eca334a66ae97b50395580a7_Traceguids, v4);
  }
  *(_QWORD *)(v4 + 32) = v29;
  Answer_ParseAndStripOPT(v4, 0, 0, 0i64);
  LODWORD(v16) = v95;
  if ( !(_WORD)v95 )
  {
    v23 = WPP_GLOBAL_Control;
    v3 = a2;
    v20 = v92;
    goto LABEL_298;
  }
  v35 = Wire_SkipPacketName(v4, v29);
  if ( !v35 )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      WPP_SF_q(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x35u,
        (__int64)&WPP_95413813eca334a66ae97b50395580a7_Traceguids,
        v4);
    }
LABEL_384:
    if ( v125 )
      Wire_PacketNameError((struct in_addr *)v4, v26, (_WORD)v125 - v4 - 6304);
    v9 = 123;
    goto LABEL_387;
  }
  v17 = (unsigned __int8 *)(v35 + 10);
  if ( v35 + 10 >= v35 && (unsigned __int64)v17 <= v123 )
  {
    v36 = *(unsigned __int8 *)(v35 + 9) + (*(unsigned __int8 *)(v35 + 8) << 8);
    if ( v36 )
    {
      if ( &v17[v36] < v17 )
        goto LABEL_372;
      v17 += v36;
    }
    if ( (unsigned __int64)v17 > v123 )
    {
LABEL_372:
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        WPP_SF_Dq(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x37u,
          (__int64)&WPP_95413813eca334a66ae97b50395580a7_Traceguids,
          v36);
      }
      goto LABEL_416;
    }
    v23 = WPP_GLOBAL_Control;
    v3 = a2;
    goto LABEL_296;
  }
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
  {
    WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x36u, (__int64)&WPP_95413813eca334a66ae97b50395580a7_Traceguids, v4);
  }
LABEL_416:
  Wire_PacketError((struct in_addr *)v4);
  v9 = 9502;
LABEL_387:
  RR_Free(0i64);
  if ( v31 && (*((_DWORD *)v31 + 23) & 0x1000) == 0 )
    Timeout_SetTimeoutOnNodeEx((__int64)v31, 0i64, 0i64);
  if ( v115 && (*((_DWORD *)v115 + 23) & 0x1000) == 0 )
    Timeout_SetTimeoutOnNodeEx((__int64)v115, 0i64, 0i64);
  _InterlockedAdd(&dword_1401C7EA0, 1u);
  v6 = -1;
  v5 = v93;
  if ( (*(_BYTE *)(v4 + 6306) & 4) != 0 )
    *(_BYTE *)(a2 + 1420) = 1;
LABEL_354:
  Mem_Free(v118, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\rrcache.c", 3380);
  Mem_Free(v121, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\rrcache.c", 3381);
  if ( (*(_DWORD *)(v4 + 592) & 1) != 0 )
    v84 = *(unsigned __int8 *)(v4 + 597);
  else
    v84 = 255;
  if ( v84 != 255 )
  {
    if ( (*(_DWORD *)(v4 + 592) & 1) != 0 )
      v6 = *(_BYTE *)(v4 + 597);
    Remote_SetSupportedEDNSVersion((struct in_addr *)(v4 + 64), v6);
  }
  if ( a3 )
    *a3 = v5;
  v88 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
  {
    if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800) != 0 && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_Dd(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x52u,
        (__int64)&WPP_95413813eca334a66ae97b50395580a7_Traceguids,
        *(_DWORD *)(v4 + 1464));
      v88 = WPP_GLOBAL_Control;
    }
    if ( v88 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)v88 + 17) & 0x800) != 0
      && *((_BYTE *)v88 + 65) >= 4u )
    {
      WPP_SF_dqqdd(*((_QWORD *)v88 + 7), v82, v83, v9);
    }
  }
  return v9;
}
// 140084523: variable 'v43' is possibly undefined
// 140084523: variable 'v44' is possibly undefined
// 1400845AB: variable 'v46' is possibly undefined
// 1400845AB: variable 'v47' is possibly undefined
// 140084623: variable 'v48' is possibly undefined
// 140085229: variable 'v90' is possibly undefined
// 140085229: variable 'v91' is possibly undefined
// 1400854E7: variable 'v26' is possibly undefined
// 1400858D7: variable 'v82' is possibly undefined
// 1400858D7: variable 'v83' is possibly undefined
// 140188260: using guessed type wchar_t aDefault_1[8];
// 14018FAF0: using guessed type _BYTE CachingRankArray[8];
// 1401B8070: using guessed type __int64 g_InternetRootNsDomain;
// 1401B8078: using guessed type __int64 qword_1401B8078;
// 1401B8080: using guessed type __int16 word_1401B8080;
// 1401B901C: using guessed type int g_fUsingInternetRootServers;
// 1401B9714: using guessed type int dword_1401B9714;
// 1401B9808: using guessed type int dword_1401B9808;
// 1401B9814: using guessed type int dword_1401B9814;
// 1401BA4B8: using guessed type char CurrentTimeoutBin;
// 1401C7E78: using guessed type int dword_1401C7E78;
// 1401C7E7C: using guessed type int dword_1401C7E7C;
// 1401C7E80: using guessed type int dword_1401C7E80;
// 1401C7E84: using guessed type int dword_1401C7E84;
// 1401C7E88: using guessed type int dword_1401C7E88;
// 1401C7E8C: using guessed type int dword_1401C7E8C;
// 1401C7E90: using guessed type int dword_1401C7E90;
// 1401C7E94: using guessed type int dword_1401C7E94;
// 1401C7E98: using guessed type int dword_1401C7E98;
// 1401C7E9C: using guessed type int dword_1401C7E9C;
// 1401C7EA0: using guessed type int dword_1401C7EA0;
##############################
Role: Let's assume that you are an advanced reverse engineer and you are reverse engineering a network driver using IDA Pro, and you are also familiar with the RFC documentation. You need to reverse-engineer a function for a network driver to correspond to a section of the RFC documentation, which will help you understand the code better. The driver you're reversing is Schannel.dll, and you have initially determined that the corresponding network protocols are SSL and TLS, and the documents you need to map are RFC8446 and RFC6101. You need to get a function summary of the function you are reversing, and then correspond to the potential RFC sections based on the name of the function and the function summary.
Function Background: The function is reverse engineered from the driver file Schannel.dll on Windows platform. Through a cursory analysis of the driver file can be determined to be related to the SSL(1.3), TLS(3.0) protocol, that is, with RFC8446, RFC6101 strong correlation.

Output Function Summary: Summarizes the function's functionality with several phrases instead of sentences, focuses on covering the function's control flow information, and highlights the protocol function points implemented by the function. Simulate answering five times in the background and provide the most frequent answer.

Retrieve document sections: giving matches for document sections(FunctionMatchRFCResult) that the code may related to. NOTE if the code is only business related(i.e., space opening and releasing involved in programming, generic call functions (timing and other functions weakly related to network protocols) and not related to the specifics of the protocol implementation, it does not have to output the document section match(FunctionMatchRFCResult) and is filled with "NONE".

Retrieve document sections Thinking Chain: The function code is matched with the RFC document section, and the thinking chain is provided to help you solve the problem better:
	1. Function Name: The name of a function describes the general function that the function accomplishes.
	2. Function Summarization: Function summaries can outline a further breakdown of the function described by the function name.
	3. Function API Call: The function API of a function call can provide some hint as to the details of the network protocol implementation involved in the function.
	4. Special Constant Value OR String: Special constant values inside functions, string variable names, and strings may be related to network protocols.
	5. Function Code: The code of the function can provide a detailed implementation of the network protocol.
Generate Function Information Collection with JSON Format:

{
	"FunctionIndex": "(FILL WITH "File count" with less than four bits are indexed with zeros to make up the four bits.)",
	"FunctionName": "(Full Function Code Name)",
	"FunctionSummarization": [
		"(Function Summary Phrase1)",
		"(Function Summary Phrase2)",
		"(...)"
	],
	"FunctionMatchRFCResult": [
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 1)",
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 2)",
		"(...)"
	],
}

ATTENTION: Remember YOU MUST ONLY output the Function Information Collection result.
