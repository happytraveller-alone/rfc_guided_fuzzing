Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 657
// Total lines: 129

//----- (000000014005DAA4) ----------------------------------------------------
__int16 __fastcall Etw_LogRRLAction(__int64 a1, struct in_addr *a2, _DWORD *a3)
{
  unsigned __int16 v6; // di
  unsigned int v7; // esi
  char *v8; // rax
  const char *v9; // rax
  __int64 v10; // r14
  int v11; // r15d
  char v12; // al
  char v13; // bl
  char v14; // bp
  char v15; // di
  char v16; // si
  const char *v17; // rax
  __int64 v18; // rcx
  const EVENT_DESCRIPTOR *v19; // rdx
  char v20; // al
  char v21; // al
  __int16 v23; // [rsp+60h] [rbp-98h]
  USHORT s_w1; // [rsp+62h] [rbp-96h]
  const char *v25; // [rsp+68h] [rbp-90h]
  char Destination[64]; // [rsp+70h] [rbp-88h] BYREF

  v6 = 0;
  memset_0(Destination, 0, sizeof(Destination));
  LOWORD(v7) = 0;
  LOBYTE(v23) = 0;
  v25 = 0i64;
  if ( *a3 == 1 )
    v6 = 283;
  if ( *a3 == 2 )
    v6 = 282;
  if ( *a3 == 3 )
    v6 = 281;
  LODWORD(v8) = Etw_IsEventEnabled(v6);
  if ( (_DWORD)v8 )
  {
    s_w1 = a2[1576].S_un.S_un_w.s_w1;
    if ( dword_1401B979C )
    {
      v7 = *(unsigned __int16 *)(a1 + 6302);
      if ( v7 > dword_1401B98E8 )
        LOWORD(v7) = dword_1401B98E8;
      *(_WORD *)(a1 + 6304) = __ROL2__(*(_WORD *)(a1 + 6304), 8);
      *(_WORD *)(a1 + 6308) = __ROL2__(*(_WORD *)(a1 + 6308), 8);
      *(_WORD *)(a1 + 6310) = __ROL2__(*(_WORD *)(a1 + 6310), 8);
      *(_WORD *)(a1 + 6312) = __ROL2__(*(_WORD *)(a1 + 6312), 8);
      *(_WORD *)(a1 + 6314) = __ROL2__(*(_WORD *)(a1 + 6314), 8);
    }
    v9 = DnsAddr_Ntoa((struct in_addr *)(a1 + 128));
    if ( v9 )
      strcpy_s(Destination, 0x40ui64, v9);
    if ( Dns_SkipPacketName(a1 + 6316, *(unsigned __int16 *)(a1 + 6302) + a1 + 6304) )
      v23 = *(_WORD *)(a1 + 480);
    LODWORD(v8) = Name_ConvertPacketNameToLookupNameEx(
                    a1,
                    (unsigned __int8 *)(a1 + 6316),
                    *(unsigned __int16 **)(a1 + 1400),
                    0);
    if ( (_DWORD)v8 )
    {
      v8 = Etw_LookupName(*(_WORD **)(a1 + 1400));
      v25 = v8;
    }
    if ( v6 == 281 )
    {
      if ( (Microsoft_Windows_DNSServerEnableBits & 0x2000000) == 0 )
        goto LABEL_28;
      v10 = a1 + 6304;
      v11 = (unsigned __int16)v7;
      v21 = ntohs(a2[16].S_un.S_un_w.s_w2);
      v13 = s_w1;
      v14 = *(_BYTE *)(a1 + 6307) & 0xF;
      v15 = v23;
      v16 = v21;
      v17 = DnsAddr_Ntoa(a2 + 16);
      v19 = (const EVENT_DESCRIPTOR *)&DNS_EVENT_RRL_TO_BE_DROPPED_RESPONSE;
    }
    else if ( v6 == 282 )
    {
      if ( (Microsoft_Windows_DNSServerEnableBits & 0x4000000) == 0 )
        goto LABEL_28;
      v10 = a1 + 6304;
      v11 = (unsigned __int16)v7;
      v20 = ntohs(a2[16].S_un.S_un_w.s_w2);
      v13 = s_w1;
      v14 = *(_BYTE *)(a1 + 6307) & 0xF;
      v15 = v23;
      v16 = v20;
      v17 = DnsAddr_Ntoa(a2 + 16);
      v19 = (const EVENT_DESCRIPTOR *)&DNS_EVENT_RRL_TO_BE_TRUNCATED_RESPONSE;
    }
    else
    {
      if ( v6 != 283 || (Microsoft_Windows_DNSServerEnableBits & 0x8000000) == 0 )
      {
LABEL_28:
        if ( dword_1401B979C )
        {
          *(_WORD *)(a1 + 6304) = __ROL2__(*(_WORD *)(a1 + 6304), 8);
          *(_WORD *)(a1 + 6308) = __ROL2__(*(_WORD *)(a1 + 6308), 8);
          *(_WORD *)(a1 + 6310) = __ROL2__(*(_WORD *)(a1 + 6310), 8);
          *(_WORD *)(a1 + 6312) = __ROL2__(*(_WORD *)(a1 + 6312), 8);
          LOWORD(v8) = __ROL2__(*(_WORD *)(a1 + 6314), 8);
          *(_WORD *)(a1 + 6314) = (_WORD)v8;
        }
        return (__int16)v8;
      }
      v10 = a1 + 6304;
      v11 = (unsigned __int16)v7;
      v12 = ntohs(a2[16].S_un.S_un_w.s_w2);
      v13 = s_w1;
      v14 = *(_BYTE *)(a1 + 6307) & 0xF;
      v15 = v23;
      v16 = v12;
      v17 = DnsAddr_Ntoa(a2 + 16);
      v19 = (const EVENT_DESCRIPTOR *)&DNS_EVENT_RRL_TO_BE_LEAKED_RESPONSE;
    }
    LOWORD(v8) = Template_sssqqqqqb(v18, v19, Destination, v17, v25, v15, v13, v14, v16, v11, v10);
    goto LABEL_28;
  }
  return (__int16)v8;
}
// 14005DD74: variable 'v18' is possibly undefined
// 140183DD0: using guessed type __int64 __fastcall Dns_SkipPacketName(_QWORD, _QWORD);
// 1401B9100: using guessed type int Microsoft_Windows_DNSServerEnableBits;
// 1401B979C: using guessed type int dword_1401B979C;
// 1401B98E8: using guessed type int dword_1401B98E8;
