Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 2064
// Total lines: 226

//----- (0000000140102544) ----------------------------------------------------
__int64 __fastcall performZoneSigning(__int64 a1, int a2, int a3)
{
  __int64 v3; // rbx
  char v5; // r12
  CDnsClientSubnetRecordsTrie *v8; // rcx
  __int64 v9; // rax
  unsigned int v10; // esi
  __int64 v11; // rdx
  __int64 v12; // rcx
  __int64 v13; // rdx
  unsigned int v14; // eax
  int v15; // r14d
  int v16; // esi
  unsigned __int16 *v17; // rax
  __int64 v18; // rdx
  __int128 v19; // xmm0
  unsigned int v20; // eax
  unsigned int v21; // eax
  int v22; // edx
  const char *v23; // r9
  __int128 v25; // [rsp+50h] [rbp-10h] BYREF
  unsigned __int16 *v26; // [rsp+90h] [rbp+30h] BYREF

  v3 = 0i64;
  v5 = 0;
  v8 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    if ( a1 )
      v9 = *(_QWORD *)(a1 + 16);
    else
      v9 = 0i64;
    WPP_SF_Ds(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x6Cu,
      (__int64)&WPP_fcf90f505e41335ad1a88e0d5ede2d0c_Traceguids,
      a2,
      v9);
    v8 = WPP_GLOBAL_Control;
  }
  if ( a1 )
  {
    if ( (a3 & 0x10000000) != 0 )
    {
      v10 = RpcUtil_SwitchSecurityContext(0);
      if ( v10 )
      {
LABEL_76:
        v8 = WPP_GLOBAL_Control;
        goto LABEL_77;
      }
      v5 = 1;
    }
    v10 = Zone_LockForWriteEx(a1, 1, 0x2710u, (__int64)"ds\\dns\\server\\server\\olsrpc.cpp", 143);
    if ( v10 )
    {
LABEL_74:
      if ( v5 )
        RpcUtil_SwitchSecurityContext(1);
      goto LABEL_76;
    }
    if ( *(_DWORD *)(a1 + 372) != 1 )
      goto LABEL_15;
    v12 = a1;
    if ( *(_QWORD *)(a1 + 192) && *(_QWORD *)(a1 + 328) )
      v12 = *(_QWORD *)(a1 + 328);
    DnsOls_ResetZoneKeymasterFlagForZone(v12, v11, 1, 0, 0i64, 0i64, 0i64, 0i64, 0i64);
    v14 = *(_DWORD *)(a1 + 1040);
    if ( ((v14 >> 1) & 1) == 0 && !*(_QWORD *)(a1 + 192) )
    {
      v10 = 9101;
      goto LABEL_73;
    }
    if ( !g_fEnableOnlineSigning && (*(_BYTE *)(a1 + 388) & 1) != 0 )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        WPP_SF_s(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x6Du,
          (__int64)&WPP_fcf90f505e41335ad1a88e0d5ede2d0c_Traceguids,
          *(const char **)(a1 + 16));
      }
      v10 = 9002;
      goto LABEL_73;
    }
    if ( a2 )
    {
      if ( (a2 == 2 || a2 == 1) && (*(_DWORD *)(a1 + 372) != 1 || (v14 & 4) == 0) )
      {
LABEL_15:
        v10 = 9611;
LABEL_73:
        Zone_UnlockAfterWriteEx(a1, 1, (__int64)"ds\\dns\\server\\server\\olsrpc.cpp", 146);
        goto LABEL_74;
      }
    }
    else if ( *(_DWORD *)(a1 + 372) == 1 && (v14 & 4) != 0 )
    {
      v10 = 9102;
      goto LABEL_73;
    }
    v15 = 1;
    v16 = 0;
    if ( a2 )
    {
      if ( a2 != 2 )
      {
        v16 = 0x4000;
        v15 = 0;
        goto LABEL_45;
      }
    }
    else
    {
      v16 = 64;
    }
    if ( !*(_QWORD *)(a1 + 192) )
    {
      v16 |= 3u;
      if ( ((*(_DWORD *)(a1 + 1040) >> 1) & 1) != 0 )
        v16 |= 0x11Cu;
    }
LABEL_45:
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_Ds(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x6Eu,
        (__int64)&WPP_fcf90f505e41335ad1a88e0d5ede2d0c_Traceguids,
        v16,
        *(_QWORD *)(a1 + 16));
    }
    if ( v15 )
    {
      v17 = *(unsigned __int16 **)(a1 + 24);
      v25 = DNS_EVENT_DNSSEC_SIGNING_STARTED;
      v26 = v17;
      Eventlog_LogEvent((__int64)&v25, v13, 1u, &v26, (unsigned __int8 *)1, 0, 0, 0i64);
    }
    v10 = DnsOls_CompleteZoneSign((struct _zone_info *)a1, v16);
    if ( !v10 )
    {
      v26 = *(unsigned __int16 **)(a1 + 24);
      if ( v15 )
        v19 = DNS_EVENT_DNSSEC_ZONE_IS_SIGNED;
      else
        v19 = DNS_EVENT_DNSSEC_ZONE_IS_UNSIGNED;
      v25 = v19;
      Eventlog_LogEvent((__int64)&v25, v18, 1u, &v26, (unsigned __int8 *)1, 0, 0, 0i64);
      if ( (*(_BYTE *)(a1 + 388) & 1) != 0 )
      {
        v20 = (*(_DWORD *)(a1 + 1040) >> 2) & 1;
        LODWORD(v25) = 0x80000;
        *((_QWORD *)&v25 + 1) = v20;
        if ( *(_QWORD *)(a1 + 192) )
          goto LABEL_73;
        v21 = Ds_ZoneWriteProperty(0, a1, (CHAR *)"IsSigned", (int *)&v25, 0);
      }
      else
      {
        if ( *(_QWORD *)(a1 + 192) )
          goto LABEL_73;
        LODWORD(v26) = (*(_DWORD *)(a1 + 1040) >> 2) & 1;
        v21 = Reg_SetValue(0, 0i64, a1, "IsSigned", 4u, (BYTE *)&v26, 4u);
      }
      v10 = v21;
      if ( *(_QWORD *)(a1 + 192) )
        goto LABEL_73;
      SetEvent(g_hOlsKeyRolloverEvent);
    }
    if ( !*(_QWORD *)(a1 + 192) )
    {
      v22 = (*(_DWORD *)(a1 + 1040) >> 3) & 1;
      if ( v22 != ((*(_DWORD *)(a1 + 1040) >> 2) & 1) )
      {
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          v23 = "unsigned";
          if ( v22 )
            v23 = "signed";
          WPP_SF_ss(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x6Fu,
            (__int64)&WPP_fcf90f505e41335ad1a88e0d5ede2d0c_Traceguids,
            v23,
            *(_QWORD *)(a1 + 16));
        }
        *(_DWORD *)(a1 + 1040) ^= ((unsigned __int8)*(_DWORD *)(a1 + 1040) ^ (unsigned __int8)(2 * *(_DWORD *)(a1 + 1040))) & 8;
      }
      if ( !v10 )
      {
        DnsOls_ClearZoneResignSchedule(a1);
        DnsOls_SetZoneSigRefreshTime(a1, 1);
      }
    }
    goto LABEL_73;
  }
  v10 = 87;
LABEL_77:
  if ( v8 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)v8 + 68) & 4) != 0
    && *((_BYTE *)v8 + 65) >= 4u )
  {
    if ( a1 )
      v3 = *(_QWORD *)(a1 + 16);
    WPP_SF_Dds(*((_QWORD *)v8 + 7), 0x70u, (__int64)&WPP_fcf90f505e41335ad1a88e0d5ede2d0c_Traceguids, v10, a2, v3);
  }
  return v10;
}
// 140102665: variable 'v11' is possibly undefined
// 1401027C0: variable 'v13' is possibly undefined
// 140102818: variable 'v18' is possibly undefined
// 140186738: using guessed type __int128 DNS_EVENT_DNSSEC_SIGNING_STARTED;
// 140187320: using guessed type __int128 DNS_EVENT_DNSSEC_ZONE_IS_UNSIGNED;
// 1401878F8: using guessed type __int128 DNS_EVENT_DNSSEC_ZONE_IS_SIGNED;
// 1401B917C: using guessed type int g_fEnableOnlineSigning;
