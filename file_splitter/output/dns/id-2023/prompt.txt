Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 2023
// Total lines: 728

//----- (00000001400F9A40) ----------------------------------------------------
__int64 __fastcall DnsOls_WriteZoneSkdToRegistry(int a1, __int64 a2, __int64 a3, char a4)
{
  __int64 v4; // rbx
  HKEY v6; // r12
  WCHAR *v7; // r13
  CDnsClientSubnetRecordsTrie *v11; // rcx
  char *v12; // rax
  __int64 v13; // rdx
  __int64 v14; // r8
  const char *v15; // r9
  unsigned int v16; // ebx
  HKEY v17; // rax
  CDnsClientSubnetRecordsTrie *v18; // rcx
  unsigned __int16 v19; // dx
  int v20; // r9d
  LSTATUS v21; // eax
  int v22; // eax
  CDnsClientSubnetRecordsTrie *v23; // rcx
  unsigned __int16 v24; // dx
  BYTE *v25; // rax
  const char *v26; // r15
  unsigned int v27; // eax
  CDnsClientSubnetRecordsTrie *v28; // rcx
  unsigned __int16 v29; // dx
  const char *v30; // r15
  int v31; // eax
  CDnsClientSubnetRecordsTrie *v32; // rcx
  unsigned __int16 v33; // dx
  int v34; // eax
  const char *v35; // rax
  BYTE *v36; // rax
  unsigned int v37; // eax
  __int64 *v38; // r8
  DWORD v39; // ebx
  int *v40; // rax
  BYTE *v41; // r12
  int v42; // r9d
  CDnsClientSubnetRecordsTrie *v43; // rcx
  unsigned __int16 v44; // dx
  const char *v45; // r15
  __int64 *v46; // r8
  DWORD v47; // ebx
  int *v48; // rax
  BYTE *v49; // r12
  const char *v50; // r15
  int v51; // eax
  CDnsClientSubnetRecordsTrie *v52; // rcx
  unsigned __int16 v53; // dx
  BYTE *v54; // rax
  unsigned int v55; // eax
  BYTE *v56; // rax
  unsigned int v57; // eax
  __int64 dwOptions; // [rsp+20h] [rbp-50h]
  HKEY v60; // [rsp+50h] [rbp-20h]
  HKEY phkResult; // [rsp+58h] [rbp-18h] BYREF
  HKEY hKey; // [rsp+60h] [rbp-10h] BYREF
  LPCWSTR lpSubKey; // [rsp+A8h] [rbp+38h] BYREF

  v4 = 0i64;
  v6 = 0i64;
  hKey = 0i64;
  phkResult = 0i64;
  v7 = 0i64;
  lpSubKey = 0i64;
  v11 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    if ( a2 )
      v4 = *(_QWORD *)(a2 + 16);
    v12 = Dbg_GuidString((const IID *)(a3 + 8));
    v15 = "Writing";
    if ( (a4 & 1) != 0 )
      v15 = "Deleting";
    WPP_SF_sSsD(*((_QWORD *)WPP_GLOBAL_Control + 7), v13, v14, v15, (__int64)v12, v4);
    v11 = WPP_GLOBAL_Control;
  }
  if ( !a2 || !a3 )
    goto LABEL_16;
  if ( (*(_BYTE *)(a2 + 388) & 1) != 0 )
  {
    if ( v11 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)v11 + 68) & 2) != 0
      && *((_BYTE *)v11 + 65) >= 4u )
    {
      WPP_SF_s(
        *((_QWORD *)v11 + 7),
        0x1Fu,
        (__int64)&WPP_bc8d8ed5e1cd3d5e5de49867d4cbf732_Traceguids,
        *(const char **)(a2 + 16));
    }
LABEL_16:
    v16 = 87;
    goto LABEL_219;
  }
  if ( *(_DWORD *)(a3 + 32) )
  {
    if ( v11 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)v11 + 68) & 2) != 0
      && *((_BYTE *)v11 + 65) >= 4u )
    {
      WPP_SF_qs(
        *((_QWORD *)v11 + 7),
        0x20u,
        (__int64)&WPP_bc8d8ed5e1cd3d5e5de49867d4cbf732_Traceguids,
        a3,
        *(_QWORD *)(a2 + 16));
    }
    v16 = 9611;
    goto LABEL_219;
  }
  v17 = Reg_OpenZone(0i64, *(const WCHAR **)(a2 + 24), 0i64);
  v60 = v17;
  v6 = v17;
  if ( !v17 )
  {
    v16 = 110;
    v18 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
    {
      goto LABEL_219;
    }
    v19 = 33;
    v20 = 110;
    goto LABEL_28;
  }
  v21 = RegCreateKeyExW(v17, L"SigningKeyDescriptors", 0, (LPWSTR)L"DnsRegistryClass", 0, 0x2001Fu, 0i64, &hKey, 0i64);
  v16 = v21;
  if ( v21 )
  {
    v18 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
    {
      goto LABEL_219;
    }
    v19 = 34;
    v20 = v21;
LABEL_28:
    WPP_SF_D(*((_QWORD *)v18 + 7), v19, (__int64)&WPP_bc8d8ed5e1cd3d5e5de49867d4cbf732_Traceguids, v20);
    goto LABEL_219;
  }
  v22 = StringFromGuid((const IID *)(a3 + 8), (void **)&lpSubKey);
  v16 = v22;
  if ( v22 )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_D(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x23u,
        (__int64)&WPP_bc8d8ed5e1cd3d5e5de49867d4cbf732_Traceguids,
        v22);
    }
    v7 = (WCHAR *)lpSubKey;
    goto LABEL_219;
  }
  v7 = (WCHAR *)lpSubKey;
  if ( (a4 & 1) != 0 )
  {
    v16 = RegDeleteKeyW(hKey, lpSubKey);
    if ( !v16 )
      goto LABEL_219;
    v23 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
    {
      goto LABEL_219;
    }
    v24 = 36;
    goto LABEL_46;
  }
  v16 = RegCreateKeyExW(hKey, lpSubKey, 0, (LPWSTR)L"DnsRegistryClass", 0, 0x2001Fu, 0i64, &phkResult, 0i64);
  if ( v16 )
  {
    v23 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
    {
      goto LABEL_219;
    }
    v24 = 37;
LABEL_46:
    WPP_SF_DSs(
      *((_QWORD *)v23 + 7),
      v24,
      (__int64)&WPP_bc8d8ed5e1cd3d5e5de49867d4cbf732_Traceguids,
      v16,
      (__int64)v7,
      *(_QWORD *)(a2 + 16));
    goto LABEL_219;
  }
  v25 = *(BYTE **)(a3 + 24);
  v26 = "KeyStorageProvider";
  if ( v25 )
    v27 = Reg_SetValue(a1, phkResult, 0i64, (const CHAR *)L"KeyStorageProvider", 0xF0000001, v25, 0);
  else
    v27 = Reg_DeleteValue(a1, phkResult, 0i64, "KeyStorageProvider");
  v16 = v27;
  if ( v27 )
  {
    v28 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
    {
      goto LABEL_219;
    }
    v29 = 38;
LABEL_60:
    dwOptions = (__int64)v26;
LABEL_61:
    WPP_SF_Ds(*((_QWORD *)v28 + 7), v29, (__int64)&WPP_bc8d8ed5e1cd3d5e5de49867d4cbf732_Traceguids, v16, dwOptions);
    goto LABEL_219;
  }
  v30 = "IsKsk";
  LODWORD(lpSubKey) = *(_DWORD *)(a3 + 36);
  v31 = Reg_SetValue(a1, phkResult, a2, "IsKsk", 4u, (BYTE *)&lpSubKey, 4u);
  v16 = v31;
  if ( v31 )
  {
    v32 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
    {
      goto LABEL_219;
    }
    v33 = 39;
    goto LABEL_68;
  }
  v30 = "SigningAlgorithm";
  LODWORD(lpSubKey) = *(unsigned __int8 *)(a3 + 40);
  v31 = Reg_SetValue(a1, phkResult, a2, "SigningAlgorithm", 4u, (BYTE *)&lpSubKey, 4u);
  v16 = v31;
  if ( v31 )
  {
    v32 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
    {
      goto LABEL_219;
    }
    v33 = 40;
    goto LABEL_68;
  }
  v30 = "KeyLength";
  LODWORD(lpSubKey) = *(_DWORD *)(a3 + 44);
  v31 = Reg_SetValue(a1, phkResult, a2, "KeyLength", 4u, (BYTE *)&lpSubKey, 4u);
  v16 = v31;
  if ( v31 )
  {
    v32 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
    {
      goto LABEL_219;
    }
    v33 = 41;
    goto LABEL_68;
  }
  v30 = "InitialRolloverOffset";
  LODWORD(lpSubKey) = *(_DWORD *)(a3 + 48);
  v31 = Reg_SetValue(a1, phkResult, a2, "InitialRolloverOffset", 4u, (BYTE *)&lpSubKey, 4u);
  v16 = v31;
  if ( v31 )
  {
    v32 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
    {
      goto LABEL_219;
    }
    v33 = 42;
    goto LABEL_68;
  }
  v30 = "DNSKEYSignatureValidityPeriod";
  LODWORD(lpSubKey) = *(_DWORD *)(a3 + 52);
  v31 = Reg_SetValue(a1, phkResult, a2, "DNSKEYSignatureValidityPeriod", 4u, (BYTE *)&lpSubKey, 4u);
  v16 = v31;
  if ( v31 )
  {
    v32 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
    {
      goto LABEL_219;
    }
    v33 = 43;
    goto LABEL_68;
  }
  v30 = "DSSignatureValidityPeriod";
  LODWORD(lpSubKey) = *(_DWORD *)(a3 + 56);
  v31 = Reg_SetValue(a1, phkResult, a2, "DSSignatureValidityPeriod", 4u, (BYTE *)&lpSubKey, 4u);
  v16 = v31;
  if ( v31 )
  {
    v32 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
    {
      goto LABEL_219;
    }
    v33 = 44;
    goto LABEL_68;
  }
  v30 = "StandardSignatureValidityPeriod";
  LODWORD(lpSubKey) = *(_DWORD *)(a3 + 60);
  v31 = Reg_SetValue(a1, phkResult, a2, "StandardSignatureValidityPeriod", 4u, (BYTE *)&lpSubKey, 4u);
  v16 = v31;
  if ( v31 )
  {
    v32 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
    {
      goto LABEL_219;
    }
    v33 = 45;
    goto LABEL_68;
  }
  v30 = "RolloverType";
  LODWORD(lpSubKey) = *(_DWORD *)(a3 + 64);
  v31 = Reg_SetValue(a1, phkResult, a2, "RolloverType", 4u, (BYTE *)&lpSubKey, 4u);
  v16 = v31;
  if ( v31 )
  {
    v32 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
    {
      goto LABEL_219;
    }
    v33 = 46;
    goto LABEL_68;
  }
  v30 = "RolloverPeriod";
  LODWORD(lpSubKey) = *(_DWORD *)(a3 + 68);
  v31 = Reg_SetValue(a1, phkResult, a2, "RolloverPeriod", 4u, (BYTE *)&lpSubKey, 4u);
  v16 = v31;
  if ( v31 )
  {
    v32 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
    {
      goto LABEL_219;
    }
    v33 = 47;
    goto LABEL_68;
  }
  v30 = "NextRolloverAction";
  LODWORD(lpSubKey) = *(_DWORD *)(a3 + 72);
  v31 = Reg_SetValue(a1, phkResult, a2, "NextRolloverAction", 4u, (BYTE *)&lpSubKey, 4u);
  v16 = v31;
  if ( v31 )
  {
    v32 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
    {
      goto LABEL_219;
    }
    v33 = 48;
    goto LABEL_68;
  }
  v30 = "CurrentState";
  LODWORD(lpSubKey) = *(_DWORD *)(a3 + 92);
  v31 = Reg_SetValue(a1, phkResult, a2, "CurrentState", 4u, (BYTE *)&lpSubKey, 4u);
  v16 = v31;
  if ( v31 )
  {
    v32 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
    {
      goto LABEL_219;
    }
    v33 = 49;
    goto LABEL_68;
  }
  v30 = "CurrentRolloverStatus";
  LODWORD(lpSubKey) = *(_DWORD *)(a3 + 96);
  v31 = Reg_SetValue(a1, phkResult, a2, "CurrentRolloverStatus", 4u, (BYTE *)&lpSubKey, 4u);
  v16 = v31;
  if ( v31 )
  {
    v32 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
    {
      goto LABEL_219;
    }
    v33 = 50;
    goto LABEL_68;
  }
  LODWORD(lpSubKey) = *(_DWORD *)(a3 + 100);
  v34 = Reg_SetValue(a1, phkResult, a2, "CurrentRollState", 4u, (BYTE *)&lpSubKey, 4u);
  v16 = v34;
  if ( !v34 )
  {
    v30 = "ManualTrigger";
    LODWORD(lpSubKey) = *(_DWORD *)(a3 + 104);
    v31 = Reg_SetValue(a1, phkResult, a2, "ManualTrigger", 4u, (BYTE *)&lpSubKey, 4u);
    v16 = v31;
    if ( v31 )
    {
      v32 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
      {
        goto LABEL_219;
      }
      v33 = 52;
      goto LABEL_68;
    }
    v30 = "PrerollEvent";
    LODWORD(lpSubKey) = *(_DWORD *)(a3 + 108);
    v31 = Reg_SetValue(a1, phkResult, a2, "PrerollEvent", 4u, (BYTE *)&lpSubKey, 4u);
    v16 = v31;
    if ( v31 )
    {
      v32 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
      {
        goto LABEL_219;
      }
      v33 = 53;
      goto LABEL_68;
    }
    v16 = Reg_SetValue(a1, phkResult, a2, "LastRolloverTime", 0xBu, (BYTE *)(a3 + 76), 8u);
    if ( v16 )
    {
      v28 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
      {
        goto LABEL_219;
      }
      v29 = 54;
      v35 = "LastRolloverTime";
LABEL_144:
      dwOptions = (__int64)v35;
      goto LABEL_61;
    }
    v16 = Reg_SetValue(a1, phkResult, a2, "NextRolloverTime", 0xBu, (BYTE *)(a3 + 84), 8u);
    if ( v16 )
    {
      v28 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
      {
        goto LABEL_219;
      }
      v29 = 55;
      v35 = "NextRolloverTime";
      goto LABEL_144;
    }
    v30 = "NextKeyGenerationTime";
    v31 = Reg_SetValue(a1, phkResult, a2, "NextKeyGenerationTime", 0xBu, (BYTE *)(a3 + 116), 8u);
    v16 = v31;
    if ( v31 )
    {
      v32 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
      {
        goto LABEL_219;
      }
      v33 = 56;
LABEL_68:
      WPP_SF_Ds(*((_QWORD *)v32 + 7), v33, (__int64)&WPP_bc8d8ed5e1cd3d5e5de49867d4cbf732_Traceguids, v31, (__int64)v30);
      goto LABEL_219;
    }
    v36 = *(BYTE **)(a3 + 144);
    v26 = "ActiveKey";
    if ( v36 )
      v37 = Reg_SetValue(a1, phkResult, 0i64, (const CHAR *)L"ActiveKey", 0xF0000001, v36, 0);
    else
      v37 = Reg_DeleteValue(a1, phkResult, 0i64, "ActiveKey");
    v16 = v37;
    if ( v37 )
    {
      v28 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
      {
        goto LABEL_219;
      }
      v29 = 57;
      goto LABEL_60;
    }
    v38 = *(__int64 **)(a3 + 128);
    LODWORD(lpSubKey) = -1;
    v39 = (unsigned int)DnsOls_WriteRRListToBuffer(0i64, 0i64, v38, (int *)&lpSubKey);
    v40 = (int *)Mem_AllocZero(v39, 4i64, "ds\\dns\\server\\server\\olsparams.cpp", 2008);
    v41 = (BYTE *)v40;
    if ( !v40 )
    {
      v42 = 14;
      v16 = 14;
      v43 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
      {
        goto LABEL_169;
      }
      v44 = 58;
      v45 = "SavedRevokedKeyset";
      goto LABEL_168;
    }
    DnsOls_WriteRRListToBuffer(v40, (unsigned __int64)v40 + v39, *(__int64 **)(a3 + 128), (int *)&lpSubKey);
    v45 = "SavedRevokedKeyset";
    v16 = Reg_SetValue(a1, phkResult, 0i64, "SavedRevokedKeyset", 3u, v41, v39);
    Mem_Free(v41, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\olsparams.cpp", 2038);
    if ( v16 )
    {
      v43 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
      {
        goto LABEL_169;
      }
      v44 = 59;
      goto LABEL_175;
    }
    v46 = *(__int64 **)(a3 + 136);
    LODWORD(lpSubKey) = -1;
    v47 = (unsigned int)DnsOls_WriteRRListToBuffer(0i64, 0i64, v46, (int *)&lpSubKey);
    v48 = (int *)Mem_AllocZero(v47, 4i64, "ds\\dns\\server\\server\\olsparams.cpp", 2061);
    v49 = (BYTE *)v48;
    if ( !v48 )
    {
      v42 = 14;
      v16 = 14;
      v43 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
      {
        goto LABEL_169;
      }
      v44 = 60;
      v45 = "SavedFinalKeyset";
      goto LABEL_168;
    }
    DnsOls_WriteRRListToBuffer(v48, (unsigned __int64)v48 + v47, *(__int64 **)(a3 + 136), (int *)&lpSubKey);
    v45 = "SavedFinalKeyset";
    v16 = Reg_SetValue(a1, phkResult, 0i64, "SavedFinalKeyset", 3u, v49, v47);
    Mem_Free(v49, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\olsparams.cpp", 2086);
    if ( v16 )
    {
      v43 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
      {
        goto LABEL_169;
      }
      v44 = 61;
      goto LABEL_175;
    }
    v50 = "ActiveKeySignScope";
    LODWORD(lpSubKey) = *(_DWORD *)(a3 + 160);
    v51 = Reg_SetValue(a1, phkResult, a2, "ActiveKeySignScope", 4u, (BYTE *)&lpSubKey, 4u);
    v16 = v51;
    if ( v51 )
    {
      v52 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
      {
        goto LABEL_169;
      }
      v53 = 62;
      goto LABEL_191;
    }
    v54 = *(BYTE **)(a3 + 168);
    v45 = "StandbyKey";
    if ( v54 )
      v55 = Reg_SetValue(a1, phkResult, 0i64, (const CHAR *)L"StandbyKey", 0xF0000001, v54, 0);
    else
      v55 = Reg_DeleteValue(a1, phkResult, 0i64, "StandbyKey");
    v16 = v55;
    if ( v55 )
    {
      v43 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
      {
        goto LABEL_169;
      }
      v44 = 63;
      goto LABEL_175;
    }
    v50 = "StandbyKeySignScope";
    LODWORD(lpSubKey) = *(_DWORD *)(a3 + 184);
    v51 = Reg_SetValue(a1, phkResult, a2, "StandbyKeySignScope", 4u, (BYTE *)&lpSubKey, 4u);
    v16 = v51;
    if ( v51 )
    {
      v52 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
      {
        goto LABEL_169;
      }
      v53 = 64;
    }
    else
    {
      v56 = *(BYTE **)(a3 + 192);
      v45 = "NextKey";
      if ( v56 )
        v57 = Reg_SetValue(a1, phkResult, 0i64, (const CHAR *)L"NextKey", 0xF0000001, v56, 0);
      else
        v57 = Reg_DeleteValue(a1, phkResult, 0i64, "NextKey");
      v16 = v57;
      if ( v57 )
      {
        v43 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
          || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
        {
          goto LABEL_169;
        }
        v44 = 65;
LABEL_175:
        v42 = v16;
LABEL_168:
        WPP_SF_Ds(
          *((_QWORD *)v43 + 7),
          v44,
          (__int64)&WPP_bc8d8ed5e1cd3d5e5de49867d4cbf732_Traceguids,
          v42,
          (__int64)v45);
        goto LABEL_169;
      }
      v50 = "NextKeySignScope";
      LODWORD(lpSubKey) = *(_DWORD *)(a3 + 208);
      v51 = Reg_SetValue(a1, phkResult, a2, "NextKeySignScope", 4u, (BYTE *)&lpSubKey, 4u);
      v16 = v51;
      if ( !v51 )
      {
        v6 = v60;
        goto LABEL_219;
      }
      v52 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
      {
LABEL_169:
        v6 = v60;
        goto LABEL_219;
      }
      v53 = 66;
    }
LABEL_191:
    WPP_SF_Ds(*((_QWORD *)v52 + 7), v53, (__int64)&WPP_bc8d8ed5e1cd3d5e5de49867d4cbf732_Traceguids, v51, (__int64)v50);
    goto LABEL_169;
  }
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_Ds(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x33u,
      (__int64)&WPP_bc8d8ed5e1cd3d5e5de49867d4cbf732_Traceguids,
      v34,
      (__int64)"CurrentRollState");
  }
LABEL_219:
  Mem_Free(v7, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\olsparams.cpp", 2178);
  if ( phkResult )
    RegCloseKey(phkResult);
  if ( hKey )
    RegCloseKey(hKey);
  if ( v6 )
    RegCloseKey(v6);
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_D(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x43u, (__int64)&WPP_bc8d8ed5e1cd3d5e5de49867d4cbf732_Traceguids, v16);
  }
  return v16;
}
// 1400F9ADE: variable 'v13' is possibly undefined
// 1400F9ADE: variable 'v14' is possibly undefined
// 140192F80: using guessed type wchar_t aKeystorageprov_0[19];
// 140193150: using guessed type wchar_t aActivekey[10];
// 140193168: using guessed type wchar_t aStandbykey[11];
// 140193180: using guessed type wchar_t aNextkey_0[8];
##############################
Role: Let's assume that you are an advanced reverse engineer and you are reverse engineering a network driver using IDA Pro, and you are also familiar with the RFC documentation. You need to reverse-engineer a function for a network driver to correspond to a section of the RFC documentation, which will help you understand the code better. The driver you're reversing is Schannel.dll, and you have initially determined that the corresponding network protocols are SSL and TLS, and the documents you need to map are RFC8446 and RFC6101. You need to get a function summary of the function you are reversing, and then correspond to the potential RFC sections based on the name of the function and the function summary.
Function Background: The function is reverse engineered from the driver file Schannel.dll on Windows platform. Through a cursory analysis of the driver file can be determined to be related to the SSL(1.3), TLS(3.0) protocol, that is, with RFC8446, RFC6101 strong correlation.

Output Function Summary: Summarizes the function's functionality with several phrases instead of sentences, focuses on covering the function's control flow information, and highlights the protocol function points implemented by the function. Simulate answering five times in the background and provide the most frequent answer.

Retrieve document sections: giving matches for document sections(FunctionMatchRFCResult) that the code may related to. NOTE if the code is only business related(i.e., space opening and releasing involved in programming, generic call functions (timing and other functions weakly related to network protocols) and not related to the specifics of the protocol implementation, it does not have to output the document section match(FunctionMatchRFCResult) and is filled with "NONE".

Retrieve document sections Thinking Chain: The function code is matched with the RFC document section, and the thinking chain is provided to help you solve the problem better:
	1. Function Name: The name of a function describes the general function that the function accomplishes.
	2. Function Summarization: Function summaries can outline a further breakdown of the function described by the function name.
	3. Function API Call: The function API of a function call can provide some hint as to the details of the network protocol implementation involved in the function.
	4. Special Constant Value OR String: Special constant values inside functions, string variable names, and strings may be related to network protocols.
	5. Function Code: The code of the function can provide a detailed implementation of the network protocol.
Generate Function Information Collection with JSON Format:

{
	"FunctionIndex": "(FILL WITH "File count" with less than four bits are indexed with zeros to make up the four bits.)",
	"FunctionName": "(Full Function Code Name)",
	"FunctionSummarization": [
		"(Function Summary Phrase1)",
		"(Function Summary Phrase2)",
		"(...)"
	],
	"FunctionMatchRFCResult": [
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 1)",
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 2)",
		"(...)"
	],
}

ATTENTION: Remember YOU MUST ONLY output the Function Information Collection result.
