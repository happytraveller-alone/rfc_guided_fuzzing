Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 1386
// Total lines: 183

//----- (00000001400AF134) ----------------------------------------------------
void **enforceCacheLimit()
{
  void **result; // rax
  int v1; // ebx
  __int64 v2; // rdx
  unsigned __int64 v3; // rbp
  unsigned __int64 v4; // r14
  CDnsClientSubnetRecordsTrie *v5; // r10
  __int128 *v6; // rax
  __int64 v7; // rsi
  _DWORD *v8; // r8
  unsigned __int8 v9; // di
  __int128 v10; // [rsp+60h] [rbp-38h] BYREF
  __int128 v11; // [rsp+70h] [rbp-28h] BYREF
  void *retaddr; // [rsp+98h] [rbp+0h] BYREF

  result = &retaddr;
  v1 = -1;
  if ( !dword_1401B9914 )
    return result;
  v2 = 1000 * dword_1401B9914 / 0xAu;
  v3 = 8 * (1000 * dword_1401B9914 / 0xAu);
  v4 = (unsigned int)(9 * v2);
  v5 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x100) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
  {
    WPP_SF_dLIIIidd(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      (unsigned __int8)CheckTimeoutBin,
      (unsigned int)qword_1401B9D18
    + (unsigned int)qword_1401B9D0C
    + (unsigned int)dword_1401B9C7C
    + (unsigned __int64)(unsigned int)qword_1401B9C70
    - v3,
      dword_1401B9714);
    v5 = WPP_GLOBAL_Control;
  }
  result = (void **)(unsigned int)qword_1401B9D18;
  if ( (unsigned int)qword_1401B9D18
     + (unsigned int)qword_1401B9D0C
     + (unsigned int)dword_1401B9C7C
     + (unsigned __int64)(unsigned int)qword_1401B9C70 < v3 )
    return result;
  if ( dword_1401B9A20 )
  {
    v6 = (__int128 *)&DNS_EVENT_CACHE_LIMIT_HIT_BY_RECURSION;
    if ( !bFastCachePurgeHappening )
      v6 = (__int128 *)&DNS_EVENT_CACHE_LIMIT_HIT_BY_TIMEOUT;
    v10 = *v6;
    Eventlog_LogEvent((__int64)&v10, v2, 1u, (unsigned __int16 **)&dword_1401B9914, (unsigned __int8 *)4, 0, 0, 0i64);
    v5 = WPP_GLOBAL_Control;
  }
  g_dwCacheFreeCount = 0;
  v7 = -1i64;
LABEL_12:
  v8 = dword_140191490;
  do
  {
    ++v1;
    ++v7;
    if ( v1 >= 4 )
      goto LABEL_44;
    v9 = CheckTimeoutBin;
    v2 = (__int64)&WPP_GLOBAL_Control;
    if ( v5 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)v5 + 17) & 0x100) != 0
      && *((_BYTE *)v5 + 65) >= 4u )
    {
      WPP_SF_Dd(*((_QWORD *)v5 + 7), 0x11u, (__int64)&WPP_fcef9ab22f0836151509c33d06164dff_Traceguids, v1);
      v5 = WPP_GLOBAL_Control;
      v2 = (__int64)&WPP_GLOBAL_Control;
      v8 = dword_140191490;
    }
    if ( v1 == 1 )
    {
      _InterlockedIncrement(&dword_1401C8518);
      v5 = WPP_GLOBAL_Control;
    }
    if ( (unsigned int)qword_1401B9D18
       + (unsigned int)qword_1401B9D0C
       + (unsigned int)dword_1401B9C7C
       + (unsigned __int64)(unsigned int)qword_1401B9C70 > v4 )
    {
      g_dwCacheLimitCurrentTimeAdjustment = -1;
      if ( v5 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)v5 + 17) & 0x100) != 0
        && *((_BYTE *)v5 + 65) >= 4u )
      {
        WPP_SF_ILd(*((_QWORD *)v5 + 7), 0x12u, (__int64)dword_140191490);
        v5 = WPP_GLOBAL_Control;
      }
      v1 = 4;
      v7 = 4i64;
      goto LABEL_30;
    }
    g_dwCacheLimitCurrentTimeAdjustment = dword_140191490[v7];
    if ( v5 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)v5 + 17) & 0x100) != 0
      && *((_BYTE *)v5 + 65) >= 4u )
    {
      WPP_SF_ILd(*((_QWORD *)v5 + 7), 0x13u, (__int64)dword_140191490);
      v5 = WPP_GLOBAL_Control;
LABEL_30:
      v8 = dword_140191490;
    }
  }
  while ( v9 == CurrentTimeoutBin );
  while ( 1 )
  {
    if ( *((_UNKNOWN **)&TimeoutBinArray + 2 * v9) == (_UNKNOWN *)((char *)&TimeoutBinArray + 16 * v9) )
      goto LABEL_40;
    if ( (unsigned int)qword_1401B9D18
       + (unsigned int)qword_1401B9D0C
       + (unsigned int)dword_1401B9C7C
       + (unsigned __int64)(unsigned int)qword_1401B9C70 < v3 )
      break;
    if ( g_fDnsServiceExit == 1 )
      goto LABEL_44;
    if ( v5 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)v5 + 17) & 0x100) != 0
      && *((_BYTE *)v5 + 65) >= 4u )
    {
      WPP_SF_Ddd(*((_QWORD *)v5 + 7), 0x14u, (__int64)&WPP_fcef9ab22f0836151509c33d06164dff_Traceguids, v9);
    }
    checkNodesInTimeoutBin(v9, 1);
    v5 = WPP_GLOBAL_Control;
LABEL_40:
    if ( --v9 == CurrentTimeoutBin )
      goto LABEL_12;
  }
  if ( dword_1401B9A20 )
  {
    v11 = DNS_EVENT_CACHE_LIMIT_REACHED;
    Eventlog_LogEvent((__int64)&v11, v2, 1u, (unsigned __int16 **)&dword_1401B9914, (unsigned __int8 *)4, 0, 0, 0i64);
    v5 = WPP_GLOBAL_Control;
  }
LABEL_44:
  if ( !g_dwCacheFreeCount )
  {
    _InterlockedIncrement(&dword_1401C8514);
    v5 = WPP_GLOBAL_Control;
  }
  g_dwCacheLimitCurrentTimeAdjustment = 0;
  if ( v5 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)v5 + 17) & 0x100) != 0
    && *((_BYTE *)v5 + 65) >= 4u )
  {
    WPP_SF_dIIil(*((_QWORD *)v5 + 7), v2, (__int64)v8, dword_1401B9714);
  }
  result = (void **)(unsigned int)qword_1401B9D18;
  if ( (unsigned int)qword_1401B9D18
     + (unsigned int)qword_1401B9D0C
     + (unsigned int)dword_1401B9C7C
     + (unsigned __int64)(unsigned int)qword_1401B9C70 <= v4 )
    _InterlockedIncrement(&dword_1401C850C);
  else
    _InterlockedIncrement(&dword_1401C8510);
  return result;
}
// 1400AF298: variable 'v2' is possibly undefined
// 1400AF571: variable 'v8' is possibly undefined
// 140186408: using guessed type __int128 DNS_EVENT_CACHE_LIMIT_REACHED;
// 140191490: using guessed type _DWORD dword_140191490[4];
// 1401B9074: using guessed type int g_dwCacheFreeCount;
// 1401B9078: using guessed type int g_dwCacheLimitCurrentTimeAdjustment;
// 1401B907C: using guessed type int bFastCachePurgeHappening;
// 1401B9714: using guessed type int dword_1401B9714;
// 1401B9914: using guessed type int dword_1401B9914;
// 1401B9A20: using guessed type int dword_1401B9A20;
// 1401B9A40: using guessed type int g_fDnsServiceExit;
// 1401B9C70: using guessed type __int64 qword_1401B9C70;
// 1401B9C7C: using guessed type int dword_1401B9C7C;
// 1401B9D0C: using guessed type __int64 qword_1401B9D0C;
// 1401B9D18: using guessed type __int64 qword_1401B9D18;
// 1401BA4B8: using guessed type char CurrentTimeoutBin;
// 1401BB4C0: using guessed type char CheckTimeoutBin;
// 1401C850C: using guessed type int dword_1401C850C;
// 1401C8510: using guessed type int dword_1401C8510;
// 1401C8514: using guessed type int dword_1401C8514;
// 1401C8518: using guessed type int dword_1401C8518;
