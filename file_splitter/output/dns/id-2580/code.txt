Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 2580
// Total lines: 214

//----- (000000014013118C) ----------------------------------------------------
__int64 *__fastcall CDnsPolicy_FQDNCriteriaTree::LookupFQDNCriteriaNodes(_QWORD *a1, unsigned __int16 *a2, __int64 a3)
{
  unsigned __int16 *v3; // r13
  __int64 v5; // rbp
  _BYTE *ChildNode; // rsi
  __int64 *v7; // rax
  __int64 *v8; // rbx
  _QWORD *v9; // rax
  CDnsClientSubnetRecordsTrie *v10; // rcx
  int v11; // eax
  const char *CriteriaTypeString; // rax
  __int64 v13; // rdi
  __int64 v14; // rax
  char *v15; // rax
  unsigned int v16; // r12d
  void *v17; // rax
  __int64 v18; // r13
  _BYTE *v19; // rax
  _BYTE *v20; // r13
  CDnsClientSubnetRecordsTrie *v21; // rcx
  __int64 v22; // r13
  _QWORD *v23; // rax
  __int64 v24; // rdx
  __int64 v25; // rdi
  _QWORD *v26; // rdx
  __int64 v27; // rax
  _BYTE *v28; // rax
  _BYTE *v29; // rdi
  CDnsClientSubnetRecordsTrie *v30; // rcx
  __int64 v31; // rdi
  _QWORD *v32; // rax
  __int64 v33; // rcx
  char pExceptionObject[80]; // [rsp+58h] [rbp-50h] BYREF
  const char *v36; // [rsp+B0h] [rbp+8h] BYREF
  unsigned __int16 *v37; // [rsp+B8h] [rbp+10h] BYREF
  __int64 v38; // [rsp+C0h] [rbp+18h]
  __int64 v39; // [rsp+C8h] [rbp+20h]

  v38 = a3;
  v37 = a2;
  v3 = a2;
  v5 = *a2;
  ChildNode = (_BYTE *)a1[1];
  v7 = (__int64 *)operator new(0x18ui64);
  v8 = v7;
  v36 = (const char *)v7;
  if ( v7 )
  {
    v7[1] = 0i64;
    v9 = operator new(0x18ui64);
    if ( !v9 )
    {
      std::bad_alloc::bad_alloc((std::bad_alloc *)pExceptionObject, 0i64);
      CxxThrowException_0(pExceptionObject, (_ThrowInfo *)&TI2_AVbad_alloc_std__);
    }
    *v8 = (__int64)v9;
    *v9 = v9;
    *(_QWORD *)(*v8 + 8) = *v8;
  }
  else
  {
    v8 = 0i64;
  }
  if ( (*(unsigned int (__fastcall **)(_QWORD *))(*a1 + 8i64))(a1) )
  {
    v13 = v5;
    if ( v5 )
    {
      v14 = (__int64)&v3[4 * v5 + 4];
      v10 = WPP_GLOBAL_Control;
      while ( 1 )
      {
        --v13;
        v39 = v14 - 8;
        v15 = *(char **)(v14 - 8);
        v36 = v15;
        v16 = *((unsigned __int8 *)v3 + v13 + 328);
        if ( v10 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)v10 + 17) & 0x400000) != 0
          && *((_BYTE *)v10 + 65) >= 5u )
        {
          v17 = FormatLabelA(*((unsigned __int8 *)v3 + v13 + 328), v15);
          WPP_SF_Ds(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x1Cu,
            (__int64)&WPP_bbbcc621566c3408fe84d6a85874d543_Traceguids,
            v16,
            (__int64)v17);
          v15 = (char *)v36;
        }
        v18 = (__int64)ChildNode;
        v36 = ChildNode;
        ChildNode = NTree_FindOrCreateChildNodeEx((__int64)ChildNode, v15, v16, 0, 0i64, 0x34u, 0i64, 1, v38);
        if ( (*(_BYTE *)(v18 + 92) & 0x40) != 0 )
        {
          v19 = NTree_FindOrCreateChildNodeEx(v18, "*", 1u, 0, 0i64, 0x34u, 0i64, 1, v38);
          v20 = v19;
          if ( v19 )
          {
            if ( *((_QWORD *)v19 + 8) )
            {
              v21 = WPP_GLOBAL_Control;
              if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
                && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
              {
                WPP_SF_s(
                  *((_QWORD *)WPP_GLOBAL_Control + 7),
                  0x1Du,
                  (__int64)&WPP_bbbcc621566c3408fe84d6a85874d543_Traceguids,
                  v36 + 102);
              }
              v36 = (const char *)*((_QWORD *)v20 + 8);
              v22 = *v8;
              v23 = std::_List_val<CDNSPolicyCriteria *>::_Buynode((__int64)v21, *v8, *(_QWORD *)(*v8 + 8), &v36);
              v24 = v8[1];
              if ( v24 == 0x1FFFFFFFFFFFFFFEi64 )
                std::_Xlength_error("list<T> too long");
              v8[1] = v24 + 1;
              *(_QWORD *)(v22 + 8) = v23;
              *(_QWORD *)v23[1] = v23;
            }
          }
        }
        if ( !ChildNode )
          break;
        v10 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
        {
          WPP_SF_s(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x1Eu,
            (__int64)&WPP_bbbcc621566c3408fe84d6a85874d543_Traceguids,
            ChildNode + 102);
          v10 = WPP_GLOBAL_Control;
        }
        if ( !v13 )
          goto LABEL_34;
        v3 = v37;
        v14 = v39;
      }
    }
    else
    {
LABEL_34:
      if ( ChildNode )
      {
        if ( *((_QWORD *)ChildNode + 8) )
        {
          v37 = (unsigned __int16 *)*((_QWORD *)ChildNode + 8);
          v25 = *v8;
          v26 = std::_List_val<CDNSPolicyCriteria *>::_Buynode((__int64)v10, *v8, *(_QWORD *)(*v8 + 8), &v37);
          v27 = v8[1];
          if ( v27 == 0x1FFFFFFFFFFFFFFEi64 )
            std::_Xlength_error("list<T> too long");
          v8[1] = v27 + 1;
          *(_QWORD *)(v25 + 8) = v26;
          *(_QWORD *)v26[1] = v26;
        }
        if ( (ChildNode[92] & 0x40) != 0 )
        {
          v28 = NTree_FindOrCreateChildNodeEx((__int64)ChildNode, "*", 1u, 0, 0i64, 0x34u, 0i64, 1, v38);
          v29 = v28;
          if ( v28 )
          {
            if ( *((_QWORD *)v28 + 8) )
            {
              v30 = WPP_GLOBAL_Control;
              if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
                && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
              {
                WPP_SF_s(
                  *((_QWORD *)WPP_GLOBAL_Control + 7),
                  0x1Fu,
                  (__int64)&WPP_bbbcc621566c3408fe84d6a85874d543_Traceguids,
                  ChildNode + 102);
              }
              v37 = (unsigned __int16 *)*((_QWORD *)v29 + 8);
              v31 = *v8;
              v32 = std::_List_val<CDNSPolicyCriteria *>::_Buynode((__int64)v30, *v8, *(_QWORD *)(*v8 + 8), &v37);
              v33 = v8[1];
              if ( 0x1FFFFFFFFFFFFFFEi64 == v33 )
                std::_Xlength_error("list<T> too long");
              v8[1] = v33 + 1;
              *(_QWORD *)(v31 + 8) = v32;
              *(_QWORD *)v32[1] = v32;
            }
          }
        }
      }
    }
  }
  else if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
         && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
         && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    v11 = (*(__int64 (__fastcall **)(_QWORD *))*a1)(a1);
    CriteriaTypeString = GetCriteriaTypeString(v11);
    WPP_SF_sq(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x1Bu,
      (__int64)&WPP_bbbcc621566c3408fe84d6a85874d543_Traceguids,
      CriteriaTypeString);
  }
  return v8;
}
// 14013143A: variable 'v21' is possibly undefined
// 14013150C: variable 'v10' is possibly undefined
// 1401315F2: variable 'v30' is possibly undefined
// 140185140: using guessed type __int64 (__fastcall *_guard_dispatch_icall_fptr)(_QWORD, _QWORD);
