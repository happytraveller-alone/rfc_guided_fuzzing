Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 377
// Total lines: 121

//----- (0000000140032424) ----------------------------------------------------
__int64 __fastcall Ds_CheckZoneForDeletion(__int64 a1)
{
  const unsigned __int16 *v1; // rsi
  __int64 v3; // r9
  __int64 v4; // r8
  const wchar_t *v5; // rdx
  __int64 v7; // r8
  const wchar_t *v8; // rdx
  __int64 v9; // rcx
  __int64 v10; // rcx
  __int64 v11; // rcx
  __int64 v12; // rdx
  bool v13; // zf
  const wchar_t *v14; // rax
  __int128 v15; // xmm0
  __int64 *v16; // r9
  unsigned __int16 v17; // r8
  __int64 v18[2]; // [rsp+40h] [rbp-20h] BYREF
  __int128 v19; // [rsp+50h] [rbp-10h] BYREF
  __int64 v20; // [rsp+70h] [rbp+10h] BYREF

  v1 = L"Default";
  if ( ++*(_DWORD *)(a1 + 436) >= 2u )
  {
    if ( (qword_1401B9780 & 0x2000) != 0 && (unsigned int)Log_EnterLock() )
    {
      v7 = *(_QWORD *)(a1 + 16);
      g_pszCurrentLogLevelString = (__int64)"DSPOLL";
      v8 = L"Default";
      if ( *(_QWORD *)(a1 + 192) )
        v8 = *(const wchar_t **)(a1 + 192);
      Log_Printf("Scope %S in Zone %s has been deleted from the DS and will now be deleted from memory\n", v8, v7);
      g_pszCurrentLogLevelString = 0i64;
      Log_LeaveLock();
    }
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      if ( *(_QWORD *)(a1 + 192) )
        v1 = *(const unsigned __int16 **)(a1 + 192);
      WPP_SF_Ss(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x6Fu,
        (__int64)&WPP_0f7f6e0c97433b7ed77e9ce4b2e20f93_Traceguids,
        v1,
        *(_QWORD *)(a1 + 16));
    }
    if ( *(_QWORD *)(a1 + 192) )
    {
      v9 = *(_QWORD *)(a1 + 416);
      LODWORD(v20) = -1;
      if ( v9 && (((unsigned int)getTlsCounter(v9, 2, (unsigned int *)&v20) + 1) & 0xFFFFFFFE) != 0
        || (v10 = *(_QWORD *)(a1 + 416), LODWORD(v20) = -1, v10)
        && (((unsigned int)getTlsCounter(v10, 0, (unsigned int *)&v20) + 1) & 0xFFFFFFFE) != 0 )
      {
        Zone_UnlockAfterWriteEx(a1, 1, (__int64)"ds\\dns\\server\\server\\dpart.c", 152);
      }
      v11 = a1;
      if ( *(_QWORD *)(a1 + 328) )
        v11 = *(_QWORD *)(a1 + 328);
      Scope_Delete(v11, *(const unsigned __int16 **)(a1 + 192), 0);
      v13 = *(_DWORD *)(a1 + 372) == 0;
      v18[0] = *(_QWORD *)(a1 + 192);
      v14 = L"..Cache";
      if ( !v13 )
        v14 = *(const wchar_t **)(a1 + 24);
      v15 = DNS_EVENT_DS_ZONESCOPE_DELETE_DETECTED;
      v18[1] = (__int64)v14;
      v16 = v18;
      v17 = 2;
    }
    else
    {
      Zone_Delete((struct _zone_info *)a1, 0, 1, 1, 0);
      v16 = &v20;
      v15 = DNS_EVENT_DS_ZONE_DELETE_DETECTED;
      v20 = *(_QWORD *)(a1 + 24);
      v17 = 1;
    }
    v19 = v15;
    Eventlog_LogEvent((__int64)&v19, v12, v17, (unsigned __int16 **)v16, (unsigned __int8 *)1, 0, 0, 0i64);
    return 1i64;
  }
  else
  {
    if ( (qword_1401B9780 & 0x2000) != 0 && (unsigned int)Log_EnterLock() )
    {
      v3 = *(unsigned int *)(a1 + 436);
      v4 = *(_QWORD *)(a1 + 16);
      g_pszCurrentLogLevelString = (__int64)"DSPOLL";
      v5 = L"Default";
      if ( *(_QWORD *)(a1 + 192) )
        v5 = *(const wchar_t **)(a1 + 192);
      Log_Printf("Scope %S in Zone %s has been missing from the DS on %u poll(s)\n", v5, v4, v3);
      g_pszCurrentLogLevelString = 0i64;
      Log_LeaveLock();
    }
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      if ( *(_QWORD *)(a1 + 192) )
        v1 = *(const unsigned __int16 **)(a1 + 192);
      WPP_SF_Ssd(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x6Eu,
        (__int64)&WPP_0f7f6e0c97433b7ed77e9ce4b2e20f93_Traceguids,
        v1,
        *(_QWORD *)(a1 + 16));
    }
    return 0i64;
  }
}
// 1400326CE: variable 'v12' is possibly undefined
// 140185FF8: using guessed type __int128 DNS_EVENT_DS_ZONESCOPE_DELETE_DETECTED;
// 140186DD0: using guessed type __int128 DNS_EVENT_DS_ZONE_DELETE_DETECTED;
// 140188260: using guessed type wchar_t aDefault_1[8];
// 1401B8F28: using guessed type __int64 g_pszCurrentLogLevelString;
// 1401B9780: using guessed type __int64 qword_1401B9780;
