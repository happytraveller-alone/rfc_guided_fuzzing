Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 243
// Total lines: 284

//----- (000000014001F9B8) ----------------------------------------------------
_BOOL8 __fastcall File_CloseDatabaseFile(__int64 a1, unsigned __int16 *a2, int a3, HANDLE *a4)
{
  BOOL v5; // r15d
  HANDLE *v6; // r12
  char *v8; // rdx
  char *v9; // r15
  char *v10; // rcx
  __int64 v11; // rcx
  __int64 v12; // rax
  __int64 v13; // rax
  HANDLE Transaction; // r12
  int LastError; // eax
  char *v16; // rdx
  char *v17; // rcx
  __int64 v18; // rcx
  __int64 v19; // rax
  __int64 v20; // rax
  int v21; // eax
  char *v22; // rdx
  __int64 v23; // rcx
  __int64 v24; // rax
  int v25; // eax
  CDnsClientSubnetRecordsTrie *v26; // rcx
  unsigned __int16 v27; // dx
  int v29; // [rsp+40h] [rbp-C0h]
  WCHAR ExistingFileName[1040]; // [rsp+50h] [rbp-B0h] BYREF
  unsigned __int16 v33[528]; // [rsp+870h] [rbp+770h] BYREF
  unsigned __int16 v34[528]; // [rsp+C90h] [rbp+B90h] BYREF
  WCHAR NewFileName[1040]; // [rsp+10B0h] [rbp+FB0h] BYREF
  WCHAR FileName[1040]; // [rsp+18D0h] [rbp+17D0h] BYREF
  WCHAR v37[1040]; // [rsp+20F0h] [rbp+1FF0h] BYREF

  v5 = 0;
  v29 = 0;
  v6 = a4;
  CloseHandle(*a4);
  if ( a2
    && (int)StringCchCopyW((char *)v33, 521i64, (char *)a2) >= 0
    && (int)StringCchCatW(v33, 521i64, (char *)L".temp") >= 0 )
  {
    if ( a1 && *(_QWORD *)(a1 + 192) )
      v8 = *(char **)(a1 + 24);
    else
      v8 = 0i64;
    v9 = (char *)L".";
    if ( a1 )
    {
      v11 = *(_QWORD *)(a1 + 328);
      v12 = a1;
      if ( v11 )
        v12 = *(_QWORD *)(a1 + 328);
      if ( *(_QWORD *)(v12 + 200) )
      {
        v13 = a1;
        if ( v11 )
          v13 = *(_QWORD *)(a1 + 328);
        v10 = **(char ***)(v13 + 200);
      }
      else
      {
        v10 = (char *)L".";
      }
    }
    else
    {
      v10 = 0i64;
    }
    if ( (unsigned int)File_CreateDatabaseFilePathEx(v10, v8, (char *)v37, 1040i64, 0i64, 0i64, v33) )
    {
      Transaction = CreateTransaction(0i64, 0i64, 0, 0, 0, 0, 0i64);
      if ( Transaction == (HANDLE)-1i64 )
      {
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x20) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
        {
          LastError = GetLastError();
          WPP_SF_D(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0xCu,
            (__int64)&WPP_7a25c08cfd4c38e91e9430fcc1361a51_Traceguids,
            LastError);
        }
        goto LABEL_76;
      }
      if ( a1 && *(_QWORD *)(a1 + 192) )
        v16 = *(char **)(a1 + 24);
      else
        v16 = 0i64;
      if ( a1 )
      {
        v18 = *(_QWORD *)(a1 + 328);
        v19 = a1;
        if ( v18 )
          v19 = *(_QWORD *)(a1 + 328);
        if ( *(_QWORD *)(v19 + 200) )
        {
          v20 = a1;
          if ( v18 )
            v20 = *(_QWORD *)(a1 + 328);
          v17 = **(char ***)(v20 + 200);
        }
        else
        {
          v17 = (char *)L".";
        }
      }
      else
      {
        v17 = 0i64;
      }
      if ( !(unsigned int)File_CreateDatabaseFilePathEx(
                            v17,
                            v16,
                            (char *)ExistingFileName,
                            1040i64,
                            NewFileName,
                            1040i64,
                            a2) )
        goto LABEL_74;
      if ( NewFileName[0] )
      {
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x20) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          WPP_SF_SS(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0xDu,
            (__int64)&WPP_7a25c08cfd4c38e91e9430fcc1361a51_Traceguids,
            ExistingFileName,
            (__int64)NewFileName);
        }
        if ( !CopyFileTransactedW(ExistingFileName, NewFileName, 0i64, 0i64, 0i64, 1u, Transaction)
          && WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x20) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
        {
          v21 = GetLastError();
          WPP_SF_D(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0xEu,
            (__int64)&WPP_7a25c08cfd4c38e91e9430fcc1361a51_Traceguids,
            v21);
        }
      }
      if ( (int)StringCchCopyW((char *)v34, 521i64, (char *)a2) < 0
        || (int)StringCchCatW(v34, 521i64, (char *)L".old") < 0 )
      {
        goto LABEL_62;
      }
      v22 = a1 && *(_QWORD *)(a1 + 192) ? *(char **)(a1 + 24) : 0i64;
      if ( a1 )
      {
        v23 = *(_QWORD *)(a1 + 328);
        v24 = a1;
        if ( v23 )
          v24 = *(_QWORD *)(a1 + 328);
        if ( *(_QWORD *)(v24 + 200) )
        {
          if ( v23 )
            a1 = *(_QWORD *)(a1 + 328);
          v9 = **(char ***)(a1 + 200);
        }
      }
      else
      {
        v9 = 0i64;
      }
      if ( !(unsigned int)File_CreateDatabaseFilePathEx(v9, v22, (char *)FileName, 1040i64, 0i64, 0i64, v34) )
      {
LABEL_62:
        v5 = 0;
        v29 = 0;
        goto LABEL_75;
      }
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x20) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_SS(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0xFu,
          (__int64)&WPP_7a25c08cfd4c38e91e9430fcc1361a51_Traceguids,
          ExistingFileName,
          (__int64)FileName);
      }
      if ( !MoveFileTransactedW(ExistingFileName, FileName, 0i64, 0i64, 1u, Transaction) )
      {
        v25 = GetLastError();
        if ( v25 != 2 )
        {
          v26 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x20) == 0
            || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
          {
            goto LABEL_74;
          }
          v27 = 16;
          goto LABEL_73;
        }
      }
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x20) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_SS(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x11u,
          (__int64)&WPP_7a25c08cfd4c38e91e9430fcc1361a51_Traceguids,
          v37,
          (__int64)ExistingFileName);
      }
      if ( MoveFileTransactedW(v37, ExistingFileName, 0i64, 0i64, 0, Transaction) )
      {
        if ( !DeleteFileTransactedW(FileName, Transaction) )
        {
          v25 = GetLastError();
          if ( v25 != 2 )
          {
            v26 = WPP_GLOBAL_Control;
            if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x20) == 0
              || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
            {
              goto LABEL_74;
            }
            v27 = 19;
            goto LABEL_73;
          }
        }
        if ( CommitTransaction(Transaction) )
        {
          v5 = 1;
          v29 = 1;
LABEL_75:
          if ( !Transaction )
          {
LABEL_77:
            v6 = a4;
            goto LABEL_78;
          }
LABEL_76:
          CloseHandle(Transaction);
          v5 = v29;
          goto LABEL_77;
        }
        if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x20) == 0
          || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
        {
LABEL_74:
          v5 = 0;
          goto LABEL_75;
        }
        v25 = GetLastError();
        v27 = 20;
      }
      else
      {
        if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x20) == 0
          || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
        {
          goto LABEL_74;
        }
        v25 = GetLastError();
        v27 = 18;
      }
      v26 = WPP_GLOBAL_Control;
LABEL_73:
      WPP_SF_D(*((_QWORD *)v26 + 7), v27, (__int64)&WPP_7a25c08cfd4c38e91e9430fcc1361a51_Traceguids, v25);
      goto LABEL_74;
    }
    v5 = 0;
  }
LABEL_78:
  if ( (a3 & 0x10000000) != 0 )
    v5 = RpcUtil_SwitchSecurityContext(1) == 0;
  *v6 = 0i64;
  return v5;
}
