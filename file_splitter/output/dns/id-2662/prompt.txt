Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 2662
// Total lines: 384

//----- (000000014013CD78) ----------------------------------------------------
__int64 __fastcall Update_CDNSPolicy(struct _zone_info *a1, char **a2)
{
  unsigned int DNSPolicy; // edi
  unsigned int updated; // eax
  CDnsPolicy *v6; // r13
  CDnsClientSubnetRecordsTrie *v7; // rcx
  unsigned __int16 v8; // dx
  char *v9; // r9
  CDnsPolicy *Policy; // rax
  CDnsPolicy *v11; // r14
  __int64 v12; // rax
  _QWORD *v13; // rdx
  int v14; // eax
  __int64 v15; // r8
  unsigned int v16; // eax
  CDnsPolicy *v17; // rax
  CDnsPolicy *v18; // rsi
  __int64 v19; // r8
  CDnsClientSubnetRecordsTrie *v20; // rcx
  char *v21; // r9
  unsigned __int16 v22; // dx
  __int64 v23; // rcx
  __int64 v24; // rsi
  _QWORD *v25; // rax
  __int64 v26; // rcx
  _QWORD *v27; // rax
  CDnsPolicy *v28; // r13
  __int64 v29; // rcx
  __int64 v30; // r13
  _QWORD *v31; // rdx
  __int64 v32; // r8
  CDnsPolicy *v33; // rcx
  __int64 v34; // rcx
  __int64 v35; // rdi
  _QWORD *v36; // rdx
  __int64 v37; // r8
  void *v39; // [rsp+40h] [rbp-20h] BYREF
  CDnsPolicy *v40; // [rsp+48h] [rbp-18h] BYREF
  __int64 v41; // [rsp+50h] [rbp-10h]
  CDnsPolicy *v43; // [rsp+B0h] [rbp+50h] BYREF
  CDnsPolicy *v44; // [rsp+B8h] [rbp+58h] BYREF

  v39 = 0i64;
  v43 = 0i64;
  DNSPolicy = Get_DNSPolicy(*a2, (__int64)a1, (struct _DnssrvRpcPolicy **)&v39);
  if ( DNSPolicy )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      WPP_SF_Sdd(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x15u,
        (__int64)&WPP_7bc0de5581043365e853c04d44d2eaeb_Traceguids,
        (const unsigned __int16 *)*a2);
    }
    return DNSPolicy;
  }
  updated = UpdateRPCPolicy((__int64)a2, (__int64)v39, &v43);
  v6 = v43;
  DNSPolicy = updated;
  if ( updated )
  {
    v7 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      v8 = 22;
LABEL_11:
      v9 = *a2;
LABEL_98:
      WPP_SF_Sdd(
        *((_QWORD *)v7 + 7),
        v8,
        (__int64)&WPP_7bc0de5581043365e853c04d44d2eaeb_Traceguids,
        (const unsigned __int16 *)v9);
      goto LABEL_99;
    }
    goto LABEL_99;
  }
  LODWORD(v43) = Validate_PolicyData((__int64)v43, (__int64)a1);
  DNSPolicy = (unsigned int)v43;
  if ( (_DWORD)v43 )
  {
    v7 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      v9 = *(char **)v6;
      v8 = 23;
      goto LABEL_98;
    }
    goto LABEL_99;
  }
  Policy = (CDnsPolicy *)Get_Policy(*a2, (__int64)a1, &v43);
  DNSPolicy = (unsigned int)v43;
  v11 = Policy;
  v44 = Policy;
  if ( !Policy || (_DWORD)v43 )
  {
    v7 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      v8 = 24;
      v9 = *a2;
      goto LABEL_98;
    }
    goto LABEL_99;
  }
  DNSPolicy = Remove_PolicyFromMap(*a2, (__int64)a1);
  if ( DNSPolicy )
  {
    v7 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      v8 = 25;
      goto LABEL_11;
    }
LABEL_99:
    if ( DNSPolicy )
    {
LABEL_101:
      Free_RpcPolicy(v6);
      Free_RpcPolicy(v39);
      return DNSPolicy;
    }
    goto LABEL_100;
  }
  *((_DWORD *)v11 + 25) = 1;
  v12 = *((int *)v6 + 3);
  if ( a1 )
    v13 = (_QWORD *)*((_QWORD *)a1 + v12 + 32);
  else
    v13 = (_QWORD *)((char *)&g_PolicyOrder + 72 * v12);
  v14 = 0;
  v15 = *((unsigned int *)v6 + 7);
  if ( (__int64)(v13[1] - *v13) >> 3 )
    v14 = (__int64)(v13[1] - *v13) >> 3;
  v16 = v14 + 1;
  if ( v16 < (unsigned int)v15 )
  {
    DNSPolicy = 9985;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      WPP_SF_Sddd(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x1Bu, v15, *(const unsigned __int16 **)v6);
    }
    goto LABEL_74;
  }
  if ( !(_DWORD)v15 )
    *((_DWORD *)v6 + 7) = v16;
  v17 = (CDnsPolicy *)operator new(0x98ui64, (const struct std::nothrow_t *)&std::nothrow);
  if ( v17 )
    v18 = CDnsPolicy::CDnsPolicy(v17, *(char **)v6, a1);
  else
    v18 = 0i64;
  v43 = v18;
  v40 = v18;
  if ( !v18 )
  {
    DNSPolicy = 14;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      WPP_SF_SD(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x1Cu,
        (__int64)&WPP_7bc0de5581043365e853c04d44d2eaeb_Traceguids,
        *(const unsigned __int16 **)v6);
    }
    goto LABEL_74;
  }
  DNSPolicy = CDnsPolicy::AddPolicy(v18, v6);
  if ( DNSPolicy )
  {
    v20 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
    {
      goto LABEL_73;
    }
    v21 = *(char **)v6;
    v22 = 29;
  }
  else
  {
    *((_DWORD *)v18 + 25) = 1;
    if ( !(unsigned int)CDnsPolicy::IsPolicyNegativeType(v18) )
    {
      DNSPolicy = (*(__int64 (__fastcall **)(struct CDnsPolicyManager *, CDnsPolicy *, struct _zone_info *))(*(_QWORD *)g_DnsPolicyManager + 8i64))(
                    g_DnsPolicyManager,
                    v43,
                    a1);
      if ( DNSPolicy )
      {
        v24 = g_FailedPolicyList;
        v25 = std::_List_val<CDNSPolicyCriteria *>::_Buynode(
                v23,
                g_FailedPolicyList,
                *(_QWORD *)(g_FailedPolicyList + 8),
                &v40);
        v19 = (__int64)v25;
        if ( qword_1401B9598 == 0x1FFFFFFFFFFFFFFEi64 )
          std::_Xlength_error("list<T> too long");
        ++qword_1401B9598;
        *(_QWORD *)(v24 + 8) = v25;
        *(_QWORD *)v25[1] = v25;
        v20 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) == 0
          || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
        {
          goto LABEL_73;
        }
        v22 = 30;
        v21 = *a2;
        goto LABEL_72;
      }
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_SD(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x1Fu,
          (__int64)&WPP_7bc0de5581043365e853c04d44d2eaeb_Traceguids,
          (const unsigned __int16 *)*a2);
      }
    }
    DNSPolicy = AddPolicyToRegistry((__int64)a1, (__int64)v6, 1);
    if ( DNSPolicy )
    {
      v41 = g_FailedPolicyList;
      v27 = std::_List_val<CDNSPolicyCriteria *>::_Buynode(
              v26,
              g_FailedPolicyList,
              *(_QWORD *)(g_FailedPolicyList + 8),
              &v40);
      v19 = (__int64)v27;
      if ( qword_1401B9598 == 0x1FFFFFFFFFFFFFFEi64 )
        std::_Xlength_error("list<T> too long");
      ++qword_1401B9598;
      *(_QWORD *)(v41 + 8) = v27;
      *(_QWORD *)v27[1] = v27;
      v20 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
      {
        goto LABEL_73;
      }
      v22 = 32;
    }
    else
    {
      DNSPolicy = Add_PolicyToMap((const void **)v43, (__int64)a1);
      if ( !DNSPolicy )
      {
        v33 = v44;
        *((_DWORD *)v43 + 25) = 0;
        if ( !(unsigned int)CDnsPolicy::IsPolicyNegativeType(v33) )
        {
          DNSPolicy = (*(__int64 (__fastcall **)(struct CDnsPolicyManager *, CDnsPolicy *, struct _zone_info *))(*(_QWORD *)g_DnsPolicyManager + 16i64))(
                        g_DnsPolicyManager,
                        v44,
                        a1);
          if ( DNSPolicy )
          {
            v35 = g_FailedPolicyList;
            v36 = std::_List_val<CDNSPolicyCriteria *>::_Buynode(
                    v34,
                    g_FailedPolicyList,
                    *(_QWORD *)(g_FailedPolicyList + 8),
                    &v44);
            if ( qword_1401B9598 == 0x1FFFFFFFFFFFFFFEi64 )
              std::_Xlength_error("list<T> too long");
            ++qword_1401B9598;
            *(_QWORD *)(v35 + 8) = v36;
            *(_QWORD *)v36[1] = v36;
            if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
              && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
            {
              WPP_SF_Sdd(
                *((_QWORD *)WPP_GLOBAL_Control + 7),
                0x22u,
                (__int64)&WPP_7bc0de5581043365e853c04d44d2eaeb_Traceguids,
                (const unsigned __int16 *)*a2);
            }
            DNSPolicy = 0;
            goto LABEL_100;
          }
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            WPP_SF_SD(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x23u,
              (__int64)&WPP_7bc0de5581043365e853c04d44d2eaeb_Traceguids,
              (const unsigned __int16 *)*a2);
          }
        }
        LogUpdatePolicyEvent((__int64)a1, (__int64)v39, (__int64)v6);
        CDnsPolicy::DeletePolicy((const void **)v44, 1, v37);
        CDnsPolicy::`scalar deleting destructor'(v44);
LABEL_100:
        DnsTelemetryPolicyInfo((__int64)v39, 0);
        DnsTelemetryPolicyInfo((__int64)v6, 1);
        goto LABEL_101;
      }
      v20 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
      {
        goto LABEL_73;
      }
      v22 = 33;
    }
    v21 = *a2;
  }
LABEL_72:
  WPP_SF_Sdd(
    *((_QWORD *)v20 + 7),
    v22,
    (__int64)&WPP_7bc0de5581043365e853c04d44d2eaeb_Traceguids,
    (const unsigned __int16 *)v21);
LABEL_73:
  CDnsPolicy::DeletePolicy((const void **)v43, 1, v19);
  CDnsPolicy::`scalar deleting destructor'(v43);
LABEL_74:
  Free_RpcPolicy(v6);
  Free_RpcPolicy(v39);
  v28 = v44;
  LODWORD(v43) = Add_PolicyToMap((const void **)v44, (__int64)a1);
  if ( (_DWORD)v43 )
  {
    v30 = g_FailedPolicyList;
    v31 = std::_List_val<CDNSPolicyCriteria *>::_Buynode(
            v29,
            g_FailedPolicyList,
            *(_QWORD *)(g_FailedPolicyList + 8),
            &v44);
    if ( qword_1401B9598 == 0x1FFFFFFFFFFFFFFEi64 )
      std::_Xlength_error("list<T> too long");
    ++qword_1401B9598;
    *(_QWORD *)(v30 + 8) = v31;
    *(_QWORD *)v31[1] = v31;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      WPP_SF_Sddd(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x24u, v32, (const unsigned __int16 *)*a2);
    }
  }
  else
  {
    *((_DWORD *)v28 + 25) = 0;
  }
  return DNSPolicy;
}
// 14013D137: variable 'v23' is possibly undefined
// 14013D238: variable 'v26' is possibly undefined
// 14013D31A: variable 'v19' is possibly undefined
// 14013D365: variable 'v29' is possibly undefined
// 14013D3EF: variable 'v32' is possibly undefined
// 14013D451: variable 'v34' is possibly undefined
// 14013D536: variable 'v37' is possibly undefined
// 140185140: using guessed type __int64 (__fastcall *_guard_dispatch_icall_fptr)(_QWORD, _QWORD);
// 1401B91C0: using guessed type struct CDnsPolicyManager *g_DnsPolicyManager;
// 1401B9590: using guessed type __int64 g_FailedPolicyList;
// 1401B9598: using guessed type __int64 qword_1401B9598;
##############################
Role: Let's assume that you are an advanced reverse engineer and you are reverse engineering a network driver using IDA Pro, and you are also familiar with the RFC documentation. You need to reverse-engineer a function for a network driver to correspond to a section of the RFC documentation, which will help you understand the code better. The driver you're reversing is Schannel.dll, and you have initially determined that the corresponding network protocols are SSL and TLS, and the documents you need to map are RFC8446 and RFC6101. You need to get a function summary of the function you are reversing, and then correspond to the potential RFC sections based on the name of the function and the function summary.
Function Background: The function is reverse engineered from the driver file Schannel.dll on Windows platform. Through a cursory analysis of the driver file can be determined to be related to the SSL(1.3), TLS(3.0) protocol, that is, with RFC8446, RFC6101 strong correlation.

Output Function Summary: Summarizes the function's functionality with several phrases instead of sentences, focuses on covering the function's control flow information, and highlights the protocol function points implemented by the function. Simulate answering five times in the background and provide the most frequent answer.

Retrieve document sections: giving matches for document sections(FunctionMatchRFCResult) that the code may related to. NOTE if the code is only business related(i.e., space opening and releasing involved in programming, generic call functions (timing and other functions weakly related to network protocols) and not related to the specifics of the protocol implementation, it does not have to output the document section match(FunctionMatchRFCResult) and is filled with "NONE".

Retrieve document sections Thinking Chain: The function code is matched with the RFC document section, and the thinking chain is provided to help you solve the problem better:
	1. Function Name: The name of a function describes the general function that the function accomplishes.
	2. Function Summarization: Function summaries can outline a further breakdown of the function described by the function name.
	3. Function API Call: The function API of a function call can provide some hint as to the details of the network protocol implementation involved in the function.
	4. Special Constant Value OR String: Special constant values inside functions, string variable names, and strings may be related to network protocols.
	5. Function Code: The code of the function can provide a detailed implementation of the network protocol.
Generate Function Information Collection with JSON Format:

{
	"FunctionIndex": "(FILL WITH "File count" with less than four bits are indexed with zeros to make up the four bits.)",
	"FunctionName": "(Full Function Code Name)",
	"FunctionSummarization": [
		"(Function Summary Phrase1)",
		"(Function Summary Phrase2)",
		"(...)"
	],
	"FunctionMatchRFCResult": [
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 1)",
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 2)",
		"(...)"
	],
}

ATTENTION: Remember YOU MUST ONLY output the Function Information Collection result.
