Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 2700
// Total lines: 193

//----- (0000000140140E54) ----------------------------------------------------
_QWORD *__fastcall std::_Tree<std::_Tmap_traits<std::wstring,CDNSClientSubnetRecord *,CDnsCompareName,std::allocator<std::pair<std::wstring const,CDNSClientSubnetRecord *>>,0>>::_Insert(
        __int64 a1,
        _QWORD *a2,
        char a3,
        _QWORD *a4,
        _QWORD *a5)
{
  __int64 v6; // rax
  __int64 v7; // rax
  _QWORD *v8; // rdx
  __int64 *v9; // rax
  __int64 *v10; // r9
  __int64 *v11; // rcx
  _QWORD *v12; // rcx
  _QWORD *v13; // rax
  _QWORD *v14; // rcx
  _QWORD *v15; // r9
  __int64 v16; // rax
  _QWORD *v17; // rax
  __int64 v18; // rcx
  __int64 v19; // rax
  _QWORD *v20; // rax
  _QWORD *v21; // rax
  __int64 v22; // rax
  __int64 v23; // rcx
  _QWORD *result; // rax
  __int64 v25; // rax
  __int64 v26; // rax
  __int64 v27; // rcx
  __int64 v28; // rcx

  if ( (unsigned __int64)qword_1401B93F0 >= 0x555555555555554i64 )
  {
    v25 = std::_Tree_val<std::_Tmap_traits<std::wstring,CDnsPolicy_CriteriaNode *,bool (*)(std::wstring const &,std::wstring const &),std::allocator<std::pair<std::wstring const,CDnsPolicy_CriteriaNode *>>,0>>::_Myval((__int64)a5);
    v26 = std::streambuf::setbuf(v25);
    CDnsPolicy_CriteriaTree::GetCriteriaNodes(v27, v26);
    std::allocator<DnsSign::CDnsKeyPair *>::deallocate(v28, a5);
    std::_Xlength_error("map/set<T> too long");
  }
  ++qword_1401B93F0;
  a5[1] = a4;
  if ( a4 == (_QWORD *)qword_1401B93E8 )
  {
    *(_QWORD *)(qword_1401B93E8 + 8) = a5;
    *(_QWORD *)qword_1401B93E8 = a5;
    v6 = qword_1401B93E8;
LABEL_8:
    *(_QWORD *)(v6 + 16) = a5;
    goto LABEL_9;
  }
  if ( a3 )
  {
    *a4 = a5;
    if ( a4 == *(_QWORD **)qword_1401B93E8 )
      *(_QWORD *)qword_1401B93E8 = a5;
    goto LABEL_9;
  }
  a4[2] = a5;
  v6 = qword_1401B93E8;
  if ( a4 == *(_QWORD **)(qword_1401B93E8 + 16) )
    goto LABEL_8;
LABEL_9:
  v7 = a5[1];
  v8 = a5;
  while ( !*(_BYTE *)(v7 + 72) )
  {
    v9 = (__int64 *)v8[1];
    v10 = (__int64 *)v9[1];
    v11 = (__int64 *)*v10;
    if ( v9 == (__int64 *)*v10 )
    {
      v11 = (__int64 *)v10[2];
      if ( !*((_BYTE *)v11 + 72) )
        goto LABEL_30;
      if ( v8 == (_QWORD *)v9[2] )
      {
        v12 = (_QWORD *)v9[2];
        v8 = (_QWORD *)v8[1];
        v9[2] = *v12;
        if ( !*(_BYTE *)(*v12 + 73i64) )
          *(_QWORD *)(*v12 + 8i64) = v9;
        v12[1] = v9[1];
        if ( v8 == *(_QWORD **)(qword_1401B93E8 + 8) )
        {
          *(_QWORD *)(qword_1401B93E8 + 8) = v12;
        }
        else
        {
          v13 = (_QWORD *)v8[1];
          if ( v8 == (_QWORD *)*v13 )
            *v13 = v12;
          else
            v13[2] = v12;
        }
        *v12 = v8;
        v8[1] = v12;
      }
      *(_BYTE *)(v8[1] + 72i64) = 1;
      *(_BYTE *)(*(_QWORD *)(v8[1] + 8i64) + 72i64) = 0;
      v14 = *(_QWORD **)(v8[1] + 8i64);
      v15 = (_QWORD *)*v14;
      *v14 = *(_QWORD *)(*v14 + 16i64);
      v16 = v15[2];
      if ( !*(_BYTE *)(v16 + 73) )
        *(_QWORD *)(v16 + 8) = v14;
      v15[1] = v14[1];
      if ( v14 == *(_QWORD **)(qword_1401B93E8 + 8) )
      {
        *(_QWORD *)(qword_1401B93E8 + 8) = v15;
      }
      else
      {
        v17 = (_QWORD *)v14[1];
        if ( v14 == (_QWORD *)v17[2] )
          v17[2] = v15;
        else
          *v17 = v15;
      }
      v15[2] = v14;
    }
    else
    {
      if ( !*((_BYTE *)v11 + 72) )
      {
LABEL_30:
        *((_BYTE *)v9 + 72) = 1;
        *((_BYTE *)v11 + 72) = 1;
        *(_BYTE *)(*(_QWORD *)(v8[1] + 8i64) + 72i64) = 0;
        v8 = *(_QWORD **)(v8[1] + 8i64);
        goto LABEL_49;
      }
      if ( v8 == (_QWORD *)*v9 )
      {
        v18 = *v9;
        v8 = (_QWORD *)v8[1];
        *v9 = *(_QWORD *)(*v9 + 16);
        v19 = *(_QWORD *)(v18 + 16);
        if ( !*(_BYTE *)(v19 + 73) )
          *(_QWORD *)(v19 + 8) = v8;
        *(_QWORD *)(v18 + 8) = v8[1];
        if ( v8 == *(_QWORD **)(qword_1401B93E8 + 8) )
        {
          *(_QWORD *)(qword_1401B93E8 + 8) = v18;
        }
        else
        {
          v20 = (_QWORD *)v8[1];
          if ( v8 == (_QWORD *)v20[2] )
            v20[2] = v18;
          else
            *v20 = v18;
        }
        *(_QWORD *)(v18 + 16) = v8;
        v8[1] = v18;
      }
      *(_BYTE *)(v8[1] + 72i64) = 1;
      *(_BYTE *)(*(_QWORD *)(v8[1] + 8i64) + 72i64) = 0;
      v14 = *(_QWORD **)(v8[1] + 8i64);
      v15 = (_QWORD *)v14[2];
      v14[2] = *v15;
      if ( !*(_BYTE *)(*v15 + 73i64) )
        *(_QWORD *)(*v15 + 8i64) = v14;
      v15[1] = v14[1];
      if ( v14 == *(_QWORD **)(qword_1401B93E8 + 8) )
      {
        *(_QWORD *)(qword_1401B93E8 + 8) = v15;
      }
      else
      {
        v21 = (_QWORD *)v14[1];
        if ( v14 == (_QWORD *)*v21 )
          *v21 = v15;
        else
          v21[2] = v15;
      }
      *v15 = v14;
    }
    v14[1] = v15;
LABEL_49:
    v7 = v8[1];
  }
  v22 = qword_1401B93E8;
  *a2 = a5;
  v23 = *(_QWORD *)(v22 + 8);
  result = a2;
  *(_BYTE *)(v23 + 72) = 1;
  return result;
}
// 1401410E7: variable 'v27' is possibly undefined
// 1401410F1: variable 'v28' is possibly undefined
// 1401B93E8: using guessed type __int64 qword_1401B93E8;
// 1401B93F0: using guessed type __int64 qword_1401B93F0;
