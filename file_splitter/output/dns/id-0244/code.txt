Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 244
// Total lines: 354

//----- (000000014001FFC0) ----------------------------------------------------
__int64 __fastcall File_WriteZoneToFile(__int64 a1, char *a2, int a3)
{
  HANDLE v3; // r15
  unsigned int v4; // r12d
  _QWORD *v5; // r13
  char *v6; // r14
  const wchar_t *v8; // rsi
  const unsigned __int16 *v9; // rdi
  __int64 v10; // rax
  __int64 v11; // rax
  const wchar_t *v12; // r8
  const unsigned __int16 *v13; // r9
  __int64 v14; // rcx
  __int64 v15; // rax
  __int64 v16; // rax
  __int64 v17; // rcx
  __int64 v18; // rax
  __int64 v19; // rax
  const wchar_t *v20; // r9
  __int64 v21; // rcx
  __int64 v22; // rax
  __int64 v23; // rax
  __int64 v24; // rdx
  __int64 v25; // rcx
  __int64 v26; // rax
  __int64 v27; // rax
  const wchar_t *v28; // r8
  const wchar_t *v29; // rcx
  BOOL v30; // eax
  void *v31; // rcx
  __int64 v32; // r8
  __int64 v33; // rcx
  __int64 v34; // rax
  __int64 v35; // rax
  __int64 v36; // rcx
  __int64 v37; // rax
  __int64 v38; // rax
  __int64 v40; // [rsp+28h] [rbp-71h]
  __int16 v41; // [rsp+40h] [rbp-59h] BYREF
  char v42; // [rsp+42h] [rbp-57h]
  int v43; // [rsp+48h] [rbp-51h] BYREF
  HANDLE v44; // [rsp+50h] [rbp-49h] BYREF
  HANDLE v45; // [rsp+58h] [rbp-41h] BYREF
  int v46; // [rsp+60h] [rbp-39h]
  _QWORD *v47; // [rsp+68h] [rbp-31h]
  _QWORD *v48; // [rsp+70h] [rbp-29h]
  _QWORD *v49; // [rsp+78h] [rbp-21h]
  __int64 v50; // [rsp+80h] [rbp-19h]
  __int128 v51; // [rsp+90h] [rbp-9h] BYREF
  unsigned __int16 *v52[3]; // [rsp+A0h] [rbp+7h] BYREF

  v3 = 0i64;
  v43 = a3;
  v4 = 0;
  v44 = 0i64;
  v5 = 0i64;
  v6 = a2;
  if ( !a2 )
    v6 = *(char **)(a1 + 144);
  v8 = L".";
  v9 = L"Default";
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x20) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    if ( !a1 || (v10 = *(_QWORD *)(a1 + 328)) == 0 )
      v10 = a1;
    if ( *(_QWORD *)(v10 + 200) )
    {
      if ( !a1 || (v11 = *(_QWORD *)(a1 + 328)) == 0 )
        v11 = a1;
      v12 = **(const wchar_t ***)(v11 + 200);
    }
    else
    {
      v12 = L".";
    }
    if ( !a1 || (v13 = *(const unsigned __int16 **)(a1 + 192)) == 0i64 )
      v13 = L"Default";
    WPP_SF_SsSS(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x15u,
      (__int64)v12,
      v13,
      *(_QWORD *)(a1 + 16),
      (__int64)v12,
      (__int64)v6);
  }
  if ( *(_DWORD *)(a1 + 372) || a1 != g_pCacheZone || (unsigned int)Zone_VerifyRootHintsBeforeWrite(a1) )
  {
    if ( *(_DWORD *)(a1 + 372) == 4 )
    {
      v4 = 1;
      goto LABEL_118;
    }
    if ( !v6 )
      goto LABEL_118;
    if ( (unsigned int)Zone_LockForReadEx(a1, 4096, 0xBB8u) )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x20) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        v14 = *(_QWORD *)(a1 + 328);
        v15 = a1;
        if ( v14 )
          v15 = *(_QWORD *)(a1 + 328);
        if ( *(_QWORD *)(v15 + 200) )
        {
          v16 = a1;
          if ( v14 )
            v16 = *(_QWORD *)(a1 + 328);
          v8 = **(const wchar_t ***)(v16 + 200);
        }
        if ( *(_QWORD *)(a1 + 192) )
          v9 = *(const unsigned __int16 **)(a1 + 192);
        WPP_SF_SsS(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x16u,
          (__int64)WPP_GLOBAL_Control,
          v9,
          *(_QWORD *)(a1 + 16),
          (__int64)v8);
      }
      v4 = 0;
      goto LABEL_118;
    }
    if ( *(_QWORD *)(a1 + 40) && (*(_QWORD *)(a1 + 336) || !*(_DWORD *)(a1 + 372)) )
    {
      v5 = Mem_Alloc(0x80000u, 22i64, "ds\\dns\\server\\server\\dfwrite.c", 831);
      if ( v5 )
      {
        v44 = File_OpenDatabaseFile(a1, v6, &v43);
        v3 = v44;
        if ( !v44 )
        {
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x20) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
          {
            v17 = *(_QWORD *)(a1 + 328);
            v18 = a1;
            if ( v17 )
              v18 = *(_QWORD *)(a1 + 328);
            if ( *(_QWORD *)(v18 + 200) )
            {
              v19 = a1;
              if ( v17 )
                v19 = *(_QWORD *)(a1 + 328);
              v8 = **(const wchar_t ***)(v19 + 200);
            }
            if ( *(_QWORD *)(a1 + 192) )
              v9 = *(const unsigned __int16 **)(a1 + 192);
            WPP_SF_SsS(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x18u,
              (__int64)WPP_GLOBAL_Control,
              v9,
              *(_QWORD *)(a1 + 16),
              (__int64)v8);
          }
          goto LABEL_117;
        }
        v46 = 0x80000;
        v50 = 0x80000i64;
        v48 = v5 + 0x10000;
        v47 = v5;
        v49 = v5;
        v45 = v44;
        if ( *(_DWORD *)(a1 + 372) )
        {
          v20 = L"Default";
          if ( *(_QWORD *)(a1 + 192) )
            v20 = *(const wchar_t **)(a1 + 192);
          LODWORD(v40) = *(_DWORD *)(a1 + 512);
          FormattedWriteToFileBuffer(
            (__int64)&v45,
            ";\r\n;  Database file %s for %ws zone scope in zone %s.\r\n;      Zone version:  %lu\r\n;\r\n\r\n",
            *(_QWORD *)(a1 + 136),
            v20,
            *(_QWORD *)(a1 + 16),
            v40);
          v4 = zoneTraverseAndWriteToFile(&v45, a1, *(_QWORD *)(a1 + 40));
          if ( !v4 )
          {
            if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x20) != 0
              && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
            {
              v21 = *(_QWORD *)(a1 + 328);
              v22 = a1;
              if ( v21 )
                v22 = *(_QWORD *)(a1 + 328);
              if ( *(_QWORD *)(v22 + 200) )
              {
                v23 = a1;
                if ( v21 )
                  v23 = *(_QWORD *)(a1 + 328);
                v8 = **(const wchar_t ***)(v23 + 200);
              }
              if ( *(_QWORD *)(a1 + 192) )
                v9 = *(const unsigned __int16 **)(a1 + 192);
              WPP_SF_SsSS(
                *((_QWORD *)WPP_GLOBAL_Control + 7),
                0x19u,
                (__int64)WPP_GLOBAL_Control,
                v9,
                *(_QWORD *)(a1 + 16),
                (__int64)v8,
                (__int64)v6);
            }
            goto LABEL_115;
          }
          WriteBufferToFile((__int64)&v45);
          v52[0] = (unsigned __int16 *)*(unsigned int *)(a1 + 512);
          v52[1] = *(unsigned __int16 **)(a1 + 24);
          v41 = 260;
          v42 = 1;
          v52[2] = (unsigned __int16 *)v6;
          v51 = DNS_EVENT_ZONE_WRITE_COMPLETED;
          Eventlog_LogEvent((__int64)&v51, v24, 3u, v52, (unsigned __int8 *)&v41, 0, 0, 0i64);
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x20) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            v25 = *(_QWORD *)(a1 + 328);
            v26 = a1;
            if ( v25 )
              v26 = *(_QWORD *)(a1 + 328);
            if ( *(_QWORD *)(v26 + 200) )
            {
              v27 = a1;
              if ( v25 )
                v27 = *(_QWORD *)(a1 + 328);
              v28 = **(const wchar_t ***)(v27 + 200);
            }
            else
            {
              v28 = L".";
            }
            v29 = L"Default";
            if ( *(_QWORD *)(a1 + 192) )
              v29 = *(const wchar_t **)(a1 + 192);
            WPP_SF_DSsSS(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              (__int64)WPP_GLOBAL_Control,
              (__int64)v28,
              *(_DWORD *)(a1 + 512),
              (__int64)v29,
              *(_QWORD *)(a1 + 16),
              (__int64)v28,
              (__int64)v6);
          }
          *(_DWORD *)(a1 + 396) &= ~0x200u;
        }
        else
        {
          FormattedWriteToFileBuffer(
            (__int64)&v45,
            "\r\n"
            ";\r\n"
            ";  Root Name Server Hints File:\r\n"
            ";\r\n"
            ";\tThese entries enable the DNS server to locate the root name servers\r\n"
            ";\t(the DNS servers authoritative for the root zone).\r\n"
            ";\tFor historical reasons this is often referred to as the\r\n"
            ";\t\"Cache File\"\r\n"
            ";\r\n"
            "\r\n");
          if ( (unsigned int)writeDelegation(&v45, a1, *(__int64 **)(a1 + 48)) )
            *(_DWORD *)(a1 + 396) &= ~0x200u;
          WriteBufferToFile((__int64)&v45);
        }
        v30 = File_CloseDatabaseFile(a1, (unsigned __int16 *)v6, v43, &v44);
        v31 = *(void **)(a1 + 976);
        v4 = v30;
        if ( v31 )
        {
          *(_QWORD *)(a1 + 976) = 0i64;
          CloseHandle(v31);
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x20) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            v33 = *(_QWORD *)(a1 + 328);
            v34 = a1;
            if ( v33 )
              v34 = *(_QWORD *)(a1 + 328);
            if ( *(_QWORD *)(v34 + 200) )
            {
              v35 = a1;
              if ( v33 )
                v35 = *(_QWORD *)(a1 + 328);
              v8 = **(const wchar_t ***)(v35 + 200);
            }
            if ( *(_QWORD *)(a1 + 192) )
              v9 = *(const unsigned __int16 **)(a1 + 192);
            WPP_SF_SSsS(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              (__int64)WPP_GLOBAL_Control,
              v32,
              *(const unsigned __int16 **)(a1 + 968),
              (__int64)v9,
              *(_QWORD *)(a1 + 16),
              (__int64)v8);
          }
          goto LABEL_117;
        }
        v3 = v44;
LABEL_115:
        if ( v3 )
          File_CloseDatabaseFile(a1, 0i64, v43, &v44);
      }
    }
    else if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
           && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x20) != 0
           && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      v36 = *(_QWORD *)(a1 + 328);
      v37 = a1;
      if ( v36 )
        v37 = *(_QWORD *)(a1 + 328);
      if ( *(_QWORD *)(v37 + 200) )
      {
        v38 = a1;
        if ( v36 )
          v38 = *(_QWORD *)(a1 + 328);
        v8 = **(const wchar_t ***)(v38 + 200);
      }
      if ( *(_QWORD *)(a1 + 192) )
        v9 = *(const unsigned __int16 **)(a1 + 192);
      WPP_SF_SsS(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x17u,
        (__int64)WPP_GLOBAL_Control,
        v9,
        *(_QWORD *)(a1 + 16),
        (__int64)v8);
      goto LABEL_115;
    }
LABEL_117:
    Zone_UnlockAfterReadEx(a1, 4096);
  }
LABEL_118:
  Mem_Free(v5, 0x80000i64, 22i64, (__int64)"ds\\dns\\server\\server\\dfwrite.c", 1007);
  return v4;
}
// 140020324: variable 'v40' is possibly undefined
// 14002043A: variable 'v24' is possibly undefined
// 14002058A: variable 'v32' is possibly undefined
// 140186038: using guessed type __int128 DNS_EVENT_ZONE_WRITE_COMPLETED;
// 140188260: using guessed type wchar_t aDefault_1[8];
// 1401EC628: using guessed type __int64 g_pCacheZone;
