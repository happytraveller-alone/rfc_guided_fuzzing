Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 1651
// Total lines: 187

//----- (00000001400D18D0) ----------------------------------------------------
__int64 __fastcall Zone_WriteAndLoadScopes(__int64 *a1, unsigned int a2, int a3, int a4, int a5)
{
  unsigned int v7; // edi
  CDnsClientSubnetRecordsTrie *v8; // rcx
  unsigned __int16 v9; // dx
  __int64 v10; // rcx
  __int64 NextElement_ScopeMap; // rbx
  int v12; // r15d
  __int64 v13; // rdx
  __int64 v14; // rcx
  __int64 v15; // rax
  __int64 v16; // rax
  const wchar_t *v17; // rcx
  __int64 v18; // rdx
  _QWORD *v19; // rax
  const wchar_t *v20; // rcx
  __int64 v21; // rdx
  __int64 v22; // r8
  int v23; // r9d
  unsigned int v25; // [rsp+40h] [rbp-21h] BYREF
  unsigned int v26; // [rsp+44h] [rbp-1Dh] BYREF
  int v27; // [rsp+48h] [rbp-19h]
  __int128 v28; // [rsp+50h] [rbp-11h] BYREF
  unsigned __int16 *v29; // [rsp+60h] [rbp-1h] BYREF
  __int64 v30; // [rsp+68h] [rbp+7h]
  const wchar_t *v31; // [rsp+70h] [rbp+Fh]
  const wchar_t *v32; // [rsp+78h] [rbp+17h]

  v27 = a4;
  v25 = a2;
  v7 = 0;
  if ( !a1 )
  {
    v7 = 87;
    v8 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
    {
      goto LABEL_57;
    }
    v9 = 36;
    goto LABEL_6;
  }
  if ( !a1[23] )
    goto LABEL_57;
  v10 = a1[21];
  v26 = -1;
  if ( (unsigned int)acquireRead(v10, 0x2710u, &v26) == -1 )
  {
    v7 = 9607;
    v8 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
    {
      goto LABEL_57;
    }
    v9 = 37;
LABEL_6:
    WPP_SF_D(*((_QWORD *)v8 + 7), v9, (__int64)&WPP_5efa35e0870730ffd13051b9da022308_Traceguids, v7);
    goto LABEL_57;
  }
  NextElement_ScopeMap = Get_NextElement_ScopeMap(a1[20], 0i64, 0i64);
  if ( !NextElement_ScopeMap )
    goto LABEL_56;
  while ( 1 )
  {
    v12 = 1;
    v7 = Zone_LockForWriteEx(NextElement_ScopeMap, 1, 0x2710u, (__int64)"ds\\dns\\server\\server\\zonerpc.c", 177);
    if ( !v7 )
      break;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      WPP_SF_SD(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x26u,
        (__int64)&WPP_5efa35e0870730ffd13051b9da022308_Traceguids,
        *(const unsigned __int16 **)(NextElement_ScopeMap + 192));
    }
    if ( !a5 )
      goto LABEL_56;
LABEL_53:
    NextElement_ScopeMap = Get_NextElement_ScopeMap(a1[20], *(_QWORD *)(NextElement_ScopeMap + 192), 0i64);
    if ( !NextElement_ScopeMap )
      goto LABEL_56;
  }
  if ( a3 && (*(_DWORD *)(NextElement_ScopeMap + 396) & 0x200) != 0 )
    Zone_GetZoneInfoFromResourceRecords(NextElement_ScopeMap);
  if ( (*(_BYTE *)(NextElement_ScopeMap + 388) & 1) == 0
    && (*(_DWORD *)(NextElement_ScopeMap + 396) & 0x200) != 0
    && !(unsigned int)File_WriteZoneToFile(NextElement_ScopeMap, 0i64, v27 != 0 ? 0x10000000 : 0) )
  {
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) == 0 )
    {
      v12 = 0;
    }
    else
    {
      v12 = 0;
      if ( *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
        WPP_SF_Ssd(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x27u,
          (__int64)&WPP_5efa35e0870730ffd13051b9da022308_Traceguids,
          *(const unsigned __int16 **)(NextElement_ScopeMap + 192),
          *(_QWORD *)(NextElement_ScopeMap + 16));
    }
    v14 = *(_QWORD *)(NextElement_ScopeMap + 328);
    v29 = *(unsigned __int16 **)(NextElement_ScopeMap + 192);
    v30 = *(_QWORD *)(NextElement_ScopeMap + 24);
    v31 = *(const wchar_t **)(NextElement_ScopeMap + 144);
    v15 = NextElement_ScopeMap;
    if ( v14 )
      v15 = v14;
    if ( *(_QWORD *)(v15 + 200) )
    {
      v16 = NextElement_ScopeMap;
      if ( v14 )
        v16 = v14;
      v17 = **(const wchar_t ***)(v16 + 200);
    }
    else
    {
      v17 = L".";
    }
    v32 = v17;
    v28 = DNS_EVENT_ZONESCOPE_WRITEBACK_FAILED;
    v7 = 9957;
    Eventlog_LogEvent((__int64)&v28, v13, 4u, &v29, 0i64, 9957, 0, 0i64);
    if ( !a5 )
    {
      Zone_UnlockAfterWriteEx(NextElement_ScopeMap, 1, (__int64)"ds\\dns\\server\\server\\zonerpc.c", 213);
      goto LABEL_56;
    }
    goto LABEL_51;
  }
  if ( !v25 )
    goto LABEL_51;
  v7 = Zone_Load(NextElement_ScopeMap, 0);
  if ( !v7 )
    goto LABEL_51;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
  {
    WPP_SF_SD(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x28u,
      (__int64)&WPP_5efa35e0870730ffd13051b9da022308_Traceguids,
      *(const unsigned __int16 **)(NextElement_ScopeMap + 192));
  }
  v29 = *(unsigned __int16 **)(NextElement_ScopeMap + 192);
  v30 = *(_QWORD *)(NextElement_ScopeMap + 24);
  v19 = (_QWORD *)a1[25];
  v20 = v19 ? (const wchar_t *)*v19 : L".";
  v31 = v20;
  v28 = DNS_EVENT_LOAD_ZONESCOPE_FAILED;
  Eventlog_LogEvent((__int64)&v28, v18, 3u, &v29, 0i64, v7, 0, 0i64);
  if ( a5 )
  {
LABEL_51:
    Zone_UnlockAfterWriteEx(NextElement_ScopeMap, 1, (__int64)"ds\\dns\\server\\server\\zonerpc.c", 246);
    if ( v12 )
      Xfr_SendNotify(NextElement_ScopeMap, v21, v22, v23);
    goto LABEL_53;
  }
  Zone_UnlockAfterWriteEx(NextElement_ScopeMap, 1, (__int64)"ds\\dns\\server\\server\\zonerpc.c", 236);
LABEL_56:
  v25 = -1;
  releaseRead(a1[21], &v25, 1);
LABEL_57:
  if ( a5 )
    return 0;
  return v7;
}
// 1400D1B86: variable 'v13' is possibly undefined
// 1400D1C68: variable 'v18' is possibly undefined
// 1400D1C95: variable 'v21' is possibly undefined
// 1400D1C95: variable 'v22' is possibly undefined
// 1400D1C95: variable 'v23' is possibly undefined
// 1401867E8: using guessed type __int128 DNS_EVENT_ZONESCOPE_WRITEBACK_FAILED;
// 1401873E0: using guessed type __int128 DNS_EVENT_LOAD_ZONESCOPE_FAILED;
