Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 1159
// Total lines: 492

//----- (0000000140094F04) ----------------------------------------------------
__int64 __fastcall addNodeToRpcBuffer(__int64 a1, __int64 a2, __int64 a3, __int16 a4, int a5, int a6)
{
  __int64 v6; // rbx
  __int64 v7; // rdi
  unsigned __int64 v8; // rsi
  __int64 v9; // rcx
  __int64 result; // rax
  CDnsClientSubnetRecordsTrie *v11; // r10
  int v12; // eax
  CDnsClientSubnetRecordsTrie *v13; // rcx
  int v14; // eax
  int v15; // eax
  __int64 v16; // r8
  _BYTE *v17; // rsi
  _BYTE *v18; // rax
  DWORD LastError; // eax
  unsigned __int64 v20; // rsi
  unsigned __int16 v21; // dx
  __int64 v22; // rsi
  __int64 v23; // r8
  __int64 v24; // rsi
  unsigned int v25; // edi
  void *v26; // rax
  __int64 v27; // rdx
  __int64 v28; // r8
  char v29; // al
  int v30; // ecx
  bool v31; // zf
  __int64 v32; // r8
  bool v33; // zf
  int v34; // eax
  _BYTE *v35; // rsi
  _BYTE *v36; // rax
  _BYTE *v37; // rcx
  char v38; // al
  __int64 v39; // rax
  __int64 *v40; // rax
  int i; // edi
  int v42; // eax
  char *v43; // rax
  int v44; // [rsp+50h] [rbp-B0h] BYREF
  __int16 v45; // [rsp+54h] [rbp-ACh]
  int v46; // [rsp+58h] [rbp-A8h] BYREF
  unsigned int v47; // [rsp+5Ch] [rbp-A4h] BYREF
  __int64 v48; // [rsp+60h] [rbp-A0h]
  __int64 v49; // [rsp+68h] [rbp-98h]
  _BYTE *v50; // [rsp+70h] [rbp-90h]
  unsigned int v51; // [rsp+78h] [rbp-88h]
  __int64 v52; // [rsp+80h] [rbp-80h]
  __int64 *v53; // [rsp+88h] [rbp-78h]
  __int64 v54; // [rsp+90h] [rbp-70h]
  __int64 v55[100]; // [rsp+A0h] [rbp-60h] BYREF

  v6 = *(_QWORD *)(a1 + 32);
  v7 = a3;
  v8 = *(_QWORD *)(a1 + 24);
  v54 = a3;
  v45 = a4;
  v48 = a2;
  v52 = a1;
  v44 = 0;
  v46 = 0;
  if ( a2 )
  {
    v9 = a2;
    if ( *(_QWORD *)(a2 + 328) )
      v9 = *(_QWORD *)(a2 + 328);
    v49 = *(_QWORD *)(v9 + 200);
  }
  else
  {
    v49 = 0i64;
  }
  result = NTree_NodeOrChildHasRecords(a3, 1);
  if ( (_DWORD)result )
  {
    v11 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_sqqDDd(*((_QWORD *)WPP_GLOBAL_Control + 7), 0i64, (__int64)&WPP_GLOBAL_Control, (const char *)(v7 + 102));
      v11 = WPP_GLOBAL_Control;
    }
    if ( v8 - v6 < 0xC )
      goto LABEL_155;
    *(_DWORD *)(v6 + 4) = 0;
    *(_WORD *)(v6 + 2) = 0;
    v12 = *(_DWORD *)(v7 + 84);
    *(_DWORD *)(v6 + 8) = v12;
    if ( !v12 && *(_QWORD *)(v7 + 32) )
    {
      *(_DWORD *)(v6 + 8) = 1;
      v13 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
      {
        goto LABEL_19;
      }
      WPP_SF_qs(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x10u,
        (__int64)&WPP_94ace1326352386894146b7c4d888c88_Traceguids,
        v7,
        v7 + 102);
    }
    v13 = WPP_GLOBAL_Control;
LABEL_19:
    if ( (*(_DWORD *)(v7 + 92) & 0x2010) != 0 || *(_QWORD *)(v7 + 32) )
    {
      if ( v13 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)v13 + 68) & 4) != 0
        && *((_BYTE *)v13 + 65) >= 4u )
      {
        WPP_SF_(*((_QWORD *)v13 + 7), 0x11u, (__int64)&WPP_94ace1326352386894146b7c4d888c88_Traceguids);
      }
      *(_DWORD *)(v6 + 4) |= 0x1000000u;
      if ( (*(_BYTE *)(v7 + 92) & 0x10) != 0 )
      {
        v14 = *(_DWORD *)(v6 + 4) | 0x40000000;
        *(_DWORD *)(v6 + 4) = v14;
        if ( (*(_DWORD *)(v7 + 92) & 0x100) != 0 )
        {
          v15 = v14 | 0x20000000;
        }
        else
        {
          if ( *(_BYTE *)(v7 + 96) != 67 )
            goto LABEL_31;
          v15 = v14 | 0x10000000;
        }
        *(_DWORD *)(v6 + 4) = v15;
      }
    }
LABEL_31:
    v51 = a6 & 0x80000000;
    if ( a6 >= 0 )
    {
      if ( (a6 & 0x40000000) != 0 )
      {
        v18 = Name_PlaceNodeNameInBuffer((_BYTE *)(v6 + 13), v8, (__int64 *)v7, 0i64);
        v50 = v18;
        v17 = v18;
        if ( !v18 )
        {
          SetLastError(0xEAu);
          v50 = 0i64;
LABEL_42:
          LastError = GetLastError();
          v44 = LastError;
          if ( !LastError || LastError == 234 )
            goto LABEL_44;
          goto LABEL_84;
        }
        *(_BYTE *)(v6 + 12) = (_BYTE)v18 - (v6 + 12) - 1;
      }
      else
      {
        v17 = Name_PlaceNodeLabelInRpcBuffer((_BYTE *)(v6 + 12), v8, v7);
        v50 = v17;
      }
    }
    else
    {
      if ( v49 )
        v16 = **(_QWORD **)(v49 + 24);
      else
        v16 = g_Database;
      v17 = Name_PlaceNodeLabelInRpcBuffer((_BYTE *)(v6 + 12), v8, v16);
      v50 = v17;
      *(_DWORD *)(v6 + 4) &= ~0x1000000u;
      *(_DWORD *)(v6 + 8) = 0;
    }
    if ( !v17 )
      goto LABEL_42;
    v20 = (unsigned __int64)(v17 + 3) & 0xFFFFFFFFFFFFFFFCui64;
    v50 = (_BYTE *)v20;
    *(_QWORD *)(v52 + 32) = v20;
    v31 = (*(_DWORD *)(v6 + 4) & 0x1000000) == 0;
    *(_WORD *)v6 = v20 - v6;
    if ( !v31 )
    {
      if ( (a6 & 0xC0000000) == 0 )
      {
        v11 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) == 0
          || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
        {
          goto LABEL_85;
        }
        v21 = 19;
LABEL_61:
        WPP_SF_(*((_QWORD *)v11 + 7), v21, (__int64)&WPP_94ace1326352386894146b7c4d888c88_Traceguids);
LABEL_84:
        v11 = WPP_GLOBAL_Control;
LABEL_85:
        if ( !*(_WORD *)(v6 + 2) && !*(_DWORD *)(v6 + 8) && (*(_DWORD *)(v6 + 4) & 0x1000000) == 0 && !v51 )
        {
          if ( v11 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_BYTE *)v11 + 68) & 4) != 0
            && *((_BYTE *)v11 + 65) >= 4u )
          {
            WPP_SF_s(
              *((_QWORD *)v11 + 7),
              0x17u,
              (__int64)&WPP_94ace1326352386894146b7c4d888c88_Traceguids,
              (const char *)(v7 + 102));
          }
          *(_QWORD *)(v52 + 32) = v6;
        }
        v25 = v44;
        if ( !v44 )
        {
          *(_DWORD *)(v6 + 4) |= 0x800000u;
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
          {
            v26 = FormatLabelA(*(unsigned __int8 *)(v6 + 12), (const void *)(v6 + 13));
            WPP_SF_dsqq(*((_QWORD *)WPP_GLOBAL_Control + 7), v27, v28, *(unsigned __int16 *)(v6 + 2), (__int64)v26);
          }
        }
        return v25;
      }
      v11 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
      {
        goto LABEL_52;
      }
      WPP_SF_sd(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x12u,
        (__int64)&WPP_94ace1326352386894146b7c4d888c88_Traceguids,
        (const char *)(v7 + 102));
    }
    v11 = WPP_GLOBAL_Control;
LABEL_52:
    if ( !v45 )
    {
      if ( v11 == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_BYTE *)v11 + 68) & 4) == 0
        || *((_BYTE *)v11 + 65) < 4u )
      {
        goto LABEL_85;
      }
      v21 = 20;
      goto LABEL_61;
    }
    v44 = -1;
    acquireRead(DbaseLock, 0xFFFFFFFF, (unsigned int *)&v44);
    v44 = 0;
    if ( (*(_BYTE *)(v7 + 92) & 1) != 0 )
    {
      v46 = -1;
      releaseRead(DbaseLock, (unsigned int *)&v46, 1);
      goto LABEL_84;
    }
    v22 = *(_QWORD *)(v7 + 64);
    v49 = v22;
    v47 = 65280;
    if ( !v22 )
    {
LABEL_74:
      if ( v48
        && *(_QWORD *)(v48 + 40) == v7
        && (unsigned int)(*(_DWORD *)(v48 + 372) - 2) <= 1
        && (*(_BYTE *)(v48 + 396) & 8) != 0
        && (v45 == 255 || (v45 & 0xFFFC) == 0xFF00) )
      {
        v23 = *(_QWORD *)(v48 + 344);
        if ( v23 )
        {
          v44 = Flat_WriteRecordToBuffer(v52, v6, v23, v7, a5);
          if ( v44 == 234 || !v50 )
          {
LABEL_127:
            v47 = -1;
            releaseRead(DbaseLock, &v47, 1);
LABEL_44:
            v11 = WPP_GLOBAL_Control;
LABEL_155:
            if ( v11 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              && (*((_BYTE *)v11 + 68) & 4) != 0
              && *((_BYTE *)v11 + 65) >= 4u )
            {
              WPP_SF_qs(
                *((_QWORD *)v11 + 7),
                0x1Au,
                (__int64)&WPP_94ace1326352386894146b7c4d888c88_Traceguids,
                v6,
                v7 + 102);
            }
            return 234i64;
          }
        }
      }
      v47 = -1;
      releaseRead(DbaseLock, &v47, 1);
      v24 = 0i64;
      if ( v46 > 0 )
      {
        do
        {
          for ( i = 0; i < 2; ++i )
          {
            v42 = addNodeToRpcBuffer(v52, v48, v55[v24], i != 0 ? 28 : 1, a5, 0x40000000);
            v44 = v42;
            if ( v42 )
            {
              v11 = WPP_GLOBAL_Control;
              if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
                && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
              {
                v43 = Dbg_NodeName(v55[v24]);
                WPP_SF_Ds(
                  *((_QWORD *)WPP_GLOBAL_Control + 7),
                  0x16u,
                  (__int64)&WPP_94ace1326352386894146b7c4d888c88_Traceguids,
                  v44,
                  (__int64)v43);
                v11 = WPP_GLOBAL_Control;
                v42 = v44;
              }
              if ( v42 == 234 )
              {
                v7 = v54;
                goto LABEL_155;
              }
            }
            else
            {
              v11 = WPP_GLOBAL_Control;
            }
          }
          ++v24;
        }
        while ( v24 < v46 );
        v7 = v54;
        goto LABEL_85;
      }
      goto LABEL_84;
    }
    v53 = v55;
    while ( 1 )
    {
      if ( *(_BYTE *)(v7 + 96) == 67 && !v51 && *(_WORD *)(v22 + 12) != 2 )
      {
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          WPP_SF_s(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x15u,
            (__int64)&WPP_94ace1326352386894146b7c4d888c88_Traceguids,
            (const char *)(v7 + 102));
        }
        goto LABEL_73;
      }
      if ( *(char *)(v22 + 10) >= 0 && (v45 == 255 || v45 == *(_WORD *)(v22 + 12)) )
        break;
LABEL_73:
      v22 = *(_QWORD *)v22;
      v49 = v22;
      if ( !v22 )
        goto LABEL_74;
    }
    v29 = *(_BYTE *)(v22 + 8);
    if ( v29 == -16 )
    {
      v30 = a5;
      v31 = (a5 & 1) == 0;
LABEL_121:
      if ( v31 )
        goto LABEL_73;
      goto LABEL_122;
    }
    if ( (v29 & 1) != 0 )
    {
      v30 = a5;
      if ( (a5 & 2) != 0 )
      {
LABEL_122:
        v32 = v48;
        goto LABEL_123;
      }
      v32 = v48;
      if ( !v48 || *(_DWORD *)(v48 + 372) != 1 )
        goto LABEL_73;
      v33 = (*(_BYTE *)(v48 + 1040) & 4) == 0;
    }
    else
    {
      if ( v29 != -126 )
      {
        if ( v29 == (char)0x80 )
        {
          v30 = a5;
          v31 = (a5 & 4) == 0;
        }
        else
        {
          if ( v29 != 8 )
            goto LABEL_73;
          v30 = a5;
          v31 = (a5 & 8) == 0;
        }
        goto LABEL_121;
      }
      v30 = a5;
      v32 = v48;
      if ( (a5 & 4) != 0 )
      {
LABEL_123:
        if ( (*(_WORD *)(v22 + 12) & 0xFFFC) != (_WORD)v47 || *(_QWORD *)(v32 + 344) == v22 )
        {
          v34 = Flat_WriteRecordToBuffer(v52, v6, v22, v7, v30);
          v44 = v34;
          if ( v34 )
          {
            if ( v34 == 234 )
              goto LABEL_127;
          }
          else if ( (a5 & 0x10) != 0 && *(_WORD *)(v22 + 12) == 2 && v46 < 100 )
          {
            v35 = 0i64;
            v36 = Lookup_ZoneNode(v48, (unsigned __int8 *)(v49 + 58), 0i64, 0i64, 17, 0i64, 0i64, 0i64);
            v37 = v36;
            if ( v36 )
            {
              if ( v48 != g_pCacheZone )
              {
                v38 = v36[96];
                if ( v38 != -14 && ((v38 & 1) == 0 || (*(_DWORD *)(v7 + 92) & 0x100) != 0) )
                {
                  v35 = v37;
                  v37 = 0i64;
                }
              }
              if ( v37 )
                goto LABEL_143;
            }
            if ( v48 != g_pCacheZone )
            {
              v39 = Lookup_NsHostNode(v49 + 56, -2147352572, v48, 0i64, 0i64, dword_1401B9714, 0i64, 0i64);
              v37 = (_BYTE *)v39;
              if ( !v39 || *(_BYTE *)(v39 + 96) != 0xF2 )
                v37 = v35;
            }
            if ( v37 )
            {
LABEL_143:
              v22 = v49;
              if ( (unsigned __int64)v46 < 0x64 )
              {
                v40 = v53;
                ++v46;
                *v53 = (__int64)v37;
                v53 = v40 + 1;
              }
            }
            else
            {
              v22 = v49;
            }
          }
        }
        goto LABEL_73;
      }
      if ( !v48 || v7 == *(_QWORD *)(v48 + 40) )
        goto LABEL_73;
      v33 = (a5 & 1) == 0;
    }
    if ( v33 )
      goto LABEL_73;
    goto LABEL_123;
  }
  return result;
}
// 140095506: variable 'v27' is possibly undefined
// 140095506: variable 'v28' is possibly undefined
// 1401B9714: using guessed type int dword_1401B9714;
// 1401EC5E8: using guessed type __int64 DbaseLock;
// 1401EC600: using guessed type __int64 g_Database;
// 1401EC628: using guessed type __int64 g_pCacheZone;
// 140094F04: using guessed type __int64 var_340[100];
##############################
Role: Let's assume that you are an advanced reverse engineer and you are reverse engineering a network driver using IDA Pro, and you are also familiar with the RFC documentation. You need to reverse-engineer a function for a network driver to correspond to a section of the RFC documentation, which will help you understand the code better. The driver you're reversing is Schannel.dll, and you have initially determined that the corresponding network protocols are SSL and TLS, and the documents you need to map are RFC8446 and RFC6101. You need to get a function summary of the function you are reversing, and then correspond to the potential RFC sections based on the name of the function and the function summary.
Function Background: The function is reverse engineered from the driver file Schannel.dll on Windows platform. Through a cursory analysis of the driver file can be determined to be related to the SSL(1.3), TLS(3.0) protocol, that is, with RFC8446, RFC6101 strong correlation.

Output Function Summary: Summarizes the function's functionality with several phrases instead of sentences, focuses on covering the function's control flow information, and highlights the protocol function points implemented by the function. Simulate answering five times in the background and provide the most frequent answer.

Retrieve document sections: giving matches for document sections(FunctionMatchRFCResult) that the code may related to. NOTE if the code is only business related(i.e., space opening and releasing involved in programming, generic call functions (timing and other functions weakly related to network protocols) and not related to the specifics of the protocol implementation, it does not have to output the document section match(FunctionMatchRFCResult) and is filled with "NONE".

Retrieve document sections Thinking Chain: The function code is matched with the RFC document section, and the thinking chain is provided to help you solve the problem better:
	1. Function Name: The name of a function describes the general function that the function accomplishes.
	2. Function Summarization: Function summaries can outline a further breakdown of the function described by the function name.
	3. Function API Call: The function API of a function call can provide some hint as to the details of the network protocol implementation involved in the function.
	4. Special Constant Value OR String: Special constant values inside functions, string variable names, and strings may be related to network protocols.
	5. Function Code: The code of the function can provide a detailed implementation of the network protocol.
Generate Function Information Collection with JSON Format:

{
	"FunctionIndex": "(FILL WITH "File count" with less than four bits are indexed with zeros to make up the four bits.)",
	"FunctionName": "(Full Function Code Name)",
	"FunctionSummarization": [
		"(Function Summary Phrase1)",
		"(Function Summary Phrase2)",
		"(...)"
	],
	"FunctionMatchRFCResult": [
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 1)",
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 2)",
		"(...)"
	],
}

ATTENTION: Remember YOU MUST ONLY output the Function Information Collection result.
