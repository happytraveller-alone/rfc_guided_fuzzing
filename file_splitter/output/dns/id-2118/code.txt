Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 2118
// Total lines: 156

//----- (000000014010BEB8) ----------------------------------------------------
void __fastcall initiateChildDsPolling(unsigned __int16 **a1, struct _DnsTreeNode *a2)
{
  __int64 v4; // rdx
  __int64 NextRecord; // r14
  char *v6; // rax
  int v7; // ecx
  char *v8; // rax
  int v9; // r9d
  unsigned __int16 v10; // dx
  __int64 v11; // r9
  struct _DnsTreeNode *ChildDnskeyNode; // r14
  CDnsClientSubnetRecordsTrie *v13; // rcx
  char *v14; // rax
  __int64 v15; // rax
  char *v16; // rax
  char *v17; // rax
  unsigned __int16 *v18[2]; // [rsp+50h] [rbp-20h] BYREF
  __int128 v19; // [rsp+60h] [rbp-10h] BYREF
  unsigned int v20; // [rsp+B8h] [rbp+48h] BYREF
  unsigned int v21; // [rsp+C0h] [rbp+50h] BYREF

  if ( (*((_DWORD *)a2 + 23) & 0x110) != 16 )
    return;
  v20 = -1;
  acquireRead(DbaseLock, 0xFFFFFFFF, &v20);
  NextRecord = RR_FindNextRecordEx((__int64)a2, 0, 0x2Bu, 0i64, 0, 0);
  if ( NextRecord )
  {
    while ( NextRecord && *(_WORD *)(NextRecord + 12) == 43 )
    {
      if ( *(_BYTE *)(NextRecord + 58) > 0xEu || (v7 = 26016, !_bittest(&v7, *(unsigned __int8 *)(NextRecord + 58))) )
      {
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          v8 = Dbg_NodeName((__int64)a2);
          v9 = *(unsigned __int8 *)(NextRecord + 58);
          v10 = 53;
LABEL_22:
          WPP_SF_Ds(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            v10,
            (__int64)&WPP_9f96d4c672f338bf067ce342b88232b8_Traceguids,
            v9,
            (__int64)v8);
        }
LABEL_23:
        if ( (*((_DWORD *)a2 + 23) & 0x400) == 0 )
        {
          v18[0] = (unsigned __int16 *)((char *)a2 + 102);
          v18[1] = a1[3];
          LOWORD(v20) = 259;
          v19 = DNS_EVENT_DNSSEC_UNSUPPORTED_CHILD_ALG;
          Eventlog_LogEvent((__int64)&v19, v4, 2u, v18, (unsigned __int8 *)&v20, 0, 0, 0i64);
          *((_DWORD *)a2 + 23) |= 0x400u;
        }
        goto LABEL_25;
      }
      if ( ((*(_BYTE *)(NextRecord + 59) - 1) & 0xFC) != 0 || *(_BYTE *)(NextRecord + 59) == 3 )
      {
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          v8 = Dbg_NodeName((__int64)a2);
          v9 = *(unsigned __int8 *)(NextRecord + 59);
          v10 = 54;
          goto LABEL_22;
        }
        goto LABEL_23;
      }
      NextRecord = *(_QWORD *)NextRecord;
    }
    v20 = -1;
    releaseRead(DbaseLock, &v20, 1);
    ChildDnskeyNode = findChildDnskeyNode(a2, 1);
    if ( !ChildDnskeyNode )
    {
      v13 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
      {
LABEL_32:
        v15 = *((_QWORD *)ChildDnskeyNode + 7);
        if ( !v15 || *(_DWORD *)(v15 + 372) == 5 )
        {
          if ( v13 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)v13 + 17) & 0x200000) != 0
            && *((_BYTE *)v13 + 65) >= 4u )
          {
            v17 = Dbg_NodeName((__int64)a2);
            WPP_SF_qsq(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x39u,
              (__int64)&WPP_9f96d4c672f338bf067ce342b88232b8_Traceguids,
              a2,
              v17,
              ChildDnskeyNode);
          }
          Recurse_SendCacheUpdateQuery(
            (__int64)ChildDnskeyNode,
            0i64,
            (__int64)a2,
            v11,
            0x30u,
            0i64,
            1u,
            0,
            (__int64)DnsOls_ChildDsPollingCallback,
            (__int64)a2);
        }
        else
        {
          if ( v13 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)v13 + 17) & 0x200000) != 0
            && *((_BYTE *)v13 + 65) >= 4u )
          {
            v16 = Dbg_NodeName((__int64)ChildDnskeyNode);
            WPP_SF_s(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x38u,
              (__int64)&WPP_9f96d4c672f338bf067ce342b88232b8_Traceguids,
              v16);
          }
          performChildDsRebuild(a2, ChildDnskeyNode);
        }
        return;
      }
      v14 = Dbg_NodeName((__int64)a2);
      WPP_SF_s(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x37u,
        (__int64)&WPP_9f96d4c672f338bf067ce342b88232b8_Traceguids,
        v14);
    }
    v13 = WPP_GLOBAL_Control;
    goto LABEL_32;
  }
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
  {
    v6 = Dbg_NodeName((__int64)a2);
    WPP_SF_s(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x34u, (__int64)&WPP_9f96d4c672f338bf067ce342b88232b8_Traceguids, v6);
  }
LABEL_25:
  v21 = -1;
  releaseRead(DbaseLock, &v21, 1);
}
// 14010C0A2: variable 'v4' is possibly undefined
// 14010C20A: variable 'v11' is possibly undefined
// 140186CA0: using guessed type __int128 DNS_EVENT_DNSSEC_UNSUPPORTED_CHILD_ALG;
// 1401EC5E8: using guessed type __int64 DbaseLock;
