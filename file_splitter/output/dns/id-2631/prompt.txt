Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 2631
// Total lines: 500

//----- (0000000140139974) ----------------------------------------------------
__int64 __fastcall MatchPolicy(
        struct _DNS_MSGINFO *a1,
        __int64 *a2,
        __int64 a3,
        unsigned int a4,
        int a5,
        wchar_t *String1,
        __int64 **a7)
{
  char v8; // al
  char v10; // di
  unsigned int v11; // esi
  int v12; // r15d
  struct CDnsPolicyManager *v13; // rcx
  int v14; // eax
  struct CDnsPolicy *v15; // r8
  CDnsClientSubnetRecordsTrie *v16; // rcx
  _QWORD *v17; // rax
  int Lock; // eax
  unsigned int v19; // r9d
  const void **matched; // rax
  int v21; // r9d
  CDnsClientSubnetRecordsTrie *v22; // rcx
  unsigned __int16 v23; // dx
  int v24; // esi
  __int64 v25; // rax
  __int64 v26; // r8
  const unsigned __int16 *v27; // r9
  _QWORD *v28; // rax
  struct CDnsPolicyManager *v29; // rcx
  const char *PolicyTypeString; // rax
  __int64 v31; // r10
  int v32; // eax
  unsigned int v33; // r9d
  const void **v34; // rax
  struct CDnsPolicy *v35; // rcx
  int v36; // esi
  __int64 v37; // rax
  __int64 v38; // rdx
  __int64 v39; // r8
  const unsigned __int16 *v40; // r9
  int v41; // eax
  _QWORD *v42; // rax
  __int64 v43; // rdx
  __int64 v44; // r8
  _QWORD *v45; // rcx
  __int64 v46; // rcx
  __int64 v47; // r8
  _QWORD *v48; // rdi
  __int64 v49; // rcx
  struct CDnsPolicy *v51; // [rsp+20h] [rbp-A1h]
  int v52; // [rsp+28h] [rbp-99h]
  struct _DNS_MSGINFO *v53; // [rsp+30h] [rbp-91h]
  int v54; // [rsp+40h] [rbp-81h] BYREF
  struct CDnsPolicy *v55; // [rsp+48h] [rbp-79h] BYREF
  unsigned int v56; // [rsp+50h] [rbp-71h] BYREF
  unsigned int v57; // [rsp+54h] [rbp-6Dh] BYREF
  int v58; // [rsp+58h] [rbp-69h]
  __int64 v59; // [rsp+60h] [rbp-61h] BYREF
  __int64 v60; // [rsp+68h] [rbp-59h]
  _QWORD *v61; // [rsp+70h] [rbp-51h]
  void *v62[3]; // [rsp+78h] [rbp-49h] BYREF
  unsigned __int64 v63; // [rsp+90h] [rbp-31h]
  void *v64[3]; // [rsp+A0h] [rbp-21h] BYREF
  unsigned __int64 v65; // [rsp+B8h] [rbp-9h]

  v8 = a4;
  v61 = a7;
  v56 = a4;
  v10 = 0;
  v54 = 0;
  v11 = 0;
  v55 = 0i64;
  v12 = 0;
  v57 = 0;
  v59 = 0i64;
  v60 = a3;
  v58 = 0;
  if ( (a4 & 1) != 0 )
  {
    v13 = g_DnsPolicyManager;
    *((_DWORD *)String1 + 128) = 1;
    v54 = (*(__int64 (__fastcall **)(struct CDnsPolicyManager *, _QWORD, __int64 *, __int64 *))(*(_QWORD *)v13 + 40i64))(
            v13,
            (unsigned int)a5,
            a2,
            &v59);
    if ( v54 )
      return (unsigned int)v54;
    v11 = 1;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      HIDWORD(v51) = HIDWORD(a1);
      WPP_SF_Dq(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0xBBu,
        (__int64)&WPP_bbbcc621566c3408fe84d6a85874d543_Traceguids,
        a5);
    }
    LODWORD(v51) = a5;
    v14 = (*(__int64 (__fastcall **)(struct CDnsPolicyManager *, struct _DNS_MSGINFO *, __int64, struct CDnsPolicy **, struct CDnsPolicy *, _QWORD))(*(_QWORD *)g_DnsPolicyManager + 24i64))(
            g_DnsPolicyManager,
            a1,
            v60,
            &v55,
            v51,
            0i64);
    v54 = v14;
    if ( v14 )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        WPP_SF_Dq(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0xBCu,
          (__int64)&WPP_bbbcc621566c3408fe84d6a85874d543_Traceguids,
          v14);
      }
      goto LABEL_140;
    }
    if ( a5 == 4 && (v15 = v55) != 0i64 )
    {
      v16 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        v10 = 1;
        v17 = (_QWORD *)CDnsPolicy::Name((const void **)v55, (__int64)v64);
        if ( v17[3] >= 8ui64 )
          v17 = (_QWORD *)*v17;
        WPP_SF_qS(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0xBDu,
          (__int64)&WPP_bbbcc621566c3408fe84d6a85874d543_Traceguids,
          v55,
          v17);
        v15 = v55;
        v16 = WPP_GLOBAL_Control;
      }
      if ( (v10 & 1) != 0 )
      {
        v10 &= ~1u;
        if ( v65 >= 8 )
        {
          operator delete(v64[0]);
          v15 = v55;
          v16 = WPP_GLOBAL_Control;
        }
        v65 = 7i64;
        v64[2] = 0i64;
        LOWORD(v64[0]) = 0;
      }
    }
    else
    {
      Lock = Policy_AcquireReadLock(&g_hServerLevelNegativePolicyLock, 0xFFFFFFFF);
      v54 = Lock;
      if ( Lock )
      {
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
        {
          WPP_SF_D(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0xBEu,
            (__int64)&WPP_bbbcc621566c3408fe84d6a85874d543_Traceguids,
            Lock);
        }
        goto LABEL_140;
      }
      v12 = 1;
      v58 = 1;
      if ( v55 )
        v19 = *((_DWORD *)v55 + 26);
      else
        v19 = -1;
      matched = MatchNegativePolicies(a1, (__int64)a2, (unsigned int)a5, v19, (unsigned int *)&v54);
      v15 = (struct CDnsPolicy *)matched;
      if ( matched )
      {
        v55 = (struct CDnsPolicy *)matched;
      }
      else
      {
        v21 = v54;
        if ( v54 )
        {
          v22 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) == 0
            || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
          {
            goto LABEL_135;
          }
          v23 = 191;
LABEL_39:
          WPP_SF_Dq(*((_QWORD *)v22 + 7), v23, (__int64)&WPP_bbbcc621566c3408fe84d6a85874d543_Traceguids, v21);
          goto LABEL_135;
        }
        v15 = v55;
      }
      v16 = WPP_GLOBAL_Control;
    }
    if ( v15 )
    {
      if ( v16 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)v16 + 17) & 0x400000) != 0
        && *((_BYTE *)v16 + 65) >= 4u )
      {
        v24 = *((_DWORD *)v15 + 23);
        v10 |= 2u;
        v25 = CDnsPolicy::Name((const void **)v15, (__int64)v62);
        v27 = (const unsigned __int16 *)v25;
        if ( *(_QWORD *)(v25 + 24) >= 8ui64 )
          v27 = *(const unsigned __int16 **)v25;
        v53 = a1;
        v52 = v24;
        v51 = v55;
        WPP_SF_Sqdq(*((_QWORD *)WPP_GLOBAL_Control + 7), 0xC0u, v26, v27);
        v15 = v55;
      }
      if ( (v10 & 2) != 0 )
      {
        v10 &= ~2u;
        if ( v63 >= 8 )
        {
          operator delete(v62[0]);
          v15 = v55;
        }
      }
      *((_DWORD *)String1 + 128) = *((_DWORD *)v15 + 23);
      UpdatePolicyInMsg(a1, (const void **)v15);
    }
    else if ( v16 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
           && (*((_DWORD *)v16 + 17) & 0x400000) != 0
           && *((_BYTE *)v16 + 65) >= 4u )
    {
      LODWORD(v51) = *((_DWORD *)String1 + 128);
      WPP_SF_qd(*((_QWORD *)v16 + 7), 0xC1u, (__int64)&WPP_bbbcc621566c3408fe84d6a85874d543_Traceguids, a1, v51);
    }
    if ( v12 )
    {
      v57 = -1;
      releaseRead(g_hServerLevelNegativePolicyLock, &v57, 1);
      v58 = 0;
    }
    (*(void (__fastcall **)(struct CDnsPolicyManager *, __int64))(*(_QWORD *)g_DnsPolicyManager + 48i64))(
      g_DnsPolicyManager,
      v59);
    v8 = v56;
    v11 = 0;
    v57 = 0;
  }
  if ( (v8 & 2) == 0 )
    goto LABEL_134;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    v51 = a1;
    WPP_SF_Dq(*((_QWORD *)WPP_GLOBAL_Control + 7), 0xC2u, (__int64)&WPP_bbbcc621566c3408fe84d6a85874d543_Traceguids, a5);
  }
  v28 = v61;
  v29 = g_DnsPolicyManager;
  *((_DWORD *)String1 + 128) = 1;
  *v28 = a2;
  if ( (*(unsigned int (__fastcall **)(struct CDnsPolicyManager *, _QWORD, __int64 *))(*(_QWORD *)v29 + 32i64))(
         v29,
         (unsigned int)a5,
         a2) )
  {
    v54 = (*(__int64 (__fastcall **)(struct CDnsPolicyManager *, _QWORD, __int64 *, __int64 *, struct CDnsPolicy *, int, struct _DNS_MSGINFO *))(*(_QWORD *)g_DnsPolicyManager + 40i64))(
            g_DnsPolicyManager,
            (unsigned int)a5,
            a2,
            &v59,
            v51,
            v52,
            v53);
    if ( v54 )
      goto LABEL_134;
    v11 = 1;
    v57 = 1;
    v32 = (*(__int64 (__fastcall **)(struct CDnsPolicyManager *, struct _DNS_MSGINFO *, __int64, struct CDnsPolicy **, int, __int64 *))(*(_QWORD *)g_DnsPolicyManager + 24i64))(
            g_DnsPolicyManager,
            a1,
            v60,
            &v55,
            a5,
            a2);
    v54 = v32;
    if ( v32 )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        WPP_SF_Dq(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0xC4u,
          (__int64)&WPP_bbbcc621566c3408fe84d6a85874d543_Traceguids,
          v32);
      }
LABEL_134:
      if ( !v58 )
        goto LABEL_139;
      goto LABEL_135;
    }
  }
  else if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
         && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
         && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
  {
    PolicyTypeString = GetPolicyTypeString(a5);
    WPP_SF_sS(
      *(_QWORD *)(v31 + 56),
      0xC3u,
      (__int64)&WPP_bbbcc621566c3408fe84d6a85874d543_Traceguids,
      PolicyTypeString,
      a2[3]);
  }
  v54 = Policy_AcquireReadLock(a2 + 37, 0xFFFFFFFF);
  if ( v54 )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      WPP_SF_SD(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0xC5u,
        (__int64)&WPP_bbbcc621566c3408fe84d6a85874d543_Traceguids,
        (const unsigned __int16 *)a2[3]);
    }
    goto LABEL_134;
  }
  v58 = 1;
  if ( v55 )
    v33 = *((_DWORD *)v55 + 26);
  else
    v33 = -1;
  v34 = MatchNegativePolicies(a1, (__int64)a2, (unsigned int)a5, v33, (unsigned int *)&v54);
  v35 = (struct CDnsPolicy *)v34;
  if ( v34 )
  {
    v55 = (struct CDnsPolicy *)v34;
    goto LABEL_92;
  }
  v21 = v54;
  if ( v54 )
  {
    v22 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
    {
      goto LABEL_135;
    }
    v23 = 198;
    goto LABEL_39;
  }
  v35 = v55;
LABEL_92:
  if ( !v35 )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_Sqd(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0xC9u,
        (__int64)&WPP_bbbcc621566c3408fe84d6a85874d543_Traceguids,
        (const unsigned __int16 *)a2[3]);
      goto LABEL_134;
    }
LABEL_135:
    if ( (v56 & 2) != 0 )
      v49 = a2[37];
    else
      v49 = g_hServerLevelNegativePolicyLock;
    v56 = -1;
    releaseRead(v49, &v56, 1);
    goto LABEL_139;
  }
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    v36 = *((_DWORD *)v35 + 23);
    v10 |= 4u;
    v37 = CDnsPolicy::Name((const void **)v35, (__int64)v62);
    v40 = (const unsigned __int16 *)v37;
    if ( *(_QWORD *)(v37 + 24) >= 8ui64 )
      v40 = *(const unsigned __int16 **)v37;
    WPP_SF_SqdSq(*((_QWORD *)WPP_GLOBAL_Control + 7), v38, v39, v40, (char)v55, v36, a2[3]);
    v35 = v55;
    v11 = v57;
  }
  if ( (v10 & 4) != 0 )
  {
    v10 &= ~4u;
    if ( v63 >= 8 )
    {
      operator delete(v62[0]);
      v35 = v55;
    }
  }
  v41 = *((_DWORD *)v35 + 23);
  *((_DWORD *)String1 + 128) = v41;
  if ( v41 == 1 )
  {
    CDnsPolicyContent::GetScope(*((CDnsPolicyContent **)v35 + 17), String1);
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      v10 |= 8u;
      v42 = (_QWORD *)CDnsPolicy::Name((const void **)v55, (__int64)v62);
      v45 = v42;
      if ( v42[3] >= 8ui64 )
        v45 = (_QWORD *)*v42;
      WPP_SF_qSqSS(*((_QWORD *)WPP_GLOBAL_Control + 7), v43, v44, a1, v45, v55, String1, a2[3]);
    }
    if ( (v10 & 8) != 0 && v63 >= 8 )
      operator delete(v62[0]);
    v35 = v55;
  }
  if ( (*((_DWORD *)v35 + 23) & 0xFFFFFFFD) == 0 )
  {
    *((_DWORD *)a1 + 1572) |= 0x80u;
    *((_QWORD *)a1 + 460) = a2;
  }
  UpdatePolicyInMsg(a1, (const void **)v35);
  v46 = a2[37];
  v55 = 0i64;
  v56 = -1;
  releaseRead(v46, &v56, 1);
  if ( v11 )
  {
    (*(void (__fastcall **)(struct CDnsPolicyManager *, __int64))(*(_QWORD *)g_DnsPolicyManager + 48i64))(
      g_DnsPolicyManager,
      v59);
    v11 = 0;
  }
  if ( *String1 && _wcsicmp(String1, (const wchar_t *)a2[3]) )
  {
    v48 = v61;
    v54 = LookUp_ScopeMap(a2[20], a2[21], v47, 0xFFFFFFFF, String1, v61);
    if ( !v54 && !*v48 )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_S(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0xCBu,
          (__int64)&WPP_bbbcc621566c3408fe84d6a85874d543_Traceguids,
          String1);
      }
      *((_DWORD *)a1 + 1572) |= 0x20u;
      v54 = 9952;
    }
  }
  else if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
         && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
         && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0xCAu, (__int64)&WPP_bbbcc621566c3408fe84d6a85874d543_Traceguids);
  }
LABEL_139:
  if ( v11 )
LABEL_140:
    (*(void (__fastcall **)(struct CDnsPolicyManager *, __int64))(*(_QWORD *)g_DnsPolicyManager + 48i64))(
      g_DnsPolicyManager,
      v59);
  return (unsigned int)v54;
}
// 140139A89: variable 'v51' is possibly undefined
// 140139D11: variable 'v26' is possibly undefined
// 140139E7B: variable 'v31' is possibly undefined
// 140139F1F: variable 'v52' is possibly undefined
// 140139F1F: variable 'v53' is possibly undefined
// 14013A0B2: variable 'v38' is possibly undefined
// 14013A0B2: variable 'v39' is possibly undefined
// 14013A167: variable 'v43' is possibly undefined
// 14013A167: variable 'v44' is possibly undefined
// 14013A229: variable 'v47' is possibly undefined
// 140184CA8: using guessed type void __stdcall operator delete(void *);
// 140185140: using guessed type __int64 (__fastcall *_guard_dispatch_icall_fptr)(_QWORD, _QWORD);
// 1401B91C0: using guessed type struct CDnsPolicyManager *g_DnsPolicyManager;
// 1401B91C8: using guessed type __int64 g_hServerLevelNegativePolicyLock;
##############################
Role: Let's assume that you are an advanced reverse engineer and you are reverse engineering a network driver using IDA Pro, and you are also familiar with the RFC documentation. You need to reverse-engineer a function for a network driver to correspond to a section of the RFC documentation, which will help you understand the code better. The driver you're reversing is Schannel.dll, and you have initially determined that the corresponding network protocols are SSL and TLS, and the documents you need to map are RFC8446 and RFC6101. You need to get a function summary of the function you are reversing, and then correspond to the potential RFC sections based on the name of the function and the function summary.
Function Background: The function is reverse engineered from the driver file Schannel.dll on Windows platform. Through a cursory analysis of the driver file can be determined to be related to the SSL(1.3), TLS(3.0) protocol, that is, with RFC8446, RFC6101 strong correlation.

Output Function Summary: Summarizes the function's functionality with several phrases instead of sentences, focuses on covering the function's control flow information, and highlights the protocol function points implemented by the function. Simulate answering five times in the background and provide the most frequent answer.

Retrieve document sections: giving matches for document sections(FunctionMatchRFCResult) that the code may related to. NOTE if the code is only business related(i.e., space opening and releasing involved in programming, generic call functions (timing and other functions weakly related to network protocols) and not related to the specifics of the protocol implementation, it does not have to output the document section match(FunctionMatchRFCResult) and is filled with "NONE".

Retrieve document sections Thinking Chain: The function code is matched with the RFC document section, and the thinking chain is provided to help you solve the problem better:
	1. Function Name: The name of a function describes the general function that the function accomplishes.
	2. Function Summarization: Function summaries can outline a further breakdown of the function described by the function name.
	3. Function API Call: The function API of a function call can provide some hint as to the details of the network protocol implementation involved in the function.
	4. Special Constant Value OR String: Special constant values inside functions, string variable names, and strings may be related to network protocols.
	5. Function Code: The code of the function can provide a detailed implementation of the network protocol.
Generate Function Information Collection with JSON Format:

{
	"FunctionIndex": "(FILL WITH "File count" with less than four bits are indexed with zeros to make up the four bits.)",
	"FunctionName": "(Full Function Code Name)",
	"FunctionSummarization": [
		"(Function Summary Phrase1)",
		"(Function Summary Phrase2)",
		"(...)"
	],
	"FunctionMatchRFCResult": [
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 1)",
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 2)",
		"(...)"
	],
}

ATTENTION: Remember YOU MUST ONLY output the Function Information Collection result.
