Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 2004
// Total lines: 182

//----- (00000001400F6C98) ----------------------------------------------------
__int64 __fastcall DnsOls_ImportKey(__int64 a1, __int64 a2, __int64 *a3, __int64 a4, unsigned int a5, __int64 *a6)
{
  char v6; // bl
  char *v10; // rdi
  char *v11; // rax
  int v12; // r9d
  unsigned int v13; // esi
  int v14; // eax
  int v15; // r14d
  char *v16; // rax
  DnsSign::CDnsKeyPair *v17; // rax
  DnsSign::CDnsKeyPair *v18; // rax
  unsigned __int64 v19; // r8
  __int64 *KeyName; // rax
  __int64 v21; // rdi
  char *v22; // rax
  __int64 v23; // rdx
  __int64 v24; // r8
  void *Src; // [rsp+40h] [rbp-59h] BYREF
  NCRYPT_KEY_HANDLE hObject; // [rsp+48h] [rbp-51h] BYREF
  NCRYPT_PROV_HANDLE phProvider; // [rsp+50h] [rbp-49h] BYREF
  __int64 v29; // [rsp+58h] [rbp-41h]
  int v30; // [rsp+60h] [rbp-39h]
  _DWORD v31[3]; // [rsp+64h] [rbp-35h]
  void *v32[5]; // [rsp+70h] [rbp-29h] BYREF

  v6 = 0;
  Src = 0i64;
  phProvider = 0i64;
  hObject = 0i64;
  v10 = 0i64;
  v29 = a1;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    v11 = Dbg_GuidString((const IID *)(a2 + 8));
    WPP_SF_DSSs(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x53u,
      (__int64)&WPP_b7aea06a65693a31b0dd129af848d3b8_Traceguids,
      a5,
      *a3,
      (__int64)v11,
      *(_QWORD *)(v29 + 16));
  }
  *a6 = 0i64;
  if ( a4 && a5 > 0x10 )
  {
    v12 = NCryptOpenStorageProvider(&phProvider, *(LPCWSTR *)(a2 + 24), 0);
    if ( v12 )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        WPP_SF_DS(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x55u,
          (__int64)&WPP_b7aea06a65693a31b0dd129af848d3b8_Traceguids,
          v12,
          *(_QWORD *)(a2 + 24));
      }
      v13 = 9112;
    }
    else
    {
      v14 = StringFromGuid((const IID *)a4, &Src);
      v13 = v14;
      if ( v14 )
      {
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
        {
          WPP_SF_D(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x56u,
            (__int64)&WPP_b7aea06a65693a31b0dd129af848d3b8_Traceguids,
            v14);
        }
        v10 = (char *)Src;
      }
      else
      {
        v30 = 0;
        v31[0] = 45;
        *(_QWORD *)&v31[1] = 0i64;
        v10 = (char *)Src;
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          WPP_SF_S(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x57u,
            (__int64)&WPP_b7aea06a65693a31b0dd129af848d3b8_Traceguids,
            (const unsigned __int16 *)Src);
        }
        v15 = NCryptImportKey(phProvider, 0i64, L"ProtectedKeyBlob", 0i64, &hObject, (PBYTE)(a4 + 16), a5 - 16, 0x40u);
        if ( v15 )
        {
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
          {
            v16 = Dbg_GuidString((const IID *)(a2 + 8));
            WPP_SF_DSSs(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x58u,
              (__int64)&WPP_b7aea06a65693a31b0dd129af848d3b8_Traceguids,
              v15,
              (__int64)v10,
              (__int64)v16,
              *(_QWORD *)(v29 + 16));
          }
          v13 = 9107;
        }
        else
        {
          v17 = (DnsSign::CDnsKeyPair *)operator new(0xB8ui64);
          if ( v17 )
            v18 = DnsSign::CDnsKeyPair::CDnsKeyPair(v17, hObject);
          else
            v18 = 0i64;
          *a6 = (__int64)v18;
          v19 = -1i64;
          do
            ++v19;
          while ( *(_WORD *)&v10[2 * v19] );
          std::wstring::assign((char *)v18 + 120, v10, v19);
          hObject = 0i64;
        }
      }
    }
  }
  else
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      WPP_SF_D(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x54u,
        (__int64)&WPP_b7aea06a65693a31b0dd129af848d3b8_Traceguids,
        a5);
    }
    v13 = 87;
  }
  Mem_Free(v10, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\olsds.cpp", 3153);
  if ( hObject )
    NCryptFreeObject(hObject);
  if ( phProvider )
    NCryptFreeObject(phProvider);
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    if ( *a6 )
    {
      v6 = 1;
      KeyName = (__int64 *)DnsSign::CDnsKeyPair::GetKeyName(*a6, (__int64)v32);
      v21 = (__int64)KeyName;
      if ( (unsigned __int64)KeyName[3] >= 8 )
        v21 = *KeyName;
    }
    else
    {
      v21 = 0i64;
    }
    v22 = Dbg_GuidString((const IID *)(a2 + 8));
    WPP_SF_DqSSs(*((_QWORD *)WPP_GLOBAL_Control + 7), v23, v24, v13, *a6, v21, (__int64)v22, *(_QWORD *)(v29 + 16));
  }
  if ( (v6 & 1) != 0 && v32[3] >= (void *)8 )
    operator delete(v32[0]);
  return v13;
}
// 1400F7050: variable 'v23' is possibly undefined
// 1400F7050: variable 'v24' is possibly undefined
// 140184CA8: using guessed type void __stdcall operator delete(void *);
