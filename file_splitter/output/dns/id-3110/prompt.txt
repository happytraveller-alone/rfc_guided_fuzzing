Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 3110
// Total lines: 177

//----- (0000000140163860) ----------------------------------------------------
void __fastcall printExtendedRpcErrorInfo(unsigned int a1)
{
  unsigned int v1; // esi
  int ExtendedError; // eax
  unsigned int v3; // ebx
  RPC_STATUS started; // eax
  unsigned int v5; // edi
  unsigned int NextRecord; // eax
  HANDLE ProcessHeap; // rax
  int v8; // edi
  union tagRPC_EE_INFO_PARAM::$A3FD93C0502A9420CA2CBD32041223FD *p_u; // rbx
  HANDLE v10; // rax
  __int64 v11; // [rsp+20h] [rbp-E0h]
  __int64 v12; // [rsp+28h] [rbp-D8h]
  __int64 v13; // [rsp+30h] [rbp-D0h]
  __int64 v14; // [rsp+38h] [rbp-C8h]
  RPC_ERROR_ENUM_HANDLE EnumHandle; // [rsp+50h] [rbp-B0h] BYREF
  RPC_EXTENDED_ERROR_INFO ErrorInfo; // [rsp+70h] [rbp-90h] BYREF
  struct _SYSTEMTIME SystemTime; // [rsp+110h] [rbp+10h] BYREF

  if ( !a1 )
    return;
  v1 = 0;
  if ( g_LogFnPtr )
    g_LogFnPtr(L"DnsRpcError: received error %1!d!", a1);
  ExtendedError = I_RpcGetExtendedError();
  v3 = ExtendedError;
  if ( ExtendedError )
  {
    if ( ExtendedError < 0 )
      v1 = dns_MapRpcExtendedHResultToWin32(ExtendedError);
    if ( g_LogFnPtr )
      g_LogFnPtr(L"DnsRpcError: extended error code HResult %1!d! Win32 %2!d!", v3, v1);
  }
  started = RpcErrorStartEnumeration(&EnumHandle);
  v5 = started;
  if ( started )
  {
    if ( started != 1761 && g_LogFnPtr )
    {
      g_LogFnPtr(L"DnsRpcError: extended error code HResult %1!d! Win32 %2!d!", v3, v1);
      if ( g_LogFnPtr )
        g_LogFnPtr(L"DnsRpcError: error %1!d! retrieving RPC error information", v5);
    }
    return;
  }
  while ( 1 )
  {
LABEL_14:
    ErrorInfo.Version = 1;
    ErrorInfo.NumberOfParameters = 4;
    ErrorInfo.Flags = 4;
    NextRecord = RpcErrorGetNextRecord(&EnumHandle, 1, &ErrorInfo);
    if ( NextRecord == 1761 )
      goto LABEL_61;
    if ( NextRecord )
      break;
    if ( ErrorInfo.ComputerName )
    {
      if ( g_LogFnPtr )
        g_LogFnPtr(L"DnsRpcError: ComputerName %1!s!");
      ProcessHeap = GetProcessHeap();
      HeapFree(ProcessHeap, 0, ErrorInfo.ComputerName);
    }
    if ( g_LogFnPtr )
      g_LogFnPtr(L"DnsRpcError: ProcessID is %1!d!", ErrorInfo.ProcessID);
    FileTimeToSystemTime((const FILETIME *)&ErrorInfo.u, &SystemTime);
    if ( g_LogFnPtr )
    {
      LODWORD(v14) = SystemTime.wMilliseconds;
      LODWORD(v13) = SystemTime.wSecond;
      LODWORD(v12) = SystemTime.wMinute;
      LODWORD(v11) = SystemTime.wHour;
      g_LogFnPtr(
        L"DnsRpcError: system time is: %1!d!/%2!d!/%3!d! %4!d!:%5!d!:%6!d!:%7!d!",
        SystemTime.wMonth,
        SystemTime.wDay,
        SystemTime.wYear,
        v11,
        v12,
        v13,
        v14);
    }
    if ( g_LogFnPtr )
      g_LogFnPtr(L"DnsRpcError: Generating component is %1!d!", ErrorInfo.GeneratingComponent);
    if ( g_LogFnPtr )
      g_LogFnPtr(L"DnsRpcError: Status is %1!d!", ErrorInfo.Status);
    if ( g_LogFnPtr )
      g_LogFnPtr(L"DnsRpcError: Detection location is %1!d!", ErrorInfo.DetectionLocation);
    if ( g_LogFnPtr )
      g_LogFnPtr(L"DnsRpcError: Flags is %1!d!", ErrorInfo.Flags);
    if ( g_LogFnPtr )
      g_LogFnPtr(L"DnsRpcError: NumberOfParameters is %1!d!", (unsigned int)ErrorInfo.NumberOfParameters);
    v8 = 0;
    if ( ErrorInfo.NumberOfParameters > 0 )
    {
      p_u = &ErrorInfo.Parameters[0].u;
      while ( 1 )
      {
        if ( *(_DWORD *)&p_u[-1].BVal.Size == 1 )
        {
          if ( g_LogFnPtr )
            g_LogFnPtr(L"DnsRpcError: Ansi string: %1!S!", p_u->PVal);
        }
        else
        {
          if ( *(_DWORD *)&p_u[-1].BVal.Size != 2 )
          {
            switch ( *(_DWORD *)&p_u[-1].BVal.Size )
            {
              case 3:
                if ( g_LogFnPtr )
                  g_LogFnPtr(L"DnsRpcError: Long val: %1!d!");
                break;
              case 4:
                if ( g_LogFnPtr )
                  g_LogFnPtr(L"DnsRpcError: Short val: %1!d!");
                break;
              case 5:
                if ( g_LogFnPtr )
                  g_LogFnPtr(L"DnsRpcError: Pointer val: %1!d!", p_u->PVal);
                break;
              case 6:
                if ( g_LogFnPtr )
                  g_LogFnPtr(L"DnsRpcError: Truncated");
                break;
              default:
                if ( g_LogFnPtr )
                  g_LogFnPtr(L"DnsRpcError: Invalid type: %1!d!");
                break;
            }
            goto LABEL_57;
          }
          if ( g_LogFnPtr )
            g_LogFnPtr(L"DnsRpcError: Unicode string: %1!s!", p_u->PVal);
        }
        v10 = GetProcessHeap();
        HeapFree(v10, 0, p_u->BVal.Buffer);
LABEL_57:
        ++v8;
        p_u = (union tagRPC_EE_INFO_PARAM::$A3FD93C0502A9420CA2CBD32041223FD *)((char *)p_u + 24);
        if ( v8 >= ErrorInfo.NumberOfParameters )
          goto LABEL_14;
      }
    }
  }
  if ( g_LogFnPtr )
    g_LogFnPtr(L"DnsRpcError: error %1!d! during error info enumeration", NextRecord);
LABEL_61:
  RpcErrorEndEnumeration(&EnumHandle);
}
// 140163A27: variable 'v11' is possibly undefined
// 140163A27: variable 'v12' is possibly undefined
// 140163A27: variable 'v13' is possibly undefined
// 140163A27: variable 'v14' is possibly undefined
// 140185140: using guessed type __int64 (__fastcall *_guard_dispatch_icall_fptr)(_QWORD, _QWORD);
// 140197730: using guessed type wchar_t aDnsrpcerrorRec[34];
// 140197780: using guessed type wchar_t aDnsrpcerrorExt[59];
// 140197800: using guessed type wchar_t aDnsrpcerrorErr_0[58];
// 140197880: using guessed type wchar_t aDnsrpcerrorErr[55];
// 1401978F0: using guessed type wchar_t aDnsrpcerrorCom[32];
// 140197930: using guessed type wchar_t aDnsrpcerrorPro[32];
// 140197970: using guessed type wchar_t aDnsrpcerrorSys[71];
// 140197A00: using guessed type wchar_t aDnsrpcerrorGen[43];
// 140197A58: using guessed type wchar_t aDnsrpcerrorSta[29];
// 140197AA0: using guessed type wchar_t aDnsrpcerrorDet[41];
// 140197AF8: using guessed type wchar_t aDnsrpcerrorFla[28];
// 140197B30: using guessed type wchar_t aDnsrpcerrorNum[41];
// 140197B90: using guessed type wchar_t aDnsrpcerrorAns[32];
// 140197BD0: using guessed type wchar_t aDnsrpcerrorUni[35];
// 140197C18: using guessed type wchar_t aDnsrpcerrorLon[29];
// 140197C58: using guessed type wchar_t aDnsrpcerrorSho[30];
// 140197CA0: using guessed type wchar_t aDnsrpcerrorPoi[32];
// 140197CE0: using guessed type wchar_t aDnsrpcerrorTru[23];
// 140197D10: using guessed type wchar_t aDnsrpcerrorInv[33];
// 1401B9EF8: using guessed type __int64 (*g_LogFnPtr)(_QWORD, ...);
##############################
Role: Let's assume that you are an advanced reverse engineer and you are reverse engineering a network driver using IDA Pro, and you are also familiar with the RFC documentation. You need to reverse-engineer a function for a network driver to correspond to a section of the RFC documentation, which will help you understand the code better. The driver you're reversing is Schannel.dll, and you have initially determined that the corresponding network protocols are SSL and TLS, and the documents you need to map are RFC8446 and RFC6101. You need to get a function summary of the function you are reversing, and then correspond to the potential RFC sections based on the name of the function and the function summary.
Function Background: The function is reverse engineered from the driver file Schannel.dll on Windows platform. Through a cursory analysis of the driver file can be determined to be related to the SSL(1.3), TLS(3.0) protocol, that is, with RFC8446, RFC6101 strong correlation.

Output Function Summary: Summarizes the function's functionality with several phrases instead of sentences, focuses on covering the function's control flow information, and highlights the protocol function points implemented by the function. Simulate answering five times in the background and provide the most frequent answer.

Retrieve document sections: giving matches for document sections(FunctionMatchRFCResult) that the code may related to. NOTE if the code is only business related(i.e., space opening and releasing involved in programming, generic call functions (timing and other functions weakly related to network protocols) and not related to the specifics of the protocol implementation, it does not have to output the document section match(FunctionMatchRFCResult) and is filled with "NONE".

Retrieve document sections Thinking Chain: The function code is matched with the RFC document section, and the thinking chain is provided to help you solve the problem better:
	1. Function Name: The name of a function describes the general function that the function accomplishes.
	2. Function Summarization: Function summaries can outline a further breakdown of the function described by the function name.
	3. Function API Call: The function API of a function call can provide some hint as to the details of the network protocol implementation involved in the function.
	4. Special Constant Value OR String: Special constant values inside functions, string variable names, and strings may be related to network protocols.
	5. Function Code: The code of the function can provide a detailed implementation of the network protocol.
Generate Function Information Collection with JSON Format:

{
	"FunctionIndex": "(FILL WITH "File count" with less than four bits are indexed with zeros to make up the four bits.)",
	"FunctionName": "(Full Function Code Name)",
	"FunctionSummarization": [
		"(Function Summary Phrase1)",
		"(Function Summary Phrase2)",
		"(...)"
	],
	"FunctionMatchRFCResult": [
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 1)",
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 2)",
		"(...)"
	],
}

ATTENTION: Remember YOU MUST ONLY output the Function Information Collection result.
