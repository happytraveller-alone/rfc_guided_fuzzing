Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 2477
// Total lines: 158

//----- (000000014012B5A8) ----------------------------------------------------
_OWORD *__fastcall std::num_put<unsigned short,std::ostreambuf_iterator<unsigned short>>::_Iput(
        __int64 a1,
        _OWORD *a2,
        __int128 *a3,
        __int64 a4,
        unsigned __int16 a5,
        _BYTE *a6,
        size_t a7)
{
  __int64 v7; // rbx
  _OWORD *v9; // r14
  _BYTE *v10; // r15
  size_t v11; // rsi
  __int64 *v12; // rax
  int v13; // eax
  __int64 v14; // r13
  void **v15; // rax
  __int64 v16; // rcx
  char *v17; // rax
  char *v18; // rdi
  size_t v19; // r14
  char v20; // al
  __int64 v21; // rbx
  __int64 v22; // rbx
  __int64 v23; // rdi
  int v24; // eax
  unsigned __int16 v25; // r13
  __int128 *v26; // rax
  unsigned __int16 v27; // ax
  __int64 v28; // rcx
  __int128 v30; // [rsp+40h] [rbp-81h] BYREF
  __int128 v31; // [rsp+50h] [rbp-71h] BYREF
  __int64 v32; // [rsp+60h] [rbp-61h]
  __int128 v33; // [rsp+70h] [rbp-51h] BYREF
  __int64 v34[2]; // [rsp+80h] [rbp-41h] BYREF
  void *v35[3]; // [rsp+90h] [rbp-31h] BYREF
  unsigned __int64 v36; // [rsp+A8h] [rbp-19h]

  v34[1] = -2i64;
  v7 = a4;
  *(_QWORD *)&v30 = a4;
  v9 = a2;
  *(_QWORD *)&v31 = a2;
  v32 = a1;
  v10 = a6;
  v11 = a7;
  v12 = std::ios_base::getloc(a4, v34);
  *(_QWORD *)&v33 = std::use_facet<std::numpunct<unsigned short>>(v12);
  std::locale::~locale((std::locale *)v34);
  std::numpunct<unsigned short>::grouping(v33, (__int64)v35);
  if ( ((*a6 - 43) & 0xFD) != 0 )
  {
    if ( *a6 != 48 || ((a6[1] - 88) & 0xDF) != 0 )
      v13 = 0;
    else
      v13 = 2;
  }
  else
  {
    v13 = 1;
  }
  v14 = v13;
  v15 = v35;
  v16 = (__int64)v35[0];
  if ( v36 >= 0x10 )
    v15 = (void **)v35[0];
  if ( *(_BYTE *)v15 != 127 )
  {
    v17 = (char *)v35;
    if ( v36 >= 0x10 )
      v17 = (char *)v35[0];
    if ( *v17 > 0 )
    {
      v18 = (char *)v35;
      if ( v36 >= 0x10 )
        v18 = (char *)v35[0];
      v19 = a7;
      v20 = *v18;
      if ( *v18 != 127 )
      {
        do
        {
          if ( v20 <= 0 )
            break;
          v16 = v20;
          if ( v20 >= v19 - v14 )
            break;
          v19 -= v20;
          memmove_s(&a6[v19 + 1], v11 - v19 + 1, &a6[v19], v11 - v19 + 1);
          a6[v19] = 0;
          ++v11;
          if ( v18[1] > 0 )
            ++v18;
          v20 = *v18;
        }
        while ( *v18 != 127 );
        v7 = v30;
      }
      v9 = (_OWORD *)v31;
    }
  }
  v21 = *(_QWORD *)(v7 + 40);
  if ( v21 <= 0 || v21 <= v11 )
    v22 = 0i64;
  else
    v22 = v21 - v11;
  v23 = v30;
  v24 = *(_DWORD *)(v30 + 24) & 0x1C0;
  if ( v24 == 64 )
  {
    v25 = a5;
  }
  else
  {
    v30 = *a3;
    if ( v24 == 256 )
    {
      v26 = std::num_put<unsigned short,std::ostreambuf_iterator<unsigned short>>::_Putc(
              v32,
              &v31,
              (__int64)&v30,
              a6,
              v14);
      *a3 = *v26;
      v10 = &a6[v14];
      v11 -= v14;
      v30 = *v26;
    }
    v25 = a5;
    *a3 = *std::num_put<unsigned short,std::ostreambuf_iterator<unsigned short>>::_Rep(
             v16,
             &v31,
             (__int64)&v30,
             a5,
             v22);
    v22 = 0i64;
  }
  v30 = *a3;
  v27 = (*(__int64 (__fastcall **)(_QWORD))(*(_QWORD *)v33 + 16i64))(v33);
  *a3 = *std::num_put<unsigned short,std::ostreambuf_iterator<unsigned short>>::_Putgrouped(
           v32,
           &v33,
           &v30,
           v10,
           v11,
           v27);
  *(_QWORD *)(v23 + 40) = 0i64;
  v33 = *a3;
  std::num_put<unsigned short,std::ostreambuf_iterator<unsigned short>>::_Rep(v28, v9, (__int64)&v33, v25, v22);
  if ( v36 >= 0x10 )
    operator delete(v35[0]);
  return v9;
}
// 14012B744: variable 'v16' is possibly undefined
// 14012B7F3: variable 'v28' is possibly undefined
// 140184CA8: using guessed type void __stdcall operator delete(void *);
// 140185140: using guessed type __int64 (__fastcall *_guard_dispatch_icall_fptr)(_QWORD, _QWORD);
