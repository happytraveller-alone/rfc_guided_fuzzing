Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 1435
// Total lines: 520

//----- (00000001400B3364) ----------------------------------------------------
_BYTE *__fastcall NTree_FindOrCreateChildNodeEx(
        __int64 a1,
        void *a2,
        unsigned int a3,
        int a4,
        __int64 a5,
        unsigned int a6,
        __int64 *a7,
        int a8,
        __int64 a9)
{
  _BYTE *v9; // r15
  void *v10; // r13
  __int64 v11; // rbx
  unsigned __int64 v13; // r12
  __int64 v14; // rcx
  CDnsClientSubnetRecordsTrie *v15; // rcx
  void *v16; // rax
  __int64 v17; // rdx
  __int64 v18; // r8
  _BYTE **v19; // r12
  unsigned int v20; // ebx
  __int64 v21; // r13
  unsigned __int64 v22; // rsi
  unsigned int v23; // eax
  unsigned int v24; // r12d
  unsigned int v25; // r13d
  const char *v26; // rax
  __int64 v27; // rcx
  CDnsClientSubnetRecordsTrie *v28; // rax
  const void *v29; // rbx
  const char *v30; // rax
  const char *v31; // rax
  unsigned int v32; // esi
  _BYTE *v33; // r10
  unsigned __int8 v34; // r8
  __int64 v35; // r10
  __int64 *v36; // rcx
  __int64 *v37; // rbx
  void *v38; // rbx
  void *v39; // rsi
  const char *v40; // rax
  _BYTE *v41; // rax
  char *v42; // rcx
  _QWORD *Node; // rax
  __int64 v44; // rbx
  __int64 v45; // rsi
  __int64 v46; // rax
  _BYTE **v47; // r15
  __int64 v48; // rsi
  __int64 v49; // rcx
  __int64 *v50; // r10
  _BYTE *v51; // r10
  unsigned __int8 v52; // r8
  int v53; // eax
  __int64 v54; // r10
  __int64 *v55; // rax
  __int64 v56; // rsi
  __int64 v57; // rcx
  _BYTE *v59; // rcx
  __int64 v60; // r10
  int v61; // eax
  __int64 v62; // r10
  __int64 v63; // rcx
  unsigned int v64; // [rsp+40h] [rbp-A9h] BYREF
  unsigned int v65; // [rsp+44h] [rbp-A5h] BYREF
  __int64 v66; // [rsp+48h] [rbp-A1h]
  void *v67; // [rsp+50h] [rbp-99h]
  _BYTE *v68; // [rsp+58h] [rbp-91h] BYREF
  int v69; // [rsp+60h] [rbp-89h]
  _BYTE *v70; // [rsp+68h] [rbp-81h] BYREF
  __int64 *v71; // [rsp+70h] [rbp-79h] BYREF
  unsigned int Size; // [rsp+78h] [rbp-71h]
  int Size_4; // [rsp+7Ch] [rbp-6Dh]
  __int64 *v74; // [rsp+80h] [rbp-69h]
  __int64 v75; // [rsp+88h] [rbp-61h]
  _BYTE *v76; // [rsp+90h] [rbp-59h]
  char Src[64]; // [rsp+A0h] [rbp-49h] BYREF

  v9 = 0i64;
  v10 = a2;
  v11 = a9;
  v75 = 0i64;
  v13 = a3;
  v67 = a2;
  Size_4 = a4;
  Size = a3;
  v64 = a6;
  v74 = a7;
  v66 = a9;
  memset_0(Src, 0, sizeof(Src));
  v69 = 0;
  v76 = 0i64;
  if ( !a8 )
  {
    v14 = DbaseLock;
LABEL_5:
    v65 = -1;
    acquireRead(v14, 0xFFFFFFFF, &v65);
    goto LABEL_6;
  }
  if ( a8 == 1 )
  {
    v14 = a9;
    goto LABEL_5;
  }
LABEL_6:
  v15 = WPP_GLOBAL_Control;
  if ( (*((_BYTE *)WPP_GLOBAL_Control + 68) & 8) != 0 && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 6u )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
    {
      v16 = FormatLabelA(v13, v10);
      WPP_SF_sdqs(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        v17,
        v18,
        (const char *)(a1 + 102),
        *(_DWORD *)(a1 + 84),
        *(_QWORD *)(a1 + 56),
        (__int64)v16);
    }
    Dbg_SiblingList("Child list before lookup:", *(_BYTE **)(a1 + 32));
    v15 = WPP_GLOBAL_Control;
  }
  if ( a1 )
  {
    v19 = (_BYTE **)(a1 + 32);
    if ( *(_QWORD *)(a1 + 32) )
    {
      if ( (*((_BYTE *)v15 + 68) & 8) != 0 && *((_BYTE *)v15 + 65) >= 6u && !*(_DWORD *)(a1 + 84) )
      {
        if ( v15 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
          WPP_SF_sq(
            *((_QWORD *)v15 + 7),
            0x36u,
            (__int64)&WPP_800d841ceeab39a775299d72a602aebb_Traceguids,
            (const char *)(a1 + 102));
        Dbg_SiblingList("Child list of parent with zero children:\n", *v19);
      }
    }
    else if ( *(_DWORD *)(a1 + 84) )
    {
      if ( v15 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)v15 + 68) & 8) != 0
        && *((_BYTE *)v15 + 65) >= 2u )
      {
        WPP_SF_sqD(
          *((_QWORD *)v15 + 7),
          0x35u,
          (__int64)&WPP_800d841ceeab39a775299d72a602aebb_Traceguids,
          (const char *)(a1 + 102));
      }
      *(_DWORD *)(a1 + 84) = 0;
    }
    if ( *v19 || Size_4 || a8 != 1 && a7 )
    {
      v20 = 3;
      if ( !a8 )
      {
        v21 = *(_QWORD *)(a1 + 56);
        v75 = v21;
        if ( v21 && *(_DWORD *)(v21 + 372) == 1 )
          v20 = dword_1401B9854;
        v10 = v67;
      }
      v22 = Size;
      v23 = Dns_DowncaseNameLabel(Src, (unsigned __int8 *)v10, Size, (const char *)v20);
      v24 = v23;
      if ( !v23 )
      {
        v25 = v22;
        goto LABEL_58;
      }
      if ( v23 == -1 )
      {
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 8) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
        {
          v26 = (const char *)FormatLabelA(v22, v10);
          WPP_SF_sd(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x38u,
            (__int64)&WPP_800d841ceeab39a775299d72a602aebb_Traceguids,
            v26);
        }
        SetLastError(0x7Bu);
        goto LABEL_42;
      }
      v25 = v23;
      if ( v23 == (_DWORD)v22 )
      {
        v28 = WPP_GLOBAL_Control;
      }
      else
      {
        v28 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
          goto LABEL_58;
        if ( (*((_BYTE *)WPP_GLOBAL_Control + 68) & 8) != 0 )
        {
          v29 = v67;
          if ( *((_BYTE *)WPP_GLOBAL_Control + 65) >= 3u )
          {
            v30 = (const char *)FormatLabelA(v22, v67);
            WPP_SF_sdD(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x39u,
              (__int64)&WPP_800d841ceeab39a775299d72a602aebb_Traceguids,
              v30);
            v28 = WPP_GLOBAL_Control;
          }
          goto LABEL_54;
        }
      }
      v29 = v67;
LABEL_54:
      if ( v28 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)v28 + 68) & 8) != 0
        && *((_BYTE *)v28 + 65) >= 5u )
      {
        v31 = (const char *)FormatLabelA(v22, v29);
        WPP_SF_ssdd(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x3Au,
          (__int64)&WPP_800d841ceeab39a775299d72a602aebb_Traceguids,
          v31,
          (__int64)Src);
      }
LABEL_58:
      v32 = ((*(_WORD *)Src & 0xFF00 | (*(_DWORD *)Src << 16)) << 8) | ((*(unsigned __int16 *)&Src[2] | *(_DWORD *)Src & 0xFF0000u) >> 8);
      v65 = v32;
      if ( v25 < 4 )
      {
        v32 &= QuickCompareMask[v25];
        v65 = v32;
      }
      v68 = 0i64;
      v33 = *(_BYTE **)(a1 + 32);
      v71 = (__int64 *)(a1 + 32);
      v70 = v33;
      if ( v33 )
      {
        do
        {
          if ( *v33 != 0xFF )
            break;
          v34 = v33[2];
          v68 = v33;
          v76 = v33;
          v69 = NTree_HashTableIndexEx(0i64, (unsigned __int8 *)Src, v34);
          v36 = (__int64 *)(v35 + 16 + 8i64 * v69);
          v33 = (_BYTE *)*v36;
          v71 = v36;
        }
        while ( v33 );
        v32 = v65;
        v70 = v33;
      }
      v37 = v74;
      walkBinaryTree(v32, Src, v25, &v68, (__int64 *)&v70, &v71, v74);
      v9 = v70;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 8) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
      {
        if ( v37 && *v37 )
          v38 = FormatLabelA(*(unsigned __int8 *)(*v37 + 101), (const void *)(*v37 + 102));
        else
          v38 = 0i64;
        if ( v9 )
          v39 = FormatLabelA((unsigned __int8)v9[101], v9 + 102);
        else
          v39 = 0i64;
        v40 = (const char *)FormatLabelA(Size, v67);
        WPP_SF_sss(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x3Bu,
          (__int64)&WPP_800d841ceeab39a775299d72a602aebb_Traceguids,
          v40,
          (__int64)v39,
          (__int64)v38);
        v32 = v65;
        v37 = v74;
      }
      if ( v9 )
        goto LABEL_42;
      if ( !Size_4 )
      {
        if ( v37 )
        {
          v41 = v68;
          if ( !*v37 && v68 && *v68 == 0xFF )
          {
            *v37 = NTree_PreviousHashedNode((__int64)v68, 0i64, v69);
            v41 = 0i64;
          }
          if ( v75 && (*(_BYTE *)(v75 + 396) & 0x20) != 0 )
            NTree_FindBestNSEC3Node(v37, (__int64)v41, a1, 0);
          else
            NTree_FindBestNSECNode((__int64 **)v37, (__int64)v41, a1, 0);
        }
        goto LABEL_42;
      }
      if ( v24 )
      {
        if ( v25 > 0x3F )
          goto LABEL_42;
        v42 = Src;
      }
      else
      {
        if ( v25 > 0x3F )
          goto LABEL_42;
        v42 = (char *)v67;
      }
      Node = NTree_CreateNode(v42, Src, v25, v64, a8);
      v44 = (__int64)Node;
      if ( Node )
      {
        *((_DWORD *)Node + 18) = v32;
        v45 = DbaseLock;
        *Node = a1;
        *((_BYTE *)Node + 100) = *(_BYTE *)(a1 + 100) + 1;
        if ( a8 )
        {
          if ( a8 != 1 )
          {
LABEL_106:
            if ( v76 && *v76 == 0xFF )
            {
              v47 = (_BYTE **)(a1 + 32);
              v68 = v76;
              v50 = (__int64 *)&v76[8 * v69 + 16];
              v71 = v50;
            }
            else
            {
              v68 = 0i64;
              v47 = (_BYTE **)(a1 + 32);
              v50 = (__int64 *)(a1 + 32);
              v71 = (__int64 *)(a1 + 32);
            }
            v51 = (_BYTE *)*v50;
            v70 = v51;
            if ( v51 )
            {
              do
              {
                if ( *v51 != 0xFF )
                  break;
                v52 = v51[2];
                v68 = v51;
                v53 = NTree_HashTableIndexEx(0i64, (unsigned __int8 *)Src, v52);
                v55 = (__int64 *)(v54 + 16 + 8i64 * v53);
                v51 = (_BYTE *)*v55;
                v71 = v55;
              }
              while ( v51 );
              v70 = v51;
            }
            walkBinaryTree(v65, Src, v25, &v68, (__int64 *)&v70, &v71, v74);
            v56 = (__int64)v70;
            if ( v70 )
            {
              if ( a8 )
              {
                if ( a8 != 1 )
                  return (_BYTE *)v56;
                v57 = v66;
              }
              else
              {
                v57 = DbaseLock;
                v70[98] = CurrentTimeoutBin;
              }
              v64 = -1;
              releaseUpdate(v57, &v64, 1);
              return (_BYTE *)v56;
            }
            if ( !a8 )
              goto LABEL_122;
            if ( a8 != 1 )
              goto LABEL_123;
            v48 = v66;
LABEL_129:
            v64 = -1;
            acquireWrite(v48, 0xFFFFFFFF, &v64);
LABEL_124:
            *v71 = v44;
            *(_QWORD *)(v44 + 8) = v68;
            v59 = *v47;
            ++*(_DWORD *)(a1 + 84);
            if ( *v59 == 0xFF )
            {
              v60 = v44;
              do
                v60 = *(_QWORD *)(v60 + 8);
              while ( v60 && *(_BYTE *)v60 != 0xFF );
              v61 = NTree_HashTableIndexEx(v44, 0i64, *(_BYTE *)(v60 + 2));
              if ( ++*(_DWORD *)(v62 + 4i64 * v61 + 2064) < 0x40u )
              {
LABEL_136:
                if ( a8 )
                {
                  if ( a8 == 1 )
                    Lock_ReleaseWrite(v48);
                }
                else
                {
                  Dbase_UnlockEx(0i64, 2, (__int64)"ds\\dns\\server\\server\\tree.c", 72);
                }
                if ( (*((_BYTE *)WPP_GLOBAL_Control + 68) & 8) != 0 && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 6u )
                  Dbg_SiblingList("Full sibling list after insert:", *v47);
                if ( a8 )
                {
                  if ( a8 != 1 )
                  {
LABEL_148:
                    NTree_VerifyNodeInSiblingList((_QWORD *)v44);
                    return (_BYTE *)v44;
                  }
                  v63 = v48;
                }
                else
                {
                  v63 = DbaseLock;
                  *(_BYTE *)(v44 + 98) = CurrentTimeoutBin;
                }
                v64 = -1;
                releaseUpdate(v63, &v64, 1);
                goto LABEL_148;
              }
              v59 = *(_BYTE **)(v62 + 8i64 * v61 + 16);
            }
            else if ( *(_DWORD *)(a1 + 84) <= 0x40u )
            {
              goto LABEL_136;
            }
            NTree_CreateHashAtNode((__int64)v59);
            goto LABEL_136;
          }
          v48 = v66;
          v64 = -1;
          if ( v66 && (((unsigned int)getTlsCounter(v66, 1, &v64) + 1) & 0xFFFFFFFE) != 0 )
          {
            v64 = -1;
            releaseRead(v48, &v64, 1);
            v64 = -1;
            acquireUpdate(v48, 0xFFFFFFFF, &v64, 1);
            v47 = (_BYTE **)(a1 + 32);
            goto LABEL_129;
          }
          v64 = -1;
          releaseRead(v48, &v64, 1);
          v49 = v48;
        }
        else
        {
          v46 = a5;
          if ( !a5 )
            v46 = *(_QWORD *)(a1 + 56);
          *(_QWORD *)(v44 + 56) = v46;
          v64 = -1;
          if ( v45 && (unsigned int)getTlsCounter(v45, 1, &v64) - 1 <= 0xFFFFFFFD )
          {
            v64 = -1;
            releaseRead(v45, &v64, 1);
            v64 = -1;
            acquireUpdate(DbaseLock, 0xFFFFFFFF, &v64, 1);
            v47 = (_BYTE **)(a1 + 32);
LABEL_122:
            Dbase_LockEx(0i64, 2, (__int64)"ds\\dns\\server\\server\\tree.c", 19);
LABEL_123:
            v48 = v66;
            goto LABEL_124;
          }
          v64 = -1;
          releaseRead(v45, &v64, 1);
          v49 = DbaseLock;
        }
        v64 = -1;
        acquireUpdate(v49, 0xFFFFFFFF, &v64, 1);
        goto LABEL_106;
      }
LABEL_42:
      v11 = v66;
    }
  }
  if ( !a8 )
  {
    if ( v9 )
      v9[98] = CurrentTimeoutBin;
    v27 = DbaseLock;
    goto LABEL_151;
  }
  if ( a8 == 1 )
  {
    v27 = v11;
LABEL_151:
    v64 = -1;
    releaseRead(v27, &v64, 1);
  }
  return v9;
}
// 1400B342D: conditional instruction was optimized away because al.1>=6u
// 1400B34F4: conditional instruction was optimized away because al.1>=6u
// 1400B3A33: conditional instruction was optimized away because edi.4>=2u
// 1400B345F: variable 'v17' is possibly undefined
// 1400B345F: variable 'v18' is possibly undefined
// 1400B3760: variable 'v35' is possibly undefined
// 1400B3ACC: variable 'v54' is possibly undefined
// 1400B3BE7: variable 'v62' is possibly undefined
// 140191850: using guessed type _DWORD QuickCompareMask[4];
// 1401B9854: using guessed type int dword_1401B9854;
// 1401BA4B8: using guessed type char CurrentTimeoutBin;
// 1401EC5E8: using guessed type __int64 DbaseLock;
// 1400B3364: using guessed type CHAR Src[64];
##############################
Role: Let's assume that you are an advanced reverse engineer and you are reverse engineering a network driver using IDA Pro, and you are also familiar with the RFC documentation. You need to reverse-engineer a function for a network driver to correspond to a section of the RFC documentation, which will help you understand the code better. The driver you're reversing is Schannel.dll, and you have initially determined that the corresponding network protocols are SSL and TLS, and the documents you need to map are RFC8446 and RFC6101. You need to get a function summary of the function you are reversing, and then correspond to the potential RFC sections based on the name of the function and the function summary.
Function Background: The function is reverse engineered from the driver file Schannel.dll on Windows platform. Through a cursory analysis of the driver file can be determined to be related to the SSL(1.3), TLS(3.0) protocol, that is, with RFC8446, RFC6101 strong correlation.

Output Function Summary: Summarizes the function's functionality with several phrases instead of sentences, focuses on covering the function's control flow information, and highlights the protocol function points implemented by the function. Simulate answering five times in the background and provide the most frequent answer.

Retrieve document sections: giving matches for document sections(FunctionMatchRFCResult) that the code may related to. NOTE if the code is only business related(i.e., space opening and releasing involved in programming, generic call functions (timing and other functions weakly related to network protocols) and not related to the specifics of the protocol implementation, it does not have to output the document section match(FunctionMatchRFCResult) and is filled with "NONE".

Retrieve document sections Thinking Chain: The function code is matched with the RFC document section, and the thinking chain is provided to help you solve the problem better:
	1. Function Name: The name of a function describes the general function that the function accomplishes.
	2. Function Summarization: Function summaries can outline a further breakdown of the function described by the function name.
	3. Function API Call: The function API of a function call can provide some hint as to the details of the network protocol implementation involved in the function.
	4. Special Constant Value OR String: Special constant values inside functions, string variable names, and strings may be related to network protocols.
	5. Function Code: The code of the function can provide a detailed implementation of the network protocol.
Generate Function Information Collection with JSON Format:

{
	"FunctionIndex": "(FILL WITH "File count" with less than four bits are indexed with zeros to make up the four bits.)",
	"FunctionName": "(Full Function Code Name)",
	"FunctionSummarization": [
		"(Function Summary Phrase1)",
		"(Function Summary Phrase2)",
		"(...)"
	],
	"FunctionMatchRFCResult": [
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 1)",
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 2)",
		"(...)"
	],
}

ATTENTION: Remember YOU MUST ONLY output the Function Information Collection result.
