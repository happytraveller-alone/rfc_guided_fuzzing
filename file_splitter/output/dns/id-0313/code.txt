Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 313
// Total lines: 137

//----- (0000000140028760) ----------------------------------------------------
__int64 Dnssec_SendCacheUpdateQuery(__int64 a1, __int64 a2, __int64 a3, ...)
{
  __int64 v4; // rbp
  unsigned int v7; // r15d
  __int64 v8; // rdx
  unsigned int v9; // eax
  CDnsClientSubnetRecordsTrie *v10; // rcx
  unsigned __int16 v11; // dx
  int v12; // r9d
  __int64 v13; // rax
  unsigned __int16 v14; // di
  CDnsClientSubnetRecordsTrie *v15; // rcx
  char *v16; // rax
  __int64 v17; // rcx
  const char *v18; // r9
  __int64 v20; // [rsp+98h] [rbp+20h] BYREF
  va_list va; // [rsp+98h] [rbp+20h]
  __int64 v22; // [rsp+A0h] [rbp+28h]
  va_list va1; // [rsp+A8h] [rbp+30h] BYREF

  va_start(va1, a3);
  va_start(va, a3);
  v20 = va_arg(va1, _QWORD);
  v22 = va_arg(va1, _QWORD);
  v4 = v20;
  v7 = 0;
  v8 = 0i64;
  if ( !a1 || !a2 || !a3 )
    goto LABEL_37;
  v9 = *(_DWORD *)(a2 + 1480);
  if ( v9 < 0x14 )
  {
    v12 = v9 + 1;
    *(_DWORD *)(a2 + 1480) = v9 + 1;
    v13 = *(_QWORD *)(a1 + 1264);
    if ( !v13 )
      goto LABEL_19;
    do
    {
      v13 = *(_QWORD *)(v13 + 1264);
      v8 = (unsigned int)(v8 + 1);
    }
    while ( v13 );
    if ( (unsigned int)v8 <= 0x14 )
    {
LABEL_19:
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x100000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
      {
        WPP_SF_DDq(*((_QWORD *)WPP_GLOBAL_Control + 7), v8, 20i64, v12);
      }
      v14 = v22;
      if ( !v4 )
      {
        Dnssec_NodeLookup(0i64, (__int64 *)a3, a2, v22, *(_DWORD *)(a1 + 568), (__int64 *)va, 0i64);
        v4 = v20;
      }
      *(_QWORD *)(a2 + 1512) = *(_QWORD *)(a2 + 1520);
      v15 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
      {
        if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x100000) != 0 && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          v16 = Dbg_NodeName(a3);
          WPP_SF_Dsq(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x4Cu,
            (__int64)&WPP_61593714a64130a636c4534d3ca3552a_Traceguids,
            v14,
            (__int64)v16);
          v15 = WPP_GLOBAL_Control;
        }
        if ( v15 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)v15 + 17) & 0x100000) != 0
          && *((_BYTE *)v15 + 65) >= 4u )
        {
          WPP_SF_qq(*((_QWORD *)v15 + 7), 0x4Du, (__int64)&WPP_61593714a64130a636c4534d3ca3552a_Traceguids, a2, a1);
        }
      }
      *(_BYTE *)(a3 + 98) = CurrentTimeoutBin;
      *(_QWORD *)(a2 + 1496) = a3;
      *(_WORD *)(a2 + 1504) = v14;
      *(_QWORD *)(a1 + 1528) = a2;
      if ( (unsigned int)Recurse_SendCacheUpdateQuery(a3, 0i64, v4, 0i64, v14, a1, 1u, 0, 0i64, 0i64) )
      {
        v7 = 1;
      }
      else
      {
        v10 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
          return v7;
        if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x100000) == 0 || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
          goto LABEL_38;
        WPP_SF_Dqq(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x4Eu,
          (__int64)&WPP_61593714a64130a636c4534d3ca3552a_Traceguids,
          v14);
      }
      goto LABEL_37;
    }
    v10 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
      return v7;
    if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x100000) == 0 || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
      goto LABEL_38;
    v11 = 74;
    goto LABEL_9;
  }
  v10 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
    return v7;
  if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x100000) != 0 && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
  {
    v11 = 73;
LABEL_9:
    WPP_SF_Dq(*((_QWORD *)v10 + 7), v11, (__int64)&WPP_61593714a64130a636c4534d3ca3552a_Traceguids, 20);
LABEL_37:
    v10 = WPP_GLOBAL_Control;
  }
LABEL_38:
  if ( v10 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)v10 + 17) & 0x100000) != 0
    && *((_BYTE *)v10 + 65) >= 4u )
  {
    v17 = *((_QWORD *)v10 + 7);
    v18 = "Did not send";
    if ( v7 )
      v18 = "Sent";
    WPP_SF_sqq(v17, 0x4Fu, (__int64)&WPP_61593714a64130a636c4534d3ca3552a_Traceguids, v18);
  }
  return v7;
}
// 1401BA4B8: using guessed type char CurrentTimeoutBin;
