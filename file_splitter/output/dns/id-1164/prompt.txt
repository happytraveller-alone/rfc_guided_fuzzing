Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 1164
// Total lines: 278

//----- (0000000140096680) ----------------------------------------------------
__int64 __fastcall Rpc_DeleteZoneNode(
        __int64 a1,
        const unsigned __int16 **a2,
        __int64 a3,
        __int64 a4,
        __int64 a5,
        unsigned __int16 *a6)
{
  __int64 v6; // rbx
  int v7; // r13d
  __int64 result; // rax
  char *v9; // r15
  unsigned int v10; // edi
  const char *v11; // rax
  const unsigned __int16 *v12; // r9
  _BYTE *v13; // r15
  __int64 v14; // rdx
  const unsigned __int16 *v15; // rcx
  int v16; // eax
  unsigned int refreshed; // edi
  __int64 v18; // rcx
  const unsigned __int16 **v19; // rax
  const unsigned __int16 *v20; // rdx
  __int64 v21; // rcx
  char *v22; // r8
  unsigned __int16 *v23; // rax
  int v24; // r8d
  unsigned int v25; // eax
  __int64 v26; // rcx
  const unsigned __int16 *v27; // rax
  const unsigned __int16 *v28; // r9
  const char *v29; // rbx
  const unsigned __int16 *v30; // rax
  int v31; // [rsp+48h] [rbp-39h]
  int v32; // [rsp+4Ch] [rbp-35h]
  const char *v33; // [rsp+50h] [rbp-31h]
  int v34; // [rsp+58h] [rbp-29h] BYREF
  int v35[3]; // [rsp+5Ch] [rbp-25h] BYREF
  __int128 v36; // [rsp+68h] [rbp-19h] BYREF
  char v37[64]; // [rsp+78h] [rbp-9h] BYREF

  v34 = 0;
  v6 = a3;
  v31 = 0;
  v7 = 0;
  v32 = 0;
  if ( !a6 )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      WPP_SF_D(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        (_WORD)a6 + 38,
        (__int64)&WPP_94ace1326352386894146b7c4d888c88_Traceguids,
        87);
    }
    return 87i64;
  }
  v9 = (char *)*((_QWORD *)a6 + 1);
  v10 = *(_DWORD *)a6;
  v33 = v9;
  LODWORD(a6) = *(_DWORD *)a6;
  if ( a3 && !*(_DWORD *)(a3 + 372) )
    v6 = -(__int64)(*(_QWORD *)(a3 + 192) != 0i64) & a3;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    if ( v6 )
      v11 = *(const char **)(v6 + 16);
    else
      v11 = "NULL (cache)";
    if ( a2 )
      v12 = *a2;
    else
      v12 = L".";
    WPP_SF_Sssd(*((_QWORD *)WPP_GLOBAL_Control + 7), (__int64)a2, a3, v12, (__int64)v11, (__int64)v9);
  }
  v13 = Lookup_ZoneNodeFromDotted((_QWORD *)v6, v9, 0, 16, (__int64 *)0xFFFFFFFFFFFFFFFFi64, v35);
  if ( !v13 )
  {
    result = (unsigned int)v35[0];
    if ( v35[0] == 9714 )
      return 0i64;
    return result;
  }
  v14 = 1i64;
  v15 = L"Default";
  if ( !v6 )
  {
LABEL_63:
    if ( dword_1401B991C && (!v6 || !*(_DWORD *)(v6 + 372)) && !v13[102] && v10 )
      v7 = 1;
    if ( v6 && *(_DWORD *)(v6 + 372) )
      v22 = v37;
    else
      v22 = 0i64;
    refreshed = (unsigned int)RpcUtil_DeleteNodeOrSubtreeForAdmin((__int64)v13, v6, (__int64)v22, &v34, v10) != 0
              ? 0
              : 0x25F4;
    if ( v7 && (!refreshed || refreshed == 9716 && v34) )
    {
      if ( !v6 || (v23 = *(unsigned __int16 **)(v6 + 192)) == 0i64 )
        v23 = L"Default";
      a6 = v23;
      v36 = DNS_EVENT_CACHESCOPE_FLUSHED;
      Eventlog_LogEvent((__int64)&v36, v14, 1u, &a6, (unsigned __int8 *)1, 0, 0, 0i64);
    }
    if ( v6 && *(_DWORD *)(v6 + 372) )
    {
      v24 = 33554434;
      if ( v6 == g_pTrustAnchorsZone )
        v24 = 100663298;
      v25 = Up_ExecuteUpdateEx(
              (const char **)v6,
              (__int64)v37,
              v24,
              0,
              (__int64)"ds\\dns\\server\\server\\rrrpc.c",
              107);
      if ( v25 )
        refreshed = v25;
      goto LABEL_38;
    }
LABEL_53:
    if ( !v31 )
      goto LABEL_90;
    goto LABEL_89;
  }
  v16 = *(_DWORD *)(v6 + 372);
  if ( !v16 )
  {
    refreshed = Zone_LockForWriteEx(v6, 1, 0x2710u, (__int64)"ds\\dns\\server\\server\\rrrpc.c", 38);
    if ( refreshed )
      goto LABEL_38;
    v31 = 1;
LABEL_62:
    v10 = (unsigned int)a6;
    goto LABEL_63;
  }
  if ( v13 == *(_BYTE **)(v6 + 40) )
  {
    refreshed = 9603;
    goto LABEL_39;
  }
  if ( v16 == 1 )
  {
    memset_0(v37, 0, sizeof(v37));
    v18 = v6;
    if ( *(_QWORD *)(v6 + 328) )
      v18 = *(_QWORD *)(v6 + 328);
    refreshed = Zone_LockForRPCSeqEx(v18, 0xBB8u);
    if ( refreshed )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_Ds(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x28u,
          (__int64)&WPP_94ace1326352386894146b7c4d888c88_Traceguids,
          refreshed,
          *(_QWORD *)(v6 + 16));
      }
      goto LABEL_38;
    }
    v32 = 1;
    refreshed = Zone_LockForWriteEx(v6, 1, 0x2710u, (__int64)"ds\\dns\\server\\server\\rrrpc.c", 213);
    if ( refreshed )
    {
LABEL_91:
      if ( !v6 || (v26 = *(_QWORD *)(v6 + 328)) == 0 )
        v26 = v6;
      Lock_ReleaseWrite(*(_QWORD *)(v26 + 312));
      goto LABEL_38;
    }
    v31 = 1;
    refreshed = RpcUtil_SwitchSecurityContext(0);
    if ( refreshed )
    {
LABEL_89:
      Zone_UnlockAfterWriteEx(v6, 1, (__int64)"ds\\dns\\server\\server\\rrrpc.c", 126);
LABEL_90:
      if ( v32 )
        goto LABEL_91;
LABEL_38:
      v15 = L"Default";
      goto LABEL_39;
    }
    refreshed = DnsOls_RefreshAllDnsKeyPairObject((struct _zone_info *)v6);
    if ( refreshed )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_sd(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x29u,
          (__int64)&WPP_94ace1326352386894146b7c4d888c88_Traceguids,
          *(const char **)(v6 + 16));
      }
      RpcUtil_SwitchSecurityContext(1);
      goto LABEL_53;
    }
    RpcUtil_SwitchSecurityContext(1);
    v21 = v6;
    if ( *(_QWORD *)(v6 + 328) )
      v21 = *(_QWORD *)(v6 + 328);
    Lock_ReleaseWrite(*(_QWORD *)(v21 + 312));
    v32 = 0;
    if ( (unsigned int)Ds_ZonePollAndUpdate(v6, 1)
      && WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_s(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x2Au,
        (__int64)&WPP_94ace1326352386894146b7c4d888c88_Traceguids,
        *(const char **)(v6 + 16));
    }
    goto LABEL_62;
  }
  refreshed = 9611;
LABEL_39:
  if ( v6 && *(_DWORD *)(v6 + 372) )
  {
    if ( !refreshed && (Microsoft_Windows_DNSServerEnableBits & 0x20000000) != 0 )
    {
      v19 = *(const unsigned __int16 ***)(v6 + 200);
      if ( v19 )
        v20 = *v19;
      else
        v20 = L".";
      v27 = *(const unsigned __int16 **)(v6 + 192);
      v28 = *(const unsigned __int16 **)(v6 + 24);
      v29 = v33;
      if ( v27 )
        v15 = v27;
      Template_szzz((__int64)v15, (__int64)v20, v33, v28, v15, v20);
      goto LABEL_106;
    }
  }
  else if ( !refreshed && (dword_1401B9104 & 0x20) != 0 )
  {
    if ( !v6 || (v30 = *(const unsigned __int16 **)(v6 + 192)) == 0i64 )
      v30 = L"Default";
    v29 = v33;
    Template_qsz((__int64)L"Default", v14, 255, v33, v30);
    goto LABEL_106;
  }
  v29 = v33;
LABEL_106:
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_sd(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x2Bu,
      (__int64)&WPP_94ace1326352386894146b7c4d888c88_Traceguids,
      v29);
  }
  return refreshed;
}
// 140096ABE: variable 'v14' is possibly undefined
// 1401871B0: using guessed type __int128 DNS_EVENT_CACHESCOPE_FLUSHED;
// 140188260: using guessed type wchar_t aDefault_1[8];
// 1401B8C48: using guessed type __int64 g_pTrustAnchorsZone;
// 1401B9100: using guessed type int Microsoft_Windows_DNSServerEnableBits;
// 1401B9104: using guessed type int dword_1401B9104;
// 1401B991C: using guessed type int dword_1401B991C;
// 140096680: using guessed type unsigned int var_6C[3];
##############################
Role: Let's assume that you are an advanced reverse engineer and you are reverse engineering a network driver using IDA Pro, and you are also familiar with the RFC documentation. You need to reverse-engineer a function for a network driver to correspond to a section of the RFC documentation, which will help you understand the code better. The driver you're reversing is Schannel.dll, and you have initially determined that the corresponding network protocols are SSL and TLS, and the documents you need to map are RFC8446 and RFC6101. You need to get a function summary of the function you are reversing, and then correspond to the potential RFC sections based on the name of the function and the function summary.
Function Background: The function is reverse engineered from the driver file Schannel.dll on Windows platform. Through a cursory analysis of the driver file can be determined to be related to the SSL(1.3), TLS(3.0) protocol, that is, with RFC8446, RFC6101 strong correlation.

Output Function Summary: Summarizes the function's functionality with several phrases instead of sentences, focuses on covering the function's control flow information, and highlights the protocol function points implemented by the function. Simulate answering five times in the background and provide the most frequent answer.

Retrieve document sections: giving matches for document sections(FunctionMatchRFCResult) that the code may related to. NOTE if the code is only business related(i.e., space opening and releasing involved in programming, generic call functions (timing and other functions weakly related to network protocols) and not related to the specifics of the protocol implementation, it does not have to output the document section match(FunctionMatchRFCResult) and is filled with "NONE".

Retrieve document sections Thinking Chain: The function code is matched with the RFC document section, and the thinking chain is provided to help you solve the problem better:
	1. Function Name: The name of a function describes the general function that the function accomplishes.
	2. Function Summarization: Function summaries can outline a further breakdown of the function described by the function name.
	3. Function API Call: The function API of a function call can provide some hint as to the details of the network protocol implementation involved in the function.
	4. Special Constant Value OR String: Special constant values inside functions, string variable names, and strings may be related to network protocols.
	5. Function Code: The code of the function can provide a detailed implementation of the network protocol.
Generate Function Information Collection with JSON Format:

{
	"FunctionIndex": "(FILL WITH "File count" with less than four bits are indexed with zeros to make up the four bits.)",
	"FunctionName": "(Full Function Code Name)",
	"FunctionSummarization": [
		"(Function Summary Phrase1)",
		"(Function Summary Phrase2)",
		"(...)"
	],
	"FunctionMatchRFCResult": [
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 1)",
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 2)",
		"(...)"
	],
}

ATTENTION: Remember YOU MUST ONLY output the Function Information Collection result.
