Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 1983
// Total lines: 196

//----- (00000001400F3490) ----------------------------------------------------
_QWORD *__fastcall std::_Tree<std::_Tmap_traits<_lookup_name *,_DnsTreeNode *,DnsSign::CLookupNameCompare,std::allocator<std::pair<_lookup_name * const,_DnsTreeNode *>>,0>>::_Insert(
        __int64 a1,
        _QWORD *a2,
        char a3,
        _QWORD *a4,
        _QWORD *a5)
{
  unsigned __int64 v5; // rax
  _QWORD *v8; // rax
  __int64 v9; // rax
  _QWORD *v10; // rax
  __int64 v11; // rax
  _QWORD *v12; // rdx
  __int64 *v13; // rax
  __int64 *v14; // r9
  __int64 *v15; // rcx
  _QWORD *v16; // rcx
  __int64 v17; // rax
  _QWORD *v18; // rax
  _QWORD *v19; // rcx
  _QWORD *v20; // r9
  __int64 v21; // rax
  __int64 v22; // rax
  _QWORD *v23; // rax
  __int64 v24; // rcx
  __int64 v25; // rax
  __int64 v26; // rax
  _QWORD *v27; // rax
  __int64 v28; // rax
  _QWORD *v29; // rax
  __int64 v30; // rax
  __int64 v31; // rcx
  _QWORD *result; // rax

  v5 = *(_QWORD *)(a1 + 16);
  if ( v5 >= 0xFFFFFFFFFFFFFFEi64 )
  {
    std::allocator<DnsSign::CDnsKeyPair *>::deallocate(0xFFFFFFFFFFFFFFEi64, a5);
    std::_Xlength_error("map/set<T> too long");
  }
  *(_QWORD *)(a1 + 16) = v5 + 1;
  a5[1] = a4;
  v8 = *(_QWORD **)(a1 + 8);
  if ( a4 == v8 )
  {
    v8[1] = a5;
    **(_QWORD **)(a1 + 8) = a5;
    v9 = *(_QWORD *)(a1 + 8);
LABEL_8:
    *(_QWORD *)(v9 + 16) = a5;
    goto LABEL_9;
  }
  if ( a3 )
  {
    *a4 = a5;
    v10 = *(_QWORD **)(a1 + 8);
    if ( a4 == (_QWORD *)*v10 )
      *v10 = a5;
    goto LABEL_9;
  }
  a4[2] = a5;
  v9 = *(_QWORD *)(a1 + 8);
  if ( a4 == *(_QWORD **)(v9 + 16) )
    goto LABEL_8;
LABEL_9:
  v11 = a5[1];
  v12 = a5;
  while ( !*(_BYTE *)(v11 + 40) )
  {
    v13 = (__int64 *)v12[1];
    v14 = (__int64 *)v13[1];
    v15 = (__int64 *)*v14;
    if ( v13 == (__int64 *)*v14 )
    {
      v15 = (__int64 *)v14[2];
      if ( !*((_BYTE *)v15 + 40) )
        goto LABEL_30;
      if ( v12 == (_QWORD *)v13[2] )
      {
        v16 = (_QWORD *)v13[2];
        v12 = (_QWORD *)v12[1];
        v13[2] = *v16;
        if ( !*(_BYTE *)(*v16 + 41i64) )
          *(_QWORD *)(*v16 + 8i64) = v13;
        v16[1] = v13[1];
        v17 = *(_QWORD *)(a1 + 8);
        if ( v12 == *(_QWORD **)(v17 + 8) )
        {
          *(_QWORD *)(v17 + 8) = v16;
        }
        else
        {
          v18 = (_QWORD *)v12[1];
          if ( v12 == (_QWORD *)*v18 )
            *v18 = v16;
          else
            v18[2] = v16;
        }
        *v16 = v12;
        v12[1] = v16;
      }
      *(_BYTE *)(v12[1] + 40i64) = 1;
      *(_BYTE *)(*(_QWORD *)(v12[1] + 8i64) + 40i64) = 0;
      v19 = *(_QWORD **)(v12[1] + 8i64);
      v20 = (_QWORD *)*v19;
      *v19 = *(_QWORD *)(*v19 + 16i64);
      v21 = v20[2];
      if ( !*(_BYTE *)(v21 + 41) )
        *(_QWORD *)(v21 + 8) = v19;
      v20[1] = v19[1];
      v22 = *(_QWORD *)(a1 + 8);
      if ( v19 == *(_QWORD **)(v22 + 8) )
      {
        *(_QWORD *)(v22 + 8) = v20;
      }
      else
      {
        v23 = (_QWORD *)v19[1];
        if ( v19 == (_QWORD *)v23[2] )
          v23[2] = v20;
        else
          *v23 = v20;
      }
      v20[2] = v19;
    }
    else
    {
      if ( !*((_BYTE *)v15 + 40) )
      {
LABEL_30:
        *((_BYTE *)v13 + 40) = 1;
        *((_BYTE *)v15 + 40) = 1;
        *(_BYTE *)(*(_QWORD *)(v12[1] + 8i64) + 40i64) = 0;
        v12 = *(_QWORD **)(v12[1] + 8i64);
        goto LABEL_49;
      }
      if ( v12 == (_QWORD *)*v13 )
      {
        v24 = *v13;
        v12 = (_QWORD *)v12[1];
        *v13 = *(_QWORD *)(*v13 + 16);
        v25 = *(_QWORD *)(v24 + 16);
        if ( !*(_BYTE *)(v25 + 41) )
          *(_QWORD *)(v25 + 8) = v12;
        *(_QWORD *)(v24 + 8) = v12[1];
        v26 = *(_QWORD *)(a1 + 8);
        if ( v12 == *(_QWORD **)(v26 + 8) )
        {
          *(_QWORD *)(v26 + 8) = v24;
        }
        else
        {
          v27 = (_QWORD *)v12[1];
          if ( v12 == (_QWORD *)v27[2] )
            v27[2] = v24;
          else
            *v27 = v24;
        }
        *(_QWORD *)(v24 + 16) = v12;
        v12[1] = v24;
      }
      *(_BYTE *)(v12[1] + 40i64) = 1;
      *(_BYTE *)(*(_QWORD *)(v12[1] + 8i64) + 40i64) = 0;
      v19 = *(_QWORD **)(v12[1] + 8i64);
      v20 = (_QWORD *)v19[2];
      v19[2] = *v20;
      if ( !*(_BYTE *)(*v20 + 41i64) )
        *(_QWORD *)(*v20 + 8i64) = v19;
      v20[1] = v19[1];
      v28 = *(_QWORD *)(a1 + 8);
      if ( v19 == *(_QWORD **)(v28 + 8) )
      {
        *(_QWORD *)(v28 + 8) = v20;
      }
      else
      {
        v29 = (_QWORD *)v19[1];
        if ( v19 == (_QWORD *)*v29 )
          *v29 = v20;
        else
          v29[2] = v20;
      }
      *v20 = v19;
    }
    v19[1] = v20;
LABEL_49:
    v11 = v12[1];
  }
  v30 = *(_QWORD *)(a1 + 8);
  *a2 = a5;
  v31 = *(_QWORD *)(v30 + 8);
  result = a2;
  *(_BYTE *)(v31 + 40) = 1;
  return result;
}
