Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 580
// Total lines: 151

//----- (0000000140053830) ----------------------------------------------------
__int64 __fastcall Gnz_RequestRemoteData(__int64 a1, __int64 a2, unsigned __int16 a3)
{
  __int64 v3; // rbx
  __int64 v4; // rbp
  unsigned int v5; // r14d
  CDnsClientSubnetRecordsTrie *v8; // rcx
  unsigned __int16 v9; // dx
  __int64 v10; // rbx
  int v11; // eax
  char v12; // al
  int v13; // ecx
  __int64 v14; // rax
  __int64 v15; // rcx
  unsigned __int16 *v16; // r8
  int v17; // r9d

  v3 = g_pnodeGnzService;
  v4 = g_pGnzAddrArray;
  v5 = 0;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x20000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_qd(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x14u,
      (__int64)&WPP_034409074b35327309cc7655b9f6aa4d_Traceguids,
      a1,
      a3);
  }
  if ( !(unsigned int)Gnz_IsUsable() || !a2 )
    goto LABEL_46;
  if ( !*(_BYTE *)(a1 + 1429) )
  {
    if ( !dword_1401B998C || !g_pzoneRemoteGlobalNames || !v3 || !v4 )
    {
      v8 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
        return v5;
      if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x20000) == 0 || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
        goto LABEL_47;
      WPP_SF_dqqq(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x16u,
        (__int64)&WPP_034409074b35327309cc7655b9f6aa4d_Traceguids,
        dword_1401B998C);
      goto LABEL_46;
    }
    Recurse_CleanupRecursionMessage(a1);
    if ( !(unsigned int)Recurse_InitializeQueryForRecursion(a1) )
    {
      v8 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
        return v5;
      if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x20000) == 0 || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
        goto LABEL_47;
      v9 = 23;
      goto LABEL_12;
    }
    v10 = *(_QWORD *)(a1 + 192);
    *(_QWORD *)(a1 + 192) = a2;
    v11 = Recurse_InitializeQueryToRecurseNewQuestion(a1, 1);
    *(_QWORD *)(a1 + 192) = v10;
    if ( !v11 )
    {
      v8 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
        return v5;
      if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x20000) == 0 || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
        goto LABEL_47;
      v9 = 24;
      goto LABEL_12;
    }
    if ( !dword_1401B98EC || (v12 = 1, !dword_1401B999C) )
      v12 = 0;
    *(_DWORD *)(a1 + 592) &= ~2u;
    v13 = 2 * (v12 & 1);
    v14 = *(_QWORD *)(a1 + 1256);
    *(_DWORD *)(a1 + 592) |= v13;
    if ( v14 )
    {
      *(_DWORD *)(v14 + 592) &= ~2u;
      *(_DWORD *)(v14 + 592) |= v13;
      v15 = *(_QWORD *)(a1 + 1256);
      if ( !v15 || (v16 = *(unsigned __int16 **)(v15 + 1400)) == 0i64 )
      {
        v17 = 87;
        goto LABEL_36;
      }
      if ( !(unsigned int)Name_ConvertPacketNameToLookupNameEx(v15, (unsigned __int8 *)(v15 + 6316), v16, 1) )
      {
        v17 = 123;
LABEL_36:
        v8 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
          return v5;
        if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x20000) == 0 || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
          goto LABEL_47;
        WPP_SF_Dq(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x19u,
          (__int64)&WPP_034409074b35327309cc7655b9f6aa4d_Traceguids,
          v17);
        goto LABEL_46;
      }
    }
    *(_BYTE *)(a1 + 6306) &= ~1u;
    v5 = Recurse_SendToForwarder(a1, v4, 1, dword_1401B99A0, 5, 0, 0, 0i64);
    if ( v5 )
    {
      _InterlockedAdd(&dword_1401C7F28, 1u);
      goto LABEL_46;
    }
    v8 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
      return v5;
    if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x20000) == 0 || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
      goto LABEL_47;
    v9 = 26;
LABEL_12:
    WPP_SF_q(*((_QWORD *)v8 + 7), v9, (__int64)&WPP_034409074b35327309cc7655b9f6aa4d_Traceguids, a1);
LABEL_46:
    v8 = WPP_GLOBAL_Control;
    goto LABEL_47;
  }
  v8 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
    return v5;
  if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x20000) != 0 && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    v9 = 21;
    goto LABEL_12;
  }
LABEL_47:
  if ( v8 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)v8 + 17) & 0x20000) != 0
    && *((_BYTE *)v8 + 65) >= 4u )
  {
    WPP_SF_Dq(*((_QWORD *)v8 + 7), 0x1Bu, (__int64)&WPP_034409074b35327309cc7655b9f6aa4d_Traceguids, v5);
  }
  return v5;
}
// 1401B8EF0: using guessed type __int64 g_pzoneRemoteGlobalNames;
// 1401B8F00: using guessed type __int64 g_pGnzAddrArray;
// 1401B8F08: using guessed type __int64 g_pnodeGnzService;
// 1401B98EC: using guessed type int dword_1401B98EC;
// 1401B998C: using guessed type int dword_1401B998C;
// 1401B999C: using guessed type int dword_1401B999C;
// 1401B99A0: using guessed type int dword_1401B99A0;
// 1401C7F28: using guessed type int dword_1401C7F28;
