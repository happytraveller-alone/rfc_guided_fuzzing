Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 901
// Total lines: 340

//----- (000000014007B2FC) ----------------------------------------------------
__int64 __fastcall Remote_BuildVisitListForNewZone(__int64 a1, __int64 a2)
{
  CDnsClientSubnetRecordsTrie *v4; // rbx
  char *v5; // rax
  __int64 v6; // r12
  char *v7; // rbx
  char *v8; // rax
  unsigned int v9; // esi
  char *v10; // rbx
  unsigned int v11; // eax
  int v12; // r15d
  __int64 i; // r14
  int v14; // r15d
  __int64 v15; // r14
  int v16; // edx
  int *v17; // r10
  int v18; // r8d
  int v19; // r9d
  int v20; // edi
  char v21; // r11
  __int128 *v22; // rcx
  unsigned int v23; // eax
  int v24; // eax
  __int128 v25; // xmm6
  unsigned int v26; // edi
  __int128 v27; // xmm7
  __int128 v28; // xmm8
  __int128 v29; // xmm9
  __int128 v30; // xmm0
  __int64 v31; // rcx
  const char *v32; // rax
  unsigned __int64 v33; // rcx
  unsigned int v35; // [rsp+30h] [rbp-D0h]
  char v36; // [rsp+30h] [rbp-D0h]
  int *v37; // [rsp+38h] [rbp-C8h]
  ULONG v38; // [rsp+40h] [rbp-C0h]
  unsigned int v39; // [rsp+44h] [rbp-BCh]
  int v40; // [rsp+48h] [rbp-B8h]
  char *v41; // [rsp+50h] [rbp-B0h]
  char *v42; // [rsp+58h] [rbp-A8h]
  __int128 Buf1[4]; // [rsp+60h] [rbp-A0h] BYREF
  int v44[18]; // [rsp+A0h] [rbp-60h] BYREF
  __int128 v45[598]; // [rsp+E8h] [rbp-18h] BYREF
  char v46[112]; // [rsp+2650h] [rbp+2550h] BYREF
  char v47[112]; // [rsp+26C0h] [rbp+25C0h] BYREF

  v4 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x8000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    v5 = Dbg_NodeName(a1);
    WPP_SF_qs(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x24u,
      (__int64)&WPP_eab7c483710f366eae903c691df4ee49_Traceguids,
      a2,
      v5);
    v4 = WPP_GLOBAL_Control;
  }
  memset_0(v44, 0, 0x30ui64);
  if ( a1 )
  {
    *(_BYTE *)(a1 + 98) = CurrentTimeoutBin;
    v4 = WPP_GLOBAL_Control;
  }
  v6 = *(_QWORD *)(a2 + 1280);
  if ( a1 == *(_QWORD *)(v6 + 32) )
  {
    if ( (qword_1401B9780 & 0x400000) != 0 )
    {
      v7 = 0i64;
      if ( (unsigned int)Log_EnterLock() )
      {
        g_pszCurrentLogLevelString = (__int64)"REMOTE";
        v7 = Log_FormatNodeName((__int64 *)a1);
        Log_Printf("Refusing to build NS list for previously responding zone %s (query %p)\n", v7, (const void *)a2);
        g_pszCurrentLogLevelString = 0i64;
        Log_LeaveLock();
      }
      Mem_Free(v7, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\remote.c", 2210);
      v4 = WPP_GLOBAL_Control;
    }
    if ( v4 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)v4 + 17) & 0x8000) != 0
      && *((_BYTE *)v4 + 65) >= 4u )
    {
      v8 = Dbg_NodeName(a1);
      WPP_SF_sq(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x25u,
        (__int64)&WPP_eab7c483710f366eae903c691df4ee49_Traceguids,
        v8);
      v4 = WPP_GLOBAL_Control;
    }
    v9 = -1072573691;
    goto LABEL_88;
  }
  if ( (qword_1401B9780 & 0x400000) != 0 )
  {
    v10 = 0i64;
    if ( (unsigned int)Log_EnterLock() )
    {
      g_pszCurrentLogLevelString = (__int64)"REMOTE";
      v10 = Log_FormatNodeName((__int64 *)a1);
      Log_Printf("Building NS list for node %s (query %p)\n", v10, (const void *)a2);
      g_pszCurrentLogLevelString = 0i64;
      Log_LeaveLock();
    }
    Mem_Free(v10, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\remote.c", 2230);
    v4 = WPP_GLOBAL_Control;
  }
  if ( a1 != *(_QWORD *)(v6 + 24) )
  {
    v11 = Remote_BuildNsListForNode(a1, v44, *(_DWORD *)(a2 + 568), *(_QWORD *)(a2 + 6280));
    v9 = v11;
    if ( v11 && v11 != -1072573690 )
      goto LABEL_87;
    v12 = *(_DWORD *)(v6 + 4);
    for ( i = 96i64 * (v12 - 1) + v6 + 48; v12; --v12 )
    {
      if ( *(_WORD *)(i + 24) != 2
        || *(_DWORD *)(i + 28) != -1 && (*(_WORD *)(i + 24) != 2 || *(_DWORD *)(i + 28) != 0x7FFFFFFF) )
      {
        break;
      }
      i -= 96i64;
    }
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x8000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
    {
      WPP_SF_D(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x27u,
        (__int64)&WPP_eab7c483710f366eae903c691df4ee49_Traceguids,
        v12);
    }
    *(_DWORD *)(v6 + 12) = v12;
    *(_QWORD *)(v6 + 24) = a1;
    v39 = v12;
    v14 = v12 + 1;
    *(_DWORD *)(v6 + 4) = v14;
    *(_QWORD *)(i + 96) = a1;
    *(_DWORD *)(i + 104) = 0;
    *(_QWORD *)(i + 112) = 0i64;
    *(_BYTE *)(i + 184) = 0;
    DnsAddr_BuildFromIp4((struct in_addr *)(i + 120), (struct in_addr)0x7FFFFFFF, 0);
    ++g_RandomSeed;
    v15 = i + 192;
    v38 = RtlRandom(&g_RandomSeed);
    v16 = (v38 <= 0x68DB8) + 1;
    v40 = v16;
    if ( v14 >= 100 )
      goto LABEL_86;
    v4 = WPP_GLOBAL_Control;
    while ( 2 )
    {
      v17 = 0i64;
      v35 = -1;
      v18 = 0;
      v19 = 0;
      v37 = 0i64;
      v20 = v44[0];
      if ( !v44[0] )
      {
LABEL_86:
        *(_DWORD *)v6 = v14;
LABEL_87:
        v4 = WPP_GLOBAL_Control;
        goto LABEL_88;
      }
      v21 = 0;
      v42 = v47;
      v41 = v46;
      v22 = v45;
      do
      {
        --v20;
        if ( *(_WORD *)v22 != 2 || (v23 = -30584, *((_DWORD *)v22 + 1) != -1) )
          v23 = *((_DWORD *)v22 - 4);
        if ( v23 < v35 )
        {
          v17 = (int *)v22 - 6;
          v35 = v23;
          v37 = (int *)v22 - 6;
        }
        if ( v16 && (*(_WORD *)v22 != 2 || *((_DWORD *)v22 + 1) != -1 && *((_DWORD *)v22 + 1) != 0x7FFFFFFF) )
        {
          if ( *((_DWORD *)v22 - 4) <= 0x64u )
          {
            if ( (unsigned __int64)v19 >= 0x64 )
            {
LABEL_85:
              v9 = 13;
              goto LABEL_88;
            }
            ++v19;
            *v42++ = v21;
          }
          else
          {
            if ( (unsigned __int64)v18 >= 0x64 )
              goto LABEL_85;
            ++v18;
            *v41++ = v21;
          }
        }
        ++v21;
        v22 += 6;
      }
      while ( v20 );
      if ( !v16 )
      {
LABEL_70:
        v25 = *(_OWORD *)(v17 + 6);
        v36 = 0;
        v26 = 1;
        v27 = *(_OWORD *)(v17 + 10);
        v28 = *(_OWORD *)(v17 + 14);
        v29 = *(_OWORD *)(v17 + 18);
        Buf1[0] = v25;
        Buf1[1] = v27;
        Buf1[2] = v28;
        Buf1[3] = v29;
        if ( v39 <= 1 )
        {
LABEL_74:
          *(_QWORD *)v15 = *(_QWORD *)v17;
          v30 = *(_OWORD *)(v17 + 2);
          *(_OWORD *)(v15 + 24) = v25;
          *(_BYTE *)(v15 + 88) = v36;
          *(_OWORD *)(v15 + 40) = v27;
          *(_BYTE *)(v15 + 89) = 0;
          *(_OWORD *)(v15 + 56) = v28;
          *(_OWORD *)(v15 + 8) = v30;
          *(_OWORD *)(v15 + 72) = v29;
          v4 = WPP_GLOBAL_Control;
          v15 += 96i64;
          ++v14;
        }
        else
        {
          while ( !(unsigned int)DnsAddr_IsEqual(Buf1, (_WORD *)(96i64 * v26 + v6 + 72), 3) )
          {
            if ( ++v26 >= v39 )
              goto LABEL_73;
          }
          v31 = 96i64 * v26;
          v36 = *(_BYTE *)(v31 + v6 + 136);
          if ( !v36 || *(unsigned __int8 *)(v31 + v6 + 136) < 2u && !*(_BYTE *)(v31 + v6 + 137) )
          {
LABEL_73:
            v17 = v37;
            goto LABEL_74;
          }
          if ( v4 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)v4 + 17) & 0x8000) != 0
            && *((_BYTE *)v4 + 65) >= 4u )
          {
            v32 = DnsAddr_Ntoa((struct in_addr *)Buf1);
            WPP_SF_sq(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x28u,
              (__int64)&WPP_eab7c483710f366eae903c691df4ee49_Traceguids,
              v32);
            v4 = WPP_GLOBAL_Control;
          }
          v17 = v37;
        }
        v33 = 96i64 * (unsigned int)--v44[0];
        *(_QWORD *)v17 = *(_QWORD *)&v44[v33 / 4 + 12];
        *(_OWORD *)(v17 + 2) = *(_OWORD *)&v44[v33 / 4 + 14];
        *(_OWORD *)(v17 + 6) = v45[v33 / 0x10];
        *(_OWORD *)(v17 + 10) = v45[v33 / 0x10 + 1];
        *(_OWORD *)(v17 + 14) = v45[v33 / 0x10 + 2];
        *(_OWORD *)(v17 + 18) = v45[v33 / 0x10 + 3];
        if ( v14 < 100 )
        {
          v16 = v40;
          continue;
        }
        goto LABEL_86;
      }
      break;
    }
    if ( !v18 )
    {
      if ( !v19 )
        goto LABEL_70;
      if ( v16 == 2 )
        goto LABEL_68;
    }
    if ( !v19 )
    {
      if ( v16 == 2 )
      {
LABEL_66:
        if ( v18 )
        {
          v24 = (unsigned __int8)v46[v38 % v18];
LABEL_69:
          v17 = &v44[24 * v24 + 12];
          v40 = 0;
          v37 = v17;
          goto LABEL_70;
        }
LABEL_68:
        v24 = (unsigned __int8)v47[v38 % v19];
        goto LABEL_69;
      }
      v16 = 2;
    }
    if ( v16 != 2 )
      goto LABEL_68;
    goto LABEL_66;
  }
  if ( v4 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)v4 + 17) & 0x8000) != 0
    && *((_BYTE *)v4 + 65) >= 4u )
  {
    WPP_SF_qq(*((_QWORD *)v4 + 7), 0x26u, (__int64)&WPP_eab7c483710f366eae903c691df4ee49_Traceguids, a1, a2);
    v4 = WPP_GLOBAL_Control;
  }
  v9 = 0;
LABEL_88:
  if ( v4 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)v4 + 17) & 0x8000) != 0
    && *((_BYTE *)v4 + 65) >= 4u )
  {
    WPP_SF_Ddq(*((_QWORD *)v4 + 7), 0x29u, (__int64)&WPP_eab7c483710f366eae903c691df4ee49_Traceguids, v9);
  }
  return v9;
}
// 1401B8F28: using guessed type __int64 g_pszCurrentLogLevelString;
// 1401B9780: using guessed type __int64 qword_1401B9780;
// 1401BA4B8: using guessed type char CurrentTimeoutBin;
// 14007B2FC: using guessed type char var_F0[112];
// 14007B2FC: using guessed type char var_160[112];
##############################
Role: Let's assume that you are an advanced reverse engineer and you are reverse engineering a network driver using IDA Pro, and you are also familiar with the RFC documentation. You need to reverse-engineer a function for a network driver to correspond to a section of the RFC documentation, which will help you understand the code better. The driver you're reversing is Schannel.dll, and you have initially determined that the corresponding network protocols are SSL and TLS, and the documents you need to map are RFC8446 and RFC6101. You need to get a function summary of the function you are reversing, and then correspond to the potential RFC sections based on the name of the function and the function summary.
Function Background: The function is reverse engineered from the driver file Schannel.dll on Windows platform. Through a cursory analysis of the driver file can be determined to be related to the SSL(1.3), TLS(3.0) protocol, that is, with RFC8446, RFC6101 strong correlation.

Output Function Summary: Summarizes the function's functionality with several phrases instead of sentences, focuses on covering the function's control flow information, and highlights the protocol function points implemented by the function. Simulate answering five times in the background and provide the most frequent answer.

Retrieve document sections: giving matches for document sections(FunctionMatchRFCResult) that the code may related to. NOTE if the code is only business related(i.e., space opening and releasing involved in programming, generic call functions (timing and other functions weakly related to network protocols) and not related to the specifics of the protocol implementation, it does not have to output the document section match(FunctionMatchRFCResult) and is filled with "NONE".

Retrieve document sections Thinking Chain: The function code is matched with the RFC document section, and the thinking chain is provided to help you solve the problem better:
	1. Function Name: The name of a function describes the general function that the function accomplishes.
	2. Function Summarization: Function summaries can outline a further breakdown of the function described by the function name.
	3. Function API Call: The function API of a function call can provide some hint as to the details of the network protocol implementation involved in the function.
	4. Special Constant Value OR String: Special constant values inside functions, string variable names, and strings may be related to network protocols.
	5. Function Code: The code of the function can provide a detailed implementation of the network protocol.
Generate Function Information Collection with JSON Format:

{
	"FunctionIndex": "(FILL WITH "File count" with less than four bits are indexed with zeros to make up the four bits.)",
	"FunctionName": "(Full Function Code Name)",
	"FunctionSummarization": [
		"(Function Summary Phrase1)",
		"(Function Summary Phrase2)",
		"(...)"
	],
	"FunctionMatchRFCResult": [
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 1)",
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 2)",
		"(...)"
	],
}

ATTENTION: Remember YOU MUST ONLY output the Function Information Collection result.
