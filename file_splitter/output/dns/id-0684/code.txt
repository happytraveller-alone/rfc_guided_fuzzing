Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 684
// Total lines: 426

//----- (0000000140060C80) ----------------------------------------------------
ULONG __fastcall Template_zzzzzzzztzqqqqqqzzmmzzzz(
        __int64 a1,
        __int64 a2,
        const unsigned __int16 *a3,
        const unsigned __int16 *a4,
        const unsigned __int16 *a5,
        const unsigned __int16 *a6,
        const unsigned __int16 *a7,
        const unsigned __int16 *a8,
        const unsigned __int16 *a9,
        const unsigned __int16 *a10,
        char a11,
        const unsigned __int16 *a12,
        char a13,
        char a14,
        char a15,
        char a16,
        char a17,
        char a18,
        const unsigned __int16 *a19,
        const unsigned __int16 *a20,
        __int64 a21,
        __int64 a22,
        const unsigned __int16 *a23,
        const unsigned __int16 *a24,
        const unsigned __int16 *a25,
        const unsigned __int16 *a26)
{
  __int64 v26; // rcx
  int v28; // edx
  __int64 v29; // rax
  ULONG v30; // r11d
  const wchar_t *v31; // r8
  const wchar_t *v32; // rax
  __int64 v33; // rax
  int v34; // r10d
  const wchar_t *v35; // rax
  __int64 v36; // rax
  int v37; // r10d
  const wchar_t *v38; // rax
  __int64 v39; // rax
  int v40; // r10d
  const wchar_t *v41; // rax
  __int64 v42; // rax
  int v43; // r10d
  const wchar_t *v44; // rax
  __int64 v45; // rax
  int v46; // r10d
  const wchar_t *v47; // rax
  __int64 v48; // rax
  int v49; // r10d
  const wchar_t *v50; // rax
  __int64 v51; // rax
  int v52; // r10d
  const wchar_t *v53; // rax
  __int64 v54; // rax
  int v55; // r10d
  const wchar_t *v56; // rax
  __int64 v57; // rax
  int v58; // r9d
  const wchar_t *v59; // rax
  __int64 v60; // rax
  int v61; // r10d
  const wchar_t *v62; // rax
  __int64 v63; // rax
  int v64; // r10d
  const wchar_t *v65; // rax
  __int64 v66; // rax
  int v67; // r10d
  const wchar_t *v68; // rax
  __int64 v69; // rax
  int v70; // r10d
  const wchar_t *v71; // rax
  bool v72; // zf
  struct _EVENT_DATA_DESCRIPTOR UserData; // [rsp+20h] [rbp-E0h] BYREF
  const wchar_t *v75; // [rsp+30h] [rbp-D0h]
  int v76; // [rsp+38h] [rbp-C8h]
  int v77; // [rsp+3Ch] [rbp-C4h]
  const wchar_t *v78; // [rsp+40h] [rbp-C0h]
  int v79; // [rsp+48h] [rbp-B8h]
  int v80; // [rsp+4Ch] [rbp-B4h]
  const wchar_t *v81; // [rsp+50h] [rbp-B0h]
  int v82; // [rsp+58h] [rbp-A8h]
  int v83; // [rsp+5Ch] [rbp-A4h]
  const wchar_t *v84; // [rsp+60h] [rbp-A0h]
  int v85; // [rsp+68h] [rbp-98h]
  int v86; // [rsp+6Ch] [rbp-94h]
  const wchar_t *v87; // [rsp+70h] [rbp-90h]
  int v88; // [rsp+78h] [rbp-88h]
  int v89; // [rsp+7Ch] [rbp-84h]
  const wchar_t *v90; // [rsp+80h] [rbp-80h]
  int v91; // [rsp+88h] [rbp-78h]
  int v92; // [rsp+8Ch] [rbp-74h]
  const wchar_t *v93; // [rsp+90h] [rbp-70h]
  int v94; // [rsp+98h] [rbp-68h]
  int v95; // [rsp+9Ch] [rbp-64h]
  char *v96; // [rsp+A0h] [rbp-60h]
  __int64 v97; // [rsp+A8h] [rbp-58h]
  const wchar_t *v98; // [rsp+B0h] [rbp-50h]
  int v99; // [rsp+B8h] [rbp-48h]
  int v100; // [rsp+BCh] [rbp-44h]
  char *v101; // [rsp+C0h] [rbp-40h]
  __int64 v102; // [rsp+C8h] [rbp-38h]
  char *v103; // [rsp+D0h] [rbp-30h]
  __int64 v104; // [rsp+D8h] [rbp-28h]
  char *v105; // [rsp+E0h] [rbp-20h]
  __int64 v106; // [rsp+E8h] [rbp-18h]
  char *v107; // [rsp+F0h] [rbp-10h]
  __int64 v108; // [rsp+F8h] [rbp-8h]
  char *v109; // [rsp+100h] [rbp+0h]
  __int64 v110; // [rsp+108h] [rbp+8h]
  char *v111; // [rsp+110h] [rbp+10h]
  __int64 v112; // [rsp+118h] [rbp+18h]
  const wchar_t *v113; // [rsp+120h] [rbp+20h]
  int v114; // [rsp+128h] [rbp+28h]
  int v115; // [rsp+12Ch] [rbp+2Ch]
  const wchar_t *v116; // [rsp+130h] [rbp+30h]
  int v117; // [rsp+138h] [rbp+38h]
  int v118; // [rsp+13Ch] [rbp+3Ch]
  __int64 v119; // [rsp+140h] [rbp+40h]
  __int64 v120; // [rsp+148h] [rbp+48h]
  __int64 v121; // [rsp+150h] [rbp+50h]
  __int64 v122; // [rsp+158h] [rbp+58h]
  const wchar_t *v123; // [rsp+160h] [rbp+60h]
  int v124; // [rsp+168h] [rbp+68h]
  int v125; // [rsp+16Ch] [rbp+6Ch]
  const wchar_t *v126; // [rsp+170h] [rbp+70h]
  int v127; // [rsp+178h] [rbp+78h]
  int v128; // [rsp+17Ch] [rbp+7Ch]
  const wchar_t *v129; // [rsp+180h] [rbp+80h]
  int v130; // [rsp+188h] [rbp+88h]
  int v131; // [rsp+18Ch] [rbp+8Ch]
  const wchar_t *v132; // [rsp+190h] [rbp+90h]
  int v133; // [rsp+198h] [rbp+98h]
  int v134; // [rsp+19Ch] [rbp+9Ch]

  v26 = -1i64;
  v28 = 10;
  if ( a3 )
  {
    v29 = -1i64;
    do
      ++v29;
    while ( a3[v29] );
    v30 = 2 * v29 + 2;
  }
  else
  {
    v30 = 10;
  }
  UserData.Size = v30;
  v31 = L"NULL";
  UserData.Reserved = 0;
  v32 = L"NULL";
  if ( a3 )
    v32 = a3;
  UserData.Ptr = (ULONGLONG)v32;
  if ( a4 )
  {
    v33 = -1i64;
    do
      ++v33;
    while ( a4[v33] );
    v34 = 2 * v33 + 2;
  }
  else
  {
    v34 = 10;
  }
  v76 = v34;
  v35 = L"NULL";
  v77 = 0;
  if ( a4 )
    v35 = a4;
  v75 = v35;
  if ( a5 )
  {
    v36 = -1i64;
    do
      ++v36;
    while ( a5[v36] );
    v37 = 2 * v36 + 2;
  }
  else
  {
    v37 = 10;
  }
  v79 = v37;
  v38 = L"NULL";
  v80 = 0;
  if ( a5 )
    v38 = a5;
  v78 = v38;
  if ( a6 )
  {
    v39 = -1i64;
    do
      ++v39;
    while ( a6[v39] );
    v40 = 2 * v39 + 2;
  }
  else
  {
    v40 = 10;
  }
  v82 = v40;
  v41 = L"NULL";
  v83 = 0;
  if ( a6 )
    v41 = a6;
  v81 = v41;
  if ( a7 )
  {
    v42 = -1i64;
    do
      ++v42;
    while ( a7[v42] );
    v43 = 2 * v42 + 2;
  }
  else
  {
    v43 = 10;
  }
  v85 = v43;
  v44 = L"NULL";
  v86 = 0;
  if ( a7 )
    v44 = a7;
  v84 = v44;
  if ( a8 )
  {
    v45 = -1i64;
    do
      ++v45;
    while ( a8[v45] );
    v46 = 2 * v45 + 2;
  }
  else
  {
    v46 = 10;
  }
  v88 = v46;
  v47 = L"NULL";
  v89 = 0;
  if ( a8 )
    v47 = a8;
  v87 = v47;
  if ( a9 )
  {
    v48 = -1i64;
    do
      ++v48;
    while ( a9[v48] );
    v49 = 2 * v48 + 2;
  }
  else
  {
    v49 = 10;
  }
  v91 = v49;
  v50 = L"NULL";
  v92 = 0;
  if ( a9 )
    v50 = a9;
  v90 = v50;
  if ( a10 )
  {
    v51 = -1i64;
    do
      ++v51;
    while ( a10[v51] );
    v52 = 2 * v51 + 2;
  }
  else
  {
    v52 = 10;
  }
  v94 = v52;
  v53 = L"NULL";
  v95 = 0;
  if ( a10 )
    v53 = a10;
  v97 = 4i64;
  v93 = v53;
  v96 = &a11;
  if ( a12 )
  {
    v54 = -1i64;
    do
      ++v54;
    while ( a12[v54] );
    v55 = 2 * v54 + 2;
  }
  else
  {
    v55 = 10;
  }
  v99 = v55;
  v56 = L"NULL";
  if ( a12 )
    v56 = a12;
  v100 = 0;
  v98 = v56;
  v101 = &a13;
  v103 = &a14;
  v105 = &a15;
  v107 = &a16;
  v109 = &a17;
  v111 = &a18;
  v102 = 4i64;
  v104 = 4i64;
  v106 = 4i64;
  v108 = 4i64;
  v110 = 4i64;
  v112 = 4i64;
  if ( a19 )
  {
    v57 = -1i64;
    do
      ++v57;
    while ( a19[v57] );
    v58 = 2 * v57 + 2;
  }
  else
  {
    v58 = 10;
  }
  v114 = v58;
  v59 = L"NULL";
  if ( a19 )
    v59 = a19;
  v115 = 0;
  v113 = v59;
  if ( a20 )
  {
    v60 = -1i64;
    do
      ++v60;
    while ( a20[v60] );
    v61 = 2 * v60 + 2;
  }
  else
  {
    v61 = 10;
  }
  v117 = v61;
  v62 = L"NULL";
  v118 = 0;
  if ( a20 )
    v62 = a20;
  v120 = 8i64;
  v116 = v62;
  v119 = a21;
  v121 = a22;
  v122 = 8i64;
  if ( a23 )
  {
    v63 = -1i64;
    do
      ++v63;
    while ( a23[v63] );
    v64 = 2 * v63 + 2;
  }
  else
  {
    v64 = 10;
  }
  v124 = v64;
  v65 = L"NULL";
  v125 = 0;
  if ( a23 )
    v65 = a23;
  v123 = v65;
  if ( a24 )
  {
    v66 = -1i64;
    do
      ++v66;
    while ( a24[v66] );
    v67 = 2 * v66 + 2;
  }
  else
  {
    v67 = 10;
  }
  v127 = v67;
  v68 = L"NULL";
  v128 = 0;
  if ( a24 )
    v68 = a24;
  v126 = v68;
  if ( a25 )
  {
    v69 = -1i64;
    do
      ++v69;
    while ( a25[v69] );
    v70 = 2 * v69 + 2;
  }
  else
  {
    v70 = 10;
  }
  v130 = v70;
  v71 = L"NULL";
  v131 = 0;
  if ( a25 )
    v71 = a25;
  v129 = v71;
  v72 = a26 == 0i64;
  if ( a26 )
  {
    do
      ++v26;
    while ( a26[v26] );
    v28 = 2 * v26 + 2;
    v72 = a26 == 0i64;
  }
  if ( !v72 )
    v31 = a26;
  v133 = v28;
  v132 = v31;
  v134 = 0;
  return EventWrite(Microsoft_Windows_DNSServerHandle, &DNS_EVENT_MODIFY_SKD, 0x18u, &UserData);
}
