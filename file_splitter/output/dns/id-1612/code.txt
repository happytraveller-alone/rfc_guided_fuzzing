Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 1612
// Total lines: 151

//----- (00000001400CBA24) ----------------------------------------------------
__int64 __fastcall Zone_CheckZoneFilter(__int64 a1, __int64 a2, __int64 a3)
{
  int v3; // eax
  __int64 v4; // rsi
  unsigned int v6; // ebx
  int v7; // ecx
  bool v8; // zf
  __int64 v9; // rcx
  bool v10; // zf
  __int64 v11; // rcx
  const char *v12; // r9

  v3 = *(_DWORD *)(a2 + 8);
  v4 = a2;
  v6 = 1;
  if ( !v3 && !*(_QWORD *)(a2 + 16) && !*(_QWORD *)(a2 + 24) )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x10) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0xFu, (__int64)&WPP_e9bd1dc2a46f305bdfd2287edb3f40c9_Traceguids);
    }
    goto LABEL_53;
  }
  a2 = *(_QWORD *)(a2 + 16);
  a3 = 256i64;
  if ( a2 )
    v3 |= 0x100u;
  if ( (v3 & 0x3C00) != 0 )
    v3 |= 0x100u;
  if ( !v3 )
    goto LABEL_53;
  if ( (v3 & 0x30) != 0 )
  {
    if ( (*(_BYTE *)(a1 + 396) & 2) != 0 )
    {
      if ( (v3 & 0x20) == 0 )
        goto LABEL_53;
    }
    else if ( (v3 & 0x10) == 0 )
    {
      goto LABEL_53;
    }
  }
  if ( (v3 & 0xC7) != 0 )
  {
    v7 = *(_DWORD *)(a1 + 372);
    if ( v7 == 1 )
    {
      v8 = (v3 & 1) == 0;
      goto LABEL_21;
    }
    if ( v7 == 3 )
    {
      if ( (v3 & 0x80u) == 0 )
        goto LABEL_53;
      goto LABEL_31;
    }
    if ( v7 != 2 )
    {
      if ( v7 == 4 )
        v8 = (v3 & 0x40) == 0;
      else
        v8 = (v3 & 4) == 0;
LABEL_21:
      if ( v8 )
        goto LABEL_53;
      goto LABEL_31;
    }
    if ( (v3 & 2) == 0 )
      goto LABEL_53;
  }
LABEL_31:
  if ( (*(_BYTE *)(a1 + 396) & 4) != 0 && (v3 & 8) == 0 )
    goto LABEL_53;
  if ( (v3 & 0x300) != 0 )
  {
    if ( (*(_BYTE *)(a1 + 388) & 1) != 0 )
    {
      if ( (v3 & 0x100) == 0 )
        goto LABEL_53;
    }
    else if ( (v3 & 0x200) == 0 )
    {
      goto LABEL_53;
    }
  }
  if ( (v3 & 0x3C00) == 0 )
    goto LABEL_49;
  v9 = *(_QWORD *)(a1 + 848);
  if ( !v9 )
    goto LABEL_48;
  if ( (*(_BYTE *)(v9 + 100) & 4) != 0 )
  {
    v10 = (v3 & 0x400) == 0;
    goto LABEL_42;
  }
  if ( (*(_BYTE *)(v9 + 100) & 8) != 0 )
  {
    v10 = (v3 & 0x800) == 0;
    goto LABEL_42;
  }
  if ( (*(_BYTE *)(v9 + 100) & 2) != 0 )
  {
LABEL_48:
    if ( (v3 & 0x2000) != 0 )
      goto LABEL_49;
LABEL_53:
    v6 = 0;
    goto LABEL_54;
  }
  v10 = (v3 & 0x1000) == 0;
LABEL_42:
  if ( v10 )
    goto LABEL_53;
LABEL_49:
  if ( a2 )
  {
    if ( (*(_BYTE *)(a1 + 388) & 1) == 0 )
      goto LABEL_53;
    v11 = *(_QWORD *)(a1 + 848);
    if ( !v11 || _stricmp(*(const char **)(v11 + 24), (const char *)a2) )
      goto LABEL_53;
  }
LABEL_54:
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x10) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    v12 = "FAILS";
    if ( v6 )
      v12 = "PASSES";
    WPP_SF_sdsDss(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      a2,
      a3,
      v12,
      *(_DWORD *)(a1 + 372),
      *(_QWORD *)(a1 + 16),
      *(_DWORD *)(v4 + 8),
      *(_QWORD *)(v4 + 16),
      *(_QWORD *)(v4 + 24));
  }
  return v6;
}
// 1400CBB71: conditional instruction was optimized away because rcx.8!=0
// 1400CBB83: conditional instruction was optimized away because rcx.8!=0
// 1400CBC1D: variable 'a2' is possibly undefined
// 1400CBC1D: variable 'a3' is possibly undefined
