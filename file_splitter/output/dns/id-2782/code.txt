Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 2782
// Total lines: 256

//----- (0000000140147E3C) ----------------------------------------------------
__int64 __fastcall CDnsPolicyOrder::AddPolicyProcessingOrder(const void ****this, struct CDnsPolicy *a2)
{
  int v4; // esi
  __int64 v5; // rcx
  unsigned int v6; // ebx
  _QWORD *ZoneName; // rdi
  __int64 PolicyName; // rax
  bool v9; // cf
  __int64 v10; // rax
  __int64 v11; // r15
  const void ***v12; // rbx
  const void ***i; // rax
  const void ****v14; // rdi
  const void ***v15; // r8
  const void ***v16; // rax
  __int64 v17; // r15
  const void ***v18; // rdx
  unsigned __int64 v19; // rax
  unsigned __int64 v20; // rax
  unsigned __int64 v21; // rdx
  unsigned __int64 v22; // rdx
  const void ***v23; // rcx
  const void ***v24; // rdx
  unsigned __int64 v25; // rax
  unsigned __int64 v26; // rax
  unsigned __int64 v27; // rdx
  unsigned __int64 v28; // rdx
  const void ***v29; // rax
  __int64 v30; // rcx
  __int64 v31; // rcx
  const void *v32; // rax
  const WCHAR *v33; // r14
  __int64 v34; // rax
  int updated; // r14d
  __int64 v36; // rax
  __int64 v38; // [rsp+38h] [rbp-59h] BYREF
  __int64 v39[2]; // [rsp+40h] [rbp-51h] BYREF
  __int64 v40; // [rsp+50h] [rbp-41h] BYREF
  void *v41[3]; // [rsp+58h] [rbp-39h] BYREF
  unsigned __int64 v42; // [rsp+70h] [rbp-21h]
  void *v43[3]; // [rsp+80h] [rbp-11h] BYREF
  unsigned __int64 v44; // [rsp+98h] [rbp+7h]

  v39[1] = -2i64;
  v39[0] = (__int64)a2;
  v4 = 0;
  LODWORD(v38) = 0;
  v5 = *((_QWORD *)a2 + 18);
  if ( v5 )
  {
    v6 = Policy_AcquireWriteLock((__int64 *)(v5 + 296), (unsigned int)a2);
    if ( v6 )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        ZoneName = (_QWORD *)CDnsPolicy::GetZoneName((__int64)a2, (__int64)v41);
        PolicyName = CDnsPolicy::GetPolicyName((const void **)a2, (__int64)v43);
        LOBYTE(v4) = 3;
        LODWORD(v38) = 3;
        if ( ZoneName[3] >= 0x10ui64 )
          ZoneName = (_QWORD *)*ZoneName;
        if ( *(_QWORD *)(PolicyName + 24) >= 8ui64 )
          PolicyName = *(_QWORD *)PolicyName;
        WPP_SF_Ssd(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x62u,
          (__int64)&WPP_42dbba61d26d3062f1ad4e084cdc81fe_Traceguids,
          (const unsigned __int16 *)PolicyName,
          (__int64)ZoneName);
      }
      if ( (v4 & 2) != 0 )
      {
        LOBYTE(v4) = v4 & 0xFD;
        if ( v44 >= 8 )
          operator delete(v43[0]);
        v44 = 7i64;
        v43[2] = 0i64;
        LOWORD(v43[0]) = 0;
      }
      if ( (v4 & 1) != 0 )
      {
        v9 = v42 < 0x10;
        goto LABEL_17;
      }
      return v6;
    }
LABEL_28:
    v11 = *((unsigned int *)a2 + 26);
    v12 = (const void ***)(*std::vector<CDnsPolicy *>::insert<CDnsPolicy * &>(
                              this,
                              &v40,
                              (__int64)&(*this)[v11 - 1],
                              v39)
                         + 8i64);
    for ( i = v12; i != this[1]; ++i )
      ++*((_DWORD *)*i + 26);
    if ( (unsigned int)CDnsPolicy::IsPolicyNegativeType(a2) )
    {
      v14 = this + 4;
      v15 = this[4];
      if ( v15 == this[5] )
      {
LABEL_36:
        v16 = this[5];
        if ( v39 >= (__int64 *)v16 || *v14 > (const void ***)v39 )
        {
          v24 = this[6];
          if ( v16 == v24 )
          {
            v25 = v16 - *v14;
            if ( v25 > 0x1FFFFFFFFFFFFFFEi64 )
              std::vector<std::vector<unsigned char> *,std::allocator<std::vector<unsigned char> *>>::_Xlen();
            v26 = v25 + 1;
            v27 = v24 - *v14;
            if ( v26 > v27 )
            {
              if ( 0x1FFFFFFFFFFFFFFFi64 - (v27 >> 1) >= v27 )
                v28 = (v27 >> 1) + v27;
              else
                v28 = 0i64;
              if ( v28 < v26 )
                v28 = v26;
              std::vector<unsigned short *>::reserve((__int64)(this + 4), v28);
            }
          }
          v29 = this[5];
          if ( v29 )
            *v29 = (const void **)a2;
        }
        else
        {
          v17 = ((char *)v39 - (char *)*v14) >> 3;
          v18 = this[6];
          if ( v16 == v18 )
          {
            v19 = v16 - *v14;
            if ( v19 > 0x1FFFFFFFFFFFFFFEi64 )
              std::vector<std::vector<unsigned char> *,std::allocator<std::vector<unsigned char> *>>::_Xlen();
            v20 = v19 + 1;
            v21 = v18 - *v14;
            if ( v20 > v21 )
            {
              if ( 0x1FFFFFFFFFFFFFFFi64 - (v21 >> 1) >= v21 )
                v22 = (v21 >> 1) + v21;
              else
                v22 = 0i64;
              if ( v22 < v20 )
                v22 = v20;
              std::vector<unsigned short *>::reserve((__int64)(this + 4), v22);
            }
          }
          v23 = this[5];
          if ( v23 )
            *v23 = (*v14)[v17];
        }
        ++this[5];
      }
      else
      {
        while ( *((_DWORD *)*v15 + 26) <= (unsigned int)v11 )
        {
          if ( ++v15 == this[5] )
            goto LABEL_36;
        }
        std::vector<CDnsPolicy *>::insert<CDnsPolicy * &>(this + 4, &v38, (__int64)v15, v39);
      }
    }
    v30 = *((_QWORD *)a2 + 18);
    if ( v30 )
      v31 = *(_QWORD *)(v30 + 296);
    else
      v31 = g_hServerLevelNegativePolicyLock;
    Lock_ReleaseWrite(v31);
    for ( ; v12 != this[1]; ++v12 )
    {
      v32 = (*v12)[18];
      if ( v32 )
      {
        if ( *((_DWORD *)v32 + 93) )
          v33 = (const WCHAR *)*((_QWORD *)v32 + 3);
        else
          v33 = L"..Cache";
      }
      else
      {
        v33 = 0i64;
      }
      v34 = CDnsPolicy::GetPolicyName(*v12, (__int64)v41);
      if ( *(_QWORD *)(v34 + 24) >= 8ui64 )
        v34 = *(_QWORD *)v34;
      updated = UpdateProcessingOrderInRegistry(
                  v33,
                  (const unsigned __int16 *)v34,
                  *((_DWORD *)*v12 + 21),
                  *((_DWORD *)*v12 + 26));
      if ( v42 >= 8 )
        operator delete(v41[0]);
      if ( updated )
      {
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
        {
          v36 = CDnsPolicy::GetPolicyName(*v12, (__int64)v41);
          v4 |= 8u;
          LODWORD(v38) = v4;
          if ( *(_QWORD *)(v36 + 24) >= 8ui64 )
            v36 = *(_QWORD *)v36;
          WPP_SF_SD(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x64u,
            (__int64)&WPP_42dbba61d26d3062f1ad4e084cdc81fe_Traceguids,
            (const unsigned __int16 *)v36);
        }
        if ( (v4 & 8) != 0 )
        {
          v4 &= ~8u;
          if ( v42 >= 8 )
            operator delete(v41[0]);
        }
      }
    }
    return 0;
  }
  v6 = Policy_AcquireWriteLock(&g_hServerLevelNegativePolicyLock, (unsigned int)a2);
  if ( !v6 )
    goto LABEL_28;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
  {
    v10 = CDnsPolicy::GetPolicyName((const void **)a2, (__int64)v41);
    LOBYTE(v4) = 4;
    LODWORD(v38) = 4;
    if ( *(_QWORD *)(v10 + 24) >= 8ui64 )
      v10 = *(_QWORD *)v10;
    WPP_SF_SD(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x63u,
      (__int64)&WPP_42dbba61d26d3062f1ad4e084cdc81fe_Traceguids,
      (const unsigned __int16 *)v10);
  }
  if ( (v4 & 4) != 0 )
  {
    v9 = v42 < 8;
LABEL_17:
    if ( !v9 )
      operator delete(v41[0]);
  }
  return v6;
}
// 140184CA8: using guessed type void __stdcall operator delete(void *);
// 1401B91C8: using guessed type __int64 g_hServerLevelNegativePolicyLock;
