Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 2620
// Total lines: 326

//----- (0000000140135830) ----------------------------------------------------
__int64 __fastcall CDnsPolicyManager::FindPolicy(
        __int64 a1,
        __int64 a2,
        __int64 a3,
        const void ***a4,
        int a5,
        __int64 a6)
{
  const void ***v6; // r13
  __int64 v7; // r12
  unsigned __int16 v8; // r14
  int v9; // ebx
  CDnsClientSubnetRecordsTrie *v10; // rcx
  const wchar_t *v11; // rax
  __int64 PolicyLock; // rax
  CDnsClientSubnetRecordsTrie **v13; // rdx
  __int64 v14; // r8
  __int64 v15; // r15
  unsigned int v16; // r13d
  CDnsClientSubnetRecordsTrie *v17; // r10
  const char *PolicyTypeString; // rax
  __int64 v19; // r10
  __int64 v20; // rcx
  __int64 v21; // r15
  __int64 v22; // r12
  const char *CriteriaTypeString; // rax
  __int64 v24; // r10
  __int64 v25; // rdx
  __int64 v26; // r8
  const void **v27; // rcx
  int v28; // r13d
  __int64 v29; // rax
  const wchar_t *v30; // r14
  int v31; // eax
  const char *v32; // rax
  __int64 v33; // rdx
  __int64 v34; // r8
  _QWORD *v35; // rax
  const void ***v36; // r14
  const void **v37; // rcx
  int v38; // edi
  const wchar_t *v39; // rax
  __int64 v41; // [rsp+38h] [rbp-69h]
  __int64 v42; // [rsp+40h] [rbp-61h]
  unsigned int v43; // [rsp+4Ch] [rbp-55h] BYREF
  unsigned int v44; // [rsp+50h] [rbp-51h] BYREF
  int v45; // [rsp+54h] [rbp-4Dh]
  const void ***v46; // [rsp+58h] [rbp-49h]
  __int64 v47; // [rsp+60h] [rbp-41h]
  __int64 v48; // [rsp+68h] [rbp-39h]
  __int64 v49; // [rsp+70h] [rbp-31h]
  __int64 v50; // [rsp+78h] [rbp-29h]
  void *v51[3]; // [rsp+80h] [rbp-21h] BYREF
  unsigned __int64 v52; // [rsp+98h] [rbp-9h]

  v50 = -2i64;
  v6 = a4;
  v46 = a4;
  v49 = a3;
  v7 = a2;
  v48 = a2;
  v8 = 0;
  v9 = 0;
  v45 = 0;
  v10 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
  {
    if ( a6 )
      v11 = *(const wchar_t **)(a6 + 24);
    else
      v11 = L"Not Applicable";
    WPP_SF_dqS(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x5Au,
      (__int64)&WPP_bbbcc621566c3408fe84d6a85874d543_Traceguids,
      a5,
      a2,
      (__int64)v11);
  }
  v44 = 0;
  PolicyLock = CDnsPolicyManager::GetPolicyLock((__int64)v10, a5, a6);
  v15 = PolicyLock;
  v47 = PolicyLock;
  if ( !PolicyLock )
  {
    v16 = 1168;
    v17 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
    {
      if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0 && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        PolicyTypeString = GetPolicyTypeString(a5);
        WPP_SF_s(
          *(_QWORD *)(v19 + 56),
          0x5Bu,
          (__int64)&WPP_bbbcc621566c3408fe84d6a85874d543_Traceguids,
          PolicyTypeString);
        v17 = WPP_GLOBAL_Control;
      }
      goto LABEL_71;
    }
    goto LABEL_83;
  }
  v43 = -1;
  if ( (unsigned int)acquireRead(PolicyLock, 0xFFFFFFFF, &v43) == -1 )
  {
    v16 = 9980;
LABEL_15:
    v17 = WPP_GLOBAL_Control;
    goto LABEL_71;
  }
  v44 = 1;
  if ( a6 )
  {
    CDnsPolicyManager::InitializeZonePolicyCriteriaSearchTrees(v20, a5, a6);
    v21 = *(_QWORD *)(*(_QWORD *)(a6 + 208) + 16i64 * a5);
  }
  else if ( a5 )
  {
    switch ( a5 )
    {
      case 2:
        v21 = g_PolicyCriteriaSearchRootsDU;
        break;
      case 1:
        v21 = g_PolicyCriteriaSearchRootsXfr;
        break;
      case 3:
        v21 = g_PolicyCriteriaSearchRootsRecursion;
        break;
      case 4:
        v21 = g_PolicyCriteriaSearchRootsRRLExceptionlist;
        break;
      default:
LABEL_29:
        v16 = 9972;
        goto LABEL_15;
    }
  }
  else
  {
    v21 = g_PolicyCriteriaSearchRootsQP;
  }
  if ( !v21 )
    goto LABEL_29;
  LOWORD(v43) = 0;
  v17 = WPP_GLOBAL_Control;
  while ( 1 )
  {
    v22 = *(_QWORD *)(v21 + 8i64 * v8);
    if ( !v22 )
    {
      v13 = &WPP_GLOBAL_Control;
      if ( v17 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)v17 + 17) & 0x400000) != 0
        && *((_BYTE *)v17 + 65) >= 5u )
      {
        CriteriaTypeString = GetCriteriaTypeString(PolicyCriteriaOrder[v8]);
        WPP_SF_sdSS(*(_QWORD *)(v24 + 56), v25, v26, CriteriaTypeString, a5, v25, v26);
        v17 = WPP_GLOBAL_Control;
      }
      goto LABEL_54;
    }
    v16 = (*(__int64 (__fastcall **)(__int64, __int64, __int64, const void ***, __int64, int))(*(_QWORD *)v22 + 120i64))(
            v22,
            v48,
            v49,
            v6,
            v47,
            a5);
    if ( v16 )
      break;
    v17 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
    {
      v6 = v46;
    }
    else
    {
      v27 = *v46;
      if ( *v46 )
        v28 = *((_DWORD *)v27 + 26);
      else
        v28 = -1;
      if ( v27 )
      {
        v29 = CDnsPolicy::Name(v27, (__int64)v51);
        v30 = (const wchar_t *)v29;
        v9 |= 1u;
        v45 = v9;
        if ( *(_QWORD *)(v29 + 24) >= 8ui64 )
          v30 = *(const wchar_t **)v29;
      }
      else
      {
        v30 = L"NULL";
      }
      v31 = (**(__int64 (__fastcall ***)(__int64))v22)(v22);
      v32 = GetCriteriaTypeString(v31);
      LODWORD(v42) = v28;
      v6 = v46;
      WPP_SF_qsqSd(*((_QWORD *)WPP_GLOBAL_Control + 7), v33, v34, v22, v32, *v46, v30, v42);
      v17 = WPP_GLOBAL_Control;
      v8 = v43;
    }
    if ( (v9 & 1) != 0 )
    {
      v9 &= ~1u;
      v45 = v9;
      if ( v52 >= 8 )
      {
        operator delete(v51[0]);
        v17 = WPP_GLOBAL_Control;
      }
    }
    if ( a5 == 4 && *v6 )
    {
      if ( v17 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)v17 + 17) & 0x400000) != 0
        && *((_BYTE *)v17 + 65) >= 4u )
      {
        v35 = (_QWORD *)CDnsPolicy::Name(*v6, (__int64)v51);
        v9 |= 2u;
        v45 = v9;
        if ( v35[3] >= 8ui64 )
          v35 = (_QWORD *)*v35;
        WPP_SF_qS(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x5Eu,
          (__int64)&WPP_bbbcc621566c3408fe84d6a85874d543_Traceguids,
          *v6,
          v35);
        v17 = WPP_GLOBAL_Control;
      }
      if ( (v9 & 2) != 0 )
      {
        LOBYTE(v9) = v9 & 0xFD;
        if ( v52 >= 8 )
        {
          operator delete(v51[0]);
          v17 = WPP_GLOBAL_Control;
        }
      }
LABEL_69:
      v16 = 0;
      goto LABEL_70;
    }
LABEL_54:
    LOWORD(v43) = ++v8;
    if ( v8 >= 7u )
      goto LABEL_69;
  }
  v17 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
    goto LABEL_82;
  if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0 && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
  {
    (**(void (__fastcall ***)(__int64))v22)(v22);
    WPP_SF_Dd(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x5Fu,
      (__int64)&WPP_bbbcc621566c3408fe84d6a85874d543_Traceguids,
      v16);
    v17 = WPP_GLOBAL_Control;
  }
LABEL_70:
  v7 = v48;
LABEL_71:
  if ( v17 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)v17 + 17) & 0x400000) != 0
    && *((_BYTE *)v17 + 65) >= 4u )
  {
    v36 = v46;
    v37 = *v46;
    if ( *v46 )
      v38 = *((_DWORD *)v37 + 26);
    else
      v38 = -1;
    if ( v37 )
    {
      v39 = (const wchar_t *)CDnsPolicy::Name(v37, (__int64)v51);
      LOBYTE(v9) = v9 | 4;
      v17 = WPP_GLOBAL_Control;
      if ( *((_QWORD *)v39 + 3) >= 8ui64 )
        v39 = *(const wchar_t **)v39;
    }
    else
    {
      v39 = L"NULL";
    }
    LODWORD(v41) = v38;
    WPP_SF_qqSd(*((_QWORD *)v17 + 7), (__int64)v13, v14, v7, *v36, v39, v41);
  }
LABEL_82:
  v15 = v47;
LABEL_83:
  if ( (v9 & 4) != 0 && v52 >= 8 )
    operator delete(v51[0]);
  if ( v44 )
  {
    v44 = -1;
    releaseRead(v15, &v44, 1);
  }
  return v16;
}
// 1401358E9: variable 'v10' is possibly undefined
// 140135945: variable 'v19' is possibly undefined
// 1401359E1: variable 'v20' is possibly undefined
// 140135A90: variable 'v24' is possibly undefined
// 140135A94: variable 'v25' is possibly undefined
// 140135A94: variable 'v26' is possibly undefined
// 140135B8D: variable 'v33' is possibly undefined
// 140135B8D: variable 'v34' is possibly undefined
// 140135B8D: variable 'v42' is possibly undefined
// 140135D59: variable 'v13' is possibly undefined
// 140135D59: variable 'v14' is possibly undefined
// 140135D59: variable 'v41' is possibly undefined
// 140184CA8: using guessed type void __stdcall operator delete(void *);
// 140185140: using guessed type __int64 (__fastcall *_guard_dispatch_icall_fptr)(_QWORD, _QWORD);
// 140194918: using guessed type wchar_t aNotApplicable[15];
// 1401B91D0: using guessed type _DWORD PolicyCriteriaOrder[7];
