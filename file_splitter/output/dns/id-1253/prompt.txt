Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 1253
// Total lines: 332

//----- (00000001400A227C) ----------------------------------------------------
__int64 __fastcall loadPropertyByIndex(unsigned int a1, int a2)
{
  unsigned int v2; // esi
  BYTE *v4; // r8
  char **v5; // rdi
  DWORD LastError; // ebx
  int v7; // eax
  char *v8; // rbx
  CDnsClientSubnetRecordsTrie *v9; // rcx
  unsigned __int16 v10; // dx
  const char *v11; // rax
  char *v12; // rbx
  char *v13; // rcx
  CDnsClientSubnetRecordsTrie *v14; // rcx
  unsigned __int16 v15; // dx
  const char *v16; // rax
  char *v17; // rbx
  char *v18; // rcx
  CDnsClientSubnetRecordsTrie *v19; // rcx
  unsigned __int16 v20; // dx
  const char *v21; // r8
  unsigned int *AddrArray; // rax
  const unsigned __int16 *v23; // r8
  CDnsClientSubnetRecordsTrie *v24; // rcx
  unsigned __int16 v25; // dx
  unsigned int v26; // eax
  unsigned int v27; // edx
  unsigned __int16 v28; // dx
  char *v29; // rax
  char *v30; // rdx
  const char *LocalDnsName; // rax
  char *v32; // rbx
  __int64 v33; // rcx
  int v34; // r9d
  __int64 (__fastcall *v35)(); // rdx
  LPBYTE v37; // [rsp+20h] [rbp-20h]
  int v38; // [rsp+30h] [rbp-10h] BYREF
  LPBYTE v39; // [rsp+38h] [rbp-8h]
  DWORD v40; // [rsp+70h] [rbp+30h] BYREF
  unsigned int v41; // [rsp+78h] [rbp+38h] BYREF

  v41 = a2;
  v2 = 0;
  v40 = 0;
  v38 = 0;
  v4 = 0i64;
  v39 = 0i64;
  v5 = &(&ServerPropertyTable)[7 * a1];
  if ( !*v5 )
    return DWORDLONG_MAX;
  v7 = *((_DWORD *)v5 + 2);
  if ( v7 == 4 )
  {
    v23 = (const unsigned __int16 *)*v5;
    v41 = 0;
    v40 = 4;
    if ( (unsigned int)Reg_GetValue(0i64, 0i64, v23, 4, (LPBYTE)&v41, &v40) )
    {
      v26 = *((_DWORD *)v5 + 3);
      v41 = v26;
      v24 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
      {
        goto LABEL_54;
      }
      v25 = 16;
    }
    else
    {
      v2 = 1;
      v24 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
      {
        goto LABEL_53;
      }
      v25 = 15;
      v26 = v41;
    }
    LODWORD(v37) = v26;
    WPP_SF_sd(*((_QWORD *)v24 + 7), v25, (__int64)&WPP_44543417c05739f4a9c82c388f6d5836_Traceguids, *v5);
    v24 = WPP_GLOBAL_Control;
LABEL_53:
    v26 = v41;
LABEL_54:
    v27 = *((_DWORD *)v5 + 6);
    if ( !v27 && !*((_DWORD *)v5 + 7) || !v26 && *((_DWORD *)v5 + 8) )
      goto LABEL_69;
    if ( v26 >= v27 )
    {
      if ( v26 <= *((_DWORD *)v5 + 7) )
        goto LABEL_69;
      v26 = *((_DWORD *)v5 + 7);
      v2 = 0;
      v41 = v26;
      if ( v24 == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_BYTE *)v24 + 68) & 2) == 0
        || *((_BYTE *)v24 + 65) < 4u )
      {
        goto LABEL_69;
      }
      v28 = 18;
    }
    else
    {
      v26 = *((_DWORD *)v5 + 6);
      v41 = v26;
      v2 = 0;
      if ( v24 == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_BYTE *)v24 + 68) & 2) == 0
        || *((_BYTE *)v24 + 65) < 4u )
      {
        goto LABEL_69;
      }
      v28 = 17;
    }
    LODWORD(v37) = v26;
    WPP_SF_sd(*((_QWORD *)v24 + 7), v28, (__int64)&WPP_44543417c05739f4a9c82c388f6d5836_Traceguids, *v5);
    v26 = v41;
LABEL_69:
    v38 = 4;
    LODWORD(v39) = v26;
    goto LABEL_70;
  }
  if ( v7 != 34 )
  {
    switch ( v7 )
    {
      case -268435455:
        v16 = (const char *)Dns_StringCopyAllocate(*v5, 0, 2i64, 1);
        v17 = (char *)v16;
        if ( v16 )
        {
          v38 = -268435455;
          v39 = Reg_GetValueAllocate(0i64, 0i64, v16, -268435455, 0i64);
          Mem_Free(v17, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\srvcfg.c", 1788);
          v4 = v39;
          LOBYTE(v2) = v39 != 0i64;
          if ( v39 || (v18 = v5[2]) == 0i64 )
          {
            v19 = WPP_GLOBAL_Control;
            if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
              || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
            {
              goto LABEL_71;
            }
            v20 = 12;
          }
          else
          {
            v4 = (BYTE *)Dns_StringCopyAllocate(v18, 0, (unsigned int)((_DWORD)v39 + 1), (int)v39 + 1);
            v39 = v4;
            v19 = WPP_GLOBAL_Control;
            if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
              || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
            {
              goto LABEL_71;
            }
            v20 = 11;
          }
          WPP_SF_sS(
            *((_QWORD *)v19 + 7),
            v20,
            (__int64)&WPP_44543417c05739f4a9c82c388f6d5836_Traceguids,
            *v5,
            (__int64)v4);
          goto LABEL_70;
        }
        break;
      case -16777215:
        v11 = (const char *)Dns_StringCopyAllocate(*v5, 0, 2i64, 1);
        v12 = (char *)v11;
        if ( v11 )
        {
          v38 = -16777215;
          v39 = Reg_GetValueAllocate(0i64, 0i64, v11, -16777215, 0i64);
          Mem_Free(v12, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\srvcfg.c", 1846);
          v4 = v39;
          LOBYTE(v2) = v39 != 0i64;
          if ( v39 || (v13 = v5[2]) == 0i64 )
          {
            v14 = WPP_GLOBAL_Control;
            if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
              || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
            {
              goto LABEL_71;
            }
            v15 = 14;
          }
          else
          {
            v4 = (BYTE *)Dns_StringCopyAllocate(v13, 0, 2i64, 2);
            v39 = v4;
            v14 = WPP_GLOBAL_Control;
            if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
              || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
            {
              goto LABEL_71;
            }
            v15 = 13;
          }
          WPP_SF_ss(
            *((_QWORD *)v14 + 7),
            v15,
            (__int64)&WPP_44543417c05739f4a9c82c388f6d5836_Traceguids,
            *v5,
            (__int64)v4);
          goto LABEL_70;
        }
        break;
      case -16777209:
        v8 = (char *)Dns_StringCopyAllocate(*v5, 0, 2i64, 1);
        if ( v8 )
        {
          v38 = -16777209;
          v39 = Reg_GetValueAllocate(0i64, 0i64, v8, -16777209, 0i64);
          Mem_Free(v8, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\srvcfg.c", 1995);
          v4 = v39;
          LOBYTE(v2) = v39 != 0i64;
          v9 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            v10 = 19;
            v37 = v39;
LABEL_13:
            WPP_SF_sq(*((_QWORD *)v9 + 7), v10, (__int64)&WPP_44543417c05739f4a9c82c388f6d5836_Traceguids, *v5);
LABEL_70:
            v4 = v39;
            goto LABEL_71;
          }
          goto LABEL_71;
        }
        break;
      default:
        goto LABEL_71;
    }
    return 14;
  }
  v21 = *v5;
  v38 = 0x20000;
  AddrArray = Reg_GetAddrArrayEx(0i64, 0i64, v21, 0, 0i64);
  v39 = (LPBYTE)AddrArray;
  v4 = (BYTE *)AddrArray;
  LOBYTE(v2) = AddrArray != 0i64;
  v9 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    v10 = 10;
    v37 = (LPBYTE)AddrArray;
    goto LABEL_13;
  }
LABEL_71:
  v29 = v5[5];
  if ( v29 )
  {
    LODWORD(v29) = ((__int64 (__fastcall *)(int *, _QWORD, __int64, _QWORD, LPBYTE))v29)(&v38, a1, 1i64, v2, v37);
    if ( (_DWORD)v29 == 0x80000000 )
    {
      LastError = GetLastError();
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_sd(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x15u,
          (__int64)&WPP_44543417c05739f4a9c82c388f6d5836_Traceguids,
          *v5);
      }
      return LastError;
    }
    v4 = v39;
  }
  v30 = v5[6];
  if ( v30 && ((unsigned __int8)v29 & 1) == 0 )
  {
    if ( *((_DWORD *)v5 + 2) == 4 )
    {
      *(_DWORD *)v30 = (_DWORD)v39;
      if ( !_stricmp(*v5, "DisableNegativeCaching") && *(_DWORD *)v5[6] == 1 )
      {
        LocalDnsName = Dns_GetLocalDnsName();
        v32 = (char *)LocalDnsName;
        if ( (Microsoft_Windows_DNS_Server_ServiceEnableBits & 1) != 0 )
          Template_s(Microsoft_Windows_DNS_Server_ServiceHandle, &DNS_EVENT_NEGATIVE_CACHING_DISABLED, LocalDnsName);
        Mem_Free(v32, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\srvcfg.c", 2075);
      }
    }
    else
    {
      v33 = *(_QWORD *)v30;
      *(_QWORD *)v30 = v4;
      if ( v33 )
      {
        if ( *((_DWORD *)v5 + 2) == -16777209 || *((_DWORD *)v5 + 2) == -268435449 )
        {
          v34 = 2099;
          v35 = (__int64 (__fastcall *)())Dns_FreeStringArray;
        }
        else if ( *((_DWORD *)v5 + 2) == 34 )
        {
          v34 = 2103;
          v35 = DnsAddrArray_Free;
        }
        else
        {
          v34 = 2107;
          v35 = 0i64;
        }
        Timeout_FreeWithFunctionEx(v33, (__int64)v35, (__int64)"ds\\dns\\server\\server\\srvcfg.c", v34);
      }
    }
  }
  return 0;
}
// 1400A2750: variable 'v37' is possibly undefined
// 1401560E0: using guessed type __int64 __fastcall DnsAddrArray_Free();
// 140185140: using guessed type __int64 (__fastcall *_guard_dispatch_icall_fptr)(_QWORD, _QWORD);
// 140187798: using guessed type EVENT_DESCRIPTOR DNS_EVENT_NEGATIVE_CACHING_DISABLED;
// 1401B9140: using guessed type int Microsoft_Windows_DNS_Server_ServiceEnableBits;
##############################
Role: Let's assume that you are an advanced reverse engineer and you are reverse engineering a network driver using IDA Pro, and you are also familiar with the RFC documentation. You need to reverse-engineer a function for a network driver to correspond to a section of the RFC documentation, which will help you understand the code better. The driver you're reversing is Schannel.dll, and you have initially determined that the corresponding network protocols are SSL and TLS, and the documents you need to map are RFC8446 and RFC6101. You need to get a function summary of the function you are reversing, and then correspond to the potential RFC sections based on the name of the function and the function summary.
Function Background: The function is reverse engineered from the driver file Schannel.dll on Windows platform. Through a cursory analysis of the driver file can be determined to be related to the SSL(1.3), TLS(3.0) protocol, that is, with RFC8446, RFC6101 strong correlation.

Output Function Summary: Summarizes the function's functionality with several phrases instead of sentences, focuses on covering the function's control flow information, and highlights the protocol function points implemented by the function. Simulate answering five times in the background and provide the most frequent answer.

Retrieve document sections: giving matches for document sections(FunctionMatchRFCResult) that the code may related to. NOTE if the code is only business related(i.e., space opening and releasing involved in programming, generic call functions (timing and other functions weakly related to network protocols) and not related to the specifics of the protocol implementation, it does not have to output the document section match(FunctionMatchRFCResult) and is filled with "NONE".

Retrieve document sections Thinking Chain: The function code is matched with the RFC document section, and the thinking chain is provided to help you solve the problem better:
	1. Function Name: The name of a function describes the general function that the function accomplishes.
	2. Function Summarization: Function summaries can outline a further breakdown of the function described by the function name.
	3. Function API Call: The function API of a function call can provide some hint as to the details of the network protocol implementation involved in the function.
	4. Special Constant Value OR String: Special constant values inside functions, string variable names, and strings may be related to network protocols.
	5. Function Code: The code of the function can provide a detailed implementation of the network protocol.
Generate Function Information Collection with JSON Format:

{
	"FunctionIndex": "(FILL WITH "File count" with less than four bits are indexed with zeros to make up the four bits.)",
	"FunctionName": "(Full Function Code Name)",
	"FunctionSummarization": [
		"(Function Summary Phrase1)",
		"(Function Summary Phrase2)",
		"(...)"
	],
	"FunctionMatchRFCResult": [
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 1)",
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 2)",
		"(...)"
	],
}

ATTENTION: Remember YOU MUST ONLY output the Function Information Collection result.
