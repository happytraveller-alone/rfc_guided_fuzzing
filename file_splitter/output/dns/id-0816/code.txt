Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 816
// Total lines: 303

//----- (00000001400711F8) ----------------------------------------------------
void __fastcall Recurse_ProcessResponse(struct _DNS_MSGINFO *a1, struct in_addr **a2)
{
  __int64 v4; // rbx
  struct in_addr *v5; // rax
  CDnsClientSubnetRecordsTrie *v6; // rcx
  struct in_addr *v7; // r8
  char v8; // dl
  const char *v9; // rax
  const char *v10; // rax
  __int64 v11; // rax
  struct in_addr *v12; // rax
  struct in_addr *v13; // r9
  struct in_addr *v14; // rsi
  const char *v15; // rax
  __int64 v16; // rax
  __int64 v17; // rcx
  unsigned int v18; // r14d
  __int64 v19; // rdx
  __int64 v20; // r8
  int LastError; // eax
  __int64 v22; // rdx
  __int64 v23; // r8

  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x4000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
  {
    WPP_SF_qq(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x29u,
      (__int64)&WPP_045d5c95c5db3fcad9ea35acf5eb75d8_Traceguids,
      a1,
      *a2);
  }
  _InterlockedIncrement(&dword_1401C7E6C);
  v4 = *((_QWORD *)a1 + 157);
  if ( !v4 )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x4000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      WPP_SF_q(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x2Au,
        (__int64)&WPP_045d5c95c5db3fcad9ea35acf5eb75d8_Traceguids,
        a1);
    }
    return;
  }
  _InterlockedDecrement((volatile signed __int32 *)a1 + 918);
  v5 = *a2;
  if ( *(_BYTE *)(v4 + 1413) )
  {
    if ( v5[353].S_un.S_un_b.s_b2 )
    {
      _InterlockedIncrement(&dword_1401C7F14);
    }
    else if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
           && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x4000) != 0
           && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 3u )
    {
      WPP_SF_qq(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x2Bu,
        (__int64)&WPP_045d5c95c5db3fcad9ea35acf5eb75d8_Traceguids,
        a1,
        v4);
    }
    stopTcpRecursion(v4);
    goto LABEL_23;
  }
  if ( !v5[353].S_un.S_un_b.s_b2 )
  {
LABEL_23:
    v6 = WPP_GLOBAL_Control;
    goto LABEL_24;
  }
  v6 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x4000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 3u )
  {
    WPP_SF_qq(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x2Cu,
      (__int64)&WPP_045d5c95c5db3fcad9ea35acf5eb75d8_Traceguids,
      a1,
      v4);
    goto LABEL_23;
  }
LABEL_24:
  v7 = *a2;
  v8 = (*a2)[1576].S_un.S_un_b.s_b4 & 0xF;
  if ( ((v8 - 1) & 0xFC) == 0 && v8 != 3 && *(_WORD *)(v4 + 602) )
  {
    if ( v7[1578].S_un.S_un_w.s_w2 && v8 == 2 )
    {
      if ( v6 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)v6 + 17) & 0x800) != 0
        && *((_BYTE *)v6 + 65) >= 5u )
      {
        v9 = DnsAddr_Ntoa(v7 + 16);
        WPP_SF_sq(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x2Du,
          (__int64)&WPP_045d5c95c5db3fcad9ea35acf5eb75d8_Traceguids,
          v9);
      }
      Remote_SetSupportedEDNSVersion(*a2 + 16, 0);
    }
    else if ( Remote_QuerySupportedEDNSVersion(v7 + 16, 0) == 0xFF )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        v10 = DnsAddr_Ntoa(*a2 + 16);
        WPP_SF_qqds(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          (*a2)[1576].S_un.S_un_b.s_b4 & 0xF,
          (__int64)&WPP_045d5c95c5db3fcad9ea35acf5eb75d8_Traceguids,
          a1,
          v4,
          (*a2)[1576].S_un.S_un_b.s_b4 & 0xF,
          v10);
      }
      Remote_AddEDNSFailure(*a2 + 16, (*a2)[1576].S_un.S_un_b.s_b4 & 0xF);
      v11 = *(unsigned __int16 *)(v4 + 602);
      *(_DWORD *)(v4 + 592) &= ~2u;
      *(_BYTE *)(v4 + 6306) &= ~0x80u;
      *(_QWORD *)(v4 + 32) = v11 + v4 + 6304;
      *(_WORD *)(v4 + 602) = 0;
      *(_BYTE *)(v4 + 1412) = 0;
      *(_WORD *)(v4 + 6302) = v11;
      --*(_WORD *)(v4 + 6314);
      *((_DWORD *)a1 + 147) = 0;
      v12 = *a2;
      *(_OWORD *)(v4 + 64) = *(_OWORD *)&(*a2)[16].S_un.S_un_b.s_b1;
      *(_OWORD *)(v4 + 80) = *(_OWORD *)&v12[20].S_un.S_un_b.s_b1;
      *(_OWORD *)(v4 + 96) = *(_OWORD *)&v12[24].S_un.S_un_b.s_b1;
      *(_OWORD *)(v4 + 112) = *(_OWORD *)&v12[28].S_un.S_un_b.s_b1;
      queueAndSendRecursiveQuery((__int64)a1, 0i64);
      return;
    }
  }
  if ( !(unsigned int)Msg_NewValidateResponse((__int64)*a2, v4) )
  {
    _InterlockedIncrement(&dword_1401C7E74);
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x8000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 3u )
    {
      WPP_SF_qq(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x2Fu,
        (__int64)&WPP_045d5c95c5db3fcad9ea35acf5eb75d8_Traceguids,
        v4,
        *a2);
    }
    freeSuspendedQueries((__int64)a1, 0);
    Packet_Free((__int64)a1);
    return;
  }
  v13 = *a2;
  if ( ((*a2)[1576].S_un.S_un_b.s_b3 & 2) != 0 )
  {
    if ( v13[353].S_un.S_un_b.s_b2 )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x30u, (__int64)&WPP_045d5c95c5db3fcad9ea35acf5eb75d8_Traceguids);
      }
      Recurse_Question(a1, 0i64, *((_WORD *)a1 + 248), *((_WORD *)a1 + 249));
    }
    else
    {
      if ( (*((_BYTE *)a1 + 592) & 2) != 0 )
        Remote_SetSupportedEDNSVersion(v13 + 16, 0);
      v14 = *a2;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x4000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        v15 = DnsAddr_Ntoa(v14 + 16);
        WPP_SF_qqs(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x39u,
          (__int64)&WPP_045d5c95c5db3fcad9ea35acf5eb75d8_Traceguids,
          v14,
          a1,
          v15);
      }
      _InterlockedIncrement(&dword_1401C7F04);
      Tcp_ConnectForForwarding(
        *((_QWORD *)a1 + 157),
        v14 + 16,
        *((_DWORD *)a1 + 142) + dword_1401B9800,
        (void (__fastcall *)(__int64, _QWORD))recurseConnectCallback);
    }
    return;
  }
  if ( *((_QWORD *)a1 + 7) == 4241280207i64 )
  {
    routeCacheUpdateQueryResponse(a1, (__int64 *)a2);
    return;
  }
  *((_BYTE *)a1 + 1422) = 0;
  if ( *((_WORD *)a1 + 248) == 5 )
  {
    if ( (unsigned int)Gnz_ProcessCacheUpdateQueryResponse((__int64)*a2, (__int64)a1) == 9706 )
    {
LABEL_64:
      *((_BYTE *)a1 + 1420) = 1;
      Answer_ContinueCurrentLookupForQuery(a1);
      return;
    }
    if ( *((_BYTE *)a1 + 1415) == 3 )
    {
      v16 = *((_QWORD *)a1 + 24);
      if ( (!v16 || (v17 = *(_QWORD *)(v16 + 56)) != 0 && *(_DWORD *)(v17 + 372) == 5) && v16 != *((_QWORD *)a1 + 25) )
      {
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x4000) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
        {
          WPP_SF_q(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x31u,
            (__int64)&WPP_045d5c95c5db3fcad9ea35acf5eb75d8_Traceguids);
        }
        *((_QWORD *)a1 + 24) = *((_QWORD *)a1 + 25);
        goto LABEL_64;
      }
    }
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x4000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
    {
      WPP_SF_q(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x32u,
        (__int64)&WPP_045d5c95c5db3fcad9ea35acf5eb75d8_Traceguids,
        a1);
    }
    *((_BYTE *)a1 + 1421) = 0;
    *((_BYTE *)a1 + 1419) = 0;
    Answer_Question(a1, 0i64, 4);
  }
  else
  {
    Dbase_LockEx(0i64, 2, (__int64)"ds\\dns\\server\\server\\recurse.c", 161);
    v18 = Recurse_CacheMessageResourceRecords((__int64)*a2, (__int64)a1, 0i64);
    if ( dword_1401B991C
      && !bFastCachePurgeEventRaised
      && dword_1401B9914
      && (unsigned int)qword_1401B9D18
       + (unsigned int)qword_1401B9D0C
       + (unsigned int)dword_1401B9C7C
       + (unsigned __int64)(unsigned int)qword_1401B9C70 > (((3435973837u
                                                            * (unsigned __int64)(unsigned int)(1000 * dword_1401B9914)) >> 32) & 0xFFFFFFF8) )
    {
      if ( SetEvent(hFastCachePurgeEvent) )
      {
        bFastCachePurgeEventRaised = 1;
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x4000) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          WPP_SF_ILIi(*((_QWORD *)WPP_GLOBAL_Control + 7), v19, v20);
        }
      }
      else if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
             && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x4000) != 0
             && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        LastError = GetLastError();
        WPP_SF_dILI(*((_QWORD *)WPP_GLOBAL_Control + 7), v22, v23, LastError);
      }
    }
    if ( !(unsigned int)Dnssec_ValidateRecords(a1, (__int64 *)a2, 1u, v18, 0, 1) )
      Recurse_HandleCacheResult(a1, *a2, v18);
  }
}
// 140071863: variable 'v22' is possibly undefined
// 140071863: variable 'v23' is possibly undefined
// 1400718CF: variable 'v19' is possibly undefined
// 1400718CF: variable 'v20' is possibly undefined
// 1401B9080: using guessed type int bFastCachePurgeEventRaised;
// 1401B9800: using guessed type int dword_1401B9800;
// 1401B9914: using guessed type int dword_1401B9914;
// 1401B991C: using guessed type int dword_1401B991C;
// 1401B9C70: using guessed type __int64 qword_1401B9C70;
// 1401B9C7C: using guessed type int dword_1401B9C7C;
// 1401B9D0C: using guessed type __int64 qword_1401B9D0C;
// 1401B9D18: using guessed type __int64 qword_1401B9D18;
// 1401C7E6C: using guessed type int dword_1401C7E6C;
// 1401C7E74: using guessed type int dword_1401C7E74;
// 1401C7F04: using guessed type int dword_1401C7F04;
// 1401C7F14: using guessed type int dword_1401C7F14;
