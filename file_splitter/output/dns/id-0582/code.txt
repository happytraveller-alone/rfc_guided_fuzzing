Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 582
// Total lines: 313

//----- (000000014005430C) ----------------------------------------------------
void __fastcall Gnz_TimeoutTasks(int a1)
{
  CDnsClientSubnetRecordsTrie *v2; // rbx
  __int64 v3; // r9
  int v4; // esi
  __int64 v5; // r8
  char *v6; // rax
  __int64 v7; // rax
  __int64 v8; // rbx
  __int64 v9; // rax
  unsigned int v10; // edx
  __int64 i; // r9
  __int64 v12; // rax
  __int64 v13; // rsi
  __int64 v14; // rax
  int v15; // ecx
  __int64 NextRecord; // rax
  __int64 v17; // r8
  __int64 v18; // r14
  CDnsClientSubnetRecordsTrie *v19; // rcx
  unsigned __int16 v20; // dx
  __int64 v21; // rax
  int v22; // [rsp+28h] [rbp-E0h]
  int v23; // [rsp+28h] [rbp-E0h]
  int v24[4]; // [rsp+78h] [rbp-90h] BYREF
  unsigned __int8 v25[272]; // [rsp+88h] [rbp-80h] BYREF
  char v26[256]; // [rsp+198h] [rbp+90h] BYREF
  char v27[256]; // [rsp+298h] [rbp+190h] BYREF

  memset_0(v26, 0, sizeof(v26));
  v2 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x20000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
  {
    WPP_SF_D(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x28u,
      (__int64)&WPP_034409074b35327309cc7655b9f6aa4d_Traceguids,
      dword_1401B9714);
    v2 = WPP_GLOBAL_Control;
  }
  if ( g_pnodeGnzService )
  {
    *(_BYTE *)(g_pnodeGnzService + 98) = CurrentTimeoutBin;
    v2 = WPP_GLOBAL_Control;
  }
  if ( !dword_1401B998C )
  {
    memset_0(&g_looknameBaseGnz, 0, 0x170ui64);
    goto LABEL_102;
  }
  if ( !g_looknameBaseGnz )
  {
    Name_ConvertDottedNameToLookupName("GlobalNames", 0, (unsigned __int16 *)&g_looknameBaseGnz);
    v2 = WPP_GLOBAL_Control;
  }
  if ( g_pzoneLocalGlobalNames )
    goto LABEL_102;
  if ( !a1 && g_dwNextGnzQueryTime >= (unsigned int)dword_1401B9714 )
  {
    if ( v2 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)v2 + 17) & 0x20000) != 0
      && *((_BYTE *)v2 + 65) >= 4u )
    {
      WPP_SF_Dd(*((_QWORD *)v2 + 7), 0x29u, (__int64)&WPP_034409074b35327309cc7655b9f6aa4d_Traceguids, dword_1401B9714);
LABEL_101:
      v2 = WPP_GLOBAL_Control;
      goto LABEL_102;
    }
    goto LABEL_102;
  }
  if ( (unsigned int)Ds_ConvertDnToFqdn((const wchar_t *)qword_1401B6B88, v27) )
  {
    v2 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x20000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_S(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x2Au,
        (__int64)&WPP_034409074b35327309cc7655b9f6aa4d_Traceguids,
        (const unsigned __int16 *)qword_1401B6B88);
      goto LABEL_101;
    }
LABEL_102:
    if ( g_pnodeGnzService )
    {
      *(_BYTE *)(g_pnodeGnzService + 98) = CurrentTimeoutBin;
      v2 = WPP_GLOBAL_Control;
    }
    goto LABEL_104;
  }
  if ( !qword_1401B6B88 || !sprintfSafeA(v26, 0x100ui64, "_globalnames._msdcs.%s", v27) )
  {
    v2 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x20000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x2Bu, (__int64)&WPP_034409074b35327309cc7655b9f6aa4d_Traceguids);
      goto LABEL_101;
    }
    goto LABEL_102;
  }
  if ( !g_pzoneRemoteGlobalNames )
  {
    g_pnodeGnzService = 0i64;
    v4 = Zone_CreateEx(
           &g_pzoneRemoteGlobalNames,
           5i64,
           "GlobalNamesCache",
           0,
           0,
           0i64,
           0,
           0i64,
           "GlobalNamesCache.dns",
           0,
           0i64,
           0i64,
           0i64);
    if ( g_pzoneRemoteGlobalNames )
      Zone_UnlockAfterWriteEx(g_pzoneRemoteGlobalNames, 1, (__int64)"ds\\dns\\server\\server\\globalnames.c", 59);
    if ( v4 || !g_pzoneRemoteGlobalNames )
    {
      v2 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x20000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_Dq(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x2Cu,
          (__int64)&WPP_034409074b35327309cc7655b9f6aa4d_Traceguids,
          v4);
        goto LABEL_101;
      }
      goto LABEL_102;
    }
  }
  if ( dword_1401B99A8 )
    goto LABEL_81;
  if ( (unsigned int)Name_ConvertFileNameToCountNameEx(v25, v26, 0i64, 1) == 123 )
  {
    v2 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x20000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_s(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x2Du,
        (__int64)&WPP_034409074b35327309cc7655b9f6aa4d_Traceguids,
        v26);
LABEL_81:
      v2 = WPP_GLOBAL_Control;
    }
  }
  else
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x20000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      v6 = Dbg_CountName(v25);
      WPP_SF_s(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x2Eu,
        (__int64)&WPP_034409074b35327309cc7655b9f6aa4d_Traceguids,
        v6);
    }
    v7 = Lookup_DbaseName((__int64)v25, 0x80000000, v5, 0i64, v22, 0i64);
    v8 = v7;
    if ( v7 && (v9 = *(_QWORD *)(v7 + 56)) != 0 && ((v10 = *(_DWORD *)(v9 + 372), v10 - 1 <= 1) || v10 >= 5) )
    {
      for ( i = 0i64; ; i = v18 )
      {
        NextRecord = RR_FindNextRecordEx(v8, 0, 0x21u, i, 0, 0);
        v18 = NextRecord;
        if ( !NextRecord )
          goto LABEL_71;
        v12 = Lookup_DbaseName(NextRecord + 62, 0x80000000, v17, 0i64, v23, 0i64);
        v13 = v12;
        if ( !v12 )
          break;
        v14 = *(_QWORD *)(v12 + 56);
        if ( !v14 )
          break;
        v15 = *(_DWORD *)(v14 + 372);
        if ( (v15 & 0xFFFFFFFB) == 0 || v15 == 3 )
          break;
        if ( RR_FindNextRecordEx(v13, 0, 1u, 0i64, 0, 0) || RR_FindNextRecordEx(v13, 0, 0x1Cu, 0i64, 0, 0) )
        {
          v19 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x20000) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            WPP_SF_(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x31u,
              (__int64)&WPP_034409074b35327309cc7655b9f6aa4d_Traceguids);
            v19 = WPP_GLOBAL_Control;
          }
          g_pnodeGnzService = v8;
          if ( v19 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)v19 + 17) & 0x20000) != 0
            && *((_BYTE *)v19 + 65) >= 4u )
          {
            WPP_SF_q(*((_QWORD *)v19 + 7), 0x32u, (__int64)&WPP_034409074b35327309cc7655b9f6aa4d_Traceguids, v8);
          }
          Gnz_ProcessRemoteGnzNode();
          goto LABEL_81;
        }
      }
      v2 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
        goto LABEL_82;
      if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x20000) != 0 && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x30u, (__int64)&WPP_034409074b35327309cc7655b9f6aa4d_Traceguids);
LABEL_71:
        v2 = WPP_GLOBAL_Control;
      }
      if ( v2 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)v2 + 17) & 0x20000) != 0
        && *((_BYTE *)v2 + 65) >= 4u )
      {
        v20 = 51;
        goto LABEL_80;
      }
    }
    else
    {
      v2 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x20000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        v20 = 47;
LABEL_80:
        WPP_SF_(*((_QWORD *)v2 + 7), v20, (__int64)&WPP_034409074b35327309cc7655b9f6aa4d_Traceguids);
        goto LABEL_81;
      }
    }
  }
LABEL_82:
  v24[0] = 0;
  if ( g_pnodeGnzService )
    goto LABEL_89;
  g_pnodeGnzService = (__int64)Lookup_ZoneNodeFromDotted((_QWORD *)g_pzoneRemoteGlobalNames, v26, 0, 18, 0i64, v24);
  if ( g_pnodeGnzService )
  {
    v2 = WPP_GLOBAL_Control;
LABEL_89:
    v21 = *(_QWORD *)(g_pnodeGnzService + 56);
    if ( v21 && *(_DWORD *)(v21 + 372) == 5 )
    {
      if ( v2 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)v2 + 17) & 0x20000) != 0
        && *((_BYTE *)v2 + 65) >= 4u )
      {
        WPP_SF_sq(*((_QWORD *)v2 + 7), 0x35u, (__int64)&WPP_034409074b35327309cc7655b9f6aa4d_Traceguids, v26);
      }
      _InterlockedIncrement(&dword_1401C7F28);
      Recurse_SendCacheUpdateQuery(g_pnodeGnzService, 0i64, 0i64, v3, 0x21u, 0i64, 5u, 0, 0i64, 0i64);
      v2 = WPP_GLOBAL_Control;
    }
    g_dwNextGnzQueryTime = dword_1401B9714 + dword_1401B9994;
    goto LABEL_102;
  }
  v2 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
    return;
  if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x20000) != 0 && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_Ds(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x34u,
      (__int64)&WPP_034409074b35327309cc7655b9f6aa4d_Traceguids,
      v24[0],
      (__int64)v26);
    goto LABEL_101;
  }
LABEL_104:
  if ( v2 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)v2 + 17) & 0x20000) != 0
    && *((_BYTE *)v2 + 65) >= 5u )
  {
    WPP_SF_D(*((_QWORD *)v2 + 7), 0x36u, (__int64)&WPP_034409074b35327309cc7655b9f6aa4d_Traceguids, dword_1401B9714);
  }
}
// 1400546AE: variable 'v5' is possibly undefined
// 1400546AE: variable 'v22' is possibly undefined
// 1400546FF: variable 'v17' is possibly undefined
// 1400546FF: variable 'v23' is possibly undefined
// 1400549B8: variable 'v3' is possibly undefined
// 1401B6B88: using guessed type __int64 qword_1401B6B88;
// 1401B8D80: using guessed type __int16 g_looknameBaseGnz;
// 1401B8EF0: using guessed type __int64 g_pzoneRemoteGlobalNames;
// 1401B8EF8: using guessed type __int64 g_pzoneLocalGlobalNames;
// 1401B8F08: using guessed type __int64 g_pnodeGnzService;
// 1401B8F10: using guessed type int g_dwNextGnzQueryTime;
// 1401B9714: using guessed type int dword_1401B9714;
// 1401B998C: using guessed type int dword_1401B998C;
// 1401B9994: using guessed type int dword_1401B9994;
// 1401B99A8: using guessed type int dword_1401B99A8;
// 1401BA4B8: using guessed type char CurrentTimeoutBin;
// 1401C7F28: using guessed type int dword_1401C7F28;
// 14005430C: using guessed type int var_350[4];
