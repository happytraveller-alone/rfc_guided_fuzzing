Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 92
// Total lines: 153

//----- (000000014000B400) ----------------------------------------------------
__int64 __fastcall selectRootHints(__int64 **a1)
{
  int v2; // edx
  unsigned int v3; // esi
  unsigned int v4; // ecx
  int v5; // r15d
  int v6; // r8d
  __int64 v7; // r13
  __int64 **v8; // rax
  __int64 *v9; // rdi
  int v10; // r12d
  int v11; // eax
  __int64 v12; // rsi
  int v13; // ebp
  __int64 *v14; // r14
  int v15; // eax
  CDnsClientSubnetRecordsTrie *v16; // rcx
  int v18; // [rsp+20h] [rbp-58h]
  unsigned int v19; // [rsp+80h] [rbp+8h]
  int v20; // [rsp+88h] [rbp+10h]
  int v21; // [rsp+90h] [rbp+18h]
  unsigned int v22; // [rsp+98h] [rbp+20h]

  v2 = 0;
  v3 = 0;
  v4 = 0;
  v21 = 0;
  v5 = 0;
  v19 = 0;
  v6 = 100000000;
  v22 = 0;
  if ( *a1 )
  {
    v7 = 0i64;
    v8 = a1;
    do
    {
      v9 = *v8;
      v10 = 0;
      if ( *v8 )
      {
        do
        {
          v11 = 1;
          v20 = 1;
          if ( *((_WORD *)v9 + 8) == 2 )
          {
            ++v10;
            if ( !v5 )
            {
              v12 = 0i64;
              if ( *a1 )
              {
                do
                {
                  v13 = 0;
                  if ( v12 != v7 )
                  {
                    v14 = a1[v12];
                    while ( 1 )
                    {
                      if ( !v14 )
                      {
LABEL_15:
                        v11 = v13 != 0 ? v20 : 0;
                        v20 = v11;
                        goto LABEL_16;
                      }
                      v18 = --v6;
                      if ( v6 <= 0 )
                        break;
                      if ( *((_WORD *)v14 + 8) == 2 )
                      {
                        v15 = _stricmp((const char *)v14[4], (const char *)v9[4]);
                        v6 = v18;
                        if ( !v15 )
                          v13 = 1;
                      }
                      v14 = (__int64 *)*v14;
                      if ( v13 )
                        goto LABEL_15;
                    }
                    v16 = WPP_GLOBAL_Control;
                    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
                      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
                    {
                      WPP_SF_(
                        *((_QWORD *)WPP_GLOBAL_Control + 7),
                        0x1Fu,
                        (__int64)&WPP_dd5a12aafb1b34b87fc868998e41e2af_Traceguids);
                      v16 = WPP_GLOBAL_Control;
                    }
                    v3 = v19;
                    v5 = 0;
                    goto LABEL_25;
                  }
LABEL_16:
                  ++v12;
                }
                while ( a1[v12] );
                if ( !v11 )
                  goto LABEL_19;
              }
              v5 = 1;
            }
          }
LABEL_19:
          v9 = (__int64 *)*v9;
        }
        while ( v9 );
        v3 = v19;
        v4 = v22;
        v2 = v21;
      }
      if ( v10 > v2 )
      {
        v2 = v10;
        v19 = v4;
        v21 = v10;
        v3 = v4;
      }
      ++v7;
      v22 = ++v4;
      v8 = &a1[v7];
    }
    while ( *v8 );
    v16 = WPP_GLOBAL_Control;
LABEL_25:
    if ( v5 )
    {
      if ( v16 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)v16 + 68) & 2) != 0
        && *((_BYTE *)v16 + 65) >= 4u )
      {
        WPP_SF_D(*((_QWORD *)v16 + 7), 0x20u, (__int64)&WPP_dd5a12aafb1b34b87fc868998e41e2af_Traceguids, v3);
      }
      return v3;
    }
  }
  else
  {
    v16 = WPP_GLOBAL_Control;
  }
  if ( v16 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)v16 + 68) & 2) != 0
    && *((_BYTE *)v16 + 65) >= 4u )
  {
    WPP_SF_(*((_QWORD *)v16 + 7), 0x21u, (__int64)&WPP_dd5a12aafb1b34b87fc868998e41e2af_Traceguids);
  }
  return 0xFFFFFFFFi64;
}
