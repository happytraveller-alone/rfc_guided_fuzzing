Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 1312
// Total lines: 108

//----- (00000001400A8170) ----------------------------------------------------
__int64 __fastcall Rpc_ResetServerUtf8StringListProperty(
        __int64 a1,
        char *a2,
        __int64 a3,
        __int64 a4,
        const unsigned __int16 *a5,
        unsigned int *a6)
{
  int v6; // r13d
  _QWORD *v7; // r14
  unsigned __int16 *v8; // r15
  unsigned __int64 v9; // rbp
  unsigned int v11; // ecx
  unsigned __int64 v12; // rax
  __int64 v13; // rsi
  char *v14; // r12
  unsigned int v15; // ebx
  __int64 v16; // rcx
  const unsigned __int16 *v17; // r9
  int v19; // [rsp+30h] [rbp-48h]
  int v20; // [rsp+38h] [rbp-40h] BYREF
  _QWORD *v21; // [rsp+40h] [rbp-38h]

  v21 = 0i64;
  v6 = 0;
  v20 = -16777209;
  v7 = 0i64;
  v19 = 0;
  v8 = 0i64;
  LODWORD(v9) = 0;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_sq(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x20u, (__int64)&WPP_8dcaf0ee02573174dfb45ec0cfad4f2e_Traceguids, a2);
  }
  if ( a6 )
  {
    v11 = *a6 + 1;
    if ( v11 < *a6
      || (v12 = 8i64 * v11, v12 > 0xFFFFFFFF)
      || (v7 = Mem_AllocZero((unsigned int)v12, 0i64, "ds\\dns\\server\\server\\srvrpc.c", 917)) == 0i64 )
    {
      v15 = 14;
      goto LABEL_31;
    }
    if ( !_strnicmp("GlobalQueryBlockList", a2, 0x15ui64) )
    {
      v9 = 63i64 * *a6;
      if ( v9 > 0xFFFFFFFF )
      {
        LODWORD(v9) = -1;
      }
      else
      {
        v6 = 1;
        v19 = 1;
        v8 = (unsigned __int16 *)Mem_AllocZero((unsigned int)v9, 0i64, "ds\\dns\\server\\server\\srvrpc.c", 934);
      }
    }
    v13 = 0i64;
    if ( *a6 )
    {
      do
      {
        v7[v13] = *(_QWORD *)&a6[2 * v13 + 2];
        if ( !_strnicmp("GlobalQueryBlockList", a2, 0x15ui64) && (dword_1401B9104 & 0x100) != 0 && v6 )
        {
          v14 = (char *)Dns_StringCopyAllocate((char *)v7[v13], 0, 2i64, 1);
          if ( (_DWORD)v13 )
            StringCchCatW(v8, (unsigned int)v9, (char *)L", ");
          StringCchCatW(v8, 63i64, v14);
          Mem_Free(v14, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\srvrpc.c", 952);
        }
        v13 = (unsigned int)(v13 + 1);
      }
      while ( (unsigned int)v13 < *a6 );
      v6 = v19;
    }
  }
  v21 = v7;
  v15 = Config_ResetProperty(0x10000000, a2, (__int64)&v20);
  if ( !v15 )
  {
    if ( !_strnicmp("GlobalQueryBlockList", a2, 0x15ui64) )
    {
      if ( v6 && (dword_1401B9104 & 0x100) != 0 )
      {
        v17 = L".";
        if ( a5 )
          v17 = a5;
        Template_szz(v16, &DNS_EVENT_SERVER_SETTING, a2, v17, v8);
      }
    }
    else
    {
      LogServerProperty(0, a2, (__int64)&v20, a5);
    }
  }
LABEL_31:
  Mem_Free(v7, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\srvrpc.c", 977);
  Mem_Free(v8, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\srvrpc.c", 978);
  return v15;
}
// 1400A839E: variable 'v16' is possibly undefined
// 1401876D8: using guessed type EVENT_DESCRIPTOR DNS_EVENT_SERVER_SETTING;
// 1401B9104: using guessed type int dword_1401B9104;
