Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 75
// Total lines: 424

//----- (0000000140008A08) ----------------------------------------------------
__int64 __fastcall Answer_PerformDNAMESubstitution(
        __int64 a1,
        __int64 *a2,
        unsigned __int16 a3,
        unsigned __int16 a4,
        unsigned __int16 *a5,
        int *a6,
        int *a7)
{
  int v10; // r12d
  unsigned __int16 *v12; // rsi
  CDnsClientSubnetRecordsTrie *v13; // rcx
  __int64 NextRecord; // rax
  __int64 v15; // r8
  unsigned __int16 v16; // dx
  char *v17; // rax
  __int64 *v18; // rax
  __int64 *v19; // r14
  unsigned __int16 v20; // dx
  char *v21; // rax
  char *v22; // rax
  unsigned __int16 v23; // dx
  int v24; // r9d
  __int64 v25; // r10
  __int64 v26; // r8
  int v27; // ecx
  char v28; // al
  int v29; // ecx
  unsigned __int8 *v30; // rdx
  __int64 v31; // r8
  unsigned int v32; // ecx
  unsigned __int16 v33; // dx
  char *v34; // rax
  __int64 v35; // r12
  unsigned __int16 v36; // dx
  __int16 v37; // r14
  __int16 v38; // ax
  char *v39; // r15
  unsigned __int64 v40; // rcx
  unsigned __int8 *v41; // r13
  const void **v42; // rdx
  char *v43; // r15
  _BYTE *v44; // r15
  unsigned __int16 v45; // r9
  unsigned int v46; // ebx
  int v48; // [rsp+20h] [rbp-E0h]
  unsigned int v49; // [rsp+40h] [rbp-C0h]
  int v50; // [rsp+40h] [rbp-C0h]
  int v52; // [rsp+44h] [rbp-BCh]
  const void **v53; // [rsp+48h] [rbp-B8h] BYREF
  int v54; // [rsp+50h] [rbp-B0h]
  unsigned __int64 v55; // [rsp+58h] [rbp-A8h]
  int *v56; // [rsp+60h] [rbp-A0h]
  unsigned __int16 v57[184]; // [rsp+70h] [rbp-90h] BYREF
  char v58[272]; // [rsp+1E0h] [rbp+E0h] BYREF
  unsigned __int16 v59[184]; // [rsp+2F0h] [rbp+1F0h] BYREF
  char v60; // [rsp+460h] [rbp+360h] BYREF

  v56 = a6;
  v49 = 0;
  v54 = 0;
  v10 = 0;
  memset_0(v58, 0, 0x102ui64);
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
  {
    WPP_SF_qddq(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x8Au,
      (__int64)&WPP_a00dfa190cfc31699b498ea413aa2a5c_Traceguids,
      a1,
      a4,
      a3,
      a2);
  }
  v12 = (unsigned __int16 *)&v60;
  *a7 = 0;
  if ( a5 )
    v12 = a5;
  if ( *(_BYTE *)(a1 + 1450) >= 0x14u )
  {
    v13 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 3u )
    {
      WPP_SF_q(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x8Bu,
        (__int64)&WPP_a00dfa190cfc31699b498ea413aa2a5c_Traceguids,
        a1);
      v13 = WPP_GLOBAL_Control;
    }
    v10 = 1;
    goto LABEL_114;
  }
  LODWORD(v53) = -1;
  acquireRead(DbaseLock, 0xFFFFFFFF, (unsigned int *)&v53);
  NextRecord = RR_FindNextRecordEx((__int64)a2, 0, 0x27u, 0i64, *(_DWORD *)(a1 + 568), 0);
  if ( !NextRecord )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x8Cu, (__int64)&WPP_a00dfa190cfc31699b498ea413aa2a5c_Traceguids);
    }
    LODWORD(v53) = -1;
    releaseRead(DbaseLock, (unsigned int *)&v53, 1);
    goto LABEL_19;
  }
  Name_CopyCountName(v58, (unsigned __int8 *)(NextRecord + 56));
  LODWORD(v53) = -1;
  releaseRead(DbaseLock, (unsigned int *)&v53, 1);
  if ( !(unsigned int)Name_ConvertPacketNameToLookupNameEx(a1, (unsigned __int8 *)(a4 + a1 + 6304), v12, 1) )
  {
    v13 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 3u )
    {
      goto LABEL_114;
    }
    v16 = 141;
    goto LABEL_25;
  }
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
  {
    v17 = Dbg_LookupName(v12);
    WPP_SF_s(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x8Eu, (__int64)&WPP_a00dfa190cfc31699b498ea413aa2a5c_Traceguids, v17);
  }
  v18 = (__int64 *)Lookup_DbaseName((__int64)v58, 32776, v15, a1, v48, a7);
  v19 = v18;
  if ( !*a7 )
  {
    if ( !v18 )
    {
      v13 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 3u )
      {
        goto LABEL_114;
      }
      v16 = 144;
LABEL_25:
      WPP_SF_(*((_QWORD *)v13 + 7), v16, (__int64)&WPP_a00dfa190cfc31699b498ea413aa2a5c_Traceguids);
      v13 = WPP_GLOBAL_Control;
      goto LABEL_114;
    }
    if ( v18 == a2 )
    {
      v13 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
      {
        goto LABEL_46;
      }
      v20 = 145;
LABEL_45:
      WPP_SF_(*((_QWORD *)v13 + 7), v20, (__int64)&WPP_a00dfa190cfc31699b498ea413aa2a5c_Traceguids);
      v13 = WPP_GLOBAL_Control;
LABEL_46:
      v10 = 1;
      goto LABEL_114;
    }
    Name_WriteLookupNameForNode(a2, v59);
    Name_WriteLookupNameForNode(v19, v57);
    v13 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
    {
      if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0 && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        v21 = Dbg_LookupName(v59);
        WPP_SF_s(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x92u,
          (__int64)&WPP_a00dfa190cfc31699b498ea413aa2a5c_Traceguids,
          v21);
        v13 = WPP_GLOBAL_Control;
      }
      if ( v13 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)v13 + 17) & 0x40000) != 0
        && *((_BYTE *)v13 + 65) >= 4u )
      {
        v22 = Dbg_LookupName(v57);
        WPP_SF_s(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x93u,
          (__int64)&WPP_a00dfa190cfc31699b498ea413aa2a5c_Traceguids,
          v22);
        v13 = WPP_GLOBAL_Control;
      }
    }
    if ( v59[0] > *v12 )
    {
      if ( v13 == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_DWORD *)v13 + 17) & 0x40000) == 0
        || *((_BYTE *)v13 + 65) < 2u )
      {
        goto LABEL_46;
      }
      v20 = 148;
      goto LABEL_45;
    }
    v23 = *v12 - v59[0];
    v24 = 0;
    v25 = v57[0];
    v26 = 0i64;
    *v12 = v23;
    if ( v25 )
    {
      while ( *v12 < 0x28u )
      {
        v27 = v24 + v23;
        if ( v27 >= 39 )
          break;
        ++v24;
        *(_QWORD *)&v12[4 * v27 + 4] = *(_QWORD *)&v57[4 * v26 + 4];
        v28 = *((_BYTE *)&v57[164] + v26++);
        *((_BYTE *)v12 + v27 + 328) = v28;
        ++*v12;
        if ( v26 >= v25 )
          goto LABEL_64;
      }
      v10 = 1;
      v13 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 3u )
      {
LABEL_114:
        if ( v56 )
        {
          *v56 = v10;
          goto LABEL_116;
        }
        goto LABEL_117;
      }
      v33 = 149;
      goto LABEL_76;
    }
LABEL_64:
    v12[1] = 0;
    if ( *v12 )
    {
      v29 = 0;
      v30 = (unsigned __int8 *)(v12 + 164);
      v31 = *v12;
      do
      {
        v29 += *v30++ + 1;
        --v31;
      }
      while ( v31 );
      v32 = v29 + 1;
      if ( v32 >= 0xFF )
      {
        v10 = 1;
        v13 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) == 0
          || *((_BYTE *)WPP_GLOBAL_Control + 65) < 3u )
        {
          goto LABEL_114;
        }
        v33 = 150;
LABEL_76:
        WPP_SF_(*((_QWORD *)v13 + 7), v33, (__int64)&WPP_a00dfa190cfc31699b498ea413aa2a5c_Traceguids);
LABEL_19:
        v13 = WPP_GLOBAL_Control;
        goto LABEL_114;
      }
      v12[1] = v32;
    }
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      v34 = Dbg_LookupName(v12);
      WPP_SF_s(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x97u,
        (__int64)&WPP_a00dfa190cfc31699b498ea413aa2a5c_Traceguids,
        v34);
    }
    if ( !(unsigned __int16)Wire_WriteRecordsAtNodeToMessage(a1, (__int64)a2, 0x27u, 0i64, 0, 0, 0i64) )
    {
      v13 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 3u )
      {
        goto LABEL_114;
      }
      v33 = 152;
      goto LABEL_76;
    }
    v35 = *(_QWORD *)(a1 + 32);
    if ( (unsigned __int64)(v35 + 10) > *(_QWORD *)(a1 + 24) )
    {
      v13 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 3u )
      {
        goto LABEL_113;
      }
      v36 = 153;
      goto LABEL_111;
    }
    v37 = v35 + 12;
    v38 = a4 | 0xC000;
    v52 = 0;
    v39 = (char *)(v35 + 12);
    *(_WORD *)v35 = __ROL2__(v38, 8);
    *(_QWORD *)(v35 + 2) = 16778496i64;
    v40 = *(_QWORD *)(a1 + 24);
    v55 = v40;
    if ( *v12 )
    {
      v53 = (const void **)(v12 + 4);
      v41 = (unsigned __int8 *)(v12 + 164);
      while ( 1 )
      {
        v50 = *v41;
        if ( !(unsigned int)Wire_TestForBytesRemaining((unsigned __int64)v39, v40, *v41 + 1i64) )
          break;
        v42 = v53;
        *v39 = v50;
        v43 = v39 + 1;
        memcpy_0(v43, *v42, v50);
        ++v41;
        ++v53;
        v39 = &v43[v50];
        ++v52;
        v40 = v55;
        if ( v52 >= *v12 )
          goto LABEL_96;
      }
      v13 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
        goto LABEL_113;
      if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800) == 0 || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
        goto LABEL_107;
      WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0xCu, (__int64)&WPP_7fc80419a8b133cb02be4345e744511d_Traceguids);
    }
    else
    {
LABEL_96:
      if ( (unsigned int)Wire_TestForBytesRemaining((unsigned __int64)v39, v40, 1i64) )
      {
        *v39 = 0;
        v44 = v39 + 1;
        if ( v44 )
        {
          *(_WORD *)(v35 + 10) = __ROL2__((_WORD)v44 - v37, 8);
          ++*(_WORD *)(a1 + 2i64 * *(unsigned __int8 *)(a1 + 1415) + 6308);
          *(_QWORD *)(a1 + 32) = v44;
          if ( v35 != -12 )
          {
            if ( *(_BYTE *)(a1 + 1416) )
            {
              v45 = *(_WORD *)(a1 + 480);
              if ( v45 != 39 )
              {
                *(_QWORD *)(a1 + 2276) = 0i64;
                Wire_SaveAdditionalInfo(a1, 0i64, v35 + 12, v45, 0x20000000);
                *(_WORD *)(a1 + 442) = v37 - a1 - 6304;
              }
            }
          }
          goto LABEL_112;
        }
      }
    }
    v13 = WPP_GLOBAL_Control;
LABEL_107:
    if ( v13 == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_DWORD *)v13 + 17) & 0x40000) == 0
      || *((_BYTE *)v13 + 65) < 3u )
    {
      goto LABEL_113;
    }
    v36 = 154;
LABEL_111:
    WPP_SF_(*((_QWORD *)v13 + 7), v36, (__int64)&WPP_a00dfa190cfc31699b498ea413aa2a5c_Traceguids);
LABEL_112:
    v13 = WPP_GLOBAL_Control;
LABEL_113:
    v10 = v54;
    v49 = 1;
    goto LABEL_114;
  }
  v13 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
    return 0;
  if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0 && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
  {
    WPP_SF_D(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x8Fu, (__int64)&WPP_a00dfa190cfc31699b498ea413aa2a5c_Traceguids, *a7);
LABEL_116:
    v13 = WPP_GLOBAL_Control;
  }
LABEL_117:
  if ( v13 == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control || (*((_DWORD *)v13 + 17) & 0x40000) == 0 )
  {
    return v49;
  }
  else
  {
    v46 = v49;
    if ( *((_BYTE *)v13 + 65) >= 4u )
      WPP_SF_Dd(*((_QWORD *)v13 + 7), 0x9Bu, (__int64)&WPP_a00dfa190cfc31699b498ea413aa2a5c_Traceguids, v49);
  }
  return v46;
}
// 140008CD7: variable 'v15' is possibly undefined
// 140008CD7: variable 'v48' is possibly undefined
// 1401EC5E8: using guessed type __int64 DbaseLock;
