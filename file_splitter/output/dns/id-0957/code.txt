Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 957
// Total lines: 115

//----- (0000000140080E5C) ----------------------------------------------------
_DWORD *__fastcall allocateRpcZoneInfoDotNet(__int64 a1)
{
  _DWORD *zero; // rax
  __int64 v3; // r8
  _DWORD *v4; // rbx
  BOOL v5; // eax
  BOOL v6; // eax
  __int64 v7; // r8
  __int64 v8; // r8
  __int64 v9; // rax
  _BYTE *v10; // rdx
  void *v11; // rcx
  void *v12; // rcx
  void *v13; // rcx
  void *v14; // rcx
  void *v15; // rcx
  void *v16; // rcx
  void *v17; // rcx
  void *v18; // rcx
  char *v20; // rcx

  zero = MIDL_user_allocate_zero(0xE0ui64);
  v4 = zero;
  if ( !zero )
    return 0i64;
  zero[4] = *(_DWORD *)(a1 + 372);
  zero[5] = (*(_DWORD *)(a1 + 396) >> 1) & 1;
  zero[9] = (*(_DWORD *)(a1 + 396) >> 2) & 1;
  zero[6] = *(_BYTE *)(a1 + 392) & 3;
  zero[10] = *(_DWORD *)(a1 + 388) & 1;
  zero[16] = *(_DWORD *)(a1 + 380);
  zero[17] = *(unsigned __int8 *)(a1 + 385);
  zero[7] = (*(_DWORD *)(a1 + 396) >> 12) & 1;
  zero[8] = (*(_DWORD *)(a1 + 396) >> 13) & 1;
  v5 = (*(_BYTE *)(a1 + 396) & 2) == 0 && *(_QWORD *)(a1 + 344);
  v4[22] = v5;
  v6 = (*(_BYTE *)(a1 + 396) & 2) != 0 && *(_QWORD *)(a1 + 344);
  v4[23] = v6;
  v4[24] = *(_DWORD *)(a1 + 396) & 1;
  if ( *(_DWORD *)(a1 + 372) == 1 )
  {
    v4[25] = *(_DWORD *)(a1 + 992);
    v4[26] = *(_DWORD *)(a1 + 996);
    v4[27] = *(_DWORD *)(a1 + 1000);
  }
  if ( *(_DWORD *)(a1 + 372) == 4 )
  {
    v4[30] = *(_DWORD *)(a1 + 1556);
    v4[31] = (*(_DWORD *)(a1 + 1160) >> 5) & 1;
  }
  if ( !(unsigned int)RpcUtil_CopyStringToRpcBuffer((void **)v4 + 1, *(_BYTE **)(a1 + 16), v3)
    || !(unsigned int)RpcUtil_CopyStringToRpcBuffer((void **)v4 + 6, *(_BYTE **)(a1 + 136), v7)
    || *(_DWORD *)(a1 + 372) != 1
    && !(unsigned int)RpcUtil_CopyIpArrayToRpcBuffer((void **)v4 + 7, *(_QWORD *)(a1 + 1168))
    || *(_DWORD *)(a1 + 372) == 3
    && !(unsigned int)RpcUtil_CopyIpArrayToRpcBuffer((void **)v4 + 16, *(_QWORD *)(a1 + 1176))
    || !(unsigned int)RpcUtil_CopyIpArrayToRpcBuffer((void **)v4 + 9, *(_QWORD *)(a1 + 552))
    || !(unsigned int)RpcUtil_CopyIpArrayToRpcBuffer((void **)v4 + 10, *(_QWORD *)(a1 + 544))
    || *(_DWORD *)(a1 + 372) == 1
    && !(unsigned int)RpcUtil_CopyIpArrayToRpcBuffer((void **)v4 + 14, *(_QWORD *)(a1 + 1008)) )
  {
LABEL_27:
    v11 = (void *)*((_QWORD *)v4 + 1);
    if ( v11 )
      MIDL_user_free(v11);
    v12 = (void *)*((_QWORD *)v4 + 6);
    if ( v12 )
      MIDL_user_free(v12);
    v13 = (void *)*((_QWORD *)v4 + 7);
    if ( v13 )
      MIDL_user_free(v13);
    v14 = (void *)*((_QWORD *)v4 + 9);
    if ( v14 )
      MIDL_user_free(v14);
    v15 = (void *)*((_QWORD *)v4 + 10);
    if ( v15 )
      MIDL_user_free(v15);
    v16 = (void *)*((_QWORD *)v4 + 14);
    if ( v16 )
      MIDL_user_free(v16);
    v17 = (void *)*((_QWORD *)v4 + 18);
    if ( v17 )
      MIDL_user_free(v17);
    v18 = (void *)*((_QWORD *)v4 + 19);
    if ( v18 )
      MIDL_user_free(v18);
    MIDL_user_free(v4);
    return 0i64;
  }
  v9 = *(_QWORD *)(a1 + 848);
  if ( v9 )
  {
    v4[34] = *(_DWORD *)(v9 + 100);
    v10 = *(_BYTE **)(*(_QWORD *)(a1 + 848) + 24i64);
    if ( v10 && !(unsigned int)RpcUtil_CopyStringToRpcBuffer((void **)v4 + 18, v10, v8) )
      goto LABEL_27;
  }
  else if ( (*(_BYTE *)(a1 + 388) & 1) != 0 )
  {
    v4[34] = 18;
  }
  v20 = *(char **)(a1 + 840);
  if ( v20 )
    *((_QWORD *)v4 + 19) = Dns_StringCopyAllocate(v20, 0, 1i64, 1);
  if ( (unsigned int)(*(_DWORD *)(a1 + 372) - 2) <= 1 )
  {
    v4[41] = *(_DWORD *)(a1 + 1516);
    v4[40] = *(_DWORD *)(a1 + 1512);
  }
  return v4;
}
// 140080F87: variable 'v3' is possibly undefined
// 140080F9F: variable 'v7' is possibly undefined
// 140081068: variable 'v8' is possibly undefined
