Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 1668
// Total lines: 312

//----- (00000001400D4140) ----------------------------------------------------
__int64 __fastcall Rpc_ResetZoneStringProperty(
        __int64 a1,
        __int64 a2,
        __int64 a3,
        const char *a4,
        int a5,
        char *lpMultiByteStr)
{
  unsigned __int16 *v6; // r12
  CHAR *v7; // r15
  int v8; // r13d
  const char *v9; // rsi
  CDnsClientSubnetRecordsTrie *v11; // rcx
  char *v12; // r14
  __int64 v13; // rax
  __int64 v14; // rax
  const wchar_t *v15; // rdx
  __int64 v16; // rax
  unsigned int v17; // edi
  __int64 v18; // rcx
  int v19; // ebp
  __int64 *v20; // rsi
  char *v21; // rdx
  __int64 v22; // rcx
  int v23; // eax
  LPCCH v24; // rsi
  char *v25; // rbp
  _BYTE *v26; // rax
  _QWORD *v27; // rsi
  unsigned __int16 *v28; // rax
  int v29; // edx
  BYTE *v30; // rax
  unsigned int v31; // eax
  const char *v32; // rdx
  int v33; // eax
  __int64 v34; // rax
  __int64 v35; // rax
  const wchar_t *v36; // r8
  int v38; // [rsp+40h] [rbp-58h]
  int v39; // [rsp+48h] [rbp-50h] BYREF
  unsigned __int16 *v40; // [rsp+50h] [rbp-48h]
  int v41; // [rsp+B0h] [rbp+18h]

  v39 = -268435455;
  v6 = 0i64;
  v41 = 0;
  v7 = 0i64;
  v38 = 0;
  v8 = 0;
  v40 = 0i64;
  v9 = a4;
  v11 = WPP_GLOBAL_Control;
  v12 = lpMultiByteStr;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    if ( !a3 || (v13 = *(_QWORD *)(a3 + 328)) == 0 )
      v13 = a3;
    if ( *(_QWORD *)(v13 + 200) )
    {
      if ( !a3 || (v14 = *(_QWORD *)(a3 + 328)) == 0 )
        v14 = a3;
      v15 = **(const wchar_t ***)(v14 + 200);
    }
    else
    {
      v15 = L".";
    }
    WPP_SF_sSsS(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      (__int64)v15,
      a3,
      a4,
      (__int64)lpMultiByteStr,
      *(_QWORD *)(a3 + 16),
      (__int64)v15);
    v11 = WPP_GLOBAL_Control;
  }
  if ( !a3 || (v16 = *(_QWORD *)(a3 + 328)) == 0 )
    v16 = a3;
  if ( !*(_QWORD *)(v16 + 200) )
  {
    v17 = Zone_LockForRPCSeqEx(a3, 0x2710u);
    if ( v17 )
    {
      v11 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x10) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
      {
LABEL_84:
        if ( v17 )
          goto LABEL_92;
        goto LABEL_87;
      }
      WPP_SF_s(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x5Au,
        (__int64)&WPP_5efa35e0870730ffd13051b9da022308_Traceguids,
        *(const char **)(a3 + 16));
LABEL_83:
      v11 = WPP_GLOBAL_Control;
      goto LABEL_84;
    }
    v38 = 1;
    v17 = Zone_LockForWriteEx(a3, 1, 0x2710u, (__int64)"ds\\dns\\server\\server\\zonerpc.c", 94);
    if ( v17 )
      goto LABEL_95;
    v41 = 1;
    if ( a5 != 3 )
      goto LABEL_26;
    if ( !_stricmp(v9, "BreakOnNameUpdate") )
    {
      if ( v12 )
      {
        v6 = (unsigned __int16 *)Dns_StringCopyAllocate(v12, 0, 1i64, 2);
        if ( !v6 )
        {
          v17 = 14;
          goto LABEL_93;
        }
      }
      v7 = (CHAR *)L"BreakOnNameUpdate";
      v19 = 1;
      v20 = (__int64 *)(a3 + 1640);
      goto LABEL_62;
    }
    if ( _stricmp(v9, "NSEC3UserSalt") )
    {
      v17 = 9553;
      goto LABEL_83;
    }
    if ( (*(_BYTE *)(a3 + 1040) & 2) == 0 )
    {
      v17 = 9101;
      goto LABEL_93;
    }
    if ( v12 )
    {
      v21 = v12;
      v22 = 511i64;
      v23 = 0;
      do
      {
        if ( !*(_WORD *)v21 )
          break;
        v21 += 2;
        --v22;
      }
      while ( v22 );
      if ( v22 )
      {
        v24 = (LPCCH)(511 - v22);
        lpMultiByteStr = (char *)(511 - v22);
        goto LABEL_44;
      }
      v24 = 0i64;
      lpMultiByteStr = 0i64;
    }
    else
    {
      v24 = lpMultiByteStr;
    }
    v23 = -2147024809;
LABEL_44:
    if ( v23 < 0 || (unsigned __int64)v24 > 0x1FE )
    {
      v9 = a4;
LABEL_26:
      v17 = 87;
LABEL_93:
      Zone_UnlockAfterWriteEx(a3, 1, (__int64)"ds\\dns\\server\\server\\zonerpc.c", 61);
      v11 = WPP_GLOBAL_Control;
LABEL_94:
      if ( !v38 )
        goto LABEL_96;
LABEL_95:
      Lock_ReleaseWrite(*(_QWORD *)(a3 + 312));
      v11 = WPP_GLOBAL_Control;
      goto LABEL_96;
    }
    if ( v24 != (LPCCH)1 || *(_WORD *)v12 != 45 )
    {
      v25 = (char *)Dns_StringCopyAllocate(v12, 0, 1i64, 3);
      if ( !v25 )
      {
LABEL_49:
        v17 = 14;
LABEL_50:
        v9 = a4;
        goto LABEL_93;
      }
      v26 = Mem_Alloc((unsigned int)v24, 0i64, "ds\\dns\\server\\server\\zonerpc.c", 5042);
      v27 = v26;
      if ( !v26 )
      {
        v17 = 14;
        Mem_Free(v25, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\zonerpc.c", 5046);
        goto LABEL_50;
      }
      if ( (unsigned int)buildByteBufferFromHexString((__int64)v26, &lpMultiByteStr, v25, v26) )
      {
        v17 = 87;
        Mem_Free(v25, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\zonerpc.c", 5053);
        Mem_Free(v27, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\zonerpc.c", 5054);
        goto LABEL_50;
      }
      Mem_Free(v25, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\zonerpc.c", 5058);
      Mem_Free(v27, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\zonerpc.c", 5059);
    }
    v7 = (CHAR *)"NSEC3UserSalt";
    v20 = (__int64 *)(a3 + 1048);
    v18 = (*(_DWORD *)(a3 + 388) & 1) == 0;
    v19 = 2 - ((*(_DWORD *)(a3 + 388) & 1) == 0);
    if ( (*(_DWORD *)(a3 + 388) & 1) == 0 )
      v7 = (CHAR *)L"NSEC3UserSalt";
    if ( !*(_BYTE *)(a3 + 1045) && *(_DWORD *)(a3 + 372) == 1 && (*(_BYTE *)(a3 + 1040) & 4) != 0 )
      v8 = 1;
LABEL_62:
    if ( !v20 )
      goto LABEL_73;
    if ( !v12 || v6 || (v40 = (unsigned __int16 *)Dns_StringCopyAllocate(v12, 0, 1i64, 1), (v6 = v40) != 0i64) )
    {
      if ( v8 )
      {
        v28 = v6;
        do
        {
          v18 = *(unsigned __int16 *)((char *)v28 + (char *)v20 - (char *)v6);
          v29 = *v28 - (_DWORD)v18;
          if ( v29 )
            break;
          ++v28;
        }
        while ( (_DWORD)v18 );
        if ( v29 )
        {
          *(_DWORD *)(a3 + 1040) |= 0x4008u;
          DnsOls_MarkZoneForResign(a3, 0);
          PersistZoneResignSchedule(a3, 0x10000000);
        }
      }
      Timeout_FreeAndReplaceZoneDataEx(v18, v20, (__int64)v6, 0i64, (__int64)"ds\\dns\\server\\server\\zonerpc.c", 5126);
LABEL_73:
      if ( v7 )
      {
        if ( v19 == 1 )
        {
          v30 = (BYTE *)&LocaleName;
          if ( v12 )
            v30 = (BYTE *)v12;
          v31 = Reg_SetValue(0, 0i64, a3, v7, 0xF0000001, v30, 0);
          goto LABEL_78;
        }
        if ( v19 == 2 )
        {
          v31 = Ds_ZoneWriteProperty(0x10000000, a3, v7, &v39, 0);
LABEL_78:
          v9 = a4;
          v17 = v31;
          goto LABEL_83;
        }
      }
      v9 = a4;
LABEL_87:
      if ( !_stricmp(v9, "NSEC3UserSalt") )
      {
        v32 = "NSEC3UserSalt";
      }
      else
      {
        v33 = _stricmp(v9, "BreakOnNameUpdate");
        v32 = "BreakOnNameUpdate";
        if ( v33 )
          v32 = v7;
      }
      LogZoneProperty(a3, v32, (const unsigned __int16 *)v12);
      v11 = WPP_GLOBAL_Control;
LABEL_92:
      if ( !v41 )
        goto LABEL_94;
      goto LABEL_93;
    }
    goto LABEL_49;
  }
  v17 = 9553;
LABEL_96:
  if ( v11 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)v11 + 68) & 4) != 0
    && *((_BYTE *)v11 + 65) >= 4u )
  {
    if ( !a3 || (v34 = *(_QWORD *)(a3 + 328)) == 0 )
      v34 = a3;
    if ( *(_QWORD *)(v34 + 200) )
    {
      if ( !a3 || (v35 = *(_QWORD *)(a3 + 328)) == 0 )
        v35 = a3;
      v36 = **(const wchar_t ***)(v35 + 200);
    }
    else
    {
      v36 = L".";
    }
    WPP_SF_dssS(*((_QWORD *)v11 + 7), 0x5Bu, (__int64)v36, v17, (__int64)v9, *(_QWORD *)(a3 + 16), (__int64)v36);
  }
  return v17;
}
// 1400D45A5: variable 'v18' is possibly undefined
// 140192480: using guessed type wchar_t aBreakonnameupd[18];
// 1401924A8: using guessed type wchar_t aNsec3usersalt_0[14];
