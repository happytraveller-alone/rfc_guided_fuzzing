Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 108
// Total lines: 97

//----- (000000014000E1C0) ----------------------------------------------------
__int64 __fastcall allocateRpcRecord(CHAR *a1, __int64 a2, CHAR *a3, _QWORD *a4)
{
  DWORD v6; // esi
  _QWORD *v7; // rbp
  wchar_t *v8; // r14
  __int64 v9; // rdx
  __int64 v10; // rcx
  __int64 v11; // r8
  _QWORD *v12; // r12
  void **v13; // rbx
  unsigned __int16 v14; // ax
  __int64 (__fastcall *v15)(__int64, __int128 *); // rax
  __int64 v16; // rax
  __int64 v17; // rdx
  __int64 v18; // r8
  int LastError; // eax
  int v20; // r9d
  __int128 v22; // [rsp+40h] [rbp-38h] BYREF

  v6 = 0;
  v22 = 0i64;
  v7 = 0i64;
  v8 = (wchar_t *)Dns_StringCopyAllocate(a1, 0, 2i64, 1);
  v12 = Dns_StringCopyAllocate(a3, 0, 2i64, 1);
  *(_QWORD *)&v22 = v12;
  if ( (g_rgFastWppEnabledFlagsPerLevel & 2) != 0 )
    WPP_SF_qSdddd(v10, v9, v11, v8);
  if ( !v8 )
  {
LABEL_4:
    SetLastError(0xDu);
LABEL_5:
    v13 = 0i64;
LABEL_19:
    v6 = 13;
    goto LABEL_23;
  }
  v14 = Dns_RecordTableIndexForType(2u);
  if ( v14 && (v15 = (__int64 (__fastcall *)(__int64, __int128 *))RRBuildTableW[v14]) != 0i64 )
  {
    v16 = v15(1i64, &v22);
    v13 = (void **)v16;
    if ( !v16 )
    {
      if ( (byte_1401BA001 & 4) != 0 )
      {
        LastError = GetLastError();
        WPP_SF_Dd(15i64, (unsigned __int16)&WPP_65583f9cec6730b92f858f41b28174ed_Traceguids, 2i64, LastError);
      }
      if ( GetLastError() )
        goto LABEL_5;
      goto LABEL_4;
    }
    *(_DWORD *)(v16 + 20) &= 0xFFFFFFEC;
    *(_DWORD *)(v16 + 20) |= 0xCu;
    *(_WORD *)(v16 + 16) = 2;
    *(_QWORD *)(v16 + 8) = v8;
    if ( (*((_BYTE *)WPP_GLOBAL_Control + 28) & 2) != 0 )
      DnsPrint_Record(2i64, v17, v18, (_QWORD *)v16);
  }
  else
  {
    SetLastError(0x254Fu);
    if ( (byte_1401BA001 & 4) != 0 )
      WPP_SF_D(14i64, (unsigned __int16)&WPP_65583f9cec6730b92f858f41b28174ed_Traceguids, 2i64, v20);
    v13 = 0i64;
  }
  if ( !v13 )
    goto LABEL_19;
  v7 = (_QWORD *)DnsConvertRecordToRpcBuffer((__int64)v13);
  if ( !v7 )
  {
    v6 = GetLastError();
    if ( !v6 )
      v6 = 13;
  }
LABEL_23:
  Dns_RecordFree(v13);
  if ( a4 )
    *a4 = v7;
  else
    Mem_Free(v7, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\autoconfigure.c", 4074);
  Mem_Free(v8, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\autoconfigure.c", 4077);
  Mem_Free(v12, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\autoconfigure.c", 4078);
  return v6;
}
// 14000E22F: variable 'v10' is possibly undefined
// 14000E22F: variable 'v9' is possibly undefined
// 14000E22F: variable 'v11' is possibly undefined
// 14000E2E1: variable 'v17' is possibly undefined
// 14000E2E1: variable 'v18' is possibly undefined
// 14000E30B: variable 'v20' is possibly undefined
// 1401722B0: using guessed type _QWORD RRBuildTableW[1];
// 140185140: using guessed type __int64 (__fastcall *_guard_dispatch_icall_fptr)(_QWORD, _QWORD);
// 1401BA000: using guessed type char g_rgFastWppEnabledFlagsPerLevel;
// 1401BA001: using guessed type char byte_1401BA001;
