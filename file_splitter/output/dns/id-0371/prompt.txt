Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 371
// Total lines: 460

//----- (0000000140030AAC) ----------------------------------------------------
__int64 __fastcall Dp_PollForPartitions(LDAP *ld, int a2, __int64 a3)
{
  PWCHAR *v5; // r14
  int v6; // r13d
  CDnsClientSubnetRecordsTrie *v7; // rcx
  PLDAP v8; // r15
  LDAPMessage *entry; // rax
  LDAPMessage *v10; // rdi
  const wchar_t **valuesW; // rax
  const wchar_t **v12; // rbx
  PWCHAR *v13; // rax
  const wchar_t **v14; // rbx
  __int64 v15; // rcx
  int LastError; // eax
  const unsigned __int16 *v17; // r9
  DWORD TickCount; // ebx
  PLDAPSearch inited; // rdi
  int v20; // eax
  ULONG v21; // ebx
  WCHAR *v22; // r13
  int NextMessageInSearch; // eax
  char v24; // di
  LDAPMessage *v25; // r14
  CDnsClientSubnetRecordsTrie *v26; // rcx
  __int64 *i; // rcx
  __int64 v28; // r8
  WCHAR *v29; // rax
  __int64 v30; // r8
  int v31; // edx
  int v32; // ecx
  __int64 *Next; // rax
  __int64 v34; // rbx
  __int64 v35; // rax
  int v36; // r9d
  __int64 v37; // rbx
  unsigned __int16 v38; // dx
  CDnsClientSubnetRecordsTrie *v39; // rcx
  int v40; // edi
  __int64 *j; // rcx
  __int64 *v42; // rbx
  unsigned int v43; // ebx
  int v45; // [rsp+60h] [rbp-A0h] BYREF
  unsigned int CurrentTimeInSeconds; // [rsp+64h] [rbp-9Ch]
  int v47; // [rsp+68h] [rbp-98h]
  int v48; // [rsp+6Ch] [rbp-94h]
  PLDAPMessage res; // [rsp+70h] [rbp-90h] BYREF
  PWCHAR Block; // [rsp+78h] [rbp-88h]
  __int64 v51[7]; // [rsp+80h] [rbp-80h] BYREF
  int v52; // [rsp+BCh] [rbp-44h]
  PLDAPControlW ServerControls[4]; // [rsp+210h] [rbp+110h] BYREF
  WCHAR base[1288]; // [rsp+230h] [rbp+130h] BYREF

  v47 = a2;
  v45 = 0;
  ServerControls[0] = (PLDAPControlW)&NoDsSvrReferralControl;
  Block = 0i64;
  ServerControls[1] = (PLDAPControlW)&SecurityDescriptorControl_DGO;
  ServerControls[2] = 0i64;
  v5 = 0i64;
  v6 = 0;
  if ( _InterlockedIncrement(&dword_1401B8CB0) != 1 )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x41u, (__int64)&WPP_0f7f6e0c97433b7ed77e9ce4b2e20f93_Traceguids);
    }
    goto LABEL_138;
  }
  if ( !dword_1401B9954 || !(unsigned int)Ds_IsDsServer(0) )
    goto LABEL_138;
  v7 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
  {
    WPP_SF_D(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x42u, (__int64)&WPP_0f7f6e0c97433b7ed77e9ce4b2e20f93_Traceguids, a2);
    v7 = WPP_GLOBAL_Control;
  }
  v48 = a2 & 1;
  if ( (a2 & 1) == 0 )
  {
    a3 = (unsigned int)dword_1401B9714;
    if ( dword_1401B9714 < (unsigned int)(g_dwLastPartitionPollTime + 10) )
    {
      if ( v7 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)v7 + 17) & 0x400) != 0
        && *((_BYTE *)v7 + 65) >= 5u )
      {
        WPP_SF_Ddd(
          *((_QWORD *)v7 + 7),
          0x43u,
          (__int64)&WPP_0f7f6e0c97433b7ed77e9ce4b2e20f93_Traceguids,
          g_dwLastPartitionPollTime);
      }
      goto LABEL_138;
    }
  }
  v8 = pServerLdap;
  if ( ld )
    v8 = ld;
  if ( !v8 )
  {
    v45 = 9717;
    goto LABEL_138;
  }
  memset_0(v51, 0, 0x190ui64);
  v52 = 0;
  CurrentTimeInSeconds = Dns_GetCurrentTimeInSeconds();
  dword_1401B9714 = CurrentTimeInSeconds;
  g_dwLastPartitionPollTime = CurrentTimeInSeconds;
  Ds_GetPartitionsContainerDn(base);
  if ( base[0] )
  {
    res = 0i64;
    v45 = ldap_search_ext_sW(v8, base, 0, 0i64, 0i64, 0, ServerControls, 0i64, &g_LdapTimeout, 0, &res);
    if ( v45 )
      goto LABEL_54;
    entry = ldap_first_entry(v8, res);
    v10 = entry;
    if ( !entry )
      goto LABEL_54;
    valuesW = (const wchar_t **)ldap_get_valuesW(v8, entry, (const PWSTR)L"msDS-Behavior-Version");
    v12 = valuesW;
    if ( valuesW && *valuesW )
    {
      g_ulDsForestVersion = dword_1401B988C == -1 || dword_1401B988C <= (unsigned int)_wtoi(*valuesW)
                          ? _wtoi(*v12)
                          : dword_1401B988C;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
      {
        WPP_SF_SD(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x44u,
          (__int64)&WPP_0f7f6e0c97433b7ed77e9ce4b2e20f93_Traceguids,
          L"msDS-Behavior-Version");
      }
    }
    ldap_value_freeW((PWCHAR *)v12);
    v13 = ldap_get_valuesW(v8, v10, (const PWSTR)L"fSMORoleOwner");
    v5 = v13;
    if ( !v13 || !*v13 )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        LastError = LdapGetLastError();
        WPP_SF_DSS(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x45u,
          (__int64)&WPP_0f7f6e0c97433b7ed77e9ce4b2e20f93_Traceguids,
          LastError,
          (__int64)L"fSMORoleOwner",
          (__int64)base);
      }
      goto LABEL_54;
    }
    v14 = (const wchar_t **)Ds_ReadServerObjectFromDs(v8, *v13, &v45);
    if ( v45 )
    {
LABEL_54:
      ldap_value_freeW(v5);
      ldap_msgfree(res);
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        if ( g_pFsmo )
          v17 = *(const unsigned __int16 **)(g_pFsmo + 8);
        else
          v17 = L"UNKNOWN";
        WPP_SF_SD(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x46u,
          (__int64)&WPP_0f7f6e0c97433b7ed77e9ce4b2e20f93_Traceguids,
          v17);
      }
      v45 = 0;
      goto LABEL_62;
    }
    EnterCriticalSection(&g_DpCS);
    v15 = g_pFsmo;
    if ( g_pFsmo && *(_QWORD *)g_pFsmo && *v14 && *(_QWORD *)(g_pFsmo + 8) && v14[1] )
    {
      if ( !_wcsicmp(*(const wchar_t **)g_pFsmo, *v14) && !_wcsicmp(*(const wchar_t **)(g_pFsmo + 8), v14[1]) )
      {
        Ds_FreeServerObject(v14);
        goto LABEL_48;
      }
      v15 = g_pFsmo;
    }
    Timeout_FreeWithFunctionEx(v15, (__int64)Ds_FreeServerObject, (__int64)"ds\\dns\\server\\server\\dpart.c", 3654);
    g_pFsmo = (__int64)v14;
    v6 = 1;
    g_fFsmoDown = 0;
LABEL_48:
    LeaveCriticalSection(&g_DpCS);
    if ( v6 )
    {
      EnterCriticalSection(pcsLdap);
      g_bDisabledFsmo = 1;
      LeaveCriticalSection(pcsLdap);
    }
    goto LABEL_54;
  }
LABEL_62:
  TickCount = GetTickCount();
  inited = ldap_search_init_pageW(
             v8,
             base,
             1u,
             g_szCrossRefFilter,
             &g_CrossRefDesiredAttrs,
             0,
             ServerControls,
             0i64,
             0xB4u,
             0,
             0i64);
  _InterlockedExchangeAdd(&dword_1401C7D48, GetTickCount() - TickCount);
  if ( inited )
  {
    v51[0] = (__int64)inited;
    if ( g_fDnsServiceExit == 1 )
    {
      v26 = WPP_GLOBAL_Control;
LABEL_133:
      if ( v26 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)v26 + 17) & 0x400) != 0
        && *((_BYTE *)v26 + 65) >= 4u )
      {
        WPP_SF_(*((_QWORD *)v26 + 7), 0x48u, (__int64)&WPP_0f7f6e0c97433b7ed77e9ce4b2e20f93_Traceguids);
      }
    }
    else
    {
      v22 = Block;
      while ( 1 )
      {
        NextMessageInSearch = Ds_GetNextMessageInSearch((__int64)v51);
        v45 = NextMessageInSearch;
        if ( NextMessageInSearch )
          break;
        v24 = v47;
        if ( (v47 & 2) != 0 )
          Service_LoadCheckpoint();
        v25 = (LDAPMessage *)v51[2];
        ldap_memfreeW(v22);
        Block = ldap_get_dnW(v8, v25);
        v22 = Block;
        if ( Block )
        {
          for ( i = 0i64; ; i = (__int64 *)v34 )
          {
            Next = Dp_GetNext(i);
            v34 = (__int64)Next;
            if ( !Next )
            {
              if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
                && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
              {
                WPP_SF_S(
                  *((_QWORD *)WPP_GLOBAL_Control + 7),
                  0x4Eu,
                  (__int64)&WPP_0f7f6e0c97433b7ed77e9ce4b2e20f93_Traceguids,
                  v22);
              }
              v35 = Dp_LoadFromCrossRef(v8, v25, 0i64, &v45);
              v36 = v45;
              v37 = v35;
              if ( !v45 )
              {
                if ( v35 )
                {
                  performInitialTasksOnLoadedDp(v8, v24, v35);
                  *(_QWORD *)(v37 + 92) = CurrentTimeInSeconds;
                  Dp_AddToList(v37);
                }
                goto LABEL_114;
              }
              v26 = WPP_GLOBAL_Control;
              if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
                && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
              {
                v38 = 79;
LABEL_94:
                WPP_SF_DS(
                  *((_QWORD *)v26 + 7),
                  v38,
                  (__int64)&WPP_0f7f6e0c97433b7ed77e9ce4b2e20f93_Traceguids,
                  v36,
                  (__int64)v22);
                v26 = WPP_GLOBAL_Control;
                goto LABEL_115;
              }
              goto LABEL_115;
            }
            v28 = Next[6];
            v29 = v22;
            v30 = v28 - (_QWORD)v22;
            do
            {
              v31 = *(WCHAR *)((char *)v29 + v30);
              v32 = *v29 - v31;
              if ( v32 )
                break;
              ++v29;
            }
            while ( v31 );
            if ( !v32 )
              break;
          }
          v39 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            WPP_SF_S(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x4Bu,
              (__int64)&WPP_0f7f6e0c97433b7ed77e9ce4b2e20f93_Traceguids,
              v22);
            v39 = WPP_GLOBAL_Control;
          }
          v40 = *(_DWORD *)(v34 + 16);
          if ( (*(_BYTE *)(v34 + 100) & 0x20) != 0
            && v39 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)v39 + 17) & 0x400) != 0
            && *((_BYTE *)v39 + 65) >= 4u )
          {
            WPP_SF_S(*((_QWORD *)v39 + 7), 0x4Cu, (__int64)&WPP_0f7f6e0c97433b7ed77e9ce4b2e20f93_Traceguids, v22);
          }
          Dp_LoadFromCrossRef(v8, v25, v34, &v45);
          *(_DWORD *)(v34 + 96) = 0;
          v36 = v45;
          *(_DWORD *)(v34 + 92) = CurrentTimeInSeconds;
          if ( !v36 )
          {
            if ( v40 && !*(_DWORD *)(v34 + 16) )
              performInitialTasksOnLoadedDp(v8, v47, v34);
            goto LABEL_114;
          }
          v26 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
          {
            v38 = 77;
            goto LABEL_94;
          }
        }
        else
        {
          v26 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            WPP_SF_q(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x4Au,
              (__int64)&WPP_0f7f6e0c97433b7ed77e9ce4b2e20f93_Traceguids,
              v25);
LABEL_114:
            v26 = WPP_GLOBAL_Control;
          }
        }
LABEL_115:
        if ( g_fDnsServiceExit == 1 )
          goto LABEL_133;
      }
      if ( NextMessageInSearch == 1168897 )
      {
        v45 = 0;
        for ( j = 0i64; ; j = v42 )
        {
          v42 = Dp_GetNext(j);
          if ( !v42 )
            break;
          if ( *((_DWORD *)v42 + 23) != CurrentTimeInSeconds )
          {
            if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
              && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
            {
              WPP_SF_S(
                *((_QWORD *)WPP_GLOBAL_Control + 7),
                0x50u,
                (__int64)&WPP_0f7f6e0c97433b7ed77e9ce4b2e20f93_Traceguids,
                (const unsigned __int16 *)v42[5]);
            }
            *((_DWORD *)v42 + 25) |= 0x20u;
          }
        }
        Dp_MigrateDcpromoZones(v48);
      }
      else if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
             && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
             && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        WPP_SF_D(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x49u,
          (__int64)&WPP_0f7f6e0c97433b7ed77e9ce4b2e20f93_Traceguids,
          NextMessageInSearch);
      }
    }
  }
  else
  {
    v20 = LdapGetLastError();
    v21 = v20;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      WPP_SF_D(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x47u,
        (__int64)&WPP_0f7f6e0c97433b7ed77e9ce4b2e20f93_Traceguids,
        v20);
    }
    v45 = Ds_ErrorHandler(v21, (__int64)base, v8, 0);
  }
  ldap_memfreeW(Block);
  ldap_value_freeW(0i64);
  Ds_CleanupSearchBlob((__int64)v51);
LABEL_138:
  _InterlockedDecrement(&dword_1401B8CB0);
  v43 = v45;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
  {
    WPP_SF_LD(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x51u, a3, v45);
  }
  return v43;
}
// 14003143E: variable 'a3' is possibly undefined
// 14018B698: using guessed type wchar_t aUnknown_0[8];
// 1401B7F3C: using guessed type int g_ulDsForestVersion;
// 1401B8CB0: using guessed type int dword_1401B8CB0;
// 1401B8CD8: using guessed type int g_dwLastPartitionPollTime;
// 1401B8CF8: using guessed type int g_bDisabledFsmo;
// 1401B8CFC: using guessed type int g_fFsmoDown;
// 1401B8D08: using guessed type __int64 g_pFsmo;
// 1401B9714: using guessed type int dword_1401B9714;
// 1401B988C: using guessed type int dword_1401B988C;
// 1401B9954: using guessed type int dword_1401B9954;
// 1401B9A40: using guessed type int g_fDnsServiceExit;
// 1401C7D48: using guessed type int dword_1401C7D48;
// 1401EC420: using guessed type __int64 NoDsSvrReferralControl;
// 1401EC440: using guessed type __int64 SecurityDescriptorControl_DGO;
##############################
Role: Let's assume that you are an advanced reverse engineer and you are reverse engineering a network driver using IDA Pro, and you are also familiar with the RFC documentation. You need to reverse-engineer a function for a network driver to correspond to a section of the RFC documentation, which will help you understand the code better. The driver you're reversing is Schannel.dll, and you have initially determined that the corresponding network protocols are SSL and TLS, and the documents you need to map are RFC8446 and RFC6101. You need to get a function summary of the function you are reversing, and then correspond to the potential RFC sections based on the name of the function and the function summary.
Function Background: The function is reverse engineered from the driver file Schannel.dll on Windows platform. Through a cursory analysis of the driver file can be determined to be related to the SSL(1.3), TLS(3.0) protocol, that is, with RFC8446, RFC6101 strong correlation.

Output Function Summary: Summarizes the function's functionality with several phrases instead of sentences, focuses on covering the function's control flow information, and highlights the protocol function points implemented by the function. Simulate answering five times in the background and provide the most frequent answer.

Retrieve document sections: giving matches for document sections(FunctionMatchRFCResult) that the code may related to. NOTE if the code is only business related(i.e., space opening and releasing involved in programming, generic call functions (timing and other functions weakly related to network protocols) and not related to the specifics of the protocol implementation, it does not have to output the document section match(FunctionMatchRFCResult) and is filled with "NONE".

Retrieve document sections Thinking Chain: The function code is matched with the RFC document section, and the thinking chain is provided to help you solve the problem better:
	1. Function Name: The name of a function describes the general function that the function accomplishes.
	2. Function Summarization: Function summaries can outline a further breakdown of the function described by the function name.
	3. Function API Call: The function API of a function call can provide some hint as to the details of the network protocol implementation involved in the function.
	4. Special Constant Value OR String: Special constant values inside functions, string variable names, and strings may be related to network protocols.
	5. Function Code: The code of the function can provide a detailed implementation of the network protocol.
Generate Function Information Collection with JSON Format:

{
	"FunctionIndex": "(FILL WITH "File count" with less than four bits are indexed with zeros to make up the four bits.)",
	"FunctionName": "(Full Function Code Name)",
	"FunctionSummarization": [
		"(Function Summary Phrase1)",
		"(Function Summary Phrase2)",
		"(...)"
	],
	"FunctionMatchRFCResult": [
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 1)",
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 2)",
		"(...)"
	],
}

ATTENTION: Remember YOU MUST ONLY output the Function Information Collection result.
