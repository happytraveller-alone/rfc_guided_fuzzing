Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 1996
// Total lines: 289

//----- (00000001400F5268) ----------------------------------------------------
__int64 __fastcall DnsOls_ClearKeymasterForSearchResult(LDAP *a1, __int64 a2, LDAPMessage *a3, char a4, _QWORD *a5)
{
  int v7; // edi
  unsigned int SettingsObjectDn; // esi
  WCHAR *dnW; // r15
  __int64 v11; // rax
  CDnsClientSubnetRecordsTrie *v12; // rcx
  LDAPMessage *v13; // rdx
  LDAP *v14; // r12
  LDAPMessage *entry; // rbx
  int v16; // eax
  CDnsClientSubnetRecordsTrie *v17; // rcx
  _QWORD *v18; // rbx
  int outvalue; // [rsp+20h] [rbp-E0h]
  ULONG v21; // [rsp+28h] [rbp-D8h]
  _QWORD *v22; // [rsp+40h] [rbp-C0h]
  __int64 v24[2]; // [rsp+58h] [rbp-A8h] BYREF
  LDAPModW *mods[2]; // [rsp+68h] [rbp-98h] BYREF
  int v26; // [rsp+78h] [rbp-88h] BYREF
  const WCHAR *v27; // [rsp+80h] [rbp-80h]
  __int64 *v28; // [rsp+88h] [rbp-78h]
  wchar_t String2[1288]; // [rsp+90h] [rbp-70h] BYREF

  v7 = 0;
  SettingsObjectDn = 0;
  dnW = 0i64;
  memset_0(String2, 0, 0xA02ui64);
  v22 = 0i64;
  if ( (a4 & 1) != 0 )
    goto LABEL_14;
  SettingsObjectDn = Ds_GetSettingsObjectDn(String2);
  v11 = 0i64;
  if ( SettingsObjectDn )
  {
    v12 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_D(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x1Fu,
        (__int64)&WPP_b7aea06a65693a31b0dd129af848d3b8_Traceguids,
        SettingsObjectDn);
LABEL_7:
      v12 = WPP_GLOBAL_Control;
      v11 = 0i64;
    }
LABEL_74:
    if ( !SettingsObjectDn && v7 )
      SettingsObjectDn = v7;
    goto LABEL_77;
  }
  v12 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_S(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x20u,
      (__int64)&WPP_b7aea06a65693a31b0dd129af848d3b8_Traceguids,
      String2);
    v12 = WPP_GLOBAL_Control;
    v11 = 0i64;
  }
  if ( String2[0] )
  {
LABEL_14:
    v13 = a3;
    v14 = a1;
    entry = ldap_first_entry(a1, v13);
    v11 = 0i64;
    if ( entry )
    {
      while ( 1 )
      {
        if ( !SettingsObjectDn && v7 )
          SettingsObjectDn = v7;
        v7 = 0;
        if ( dnW )
          ldap_memfreeW(dnW);
        dnW = ldap_get_dnW(v14, entry);
        v11 = 0i64;
        if ( !dnW )
          break;
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          WPP_SF_S(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x23u,
            (__int64)&WPP_b7aea06a65693a31b0dd129af848d3b8_Traceguids,
            dnW);
        }
        if ( _wcsicmp(dnW, String2) )
        {
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            WPP_SF_sS(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x25u,
              (__int64)&WPP_b7aea06a65693a31b0dd129af848d3b8_Traceguids,
              *(const char **)(a2 + 16),
              (__int64)dnW);
          }
          v24[0] = *(_QWORD *)(a2 + 840);
          v24[1] = 0i64;
          v27 = L"msDNS-KeymasterZones";
          mods[1] = 0i64;
          v28 = v24;
          mods[0] = (LDAPModW *)&v26;
          v26 = 1;
          v16 = Dns_LdapModifyExt(v14, dnW, mods, 0i64, outvalue, v21, 0);
          v7 = v16;
          v17 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            WPP_SF_DS(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x26u,
              (__int64)&WPP_b7aea06a65693a31b0dd129af848d3b8_Traceguids,
              v16,
              (__int64)dnW);
            v17 = WPP_GLOBAL_Control;
          }
          if ( ((v7 - 16) & 0xFFFFFFEF) == 0 )
          {
            if ( v17 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              && (*((_DWORD *)v17 + 17) & 0x200000) != 0
              && *((_BYTE *)v17 + 65) >= 4u )
            {
              WPP_SF_DS(
                *((_QWORD *)v17 + 7),
                0x27u,
                (__int64)&WPP_b7aea06a65693a31b0dd129af848d3b8_Traceguids,
                v7,
                (__int64)dnW);
              v17 = WPP_GLOBAL_Control;
            }
            v7 = 0;
          }
          if ( v7 )
          {
            if ( v7 == 5 )
            {
              if ( v17 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                && (*((_DWORD *)v17 + 17) & 0x200000) != 0
                && *((_BYTE *)v17 + 65) >= 2u )
              {
                WPP_SF_sS(
                  *((_QWORD *)v17 + 7),
                  0x29u,
                  (__int64)&WPP_b7aea06a65693a31b0dd129af848d3b8_Traceguids,
                  *(const char **)(a2 + 16),
                  (__int64)dnW);
              }
            }
            else
            {
              if ( v17 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                && (*((_DWORD *)v17 + 17) & 0x200000) != 0
                && *((_BYTE *)v17 + 65) >= 2u )
              {
                WPP_SF_DsS(
                  *((_QWORD *)v17 + 7),
                  0x2Au,
                  (__int64)&WPP_b7aea06a65693a31b0dd129af848d3b8_Traceguids,
                  v7,
                  *(_QWORD *)(a2 + 16),
                  (__int64)dnW);
              }
              v7 = 9122;
            }
          }
          else if ( v22 )
          {
            if ( v17 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              && (*((_DWORD *)v17 + 17) & 0x200000) != 0
              && *((_BYTE *)v17 + 65) >= 2u )
            {
              WPP_SF_sSS(
                *((_QWORD *)v17 + 7),
                0x28u,
                (__int64)&WPP_b7aea06a65693a31b0dd129af848d3b8_Traceguids,
                *(const char **)(a2 + 16),
                (__int64)dnW,
                (__int64)v22);
            }
          }
          else
          {
            v22 = Dns_StringCopyAllocate((char *)dnW, 0, 1i64, 1);
            if ( !v22 )
            {
              v7 = 14;
LABEL_56:
              ldap_memfreeW(dnW);
              goto LABEL_7;
            }
          }
        }
        else if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
               && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
               && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          WPP_SF_S(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x24u,
            (__int64)&WPP_b7aea06a65693a31b0dd129af848d3b8_Traceguids,
            String2);
        }
        entry = ldap_next_entry(a1, entry);
        if ( !entry )
          goto LABEL_56;
        v14 = a1;
      }
      v12 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_q(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x22u,
          (__int64)&WPP_b7aea06a65693a31b0dd129af848d3b8_Traceguids,
          entry);
        v12 = WPP_GLOBAL_Control;
        v11 = 0i64;
      }
      v7 = 13;
      goto LABEL_74;
    }
    v12 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
    {
      v18 = 0i64;
      goto LABEL_85;
    }
    if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0 && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_s(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x21u,
        (__int64)&WPP_b7aea06a65693a31b0dd129af848d3b8_Traceguids,
        *(const char **)(a2 + 16));
      v12 = WPP_GLOBAL_Control;
      v11 = 0i64;
    }
  }
  else
  {
    SettingsObjectDn = 13;
  }
LABEL_77:
  if ( v12 == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    || (*((_DWORD *)v12 + 17) & 0x200000) == 0
    || *((_BYTE *)v12 + 65) < 4u )
  {
    v18 = v22;
  }
  else
  {
    if ( a2 )
      v11 = *(_QWORD *)(a2 + 16);
    v18 = v22;
    WPP_SF_DsS(
      *((_QWORD *)v12 + 7),
      0x2Bu,
      (__int64)&WPP_b7aea06a65693a31b0dd129af848d3b8_Traceguids,
      SettingsObjectDn,
      v11,
      (__int64)v22);
  }
LABEL_85:
  if ( a5 )
    *a5 = v18;
  else
    Mem_Free(v18, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\olsds.cpp", 1724);
  return SettingsObjectDn;
}
// 1400F553F: variable 'outvalue' is possibly undefined
// 1400F553F: variable 'v21' is possibly undefined
