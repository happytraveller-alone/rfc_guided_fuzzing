Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 312
// Total lines: 294

//----- (000000014002805C) ----------------------------------------------------
__int64 __fastcall Dnssec_PerformValidationOnDsRRset(__int64 a1, __int64 a2, __int64 a3)
{
  unsigned int v3; // r14d
  int v7; // eax
  char *v8; // rax
  char *v9; // rax
  __int64 i; // r9
  __int64 NextRecord; // rax
  __int64 v12; // r15
  char *v13; // rax
  char *v14; // rax
  const char *v15; // r9
  __int64 v16; // rax
  __int64 v17; // r15
  unsigned int v18; // eax
  __int64 v19; // r15
  __int64 *v20; // rax
  int v21; // r15d
  __int64 *v22; // rsi
  __int64 v23; // r9
  __int64 v24; // rsi
  __int64 v25; // r15
  char *v26; // rax
  char v27; // r9
  char *v28; // rax
  unsigned int v30; // [rsp+50h] [rbp-188h] BYREF
  int v31; // [rsp+54h] [rbp-184h] BYREF
  __int64 v32; // [rsp+58h] [rbp-180h]
  __int64 *v33; // [rsp+60h] [rbp-178h]
  int v34; // [rsp+68h] [rbp-170h] BYREF
  __int64 v35; // [rsp+70h] [rbp-168h]
  unsigned __int8 v36[272]; // [rsp+80h] [rbp-158h] BYREF

  v3 = 0;
  v35 = a3;
  v33 = 0i64;
  if ( !a2 )
    goto LABEL_87;
  v7 = *(_DWORD *)(a3 + 28);
  if ( (v7 & 4) != 0 )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x100000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      v8 = Dbg_NodeName(a2);
      WPP_SF_qs(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x3Du,
        (__int64)&WPP_61593714a64130a636c4534d3ca3552a_Traceguids,
        a3,
        v8);
    }
    goto LABEL_87;
  }
  if ( (v7 & 3) != 3 )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x100000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      v9 = Dbg_NodeName(a2);
      WPP_SF_qDs(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x3Eu,
        (__int64)&WPP_61593714a64130a636c4534d3ca3552a_Traceguids,
        a3,
        *(_DWORD *)(a3 + 28) & 3,
        v9);
    }
    Dbase_LockEx(0i64, 2, (__int64)"ds\\dns\\server\\server\\dnssec.c", 71);
    for ( i = 0i64; ; i = v12 )
    {
      NextRecord = RR_FindNextRecordEx(a2, 0, 0xFFu, i, *(_DWORD *)(a1 + 568), 1);
      v12 = NextRecord;
      if ( !NextRecord )
        break;
      if ( (*(_BYTE *)(NextRecord + 28) & 4) != 0 )
        setValidationStatusOnRRset(a1, NextRecord, *(_DWORD *)(a3 + 28) & 3, 1u, *(_DWORD *)(a1 + 568), 0xFFFFFFFF);
    }
    Dbase_UnlockEx(0i64, 2, (__int64)"ds\\dns\\server\\server\\dnssec.c", 93);
    if ( (*(_BYTE *)(a3 + 28) & 1) != 0 )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x100000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        v13 = Dbg_NodeName(a2);
        WPP_SF_qs(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x40u,
          (__int64)&WPP_61593714a64130a636c4534d3ca3552a_Traceguids,
          a3,
          v13);
      }
      v3 = 1;
      goto LABEL_87;
    }
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x100000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      v14 = Dbg_NodeName(a2);
      v15 = "INDETERMINATE";
      if ( (*(_DWORD *)(a3 + 28) & 3) == 2 )
        v15 = "BOGUS";
      WPP_SF_sqs(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x3Fu,
        (__int64)&WPP_61593714a64130a636c4534d3ca3552a_Traceguids,
        v15,
        a3,
        (__int64)v14);
    }
LABEL_86:
    v3 = 0;
    goto LABEL_87;
  }
  v16 = RR_FindNextRecordEx(a2, 0, 0x30u, 0i64, *(_DWORD *)(a1 + 568), 1);
  v32 = v16;
  v17 = v16;
  if ( !v16 )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x100000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_q(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x41u,
        (__int64)&WPP_61593714a64130a636c4534d3ca3552a_Traceguids,
        a2);
    }
    goto LABEL_87;
  }
  if ( (*(_BYTE *)(v16 + 28) & 4) == 0 )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x100000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_q(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x42u,
        (__int64)&WPP_61593714a64130a636c4534d3ca3552a_Traceguids,
        a2);
    }
    LOBYTE(v3) = (*(_BYTE *)(v17 + 28) & 3) == 3;
    goto LABEL_87;
  }
  if ( (unsigned int)Dnssec_NodeToCountName(v36, (__int64 *)a2) )
  {
    v18 = RR_ListCountRecords(a2, 0x30u, 1);
    v19 = v18;
    v30 = v18;
    if ( v18 )
    {
      v20 = (__int64 *)Mem_AllocZero(8 * v18, 0i64, "ds\\dns\\server\\server\\dnssec.c", 2473);
      v33 = v20;
      if ( v20 )
      {
        v21 = Dns_ValidateDSDigest(v36, a3, *(__int64 **)(a2 + 64), (__int64)v20, &v30, &v34);
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x100000) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          WPP_SF_Dd(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x44u,
            (__int64)&WPP_61593714a64130a636c4534d3ca3552a_Traceguids,
            v21);
        }
        LOBYTE(v3) = v21 == 0;
        if ( v3 )
          _InterlockedAdd(&dword_1401C7E28, 1u);
        else
          _InterlockedAdd(&dword_1401C7E2C, 1u);
        v19 = v30;
      }
      else
      {
        v19 = 0i64;
      }
    }
    Dbase_LockEx(0i64, 2, (__int64)"ds\\dns\\server\\server\\dnssec.c", 223);
    if ( v3 && (_DWORD)v19 )
    {
      v31 = 0;
      v22 = v33;
      do
      {
        setValidationStatusOnSingleRecord(*v22++, 3i64, 1i64, *(_DWORD *)(a1 + 568), 0xFFFFFFFF);
        --v19;
      }
      while ( v19 );
      v24 = v35;
      v25 = v32;
      if ( (unsigned int)Dnssec_PerformValidationOnRRset(
                           a1,
                           0i64,
                           (__int64 *)a2,
                           v23,
                           (__int64 *)a2,
                           0i64,
                           *(_QWORD *)(a2 + 64),
                           v32,
                           &v31) )
      {
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x100000) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          v26 = Dbg_NodeName(a2);
          WPP_SF_sq(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x45u,
            (__int64)&WPP_61593714a64130a636c4534d3ca3552a_Traceguids,
            v26);
        }
        v27 = 9;
LABEL_66:
        Dbase_UnlockEx(0i64, 2, (__int64)"ds\\dns\\server\\server\\dnssec.c", v27);
        goto LABEL_87;
      }
      if ( v31 == 5 )
      {
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x100000) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          v28 = Dbg_NodeName(a2);
          WPP_SF_Dsq(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x46u,
            (__int64)&WPP_61593714a64130a636c4534d3ca3552a_Traceguids,
            *(unsigned __int8 *)(v25 + 59),
            (__int64)v28);
        }
        setValidationStatusOnRRset(a1, v25, 1u, 1u, *(_DWORD *)(a1 + 568), 0xFFFFFFFF);
        do
        {
          if ( *(_WORD *)(v24 + 12) != 43 )
            break;
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x100000) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
          {
            WPP_SF_q(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x47u,
              (__int64)&WPP_61593714a64130a636c4534d3ca3552a_Traceguids,
              v24);
          }
          *(_DWORD *)(v24 + 28) |= 0x20u;
          v24 = *(_QWORD *)v24;
        }
        while ( v24 );
        v27 = 45;
        goto LABEL_66;
      }
    }
    else
    {
      v25 = v32;
    }
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x100000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_qq(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x48u,
        (__int64)&WPP_61593714a64130a636c4534d3ca3552a_Traceguids,
        v25,
        a2);
    }
    setValidationStatusOnRRset(a1, v25, 2u, 1u, *(_DWORD *)(a1 + 568), 0xFFFFFFFF);
    Dbase_UnlockEx(0i64, 2, (__int64)"ds\\dns\\server\\server\\dnssec.c", 70);
    goto LABEL_86;
  }
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x100000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x43u, (__int64)&WPP_61593714a64130a636c4534d3ca3552a_Traceguids);
  }
LABEL_87:
  Mem_Free(v33, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\dnssec.c", 2635);
  return v3;
}
// 140028568: variable 'v23' is possibly undefined
// 1401C7E28: using guessed type int dword_1401C7E28;
// 1401C7E2C: using guessed type int dword_1401C7E2C;
