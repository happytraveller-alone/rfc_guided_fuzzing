Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 2827
// Total lines: 276

//----- (000000014014D7A4) ----------------------------------------------------
__int64 __fastcall DnsRRL_ApplyRRLOnResponse(__int64 a1, __int64 a2, unsigned int a3, unsigned __int64 a4, int *a5)
{
  CDnsClientSubnetRecordsTrie *v7; // rcx
  unsigned __int16 v8; // dx
  CDnsRRLManager *v9; // rbx
  struct IDnsRRLStateInfo *v10; // r12
  void *v11; // rdx
  CDnsClientSubnetRecordsTrie *v12; // rcx
  unsigned __int16 v13; // dx
  CDnsRRLManager *v15; // rbx
  struct _RTL_CRITICAL_SECTION *v16; // rdi
  unsigned int FreeListSize; // esi
  __int64 v18; // rax
  __int64 v19; // rbx
  unsigned int v20; // esi
  int StateData; // eax
  __int64 v22; // rcx
  unsigned int v23; // edi
  CDnsClientSubnetRecordsTrie *v24; // rcx
  unsigned __int16 v25; // dx
  unsigned __int64 v26; // r12
  CDnsRRLManager *v27; // rcx
  struct IDnsRRLStateInfo *v28; // rdi
  __int64 v29; // rax
  int v30; // eax
  unsigned int v31; // esi
  __int64 v32; // rax
  CDnsRRLManager *v33; // rcx
  __int64 v34; // rax
  CDnsRRLManager *v35; // rcx
  CDnsClientSubnetRecordsTrie *v36; // rcx
  __int64 v37; // [rsp+20h] [rbp-E0h]
  unsigned int v38; // [rsp+40h] [rbp-C0h] BYREF
  struct IDnsRRLStateInfo *v39; // [rsp+48h] [rbp-B8h] BYREF
  unsigned __int64 v40; // [rsp+50h] [rbp-B0h]
  __int16 v41[184]; // [rsp+60h] [rbp-A0h] BYREF
  wchar_t String1[256]; // [rsp+1D0h] [rbp+D0h] BYREF
  int v43; // [rsp+3D0h] [rbp+2D0h]

  v38 = a3;
  v40 = a4;
  *a5 = 0;
  memset_0(String1, 0, 0x204ui64);
  memset_0(v41, 0, sizeof(v41));
  if ( (unsigned int)Name_ConvertPacketNameToLookupNameEx(
                       a2,
                       (unsigned __int8 *)(a2 + 6316),
                       (unsigned __int16 *)v41,
                       1)
    && !(unsigned int)MatchPolicy((struct _DNS_MSGINFO *)a2, 0i64, (__int64)v41, 1u, 4, String1, 0i64)
    && !v43 )
  {
    v7 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800000) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
    {
      return 0i64;
    }
    v8 = 48;
LABEL_73:
    WPP_SF_q(*((_QWORD *)v7 + 7), v8, (__int64)&WPP_fb17dad7faab38b20f3316f2d4e4b278_Traceguids, a2, v37);
    return 0i64;
  }
  v9 = g_DnsRRLManager;
  v10 = 0i64;
  EnterCriticalSection((LPCRITICAL_SECTION)((char *)g_DnsRRLManager + 88));
  if ( *((_QWORD *)v9 + 1) )
  {
    v11 = **(void ***)v9;
    v10 = (struct IDnsRRLStateInfo *)*((_QWORD *)v11 + 2);
    if ( v11 != *(void **)v9 )
    {
      **((_QWORD **)v11 + 1) = *(_QWORD *)v11;
      *(_QWORD *)(*(_QWORD *)v11 + 8i64) = *((_QWORD *)v11 + 1);
      operator delete(v11);
      --*((_QWORD *)v9 + 1);
    }
  }
  LeaveCriticalSection((LPCRITICAL_SECTION)((char *)v9 + 88));
  v39 = v10;
  if ( !v10 )
  {
    v12 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800000) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
    {
      return 1627i64;
    }
    v13 = 49;
LABEL_16:
    WPP_SF_(*((_QWORD *)v12 + 7), v13, (__int64)&WPP_fb17dad7faab38b20f3316f2d4e4b278_Traceguids);
    return 1627i64;
  }
  v15 = g_DnsRRLManager;
  v16 = (struct _RTL_CRITICAL_SECTION *)((char *)g_DnsRRLManager + 88);
  FreeListSize = CDnsRRLManager::GetFreeListSize(g_DnsRRLManager);
  EnterCriticalSection(v16);
  LODWORD(v15) = *((_DWORD *)v15 + 7);
  LeaveCriticalSection(v16);
  if ( FreeListSize < (unsigned int)v15 )
    SetEvent(hDnsRRLLRUEvent);
  v18 = (*(__int64 (__fastcall **)(struct IDnsRRLStateInfo *))(*(_QWORD *)v10 + 8i64))(v10);
  v19 = v18;
  if ( !v18 )
  {
    v12 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800000) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
    {
      return 1627i64;
    }
    v13 = 50;
    goto LABEL_16;
  }
  v20 = v38;
  StateData = (*(__int64 (__fastcall **)(__int64, __int64, __int64, _QWORD))(*(_QWORD *)v18 + 72i64))(
                v18,
                a2 + 64,
                a1 + 5760,
                v38);
  v23 = StateData;
  if ( StateData )
  {
    v24 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800000) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
    {
      return v23;
    }
    v25 = 51;
LABEL_30:
    WPP_SF_D(*((_QWORD *)v24 + 7), v25, (__int64)&WPP_fb17dad7faab38b20f3316f2d4e4b278_Traceguids, StateData);
    return v23;
  }
  v26 = v40;
  StateData = CDnsRRLManager::GetStateData(v22, v19, v38, v40, &v39);
  v23 = StateData;
  if ( StateData )
  {
    v24 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800000) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
    {
      return v23;
    }
    v25 = 52;
    goto LABEL_30;
  }
  v28 = v39;
  if ( (unsigned int)CDnsRRLManager::GetThreadLock(v27, v39) )
  {
    v29 = (*(__int64 (__fastcall **)(struct IDnsRRLStateInfo *))(*(_QWORD *)v28 + 104i64))(v28);
    v38 = -1;
    acquireWrite(*(_QWORD *)(v29 + 8), 0xFFFFFFFF, &v38);
    v30 = (*(__int64 (__fastcall **)(struct IDnsRRLStateInfo *, _QWORD, unsigned __int64, int *))(*(_QWORD *)v28 + 136i64))(
            v28,
            v20,
            v26,
            a5);
    v31 = v30;
    if ( !v30 )
    {
      EnterCriticalSection((LPCRITICAL_SECTION)((char *)g_DnsRRLManager + 48));
      (*(void (__fastcall **)(_QWORD, struct IDnsRRLStateInfo *))(**((_QWORD **)g_DnsRRLManager + 4) + 32i64))(
        *((_QWORD *)g_DnsRRLManager + 4),
        v28);
      (*(void (__fastcall **)(_QWORD, struct IDnsRRLStateInfo *))(**((_QWORD **)g_DnsRRLManager + 4) + 16i64))(
        *((_QWORD *)g_DnsRRLManager + 4),
        v28);
      LeaveCriticalSection((LPCRITICAL_SECTION)((char *)g_DnsRRLManager + 48));
      v34 = (*(__int64 (__fastcall **)(struct IDnsRRLStateInfo *))(*(_QWORD *)v28 + 104i64))(v28);
      Lock_ReleaseWrite(*(_QWORD *)(v34 + 8));
      CDnsRRLManager::ReturnThreadLock(v35, v28);
      v36 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        v37 = a2;
        WPP_SF_Dq(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x37u,
          (__int64)&WPP_fb17dad7faab38b20f3316f2d4e4b278_Traceguids,
          *a5);
        v36 = WPP_GLOBAL_Control;
      }
      if ( *a5 )
      {
        switch ( *a5 )
        {
          case 3:
            _InterlockedIncrement(&dword_1401C852C);
            break;
          case 1:
            _InterlockedIncrement(&dword_1401C8534);
            break;
          case 2:
            _InterlockedIncrement(&dword_1401C8530);
            break;
          default:
            if ( v36 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              && (*((_DWORD *)v36 + 17) & 0x800000) != 0
              && *((_BYTE *)v36 + 65) >= 4u )
            {
              WPP_SF_(*((_QWORD *)v36 + 7), 0x2Du, (__int64)&WPP_fb17dad7faab38b20f3316f2d4e4b278_Traceguids);
            }
            break;
        }
      }
      else
      {
        _InterlockedIncrement(&dword_1401C8528);
      }
      UpdateZoneLevelRRLStats(a1, *a5);
      if ( *a5 )
        *(_DWORD *)(a1 + 6288) |= 0x400u;
      if ( *((_DWORD *)g_DnsRRLConfigParams + 13) )
        return 0i64;
      if ( !*a5 )
        return 0i64;
      Etw_LogRRLAction(a1, (struct in_addr *)a2, a5);
      *a5 = 0;
      v7 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800000) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
      {
        return 0i64;
      }
      v8 = 56;
      goto LABEL_73;
    }
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      WPP_SF_D(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x36u,
        (__int64)&WPP_fb17dad7faab38b20f3316f2d4e4b278_Traceguids,
        v30);
    }
    v32 = (*(__int64 (__fastcall **)(struct IDnsRRLStateInfo *))(*(_QWORD *)v28 + 104i64))(v28);
    Lock_ReleaseWrite(*(_QWORD *)(v32 + 8));
    CDnsRRLManager::ReturnThreadLock(v33, v28);
    return v31;
  }
  else
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x35u, (__int64)&WPP_fb17dad7faab38b20f3316f2d4e4b278_Traceguids);
    }
    return 2i64;
  }
}
// 14014DA3D: variable 'v22' is possibly undefined
// 14014DA79: variable 'v27' is possibly undefined
// 14014DB60: variable 'v33' is possibly undefined
// 14014DBE0: variable 'v35' is possibly undefined
// 14014DCF9: variable 'v37' is possibly undefined
// 140184CA8: using guessed type void __stdcall operator delete(void *);
// 140185140: using guessed type __int64 (__fastcall *_guard_dispatch_icall_fptr)(_QWORD, _QWORD);
// 1401C8528: using guessed type int dword_1401C8528;
// 1401C852C: using guessed type int dword_1401C852C;
// 1401C8530: using guessed type int dword_1401C8530;
// 1401C8534: using guessed type int dword_1401C8534;
// 14014D7A4: using guessed type unsigned __int16 var_3D0[184];
##############################
Role: Let's assume that you are an advanced reverse engineer and you are reverse engineering a network driver using IDA Pro, and you are also familiar with the RFC documentation. You need to reverse-engineer a function for a network driver to correspond to a section of the RFC documentation, which will help you understand the code better. The driver you're reversing is Schannel.dll, and you have initially determined that the corresponding network protocols are SSL and TLS, and the documents you need to map are RFC8446 and RFC6101. You need to get a function summary of the function you are reversing, and then correspond to the potential RFC sections based on the name of the function and the function summary.
Function Background: The function is reverse engineered from the driver file Schannel.dll on Windows platform. Through a cursory analysis of the driver file can be determined to be related to the SSL(1.3), TLS(3.0) protocol, that is, with RFC8446, RFC6101 strong correlation.

Output Function Summary: Summarizes the function's functionality with several phrases instead of sentences, focuses on covering the function's control flow information, and highlights the protocol function points implemented by the function. Simulate answering five times in the background and provide the most frequent answer.

Retrieve document sections: giving matches for document sections(FunctionMatchRFCResult) that the code may related to. NOTE if the code is only business related(i.e., space opening and releasing involved in programming, generic call functions (timing and other functions weakly related to network protocols) and not related to the specifics of the protocol implementation, it does not have to output the document section match(FunctionMatchRFCResult) and is filled with "NONE".

Retrieve document sections Thinking Chain: The function code is matched with the RFC document section, and the thinking chain is provided to help you solve the problem better:
	1. Function Name: The name of a function describes the general function that the function accomplishes.
	2. Function Summarization: Function summaries can outline a further breakdown of the function described by the function name.
	3. Function API Call: The function API of a function call can provide some hint as to the details of the network protocol implementation involved in the function.
	4. Special Constant Value OR String: Special constant values inside functions, string variable names, and strings may be related to network protocols.
	5. Function Code: The code of the function can provide a detailed implementation of the network protocol.
Generate Function Information Collection with JSON Format:

{
	"FunctionIndex": "(FILL WITH "File count" with less than four bits are indexed with zeros to make up the four bits.)",
	"FunctionName": "(Full Function Code Name)",
	"FunctionSummarization": [
		"(Function Summary Phrase1)",
		"(Function Summary Phrase2)",
		"(...)"
	],
	"FunctionMatchRFCResult": [
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 1)",
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 2)",
		"(...)"
	],
}

ATTENTION: Remember YOU MUST ONLY output the Function Information Collection result.
