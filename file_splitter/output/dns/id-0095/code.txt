Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 95
// Total lines: 142

//----- (000000014000BB28) ----------------------------------------------------
__int64 __fastcall buildForwarderArrayFromDnsClient(_QWORD *a1, unsigned int **a2, __int64 a3, int a4)
{
  unsigned int **v5; // r15
  unsigned int v6; // r13d
  unsigned int *v7; // rax
  int v8; // r11d
  unsigned int *v9; // rsi
  CDnsClientSubnetRecordsTrie *v10; // rdi
  __int64 result; // rax
  int v12; // r15d
  _QWORD *v13; // rcx
  __int64 v14; // rcx
  unsigned int v15; // r12d
  struct in_addr *v16; // rbp
  int v17; // eax
  int v18; // edx
  int v19; // eax
  __int64 v20; // r8
  void *v21; // r10
  const char *v22; // rax
  unsigned __int16 v23; // dx
  _QWORD *v25; // [rsp+80h] [rbp+18h]

  v5 = a2;
  *a2 = 0i64;
  v6 = 0;
  v7 = DnsAddrArray_Create(0x1Eu, (__int64)a2, a3, a4);
  v8 = 2;
  v9 = v7;
  if ( v7 )
  {
    if ( !a1 )
      goto LABEL_3;
    v10 = WPP_GLOBAL_Control;
    while ( 1 )
    {
      v12 = 0;
      do
      {
        v13 = a1 + 3;
        if ( v12 )
          v13 = a1 + 12;
        v25 = v13;
        v14 = v13[8];
        if ( v14 )
        {
          v15 = 0;
          if ( *(_DWORD *)(v14 + 4) )
          {
            while ( 1 )
            {
              v16 = (struct in_addr *)(((unsigned __int64)v15 << 6) + v14 + 32);
              LOBYTE(v17) = DnsAddr_IsLoopback(v16, 0);
              if ( v17 )
                goto LABEL_32;
              v19 = DnsAddrArray_ContainsAddr((__int64)g_ServerAddrs, v16, v18 + 3);
              v8 = 2;
              if ( v19 )
                goto LABEL_32;
              v21 = g_ServerAddrs;
              if ( v16->S_un.S_un_w.s_w1 == 2 && !(unsigned int)DnsAddrArray_GetFamilyCount((__int64)g_ServerAddrs, 2) )
                break;
              if ( v16->S_un.S_un_w.s_w1 == 23 && !(unsigned int)DnsAddrArray_GetFamilyCount((__int64)v21, 23) )
              {
                if ( v10 == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                  || ((unsigned __int8)v8 & *((_BYTE *)v10 + 68)) == 0
                  || *((_BYTE *)v10 + 65) < 4u )
                {
                  goto LABEL_32;
                }
                v22 = DnsAddr_Ntoa(v16);
                v23 = 46;
LABEL_24:
                WPP_SF_s(
                  *((_QWORD *)WPP_GLOBAL_Control + 7),
                  v23,
                  (__int64)&WPP_dd5a12aafb1b34b87fc868998e41e2af_Traceguids,
                  v22);
                v10 = WPP_GLOBAL_Control;
                v8 = 2;
                goto LABEL_32;
              }
              DnsAddrArray_AddAddr(v9, (__int64)v16, v20, 3);
              v8 = 2;
              v10 = WPP_GLOBAL_Control;
              if ( v9[1] == *v9 )
              {
                a1 = 0i64;
                goto LABEL_35;
              }
LABEL_32:
              ++v15;
              v14 = v25[8];
              if ( v15 >= *(_DWORD *)(v14 + 4) )
                goto LABEL_35;
            }
            if ( v10 == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              || ((unsigned __int8)v8 & *((_BYTE *)v10 + 68)) == 0
              || *((_BYTE *)v10 + 65) < 4u )
            {
              goto LABEL_32;
            }
            v22 = DnsAddr_Ntoa(v16);
            v23 = 45;
            goto LABEL_24;
          }
        }
LABEL_35:
        ++v12;
      }
      while ( v12 < v8 );
      a1 = (_QWORD *)*a1;
      if ( !a1 )
      {
        v5 = a2;
        goto LABEL_4;
      }
    }
  }
  v6 = 14;
  Dns_Free(0i64);
  LOBYTE(v8) = 2;
  v9 = 0i64;
LABEL_3:
  v10 = WPP_GLOBAL_Control;
LABEL_4:
  if ( v10 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && ((unsigned __int8)v8 & *((_BYTE *)v10 + 68)) != 0
    && *((_BYTE *)v10 + 65) >= 4u )
  {
    WPP_SF_dqd(*((_QWORD *)v10 + 7), 0x2Fu, (__int64)&WPP_dd5a12aafb1b34b87fc868998e41e2af_Traceguids, v6);
  }
  result = v6;
  *v5 = v9;
  return result;
}
// 14000BB87: variable 'v8' is possibly undefined
// 14000BC30: variable 'v17' is possibly undefined
// 14000BC3D: variable 'v18' is possibly undefined
// 14000BCDE: variable 'v21' is possibly undefined
// 14000BD1A: variable 'v20' is possibly undefined
