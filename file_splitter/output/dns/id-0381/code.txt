Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 381
// Total lines: 308

//----- (000000014003396C) ----------------------------------------------------
__int64 Dp_Initialize()
{
  unsigned int v0; // ebx
  int v2; // r9d
  int v3; // eax
  __int64 v4; // rdx
  __int64 v5; // r8
  __int64 v6; // rdi
  __int64 v7; // rcx
  __int64 v8; // rax
  __int64 v9; // rsi
  char *v10; // r14
  int v11; // edx
  __int64 v12; // r8
  char *v13; // rcx
  __int64 v14; // r10
  char v15; // al
  __int64 v16; // rax
  __int64 v17; // rdi
  CHAR *v18; // rsi
  int v19; // edx
  __int64 v20; // r8
  CHAR *v21; // rcx
  __int64 v22; // r9
  CHAR v23; // al
  CDnsClientSubnetRecordsTrie *v24; // rcx
  _QWORD *v25; // rax
  _DWORD *v26; // rax
  char v27[256]; // [rsp+30h] [rbp-128h] BYREF

  v0 = 0;
  if ( !dword_1401B9954 )
    return 0i64;
  v2 = _InterlockedIncrement(&g_liDpInitialized);
  if ( v2 != 1 )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_D(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x8Eu,
        (__int64)&WPP_0f7f6e0c97433b7ed77e9ce4b2e20f93_Traceguids,
        v2);
    }
    _InterlockedAdd(&g_liDpInitialized, 0xFFFFFFFF);
    goto LABEL_88;
  }
  v0 = DnsInitializeCriticalSection(&g_DpCS);
  if ( !v0 )
  {
    g_pLegacyDp = 0i64;
    qword_1401B8D28 = (__int64)&g_DpList;
    g_DpList = (__int64)&g_DpList;
    g_pDomainDp = 0i64;
    g_pForestDp = 0i64;
    g_pFsmo = 0i64;
    g_DpListEntryCount = 0;
    g_fDcPromoZonesPresent = 1;
    GetSystemTimeAsFileTime(&g_ftimeSystemBoot);
    dword_1401B9714 = Dns_GetCurrentTimeInSeconds();
    g_ftimeSystemBoot = (FILETIME)(g_ftimeSystemBoot.dwLowDateTime
                                 + ((unsigned __int64)g_ftimeSystemBoot.dwHighDateTime << 32)
                                 - (unsigned int)dword_1401B9714);
    g_crtServiceStartTime = time(0i64);
    if ( !(unsigned int)Ds_IsDsServer(0) )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x8Fu, (__int64)&WPP_0f7f6e0c97433b7ed77e9ce4b2e20f93_Traceguids);
      }
      dword_1401B9954 = 0;
      goto LABEL_88;
    }
    v3 = Ds_OpenServer(12288);
    v0 = v3;
    if ( v3 )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_D(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x90u,
          (__int64)&WPP_0f7f6e0c97433b7ed77e9ce4b2e20f93_Traceguids,
          v3);
      }
      goto LABEL_88;
    }
    v6 = -1i64;
    if ( qword_1401B9958 )
    {
      v0 = Ds_ConvertDnToFqdn(DistinguishedName, v27);
      if ( !v0 )
      {
        if ( v27[0] )
        {
          v7 = -1i64;
          do
            ++v7;
          while ( *(_BYTE *)(qword_1401B9958 + v7) );
          v8 = -1i64;
          do
            ++v8;
          while ( v27[v8] );
          v9 = v7 + v8 + 10;
          v10 = (char *)Mem_AllocZero((unsigned int)(v7 + v8 + 10), 12i64, "ds\\dns\\server\\server\\dpart.c", 6254);
          if ( v10 )
          {
            v11 = 0;
            if ( (unsigned __int64)(v9 - 1) > 0x7FFFFFFE )
              v11 = -2147024809;
            if ( v11 < 0 )
            {
              if ( v9 )
                *v10 = 0;
            }
            else
            {
              v12 = v9;
              v13 = v10;
              v11 = 0;
              if ( !v9 )
                goto LABEL_38;
              v14 = qword_1401B9958 - (_QWORD)v10;
              do
              {
                if ( !(2147483646 - v9 + v12) )
                  break;
                v15 = v13[v14];
                if ( !v15 )
                  break;
                *v13++ = v15;
                --v12;
              }
              while ( v12 );
              if ( !v12 )
              {
LABEL_38:
                --v13;
                v11 = -2147024774;
              }
              *v13 = 0;
            }
            if ( v11 < 0 || (int)StringCchCatA(v10, v9, ".") < 0 || (int)StringCchCatA(v10, v9, v27) < 0 )
            {
LABEL_64:
              v0 = 87;
              goto LABEL_88;
            }
            Timeout_FreeWithFunctionEx(
              (__int64)g_pszDomainDefaultDpFqdn,
              0i64,
              (__int64)"ds\\dns\\server\\server\\dpart.c",
              6270);
            g_pszDomainDefaultDpFqdn = v10;
          }
        }
      }
    }
    if ( !qword_1401B9960 )
      goto LABEL_71;
    v0 = Ds_ConvertDnToFqdn((const wchar_t *)qword_1401B6B88, v27);
    if ( v0 )
      goto LABEL_71;
    if ( !v27[0] )
      goto LABEL_71;
    v16 = -1i64;
    do
      ++v16;
    while ( *(_BYTE *)(qword_1401B9960 + v16) );
    do
      ++v6;
    while ( v27[v6] );
    v17 = v16 + 10 + v6;
    v18 = (CHAR *)Mem_AllocZero((unsigned int)v17, 12i64, "ds\\dns\\server\\server\\dpart.c", 6289);
    if ( !v18 )
      goto LABEL_71;
    v19 = 0;
    if ( (unsigned __int64)(v17 - 1) > 0x7FFFFFFE )
      v19 = -2147024809;
    if ( v19 < 0 )
    {
      if ( v17 )
        *v18 = 0;
    }
    else
    {
      v20 = v17;
      v21 = v18;
      v19 = 0;
      if ( !v17 )
        goto LABEL_62;
      v22 = qword_1401B9960 - (_QWORD)v18;
      do
      {
        if ( !(2147483646 - v17 + v20) )
          break;
        v23 = v21[v22];
        if ( !v23 )
          break;
        *v21++ = v23;
        --v20;
      }
      while ( v20 );
      if ( !v20 )
      {
LABEL_62:
        --v21;
        v19 = -2147024774;
      }
      *v21 = 0;
    }
    if ( v19 >= 0 && (int)StringCchCatA(v18, v17, ".") >= 0 && (int)StringCchCatA(v18, v17, v27) >= 0 )
    {
      Timeout_FreeWithFunctionEx(
        (__int64)g_pszForestDefaultDpFqdn,
        0i64,
        (__int64)"ds\\dns\\server\\server\\dpart.c",
        6305);
      g_pszForestDefaultDpFqdn = v18;
LABEL_71:
      v24 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
      {
        if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0 && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          WPP_SF_s(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x91u,
            (__int64)&WPP_0f7f6e0c97433b7ed77e9ce4b2e20f93_Traceguids,
            g_pszDomainDefaultDpFqdn);
          v24 = WPP_GLOBAL_Control;
        }
        if ( v24 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)v24 + 17) & 0x400) != 0
          && *((_BYTE *)v24 + 65) >= 4u )
        {
          WPP_SF_s(
            *((_QWORD *)v24 + 7),
            0x92u,
            (__int64)&WPP_0f7f6e0c97433b7ed77e9ce4b2e20f93_Traceguids,
            g_pszForestDefaultDpFqdn);
        }
      }
      v25 = (_QWORD *)g_pLegacyDp;
      if ( !g_pLegacyDp )
      {
        v26 = Mem_AllocZero(0x88ui64, 12i64, "ds\\dns\\server\\server\\dpart.c", 6322);
        g_pLegacyDp = (__int64)v26;
        if ( !v26 )
          goto LABEL_87;
        v26[25] = 18;
        *(_QWORD *)(g_pLegacyDp + 32) = Dns_StringCopyAllocate((char *)L"MicrosoftDNS", 0, 1i64, 1);
        *(_QWORD *)(g_pLegacyDp + 24) = Dns_StringCopyAllocate("MicrosoftDNS", 0, 2i64, 2);
        *(_QWORD *)(g_pLegacyDp + 56) = Dns_StringCopyAllocate((char *)g_pwszDnsContainerDN, 0, 1i64, 1);
        *(_QWORD *)(g_pLegacyDp + 40) = Ds_GenerateBaseDnsDn(0);
        v25 = (_QWORD *)g_pLegacyDp;
        if ( !g_pLegacyDp )
          goto LABEL_87;
      }
      if ( v25[4] && v25[3] && v25[7] && v25[5] )
      {
        Dp_PollForPartitions(0i64, 7, v5);
      }
      else
      {
LABEL_87:
        v0 = 14;
        Dp_FreeDpInfo(&g_pLegacyDp, v4, v5);
      }
      goto LABEL_88;
    }
    goto LABEL_64;
  }
LABEL_88:
  Mem_Free(0i64, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\dpart.c", 6367);
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_D(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x93u, (__int64)&WPP_0f7f6e0c97433b7ed77e9ce4b2e20f93_Traceguids, v0);
  }
  return v0;
}
// 140033F2E: variable 'v5' is possibly undefined
// 140033F41: variable 'v4' is possibly undefined
// 1401B6B88: using guessed type __int64 qword_1401B6B88;
// 1401B7EF0: using guessed type int g_fDcPromoZonesPresent;
// 1401B8C98: using guessed type __int64 g_pDomainDp;
// 1401B8CA0: using guessed type __int64 g_pForestDp;
// 1401B8CC0: using guessed type __int64 g_crtServiceStartTime;
// 1401B8D08: using guessed type __int64 g_pFsmo;
// 1401B8D10: using guessed type __int64 g_pLegacyDp;
// 1401B8D18: using guessed type int g_DpListEntryCount;
// 1401B8D20: using guessed type __int64 g_DpList;
// 1401B8D28: using guessed type __int64 qword_1401B8D28;
// 1401B8D30: using guessed type int g_liDpInitialized;
// 1401B9714: using guessed type int dword_1401B9714;
// 1401B9954: using guessed type int dword_1401B9954;
// 1401B9958: using guessed type __int64 qword_1401B9958;
// 1401B9960: using guessed type __int64 qword_1401B9960;
// 14003396C: using guessed type char var_128[256];
