Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 2528
// Total lines: 129

//----- (000000014012E510) ----------------------------------------------------
__int64 InternalRouterUpdateProtocolInfo(DWORD a1, int a2, ...)
{
  int v3; // esi
  DWORD Info; // ebx
  LPBYTE v5; // rax
  DWORD v6; // r8d
  DWORD v7; // r9d
  int v8; // ecx
  unsigned int v9; // ecx
  int v10; // ecx
  DWORD Size; // eax
  LPBYTE lpItemData; // [rsp+48h] [rbp-19h] BYREF
  LPBYTE ppGlobalInfo; // [rsp+50h] [rbp-11h] BYREF
  LPVOID lpNewHeader; // [rsp+58h] [rbp-9h] BYREF
  MPR_SERVER_HANDLE phMprServer; // [rsp+60h] [rbp-1h] BYREF
  HANDLE phMprConfig; // [rsp+68h] [rbp+7h] BYREF
  DWORD dwItemCount; // [rsp+70h] [rbp+Fh] BYREF
  LPBYTE v19; // [rsp+78h] [rbp+17h] BYREF
  HANDLE phRouterTransport; // [rsp+80h] [rbp+1Fh] BYREF
  LPBYTE v21; // [rsp+88h] [rbp+27h] BYREF
  DWORD dwGlobalInfoSize; // [rsp+90h] [rbp+2Fh] BYREF
  int v23[9]; // [rsp+94h] [rbp+33h] BYREF
  DWORD v24; // [rsp+C8h] [rbp+67h] BYREF
  __int64 dwItemSize; // [rsp+D8h] [rbp+77h] BYREF
  va_list dwItemSizea; // [rsp+D8h] [rbp+77h]
  __int64 v27; // [rsp+E0h] [rbp+7Fh] BYREF
  va_list va1; // [rsp+E0h] [rbp+7Fh]
  va_list va2; // [rsp+E8h] [rbp+87h] BYREF

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(dwItemSizea, a2);
  dwItemSize = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v27 = va_arg(va2, _QWORD);
  v24 = a1;
  phMprServer = 0i64;
  phMprConfig = 0i64;
  v3 = 0;
  phRouterTransport = 0i64;
  ppGlobalInfo = 0i64;
  lpNewHeader = 0i64;
  lpItemData = 0i64;
  v19 = 0i64;
  v21 = 0i64;
  Info = MprAdminServerConnect(0i64, &phMprServer);
  if ( Info )
    goto LABEL_23;
  Info = MprAdminTransportGetInfo(phMprServer, 0x21u, &ppGlobalInfo, &dwGlobalInfoSize, 0i64, 0i64);
  if ( Info )
    goto LABEL_23;
  Info = MprInfoBlockFind(ppGlobalInfo, 0x81372713, (LPDWORD)dwItemSizea, &dwItemCount, &lpItemData);
  if ( Info )
    goto LABEL_23;
  if ( a2 == 3 )
  {
    Info = MprConfigServerConnect(0i64, &phMprConfig);
    if ( Info )
      goto LABEL_23;
    Info = MprConfigTransportGetHandle(phMprConfig, 0x21u, &phRouterTransport);
    if ( Info )
      goto LABEL_23;
    Info = MprConfigTransportGetInfo(phMprConfig, phRouterTransport, &v19, (LPDWORD)v23, 0i64, 0i64, 0i64);
    if ( Info )
      goto LABEL_23;
    Info = MprInfoBlockFind(v19, 0x81372713, &v24, (LPDWORD)va1, &v21);
    if ( Info )
      goto LABEL_23;
    v5 = v21;
    v6 = v24;
    v7 = v27;
    goto LABEL_20;
  }
  if ( a2 != 1 )
  {
    if ( a2 != 2 )
    {
      Info = 87;
      goto LABEL_23;
    }
    v5 = lpItemData;
    if ( !lpItemData )
      goto LABEL_19;
    v10 = *((_DWORD *)lpItemData + 1);
    if ( (v10 & 1) == 0 )
      goto LABEL_19;
    v9 = v10 & 0xFFFFFFFE;
    goto LABEL_18;
  }
  v5 = lpItemData;
  if ( lpItemData )
  {
    v8 = *((_DWORD *)lpItemData + 1);
    if ( (v8 & 1) == 0 )
    {
      v9 = v8 | 1;
LABEL_18:
      *((_DWORD *)v5 + 1) = v9;
      v3 = 1;
      v5 = lpItemData;
    }
  }
LABEL_19:
  v6 = dwItemSize;
  v7 = dwItemCount;
  if ( !v3 )
    goto LABEL_23;
LABEL_20:
  Info = MprInfoBlockSet(ppGlobalInfo, 0x81372713, v6, v7, v5, &lpNewHeader);
  if ( !Info )
  {
    Size = MprInfoBlockQuerySize(lpNewHeader);
    Info = MprAdminTransportSetInfo(phMprServer, 0x21u, (LPBYTE)lpNewHeader, Size, 0i64, 0);
  }
LABEL_23:
  if ( ppGlobalInfo )
    MprAdminBufferFree(ppGlobalInfo);
  if ( lpNewHeader )
    MprAdminBufferFree(lpNewHeader);
  if ( v19 )
    MprConfigBufferFree(v19);
  if ( phMprServer )
    MprAdminServerDisconnect(phMprServer);
  if ( phMprConfig )
    MprConfigServerDisconnect(phMprConfig);
  return Info;
}
// 14012E510: using guessed type DWORD var_24[9];
