Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 974
// Total lines: 304

//----- (0000000140082D8C) ----------------------------------------------------
__int64 __fastcall Xfr_ParseIxfrResponse(__int64 a1, __int64 a2, void *a3)
{
  unsigned int v4; // r12d
  int v5; // r15d
  CDnsClientSubnetRecordsTrie *v6; // rcx
  char v7; // al
  int v9; // r8d
  __int64 v10; // rax
  int v11; // edx
  unsigned __int64 v12; // rdx
  unsigned __int8 *v13; // r14
  int v14; // r13d
  int v15; // eax
  unsigned __int8 *v16; // rbp
  char *v17; // rax
  __int64 v18; // rax
  __int64 v19; // rdx
  unsigned __int64 v20; // rdi
  _BYTE *v21; // rax
  void *v22; // rbp
  __int64 v23; // rax
  unsigned int v24; // eax
  _BYTE *v25; // rbp
  __int64 RecordFromWire; // rax
  __int64 v27; // rdx
  __int64 v28; // rdx
  unsigned __int16 v29; // dx
  unsigned __int16 *v30; // rdi
  unsigned __int16 *v31; // rax
  CDnsClientSubnetRecordsTrie **v32; // rdx
  __int64 v33; // [rsp+20h] [rbp-B8h]
  __int128 v34; // [rsp+40h] [rbp-98h] BYREF
  unsigned __int16 *v35[2]; // [rsp+50h] [rbp-88h] BYREF
  char v36[30]; // [rsp+60h] [rbp-78h] BYREF
  __int16 v37; // [rsp+7Eh] [rbp-5Ah]
  int v38; // [rsp+E0h] [rbp+8h]
  int v41; // [rsp+F8h] [rbp+20h]

  v41 = 0;
  v4 = 0;
  v5 = 0;
  v6 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x40) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x1Au, (__int64)&WPP_95413813eca334a66ae97b50395580a7_Traceguids, a1);
    v6 = WPP_GLOBAL_Control;
  }
  v7 = *(_BYTE *)(a1 + 6307) & 0xF;
  if ( v7 )
  {
    if ( *(_DWORD *)(a1 + 1312) == 1 && (v7 == 1 || v7 == 4) )
      return 1168388i64;
    else
      return 9504i64;
  }
  v9 = *(unsigned __int16 *)(a1 + 6310);
  v38 = v9;
  if ( !*(_WORD *)(a1 + 6310) )
    goto LABEL_98;
  v10 = *(_QWORD *)(a1 + 208);
  if ( !v10 || (v11 = 1, !*(_QWORD *)(v10 + 192)) )
    v11 = 0;
  if ( *(unsigned __int16 *)(a1 + 6314) > v11 || *(_WORD *)(a1 + 6312) )
  {
LABEL_98:
    if ( v6 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)v6 + 68) & 0x40) != 0
      && *((_BYTE *)v6 + 65) >= 4u )
    {
      v29 = 27;
LABEL_100:
      WPP_SF_(*((_QWORD *)v6 + 7), v29, (__int64)&WPP_95413813eca334a66ae97b50395580a7_Traceguids);
    }
    goto LABEL_101;
  }
  if ( v6 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)v6 + 68) & 0x40) != 0
    && *((_BYTE *)v6 + 65) >= 5u )
  {
    WPP_SF_qd(
      *((_QWORD *)v6 + 7),
      0x1Cu,
      (__int64)&WPP_95413813eca334a66ae97b50395580a7_Traceguids,
      a1,
      *(unsigned __int16 *)(a1 + 6310));
    v6 = WPP_GLOBAL_Control;
    v9 = v38;
  }
  if ( *(_DWORD *)(a1 + 1312) <= 1u )
  {
    if ( *(_WORD *)(a1 + 6310) == 1 && !*(_BYTE *)(a1 + 1413) )
    {
      if ( v6 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)v6 + 68) & 0x40) != 0
        && *((_BYTE *)v6 + 65) >= 4u )
      {
        WPP_SF_q(*((_QWORD *)v6 + 7), 0x1Du, (__int64)&WPP_95413813eca334a66ae97b50395580a7_Traceguids, a1);
      }
      return 1168385i64;
    }
  }
  else if ( *(_BYTE *)(a1 + 1328) )
  {
    v4 = *(_DWORD *)(a1 + 1324);
    v5 = *(unsigned __int8 *)(a1 + 1331);
  }
  v12 = *(unsigned __int16 *)(a1 + 6302) + a1 + 6304;
  v13 = (unsigned __int8 *)(a1 + 6316);
  v14 = 0;
  v15 = v9 + *(unsigned __int16 *)(a1 + 6308);
  *(_QWORD *)&v34 = v12;
  if ( v15 <= 0 )
  {
LABEL_84:
    if ( *(_BYTE *)(a1 + 1413) )
    {
      *(_DWORD *)(a1 + 1324) = v4;
      *(_BYTE *)(a1 + 1331) = v5;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x40) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_dqdd(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x22u,
          (__int64)&WPP_95413813eca334a66ae97b50395580a7_Traceguids,
          *(_DWORD *)(a1 + 1312));
      }
      return 0i64;
    }
    if ( *(_WORD *)(a1 + 6310) != 1 )
    {
      v30 = *(unsigned __int16 **)(*(_QWORD *)(a1 + 208) + 16i64);
      v35[0] = v30;
      v31 = (unsigned __int16 *)DnsAddr_Ntoa((struct in_addr *)(a1 + 64));
      v35[1] = v31;
      v32 = &WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x40) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_qss(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x23u,
          (__int64)&WPP_95413813eca334a66ae97b50395580a7_Traceguids,
          a1,
          v31,
          v30);
      }
      v34 = DNS_EVENT_IXFR_BAD_RESPONSE;
      Eventlog_LogEvent((__int64)&v34, (__int64)v32, 2u, v35, (unsigned __int8 *)3, 0, 0, 0i64);
LABEL_101:
      Wire_PacketError((struct in_addr *)a1);
      return 9502i64;
    }
    return 1168385i64;
  }
  while ( 1 )
  {
    v16 = v13;
    if ( (unsigned __int64)v13 >= v12 )
    {
      if ( v6 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)v6 + 17) & 0x800) != 0
        && *((_BYTE *)v6 + 65) >= 4u )
      {
        WPP_SF_Dd(
          *((_QWORD *)v6 + 7),
          0x1Eu,
          (__int64)&WPP_95413813eca334a66ae97b50395580a7_Traceguids,
          *(unsigned __int16 *)(a1 + 6302));
      }
      goto LABEL_101;
    }
    if ( v6 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)v6 + 68) & 0x40) != 0
      && *((_BYTE *)v6 + 65) >= 5u )
    {
      v17 = Dbg_PacketName(v13, a1 + 6304, 0i64);
      WPP_SF_s(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x1Fu,
        (__int64)&WPP_95413813eca334a66ae97b50395580a7_Traceguids,
        v17);
    }
    v18 = Wire_SkipPacketName(a1, (__int64)v13);
    v19 = 0i64;
    v20 = v18;
    if ( !v18 )
    {
LABEL_79:
      Wire_PacketNameError((struct in_addr *)a1, v19, v20 - a1 - 6304);
      return 123i64;
    }
    if ( v14 >= *(unsigned __int16 *)(a1 + 6308) )
      break;
    v21 = Lookup_ZoneNode(*(_QWORD *)(a1 + 208), v13, a1, 0i64, 0, (__int64 *)v35, 0i64, 0i64);
    if ( !v21 || v21 != *(_BYTE **)(*(_QWORD *)(a1 + 208) + 40i64) )
      goto LABEL_79;
    v12 = v34;
    if ( v20 > (__int64)v34 - 4 )
    {
      v6 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        v29 = 32;
        goto LABEL_100;
      }
      goto LABEL_101;
    }
    v22 = a3;
    v13 = (unsigned __int8 *)(v20 + 4);
LABEL_65:
    if ( ++v14 >= v38 + *(unsigned __int16 *)(a1 + 6308) )
    {
      if ( !v41 )
        goto LABEL_84;
      Up_AppendUpdateList(a2, (__int64)v22, 0);
      memset_0(v22, 0, 0x40ui64);
      return 1168384i64;
    }
    v6 = WPP_GLOBAL_Control;
  }
  v23 = Wire_ParseWireRecord(v18, v34, 1, (__int64)v36);
  v13 = (unsigned __int8 *)v23;
  if ( !v23 )
    goto LABEL_101;
  v20 += 10i64;
  if ( v37 == 6 )
  {
    v24 = ntohl(*(_DWORD *)(v23 - 20));
    if ( v4 )
    {
      if ( !v5 )
      {
        if ( v24 <= v4 )
          goto LABEL_101;
        v5 = 1;
        v4 = v24;
        Up_AppendUpdateList(a2, (__int64)a3, v24);
        memset_0(a3, 0, 0x40ui64);
        goto LABEL_59;
      }
      if ( v24 != v4 )
        goto LABEL_101;
      if ( v24 == *(_DWORD *)(a1 + 1320) )
      {
        v41 = 1;
LABEL_59:
        v25 = Lookup_ZoneNode(*(_QWORD *)(a1 + 208), v16, a1, 0i64, 0, 0i64, 0i64, 0i64);
        if ( !v25 )
          goto LABEL_79;
        RecordFromWire = Wire_CreateRecordFromWire(a1, v36, v20, 0x1Eu);
        if ( !RecordFromWire )
          goto LABEL_101;
        v27 = RecordFromWire;
        if ( v5 )
          v27 = 0i64;
        v33 = v27;
        v28 = (__int64)v25;
        v22 = a3;
        Up_CreateAppendUpdate((__int64)a3, v28, RecordFromWire & -(__int64)(v5 != 0), 0, v33);
        goto LABEL_64;
      }
    }
    else
    {
      if ( !*(_DWORD *)(a1 + 1320) )
      {
        *(_DWORD *)(a1 + 1320) = v24;
        goto LABEL_51;
      }
      if ( v24 > *(_DWORD *)(a1 + 1316) )
        goto LABEL_101;
      v4 = v24;
      *(_BYTE *)(a1 + 1328) = 1;
    }
    v5 = 0;
LABEL_51:
    v22 = a3;
LABEL_64:
    v12 = v34;
    goto LABEL_65;
  }
  if ( *(_BYTE *)(a1 + 1328) )
    goto LABEL_59;
  if ( !*(_DWORD *)(a1 + 1320) )
    goto LABEL_101;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x40) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x21u, (__int64)&WPP_95413813eca334a66ae97b50395580a7_Traceguids, a1);
  }
  return 1168387i64;
}
// 1400832DB: variable 'v19' is possibly undefined
// 140083448: variable 'v32' is possibly undefined
// 140187738: using guessed type __int128 DNS_EVENT_IXFR_BAD_RESPONSE;
##############################
Role: Let's assume that you are an advanced reverse engineer and you are reverse engineering a network driver using IDA Pro, and you are also familiar with the RFC documentation. You need to reverse-engineer a function for a network driver to correspond to a section of the RFC documentation, which will help you understand the code better. The driver you're reversing is Schannel.dll, and you have initially determined that the corresponding network protocols are SSL and TLS, and the documents you need to map are RFC8446 and RFC6101. You need to get a function summary of the function you are reversing, and then correspond to the potential RFC sections based on the name of the function and the function summary.
Function Background: The function is reverse engineered from the driver file Schannel.dll on Windows platform. Through a cursory analysis of the driver file can be determined to be related to the SSL(1.3), TLS(3.0) protocol, that is, with RFC8446, RFC6101 strong correlation.

Output Function Summary: Summarizes the function's functionality with several phrases instead of sentences, focuses on covering the function's control flow information, and highlights the protocol function points implemented by the function. Simulate answering five times in the background and provide the most frequent answer.

Retrieve document sections: giving matches for document sections(FunctionMatchRFCResult) that the code may related to. NOTE if the code is only business related(i.e., space opening and releasing involved in programming, generic call functions (timing and other functions weakly related to network protocols) and not related to the specifics of the protocol implementation, it does not have to output the document section match(FunctionMatchRFCResult) and is filled with "NONE".

Retrieve document sections Thinking Chain: The function code is matched with the RFC document section, and the thinking chain is provided to help you solve the problem better:
	1. Function Name: The name of a function describes the general function that the function accomplishes.
	2. Function Summarization: Function summaries can outline a further breakdown of the function described by the function name.
	3. Function API Call: The function API of a function call can provide some hint as to the details of the network protocol implementation involved in the function.
	4. Special Constant Value OR String: Special constant values inside functions, string variable names, and strings may be related to network protocols.
	5. Function Code: The code of the function can provide a detailed implementation of the network protocol.
Generate Function Information Collection with JSON Format:

{
	"FunctionIndex": "(FILL WITH "File count" with less than four bits are indexed with zeros to make up the four bits.)",
	"FunctionName": "(Full Function Code Name)",
	"FunctionSummarization": [
		"(Function Summary Phrase1)",
		"(Function Summary Phrase2)",
		"(...)"
	],
	"FunctionMatchRFCResult": [
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 1)",
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 2)",
		"(...)"
	],
}

ATTENTION: Remember YOU MUST ONLY output the Function Information Collection result.
