Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 1348
// Total lines: 254

//----- (00000001400AB97C) ----------------------------------------------------
__int64 __fastcall Stat_IncrementZoneQueryStats(__int64 a1, unsigned __int16 a2, int a3)
{
  int v3; // r9d
  unsigned int v5; // edx
  int v6; // r9d
  int v7; // r9d
  int v8; // r9d
  int v9; // r9d
  int v10; // r9d
  int v11; // r9d
  int v12; // r9d
  int v13; // r9d
  int v14; // r9d
  int v15; // r9d
  int v16; // r9d
  int v17; // r9d
  int v18; // r9d
  int v19; // r9d
  int v20; // r9d
  int v21; // r9d
  int v22; // r9d
  int v23; // r9d
  __int64 v24; // r8
  int v25; // r10d
  int v26; // r10d
  __int64 result; // rax

  v3 = a2;
  if ( a2 > 0x27u )
  {
    switch ( a2 )
    {
      case 0x2Bu:
        v5 = 26;
        goto LABEL_66;
      case 0x30u:
        v5 = 25;
        goto LABEL_66;
      case 0x31u:
        v5 = 7;
        goto LABEL_66;
      case 0x34u:
        v5 = 29;
        goto LABEL_66;
      case 0xFFu:
        v5 = 30;
        goto LABEL_66;
    }
    goto LABEL_60;
  }
  if ( a2 == 39 )
  {
    v5 = 8;
    goto LABEL_66;
  }
  v5 = 16;
  if ( v3 > 16 )
  {
    if ( v3 > 25 )
    {
      v20 = v3 - 28;
      if ( !v20 )
      {
        v5 = 1;
        goto LABEL_66;
      }
      v21 = v20 - 2;
      if ( !v21 )
      {
        v5 = 15;
        goto LABEL_66;
      }
      v22 = v21 - 3;
      if ( !v22 )
      {
        v5 = 20;
        goto LABEL_66;
      }
      v23 = v22 - 1;
      if ( !v23 )
      {
        v5 = 6;
        goto LABEL_66;
      }
      if ( v23 == 1 )
      {
        v5 = 14;
        goto LABEL_66;
      }
    }
    else
    {
      if ( v3 == 25 )
        goto LABEL_66;
      v15 = v3 - 17;
      if ( !v15 )
      {
        v5 = 18;
        goto LABEL_66;
      }
      v16 = v15 - 1;
      if ( !v16 )
      {
        v5 = 5;
        goto LABEL_66;
      }
      v17 = v16 - 1;
      if ( !v17 )
      {
        v5 = 24;
        goto LABEL_66;
      }
      v18 = v17 - 1;
      if ( !v18 )
      {
        v5 = 10;
        goto LABEL_66;
      }
      v19 = v18 - 1;
      if ( !v19 )
      {
        v5 = 19;
        goto LABEL_66;
      }
      if ( v19 == 3 )
      {
        v5 = 21;
        goto LABEL_66;
      }
    }
    goto LABEL_60;
  }
  if ( v3 == 16 )
  {
    v5 = 22;
    goto LABEL_66;
  }
  if ( v3 > 9 )
  {
    v11 = v3 - 11;
    if ( !v11 )
    {
      v5 = 23;
      goto LABEL_66;
    }
    v12 = v11 - 1;
    if ( !v12 )
    {
      v5 = 2;
      goto LABEL_66;
    }
    v13 = v12 - 1;
    if ( !v13 )
    {
      v5 = 9;
      goto LABEL_66;
    }
    v14 = v13 - 1;
    if ( !v14 )
    {
      v5 = 13;
      goto LABEL_66;
    }
    if ( v14 == 1 )
    {
      v5 = 4;
      goto LABEL_66;
    }
    goto LABEL_60;
  }
  if ( v3 == 9 )
  {
    v5 = 17;
    goto LABEL_66;
  }
  v6 = v3 - 1;
  if ( !v6 )
  {
    v5 = 0;
    goto LABEL_66;
  }
  v7 = v6 - 1;
  if ( !v7 )
  {
    v5 = 27;
    goto LABEL_66;
  }
  v5 = 3;
  v8 = v7 - 3;
  if ( v8 )
  {
    v9 = v8 - 1;
    if ( !v9 )
    {
      v5 = 28;
      goto LABEL_66;
    }
    v10 = v9 - 1;
    if ( !v10 )
    {
      v5 = 12;
      goto LABEL_66;
    }
    if ( v10 == 1 )
    {
      v5 = 11;
      goto LABEL_66;
    }
LABEL_60:
    v5 = 31;
  }
LABEL_66:
  if ( a1 )
  {
    v24 = *(_QWORD *)(a1 + 1648);
    if ( v24 )
    {
      if ( a3 )
      {
        v25 = a3 - 1;
        if ( v25 )
        {
          v26 = v25 - 1;
          if ( v26 )
          {
            if ( v26 == 1 )
            {
              result = v5;
              _InterlockedIncrement64((volatile signed __int64 *)(v24 + 40i64 * v5 + 56));
            }
          }
          else
          {
            result = v5;
            _InterlockedIncrement64((volatile signed __int64 *)(v24 + 40i64 * v5 + 48));
          }
        }
        else
        {
          result = 5 * (v5 + 1i64);
          _InterlockedIncrement64((volatile signed __int64 *)(v24 + 40 * (v5 + 1i64)));
        }
      }
      else
      {
        result = v5;
        _InterlockedIncrement64((volatile signed __int64 *)(v24 + 40i64 * v5 + 32));
      }
    }
  }
  return result;
}
// 1400ABB8C: conditional instruction was optimized away because edx.4<20u
