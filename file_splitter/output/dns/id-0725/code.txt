Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 725
// Total lines: 154

//----- (0000000140064E44) ----------------------------------------------------
void __fastcall processNbstatResponse(struct _DNS_MSGINFO *a1, unsigned int a2)
{
  __int64 v2; // r14
  _BYTE *v3; // rsi
  unsigned __int8 v4; // r12
  char v5; // r13
  char *v7; // rax
  __int64 v8; // rbx
  int v9; // r8d
  int v10; // r15d
  _BYTE *v11; // rbp
  CDnsClientSubnetRecordsTrie *v12; // rcx
  const char *v13; // rax
  unsigned int v14; // eax
  char *v15; // rdx
  char *v16; // rax
  __int64 v17; // rdx
  __int64 v18; // r8
  __int64 v19; // rcx
  __int64 v20; // [rsp+20h] [rbp-168h]
  __int64 v21; // [rsp+28h] [rbp-160h]
  struct _DNS_MSGINFO *v22; // [rsp+30h] [rbp-158h]
  char v23[256]; // [rsp+40h] [rbp-148h] BYREF

  v2 = a2;
  v3 = 0i64;
  v4 = 0;
  v5 = 0;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x10000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    v7 = inet_ntoa(*(struct in_addr *)((char *)a1 + 1328));
    LODWORD(v20) = v2;
    WPP_SF_qDs(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x19u,
      (__int64)&WPP_fc3a6397bf853e2fe940ea821e43295b_Traceguids,
      a1,
      v20,
      v7);
  }
  *((_DWORD *)a1 + 348) |= 1 << v2;
  if ( *((_BYTE *)a1 + 1396) )
    goto LABEL_44;
  v8 = *((_QWORD *)a1 + 165) + 2096 * v2;
  v9 = *(_DWORD *)v8;
  if ( *(int *)v8 < 0 || !*(_WORD *)(v8 + 106) )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x10000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      v19 = *((_QWORD *)WPP_GLOBAL_Control + 7);
      LODWORD(v22) = *(unsigned __int16 *)(v8 + 106);
      LODWORD(v21) = v9;
      LODWORD(v20) = v2;
      WPP_SF_qddd(v19, 0x1Au, (__int64)&WPP_fc3a6397bf853e2fe940ea821e43295b_Traceguids, a1, v20, v21, v22);
    }
    if ( *(_DWORD *)v8 == -1073741536 )
    {
      *((_BYTE *)a1 + 1396) = 1;
      Reject_Request((__int64)a1, 2u, 0);
    }
    goto LABEL_44;
  }
  v10 = *(unsigned __int16 *)(v8 + 106);
  v11 = (_BYTE *)(v8 + 108);
  v12 = WPP_GLOBAL_Control;
  while ( 1 )
  {
    --v10;
    if ( (char)v11[17] >= 0 )
      break;
LABEL_20:
    v11 += 18;
    if ( !v10 )
      goto LABEL_23;
  }
  v4 = v11[15];
  if ( v12 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)v12 + 17) & 0x10000) != 0
    && *((_BYTE *)v12 + 65) >= 4u )
  {
    v13 = (const char *)FormatLabelA(0xFui64, v11);
    LODWORD(v20) = v4;
    WPP_SF_sd(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x1Bu,
      (__int64)&WPP_fc3a6397bf853e2fe940ea821e43295b_Traceguids,
      v13);
    v12 = WPP_GLOBAL_Control;
  }
  if ( v4 )
  {
    if ( v4 != 20 || v5 )
    {
      if ( !v3 )
        v3 = v11;
    }
    else
    {
      v5 = 1;
      v3 = v11;
    }
    goto LABEL_20;
  }
  v3 = v11;
LABEL_23:
  if ( v3 )
  {
    v14 = 0;
    v15 = (char *)(v23 - v3);
    do
    {
      if ( *v3 == 32 )
        break;
      v3[(_QWORD)v15] = *v3;
      ++v14;
      ++v3;
    }
    while ( v14 < 0xF );
    if ( v14 >= 0xFFui64 )
      _report_rangecheckfailure();
    v23[v14] = 0;
    if ( v12 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)v12 + 17) & 0x10000) != 0
      && *((_BYTE *)v12 + 65) >= 4u )
    {
      v16 = inet_ntoa(*(struct in_addr *)((char *)a1 + 1328));
      v22 = a1;
      WPP_SF_sDsq(*((_QWORD *)WPP_GLOBAL_Control + 7), v17, v18, v23, v4, (__int64)v16);
    }
    *((_BYTE *)a1 + 1396) = 1;
    sendNbstatResponse(a1, v23);
  }
  else
  {
    if ( v12 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)v12 + 17) & 0x10000) != 0
      && *((_BYTE *)v12 + 65) >= 4u )
    {
      WPP_SF_(*((_QWORD *)v12 + 7), 0x1Cu, (__int64)&WPP_fc3a6397bf853e2fe940ea821e43295b_Traceguids);
    }
    *((_BYTE *)a1 + 1396) = 1;
    Send_NameError(a1, 0i64);
  }
LABEL_44:
  cleanupNbstatQuery(a1, v2);
}
// 140065051: variable 'v17' is possibly undefined
// 140065051: variable 'v18' is possibly undefined
// 140064E44: using guessed type CHAR var_148[256];
