Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 623
// Total lines: 171

//----- (000000014005740C) ----------------------------------------------------
void __fastcall massageLogFile(unsigned __int16 *a1)
{
  wchar_t *v1; // rdi
  const WCHAR *v2; // r12
  _QWORD *v3; // r14
  __int64 v4; // rsi
  wchar_t *v5; // rax
  char *v6; // r15
  __int64 v7; // rbp
  char *v8; // rax
  unsigned __int16 *v9; // rbx
  int v10; // eax
  const wchar_t *v11; // rax
  wchar_t *v12; // rax
  __int64 v13; // rax
  __int64 v14; // rdi
  int v15; // edi
  _WORD *v16; // rax
  wchar_t *v17; // rax
  WCHAR *v18; // rbp
  __int64 v19; // rcx
  __int64 v20; // rax
  __int64 v21; // rbp
  char *v22; // rax
  int DateFormatW; // eax
  __int64 v24; // rsi
  int TimeFormatW; // eax
  __int64 v26; // rax
  int v27; // [rsp+30h] [rbp-48h] BYREF
  struct _SYSTEMTIME SystemTime; // [rsp+38h] [rbp-40h] BYREF

  v1 = a1;
  v2 = 0i64;
  v3 = 0i64;
  if ( !a1 || !*a1 )
    v1 = L"system32\\dns\\dns.log";
  v4 = -1i64;
  if ( !wcsncmp(v1, L"\\\\", 2ui64) || wcsstr(v1, L":\\") )
  {
    v9 = (unsigned __int16 *)Dns_StringCopyAllocate((char *)v1, 0, 1i64, 1);
    if ( !v9 )
      goto LABEL_47;
  }
  else
  {
    v5 = _wgetenv(L"SystemRoot");
    v6 = (char *)L"\\";
    if ( v5 )
      v6 = (char *)v5;
    if ( *v1 == 92 )
    {
      v7 = -1i64;
      do
        ++v7;
      while ( v1[v7] );
      v8 = (char *)Mem_Alloc(2 * (int)v7 + 20, 0i64, "ds\\dns\\server\\server\\log.c", 1464);
      v9 = (unsigned __int16 *)v8;
      if ( !v8 )
        goto LABEL_47;
      v10 = StringCchCopyW(v8, 3i64, v6);
      if ( v10 != -2147024774 )
      {
        if ( v10 )
          goto LABEL_47;
      }
      if ( (int)StringCchCatW(v9, v7 + 10, (char *)v1) < 0 )
        goto LABEL_47;
    }
    else
    {
      v19 = -1i64;
      do
        ++v19;
      while ( v1[v19] );
      v20 = -1i64;
      do
        ++v20;
      while ( *(_WORD *)&v6[2 * v20] );
      v21 = v19 + v20 + 40;
      v22 = (char *)Mem_Alloc(2 * (int)v21, 0i64, "ds\\dns\\server\\server\\log.c", 1499);
      v9 = (unsigned __int16 *)v22;
      if ( !v22
        || (int)StringCchCopyW(v22, v21, v6) < 0
        || !wcschr(v1, 0x5Cu) && (int)StringCchCatW(v9, v21, (char *)L"\\system32\\dns") < 0
        || (int)StringCchCatW(v9, v21, (char *)L"\\") < 0
        || (int)StringCchCatW(v9, v21, (char *)v1) < 0 )
      {
        goto LABEL_47;
      }
    }
  }
  v11 = (const wchar_t *)Dns_StringCopyAllocate((char *)v9, 0, 1i64, 1);
  v2 = v11;
  if ( v11 )
  {
    v12 = wcsrchr(v11, 0x5Cu);
    if ( v12 )
      v12[1] = 0;
    if ( dword_1401B978C )
    {
      v27 = 0;
      v13 = -1i64;
      do
        ++v13;
      while ( v9[v13] );
      if ( v13 )
      {
        GetSystemTime(&SystemTime);
        v14 = -1i64;
        do
          ++v14;
        while ( v9[v14] );
        v15 = v14 + 26;
        v27 = 2 * v15;
        v16 = Mem_Alloc(2 * v15, 0i64, "ds\\dns\\server\\server\\log.c", 1581);
        v3 = v16;
        if ( v16 )
        {
          if ( (unsigned int)Dns_StringCopy(v16, (unsigned int *)&v27, v9, 0, 1, 1) )
          {
            v17 = wcsrchr(v9, 0x2Eu);
            v18 = v17;
            if ( v17 )
            {
              v4 = v17 - v9;
            }
            else
            {
              do
                ++v4;
              while ( *((_WORD *)v3 + v4) );
              v18 = &v9[(unsigned int)v4];
            }
            DateFormatW = GetDateFormatW(
                            0x7Fu,
                            0,
                            &SystemTime,
                            L"yyyy'-'MM'-'dd",
                            (LPWSTR)v3 + (unsigned int)v4,
                            v15 - v4);
            if ( DateFormatW )
            {
              v24 = (unsigned int)(DateFormatW - 1 + v4);
              TimeFormatW = GetTimeFormatW(0x7Fu, 0, &SystemTime, L"'T'HHmmss'Z'", (LPWSTR)v3 + v24, v15 - v24);
              if ( TimeFormatW )
              {
                v26 = (unsigned int)(v24 + TimeFormatW - 1);
                v27 = 2 * (v15 - v26);
                if ( (unsigned int)Dns_StringCopy((_WORD *)v3 + v26, (unsigned int *)&v27, v18, 0, 1, 1) )
                {
                  Mem_Free(v9, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\log.c", 1672);
                  v9 = (unsigned __int16 *)v3;
                  v3 = 0i64;
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_47:
  Mem_Free(v3, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\log.c", 1680);
  g_dwLogsSinceFreeSpaceCheck = -1;
  g_pwszLogFileName = v9;
  g_pwszLogFileDrive = v2;
}
// 14018DDB8: using guessed type wchar_t aSystem32DnsDns[21];
// 1401B8058: using guessed type int g_dwLogsSinceFreeSpaceCheck;
// 1401B978C: using guessed type int dword_1401B978C;
