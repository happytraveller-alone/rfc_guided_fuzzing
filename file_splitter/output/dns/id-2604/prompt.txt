Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 2604
// Total lines: 221

//----- (0000000140133D10) ----------------------------------------------------
__int64 __fastcall CDnsPolicy_InterfaceCriteriaTree::FindMatchingPolicyForQuery(
        __int64 a1,
        struct in_addr *a2,
        __int64 a3,
        const void ***a4,
        __int64 a5,
        int a6)
{
  int v9; // edi
  unsigned int v10; // esi
  __int64 *v11; // rbx
  const char *v12; // rax
  int v13; // ebx
  CDnsClientSubnetRecordsTrie *v14; // r10
  unsigned int v15; // r13d
  _QWORD *v16; // rax
  bool v17; // zf
  __int64 *v18; // rbx
  const char *v19; // rax
  int v20; // ebx
  __int64 v21; // r8
  _QWORD *v22; // rax
  const char *v23; // rax
  unsigned int MatchingPolicyForQuery; // [rsp+50h] [rbp-59h]
  __int64 *v26; // [rsp+58h] [rbp-51h] BYREF
  __int64 v27; // [rsp+60h] [rbp-49h]
  struct in_addr *v28; // [rsp+68h] [rbp-41h]
  __int64 v29; // [rsp+70h] [rbp-39h]
  void *v30[3]; // [rsp+78h] [rbp-31h] BYREF
  unsigned __int64 v31; // [rsp+90h] [rbp-19h]

  v29 = -2i64;
  v27 = a3;
  v9 = 0;
  LODWORD(v26) = 0;
  v10 = 0;
  v28 = a2 + 32;
  if ( a2[32].S_un.S_un_w.s_w1 == 2 )
  {
    std::_Tree<std::_Tmap_traits<unsigned long,CDnsPolicy_CriteriaNode *,bool (*)(unsigned long const &,unsigned long const &),std::allocator<std::pair<unsigned long const,CDnsPolicy_CriteriaNode *>>,0>>::find(
      *(_QWORD *)(a1 + 8),
      &v26,
      (__int64)&a2[33]);
    v11 = v26;
    if ( v26 != *(__int64 **)(*(_QWORD *)(a1 + 8) + 8i64) )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        v12 = DnsAddr_Ntoa(a2 + 32);
        WPP_SF_sqq(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x41u,
          (__int64)&WPP_bbbcc621566c3408fe84d6a85874d543_Traceguids,
          v12);
      }
      v26 = (__int64 *)v11[4];
      v13 = a6;
      MatchingPolicyForQuery = CDnsPolicy_CriteriaNode::FindMatchingPolicyForQuery(
                                 (__int64 ***)v26,
                                 (__int64)a2,
                                 v27,
                                 a4,
                                 a5,
                                 a6);
      v14 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
      {
        if ( *a4 )
        {
          CDnsPolicy::Name(*a4, (__int64)v30);
          v9 = 1;
          v14 = WPP_GLOBAL_Control;
        }
        WPP_SF_qdqqSd(*((_QWORD *)v14 + 7), 0x42u, *((unsigned __int16 *)v26 + 24));
        v14 = WPP_GLOBAL_Control;
        v13 = a6;
      }
      if ( (v9 & 1) != 0 )
      {
        v9 &= ~1u;
        if ( v31 >= 8 )
        {
          operator delete(v30[0]);
          v14 = WPP_GLOBAL_Control;
        }
      }
      v15 = MatchingPolicyForQuery;
      if ( !MatchingPolicyForQuery )
      {
        if ( v13 == 4 && *a4 )
        {
          if ( v14 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)v14 + 17) & 0x400000) != 0
            && *((_BYTE *)v14 + 65) >= 4u )
          {
            v16 = (_QWORD *)CDnsPolicy::Name(*a4, (__int64)v30);
            v9 |= 2u;
            LODWORD(v26) = v9;
            if ( v16[3] >= 8ui64 )
              v16 = (_QWORD *)*v16;
            WPP_SF_qS(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x43u,
              (__int64)&WPP_bbbcc621566c3408fe84d6a85874d543_Traceguids,
              *a4,
              v16);
          }
          v17 = (v9 & 2) == 0;
LABEL_26:
          if ( !v17 && v31 >= 8 )
            operator delete(v30[0]);
          return MatchingPolicyForQuery;
        }
        return v15;
      }
      goto LABEL_54;
    }
  }
  else if ( a2[32].S_un.S_un_w.s_w1 == 23 )
  {
    std::_Tree<std::_Tmap_traits<IP6_ADDRESS,CDnsPolicy_CriteriaNode *,bool (*)(IP6_ADDRESS const &,IP6_ADDRESS const &),std::allocator<std::pair<IP6_ADDRESS const,CDnsPolicy_CriteriaNode *>>,0>>::find(
      *(_QWORD *)(a1 + 16),
      &v26,
      (__int64)&a2[34]);
    v18 = v26;
    if ( v26 != *(__int64 **)(*(_QWORD *)(a1 + 16) + 8i64) )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        v19 = DnsAddr_Ntoa(a2 + 32);
        WPP_SF_sqq(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x44u,
          (__int64)&WPP_bbbcc621566c3408fe84d6a85874d543_Traceguids,
          v19);
      }
      v26 = (__int64 *)v18[5];
      v20 = a6;
      MatchingPolicyForQuery = CDnsPolicy_CriteriaNode::FindMatchingPolicyForQuery(
                                 (__int64 ***)v26,
                                 (__int64)a2,
                                 v27,
                                 a4,
                                 a5,
                                 a6);
      v14 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
      {
        if ( *a4 )
        {
          CDnsPolicy::Name(*a4, (__int64)v30);
          v9 = 4;
          v14 = WPP_GLOBAL_Control;
        }
        WPP_SF_qdqqSd(*((_QWORD *)v14 + 7), 0x45u, v21);
        v14 = WPP_GLOBAL_Control;
        v20 = a6;
      }
      if ( (v9 & 4) != 0 )
      {
        v9 &= ~4u;
        if ( v31 >= 8 )
        {
          operator delete(v30[0]);
          v14 = WPP_GLOBAL_Control;
        }
      }
      v15 = MatchingPolicyForQuery;
      if ( !MatchingPolicyForQuery )
      {
        if ( v20 == 4 && *a4 )
        {
          if ( v14 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)v14 + 17) & 0x400000) != 0
            && *((_BYTE *)v14 + 65) >= 4u )
          {
            v22 = (_QWORD *)CDnsPolicy::Name(*a4, (__int64)v30);
            v9 |= 8u;
            LODWORD(v26) = v9;
            if ( v22[3] >= 8ui64 )
              v22 = (_QWORD *)*v22;
            WPP_SF_qS(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x46u,
              (__int64)&WPP_bbbcc621566c3408fe84d6a85874d543_Traceguids,
              *a4,
              v22);
          }
          v17 = (v9 & 8) == 0;
          goto LABEL_26;
        }
        return v15;
      }
LABEL_54:
      if ( v14 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)v14 + 17) & 0x400000) != 0
        && *((_BYTE *)v14 + 65) >= 2u )
      {
        v23 = DnsAddr_Ntoa(v28);
        WPP_SF_sqD(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x47u,
          (__int64)&WPP_bbbcc621566c3408fe84d6a85874d543_Traceguids,
          v23);
      }
      return MatchingPolicyForQuery;
    }
  }
  return v10;
}
// 1401340A5: variable 'v21' is possibly undefined
// 140184CA8: using guessed type void __stdcall operator delete(void *);
##############################
Role: Let's assume that you are an advanced reverse engineer and you are reverse engineering a network driver using IDA Pro, and you are also familiar with the RFC documentation. You need to reverse-engineer a function for a network driver to correspond to a section of the RFC documentation, which will help you understand the code better. The driver you're reversing is Schannel.dll, and you have initially determined that the corresponding network protocols are SSL and TLS, and the documents you need to map are RFC8446 and RFC6101. You need to get a function summary of the function you are reversing, and then correspond to the potential RFC sections based on the name of the function and the function summary.
Function Background: The function is reverse engineered from the driver file Schannel.dll on Windows platform. Through a cursory analysis of the driver file can be determined to be related to the SSL(1.3), TLS(3.0) protocol, that is, with RFC8446, RFC6101 strong correlation.

Output Function Summary: Summarizes the function's functionality with several phrases instead of sentences, focuses on covering the function's control flow information, and highlights the protocol function points implemented by the function. Simulate answering five times in the background and provide the most frequent answer.

Retrieve document sections: giving matches for document sections(FunctionMatchRFCResult) that the code may related to. NOTE if the code is only business related(i.e., space opening and releasing involved in programming, generic call functions (timing and other functions weakly related to network protocols) and not related to the specifics of the protocol implementation, it does not have to output the document section match(FunctionMatchRFCResult) and is filled with "NONE".

Retrieve document sections Thinking Chain: The function code is matched with the RFC document section, and the thinking chain is provided to help you solve the problem better:
	1. Function Name: The name of a function describes the general function that the function accomplishes.
	2. Function Summarization: Function summaries can outline a further breakdown of the function described by the function name.
	3. Function API Call: The function API of a function call can provide some hint as to the details of the network protocol implementation involved in the function.
	4. Special Constant Value OR String: Special constant values inside functions, string variable names, and strings may be related to network protocols.
	5. Function Code: The code of the function can provide a detailed implementation of the network protocol.
Generate Function Information Collection with JSON Format:

{
	"FunctionIndex": "(FILL WITH "File count" with less than four bits are indexed with zeros to make up the four bits.)",
	"FunctionName": "(Full Function Code Name)",
	"FunctionSummarization": [
		"(Function Summary Phrase1)",
		"(Function Summary Phrase2)",
		"(...)"
	],
	"FunctionMatchRFCResult": [
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 1)",
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 2)",
		"(...)"
	],
}

ATTENTION: Remember YOU MUST ONLY output the Function Information Collection result.
