Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 491
// Total lines: 770

//----- (0000000140040788) ----------------------------------------------------
__int64 __fastcall Ds_LoadZoneFromDs(struct _zone_info *a1, int a2, _DWORD *a3)
{
  int v3; // esi
  int v4; // r15d
  int v5; // r13d
  __int64 v8; // rdx
  int v9; // edi
  BOOL v10; // r14d
  int v11; // eax
  char v12; // r8
  WINBOOL v13; // r9d
  CDnsClientSubnetRecordsTrie *v14; // rcx
  PSID v15; // rdi
  void *v16; // rdx
  int IsAllowOrDenyAceFound; // edi
  int v18; // r9d
  int started; // eax
  __int64 v20; // r8
  CDnsClientSubnetRecordsTrie *v21; // rcx
  __int64 v22; // rcx
  struct _zone_info *v23; // rax
  struct _zone_info *v24; // rax
  __int64 v25; // r12
  int v26; // r14d
  int NextNodeInDsZoneSearch; // eax
  struct _DnsTreeNode *v28; // r15
  int v29; // eax
  _QWORD *v30; // rsi
  int v31; // r12d
  _QWORD *v32; // r14
  unsigned __int8 *CountNameFromDottedName; // rax
  unsigned __int8 *v34; // rsi
  char v35; // al
  int v36; // eax
  int v37; // esi
  unsigned int v38; // edi
  CDnsClientSubnetRecordsTrie *v39; // rcx
  int v40; // eax
  __int64 v41; // rdx
  int v42; // eax
  int v43; // eax
  int v44; // r15d
  int v45; // eax
  unsigned int v46; // eax
  unsigned int v47; // eax
  const char *v48; // r10
  const char *v49; // rax
  unsigned __int16 *v51; // r9
  __int64 v52; // rcx
  const char *v53; // rax
  int v54; // [rsp+44h] [rbp-BCh]
  __int16 v55[2]; // [rsp+48h] [rbp-B8h] BYREF
  __int16 v56; // [rsp+4Ch] [rbp-B4h] BYREF
  int v57; // [rsp+50h] [rbp-B0h]
  int v58; // [rsp+54h] [rbp-ACh]
  int v59; // [rsp+58h] [rbp-A8h]
  struct _DnsTreeNode *v60; // [rsp+60h] [rbp-A0h] BYREF
  BOOL v61; // [rsp+68h] [rbp-98h]
  int v62; // [rsp+6Ch] [rbp-94h]
  __int64 v63; // [rsp+70h] [rbp-90h]
  _DWORD *v64; // [rsp+78h] [rbp-88h]
  __int128 v65; // [rsp+80h] [rbp-80h] BYREF
  __int128 v66; // [rsp+90h] [rbp-70h]
  __int64 v67; // [rsp+A0h] [rbp-60h]
  unsigned __int16 *v68[3]; // [rsp+A8h] [rbp-58h] BYREF
  __int128 v69; // [rsp+C0h] [rbp-40h] BYREF
  __int128 v70; // [rsp+D0h] [rbp-30h] BYREF
  __int128 v71; // [rsp+E0h] [rbp-20h] BYREF
  CHAR v72[48]; // [rsp+F0h] [rbp-10h] BYREF
  int v73; // [rsp+120h] [rbp+20h]
  int v74; // [rsp+128h] [rbp+28h]
  unsigned int v75; // [rsp+130h] [rbp+30h]
  char v76; // [rsp+140h] [rbp+40h]
  _QWORD *v77; // [rsp+168h] [rbp+68h]
  char v78[256]; // [rsp+180h] [rbp+80h] BYREF
  unsigned __int16 *v79[3]; // [rsp+280h] [rbp+180h] BYREF

  v64 = a3;
  v3 = 0;
  v54 = 0;
  v4 = 0;
  v59 = 0;
  v5 = 0;
  v57 = 0;
  v58 = 0;
  v62 = a2;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_s(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x101u,
      (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
      *((const char **)a1 + 2));
  }
  if ( a3 )
    *a3 = 0;
  v9 = Ds_OpenServer((*((_WORD *)a1 + 194) & 1u) << 12);
  if ( v9 )
    goto LABEL_218;
  v10 = (*((_BYTE *)a1 + 388) & 6) == 2;
  v61 = v10;
  v11 = Ds_OpenZone((__int64)a1);
  v9 = v11;
  if ( v11 )
  {
    if ( !dword_1401B9708 && *((_DWORD *)a1 + 93) )
    {
      v69 = DNS_EVENT_DS_ZONE_OPEN_FAILED;
      Eventlog_LogEvent((__int64)&v69, v8, 1u, (unsigned __int16 **)a1 + 3, 0i64, v11, 0, 0i64);
      v14 = WPP_GLOBAL_Control;
      goto LABEL_219;
    }
LABEL_218:
    v14 = WPP_GLOBAL_Control;
LABEL_219:
    if ( g_fDnsServiceExit != 1 && (*((_BYTE *)a1 + 388) & 1) != 0 && (v62 & 1) == 0 )
    {
      v51 = (unsigned __int16 *)*((_QWORD *)a1 + 2);
      v79[2] = 0i64;
      *((_DWORD *)a1 + 99) |= 0x10000u;
      v79[0] = (unsigned __int16 *)v9;
      v79[1] = v51;
      v56 = 772;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_sd(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x118u,
          (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
          (const char *)v51);
      }
      v71 = DNS_EVENT_ZONE_LOAD_RETRY;
      Eventlog_LogEvent((__int64)&v71, v8, 2u, v79, (unsigned __int8 *)&v56, 0, 0, 0i64);
      v14 = WPP_GLOBAL_Control;
    }
    if ( v4 )
    {
      Ds_CleanupSearchBlob((__int64)v72);
      v14 = WPP_GLOBAL_Control;
    }
    if ( *((_DWORD *)a1 + 93) == 1 && (*((_BYTE *)a1 + 1040) & 1) != 0 )
    {
      if ( v14 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)v14 + 17) & 0x400) != 0
        && *((_BYTE *)v14 + 65) >= 4u )
      {
        WPP_SF_s(
          *((_QWORD *)v14 + 7),
          0x119u,
          (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
          *((const char **)a1 + 2));
      }
      *((_DWORD *)a1 + 260) &= ~1u;
      v14 = WPP_GLOBAL_Control;
    }
    if ( v14 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)v14 + 17) & 0x400) != 0
      && *((_BYTE *)v14 + 65) >= 4u )
    {
      v52 = *((_QWORD *)v14 + 7);
      v53 = "not set";
      if ( (*((_BYTE *)a1 + 398) & 1) != 0 )
        v53 = "set";
      WPP_SF_Dss(
        v52,
        0x11Au,
        (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
        v9,
        *((_QWORD *)a1 + 2),
        (__int64)v53);
    }
    return (unsigned int)v9;
  }
  if ( dword_1401B9750 )
    goto LABEL_30;
  if ( g_fDsReadOnlyDcMode )
    goto LABEL_30;
  v15 = g_pEnterpriseDomainControllersSid;
  if ( !g_pEnterpriseDomainControllersSid )
    goto LABEL_30;
  v16 = (void *)*((_QWORD *)a1 + 45);
  v67 = 0i64;
  v65 = 0i64;
  v66 = 0i64;
  if ( (unsigned int)CSecurityDescriptor::Attach((PACL *)&v65, v16, v12, v13) )
  {
    CSecurityDescriptor::~CSecurityDescriptor((CSecurityDescriptor *)&v65);
LABEL_21:
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_S(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x102u,
        (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
        *((const unsigned __int16 **)a1 + 105));
    }
    v18 = Ds_AddPrincipalAccess(
            pServerLdap,
            *((PWSTR *)a1 + 105),
            g_pEnterpriseDomainControllersSid,
            0i64,
            0xF017Fu,
            2u,
            1,
            0);
    if ( v18
      && WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_DS(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x103u,
        (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
        v18,
        *((_QWORD *)a1 + 105));
    }
    goto LABEL_30;
  }
  if ( *((_QWORD *)&v66 + 1) )
    IsAllowOrDenyAceFound = CSecurityDescriptor::IsAllowOrDenyAceFound((PACL *)&v65, v15);
  else
    IsAllowOrDenyAceFound = 0;
  CSecurityDescriptor::~CSecurityDescriptor((CSecurityDescriptor *)&v65);
  if ( !IsAllowOrDenyAceFound )
    goto LABEL_21;
LABEL_30:
  started = Ds_StartDsZoneSearch(v72, (__int64)a1, 0i64, 0i64);
  v9 = started;
  if ( started )
  {
    if ( started == 1168897 )
    {
      v14 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_s(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x104u,
          (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
          *((const char **)a1 + 2));
        v14 = WPP_GLOBAL_Control;
      }
      v9 = 232;
      goto LABEL_219;
    }
    v21 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
    {
      if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0 && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_s(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x105u,
          (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
          *((const char **)a1 + 2));
        v21 = WPP_GLOBAL_Control;
      }
LABEL_191:
      if ( v21 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)v21 + 17) & 0x400) != 0
        && *((_BYTE *)v21 + 65) >= 4u )
      {
        WPP_SF_sd(
          *((_QWORD *)v21 + 7),
          0x117u,
          (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
          *((const char **)a1 + 2));
      }
    }
LABEL_196:
    Ds_LogZoneEnumerationError((__int64)a1, v9);
    goto LABEL_218;
  }
  v8 = 1i64;
  v4 = 1;
  if ( *((_DWORD *)a1 + 93) == 1 )
  {
    v22 = *((_QWORD *)a1 + 41);
    v23 = a1;
    if ( v22 )
      v23 = (struct _zone_info *)*((_QWORD *)a1 + 41);
    if ( *((_DWORD *)v23 + 93) == 1 )
    {
      v24 = a1;
      if ( v22 )
        v24 = (struct _zone_info *)*((_QWORD *)a1 + 41);
      if ( (*((_BYTE *)v24 + 1040) & 8) != 0 )
      {
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          WPP_SF_s(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x106u,
            (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
            *((const char **)a1 + 2));
          v8 = 1i64;
        }
        *((_DWORD *)a1 + 260) |= 1u;
      }
    }
  }
  v14 = WPP_GLOBAL_Control;
  if ( *((int *)a1 + 108) > 0 )
  {
LABEL_130:
    if ( v14 == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_DWORD *)v14 + 17) & 0x400) == 0
      || *((_BYTE *)v14 + 65) < 4u )
    {
      goto LABEL_219;
    }
    WPP_SF_s(
      *((_QWORD *)v14 + 7),
      0x107u,
      (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
      *((const char **)a1 + 2));
    goto LABEL_218;
  }
  v25 = v10;
  v26 = 1;
  v63 = v25;
  while ( 1 )
  {
    if ( g_fDnsServiceExit == 1 )
    {
      if ( v14 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)v14 + 17) & 0x400) != 0
        && *((_BYTE *)v14 + 65) >= 4u )
      {
        WPP_SF_(*((_QWORD *)v14 + 7), 0x108u, (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids);
        v14 = WPP_GLOBAL_Control;
      }
      v9 = 1167617;
      goto LABEL_217;
    }
    if ( !(v3 % 256) )
      Service_LoadCheckpoint();
    if ( (*((_BYTE *)a1 + 388) & 4) != 0 )
    {
      if ( *((_DWORD *)a1 + 106) )
      {
        v9 = Zone_PulseUnlockDuringWriteEx((__int64)a1, v8, v20);
        if ( v9 )
        {
          v14 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
          {
            WPP_SF_Ds(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x109u,
              (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
              v9,
              *((_QWORD *)a1 + 2));
            goto LABEL_138;
          }
          goto LABEL_217;
        }
      }
    }
    NextNodeInDsZoneSearch = Ds_GetNextNodeInDsZoneSearch((__int64)v72, (__int64 *)&v60);
    v9 = NextNodeInDsZoneSearch;
    if ( !NextNodeInDsZoneSearch )
    {
      v28 = v60;
      if ( (*((_BYTE *)a1 + 388) & 4) != 0 && qword_1401B9880 && !_stricmp(qword_1401B9880, (const char *)v60 + 102) )
      {
        v14 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          WPP_SF_ss(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x10Bu,
            (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
            (const char *)v28 + 102,
            *((_QWORD *)a1 + 2));
          v14 = WPP_GLOBAL_Control;
        }
        v8 = 1i64;
        v29 = 1;
        dword_1401B987C = 1;
      }
      else
      {
        v14 = WPP_GLOBAL_Control;
        v8 = 1i64;
        v29 = dword_1401B987C;
      }
      if ( v29 )
      {
        while ( g_fDnsServiceExit != 1 )
        {
          if ( !(unsigned int)Thread_ServiceCheck(0) )
            goto LABEL_85;
          if ( v26 )
          {
            if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
              && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
            {
              WPP_SF_s(
                *((_QWORD *)WPP_GLOBAL_Control + 7),
                0x10Cu,
                (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
                *((const char **)a1 + 2));
            }
            v26 = 0;
          }
          Sleep(0x1F4u);
          if ( !dword_1401B987C )
          {
LABEL_85:
            v14 = WPP_GLOBAL_Control;
            break;
          }
          v14 = WPP_GLOBAL_Control;
          v8 = 1i64;
        }
      }
      v26 = 1;
      ++v58;
      if ( !v28 )
      {
        if ( v14 == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          || (*((_DWORD *)v14 + 17) & 0x400) == 0
          || *((_BYTE *)v14 + 65) < 4u )
        {
          goto LABEL_127;
        }
        WPP_SF_s(
          *((_QWORD *)v14 + 7),
          0x10Du,
          (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
          *((const char **)a1 + 2));
LABEL_126:
        v14 = WPP_GLOBAL_Control;
LABEL_127:
        v3 = v54;
        goto LABEL_128;
      }
      ++dword_1401C7CB0;
      if ( !v5 )
      {
        v5 = (*((_DWORD *)v28 + 23) & 0x100) != 0;
        v59 = v5;
      }
      if ( *((_QWORD *)v28 + 8) )
      {
        RR_ListFree(v77);
        v30 = 0i64;
        v77 = 0i64;
        if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) == 0
          || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
        {
LABEL_99:
          if ( g_pTrustAnchorsZone && a1 == (struct _zone_info *)g_pTrustAnchorsZone )
            DNSSEC_AddOrUpdateTrustAnchorsInRFC5011State(v28, (__int64)v30);
          if ( v30 )
          {
            v31 = v54;
            do
            {
              v32 = (_QWORD *)*v30;
              v9 = RR_AddToNode((__int64)a1, (__int64)v28, (__int64)v30);
              if ( v9 )
              {
                if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                  && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
                  && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
                {
                  WPP_SF_ss(
                    *((_QWORD *)WPP_GLOBAL_Control + 7),
                    0x10Fu,
                    (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
                    (const char *)v28 + 102,
                    *((_QWORD *)a1 + 2));
                }
              }
              else
              {
                ++dword_1401C7CB4;
                ++v31;
              }
              v30 = v32;
            }
            while ( v32 );
            v5 = v59;
            v26 = 1;
            v54 = v31;
            v25 = v63;
          }
          if ( (*((_DWORD *)v28 + 23) & 0x100) != 0
            || *((_BYTE *)v28 + 96) != 0xF2
            || g_isRegisteredForUTC != 1
            || (CountNameFromDottedName = Name_CreateCountNameFromDottedName(v78, 0),
                (v34 = CountNameFromDottedName) == 0i64) )
          {
LABEL_124:
            DnsBL_ProcessNodeLoad((__int64)v28);
            if ( v25 && v5 )
              goto LABEL_150;
            goto LABEL_126;
          }
          v35 = Name_ResourceTypeForCountName((struct _CountName *)CountNameFromDottedName);
          if ( (v35 & 3) == 3 )
          {
            _InterlockedAdd(&dword_1401B95EC, 1u);
          }
          else if ( (v35 & 1) != 0 )
          {
            _InterlockedAdd(&dword_1401B95E8, 1u);
          }
          else
          {
            if ( (v35 & 2) == 0 )
            {
LABEL_123:
              Mem_Free(v34, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\dnstelemetry.cpp", 370);
              goto LABEL_124;
            }
            _InterlockedAdd(&dword_1401B95E4, 1u);
          }
          v28 = v60;
          goto LABEL_123;
        }
        WPP_SF_s(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x10Eu,
          (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
          *((const char **)a1 + 2));
      }
      v30 = v77;
      goto LABEL_99;
    }
    if ( NextNodeInDsZoneSearch == 1168897 )
      break;
    if ( v73 )
    {
      v21 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
      {
        if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0 && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          WPP_SF_sdD(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x10Au,
            (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
            *((const char **)a1 + 2));
          goto LABEL_189;
        }
        goto LABEL_190;
      }
LABEL_195:
      v4 = 1;
      goto LABEL_196;
    }
    v14 = WPP_GLOBAL_Control;
LABEL_128:
    if ( *((int *)a1 + 108) > 0 )
    {
      v4 = 1;
      goto LABEL_130;
    }
  }
  if ( !v5 && *((_DWORD *)a1 + 93) == 1 )
  {
    v14 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_s(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x110u,
        (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
        *((const char **)a1 + 2));
      v14 = WPP_GLOBAL_Control;
    }
    v9 = 9605;
    goto LABEL_217;
  }
LABEL_150:
  if ( v76 )
    saveStartUsnToZone((__int64)a1, (__int64)v72);
  v36 = *((_DWORD *)a1 + 93);
  if ( v36 )
  {
    v37 = *((_DWORD *)a1 + 128);
    if ( (*((_BYTE *)a1 + 388) & 2) == 0 && v36 == 1 && (*((_BYTE *)a1 + 1040) & 1) != 0 )
    {
      v38 = 611;
      v39 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_s(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x111u,
          (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
          *((const char **)a1 + 2));
        v39 = WPP_GLOBAL_Control;
      }
      if ( (v74 & 0x100) != 0 )
      {
        if ( v39 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)v39 + 17) & 0x400) != 0
          && *((_BYTE *)v39 + 65) >= 4u )
        {
          WPP_SF_s(
            *((_QWORD *)v39 + 7),
            0x112u,
            (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
            *((const char **)a1 + 2));
        }
        v38 = 1635;
      }
      v40 = DnsOls_SignZone(a1, 0i64, 255i64, v38, 0i64);
      *((_DWORD *)a1 + 260) |= 0xCu;
      v9 = v40;
      if ( v40 )
      {
        v68[0] = *((unsigned __int16 **)a1 + 3);
        v55[0] = 1025;
        v68[1] = (unsigned __int16 *)v40;
        v70 = DNS_EVENT_DNSSEC_LOAD_SIGN_FAIL;
        Eventlog_LogEvent((__int64)&v70, v41, 2u, v68, (unsigned __int8 *)v55, 0, 0, 0i64);
        v14 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
        {
          WPP_SF_Ds(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x113u,
            (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
            v9,
            *((_QWORD *)a1 + 2));
LABEL_138:
          v14 = WPP_GLOBAL_Control;
        }
LABEL_217:
        v4 = 1;
        goto LABEL_219;
      }
      DnsOls_ClearZoneResignSchedule((__int64)a1);
      DnsOls_SetZoneSigRefreshTime((__int64)a1, 1);
    }
    v42 = *((_DWORD *)a1 + 97);
    if ( (v42 & 2) == 0 || (v42 & 6) == 2 )
    {
      v9 = Zone_ActivateLoadedZone((__int64)a1);
      if ( v9 )
      {
        v21 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
        {
          if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0 && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
          {
            WPP_SF_Ds(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x114u,
              (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
              v9,
              *((_QWORD *)a1 + 2));
LABEL_189:
            v21 = WPP_GLOBAL_Control;
          }
LABEL_190:
          v4 = 1;
          goto LABEL_191;
        }
        goto LABEL_195;
      }
    }
    else if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
           && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
           && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_s(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x115u,
        (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
        *((const char **)a1 + 2));
    }
    v43 = *((_DWORD *)a1 + 93);
    v44 = v57;
    if ( v43 == 1 && (*((_BYTE *)a1 + 1040) & 1) != 0 )
      v44 = 1;
    if ( !v61 && v43 == 1 )
      Zone_UpdateVersionAfterDsRead((__int64)a1, v75, 1, v37);
  }
  else
  {
    v44 = v57;
  }
  *((_DWORD *)a1 + 236) = *((_DWORD *)a1 + 128);
  v45 = dword_1401B9714 + Ds_GetPollingInterval();
  *((_DWORD *)a1 + 97) |= 1u;
  *((_DWORD *)a1 + 216) = v45;
  *((_DWORD *)a1 + 111) = v54;
  v46 = *((_DWORD *)a1 + 99) & 0xFFFEFFFF;
  *((_DWORD *)a1 + 99) = v46;
  if ( v44 )
    v47 = v46 | 0x2000;
  else
    v47 = v46 & 0xFFFFDFFF;
  *((_DWORD *)a1 + 99) = v47;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x10) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    v48 = "not paused";
    if ( (*((_DWORD *)a1 + 99) & 0x1000) != 0 )
      v48 = "paused";
    v49 = "not shutdown";
    if ( (*((_DWORD *)a1 + 99) & 0x2000) != 0 )
      v49 = "shutdown";
    WPP_SF_sss(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x116u,
      (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
      *((const char **)a1 + 2),
      (__int64)v49,
      (__int64)v48);
  }
  if ( v64 )
    *v64 = v58;
  Ds_CleanupSearchBlob((__int64)v72);
  return 0i64;
}
// 1400408B6: variable 'v8' is possibly undefined
// 140040917: variable 'v12' is possibly undefined
// 140040917: variable 'v13' is possibly undefined
// 140040BB5: variable 'v20' is possibly undefined
// 1400411DA: variable 'v41' is possibly undefined
// 140185F68: using guessed type __int128 DNS_EVENT_ZONE_LOAD_RETRY;
// 140186BD8: using guessed type __int128 DNS_EVENT_DS_ZONE_OPEN_FAILED;
// 140187250: using guessed type __int128 DNS_EVENT_DNSSEC_LOAD_SIGN_FAIL;
// 1401B8C48: using guessed type __int64 g_pTrustAnchorsZone;
// 1401B8C94: using guessed type int g_fDsReadOnlyDcMode;
// 1401B9190: using guessed type int g_isRegisteredForUTC;
// 1401B95E4: using guessed type int dword_1401B95E4;
// 1401B95E8: using guessed type int dword_1401B95E8;
// 1401B95EC: using guessed type int dword_1401B95EC;
// 1401B9708: using guessed type int dword_1401B9708;
// 1401B9714: using guessed type int dword_1401B9714;
// 1401B9750: using guessed type int dword_1401B9750;
// 1401B987C: using guessed type int dword_1401B987C;
// 1401B9A40: using guessed type int g_fDnsServiceExit;
// 1401C7CB0: using guessed type int dword_1401C7CB0;
// 1401C7CB4: using guessed type int dword_1401C7CB4;
// 140040788: using guessed type char var_150[256];
// 140040788: using guessed type __int16 var_288[2];
