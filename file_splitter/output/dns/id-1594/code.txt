Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 1594
// Total lines: 94

//----- (00000001400C8FE0) ----------------------------------------------------
void __fastcall Zone_NotifyIfSignatureExpires(__int64 a1)
{
  __int64 v2; // rdi
  __time32_t v3; // eax
  u_short v4; // cx
  u_short v5; // ax
  __int64 v6; // rdx
  __int128 v7; // xmm0
  unsigned __int16 v8; // r8
  __int64 *v9; // r9
  __time32_t v10; // eax
  u_short v11; // cx
  u_short v12; // ax
  unsigned int v13[4]; // [rsp+40h] [rbp-C0h] BYREF
  __int128 v14; // [rsp+50h] [rbp-B0h] BYREF
  __int64 v15[2]; // [rsp+60h] [rbp-A0h] BYREF
  __int64 v16[4]; // [rsp+70h] [rbp-90h] BYREF
  wchar_t Buffer[2]; // [rsp+90h] [rbp-70h] BYREF
  char v18[524]; // [rsp+94h] [rbp-6Ch] BYREF
  wchar_t v19[2]; // [rsp+2A0h] [rbp+1A0h] BYREF
  char v20[524]; // [rsp+2A4h] [rbp+1A4h] BYREF
  unsigned __int16 v21[2]; // [rsp+4B0h] [rbp+3B0h] BYREF
  char v22[524]; // [rsp+4B4h] [rbp+3B4h] BYREF

  if ( a1
    && *(_QWORD *)(a1 + 40)
    && (*(_BYTE *)(a1 + 396) & 0x10) != 0
    && (*(_DWORD *)(a1 + 372) != 1 || (*(_BYTE *)(a1 + 1040) & 4) == 0) )
  {
    v13[0] = -1;
    acquireRead(DbaseLock, 0xFFFFFFFF, v13);
    v2 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 64i64);
    if ( v2 )
    {
      while ( 1 )
      {
        if ( *(_WORD *)(v2 + 12) != 46 || ntohs(*(_WORD *)(v2 + 56)) != 48 )
          goto LABEL_14;
        v3 = _time32(0i64);
        if ( !DnsVal_IsRRSigPeriodValid(v2, v3) )
          break;
        v10 = _time32(0i64);
        if ( !DnsVal_IsRRSigPeriodValid(v2, v10 + 86400) )
        {
          *(_DWORD *)v21 = 0;
          memset_0(v22, 0, 0x204ui64);
          *(_DWORD *)v19 = 0;
          memset_0(v20, 0, 0x204ui64);
          v11 = *(_WORD *)(v2 + 72);
          v16[0] = (__int64)v19;
          v16[1] = *(_QWORD *)(a1 + 24);
          v16[2] = (__int64)v21;
          v12 = ntohs(v11);
          _itow(v12, v19, 10);
          ConvertTimeToUTCTimeString(*(_DWORD *)(v2 + 64), v21);
          v7 = DNS_EVENT_DNSSEC_SIGNATURE_ABOUT_TO_EXPIRE;
          v8 = 3;
          v9 = v16;
          goto LABEL_13;
        }
LABEL_14:
        v2 = *(_QWORD *)v2;
        if ( !v2 )
          goto LABEL_15;
      }
      *(_DWORD *)Buffer = 0;
      memset_0(v18, 0, 0x204ui64);
      v4 = *(_WORD *)(v2 + 72);
      v15[0] = (__int64)Buffer;
      v15[1] = *(_QWORD *)(a1 + 24);
      v5 = ntohs(v4);
      _itow(v5, Buffer, 10);
      v7 = DNS_EVENT_DNSSEC_SIGNATURE_NOT_VALID;
      v8 = 2;
      v9 = v15;
LABEL_13:
      v14 = v7;
      Eventlog_LogEvent((__int64)&v14, v6, v8, (unsigned __int16 **)v9, (unsigned __int8 *)1, 0, 0, 0i64);
      goto LABEL_14;
    }
LABEL_15:
    v13[0] = -1;
    releaseRead(DbaseLock, v13, 1);
  }
}
// 1400C91E1: variable 'v6' is possibly undefined
// 1401867D8: using guessed type __int128 DNS_EVENT_DNSSEC_SIGNATURE_NOT_VALID;
// 140186968: using guessed type __int128 DNS_EVENT_DNSSEC_SIGNATURE_ABOUT_TO_EXPIRE;
// 14018BA70: using guessed type int dword_14018BA70;
// 1401EC5E8: using guessed type __int64 DbaseLock;
// 1400C8FE0: using guessed type char var_64C[524];
// 1400C8FE0: using guessed type char var_22C[524];
// 1400C8FE0: using guessed type char var_43C[524];
