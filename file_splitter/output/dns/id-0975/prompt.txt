Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 975
// Total lines: 362

//----- (0000000140083498) ----------------------------------------------------
__int64 __fastcall RR_CacheRecordSet(
        __int64 a1,
        __int64 a2,
        int a3,
        __int64 a4,
        _QWORD **a5,
        unsigned int a6,
        unsigned int a7,
        __int64 a8,
        int a9,
        _QWORD *a10,
        unsigned int a11,
        _DWORD *a12,
        unsigned int *a13,
        unsigned int a14)
{
  int v14; // r13d
  _QWORD **v15; // r8
  _QWORD *v18; // r14
  _WORD *v19; // rbp
  unsigned __int16 v20; // r15
  __int64 v21; // rsi
  _QWORD *v22; // rax
  int v23; // edi
  _QWORD *v24; // rbx
  CDnsClientSubnetRecordsTrie *v25; // rcx
  __int64 **v26; // r8
  unsigned __int8 *v27; // rdx
  __int64 *v28; // rax
  __int64 v29; // rcx
  unsigned __int8 *v30; // rax
  char *v31; // rax
  char *v32; // rax
  unsigned __int16 v33; // dx
  __int64 *v34; // rax
  _QWORD *v35; // rdx
  _QWORD *i; // rcx
  char v37; // bp
  char v38; // bl
  __int16 v39; // ax
  __int16 v40; // cx
  char *v41; // rax
  __int64 v42; // rbx
  __int64 v43; // rbx
  CDnsClientSubnetRecordsTrie *v44; // rcx
  const char *v45; // rax
  __int64 v47; // [rsp+20h] [rbp-A8h]
  unsigned int v48; // [rsp+60h] [rbp-68h]
  __int64 **v49; // [rsp+70h] [rbp-58h]
  unsigned __int8 *v50; // [rsp+78h] [rbp-50h]
  __int64 v51; // [rsp+80h] [rbp-48h]
  _QWORD *v52; // [rsp+88h] [rbp-40h]
  __int64 v53; // [rsp+88h] [rbp-40h]
  __int64 v54; // [rsp+D8h] [rbp+10h]

  v54 = a2;
  v14 = a3;
  v15 = a5;
  v48 = 0;
  v18 = 0i64;
  v19 = *a5;
  v52 = *a5;
  v20 = *((_WORD *)*a5 + 6);
  if ( v14 == 2 )
  {
    if ( v20 == 6 && *(_DWORD *)a8 || v20 == 47 || v20 == 50 )
    {
LABEL_11:
      v49 = 0i64;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800) == 0 )
      {
        v21 = v54;
      }
      else
      {
        v21 = v54;
        if ( *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
        {
          v47 = v54;
          WPP_SF_Dq(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x24u,
            (__int64)&WPP_95413813eca334a66ae97b50395580a7_Traceguids,
            v20);
        }
      }
      if ( v20 == 6 && *(_QWORD *)(a8 + 16) && RR_FindNextRecordEx(a4, 0, 6u, a8 + 16, 0, 1) )
      {
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800) != 0 )
        {
          if ( *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
            WPP_SF_q(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x25u,
              (__int64)&WPP_95413813eca334a66ae97b50395580a7_Traceguids,
              v21);
          v18 = 0i64;
        }
        goto LABEL_24;
      }
      v22 = RR_CopyRecordListWithOwnerName((__int64 *)a4, *a5, a5[1]);
      v23 = 0;
      v24 = v22;
      if ( !v22 )
      {
        v18 = 0i64;
        goto LABEL_24;
      }
      v25 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        v47 = v21;
        WPP_SF_Dq(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x26u,
          (__int64)&WPP_95413813eca334a66ae97b50395580a7_Traceguids,
          v20);
        v25 = WPP_GLOBAL_Control;
      }
      if ( v20 != 6 )
      {
        if ( v20 != 46 || ntohs(*((_WORD *)v52 + 28)) != 6 )
        {
          v27 = 0i64;
          v50 = 0i64;
          if ( (*((_BYTE *)v24 + 28) & 0x10) != 0 )
          {
            v27 = (unsigned __int8 *)v24 + *((unsigned __int16 *)v24 + 7) + 56;
            v50 = v27;
          }
          v51 = 0i64;
          v28 = (__int64 *)(a8 + 24);
          v53 = a8 + 24;
          while ( 1 )
          {
            v29 = *v28;
            if ( !*v28 )
            {
              if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800) != 0
                && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
              {
                v32 = Dbg_CountName(v27);
                v47 = (__int64)v24;
                WPP_SF_sq(
                  *((_QWORD *)WPP_GLOBAL_Control + 7),
                  0x28u,
                  (__int64)&WPP_95413813eca334a66ae97b50395580a7_Traceguids,
                  v32);
              }
              *(_QWORD *)(a8 + 8i64 * v23 + 24) = v24;
              goto LABEL_54;
            }
            v30 = 0i64;
            if ( (*(_BYTE *)(v29 + 28) & 0x10) != 0 )
              v30 = (unsigned __int8 *)(v29 + *(unsigned __int16 *)(v29 + 14) + 56i64);
            if ( !(unsigned int)Name_CaseInsensitiveCompareCountNames(v30, v27, 0i64) )
              break;
            ++v23;
            v28 = (__int64 *)(v53 + 8);
            ++v51;
            v53 += 8i64;
            v27 = v50;
            if ( v51 >= 3 )
              goto LABEL_54;
          }
          v49 = (__int64 **)(a8 + 24 + 8i64 * v23);
          v25 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            v31 = Dbg_CountName(v50);
            WPP_SF_qs(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x27u,
              (__int64)&WPP_95413813eca334a66ae97b50395580a7_Traceguids,
              *v49,
              v31);
LABEL_54:
            v25 = WPP_GLOBAL_Control;
          }
          if ( v23 >= 3 )
          {
            if ( v25 == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              || (*((_DWORD *)v25 + 17) & 0x800) == 0
              || *((_BYTE *)v25 + 65) < 4u )
            {
              goto LABEL_61;
            }
            v33 = 41;
            goto LABEL_60;
          }
          v26 = v49;
LABEL_64:
          if ( v26 )
          {
            v34 = *v26;
            v35 = 0i64;
            if ( !*v26 )
            {
              if ( v25 == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                || (*((_DWORD *)v25 + 17) & 0x800) == 0
                || *((_BYTE *)v25 + 65) < 4u )
              {
                goto LABEL_61;
              }
              v33 = 42;
LABEL_60:
              WPP_SF_q(*((_QWORD *)v25 + 7), v33, (__int64)&WPP_95413813eca334a66ae97b50395580a7_Traceguids, v21, v47);
LABEL_61:
              v18 = v24;
LABEL_24:
              RR_ListFree(*a5);
              goto LABEL_130;
            }
            for ( i = v24; *i; i = (_QWORD *)*i )
              ;
            do
            {
              if ( *((_WORD *)v34 + 6) > v20 )
                break;
              v35 = v34;
              v34 = (__int64 *)*v34;
            }
            while ( v34 );
            if ( v35 )
              *v35 = v24;
            else
              *v26 = v24;
            *i = v34;
          }
          v18 = 0i64;
          v48 = 1;
          goto LABEL_24;
        }
        v25 = WPP_GLOBAL_Control;
      }
      if ( *(_QWORD *)(a8 + 16) )
      {
        v26 = (__int64 **)(a8 + 16);
      }
      else
      {
        *(_QWORD *)(a8 + 16) = v24;
        v26 = 0i64;
        v25 = WPP_GLOBAL_Control;
      }
      goto LABEL_64;
    }
    if ( v20 == 46 )
    {
      if ( ntohs(v19[28]) == 6 && *(_DWORD *)a8 || ntohs(v19[28]) == 47 || ntohs(v19[28]) == 50 )
        goto LABEL_11;
      a2 = v54;
      v15 = a5;
    }
  }
  v37 = 1;
  v38 = 1;
  if ( *(int *)(a1 + 1424) > 0 && v20 == 2 )
    v38 = 3;
  if ( (unsigned int)(v14 - 2) <= 1 && *(_QWORD *)(a1 + 56) == 4241280207i64 )
  {
    v39 = *(_WORD *)(a2 + 480);
    if ( v39 == 1 || v39 == 28 )
    {
      v40 = *((_WORD *)*v15 + 6);
      if ( (unsigned __int16)(v40 - 1) <= 1u || v40 == 28 )
        v38 |= 6u;
    }
  }
  if ( *(_WORD *)(a1 + 440) == 48 && *(_QWORD *)(a1 + 1432) )
    v38 |= 2u;
  if ( a9 )
  {
    if ( v14 != 1 )
      goto LABEL_102;
    if ( *((_WORD *)*v15 + 6) == 5 || *((_WORD *)*v15 + 6) == 46 )
    {
LABEL_100:
      if ( *(_QWORD *)(a1 + 56) == 4241280207i64 )
        v38 |= 0x10u;
      goto LABEL_102;
    }
    v38 |= 8u;
  }
  if ( v14 == 1 )
    goto LABEL_100;
LABEL_102:
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
  {
    if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800) != 0 )
    {
      if ( *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        v41 = Dbg_NodeName(a4);
        WPP_SF_dqDs(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x2Bu,
          (__int64)&WPP_95413813eca334a66ae97b50395580a7_Traceguids,
          v20,
          v54,
          v38,
          (__int64)v41);
      }
      v18 = 0i64;
    }
    v14 = a3;
  }
  v48 = RR_CacheSetAtNode(v54, a4, (__int64)*a5, a5[1], a6, a7, v38, a10, a11, a12, a13, a14);
  if ( v48 )
  {
    if ( v14 == 2 && v20 == 2 && (*(_BYTE *)(v54 + 6307) & 0xF) == 0 && !*(_WORD *)(v54 + 6310) )
    {
      v42 = *(_QWORD *)(a1 + 1264);
      if ( v42 )
      {
        v43 = *(_QWORD *)(v42 + 1528);
        if ( v43 )
        {
          v44 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x100000) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
          {
            if ( a4 )
            {
              v45 = (const char *)FormatLabelA(*(unsigned __int8 *)(a4 + 101), (const void *)(a4 + 102));
              v44 = WPP_GLOBAL_Control;
            }
            else
            {
              v45 = 0i64;
            }
            WPP_SF_sqq(*((_QWORD *)v44 + 7), 0x2Cu, (__int64)&WPP_95413813eca334a66ae97b50395580a7_Traceguids, v45);
          }
          if ( a4 )
            *(_BYTE *)(a4 + 98) = CurrentTimeoutBin;
          *(_QWORD *)(v43 + 1520) = a4;
        }
      }
    }
  }
  else if ( v20 == 5 && *(_BYTE *)(v54 + 1448) )
  {
    *(_BYTE *)(v54 + 1448) = 0;
    if ( *(_QWORD *)(a1 + 192) != a4 )
      v37 = *(_BYTE *)(a1 + 1448);
    *(_BYTE *)(a1 + 1448) = v37;
  }
LABEL_130:
  RR_ListFree(v18);
  return v48;
}
// 140083884: variable 'v47' is possibly undefined
// 1401BA4B8: using guessed type char CurrentTimeoutBin;
##############################
Role: Let's assume that you are an advanced reverse engineer and you are reverse engineering a network driver using IDA Pro, and you are also familiar with the RFC documentation. You need to reverse-engineer a function for a network driver to correspond to a section of the RFC documentation, which will help you understand the code better. The driver you're reversing is Schannel.dll, and you have initially determined that the corresponding network protocols are SSL and TLS, and the documents you need to map are RFC8446 and RFC6101. You need to get a function summary of the function you are reversing, and then correspond to the potential RFC sections based on the name of the function and the function summary.
Function Background: The function is reverse engineered from the driver file Schannel.dll on Windows platform. Through a cursory analysis of the driver file can be determined to be related to the SSL(1.3), TLS(3.0) protocol, that is, with RFC8446, RFC6101 strong correlation.

Output Function Summary: Summarizes the function's functionality with several phrases instead of sentences, focuses on covering the function's control flow information, and highlights the protocol function points implemented by the function. Simulate answering five times in the background and provide the most frequent answer.

Retrieve document sections: giving matches for document sections(FunctionMatchRFCResult) that the code may related to. NOTE if the code is only business related(i.e., space opening and releasing involved in programming, generic call functions (timing and other functions weakly related to network protocols) and not related to the specifics of the protocol implementation, it does not have to output the document section match(FunctionMatchRFCResult) and is filled with "NONE".

Retrieve document sections Thinking Chain: The function code is matched with the RFC document section, and the thinking chain is provided to help you solve the problem better:
	1. Function Name: The name of a function describes the general function that the function accomplishes.
	2. Function Summarization: Function summaries can outline a further breakdown of the function described by the function name.
	3. Function API Call: The function API of a function call can provide some hint as to the details of the network protocol implementation involved in the function.
	4. Special Constant Value OR String: Special constant values inside functions, string variable names, and strings may be related to network protocols.
	5. Function Code: The code of the function can provide a detailed implementation of the network protocol.
Generate Function Information Collection with JSON Format:

{
	"FunctionIndex": "(FILL WITH "File count" with less than four bits are indexed with zeros to make up the four bits.)",
	"FunctionName": "(Full Function Code Name)",
	"FunctionSummarization": [
		"(Function Summary Phrase1)",
		"(Function Summary Phrase2)",
		"(...)"
	],
	"FunctionMatchRFCResult": [
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 1)",
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 2)",
		"(...)"
	],
}

ATTENTION: Remember YOU MUST ONLY output the Function Information Collection result.
