Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 1934
// Total lines: 552

//----- (00000001400EB190) ----------------------------------------------------
__int64 __fastcall DnsOls_RefreshDnsKeyPairObject(WCHAR *a1, struct _dnsskd *a2, struct _dnsskdkey *a3, int a4)
{
  WCHAR *v6; // rdi
  unsigned int v7; // r14d
  LDAP *v8; // rbx
  __int64 v9; // rbx
  __int16 v10; // r8
  int v11; // ecx
  int v12; // edx
  __int16 v13; // ax
  char *v14; // rax
  CDnsClientSubnetRecordsTrie *v15; // rcx
  char *v16; // rax
  __int64 v17; // rdx
  __int64 v18; // r8
  char *v19; // rax
  char *v20; // rax
  const wchar_t *v21; // rcx
  __int64 v22; // rbx
  int v23; // eax
  int v24; // r9d
  ULONG v25; // ebx
  struct berval **values_lenW; // rax
  struct berval **v27; // r14
  __int64 v28; // rbx
  struct berval **v29; // rcx
  struct berval *v30; // rcx
  struct DnsSign::CDnsKeyPair *KeyPair; // rbx
  unsigned __int16 v32; // dx
  char *v33; // rax
  __int64 v34; // r8
  const wchar_t *v35; // rcx
  char *v36; // rax
  __int64 v37; // r8
  void **v38; // rax
  const unsigned __int16 *v39; // r9
  void **v40; // rcx
  char *v41; // rdx
  unsigned __int64 v42; // r8
  const unsigned __int16 *v43; // r8
  __int16 v44; // cx
  __int16 v45; // ax
  DnsSign::CDnsKeyPair *v46; // rcx
  char *v47; // rax
  __int64 v48; // rdx
  __int64 v49; // r8
  __int16 v51; // [rsp+60h] [rbp-168h]
  struct DnsSign::CDnsKeyPair *v52; // [rsp+68h] [rbp-160h] BYREF
  LDAP *ld; // [rsp+70h] [rbp-158h] BYREF
  HCERTSTORE hCertStore; // [rsp+78h] [rbp-150h] BYREF
  struct berval **vals; // [rsp+80h] [rbp-148h]
  PLDAPMessage Message; // [rsp+88h] [rbp-140h] BYREF
  int v57; // [rsp+90h] [rbp-138h]
  int v58; // [rsp+94h] [rbp-134h]
  int v59; // [rsp+98h] [rbp-130h]
  PWSTR attr[5]; // [rsp+A0h] [rbp-128h] BYREF
  __int64 v61[3]; // [rsp+C8h] [rbp-100h] BYREF
  __int128 v62; // [rsp+E0h] [rbp-E8h] BYREF
  __int64 v63; // [rsp+F0h] [rbp-D8h]
  __int64 v64; // [rsp+100h] [rbp-C8h]
  __int128 v65; // [rsp+110h] [rbp-B8h] BYREF
  void *v66[2]; // [rsp+120h] [rbp-A8h] BYREF
  __int64 v67; // [rsp+130h] [rbp-98h]
  unsigned __int64 v68; // [rsp+138h] [rbp-90h]
  const void *v69[2]; // [rsp+148h] [rbp-80h] BYREF
  __int64 v70; // [rsp+158h] [rbp-70h]
  unsigned __int64 v71; // [rsp+160h] [rbp-68h]
  GUID pclsid; // [rsp+170h] [rbp-58h] BYREF

  v64 = -2i64;
  LODWORD(hCertStore) = a4;
  v6 = a1;
  *(_QWORD *)&v65 = a1;
  attr[3] = a1;
  attr[4] = (PWSTR)a2;
  *(_QWORD *)&pclsid.Data1 = a3;
  v7 = 0;
  v8 = pServerLdap;
  ld = pServerLdap;
  Message = 0i64;
  vals = 0i64;
  v52 = 0i64;
  if ( !*(_QWORD *)a3 )
  {
    DnsOls_DeleteSkdKeyPairObject((__int64)a3);
LABEL_137:
    v15 = WPP_GLOBAL_Control;
    goto LABEL_138;
  }
  if ( a4 )
  {
    v15 = WPP_GLOBAL_Control;
    goto LABEL_30;
  }
  v9 = *((_QWORD *)a3 + 1);
  if ( v9 )
  {
    attr[0] = *((PWSTR *)a3 + 1);
    v10 = *(_WORD *)(v9 + 18);
    v51 = v10;
    v11 = *((_DWORD *)a3 + 4);
    v57 = v11;
    v12 = 0;
    v13 = 0;
    if ( v11 == 5 )
      v13 = 128;
    LOBYTE(v12) = *((_DWORD *)a2 + 9) != 0;
    LOWORD(v12) = v13 | v12 | 0x100;
    v59 = v12;
    v58 = *(_DWORD *)v9;
    if ( v11 != v58 )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
      {
        v14 = Dbg_GuidString((const IID *)((char *)a2 + 8));
        WPP_SF_Sdd(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x19u,
          (__int64)&WPP_4a0a7bf065bf32df4bbeec8f9c7ea0c3_Traceguids,
          (const unsigned __int16 *)v14);
        LOWORD(v12) = v59;
        a4 = (int)hCertStore;
        v10 = v51;
      }
      *(_DWORD *)v9 = *((_DWORD *)a3 + 4);
    }
    attr[0] = 0i64;
    if ( v10 == (_WORD)v12 )
    {
      v15 = WPP_GLOBAL_Control;
    }
    else
    {
      v15 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
      {
        v16 = Dbg_GuidString((const IID *)((char *)a2 + 8));
        WPP_SF_SDD(*((_QWORD *)WPP_GLOBAL_Control + 7), v17, v18, (const unsigned __int16 *)v16);
        v15 = WPP_GLOBAL_Control;
        v6 = (WCHAR *)v65;
      }
      a4 = 1;
    }
    if ( a4 )
      goto LABEL_29;
  }
  else
  {
    v15 = WPP_GLOBAL_Control;
  }
  if ( !*((_QWORD *)a3 + 1) )
  {
LABEL_29:
    v8 = ld;
LABEL_30:
    if ( v15 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)v15 + 17) & 0x200000) != 0
      && *((_BYTE *)v15 + 65) >= 5u )
    {
      v20 = Dbg_GuidString((const IID *)((char *)a2 + 8));
      WPP_SF_sSS(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x1Cu,
        (__int64)&WPP_4a0a7bf065bf32df4bbeec8f9c7ea0c3_Traceguids,
        *((const char **)v6 + 2),
        (__int64)v20,
        *(_QWORD *)a3);
    }
    DnsOls_DeleteSkdKeyPairObject((__int64)a3);
    if ( !*((_DWORD *)a2 + 8) )
      goto LABEL_85;
    if ( !v8 )
    {
      v7 = 9717;
      goto LABEL_137;
    }
    if ( *((_DWORD *)a2 + 8) )
    {
      v21 = (const wchar_t *)*((_QWORD *)a2 + 3);
      if ( !v21 || _wcsicmp(v21, L"Microsoft Software Key Storage Provider") )
      {
        v7 = DnsOls_OpenKey((struct _zone_info *)v6, a2, (const unsigned __int16 **)a3, &v52);
        if ( v7 )
        {
          v15 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) == 0
            || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
          {
            goto LABEL_49;
          }
          v33 = Dbg_GuidString((const IID *)((char *)a2 + 8));
          WPP_SF_SSs(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x22u,
            v34,
            *(const unsigned __int16 **)a3,
            (__int64)v33,
            *((_QWORD *)v6 + 2));
          goto LABEL_48;
        }
      }
      else
      {
        v22 = *(_QWORD *)a3;
        v23 = CLSIDFromString(*(LPCOLESTR *)a3, &pclsid);
        if ( v23 )
          v24 = GuidFromString(v22, v23);
        else
          v24 = 0;
        if ( v24 )
        {
          v15 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) == 0
            || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
          {
            goto LABEL_49;
          }
          WPP_SF_DS(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x1Du,
            (__int64)&WPP_4a0a7bf065bf32df4bbeec8f9c7ea0c3_Traceguids,
            v24,
            *(_QWORD *)a3);
LABEL_48:
          v15 = WPP_GLOBAL_Control;
LABEL_49:
          v7 = 9107;
          goto LABEL_138;
        }
        attr[0] = off_1401B6CF0[0];
        attr[1] = 0i64;
        v25 = ldap_search_ext_sW(
                ld,
                *((const PWSTR *)v6 + 105),
                0,
                g_szWildCardFilter,
                attr,
                0,
                0i64,
                0i64,
                &g_LdapTimeout,
                0,
                &Message);
        if ( v25 )
        {
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
          {
            WPP_SF_DSS(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x1Eu,
              (__int64)&WPP_4a0a7bf065bf32df4bbeec8f9c7ea0c3_Traceguids,
              v25,
              (__int64)attr[0],
              *((_QWORD *)v6 + 105));
          }
          v7 = Ds_ErrorHandler(v25, *((_QWORD *)v6 + 105), ld, 1);
          goto LABEL_137;
        }
        values_lenW = ldap_get_values_lenW(ld, Message, attr[0]);
        v27 = values_lenW;
        vals = values_lenW;
        if ( !values_lenW || !*values_lenW )
        {
          v15 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) == 0
            || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
          {
            goto LABEL_79;
          }
          WPP_SF_SS(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x1Fu,
            (__int64)&WPP_4a0a7bf065bf32df4bbeec8f9c7ea0c3_Traceguids,
            attr[0],
            *((_QWORD *)v6 + 105));
          goto LABEL_78;
        }
        v28 = 0i64;
        v29 = values_lenW;
        while ( 1 )
        {
          v30 = *v29;
          if ( v30->bv_len >= 0x10 )
          {
            v65 = *(_OWORD *)v30->bv_val;
            if ( v65 == *(_OWORD *)&pclsid )
              break;
          }
          v29 = &values_lenW[++v28];
          if ( !*v29 )
          {
            v15 = WPP_GLOBAL_Control;
            if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
              && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
            {
              v32 = 32;
              goto LABEL_73;
            }
            goto LABEL_79;
          }
        }
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          WPP_SF_D(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x21u,
            (__int64)&WPP_4a0a7bf065bf32df4bbeec8f9c7ea0c3_Traceguids,
            v28);
        }
        v7 = DnsOls_ImportKey(
               (__int64)v6,
               (__int64)a2,
               (__int64 *)a3,
               (__int64)v27[v28]->bv_val,
               v27[v28]->bv_len,
               (__int64 *)&v52);
        if ( v7 )
          goto LABEL_134;
      }
      KeyPair = v52;
    }
    else
    {
LABEL_85:
      v71 = 7i64;
      v70 = 0i64;
      LOWORD(v69[0]) = 0;
      v68 = 7i64;
      v67 = 0i64;
      LOWORD(v66[0]) = 0;
      if ( (unsigned int)crackKeyPointerString(*(char **)a3, (char *)v69, v66)
        || (v35 = (const wchar_t *)*((_QWORD *)a2 + 3)) != 0i64
        && !_wcsicmp(v35, L"Microsoft Software Key Storage Provider") )
      {
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          v38 = v66;
          if ( v68 >= 8 )
            v38 = (void **)v66[0];
          v39 = (const unsigned __int16 *)v69;
          if ( v71 >= 8 )
            v39 = (const unsigned __int16 *)v69[0];
          WPP_SF_SS(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x23u,
            (__int64)&WPP_4a0a7bf065bf32df4bbeec8f9c7ea0c3_Traceguids,
            v39,
            (__int64)v38);
        }
        memset(v61, 0, sizeof(v61));
        v62 = 0i64;
        v63 = 0i64;
        v40 = v66;
        if ( v68 >= 8 )
          v40 = (void **)v66[0];
        DnsSign::ParseHexIntegerString(v40, (__int64 *)&v62);
        *(_QWORD *)&v65 = L"MS-DNSSEC";
        BYTE8(v65) = 1;
        hCertStore = 0i64;
        DnsSign::CCertificateStore::OpenStore(&hCertStore, (const struct DnsSign::CertificateStoreSpec *)&v65, 49152);
        ld = 0i64;
        DnsSign::CCertificateStore::SelectSingleCertificate(
          &hCertStore,
          (const struct DnsSign::CertificateStoreSpec *)&v65,
          (const struct DnsSign::CertificateSelectionSpec *)v61,
          (PCCERT_CONTEXT *)&ld);
        KeyPair = DnsSign::CCertificate::GetKeyPair((PCCERT_CONTEXT *)&ld);
        v52 = KeyPair;
        if ( ld )
          CertFreeCertificateContext((PCCERT_CONTEXT)ld);
        if ( hCertStore )
          CertCloseStore(hCertStore, 0);
        if ( (_QWORD)v62 )
          operator delete((void *)v62);
      }
      else
      {
        v7 = DnsOls_OpenKey((struct _zone_info *)v6, a2, (const unsigned __int16 **)a3, &v52);
        if ( v7 )
        {
          v15 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
          {
            v36 = Dbg_GuidString((const IID *)((char *)a2 + 8));
            WPP_SF_SSs(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x24u,
              v37,
              *(const unsigned __int16 **)a3,
              (__int64)v36,
              *((_QWORD *)v6 + 2));
            v15 = WPP_GLOBAL_Control;
          }
          v7 = 9107;
          if ( v68 >= 8 )
          {
            operator delete(v66[0]);
            v15 = WPP_GLOBAL_Control;
          }
          v68 = 7i64;
          v67 = 0i64;
          LOWORD(v66[0]) = 0;
          if ( v71 >= 8 )
          {
            operator delete((void *)v69[0]);
            goto LABEL_137;
          }
          goto LABEL_138;
        }
        KeyPair = v52;
      }
      if ( v68 >= 8 )
        operator delete(v66[0]);
      v68 = 7i64;
      v67 = 0i64;
      LOWORD(v66[0]) = 0;
      if ( v71 >= 8 )
        operator delete((void *)v69[0]);
    }
    if ( KeyPair )
    {
      *(_QWORD *)&v65 = KeyPair;
      DnsSign::CDnsKeyPair::SetAlgorithm(KeyPair, *((_BYTE *)a2 + 40));
      *((_DWORD *)KeyPair + 3) = *((_DWORD *)a2 + 11);
      v41 = (char *)*((_QWORD *)v6 + 3);
      v71 = 7i64;
      v70 = 0i64;
      LOWORD(v69[0]) = 0;
      v42 = -1i64;
      do
        ++v42;
      while ( *(_WORD *)&v41[2 * v42] );
      std::wstring::assign((char *)v69, v41, v42);
      DnsSign::CDnsKeyPair::SetZoneName((const void **)KeyPair, v69, v43);
      if ( v71 >= 8 )
        operator delete((void *)v69[0]);
      HIBYTE(v44) = 0;
      v45 = 0;
      if ( *((_DWORD *)a3 + 4) == 5 )
        v45 = 128;
      LOBYTE(v44) = *((_DWORD *)a2 + 9) != 0;
      *((_WORD *)KeyPair + 9) = v45 | v44 | 0x100;
      *((_BYTE *)KeyPair + 16) = 1;
      *(_DWORD *)KeyPair = *((_DWORD *)a3 + 4);
      *((_DWORD *)KeyPair + 42) = *((_DWORD *)v6 + 266);
      *((_DWORD *)KeyPair + 43) = *((_DWORD *)a2 + 13);
      *((_DWORD *)KeyPair + 44) = *((_DWORD *)a2 + 14);
      *((_DWORD *)KeyPair + 45) = *((_DWORD *)a2 + 15);
      if ( dword_1401B99F8 )
      {
        *((_DWORD *)KeyPair + 43) /= 0x168u;
        *((_DWORD *)KeyPair + 44) /= 0x168u;
        *((_DWORD *)KeyPair + 45) /= 0x168u;
      }
      v46 = (DnsSign::CDnsKeyPair *)*((_QWORD *)a3 + 1);
      if ( v46 )
        DnsSign::CDnsKeyPair::`scalar deleting destructor'(v46);
      *((_QWORD *)a3 + 1) = KeyPair;
LABEL_134:
      v15 = WPP_GLOBAL_Control;
      goto LABEL_135;
    }
    v15 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
    {
LABEL_79:
      v7 = 9107;
LABEL_135:
      if ( !vals )
        goto LABEL_138;
      ldap_value_free_len(vals);
      goto LABEL_137;
    }
    v32 = 37;
LABEL_73:
    WPP_SF_S(
      *((_QWORD *)v15 + 7),
      v32,
      (__int64)&WPP_4a0a7bf065bf32df4bbeec8f9c7ea0c3_Traceguids,
      *(const unsigned __int16 **)a3);
LABEL_78:
    v15 = WPP_GLOBAL_Control;
    goto LABEL_79;
  }
  if ( v15 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)v15 + 17) & 0x200000) != 0
    && *((_BYTE *)v15 + 65) >= 5u )
  {
    v19 = Dbg_GuidString((const IID *)((char *)a2 + 8));
    WPP_SF_sSS(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x1Bu,
      (__int64)&WPP_4a0a7bf065bf32df4bbeec8f9c7ea0c3_Traceguids,
      *((const char **)v6 + 2),
      (__int64)v19,
      *(_QWORD *)a3);
    goto LABEL_137;
  }
LABEL_138:
  if ( Message )
  {
    ldap_msgfree(Message);
    v15 = WPP_GLOBAL_Control;
  }
  if ( v15 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)v15 + 17) & 0x200000) != 0
    && *((_BYTE *)v15 + 65) >= 4u )
  {
    v47 = Dbg_GuidString((const IID *)((char *)a2 + 8));
    WPP_SF_DqsSS(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      v48,
      v49,
      v7,
      *((_QWORD *)a3 + 1),
      *((_QWORD *)v6 + 2),
      (__int64)v47,
      *(_QWORD *)a3);
  }
  return v7;
}
// 1400EB190: could not find valid save-restore pair for rbp
// 1400EB36A: variable 'v17' is possibly undefined
// 1400EB36A: variable 'v18' is possibly undefined
// 1400EB7FD: variable 'v34' is possibly undefined
// 1400EB8E0: variable 'v37' is possibly undefined
// 1400EBBD4: variable 'v43' is possibly undefined
// 1400EBD4A: variable 'v48' is possibly undefined
// 1400EBD4A: variable 'v49' is possibly undefined
// 140184CA8: using guessed type void __stdcall operator delete(void *);
// 140192B98: using guessed type wchar_t aMsDnssec[10];
// 1401B6CF0: using guessed type wchar_t *off_1401B6CF0[4];
// 1401B99F8: using guessed type int dword_1401B99F8;
##############################
Role: Let's assume that you are an advanced reverse engineer and you are reverse engineering a network driver using IDA Pro, and you are also familiar with the RFC documentation. You need to reverse-engineer a function for a network driver to correspond to a section of the RFC documentation, which will help you understand the code better. The driver you're reversing is Schannel.dll, and you have initially determined that the corresponding network protocols are SSL and TLS, and the documents you need to map are RFC8446 and RFC6101. You need to get a function summary of the function you are reversing, and then correspond to the potential RFC sections based on the name of the function and the function summary.
Function Background: The function is reverse engineered from the driver file Schannel.dll on Windows platform. Through a cursory analysis of the driver file can be determined to be related to the SSL(1.3), TLS(3.0) protocol, that is, with RFC8446, RFC6101 strong correlation.

Output Function Summary: Summarizes the function's functionality with several phrases instead of sentences, focuses on covering the function's control flow information, and highlights the protocol function points implemented by the function. Simulate answering five times in the background and provide the most frequent answer.

Retrieve document sections: giving matches for document sections(FunctionMatchRFCResult) that the code may related to. NOTE if the code is only business related(i.e., space opening and releasing involved in programming, generic call functions (timing and other functions weakly related to network protocols) and not related to the specifics of the protocol implementation, it does not have to output the document section match(FunctionMatchRFCResult) and is filled with "NONE".

Retrieve document sections Thinking Chain: The function code is matched with the RFC document section, and the thinking chain is provided to help you solve the problem better:
	1. Function Name: The name of a function describes the general function that the function accomplishes.
	2. Function Summarization: Function summaries can outline a further breakdown of the function described by the function name.
	3. Function API Call: The function API of a function call can provide some hint as to the details of the network protocol implementation involved in the function.
	4. Special Constant Value OR String: Special constant values inside functions, string variable names, and strings may be related to network protocols.
	5. Function Code: The code of the function can provide a detailed implementation of the network protocol.
Generate Function Information Collection with JSON Format:

{
	"FunctionIndex": "(FILL WITH "File count" with less than four bits are indexed with zeros to make up the four bits.)",
	"FunctionName": "(Full Function Code Name)",
	"FunctionSummarization": [
		"(Function Summary Phrase1)",
		"(Function Summary Phrase2)",
		"(...)"
	],
	"FunctionMatchRFCResult": [
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 1)",
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 2)",
		"(...)"
	],
}

ATTENTION: Remember YOU MUST ONLY output the Function Information Collection result.
