Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 2679
// Total lines: 439

//----- (000000014013F11C) ----------------------------------------------------
__int64 __fastcall UpdateRPCPolicy(__int64 a1, __int64 a2, _QWORD *a3)
{
  __int64 v3; // rbp
  unsigned int v4; // r12d
  int v7; // edi
  _DWORD *v8; // rdx
  unsigned int updated; // ebx
  unsigned int i; // r10d
  unsigned int v11; // ecx
  _DWORD *v12; // r9
  unsigned int v13; // ecx
  _DWORD *v14; // r8
  int v15; // r9d
  _DWORD *v16; // r8
  _QWORD *zero; // rax
  _QWORD *v18; // r14
  void *v20; // rax
  CDnsClientSubnetRecordsTrie *v21; // rcx
  unsigned __int16 v22; // dx
  char *v23; // rcx
  void *v24; // rax
  int v25; // eax
  int v26; // eax
  int v27; // eax
  unsigned int *v28; // r13
  unsigned int *v29; // rdx
  unsigned int v30; // r8d
  __int64 v31; // rcx
  char **v32; // rax
  _DWORD *v33; // rax
  unsigned int v34; // edx
  __int64 v35; // rcx
  __int64 v36; // rbx
  _DWORD *v37; // rax
  unsigned __int16 v38; // dx
  unsigned __int16 v39; // dx
  CDnsClientSubnetRecordsTrie *v40; // rcx
  unsigned __int16 v41; // dx
  char **v42; // [rsp+30h] [rbp-48h]
  unsigned int *v43; // [rsp+38h] [rbp-40h]
  unsigned int v45; // [rsp+98h] [rbp+20h]
  unsigned int v46; // [rsp+98h] [rbp+20h]

  v3 = *(_QWORD *)(a1 + 48);
  v4 = 0;
  v7 = 0;
  v8 = &unk_1401B8454;
  updated = 0;
  for ( i = 0; i < 7; ++i )
  {
    v11 = 0;
    if ( (*(v8 - 1) & (unsigned int)v3) != 0 )
    {
      if ( *(_DWORD *)(a1 + 56) )
      {
        while ( 1 )
        {
          v12 = *(_DWORD **)(a1 + 8i64 * v11 + 64);
          if ( *v12 == *v8 )
            break;
          if ( ++v11 >= *(_DWORD *)(a1 + 56) )
            goto LABEL_6;
        }
      }
      else
      {
LABEL_6:
        v12 = 0i64;
      }
      v13 = 0;
      if ( *(_DWORD *)(a2 + 56) )
      {
        while ( 1 )
        {
          v14 = *(_DWORD **)(a2 + 8i64 * v13 + 64);
          if ( *v14 == *v8 )
            break;
          if ( ++v13 >= *(_DWORD *)(a2 + 56) )
            goto LABEL_10;
        }
      }
      else
      {
LABEL_10:
        v14 = 0i64;
      }
      if ( !v12 && !v14 )
      {
        v15 = *((_DWORD *)&g_CriteriaMatch + 2 * i + 1);
        if ( v15 )
        {
          switch ( v15 )
          {
            case 1:
              updated = 9991;
              break;
            case 2:
              updated = 9992;
              break;
            case 3:
              updated = 9993;
              break;
            case 4:
              updated = 9994;
              break;
            case 5:
              updated = 9995;
              break;
            case 6:
              updated = 9996;
              break;
          }
        }
        else
        {
          updated = 9990;
        }
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
        {
          WPP_SF_D(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x48u,
            (__int64)&WPP_7bc0de5581043365e853c04d44d2eaeb_Traceguids,
            v15);
        }
        return updated;
      }
    }
    else
    {
      if ( *(_DWORD *)(a2 + 56) )
      {
        while ( 1 )
        {
          v16 = *(_DWORD **)(a2 + 8i64 * v11 + 64);
          if ( *v16 == *v8 )
            break;
          if ( ++v11 >= *(_DWORD *)(a2 + 56) )
            goto LABEL_18;
        }
      }
      else
      {
LABEL_18:
        v16 = 0i64;
      }
      if ( v16 )
        ++v7;
    }
    v8 += 2;
  }
  zero = MIDL_user_allocate_zero(8i64 * (unsigned int)(v7 + *(_DWORD *)(a1 + 56)) + 72);
  v18 = zero;
  if ( zero )
  {
    memset_0(zero, 0, 8i64 * (unsigned int)(v7 + *(_DWORD *)(a1 + 56)) + 72);
    v20 = Dns_StringCopyAllocate(*(char **)a2, 0, 1i64, 1);
    *v18 = v20;
    if ( !v20 )
    {
      v21 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        v22 = 74;
        goto LABEL_50;
      }
      goto LABEL_51;
    }
    v23 = *(char **)(a2 + 32);
    if ( v23 )
    {
      v24 = Dns_StringCopyAllocate(v23, 0, 2i64, 2);
      v18[4] = v24;
      if ( !v24 )
      {
        v21 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
        {
          v22 = 75;
          goto LABEL_50;
        }
        goto LABEL_51;
      }
    }
    *((_DWORD *)v18 + 2) = *(_DWORD *)(a2 + 8);
    *((_DWORD *)v18 + 3) = *(_DWORD *)(a2 + 12);
    *((_DWORD *)v18 + 4) = *(_DWORD *)(a2 + 16);
    v18[6] = *(_QWORD *)(a1 + 48);
    if ( (*(_DWORD *)(a1 + 48) & 0x10000) != 0 )
      v25 = *(_DWORD *)(a1 + 20);
    else
      v25 = *(_DWORD *)(a2 + 20);
    *((_DWORD *)v18 + 5) = v25;
    if ( (*(_DWORD *)(a1 + 48) & 0x20000) != 0 )
      v26 = *(_DWORD *)(a1 + 28);
    else
      v26 = *(_DWORD *)(a2 + 28);
    *((_DWORD *)v18 + 7) = v26;
    if ( (*(_DWORD *)(a1 + 48) & 0x80000) != 0 )
      v27 = *(_DWORD *)(a1 + 24);
    else
      v27 = *(_DWORD *)(a2 + 24);
    v28 = (unsigned int *)&g_CriteriaMatch;
    *((_DWORD *)v18 + 6) = v27;
    v29 = (unsigned int *)&g_CriteriaMatch;
    v30 = 0;
    v43 = (unsigned int *)&g_CriteriaMatch;
    v45 = 0;
    do
    {
      if ( (*v29 & *(_QWORD *)(a1 + 48)) != 0i64 )
      {
        v31 = 0i64;
        if ( *(_DWORD *)(a1 + 56) )
        {
          while ( 1 )
          {
            v32 = *(char ***)(a1 + 8 * v31 + 64);
            v42 = v32;
            if ( *(_DWORD *)v32 == v29[1] )
              break;
            v31 = (unsigned int)(v31 + 1);
            if ( (unsigned int)v31 >= *(_DWORD *)(a1 + 56) )
              goto LABEL_72;
          }
        }
        else
        {
LABEL_72:
          v32 = 0i64;
          v42 = 0i64;
        }
        if ( v32 )
        {
          v33 = MIDL_user_allocate_zero(0x10ui64);
          v18[v4 + 8] = v33;
          if ( !v33 )
          {
            v21 = WPP_GLOBAL_Control;
            if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
            {
              if ( (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0 && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
              {
                v39 = 76;
LABEL_103:
                WPP_SF_(*((_QWORD *)v21 + 7), v39, (__int64)&WPP_7bc0de5581043365e853c04d44d2eaeb_Traceguids);
LABEL_122:
                v21 = WPP_GLOBAL_Control;
              }
              goto LABEL_123;
            }
            goto LABEL_127;
          }
          *v33 = *(_DWORD *)v42;
          *(_QWORD *)(v18[v4 + 8] + 8i64) = Dns_StringCopyAllocate(v42[1], 0, 1i64, 1);
          if ( !*(_QWORD *)(v18[v4 + 8] + 8i64) )
          {
            v21 = WPP_GLOBAL_Control;
            if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
              && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
            {
              v22 = 77;
LABEL_50:
              WPP_SF_(*((_QWORD *)v21 + 7), v22, (__int64)&WPP_7bc0de5581043365e853c04d44d2eaeb_Traceguids);
              v21 = WPP_GLOBAL_Control;
            }
LABEL_51:
            updated = 14;
            goto LABEL_123;
          }
          v29 = v43;
          ++v4;
          v30 = v45;
        }
      }
      ++v30;
      v29 += 2;
      v45 = v30;
      v43 = v29;
    }
    while ( v30 < 7 );
    v34 = 0;
    v46 = 0;
    do
    {
      if ( (*v28 & *(_QWORD *)(a1 + 48)) == 0i64 )
      {
        v35 = 0i64;
        if ( *(_DWORD *)(a2 + 56) )
        {
          while ( 1 )
          {
            v36 = *(_QWORD *)(a2 + 8 * v35 + 64);
            if ( *(_DWORD *)v36 == v28[1] )
              break;
            v35 = (unsigned int)(v35 + 1);
            if ( (unsigned int)v35 >= *(_DWORD *)(a2 + 56) )
              goto LABEL_83;
          }
        }
        else
        {
LABEL_83:
          v36 = 0i64;
        }
        if ( v36 )
        {
          v37 = MIDL_user_allocate_zero(0x10ui64);
          v18[v4 + 8] = v37;
          if ( !v37 )
          {
            updated = 14;
            v21 = WPP_GLOBAL_Control;
            if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
              goto LABEL_127;
            if ( (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0 && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
            {
              v39 = 78;
              goto LABEL_103;
            }
            goto LABEL_123;
          }
          *v37 = *(_DWORD *)v36;
          *(_QWORD *)(v18[v4 + 8] + 8i64) = Dns_StringCopyAllocate(*(char **)(v36 + 8), 0, 1i64, 1);
          if ( !*(_QWORD *)(v18[v4 + 8] + 8i64) )
          {
            v21 = WPP_GLOBAL_Control;
            if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
              && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
            {
              v22 = 79;
              goto LABEL_50;
            }
            goto LABEL_51;
          }
          v34 = v46;
          ++v4;
        }
      }
      ++v34;
      v28 += 2;
      v46 = v34;
    }
    while ( v34 < 7 );
    *((_DWORD *)v18 + 14) = v4;
    if ( (*(_DWORD *)(a1 + 48) & 0x40000) != 0 )
    {
      updated = UpdateContent((__int64)v18, a1);
      if ( updated )
      {
        v21 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
          goto LABEL_127;
        if ( (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0 && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
        {
          v38 = 80;
LABEL_121:
          WPP_SF_SD(
            *((_QWORD *)v21 + 7),
            v38,
            (__int64)&WPP_7bc0de5581043365e853c04d44d2eaeb_Traceguids,
            *(const unsigned __int16 **)a2);
          goto LABEL_122;
        }
        goto LABEL_123;
      }
      v40 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        v41 = 81;
        goto LABEL_132;
      }
      goto LABEL_133;
    }
    updated = UpdateContent((__int64)v18, a2);
    if ( !updated )
    {
      v40 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        v41 = 83;
LABEL_132:
        WPP_SF_SD(
          *((_QWORD *)v40 + 7),
          v41,
          (__int64)&WPP_7bc0de5581043365e853c04d44d2eaeb_Traceguids,
          *(const unsigned __int16 **)a2);
        v40 = WPP_GLOBAL_Control;
      }
LABEL_133:
      *a3 = v18;
      if ( v40 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)v40 + 68) & 2) != 0
        && *((_BYTE *)v40 + 65) >= 4u )
      {
        WPP_SF_(*((_QWORD *)v40 + 7), 0x54u, (__int64)&WPP_7bc0de5581043365e853c04d44d2eaeb_Traceguids);
      }
      return 0i64;
    }
    v21 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
      goto LABEL_127;
    if ( (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0 && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      v38 = 82;
      goto LABEL_121;
    }
LABEL_123:
    if ( v21 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)v21 + 68) & 2) != 0
      && *((_BYTE *)v21 + 65) >= 4u )
    {
      WPP_SF_D(*((_QWORD *)v21 + 7), 0x55u, (__int64)&WPP_7bc0de5581043365e853c04d44d2eaeb_Traceguids, updated);
    }
LABEL_127:
    Free_RpcPolicy(v18);
    return updated;
  }
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
  {
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x49u, (__int64)&WPP_7bc0de5581043365e853c04d44d2eaeb_Traceguids);
  }
  return 14i64;
}
