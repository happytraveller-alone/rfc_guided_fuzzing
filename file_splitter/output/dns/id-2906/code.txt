Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 2906
// Total lines: 346

//----- (000000014015118C) ----------------------------------------------------
__int64 __fastcall Dns_ValidateRRset(
        unsigned __int8 *a1,
        __int64 a2,
        unsigned __int8 *a3,
        u_short a4,
        __int64 a5,
        __int64 a6,
        unsigned int a7,
        _DWORD *a8,
        _DWORD *a9,
        __int64 *a10,
        __int64 *a11,
        int *a12)
{
  int v12; // esi
  __int64 v13; // rdi
  __int64 v14; // r15
  u_short v15; // bx
  __int64 v16; // r14
  __int64 v17; // r8
  __int64 v18; // r13
  CDnsClientSubnetRecordsTrie *v19; // r10
  __int64 v20; // rsi
  unsigned int v21; // r14d
  char *v22; // rbx
  char *v23; // rax
  unsigned __int8 v24; // cl
  __time32_t v25; // r12d
  __int64 v26; // rdx
  __int64 v27; // r8
  __int64 v28; // rax
  u_short v29; // r12
  char v30; // si
  char v31; // al
  unsigned __int16 v32; // dx
  int v33; // ebx
  __int64 v34; // rdx
  __int64 v36; // [rsp+20h] [rbp-58h]
  __int64 v37; // [rsp+28h] [rbp-50h]
  __int64 v38; // [rsp+30h] [rbp-48h]
  char v39; // [rsp+50h] [rbp-28h]
  char v40; // [rsp+51h] [rbp-27h]
  char v41; // [rsp+52h] [rbp-26h]
  int v42; // [rsp+54h] [rbp-24h] BYREF
  __time32_t v43; // [rsp+58h] [rbp-20h]
  int v44; // [rsp+5Ch] [rbp-1Ch] BYREF
  int v45[6]; // [rsp+60h] [rbp-18h] BYREF

  v12 = 0;
  v44 = 0;
  v45[0] = 0;
  LOBYTE(a7) = (a7 & 1) == 0;
  v13 = 0i64;
  v42 = 0;
  v14 = 0i64;
  v39 = 0;
  v40 = 0;
  v41 = 0;
  v15 = a4;
  if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    || (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) == 0 )
  {
    v16 = a5;
  }
  else
  {
    v16 = a5;
    if ( *((_BYTE *)WPP_GLOBAL_Control + 25) >= 4u )
      WPP_SF_Dqqq(*((_QWORD *)WPP_GLOBAL_Control + 2), a6, (__int64)a3, a4, a6, a2, a5);
  }
  v43 = _time32(0i64);
  v18 = a6;
  if ( !a6 )
    goto LABEL_85;
  do
  {
    if ( *(_WORD *)(v18 + 12) == v15 )
      break;
    v18 = *(_QWORD *)v18;
  }
  while ( v18 );
  if ( !v18 )
  {
LABEL_85:
    v19 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 25) >= 2u )
    {
      WPP_SF_D(
        *((_QWORD *)WPP_GLOBAL_Control + 2),
        0xDu,
        (__int64)&WPP_c53e2308f6cf3329db3757b8a77c9921_Traceguids,
        v15);
      v19 = WPP_GLOBAL_Control;
    }
    v21 = 2;
    goto LABEL_90;
  }
  v19 = WPP_GLOBAL_Control;
  v20 = v16;
  v21 = a7;
  while ( 1 )
  {
    v13 = v20;
    if ( v20 )
    {
      do
      {
        if ( *(_WORD *)(v13 + 12) == 46 && *(_WORD *)(v13 + 56) == htons(v15) )
          break;
        v13 = *(_QWORD *)v13;
      }
      while ( v13 );
      v19 = WPP_GLOBAL_Control;
    }
    if ( !v13 )
    {
      if ( v19 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)v19 + 28) & 1) != 0
        && *((_BYTE *)v19 + 25) >= 4u )
      {
        WPP_SF_D(*((_QWORD *)v19 + 2), 0xEu, (__int64)&WPP_c53e2308f6cf3329db3757b8a77c9921_Traceguids, v15);
        v19 = WPP_GLOBAL_Control;
      }
LABEL_80:
      if ( v40 )
        goto LABEL_84;
      v12 = v42;
      if ( v41 )
        v21 = 5;
      else
        v21 = (v39 != 0) + 3;
      goto LABEL_90;
    }
    v39 = 1;
    if ( !(unsigned int)Name_CaseInsensitiveCompareCountNames((unsigned __int8 *)(v13 + 74), a1, 0i64) )
      break;
    v20 = *(_QWORD *)v13;
    v19 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 25) < 2u )
    {
      goto LABEL_70;
    }
    v22 = Dbg_CountName(a1);
    v23 = Dbg_CountName((unsigned __int8 *)(v13 + 74));
    WPP_SF_qss(
      *((_QWORD *)WPP_GLOBAL_Control + 2),
      0xFu,
      (__int64)&WPP_c53e2308f6cf3329db3757b8a77c9921_Traceguids,
      v13,
      v23,
      v22);
LABEL_22:
    v19 = WPP_GLOBAL_Control;
LABEL_70:
    v15 = a4;
    if ( !v20 )
      goto LABEL_80;
  }
  v24 = *(_BYTE *)(v13 + 59);
  if ( a3[1] < v24 )
  {
    v20 = *(_QWORD *)v13;
    v19 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 25) < 2u )
    {
      goto LABEL_70;
    }
    LODWORD(v37) = a3[1];
    LODWORD(v36) = v24;
    WPP_SF_qdD(
      *((_QWORD *)WPP_GLOBAL_Control + 2),
      0x10u,
      (__int64)&WPP_c53e2308f6cf3329db3757b8a77c9921_Traceguids,
      v13,
      v36,
      v37);
    goto LABEL_22;
  }
  v25 = v43;
  if ( !DnsVal_IsRRSigPeriodValid(v13, v43) )
  {
    v20 = *(_QWORD *)v13;
    v19 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 25) < 2u )
    {
      goto LABEL_70;
    }
    LODWORD(v38) = v25;
    LODWORD(v37) = ntohl(*(_DWORD *)(v13 + 64));
    LODWORD(v36) = ntohl(*(_DWORD *)(v13 + 68));
    WPP_SF_qLLL(*((_QWORD *)WPP_GLOBAL_Control + 2), v26, v27, v13, v36, v37, v38);
    goto LABEL_22;
  }
  v28 = a2;
  v19 = WPP_GLOBAL_Control;
  while ( 2 )
  {
    v29 = *(_WORD *)(v13 + 72);
    v14 = v28;
    v30 = *(_BYTE *)(v13 + 58);
    if ( !v28 )
      goto LABEL_51;
    v31 = a7;
    while ( 2 )
    {
      if ( *(_WORD *)(v14 + 12) != 48 )
      {
LABEL_46:
        if ( v31 )
          v14 = *(_QWORD *)v14;
        else
          v14 = 0i64;
        if ( !v14 )
          goto LABEL_50;
        continue;
      }
      break;
    }
    if ( (ntohs(*(_WORD *)(v14 + 56)) & 0x100) == 0
      || *(_BYTE *)(v14 + 58) != 3
      || *(_BYTE *)(v14 + 59) != v30
      || (*(_WORD *)(v14 + 12) != 48 || (v32 = *(_WORD *)(v14 + 14), v32 <= 4u)
        ? (v33 = 0)
        : (v33 = (unsigned __int16)RR_CalculateDnsKeyTagEx((unsigned __int8 *)(v14 + 56), v32)),
          ntohs(v29) != v33) )
    {
      v31 = a7;
      goto LABEL_46;
    }
LABEL_50:
    v19 = WPP_GLOBAL_Control;
    v15 = a4;
LABEL_51:
    if ( !v14 )
    {
      if ( v19 == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_BYTE *)v19 + 28) & 1) == 0
        || *((_BYTE *)v19 + 25) < 2u )
      {
        goto LABEL_69;
      }
      WPP_SF_q(*((_QWORD *)v19 + 2), 0x12u, (__int64)&WPP_c53e2308f6cf3329db3757b8a77c9921_Traceguids, v13);
      goto LABEL_68;
    }
    v41 = 1;
    if ( (int)DnsVal_GetAlgorithm(*(_BYTE *)(v13 + 58), 1, 0i64) < 0 )
    {
      v19 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 25) < 2u )
      {
        goto LABEL_69;
      }
      LODWORD(v36) = *(unsigned __int8 *)(v13 + 58);
      WPP_SF_qd(
        *((_QWORD *)WPP_GLOBAL_Control + 2),
        0x13u,
        (__int64)&WPP_c53e2308f6cf3329db3757b8a77c9921_Traceguids,
        v13,
        v36);
LABEL_68:
      v19 = WPP_GLOBAL_Control;
LABEL_69:
      v20 = *(_QWORD *)v13;
      goto LABEL_70;
    }
    v40 = 1;
    v21 = DnsVal_ValidateRRsetWithRRSIGandDNSKey(a3, v18, v13, v14, v43, &v44, v45, &v42);
    if ( v21 )
    {
      v19 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 25) >= 2u )
      {
        LODWORD(v38) = v15;
        LODWORD(v36) = v42;
        WPP_SF_DLqDqq(*((_QWORD *)WPP_GLOBAL_Control + 2), v34, v17, v21, v36, v18, v38, v13, v14);
        v19 = WPP_GLOBAL_Control;
      }
      v28 = *(_QWORD *)v14;
      if ( !*(_QWORD *)v14 )
        goto LABEL_69;
      continue;
    }
    break;
  }
  v19 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 25) >= 4u )
  {
    LODWORD(v36) = v15;
    WPP_SF_qDqq(*((_QWORD *)WPP_GLOBAL_Control + 2), (__int64)&WPP_GLOBAL_Control, v17, v18, v36, v13, v14);
    v19 = WPP_GLOBAL_Control;
    v12 = v42;
    goto LABEL_90;
  }
LABEL_84:
  v12 = v42;
LABEL_90:
  *a8 = v44;
  *a9 = v45[0];
  if ( a10 )
  {
    *a10 = v14;
    v19 = WPP_GLOBAL_Control;
  }
  if ( a11 )
  {
    *a11 = v13;
    v19 = WPP_GLOBAL_Control;
  }
  if ( a12 )
  {
    *a12 = v12;
    v19 = WPP_GLOBAL_Control;
  }
  if ( v19 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)v19 + 28) & 1) != 0
    && *((_BYTE *)v19 + 25) >= 4u )
  {
    LODWORD(v37) = v15;
    LODWORD(v36) = v12;
    WPP_SF_DLDqqq(*((_QWORD *)v19 + 2), a6, v17, v21, v36, v37, a6, a2, a5);
  }
  return v21;
}
// 140151391: variable 'v36' is possibly undefined
// 140151391: variable 'v37' is possibly undefined
// 14015140A: variable 'v26' is possibly undefined
// 14015140A: variable 'v27' is possibly undefined
// 14015140A: variable 'v38' is possibly undefined
// 14015155F: variable 'v34' is possibly undefined
// 14015155F: variable 'v17' is possibly undefined
// 14015118C: using guessed type int var_18[6];
