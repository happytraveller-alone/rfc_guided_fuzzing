Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 130
// Total lines: 360

//----- (00000001400117E4) ----------------------------------------------------
__int64 __fastcall SetupPolicyFromRegistry(HKEY hKey, unsigned __int16 *lpMultiByteStr, __int64 a3)
{
  unsigned int v6; // r13d
  unsigned int *v7; // rdi
  unsigned int DwordValue; // ebx
  CDnsClientSubnetRecordsTrie *v9; // rcx
  unsigned __int16 v10; // dx
  void *v11; // rax
  char *v12; // rcx
  CDnsClientSubnetRecordsTrie *v13; // rcx
  unsigned __int16 v14; // dx
  const char *v15; // rax
  unsigned int i; // esi
  _QWORD *v17; // r14
  const wchar_t *v18; // rbx
  LPBYTE v19; // rax
  LPBYTE v20; // rax
  wchar_t *v21; // r15
  __int16 v22; // r8
  __int64 v23; // r9
  unsigned __int64 v24; // rax
  size_t v25; // rcx
  _DWORD *v26; // rbp
  _QWORD *v27; // rsi
  wchar_t **v28; // r8
  char *v29; // r14
  wchar_t *v30; // rcx
  wchar_t *v31; // rax
  wchar_t **v32; // r8
  char *v33; // rax
  int v35; // [rsp+20h] [rbp-38h]

  v6 = 1;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_Sq(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x31u,
      (__int64)&WPP_7130a3a4d89e343b55addd3e43accbbd_Traceguids,
      lpMultiByteStr);
  }
  v7 = (unsigned int *)Mem_AllocZero(0x80ui64, 0i64, "ds\\dns\\server\\server\\boot.c", 2273);
  if ( v7 )
  {
    v11 = Dns_StringCopyAllocate((char *)lpMultiByteStr, 0, 1i64, 1);
    *(_QWORD *)v7 = v11;
    if ( v11 )
    {
      if ( a3 )
      {
        if ( *(_DWORD *)(a3 + 372) )
          v12 = *(char **)(a3 + 16);
        else
          v12 = "..Cache";
        *((_QWORD *)v7 + 4) = Dns_StringCopyAllocate(v12, 0, 2i64, 2);
      }
      else
      {
        *((_QWORD *)v7 + 4) = 0i64;
      }
      v7[2] = a3 != 0;
      DwordValue = Reg_ReadDwordValue(
                     hKey,
                     lpMultiByteStr,
                     (const unsigned __int16 *)"ProcessingOrder",
                     0,
                     (_BYTE *)v7 + 28);
      if ( DwordValue )
      {
        v13 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
          || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
        {
          return DwordValue;
        }
        v14 = 52;
        v15 = "ProcessingOrder";
      }
      else
      {
        DwordValue = Reg_ReadDwordValue(
                       hKey,
                       lpMultiByteStr,
                       (const unsigned __int16 *)"IsEnabled",
                       0,
                       (_BYTE *)v7 + 24);
        if ( DwordValue )
        {
          v13 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
            || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
          {
            return DwordValue;
          }
          v14 = 53;
          v15 = "IsEnabled";
        }
        else
        {
          DwordValue = Reg_ReadDwordValue(
                         hKey,
                         lpMultiByteStr,
                         (const unsigned __int16 *)"AppliesOn",
                         0,
                         (_BYTE *)v7 + 12);
          if ( DwordValue )
          {
            v13 = WPP_GLOBAL_Control;
            if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
              || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
            {
              return DwordValue;
            }
            v14 = 54;
            v15 = "AppliesOn";
          }
          else
          {
            DwordValue = Reg_ReadDwordValue(
                           hKey,
                           lpMultiByteStr,
                           (const unsigned __int16 *)"Condition",
                           0,
                           (_BYTE *)v7 + 20);
            if ( !DwordValue )
            {
              v7[14] = 0;
              for ( i = 0; i < 7; ++i )
              {
                v17 = Mem_AllocZero(0x10ui64, 0i64, "ds\\dns\\server\\server\\boot.c", 2364);
                if ( !v17 )
                  return 14;
                if ( i )
                {
                  switch ( i )
                  {
                    case 1u:
                      v18 = L"TransportProtocol";
                      break;
                    case 2u:
                      v18 = L"NetworkProtocol";
                      break;
                    case 3u:
                      v18 = L"InterfaceIP";
                      break;
                    case 4u:
                      v18 = L"FQDN";
                      break;
                    case 5u:
                      v18 = L"QType";
                      break;
                    default:
                      v18 = L"TimeOfDay";
                      break;
                  }
                }
                else
                {
                  v18 = L"ClientSubnet";
                }
                v19 = Reg_GetValueAllocate(hKey, 0i64, (const char *)v18, -268435455, 0i64);
                v17[1] = v19;
                if ( v19 )
                {
                  *(_DWORD *)v17 = i;
                  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
                    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
                  {
                    WPP_SF_sS(
                      *((_QWORD *)WPP_GLOBAL_Control + 7),
                      0x39u,
                      (__int64)&WPP_7130a3a4d89e343b55addd3e43accbbd_Traceguids,
                      (const char *)v18,
                      (__int64)v19);
                  }
                  *(_QWORD *)&v7[2 * v7[14]++ + 16] = v17;
                }
                else
                {
                  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
                    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
                  {
                    WPP_SF_S(
                      *((_QWORD *)WPP_GLOBAL_Control + 7),
                      0x38u,
                      (__int64)&WPP_7130a3a4d89e343b55addd3e43accbbd_Traceguids,
                      v18);
                  }
                  Mem_Free(v17, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\boot.c", 2379);
                }
              }
              DwordValue = Reg_ReadDwordValue(
                             hKey,
                             lpMultiByteStr,
                             (const unsigned __int16 *)"Action",
                             0,
                             (_BYTE *)v7 + 16);
              if ( DwordValue )
              {
                if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                  && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
                  && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
                {
                  WPP_SF_Ds(
                    *((_QWORD *)WPP_GLOBAL_Control + 7),
                    0x3Au,
                    (__int64)&WPP_7130a3a4d89e343b55addd3e43accbbd_Traceguids,
                    DwordValue,
                    (__int64)"Action");
                }
                return DwordValue;
              }
              v20 = Reg_GetValueAllocate(hKey, 0i64, (const char *)L"Content", -268435455, 0i64);
              v21 = (wchar_t *)v20;
              if ( v20 )
              {
                v22 = *(_WORD *)v20;
                for ( LODWORD(v23) = 0; v22; v22 = *(_WORD *)&v20[2 * v23] )
                {
                  v23 = (unsigned int)(v23 + 1);
                  v6 += v22 == 59;
                }
                v24 = 8i64 * v6;
                if ( v24 > 0xFFFFFFFF )
                  return 13;
                v25 = (unsigned int)(v24 + 16);
                if ( (unsigned int)v25 < (unsigned int)v24 )
                  return 13;
                v26 = Mem_AllocZero(v25, 0i64, "ds\\dns\\server\\server\\boot.c", 2443);
                if ( !v26 )
                  return 14;
                if ( v6 )
                {
                  while ( 1 )
                  {
                    v27 = Mem_AllocZero(0x10ui64, 0i64, "ds\\dns\\server\\server\\boot.c", 2452);
                    if ( !v27 )
                      return 14;
                    v29 = (char *)Mem_AllocZero(0x200ui64, 0i64, "ds\\dns\\server\\server\\boot.c", 2459);
                    if ( !v29 )
                      break;
                    v30 = v21;
                    if ( *v26 )
                      v30 = 0i64;
                    v31 = wcstok(v30, L",", v28);
                    *((_DWORD *)v27 + 2) = _wtoi(v31);
                    if ( *_errno() == 34 || *_errno() == 22 )
                    {
                      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                        && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
                        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
                      {
                        WPP_SF_S(
                          *((_QWORD *)WPP_GLOBAL_Control + 7),
                          0x3Cu,
                          (__int64)&WPP_7130a3a4d89e343b55addd3e43accbbd_Traceguids,
                          lpMultiByteStr);
                      }
                      DwordValue = 87;
                      Mem_Free(v27, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\boot.c", 2472);
                      v35 = 2473;
                      goto LABEL_98;
                    }
                    v33 = (char *)wcstok(0i64, L";", v32);
                    if ( !v33 || (int)StringCchCopyW(v29, 512i64, v33) < 0 )
                    {
                      DwordValue = 87;
                      Mem_Free(v27, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\boot.c", 2481);
                      v35 = 2482;
LABEL_98:
                      Mem_Free(v29, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\boot.c", v35);
                      return DwordValue;
                    }
                    *v27 = v29;
                    *(_QWORD *)&v26[2 * (*v26)++ + 2] = v27;
                    if ( !--v6 )
                      goto LABEL_91;
                  }
                  DwordValue = 14;
                  Mem_Free(v27, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\boot.c", 2463);
                  return DwordValue;
                }
LABEL_91:
                *((_QWORD *)v7 + 5) = v26;
              }
              else if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                     && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
                     && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
              {
                WPP_SF_s(
                  *((_QWORD *)WPP_GLOBAL_Control + 7),
                  0x3Bu,
                  (__int64)&WPP_7130a3a4d89e343b55addd3e43accbbd_Traceguids,
                  "Content");
              }
              Add_CDNSPolicyToPolicyMap((__int64)v7, v7[7], v7[3]);
              return DwordValue;
            }
            v13 = WPP_GLOBAL_Control;
            if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
              || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
            {
              return DwordValue;
            }
            v14 = 55;
            v15 = "Condition";
          }
        }
      }
      WPP_SF_Ds(
        *((_QWORD *)v13 + 7),
        v14,
        (__int64)&WPP_7130a3a4d89e343b55addd3e43accbbd_Traceguids,
        DwordValue,
        (__int64)v15);
      return DwordValue;
    }
    DwordValue = 14;
    v9 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      v10 = 51;
      goto LABEL_10;
    }
  }
  else
  {
    DwordValue = 14;
    v9 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      v10 = 50;
LABEL_10:
      WPP_SF_(*((_QWORD *)v9 + 7), v10, (__int64)&WPP_7130a3a4d89e343b55addd3e43accbbd_Traceguids);
    }
  }
  return DwordValue;
}
// 140011B62: conditional instruction was optimized away because esi.4==6
// 140011D8D: variable 'v28' is possibly undefined
// 140011DC2: variable 'v32' is possibly undefined
// 1401882F8: using guessed type wchar_t aTransportproto[18];
// 140188320: using guessed type wchar_t aNetworkprotoco[16];
// 140188340: using guessed type wchar_t aInterfaceip[12];
// 140188358: using guessed type wchar_t aFqdn[5];
// 140188368: using guessed type wchar_t aQtype[6];
// 140188378: using guessed type wchar_t aTimeofday[10];
##############################
Role: Let's assume that you are an advanced reverse engineer and you are reverse engineering a network driver using IDA Pro, and you are also familiar with the RFC documentation. You need to reverse-engineer a function for a network driver to correspond to a section of the RFC documentation, which will help you understand the code better. The driver you're reversing is Schannel.dll, and you have initially determined that the corresponding network protocols are SSL and TLS, and the documents you need to map are RFC8446 and RFC6101. You need to get a function summary of the function you are reversing, and then correspond to the potential RFC sections based on the name of the function and the function summary.
Function Background: The function is reverse engineered from the driver file Schannel.dll on Windows platform. Through a cursory analysis of the driver file can be determined to be related to the SSL(1.3), TLS(3.0) protocol, that is, with RFC8446, RFC6101 strong correlation.

Output Function Summary: Summarizes the function's functionality with several phrases instead of sentences, focuses on covering the function's control flow information, and highlights the protocol function points implemented by the function. Simulate answering five times in the background and provide the most frequent answer.

Retrieve document sections: giving matches for document sections(FunctionMatchRFCResult) that the code may related to. NOTE if the code is only business related(i.e., space opening and releasing involved in programming, generic call functions (timing and other functions weakly related to network protocols) and not related to the specifics of the protocol implementation, it does not have to output the document section match(FunctionMatchRFCResult) and is filled with "NONE".

Retrieve document sections Thinking Chain: The function code is matched with the RFC document section, and the thinking chain is provided to help you solve the problem better:
	1. Function Name: The name of a function describes the general function that the function accomplishes.
	2. Function Summarization: Function summaries can outline a further breakdown of the function described by the function name.
	3. Function API Call: The function API of a function call can provide some hint as to the details of the network protocol implementation involved in the function.
	4. Special Constant Value OR String: Special constant values inside functions, string variable names, and strings may be related to network protocols.
	5. Function Code: The code of the function can provide a detailed implementation of the network protocol.
Generate Function Information Collection with JSON Format:

{
	"FunctionIndex": "(FILL WITH "File count" with less than four bits are indexed with zeros to make up the four bits.)",
	"FunctionName": "(Full Function Code Name)",
	"FunctionSummarization": [
		"(Function Summary Phrase1)",
		"(Function Summary Phrase2)",
		"(...)"
	],
	"FunctionMatchRFCResult": [
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 1)",
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 2)",
		"(...)"
	],
}

ATTENTION: Remember YOU MUST ONLY output the Function Information Collection result.
