Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 2045
// Total lines: 480

//----- (00000001400FD6EC) ----------------------------------------------------
__int64 __fastcall DnsOls_GenerateRodcMasters(struct _zone_info *a1)
{
  unsigned int v1; // ebx
  struct _zone_info *v2; // r13
  struct _DnsAddrArray *v3; // r12
  LPWSTR *v4; // r14
  __int64 v5; // rdx
  __int64 v6; // r8
  int v7; // r9d
  __int64 v8; // rax
  unsigned int v9; // eax
  DWORD LastError; // eax
  CDnsClientSubnetRecordsTrie *v11; // r10
  unsigned __int16 v12; // dx
  int AddrCount; // r9d
  __int64 v14; // r14
  LPWSTR *v15; // rax
  __int64 v16; // rdx
  unsigned int v17; // r13d
  __int64 v18; // r8
  LPWSTR *v19; // r12
  unsigned __int16 *v20; // r14
  char **v21; // rax
  PWCHAR *v22; // rbx
  PWCHAR *v23; // rcx
  WCHAR *v24; // rax
  DWORD v25; // ebx
  CDnsClientSubnetRecordsTrie *v26; // rcx
  LPWSTR *v27; // rax
  __int64 v28; // r14
  __int64 v29; // r8
  const unsigned __int16 **v30; // r9
  unsigned int LowestCostSite; // r14d
  unsigned int v32; // r15d
  PDS_NAME_RESULT_ITEMW rItems; // r8
  DWORD cItems; // eax
  DWORD i; // ecx
  unsigned __int64 v36; // rax
  unsigned int v37; // r9d
  __int64 dwFlags; // [rsp+28h] [rbp-E0h]
  unsigned int v40; // [rsp+48h] [rbp-C0h]
  DWORD cost; // [rsp+48h] [rbp-C0h]
  LPWSTR *rgwszToSites; // [rsp+50h] [rbp-B8h]
  __int64 v43; // [rsp+58h] [rbp-B0h]
  __int64 v44; // [rsp+60h] [rbp-A8h]
  PDS_NAME_RESULTW ppSites; // [rsp+68h] [rbp-A0h] BYREF
  PDS_SITE_COST_INFO rgSiteInfo; // [rsp+70h] [rbp-98h] BYREF
  LPWSTR SiteName; // [rsp+78h] [rbp-90h] BYREF
  HANDLE phDS; // [rsp+80h] [rbp-88h] BYREF
  DWORD nSize; // [rsp+88h] [rbp-80h] BYREF
  struct _zone_info *v50; // [rsp+90h] [rbp-78h]
  struct _DnsAddrArray *v51; // [rsp+98h] [rbp-70h]
  char v52[1168]; // [rsp+A8h] [rbp-60h] BYREF
  __int64 v53; // [rsp+538h] [rbp+430h]
  WCHAR Buffer[256]; // [rsp+728h] [rbp+620h] BYREF

  v1 = 0;
  v50 = a1;
  SiteName = 0i64;
  v2 = a1;
  phDS = 0i64;
  ppSites = 0i64;
  rgSiteInfo = 0i64;
  v3 = 0i64;
  memset_0(Buffer, 0, sizeof(Buffer));
  v4 = 0i64;
  rgwszToSites = 0i64;
  memset_0(v52, 0, 0x678ui64);
  if ( (*((_BYTE *)v2 + 1160) & 0x40) == 0 )
    goto LABEL_147;
  if ( *((_QWORD *)v2 + 147) )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_s(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x2Du,
        (__int64)&WPP_9f3fa3b6e1fd31b2a2f779badde708de_Traceguids,
        *((const char **)v2 + 2));
      goto LABEL_139;
    }
    goto LABEL_147;
  }
  if ( *((_QWORD *)v2 + 24) )
  {
    v8 = *((_QWORD *)v2 + 146);
    if ( v8 && !*(_DWORD *)(v8 + 4) )
      v1 = 9612;
    goto LABEL_147;
  }
  v9 = *((_DWORD *)v2 + 388);
  if ( v9 && dword_1401B9714 < v9 )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_sd(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x2Eu,
        (__int64)&WPP_9f3fa3b6e1fd31b2a2f779badde708de_Traceguids,
        *((const char **)v2 + 2));
      goto LABEL_139;
    }
    goto LABEL_147;
  }
  v51 = (struct _DnsAddrArray *)DnsAddrArray_Create(0x14u, v5, v6, v7);
  v3 = v51;
  if ( !v51 )
  {
    v1 = 14;
    goto LABEL_139;
  }
  nSize = 256;
  if ( !GetComputerNameExW(ComputerNameDnsDomain, Buffer, &nSize) )
  {
    LastError = GetLastError();
    v1 = LastError;
    v11 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
    {
      goto LABEL_119;
    }
    v12 = 47;
LABEL_24:
    AddrCount = LastError;
    goto LABEL_25;
  }
  LastError = DsGetSiteNameW(0i64, &SiteName);
  v1 = LastError;
  if ( LastError )
  {
    v11 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
    {
      goto LABEL_119;
    }
    v12 = 48;
    goto LABEL_24;
  }
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_SS(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x31u,
      (__int64)&WPP_9f3fa3b6e1fd31b2a2f779badde708de_Traceguids,
      Buffer,
      (__int64)SiteName);
  }
  LastError = DsBindW(0i64, 0i64, &phDS);
  v1 = LastError;
  if ( LastError )
  {
    v11 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
    {
      goto LABEL_119;
    }
    v12 = 50;
    goto LABEL_24;
  }
  LastError = DsListSitesW(phDS, &ppSites);
  v1 = LastError;
  if ( LastError )
  {
    v11 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
    {
      goto LABEL_119;
    }
    v12 = 51;
    goto LABEL_24;
  }
  if ( !ppSites || (v14 = ppSites->cItems, !(_DWORD)v14) || !ppSites->rItems )
  {
    v11 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
    {
      goto LABEL_119;
    }
    if ( ppSites )
      rItems = ppSites->rItems;
    else
      rItems = 0i64;
    if ( ppSites )
      cItems = ppSites->cItems;
    else
      cItems = 0;
    LODWORD(dwFlags) = cItems;
    WPP_SF_qdq(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x34u,
      (__int64)&WPP_9f3fa3b6e1fd31b2a2f779badde708de_Traceguids,
      ppSites,
      dwFlags,
      rItems);
LABEL_118:
    v11 = WPP_GLOBAL_Control;
    goto LABEL_119;
  }
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_D(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x35u, (__int64)&WPP_9f3fa3b6e1fd31b2a2f779badde708de_Traceguids, v14);
  }
  v15 = (LPWSTR *)Mem_AllocZero((unsigned int)(8 * v14 + 8), 0i64, "ds\\dns\\server\\server\\olsrodc.cpp", 1498);
  rgwszToSites = v15;
  if ( !v15 )
    goto LABEL_118;
  v11 = WPP_GLOBAL_Control;
  v16 = 0i64;
  v44 = v14;
  v43 = 0i64;
  v17 = 0;
  v18 = v14;
  v19 = v15;
  do
  {
    v20 = *(LPWSTR *)((char *)&ppSites->rItems->pName + v16);
    if ( v11 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)v11 + 17) & 0x200000) != 0
      && *((_BYTE *)v11 + 65) >= 5u )
    {
      WPP_SF_S(*((_QWORD *)v11 + 7), 0x36u, (__int64)&WPP_9f3fa3b6e1fd31b2a2f779badde708de_Traceguids, v20);
      v11 = WPP_GLOBAL_Control;
      v16 = v43;
      v18 = v44;
    }
    if ( v20 )
    {
      v21 = (char **)ldap_explode_dnW(v20, 1u);
      v22 = (PWCHAR *)v21;
      if ( v21 )
      {
        if ( *v21 )
        {
          v24 = (WCHAR *)Dns_StringCopyAllocate(*v21, 0, 1i64, 1);
          v23 = v22;
          v19[v17] = v24;
          if ( v24 )
          {
            ldap_value_freeW(v22);
            v11 = WPP_GLOBAL_Control;
            if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
              && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
            {
              WPP_SF_SD(
                *((_QWORD *)WPP_GLOBAL_Control + 7),
                0x39u,
                (__int64)&WPP_9f3fa3b6e1fd31b2a2f779badde708de_Traceguids,
                v19[v17]);
              v11 = WPP_GLOBAL_Control;
            }
            ++v17;
            goto LABEL_78;
          }
        }
        else
        {
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
          {
            WPP_SF_S(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x38u,
              (__int64)&WPP_9f3fa3b6e1fd31b2a2f779badde708de_Traceguids,
              v20);
          }
          v23 = v22;
        }
        ldap_value_freeW(v23);
      }
      else
      {
        v11 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) == 0
          || *((_BYTE *)WPP_GLOBAL_Control + 65) < 5u )
        {
          goto LABEL_78;
        }
        WPP_SF_S(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x37u,
          (__int64)&WPP_9f3fa3b6e1fd31b2a2f779badde708de_Traceguids,
          v20);
      }
      v11 = WPP_GLOBAL_Control;
LABEL_78:
      v16 = v43;
      v18 = v44;
    }
    v16 += 24i64;
    --v18;
    v43 = v16;
    v44 = v18;
  }
  while ( v18 );
  v3 = v51;
  v40 = v17;
  v25 = v17;
  v2 = v50;
  if ( v11 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)v11 + 17) & 0x200000) != 0
    && *((_BYTE *)v11 + 65) >= 5u )
  {
    WPP_SF_D(*((_QWORD *)v11 + 7), 0x3Au, (__int64)&WPP_9f3fa3b6e1fd31b2a2f779badde708de_Traceguids, v25);
    v11 = WPP_GLOBAL_Control;
  }
  if ( !v25 )
  {
    v1 = 87;
    goto LABEL_119;
  }
  v1 = DsQuerySitesByCostW(phDS, SiteName, rgwszToSites, v25, 0, &rgSiteInfo);
  if ( !v1 )
  {
    v26 = WPP_GLOBAL_Control;
    if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0 )
    {
      v27 = rgwszToSites;
      v28 = 0i64;
      if ( *rgwszToSites )
      {
        v29 = 0i64;
        v30 = (const unsigned __int16 **)rgwszToSites;
        do
        {
          if ( v26 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)v26 + 17) & 0x200000) != 0
            && *((_BYTE *)v26 + 65) >= 5u )
          {
            WPP_SF_SDDD(*((_QWORD *)v26 + 7), (__int64)rgSiteInfo, v29, *v30);
            v26 = WPP_GLOBAL_Control;
            v27 = rgwszToSites;
          }
          ++v28;
          v29 = 8 * v28;
          v30 = (const unsigned __int16 **)&v27[v28];
        }
        while ( *v30 );
      }
    }
    LowestCostSite = findLowestCostSite(rgSiteInfo, v40);
    if ( LowestCostSite != -1 )
    {
      v32 = v40;
      while ( 1 )
      {
        v50 = (struct _zone_info *)LowestCostSite;
        gatherMasterAddressesForSite(v2, Buffer, rgwszToSites[LowestCostSite], v3);
        if ( v3->AddrCount >= v3->MaxCount )
          break;
        cost = rgSiteInfo[(_QWORD)v50].cost;
        LowestCostSite = findNextSiteWithCost(rgSiteInfo, v32, LowestCostSite);
        if ( LowestCostSite == -1 )
        {
          LowestCostSite = findNextLowestCostSite(rgSiteInfo, v32, cost);
          if ( LowestCostSite == -1 )
            break;
        }
      }
    }
    v11 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 5u )
    {
      goto LABEL_119;
    }
    AddrCount = v3->AddrCount;
    v12 = 61;
LABEL_25:
    WPP_SF_D(*((_QWORD *)v11 + 7), v12, (__int64)&WPP_9f3fa3b6e1fd31b2a2f779badde708de_Traceguids, AddrCount);
    goto LABEL_118;
  }
  v11 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
  {
    WPP_SF_DS(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x3Bu,
      (__int64)&WPP_9f3fa3b6e1fd31b2a2f779badde708de_Traceguids,
      v1,
      (__int64)SiteName);
    goto LABEL_118;
  }
LABEL_119:
  if ( v3->AddrCount )
  {
LABEL_126:
    if ( !v1 && v3 )
    {
      if ( (*((_DWORD *)v11 + 17) & 0x200000) != 0 )
      {
        if ( v11 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control && *((_BYTE *)v11 + 65) >= 4u )
          WPP_SF_qs(
            *((_QWORD *)v11 + 7),
            0x3Fu,
            (__int64)&WPP_9f3fa3b6e1fd31b2a2f779badde708de_Traceguids,
            v3,
            *((_QWORD *)v2 + 2));
        Dbg_DnsAddrArray("New masters", (__int64)v3);
      }
      for ( i = 0; i < v3->AddrCount; *(_WORD *)&v3->AddrArray[0].MaxSa[v36 + 2] = 13568 )
        v36 = (unsigned __int64)i++ << 6;
      Timeout_FreeWithFunctionEx(
        *((_QWORD *)v2 + 146),
        (__int64)DnsAddrArray_Free,
        (__int64)"ds\\dns\\server\\server\\olsrodc.cpp",
        1697);
      *((_QWORD *)v2 + 146) = v3;
      v3 = 0i64;
      v53 = *((_QWORD *)v2 + 146);
      if ( *((_QWORD *)v2 + 23) )
        Dns_SetPropsWithScopeSnapShot((__int64 *)v2, 0x400u, (__int64)v52, v37);
      dword_1401B9714 = Dns_GetCurrentTimeInSeconds();
      *((_DWORD *)v2 + 388) = dword_1401B9714 + 3600;
    }
  }
  else
  {
    if ( v11 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)v11 + 17) & 0x200000) != 0
      && *((_BYTE *)v11 + 65) >= 4u )
    {
      WPP_SF_(*((_QWORD *)v11 + 7), 0x3Eu, (__int64)&WPP_9f3fa3b6e1fd31b2a2f779badde708de_Traceguids);
    }
    Dns_Free(v3);
    v3 = 0i64;
    if ( !v1 )
    {
      v11 = WPP_GLOBAL_Control;
      v1 = 9612;
      goto LABEL_126;
    }
  }
  v4 = rgwszToSites;
LABEL_139:
  if ( SiteName )
    NetApiBufferFree(SiteName);
  if ( ppSites )
    DsFreeNameResultW(ppSites);
  if ( rgSiteInfo )
    DsQuerySitesFree(rgSiteInfo);
  if ( phDS )
    DsUnBindW(&phDS);
LABEL_147:
  Dns_FreeStringArray(v4);
  Dns_Free(v3);
  return v1;
}
// 1400FDA93: conditional instruction was optimized away because r14d.4!=0
// 1400FD867: variable 'v5' is possibly undefined
// 1400FD867: variable 'v6' is possibly undefined
// 1400FD867: variable 'v7' is possibly undefined
// 1400FDE5C: variable 'dwFlags' is possibly undefined
// 1400FDF6F: variable 'v37' is possibly undefined
// 1401560E0: using guessed type __int64 __fastcall DnsAddrArray_Free();
// 1401B9714: using guessed type int dword_1401B9714;
