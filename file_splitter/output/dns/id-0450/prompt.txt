Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 450
// Total lines: 293

//----- (0000000140038C14) ----------------------------------------------------
__int64 __fastcall Ds_WriteNodeToDs(__int64 a1, __int64 a2, unsigned __int16 a3, int a4, __int64 a5, int a6)
{
  CDnsClientSubnetRecordsTrie *v9; // rcx
  char *v10; // rax
  int v12; // eax
  unsigned int v13; // r8d
  BOOL IsMatchingList; // ebx
  char *v15; // rax
  unsigned int inited; // edi
  int v17; // ebx
  CDnsClientSubnetRecordsTrie *v18; // rcx
  unsigned __int16 v19; // dx
  __int64 v20; // rdx
  int *ExtendedLdapErrString; // rbx
  __int16 *v22; // rax
  __int64 *v23; // r9
  __int128 *v24; // rcx
  char *v25; // rax
  __int16 v26; // [rsp+40h] [rbp-C0h] BYREF
  char v27; // [rsp+42h] [rbp-BEh]
  __int16 v28; // [rsp+44h] [rbp-BCh] BYREF
  char v29; // [rsp+46h] [rbp-BAh]
  unsigned __int16 v30; // [rsp+48h] [rbp-B8h]
  _QWORD *v31; // [rsp+50h] [rbp-B0h] BYREF
  __int128 v32; // [rsp+60h] [rbp-A0h] BYREF
  __int128 v33; // [rsp+70h] [rbp-90h] BYREF
  __int64 v34[3]; // [rsp+80h] [rbp-80h] BYREF
  __int64 v35[3]; // [rsp+98h] [rbp-68h] BYREF
  wchar_t Buffer[1288]; // [rsp+B0h] [rbp-50h] BYREF
  _DWORD v37[2048]; // [rsp+AC0h] [rbp+9C0h] BYREF

  v30 = a3;
  memset_0(v37, 0, sizeof(v37));
  v31 = 0i64;
  v9 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    v10 = Dbg_NodeName(a2);
    WPP_SF_ss(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x34u,
      (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
      v10,
      *(_QWORD *)(a5 + 16));
    v9 = WPP_GLOBAL_Control;
  }
  if ( !*(_QWORD *)(a5 + 840) )
    return 9604i64;
  if ( a6 )
  {
    _InterlockedAdd(&dword_1401C7CD4, 1u);
    v12 = *(_DWORD *)(a2 + 72);
    switch ( v12 )
    {
      case 255:
        _InterlockedAdd(&dword_1401C7CDC, 1u);
        break;
      case 34:
        _InterlockedAdd(&dword_1401C7CE0, 1u);
        break;
      case 130:
        _InterlockedAdd(&dword_1401C7CE8, 1u);
        break;
      case 66:
        _InterlockedAdd(&dword_1401C7CE4, 1u);
        break;
    }
    if ( (a6 & 1) != 0 )
    {
      _InterlockedAdd(&dword_1401C7CEC, 1u);
      if ( (a6 & 0x40) != 0 )
        _InterlockedAdd(&dword_1401C7CF0, 1u);
    }
    else if ( (a6 & 0x202) != 0 )
    {
      _InterlockedAdd(&dword_1401C7CF4, 1u);
    }
    else if ( (a6 & 0x10) != 0 )
    {
      _InterlockedAdd(&dword_1401C7CF8, 1u);
    }
    else if ( (a6 & 0x20) != 0 )
    {
      _InterlockedAdd(&dword_1401C7CFC, 1u);
    }
    v9 = WPP_GLOBAL_Control;
  }
  if ( a4 == 1 )
  {
    if ( v9 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)v9 + 17) & 0x400) != 0
      && *((_BYTE *)v9 + 65) >= 4u )
    {
      WPP_SF_s(
        *((_QWORD *)v9 + 7),
        0x35u,
        (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
        (const char *)(a2 + 102));
    }
    if ( !(unsigned int)Ds_ReadNodeRecords((__int64 *)a5, a2, &v31, 0i64) )
    {
      v13 = 3;
      if ( *(_DWORD *)(a5 + 372) == 1 && (*(_BYTE *)(a5 + 1040) & 4) != 0 )
        v13 = 11;
      IsMatchingList = RR_ListIsMatchingList(a2, (__int64)v31, v13);
      RR_ListFree(v31);
      if ( IsMatchingList )
      {
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          v15 = Dbg_NodeName(a2);
          WPP_SF_ss(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x36u,
            (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
            v15,
            *(_QWORD *)(a5 + 16));
        }
        _InterlockedAdd(&dword_1401C7D18, 1u);
        return 0i64;
      }
    }
  }
  inited = buildDsNodeNameFromNode(Buffer, (__int64 *)a5, a2);
  if ( !inited )
  {
    v17 = a6 ? *(_DWORD *)(a5 + 524) : *(_DWORD *)(a5 + 512);
    inited = Ds_InitModBuffer(v37, 0x2000u, 1, 0, v17);
    if ( !inited )
    {
      if ( !*(_QWORD *)(a2 + 64) || (*(_BYTE *)(a2 + 92) & 1) != 0 )
        goto LABEL_69;
      inited = buildDsRecordSet((__int64)v37, a5, a2, v30);
      if ( inited )
      {
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x37u, (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids);
        }
        goto LABEL_92;
      }
      if ( v37[1] )
      {
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          WPP_SF_s(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x3Cu,
            (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
            (const char *)(a2 + 102));
        }
        inited = writeRecordsToDsNode(a1, Buffer, (__int64)v37, a4, a5);
        if ( !inited )
          goto LABEL_92;
        if ( a1 )
        {
          v18 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) == 0
            || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
          {
            goto LABEL_92;
          }
          v19 = 61;
          goto LABEL_64;
        }
        v26 = 771;
        v34[0] = a2 + 102;
        v34[1] = *(_QWORD *)(a5 + 16);
        v27 = 1;
        ExtendedLdapErrString = Ds_GetExtendedLdapErrString(0i64);
        v34[2] = (__int64)ExtendedLdapErrString;
        v22 = &v26;
        v32 = DNS_EVENT_DS_WRITE_FAILED;
        v23 = v34;
        v24 = &v32;
      }
      else
      {
LABEL_69:
        if ( !*(_DWORD *)(a5 + 372) && g_ulDownlevelDCsInDomain && a2 == *(_QWORD *)(a5 + 48) )
        {
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            WPP_SF_D(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x38u,
              (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
              a4);
          }
          goto LABEL_92;
        }
        if ( a4 == 1 )
        {
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            WPP_SF_s(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x39u,
              (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
              (const char *)(a2 + 102));
          }
          goto LABEL_92;
        }
        if ( a6 )
          _InterlockedIncrement(&dword_1401C7CD8);
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          WPP_SF_s(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x3Au,
            (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
            (const char *)(a2 + 102));
        }
        inited = deleteNodeFromDs(a1, a5, Buffer, v17);
        if ( !inited )
          goto LABEL_92;
        if ( a1 )
        {
          v18 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) == 0
            || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
          {
            goto LABEL_92;
          }
          v19 = 59;
LABEL_64:
          WPP_SF_SD(*((_QWORD *)v18 + 7), v19, (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids, Buffer);
          goto LABEL_92;
        }
        v28 = 771;
        v35[0] = a2 + 102;
        v35[1] = *(_QWORD *)(a5 + 16);
        v29 = 1;
        ExtendedLdapErrString = Ds_GetExtendedLdapErrString(0i64);
        v35[2] = (__int64)ExtendedLdapErrString;
        v22 = &v28;
        v33 = DNS_EVENT_DS_WRITE_FAILED;
        v23 = v35;
        v24 = &v33;
      }
      Eventlog_LogEvent((__int64)v24, v20, 3u, (unsigned __int16 **)v23, (unsigned __int8 *)v22, inited, 0, 0i64);
      Ds_FreeExtendedLdapErrString(ExtendedLdapErrString);
    }
  }
LABEL_92:
  Ds_CleanupModBuffer((__int64)v37);
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    v25 = Dbg_NodeName(a2);
    WPP_SF_Dss(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x3Eu,
      (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
      inited,
      (__int64)v25,
      *(_QWORD *)(a5 + 16));
  }
  return inited;
}
// 140039065: variable 'v20' is possibly undefined
// 140186958: using guessed type __int128 DNS_EVENT_DS_WRITE_FAILED;
// 1401B7F04: using guessed type int g_ulDownlevelDCsInDomain;
// 1401C7CD4: using guessed type int dword_1401C7CD4;
// 1401C7CD8: using guessed type int dword_1401C7CD8;
// 1401C7CDC: using guessed type int dword_1401C7CDC;
// 1401C7CE0: using guessed type int dword_1401C7CE0;
// 1401C7CE4: using guessed type int dword_1401C7CE4;
// 1401C7CE8: using guessed type int dword_1401C7CE8;
// 1401C7CEC: using guessed type int dword_1401C7CEC;
// 1401C7CF0: using guessed type int dword_1401C7CF0;
// 1401C7CF4: using guessed type int dword_1401C7CF4;
// 1401C7CF8: using guessed type int dword_1401C7CF8;
// 1401C7CFC: using guessed type int dword_1401C7CFC;
// 1401C7D18: using guessed type int dword_1401C7D18;
##############################
Role: Let's assume that you are an advanced reverse engineer and you are reverse engineering a network driver using IDA Pro, and you are also familiar with the RFC documentation. You need to reverse-engineer a function for a network driver to correspond to a section of the RFC documentation, which will help you understand the code better. The driver you're reversing is Schannel.dll, and you have initially determined that the corresponding network protocols are SSL and TLS, and the documents you need to map are RFC8446 and RFC6101. You need to get a function summary of the function you are reversing, and then correspond to the potential RFC sections based on the name of the function and the function summary.
Function Background: The function is reverse engineered from the driver file Schannel.dll on Windows platform. Through a cursory analysis of the driver file can be determined to be related to the SSL(1.3), TLS(3.0) protocol, that is, with RFC8446, RFC6101 strong correlation.

Output Function Summary: Summarizes the function's functionality with several phrases instead of sentences, focuses on covering the function's control flow information, and highlights the protocol function points implemented by the function. Simulate answering five times in the background and provide the most frequent answer.

Retrieve document sections: giving matches for document sections(FunctionMatchRFCResult) that the code may related to. NOTE if the code is only business related(i.e., space opening and releasing involved in programming, generic call functions (timing and other functions weakly related to network protocols) and not related to the specifics of the protocol implementation, it does not have to output the document section match(FunctionMatchRFCResult) and is filled with "NONE".

Retrieve document sections Thinking Chain: The function code is matched with the RFC document section, and the thinking chain is provided to help you solve the problem better:
	1. Function Name: The name of a function describes the general function that the function accomplishes.
	2. Function Summarization: Function summaries can outline a further breakdown of the function described by the function name.
	3. Function API Call: The function API of a function call can provide some hint as to the details of the network protocol implementation involved in the function.
	4. Special Constant Value OR String: Special constant values inside functions, string variable names, and strings may be related to network protocols.
	5. Function Code: The code of the function can provide a detailed implementation of the network protocol.
Generate Function Information Collection with JSON Format:

{
	"FunctionIndex": "(FILL WITH "File count" with less than four bits are indexed with zeros to make up the four bits.)",
	"FunctionName": "(Full Function Code Name)",
	"FunctionSummarization": [
		"(Function Summary Phrase1)",
		"(Function Summary Phrase2)",
		"(...)"
	],
	"FunctionMatchRFCResult": [
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 1)",
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 2)",
		"(...)"
	],
}

ATTENTION: Remember YOU MUST ONLY output the Function Information Collection result.
