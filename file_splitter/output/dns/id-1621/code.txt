Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 1621
// Total lines: 163

//----- (00000001400CD350) ----------------------------------------------------
__int64 __fastcall zoneTransferSendThread(__int64 a1, __int64 a2, unsigned int a3)
{
  __int64 v3; // rbx
  __int64 *v5; // r14
  unsigned __int16 *v6; // rsi
  unsigned __int16 *v7; // r13
  SOCKET v8; // rcx
  __int64 v9; // rdx
  __int64 v10; // r8
  __int64 v11; // rdx
  CDnsClientSubnetRecordsTrie *v13; // rcx
  int v14; // r12d
  __int64 i; // rax
  __int64 v16; // rsi
  __int64 v17; // rdx
  __int64 v18; // rdx
  int v19; // ecx
  unsigned __int16 *v20; // rax
  __int64 v21; // rdx
  u_long argp[2]; // [rsp+58h] [rbp-B0h] BYREF
  unsigned __int16 *v23; // [rsp+60h] [rbp-A8h] BYREF
  __int128 v24; // [rsp+68h] [rbp-A0h] BYREF
  __int128 v25; // [rsp+78h] [rbp-90h] BYREF
  __int128 v26; // [rsp+88h] [rbp-80h] BYREF
  unsigned __int16 *v27[4]; // [rsp+98h] [rbp-70h] BYREF
  char v28[80]; // [rsp+B8h] [rbp-50h] BYREF

  v3 = *(_QWORD *)(a1 + 208);
  v5 = *(__int64 **)(v3 + 40);
  Zone_AssumeReadLockEx(v3, a2, a3);
  DnsAddr_WriteIpString_A(v28, (char *)(a1 + 64));
  v6 = (unsigned __int16 *)*(unsigned int *)(v3 + 512);
  v7 = *(unsigned __int16 **)(v3 + 24);
  v8 = *(_QWORD *)(a1 + 56);
  argp[1] = 0;
  v27[2] = (unsigned __int16 *)v28;
  *(_QWORD *)(a1 + 24) = a1 + 22688;
  v27[0] = v6;
  v27[1] = v7;
  LOWORD(argp[0]) = 260;
  BYTE2(argp[0]) = 3;
  *(_DWORD *)(a1 + 44) = 0x4000;
  argp[1] = ioctlsocket(v8, -2147195266, &argp[1]);
  if ( argp[1] )
  {
    WSAGetLastError();
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x40) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_Dd(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x34u,
        (__int64)&WPP_4e7c1fc42723374814672f05b7ca7028_Traceguids,
        *(_DWORD *)(a1 + 56));
    }
LABEL_6:
    _InterlockedIncrement(&dword_1401C803C);
    _InterlockedIncrement((volatile signed __int32 *)pcZoneTransferFailure);
    v26 = DNS_EVENT_ZONEXFR_ABORTED;
    Eventlog_LogEvent((__int64)&v26, v11, 3u, v27, (unsigned __int8 *)argp, 0, 0, 0i64);
    goto LABEL_7;
  }
  if ( *(_WORD *)(a1 + 480) != 251 )
    goto LABEL_16;
  if ( (unsigned int)sendIxfrResponse(a1) != 1168385 )
    goto LABEL_7;
  v13 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x40) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x35u, (__int64)&WPP_4e7c1fc42723374814672f05b7ca7028_Traceguids, a1);
LABEL_16:
    v13 = WPP_GLOBAL_Control;
  }
  v14 = dword_1401B9714;
  if ( v13 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)v13 + 68) & 0x40) != 0
    && *((_BYTE *)v13 + 65) >= 4u )
  {
    WPP_SF_dSsdd(*((_QWORD *)v13 + 7), v9, v10, (int)v6, (__int64)v7, (__int64)v28);
  }
  if ( !(unsigned int)writeZoneNodeToMessage(a1, v5, 6u, 0)
    || !(unsigned int)writeZoneNodeToMessage(a1, v5, 0xFFu, 6)
    || !(unsigned int)writeNsGlueRecordsForNodeToMessage(a1, (__int64)v5) )
  {
    goto LABEL_6;
  }
  if ( v5[4] )
  {
    for ( i = NTree_FirstChild((__int64)v5); ; i = NTree_NextSiblingWithLocking(v16) )
    {
      v16 = i;
      if ( !i )
        break;
      if ( !(unsigned int)traverseZoneAndTransferRecords(i, a1) )
        goto LABEL_6;
    }
  }
  if ( !(unsigned int)writeZoneNodeToMessage(a1, v5, 6u, 0)
    || *(_WORD *)(a1 + 6310) && (unsigned int)Send_ResponseAndReset(a1) )
  {
    goto LABEL_6;
  }
  _InterlockedIncrement(&dword_1401C8044);
  _InterlockedIncrement((volatile signed __int32 *)pcAxfrSuccessSent);
  _InterlockedIncrement((volatile signed __int32 *)pcZoneTransferSuccess);
  Stat_IncrementZoneTransferStats(*(_QWORD *)(a1 + 208), 252, 4);
  v24 = DNS_EVENT_ZONEXFR_SUCCESSFUL;
  Eventlog_LogEvent((__int64)&v24, v17, 3u, v27, (unsigned __int8 *)argp, 0, 0, 0i64);
  if ( *(_QWORD *)(v3 + 344) && *(_DWORD *)(v3 + 372) == 1 && (*(_BYTE *)(v3 + 1040) & 4) != 0 )
  {
    dword_1401B9714 = Dns_GetCurrentTimeInSeconds();
    v19 = dword_1401B9714;
    if ( (unsigned int)dword_1401B9714 <= *(_DWORD *)(v3 + 1152) )
      goto LABEL_38;
    v20 = *(unsigned __int16 **)(v3 + 24);
    v25 = DNS_EVENT_XFER_SIGNED_WINS_ZONE;
    v23 = v20;
    Eventlog_LogEvent((__int64)&v25, v18, 1u, &v23, (unsigned __int8 *)1, 0, 0, 0i64);
    *(_DWORD *)(v3 + 1152) = dword_1401B9714 + 86400;
  }
  v19 = dword_1401B9714;
LABEL_38:
  if ( *(_DWORD *)(v3 + 372) == 1 )
  {
    v21 = (unsigned int)(dword_1401B9950 * (v19 - v14));
    if ( (unsigned int)v21 > 0x258 )
      v21 = 600i64;
    *(_DWORD *)(v3 + 568) = v21 + v19;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x40) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_sdddddd(*((_QWORD *)WPP_GLOBAL_Control + 7), v21, (__int64)WPP_GLOBAL_Control, *(const char **)(v3 + 16));
    }
  }
LABEL_7:
  Packet_FreeTcpMessage(a1, 0);
  *(_DWORD *)(v3 + 520) = *(_DWORD *)(v3 + 512);
  Zone_UnlockAfterReadEx(v3, 0);
  if ( (*(_BYTE *)(v3 + 388) & 1) != 0 )
    Ds_CheckForAndForceSerialWrite(v3, 2u);
  Thread_Close(0);
  return 0i64;
}
// 1400CD48A: variable 'v11' is possibly undefined
// 1400CD597: variable 'v9' is possibly undefined
// 1400CD597: variable 'v10' is possibly undefined
// 1400CD6B7: variable 'v17' is possibly undefined
// 1400CD726: variable 'v18' is possibly undefined
// 140186078: using guessed type __int128 DNS_EVENT_ZONEXFR_ABORTED;
// 1401875A8: using guessed type __int128 DNS_EVENT_XFER_SIGNED_WINS_ZONE;
// 140187AE8: using guessed type __int128 DNS_EVENT_ZONEXFR_SUCCESSFUL;
// 1401B9714: using guessed type int dword_1401B9714;
// 1401B9950: using guessed type int dword_1401B9950;
// 1401C803C: using guessed type int dword_1401C803C;
// 1401C8044: using guessed type int dword_1401C8044;
// 1401C8560: using guessed type __int64 pcZoneTransferSuccess;
// 1401C8568: using guessed type __int64 pcZoneTransferFailure;
// 1401C8578: using guessed type __int64 pcAxfrSuccessSent;
