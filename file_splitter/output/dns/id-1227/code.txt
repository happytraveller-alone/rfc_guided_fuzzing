Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 1227
// Total lines: 148

//----- (000000014009E2EC) ----------------------------------------------------
__int64 rebuildServerAddressList()
{
  unsigned int *v0; // rbx
  unsigned int v1; // r12d
  __int64 v2; // rdx
  __int64 v3; // r8
  int v4; // r9d
  unsigned int v5; // r14d
  IP_ADAPTER_ADDRESSES_LH *v6; // rbx
  PIP_ADAPTER_UNICAST_ADDRESS_LH i; // rdi
  int v8; // eax
  IP_ADAPTER_ADDRESSES_LH *v9; // rsi
  unsigned int v10; // r15d
  PIP_ADAPTER_UNICAST_ADDRESS_LH j; // rdi
  int v12; // eax
  int v13; // edx
  int v14; // eax
  __int64 v15; // r8
  unsigned int k; // ecx
  unsigned __int64 v17; // rax
  int v19[16]; // [rsp+30h] [rbp-40h] BYREF
  IP_ADAPTER_ADDRESSES_LH *v20; // [rsp+A0h] [rbp+30h] BYREF

  v20 = 0i64;
  v0 = 0i64;
  v1 = 0;
  v5 = Sock_AllocAdaptersAddresses(&v20);
  if ( v5 )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x2000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_D(*((_QWORD *)WPP_GLOBAL_Control + 7), 0xCu, (__int64)&WPP_0e6d7f56a09830e1f84833a99c0e37ce_Traceguids, v5);
    }
    goto LABEL_42;
  }
  v6 = v20;
  if ( !v20 )
    goto LABEL_21;
  do
  {
    if ( v6->OperStatus == IfOperStatusUp
      && v6->IfType != 24
      && (v6->IfType != 131 || ((v6->TunnelType - 11) & 0xFFFFFFFD) == 0) )
    {
      for ( i = v6->FirstUnicastAddress; i; i = i->Next )
      {
        if ( (unsigned int)DnsAddr_Build(v19, &i->Address.lpSockaddr->sa_family, 0) )
        {
          LOBYTE(v8) = DnsAddr_IsLoopback(v19, 0);
          if ( !v8 )
            ++v1;
        }
      }
    }
    v6 = v6->Next;
  }
  while ( v6 );
  if ( !v1 )
  {
LABEL_21:
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x2000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0xDu, (__int64)&WPP_0e6d7f56a09830e1f84833a99c0e37ce_Traceguids);
    }
  }
  v0 = DnsAddrArray_Create(v1, v2, v3, v4);
  if ( !v0 )
  {
    v5 = 14;
    goto LABEL_48;
  }
  v9 = v20;
  v10 = 0;
  if ( v20 )
  {
    do
    {
      if ( v9->OperStatus == IfOperStatusUp
        && v9->IfType != 24
        && (v9->IfType != 131 || ((v9->TunnelType - 11) & 0xFFFFFFFD) == 0) )
      {
        for ( j = v9->FirstUnicastAddress; j && v10 < v1; j = j->Next )
        {
          if ( !(unsigned int)DnsAddr_Build(v19, &j->Address.lpSockaddr->sa_family, 0)
            || (LOBYTE(v12) = DnsAddr_IsLoopback(v19, 0), v12) )
          {
            v14 = 0;
          }
          else
          {
            v14 = v13 + 1;
          }
          if ( v14 && (unsigned int)DnsAddr_Build(v19, &j->Address.lpSockaddr->sa_family, 0) )
          {
            DnsAddrArray_AddAddr(v0, (__int64)v19, v15, 0);
            ++v10;
          }
        }
      }
      v9 = v9->Next;
    }
    while ( v9 );
LABEL_42:
    if ( v5 )
      goto LABEL_48;
  }
  if ( v0 )
  {
    for ( k = 0; k < v0[1]; *(_WORD *)((char *)v0 + v17 + 34) = 13568 )
      v17 = (unsigned __int64)k++ << 6;
    EnterCriticalSection(&g_SocketListCs);
    Timeout_FreeWithFunctionEx(
      (__int64)g_ServerAddrs,
      (__int64)DnsAddrArray_Free,
      (__int64)"ds\\dns\\server\\server\\socket.c",
      727);
    g_ServerAddrs = v0;
    LeaveCriticalSection(&g_SocketListCs);
    v0 = 0i64;
    if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x2000) != 0 )
      Dbg_DnsAddrArray("New server address list", (__int64)g_ServerAddrs);
  }
LABEL_48:
  Mem_Free(v20, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\socket.c", 739);
  Dns_Free(v0);
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x2000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_D(*((_QWORD *)WPP_GLOBAL_Control + 7), 0xEu, (__int64)&WPP_0e6d7f56a09830e1f84833a99c0e37ce_Traceguids, v5);
  }
  return v5;
}
// 14009E47B: conditional instruction was optimized away because rdi.8!=0
// 14009E3C4: variable 'v8' is possibly undefined
// 14009E41A: variable 'v2' is possibly undefined
// 14009E41A: variable 'v3' is possibly undefined
// 14009E41A: variable 'v4' is possibly undefined
// 14009E49E: variable 'v12' is possibly undefined
// 14009E4A0: variable 'v13' is possibly undefined
// 14009E4C9: variable 'v15' is possibly undefined
// 1401560E0: using guessed type __int64 __fastcall DnsAddrArray_Free();
// 14009E2EC: using guessed type _DWORD var_40[16];
