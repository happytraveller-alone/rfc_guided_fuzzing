Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 1491
// Total lines: 138

//----- (00000001400BB83C) ----------------------------------------------------
void __fastcall Up_ApplyTempUpdatesToDatabase(__int64 a1, __int64 a2)
{
  CDnsClientSubnetRecordsTrie *v4; // rcx
  __int64 i; // rbx
  __int64 v6; // rbp
  __int64 v7; // r14
  bool v8; // zf
  __int64 v9; // rcx
  __int64 **v10; // rbx
  __int64 **v11; // rbp
  __int64 *v12; // rsi
  unsigned __int16 v13; // dx

  v4 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x80000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_qs(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0xADu,
      (__int64)&WPP_40fcce62f6f439b0ec75be29cae6130a_Traceguids,
      a2,
      *(_QWORD *)(a1 + 16));
    v4 = WPP_GLOBAL_Control;
  }
  if ( (*(_BYTE *)(a1 + 388) & 1) == 0 )
  {
    checkTempNodesForUpdateEffect(a1, a2);
    v4 = WPP_GLOBAL_Control;
  }
  if ( (*((_DWORD *)v4 + 17) & 0x80000) != 0 )
  {
    Dbg_UpdateList("Update list after signing, before swap back suppression", a2);
    v4 = WPP_GLOBAL_Control;
  }
  if ( (*(_DWORD *)(a2 + 40) & 0x4000000) != 0 )
  {
    Dnssec_ProcessTrustAnchorsChanges((__int64 ***)a2);
    v4 = WPP_GLOBAL_Control;
  }
  for ( i = *(_QWORD *)(a2 + 16); ; i = *(_QWORD *)(i + 24) )
  {
    if ( !i )
    {
      if ( (*((_DWORD *)v4 + 17) & 0x80000) != 0 )
      {
        Dbg_UpdateList("Update list -- before no-op suppression", a2);
        v4 = WPP_GLOBAL_Control;
      }
      v10 = *(__int64 ***)a2;
      v11 = (__int64 **)a2;
      if ( *(_QWORD *)a2 )
      {
        while ( g_fDnsServiceExit != 1 )
        {
          v12 = v10[1];
          if ( v12 && (*((_DWORD *)v12 + 21) & 0x88880000) == -2004353024 )
          {
            v10[1] = (__int64 *)v12[1];
            if ( *((_DWORD *)v12 + 18) != 255 && *((_DWORD *)v12 + 18) != 18 )
            {
              if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x80000) != 0 )
              {
                v10[1] = v12;
                Dbg_Update("Suppressing update at no-op node:", (__int64)v10);
                v10[1] = (__int64 *)v12[1];
              }
              Up_DetachAndFreeUpdateGivenPrevious(a2, v11, (int *)v10);
              v10 = v11;
            }
            v4 = WPP_GLOBAL_Control;
          }
          v11 = v10;
          v10 = (__int64 **)*v10;
          if ( !v10 )
            goto LABEL_37;
        }
        if ( v4 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)v4 + 17) & 0x80000) != 0
          && *((_BYTE *)v4 + 65) >= 4u )
        {
          v13 = 176;
          goto LABEL_44;
        }
      }
      else
      {
LABEL_37:
        if ( (*((_DWORD *)v4 + 17) & 0x80000) != 0 )
          Dbg_UpdateList("Update list after no-op suppression -- read for completion", a2);
      }
      return;
    }
    if ( g_fDnsServiceExit == 1 )
      break;
    if ( *(_DWORD *)(i + 72) )
    {
      v6 = *(_QWORD *)(i + 8);
      Dbase_LockEx(v6, 2, (__int64)"ds\\dns\\server\\server\\update.c", 12);
      v7 = *(_QWORD *)(v6 + 64);
      *(_QWORD *)(v6 + 64) = *(_QWORD *)(i + 64);
      *(_DWORD *)(v6 + 92) ^= (*(_DWORD *)(v6 + 92) ^ *(_DWORD *)(i + 92)) & 0x260133;
      v8 = (*(_DWORD *)(v6 + 92) & 0x100) == 0;
      *(_BYTE *)(v6 + 96) = *(_BYTE *)(i + 96);
      if ( !v8 )
        *(_DWORD *)(a1 + 396) |= 0x400u;
      NTree_ChangeAncestorCounters((volatile signed __int32 **)v6, v7 != 0);
      Dbase_UnlockEx(v9, 2, (__int64)"ds\\dns\\server\\server\\update.c", 29);
      *(_QWORD *)(i + 64) = v7;
      goto LABEL_21;
    }
    if ( v4 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)v4 + 17) & 0x80000) != 0
      && *((_BYTE *)v4 + 65) >= 5u )
    {
      WPP_SF_s(
        *((_QWORD *)v4 + 7),
        0xAFu,
        (__int64)&WPP_40fcce62f6f439b0ec75be29cae6130a_Traceguids,
        (const char *)(i + 102));
LABEL_21:
      v4 = WPP_GLOBAL_Control;
      continue;
    }
  }
  if ( v4 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)v4 + 17) & 0x80000) != 0
    && *((_BYTE *)v4 + 65) >= 4u )
  {
    v13 = 174;
LABEL_44:
    WPP_SF_(*((_QWORD *)v4 + 7), v13, (__int64)&WPP_40fcce62f6f439b0ec75be29cae6130a_Traceguids);
  }
}
// 1400BB9BF: variable 'v9' is possibly undefined
// 1401B9A40: using guessed type int g_fDnsServiceExit;
