Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 1536
// Total lines: 117

//----- (00000001400C1EEC) ----------------------------------------------------
__int64 __fastcall Zone_SetMasters(__int64 a1, _DWORD *a2, int a3, int a4)
{
  unsigned int v8; // ebp
  __int64 v9; // rsi
  int v10; // eax
  __int64 result; // rax
  __int64 v12; // rax
  int v13; // r9d
  _DWORD *v14; // rax
  unsigned int v15; // ecx
  unsigned __int64 v16; // rax
  __int64 *v17; // rbx
  bool v18; // zf
  const char *v19; // rbx
  const CHAR *v20; // r9
  unsigned int v21; // r9d
  unsigned int v22; // edx
  char v23[1168]; // [rsp+30h] [rbp-698h] BYREF
  __int64 v24; // [rsp+4C0h] [rbp-208h]
  __int64 v25; // [rsp+4C8h] [rbp-200h]

  v8 = 0;
  v9 = 0i64;
  memset_0(v23, 0, 0x678ui64);
  v10 = *(_DWORD *)(a1 + 372);
  if ( v10 != 1 )
  {
    if ( (unsigned int)(v10 - 2) > 2 )
      return 9611i64;
    if ( (!a2 || !a2[1] || a2 == (_DWORD *)-32i64)
      && (!a3 || (v12 = *(_QWORD *)(a1 + 1168)) == 0 || !*(_DWORD *)(v12 + 4))
      && (*(_BYTE *)(a1 + 1160) & 0x40) == 0 )
    {
      return 9620i64;
    }
    if ( a2 )
    {
      result = Zone_ValidateMasterIpList(a2);
      v8 = result;
      if ( (_DWORD)result )
        return result;
      if ( a2[1] )
      {
        v14 = DnsAddrArray_CopyAndExpand(a2, 0i64, 0i64, v13);
        v9 = (__int64)v14;
        if ( !v14 )
          return 14i64;
        v15 = 0;
        if ( v14[1] )
        {
          do
          {
            v16 = (unsigned __int64)v15++ << 6;
            *(_WORD *)(v16 + v9 + 34) = 13568;
          }
          while ( v15 < *(_DWORD *)(v9 + 4) );
        }
      }
    }
  }
  EnterCriticalSection(&csZoneList);
  v17 = (__int64 *)(a1 + 1168);
  if ( a3 )
    v17 = (__int64 *)(a1 + 1176);
  Timeout_FreeWithFunctionEx(*v17, (__int64)DnsAddrArray_Free, (__int64)"ds\\dns\\server\\server\\zone.c", 3169);
  v18 = g_bRegistryWriteBack == 0;
  *v17 = v9;
  v19 = "MasterServers";
  if ( !v18 )
  {
    if ( (*(_BYTE *)(a1 + 388) & 1) == 0 || a3 )
    {
      v20 = "MasterServers";
      if ( a3 )
        v20 = "LocalMasterServers";
      Reg_SetAddrArrayEx(a4, 0i64, a1, v20, v9, 0);
    }
    else if ( (a4 & 0x10) == 0 )
    {
      v8 = Ds_WriteZoneProperties(0i64, a1);
    }
  }
  LeaveCriticalSection(&csZoneList);
  if ( a3 )
  {
    v18 = *(_QWORD *)(a1 + 184) == 0i64;
    v25 = v9;
    if ( !v18 )
    {
      v22 = 512;
LABEL_34:
      Dns_SetPropsWithScopeSnapShot((__int64 *)a1, v22, (__int64)v23, v21);
    }
  }
  else
  {
    v18 = *(_QWORD *)(a1 + 184) == 0i64;
    v24 = v9;
    if ( !v18 )
    {
      v22 = 1024;
      goto LABEL_34;
    }
  }
  if ( !v8 )
  {
    if ( a3 )
      v19 = "LocalMasterServers";
    LogAddrArrayProperty(0x202u, a1, v19, v9);
  }
  return v8;
}
// 1400C1FAF: variable 'v13' is possibly undefined
// 1400C20C7: variable 'v21' is possibly undefined
// 1401560E0: using guessed type __int64 __fastcall DnsAddrArray_Free();
// 1401B805C: using guessed type int g_bRegistryWriteBack;
