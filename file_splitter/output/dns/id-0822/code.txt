Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 822
// Total lines: 137

//----- (0000000140072060) ----------------------------------------------------
void __fastcall Recurse_HandleCacheUpdateResult(struct _DNS_MSGINFO *a1, __int64 a2, int a3, int a4)
{
  __int64 v4; // rbp
  CDnsClientSubnetRecordsTrie *v9; // rcx
  int v10; // edi
  int v11; // edi
  int v12; // edi
  int v13; // edi
  int v14; // edi
  int v15; // edi
  bool v16; // zf
  __int64 v17; // rdx

  v4 = *((_QWORD *)a1 + 158);
  v9 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x4000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_Dqq(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x44u,
      (__int64)&WPP_045d5c95c5db3fcad9ea35acf5eb75d8_Traceguids,
      a3);
    v9 = WPP_GLOBAL_Control;
  }
  if ( a2 && v4 )
  {
    if ( v9 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)v9 + 17) & 0x4000) != 0
      && *((_BYTE *)v9 + 65) >= 5u )
    {
      WPP_SF_ddqq(*((_QWORD *)v9 + 7), 0x45u, (__int64)&WPP_045d5c95c5db3fcad9ea35acf5eb75d8_Traceguids, a3);
      v9 = WPP_GLOBAL_Control;
    }
    if ( a3 )
    {
      v10 = a3 - 123;
      if ( v10 )
      {
        v11 = v10 - 8880;
        if ( !v11 )
          goto LABEL_32;
        v12 = v11 - 498;
        if ( !v12 )
        {
          if ( v9 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)v9 + 17) & 0x4000) != 0
            && *((_BYTE *)v9 + 65) >= 4u )
          {
            WPP_SF_qq(*((_QWORD *)v9 + 7), 0x47u, (__int64)&WPP_045d5c95c5db3fcad9ea35acf5eb75d8_Traceguids, a2, v4);
          }
          goto LABEL_45;
        }
        v13 = v12 - 1;
        if ( v13 )
        {
          v14 = v13 - 2;
          if ( v14 )
          {
            v15 = v14 - 202;
            if ( v15 )
            {
              if ( v15 != 16 )
              {
                if ( v9 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                  && (*((_DWORD *)v9 + 17) & 0x4000) != 0
                  && *((_BYTE *)v9 + 65) >= 2u )
                {
                  WPP_SF_q(*((_QWORD *)v9 + 7), 0x4Bu, (__int64)&WPP_045d5c95c5db3fcad9ea35acf5eb75d8_Traceguids, a1);
                }
                goto LABEL_46;
              }
LABEL_32:
              if ( v9 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                && (*((_DWORD *)v9 + 17) & 0x4000) != 0
                && *((_BYTE *)v9 + 65) >= 4u )
              {
                WPP_SF_qq(*((_QWORD *)v9 + 7), 0x48u, (__int64)&WPP_045d5c95c5db3fcad9ea35acf5eb75d8_Traceguids, a2, v4);
              }
              goto LABEL_46;
            }
            if ( v9 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              && (*((_DWORD *)v9 + 17) & 0x4000) != 0
              && *((_BYTE *)v9 + 65) >= 4u )
            {
              WPP_SF_qq(*((_QWORD *)v9 + 7), 0x4Au, (__int64)&WPP_045d5c95c5db3fcad9ea35acf5eb75d8_Traceguids, a2, a1);
            }
            v16 = *(_WORD *)(a2 + 6310) == 0;
            goto LABEL_44;
          }
        }
      }
      if ( v9 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)v9 + 17) & 0x4000) != 0
        && *((_BYTE *)v9 + 65) >= 2u )
      {
        WPP_SF_q(*((_QWORD *)v9 + 7), 0x49u, (__int64)&WPP_045d5c95c5db3fcad9ea35acf5eb75d8_Traceguids, a2);
      }
      _InterlockedIncrement(&dword_1401C7EC8);
      v17 = 0i64;
    }
    else
    {
      if ( *(_WORD *)(a2 + 6310) )
      {
        if ( !a4 )
          goto LABEL_45;
        v16 = dword_1401B9824 == 0;
LABEL_44:
        if ( v16 )
        {
LABEL_46:
          Recurse_ResumeSuspendedQuery((__int64)a1);
          return;
        }
LABEL_45:
        Remote_ForceNsListRebuild(v4);
        goto LABEL_46;
      }
      if ( v9 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)v9 + 17) & 0x4000) != 0
        && *((_BYTE *)v9 + 65) >= 4u )
      {
        WPP_SF_qq(*((_QWORD *)v9 + 7), 0x46u, (__int64)&WPP_045d5c95c5db3fcad9ea35acf5eb75d8_Traceguids, a2, a1);
      }
      Recurse_ClearMoveToParentTtls(*((_QWORD *)a1 + 24));
      _InterlockedIncrement(&dword_1401C7EC8);
      v17 = *((_QWORD *)a1 + 24);
      *((_BYTE *)a1 + 1420) = 0;
    }
    Recurse_Question(a1, v17, *((_WORD *)a1 + 248), *((_WORD *)a1 + 249));
  }
}
// 1401B9824: using guessed type int dword_1401B9824;
// 1401C7EC8: using guessed type int dword_1401C7EC8;
