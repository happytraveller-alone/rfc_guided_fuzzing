Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 1492
// Total lines: 196

//----- (00000001400BBB10) ----------------------------------------------------
__int64 __fastcall Up_PrepareUpdateListForExecution(__int64 a1, __int64 a2, __int64 a3, char a4)
{
  CDnsClientSubnetRecordsTrie *v8; // rcx
  __int64 **v9; // rbx
  __int64 *v10; // rdi
  char *i; // rax
  int updated; // r9d
  CDnsClientSubnetRecordsTrie *v14; // rcx
  unsigned __int16 v15; // dx
  __int64 v16; // rdi
  __int64 v17; // rbx
  __int64 v18; // rax
  __int64 v19; // rax
  __int64 v20; // rax
  char v21; // si
  __int64 v22; // rcx
  __int64 v23; // rsi
  unsigned int v24; // [rsp+60h] [rbp+18h] BYREF

  v8 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x80000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_sd(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0xB1u,
      (__int64)&WPP_40fcce62f6f439b0ec75be29cae6130a_Traceguids,
      *(const char **)(a1 + 16));
    v8 = WPP_GLOBAL_Control;
  }
  v9 = *(__int64 ***)a3;
  if ( *(_QWORD *)a3 )
  {
    while ( 1 )
    {
      if ( g_fDnsServiceExit == 1 )
      {
        v14 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x80000) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          v15 = 178;
          goto LABEL_43;
        }
        return 1167617i64;
      }
      v10 = v9[1];
      if ( (*((_DWORD *)v10 + 21) & 0x88880000) != -2004353024 )
        break;
LABEL_21:
      v9 = (__int64 **)*v9;
      if ( !v9 )
      {
        v8 = WPP_GLOBAL_Control;
        goto LABEL_23;
      }
    }
    for ( i = *(char **)(a3 + 16); i && *((__int64 **)i + 1) != v10; i = (char *)*((_QWORD *)i + 3) )
      ;
    if ( a2 )
    {
      if ( i )
        goto LABEL_20;
      i = *(char **)(a2 + 16);
      if ( !i )
      {
LABEL_18:
        i = NTree_CopyNode((unsigned __int8 *)v9[1]);
        if ( !i )
          return 2i64;
        *((_DWORD *)i + 18) = -1;
        *((_QWORD *)i + 1) = v10;
        *((_DWORD *)i + 21) = -2004353024;
        *((_QWORD *)i + 3) = *(_QWORD *)(a3 + 16);
        *(_QWORD *)(a3 + 16) = i;
        goto LABEL_20;
      }
      do
      {
        if ( *((__int64 **)i + 1) == v10 )
          break;
        i = (char *)*((_QWORD *)i + 3);
      }
      while ( i );
    }
    if ( !i )
      goto LABEL_18;
LABEL_20:
    v9[1] = (__int64 *)i;
    goto LABEL_21;
  }
LABEL_23:
  if ( (*(_BYTE *)(a1 + 388) & 1) != 0
    && (a4 & 1) == 0
    && (*(_DWORD *)(a1 + 372) != 1 || (*(_BYTE *)(a1 + 1040) & 4) == 0 || (*(_DWORD *)(a3 + 40) & 0x200000) == 0) )
  {
    if ( v8 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)v8 + 17) & 0x80000) != 0
      && *((_BYTE *)v8 + 65) >= 5u )
    {
      WPP_SF_s(
        *((_QWORD *)v8 + 7),
        0xB5u,
        (__int64)&WPP_40fcce62f6f439b0ec75be29cae6130a_Traceguids,
        *(const char **)(a1 + 16));
    }
    updated = Ds_UpdateNodeListFromDs(a1, *(_QWORD *)(a3 + 16), *(_DWORD *)(a3 + 40));
    if ( !updated )
      goto LABEL_37;
    v8 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x80000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_Ds(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0xB6u,
        (__int64)&WPP_40fcce62f6f439b0ec75be29cae6130a_Traceguids,
        updated,
        *(_QWORD *)(a1 + 16));
LABEL_37:
      v8 = WPP_GLOBAL_Control;
    }
  }
  v16 = *(_QWORD *)(a3 + 16);
  if ( v16 )
  {
    while ( g_fDnsServiceExit != 1 )
    {
      v17 = *(_QWORD *)(v16 + 8);
      if ( v17 )
        v18 = *(_QWORD *)(v17 + 56);
      else
        v18 = 0i64;
      v21 = 1;
      if ( v18 )
      {
        v19 = v17 ? *(_QWORD *)(v17 + 56) : 0i64;
        if ( *(_DWORD *)(v19 + 372) == 1 )
        {
          v20 = v17 ? *(_QWORD *)(v17 + 56) : 0i64;
          if ( (*(_BYTE *)(v20 + 1040) & 4) != 0 )
            v21 = 0;
        }
      }
      v24 = -1;
      acquireRead(DbaseLock, 0xFFFFFFFF, &v24);
      if ( (*(_BYTE *)(v17 + 92) & 1) != 0 )
        v23 = 0i64;
      else
        v23 = RR_ListCopy(v22, *(unsigned __int16 **)(v17 + 64), v21);
      v24 = -1;
      releaseRead(DbaseLock, &v24, 1);
      *(_QWORD *)(v16 + 64) = v23;
      *(_DWORD *)(v16 + 92) = *(_DWORD *)(v17 + 92) & 0x260133;
      v16 = *(_QWORD *)(v16 + 24);
      if ( !v16 )
      {
        v8 = WPP_GLOBAL_Control;
        goto LABEL_66;
      }
    }
    v14 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x80000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      v15 = 183;
LABEL_43:
      WPP_SF_(*((_QWORD *)v14 + 7), v15, (__int64)&WPP_40fcce62f6f439b0ec75be29cae6130a_Traceguids);
    }
    return 1167617i64;
  }
  else
  {
LABEL_66:
    if ( (*((_DWORD *)v8 + 17) & 0x80000) != 0 && *((_BYTE *)v8 + 65) >= 5u )
    {
      Dbg_UpdateList("Update list after prepare:", a3);
      v8 = WPP_GLOBAL_Control;
    }
    if ( v8 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)v8 + 17) & 0x80000) != 0
      && *((_BYTE *)v8 + 65) >= 4u )
    {
      WPP_SF_(*((_QWORD *)v8 + 7), 0xB8u, (__int64)&WPP_40fcce62f6f439b0ec75be29cae6130a_Traceguids);
    }
    return 0i64;
  }
}
// 1400BBDD5: variable 'v22' is possibly undefined
// 1401B9A40: using guessed type int g_fDnsServiceExit;
// 1401EC5E8: using guessed type __int64 DbaseLock;
