Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 1550
// Total lines: 259

//----- (00000001400C3C58) ----------------------------------------------------
__int64 __fastcall Zone_CreateNewPrimaryEx(
        __int64 *a1,
        char *a2,
        char *a3,
        __int64 a4,
        unsigned int a5,
        __int64 a6,
        int a7,
        const wchar_t **a8)
{
  char *v8; // r15
  const wchar_t *v10; // rbp
  const wchar_t *v11; // rdx
  const wchar_t *v12; // rax
  int v13; // ebx
  unsigned int DefaultSoa; // edi
  __int64 v15; // rbx
  unsigned int v16; // eax
  CDnsClientSubnetRecordsTrie *v18; // rcx
  unsigned __int16 v19; // dx
  const char *v20; // r9
  int v21; // ebp
  unsigned int v22; // eax
  __int64 v23[9]; // [rsp+70h] [rbp-48h] BYREF

  v8 = (char *)a4;
  v23[0] = 0i64;
  v10 = L".";
  if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x10) == 0
    || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
  {
    v13 = a7;
  }
  else
  {
    if ( a8 )
      v11 = a8[1];
    else
      v11 = L"Default";
    if ( a8 )
      v12 = *a8;
    else
      v12 = L".";
    v13 = a7;
    WPP_SF_ssdsLSS(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      (__int64)v11,
      (__int64)a3,
      a2,
      (__int64)a3,
      a5,
      a4,
      a7,
      (__int64)v12,
      (__int64)v11);
  }
  DefaultSoa = Zone_CreateEx(v23, 1i64, a2, 0, v13, 0i64, a5, a6, v8, 0, 0i64, (__int64)a8, 0i64);
  if ( DefaultSoa || (v15 = v23[0]) == 0 )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x10) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      if ( a8 )
        v10 = *a8;
      WPP_SF_sSD(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x4Cu,
        (__int64)&WPP_e9a0d5dea449334d7c383477da81f939_Traceguids,
        a2,
        (__int64)v10);
    }
    *a1 = 0i64;
    return DefaultSoa;
  }
  if ( (a7 & 1) == 0 )
  {
    v21 = a7;
    goto LABEL_46;
  }
  v16 = Zone_Load(v23[0], 1);
  DefaultSoa = v16;
  if ( !v16 )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x10) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      if ( a8 )
        v10 = *a8;
      if ( a5 )
        v8 = "directory";
      WPP_SF_sSs(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x4Du,
        (__int64)&WPP_e9a0d5dea449334d7c383477da81f939_Traceguids,
        a2,
        (__int64)v10,
        (__int64)v8);
    }
    goto LABEL_24;
  }
  if ( !*(_QWORD *)(v15 + 136) )
  {
    if ( v16 != 32 )
    {
      v18 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
        goto LABEL_87;
      if ( (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x10) == 0 || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
        goto LABEL_83;
      v19 = 79;
      goto LABEL_38;
    }
LABEL_40:
    v21 = a7;
    if ( (a7 & 2) == 0 )
    {
      v18 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
        goto LABEL_87;
      if ( (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x10) == 0 || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
        goto LABEL_83;
      v19 = 80;
      goto LABEL_38;
    }
LABEL_46:
    if ( (*(_BYTE *)(v15 + 388) & 1) != 0
      || (*(_BYTE *)(v15 + 1040) & 2) == 0
      || (LODWORD(v23[0]) = *(_DWORD *)(v15 + 372) == 1,
          (DefaultSoa = Reg_SetValue(0, 0i64, v15, "IsKeymaster", 4u, (BYTE *)v23, 4u)) == 0) )
    {
      DefaultSoa = Zone_PrepareForLoad(v15);
      if ( DefaultSoa )
        goto LABEL_82;
      Zone_SetAutoCreateLocalNS(v15);
      if ( (v21 & 0x10000000) != 0 )
      {
        DefaultSoa = RpcUtil_SwitchSecurityContext(0);
        if ( DefaultSoa )
          goto LABEL_82;
      }
      DefaultSoa = Zone_CreateDefaultSoa(v15, a3);
      if ( !DefaultSoa )
        DefaultSoa = Zone_CreateDefaultNs(v15);
      if ( (v21 & 0x10000000) != 0 )
      {
        v22 = RpcUtil_SwitchSecurityContext(1);
        if ( DefaultSoa )
          goto LABEL_82;
        DefaultSoa = v22;
      }
      if ( DefaultSoa )
        goto LABEL_82;
      if ( !_stricmp(a2, "127.in-addr.arpa")
        && (unsigned int)Zone_CreateLocalHostPtrRecord(v15)
        && WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x10) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x52u, (__int64)&WPP_e9a0d5dea449334d7c383477da81f939_Traceguids);
      }
      DefaultSoa = Zone_ActivateLoadedZone(v15);
      if ( DefaultSoa )
        goto LABEL_82;
      if ( (*(_BYTE *)(v15 + 396) & 4) == 0 )
      {
        if ( (*(_BYTE *)(v15 + 388) & 1) != 0 )
        {
          DefaultSoa = Ds_WriteZoneToDs(v15, 0, 0);
          if ( DefaultSoa )
          {
            v18 = WPP_GLOBAL_Control;
            if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
              goto LABEL_87;
            if ( (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x10) == 0 || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
              goto LABEL_83;
            v20 = *(const char **)(v15 + 16);
            v19 = 83;
            goto LABEL_39;
          }
        }
        else if ( !(unsigned int)File_WriteZoneToFile(v15, 0i64, v21) )
        {
          v18 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x10) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            WPP_SF_s(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x54u,
              (__int64)&WPP_e9a0d5dea449334d7c383477da81f939_Traceguids,
              *(const char **)(v15 + 136));
            v18 = WPP_GLOBAL_Control;
          }
          DefaultSoa = 9654;
          goto LABEL_83;
        }
      }
LABEL_24:
      *(_DWORD *)(v15 + 396) &= ~0x2000u;
      Zone_UnlockAfterWriteEx(v15, 1, (__int64)"ds\\dns\\server\\server\\zone.c", 248);
      *a1 = v15;
      return 0i64;
    }
    v18 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
      goto LABEL_87;
    if ( (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x10) == 0 || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
      goto LABEL_83;
    v19 = 81;
LABEL_38:
    v20 = a2;
LABEL_39:
    WPP_SF_s(*((_QWORD *)v18 + 7), v19, (__int64)&WPP_e9a0d5dea449334d7c383477da81f939_Traceguids, v20);
LABEL_82:
    v18 = WPP_GLOBAL_Control;
    goto LABEL_83;
  }
  if ( v16 == 2 )
    goto LABEL_40;
  v18 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
  {
    if ( (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x10) != 0 && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      if ( a8 )
        v10 = *a8;
      WPP_SF_ssS(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x4Eu,
        (__int64)&WPP_e9a0d5dea449334d7c383477da81f939_Traceguids,
        v8,
        (__int64)a2,
        (__int64)v10);
      goto LABEL_82;
    }
LABEL_83:
    if ( v18 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)v18 + 68) & 0x10) != 0
      && *((_BYTE *)v18 + 65) >= 4u )
    {
      WPP_SF_Ds(
        *((_QWORD *)v18 + 7),
        0x55u,
        (__int64)&WPP_e9a0d5dea449334d7c383477da81f939_Traceguids,
        DefaultSoa,
        *(_QWORD *)(v15 + 16));
    }
  }
LABEL_87:
  Zone_Delete((struct _zone_info *)v15, a7, 0, 0, 0);
  *a1 = 0i64;
  return DefaultSoa;
}
// 140188260: using guessed type wchar_t aDefault_1[8];
