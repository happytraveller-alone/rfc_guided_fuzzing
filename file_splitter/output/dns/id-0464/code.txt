Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 464
// Total lines: 333

//----- (000000014003BCC0) ----------------------------------------------------
__int64 __fastcall Ds_OpenServer(__int16 a1)
{
  __int16 v1; // r15
  unsigned int v2; // r13d
  __int64 result; // rax
  __int64 v4; // rdx
  CDnsClientSubnetRecordsTrie *v5; // rcx
  int RootDseAttributes; // esi
  int v7; // ebx
  __int64 v8; // rdx
  unsigned int CurrentTimeInSeconds; // r15d
  int v10; // eax
  LDAP *v11; // r15
  DWORD v12; // r13d
  unsigned int v13; // eax
  int LastError; // eax
  unsigned int v15; // ebx
  CDnsClientSubnetRecordsTrie *v16; // rcx
  int v17; // eax
  CDnsClientSubnetRecordsTrie *v18; // rcx
  __int128 v19; // [rsp+40h] [rbp-20h] BYREF
  __int128 v20; // [rsp+50h] [rbp-10h] BYREF
  int v22; // [rsp+A8h] [rbp+48h] BYREF
  int v23; // [rsp+B0h] [rbp+50h] BYREF
  LDAP *v24; // [rsp+B8h] [rbp+58h] BYREF

  v1 = a1;
  v2 = 0;
  v24 = 0i64;
  v23 = 0;
  if ( g_bDisabledDs )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
    {
      WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x81u, (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids);
    }
    return 9717i64;
  }
  if ( pServerLdap )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
    {
      WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x82u, (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids);
    }
    return 0i64;
  }
  if ( !(unsigned int)Ds_IsDsServer(0) )
  {
    v5 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x83u, (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids);
      v5 = WPP_GLOBAL_Control;
    }
    RootDseAttributes = 9717;
LABEL_73:
    if ( v5 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)v5 + 17) & 0x400) != 0
      && *((_BYTE *)v5 + 65) >= 2u )
    {
      WPP_SF_D(*((_QWORD *)v5 + 7), 0x91u, (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids, RootDseAttributes);
    }
    if ( (v1 & 0x1000) != 0 )
    {
      v20 = DNS_EVENT_DS_OPEN_FAILED;
      Eventlog_LogEvent((__int64)&v20, v4, 0, 0i64, 0i64, RootDseAttributes, 0, 0i64);
    }
    v15 = Ds_ErrorHandler(RootDseAttributes, 0i64, 0i64, 0);
    Ds_LdapUnbind(&v24);
    pServerLdap = 0i64;
    goto LABEL_80;
  }
  if ( NtCurrentTeb()->IsImpersonating )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x84u, (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids);
    }
    return 1346i64;
  }
  v7 = 0;
  EnterCriticalSection(&g_csGeneralServer);
  if ( !g_AttemptingDsOpen )
  {
    v7 = 1;
    g_AttemptingDsOpen = 1;
  }
  LeaveCriticalSection(&g_csGeneralServer);
  if ( !v7 )
    return 9717i64;
  if ( pcsLdap )
    goto LABEL_47;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x85u, (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids);
  }
  result = DnsInitializeCriticalSection(&csLdap);
  if ( !(_DWORD)result )
  {
    pcsLdap = &csLdap;
LABEL_47:
    while ( 1 )
    {
      CurrentTimeInSeconds = Dns_GetCurrentTimeInSeconds();
      dword_1401B9714 = CurrentTimeInSeconds;
      v10 = Ds_WaitForStartup();
      v22 = v10;
      RootDseAttributes = v10;
      if ( !v10 )
        break;
      v5 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_D(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x87u,
          (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
          v10);
        v5 = WPP_GLOBAL_Control;
      }
      if ( g_fDnsServiceExit == 1 )
        goto LABEL_83;
      if ( !(unsigned int)Thread_ServiceCheck(0) )
      {
        v5 = WPP_GLOBAL_Control;
LABEL_83:
        if ( v5 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)v5 + 17) & 0x400) != 0
          && *((_BYTE *)v5 + 65) >= 4u )
        {
          WPP_SF_(*((_QWORD *)v5 + 7), 0x88u, (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids);
          goto LABEL_71;
        }
LABEL_72:
        v1 = a1;
        dword_1401B9744 = 1;
        goto LABEL_73;
      }
      Service_LoadCheckpoint();
      if ( CurrentTimeInSeconds > v2 )
      {
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
        {
          WPP_SF_D(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x89u,
            (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
            RootDseAttributes);
        }
        v19 = DNS_EVENT_DS_OPEN_WAIT;
        Eventlog_LogEvent((__int64)&v19, v8, 0, 0i64, 0i64, 0, 0, 0i64);
        v2 = CurrentTimeInSeconds + 120;
      }
    }
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x86u, (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids);
    }
    v24 = Ds_Connect(0i64, 0, &v22);
    v11 = v24;
    if ( !v24 )
    {
      v12 = 0;
      while ( 1 )
      {
        RootDseAttributes = 9717;
        if ( v22 )
          RootDseAttributes = v22;
        v22 = RootDseAttributes;
        v5 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          WPP_SF_D(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x8Au,
            (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
            RootDseAttributes);
          v5 = WPP_GLOBAL_Control;
        }
        v13 = v12;
        v12 += 1000;
        if ( v13 >= 0x1F40 )
          break;
        Sleep(v12);
        v24 = Ds_Connect(0i64, 0, &v22);
        v11 = v24;
        if ( v24 )
          goto LABEL_62;
      }
      if ( v5 == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_DWORD *)v5 + 17) & 0x400) == 0
        || *((_BYTE *)v5 + 65) < 2u )
      {
        goto LABEL_72;
      }
      WPP_SF_D(*((_QWORD *)v5 + 7), 0x8Bu, (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids, RootDseAttributes);
      goto LABEL_71;
    }
LABEL_62:
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_q(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x8Cu,
        (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
        v11);
    }
    RootDseAttributes = Ds_LoadRootDseAttributes(v11);
    if ( RootDseAttributes )
    {
      v5 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        LastError = LdapGetLastError();
        WPP_SF_D(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x8Du,
          (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
          LastError);
        goto LABEL_71;
      }
      goto LABEL_72;
    }
    Ds_SetDsaVersionGlobals(v11);
    RootDseAttributes = Ds_InitializeSecurity(v11, &v23);
    if ( RootDseAttributes )
    {
LABEL_71:
      v5 = WPP_GLOBAL_Control;
      goto LABEL_72;
    }
    if ( (unsigned int)addProxiesGroup(v11) )
    {
      v16 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
        goto LABEL_102;
      if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) == 0 || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
      {
LABEL_98:
        if ( v16 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)v16 + 17) & 0x400) != 0
          && *((_BYTE *)v16 + 65) >= 4u )
        {
          WPP_SF_S(
            *((_QWORD *)v16 + 7),
            0x8Fu,
            (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
            DistinguishedName);
        }
LABEL_102:
        RootDseAttributes = addDnsToDirectory(v11, v23);
        if ( !RootDseAttributes )
        {
          qword_1401EC400 = 0i64;
          AddNodeLdapMod = 0;
          qword_1401EC3D0 = (__int64)&qword_1401EC3F8;
          qword_1401EC3C8 = (__int64)L"objectClass";
          qword_1401EC3F8 = (__int64)L"dnsNode";
          pServerLdap = v11;
          dword_1401B9740 = 1;
          v18 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            WPP_SF_q(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x90u,
              (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
              v11);
          }
          Ds_ReadServerObjectSD((__int64)v18, v4, 0);
          v15 = 0;
LABEL_80:
          EnterCriticalSection(&g_csGeneralServer);
          g_AttemptingDsOpen = 0;
          LeaveCriticalSection(&g_csGeneralServer);
          return v15;
        }
        goto LABEL_71;
      }
      v17 = LdapGetLastError();
      WPP_SF_D(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x8Eu,
        (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
        v17);
    }
    v16 = WPP_GLOBAL_Control;
    goto LABEL_98;
  }
  return result;
}
// 14003BF71: variable 'v8' is possibly undefined
// 14003C135: variable 'v4' is possibly undefined
// 14003C319: variable 'v18' is possibly undefined
// 140186378: using guessed type __int128 DNS_EVENT_DS_OPEN_WAIT;
// 140186AB8: using guessed type __int128 DNS_EVENT_DS_OPEN_FAILED;
// 14018C308: using guessed type wchar_t aDnsnode[8];
// 1401B9714: using guessed type int dword_1401B9714;
// 1401B9740: using guessed type int dword_1401B9740;
// 1401B9744: using guessed type int dword_1401B9744;
// 1401B9A40: using guessed type int g_fDnsServiceExit;
// 1401EC330: using guessed type int g_bDisabledDs;
// 1401EC338: using guessed type int g_AttemptingDsOpen;
// 1401EC3C0: using guessed type int AddNodeLdapMod;
// 1401EC3C8: using guessed type __int64 qword_1401EC3C8;
// 1401EC3D0: using guessed type __int64 qword_1401EC3D0;
// 1401EC3F8: using guessed type __int64 qword_1401EC3F8;
// 1401EC400: using guessed type __int64 qword_1401EC400;
