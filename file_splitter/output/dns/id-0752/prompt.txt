Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 752
// Total lines: 343

//----- (0000000140069380) ----------------------------------------------------
DWORD __fastcall calculateZoneNextRollActivityTime(__int64 a1)
{
  int v1; // eax
  __int64 v3; // r13
  unsigned int v4; // r15d
  int v5; // r12d
  __int64 v6; // r14
  FILETIME *v7; // rbx
  unsigned int v8; // ebx
  char *v9; // rax
  bool v10; // zf
  __int128 *v11; // rax
  unsigned int v12; // r13d
  unsigned int v13; // ecx
  unsigned int v14; // r8d
  unsigned int v15; // ebx
  unsigned int v16; // edx
  unsigned int v17; // ebx
  unsigned __int16 *v18; // rbx
  _QWORD *v19; // rdi
  __int64 v20; // r9
  __int64 v21; // rdx
  __int64 v22; // rcx
  u_long v23; // ebx
  unsigned int v24; // edi
  int v25; // ecx
  __int64 v26; // rax
  LONG v27; // eax
  FILETIME v28; // rcx
  u_long v29; // ebx
  int MaxTtlAmongAllZoneScopes; // eax
  FILETIME v31; // rax
  __int64 v32; // rcx
  char *v33; // rax
  unsigned __int16 v34; // dx
  FILETIME FileTime2; // [rsp+48h] [rbp-39h] BYREF
  __int64 v37; // [rsp+50h] [rbp-31h]
  FILETIME FileTime1; // [rsp+58h] [rbp-29h] BYREF
  FILETIME v39; // [rsp+60h] [rbp-21h] BYREF
  FILETIME v40[2]; // [rsp+68h] [rbp-19h] BYREF
  __int16 v41; // [rsp+78h] [rbp-9h] BYREF
  char v42; // [rsp+7Ah] [rbp-7h]
  FILETIME v43; // [rsp+80h] [rbp-1h] BYREF
  __int128 v44; // [rsp+88h] [rbp+7h] BYREF
  unsigned __int16 *v45[3]; // [rsp+98h] [rbp+17h] BYREF

  v1 = *(_DWORD *)(a1 + 1040);
  v39.dwLowDateTime = -1;
  v39.dwHighDateTime = -1;
  FileTime1.dwLowDateTime = -1;
  v3 = 0i64;
  FileTime1.dwHighDateTime = -1;
  v4 = -1;
  v43 = 0i64;
  v5 = 0;
  v37 = 0i64;
  if ( (v1 & 0x20000) != 0 )
  {
    *(_QWORD *)(a1 + 1128) = 0i64;
    *(_DWORD *)(a1 + 1040) = v1 & 0xFFFDFFFF;
  }
  v6 = *(_QWORD *)(a1 + 1136);
  if ( v6 )
  {
    while ( 1 )
    {
      if ( (unsigned int)(*(_DWORD *)(v6 + 96) - 2) > 6 )
      {
        FileTime2 = 0i64;
        v7 = (FILETIME *)(v6 + 84);
        if ( CompareFileTime((const FILETIME *)(v6 + 84), &FileTime2) && *(_DWORD *)(v6 + 96) != 9 )
        {
          if ( !*(_QWORD *)(a1 + 1128) )
          {
            if ( *(_DWORD *)(v6 + 36) )
            {
              if ( CompareFileTime((const FILETIME *)(v6 + 84), &v39) < 0 )
              {
                v39 = *v7;
                v43 = (FILETIME)v6;
                goto LABEL_16;
              }
              if ( *(_DWORD *)(v6 + 36) )
                goto LABEL_16;
            }
            if ( CompareFileTime((const FILETIME *)(v6 + 84), &FileTime1) < 0 )
            {
              FileTime1 = *v7;
              v37 = v6;
            }
          }
LABEL_16:
          v8 = OffsetFromCurrentTime((FILETIME *)(v6 + 84));
          if ( !v8 && *(_DWORD *)(v6 + 96) != 1 )
          {
            if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
              && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
            {
              v9 = Dbg_GuidString((const IID *)(v6 + 8));
              WPP_SF_Ss(
                *((_QWORD *)WPP_GLOBAL_Control + 7),
                0x52u,
                (__int64)&WPP_bdeacb4259f0347d69c055acf1d289ef_Traceguids,
                (const unsigned __int16 *)v9,
                *(_QWORD *)(a1 + 16));
            }
            v10 = *(_DWORD *)(v6 + 36) == 0;
            *(_DWORD *)(v6 + 96) = 1;
            v11 = &DNS_EVENT_NEXT_KSKROLLOVER_STAGE;
            if ( v10 )
              v11 = (__int128 *)&DNS_EVENT_NEXT_ZSKROLLOVER_STAGE;
            *(_OWORD *)&v40[0].dwLowDateTime = *v11;
            LogDnssecKeyRollover(v40, a1, v6, L"DNS_SKD_STATUS_QUEUED");
            v5 = 1;
          }
          if ( *(_DWORD *)(v6 + 36) && !*(_DWORD *)(v6 + 104) && *(_DWORD *)(v6 + 68) != -1 && v8 )
          {
            v12 = 0;
            v13 = 0;
            if ( dword_1401B99F0 )
              v8 *= 10080;
            if ( v8 <= 0x15180 )
            {
              if ( *(_DWORD *)(v6 + 108) < 3u )
              {
                v12 = 7667;
                *(_DWORD *)(v6 + 108) = 3;
                v13 = 1;
                v5 = 1;
              }
              goto LABEL_46;
            }
            v14 = *(_DWORD *)(v6 + 68) / 0x14u;
            if ( v8 <= v14 )
            {
              if ( *(_DWORD *)(v6 + 108) < 2u )
              {
                *(_DWORD *)(v6 + 108) = 2;
                v12 = 7668;
                v5 = 1;
                v13 = (v8 + 43200) / 0x15180;
              }
              v15 = v8 - 86400;
              goto LABEL_42;
            }
            v16 = *(_DWORD *)(v6 + 68) / 0xAu;
            if ( v8 > v16 )
            {
              v17 = v8 - v16;
              if ( v17 < v4 )
                v4 = v17;
            }
            else
            {
              if ( !*(_DWORD *)(v6 + 108) )
              {
                *(_DWORD *)(v6 + 108) = 1;
                v12 = 7668;
                v5 = 1;
                v13 = (v8 + 43200) / 0x15180;
              }
              v15 = v8 - v14;
LABEL_42:
              if ( v15 < v4 )
                v4 = v15;
            }
LABEL_46:
            if ( v12 )
            {
              v45[1] = *(unsigned __int16 **)(a1 + 24);
              v18 = (unsigned __int16 *)&LocaleName;
              v45[2] = (unsigned __int16 *)v13;
              v40[0] = 0i64;
              v41 = 257;
              v42 = 4;
              StringFromGuid((const IID *)(v6 + 8), (void **)v40);
              v19 = (_QWORD *)v40[0];
              if ( v40[0] )
                v18 = (unsigned __int16 *)v40[0];
              v45[0] = v18;
              *(_OWORD *)&v40[0].dwLowDateTime = *GetEventDescriptor(&v44, v12);
              Eventlog_LogEvent((__int64)v40, v21, v20 + 3, v45, (unsigned __int8 *)&v41, v20, v20, v20);
              Mem_Free(v19, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\olskeyrollover.c", 3677);
            }
          }
          if ( v5 && (*(_BYTE *)(a1 + 388) & 1) == 0 )
          {
            DnsOls_WriteSkdToStorage(0, a1, v6, 0);
            v5 = 0;
          }
        }
      }
      else if ( !*(_QWORD *)(a1 + 1128) )
      {
        *(_QWORD *)(a1 + 1128) = v6;
        *(_QWORD *)(a1 + 1116) = *(_QWORD *)(v6 + 84);
      }
      v6 = *(_QWORD *)v6;
      if ( !v6 )
      {
        if ( v5 )
          DnsOls_WriteSkdToStorage(0, a1, 0i64, 0);
        v3 = v37;
        break;
      }
    }
  }
  v22 = *(_QWORD *)(a1 + 1128);
  if ( !v22 )
  {
    v40[0].dwLowDateTime = -1;
    v40[0].dwHighDateTime = -1;
    if ( CompareFileTime(&FileTime1, v40) )
    {
      v40[0].dwLowDateTime = -1;
      v40[0].dwHighDateTime = -1;
      if ( CompareFileTime(&v39, v40) )
      {
        if ( !*(_DWORD *)(v3 + 104) )
        {
          v23 = *(_DWORD *)(a1 + 1056);
          v24 = *(_DWORD *)(a1 + 1072);
          if ( !v23 )
            v23 = ntohl(*(_DWORD *)(a1 + 528));
          if ( dword_1401B99F0 )
          {
            v25 = 60;
            if ( v24 < 0x3C )
              v25 = v24;
            v24 = v25;
          }
          v40[0] = 0i64;
          if ( CompareFileTime((const FILETIME *)(v3 + 116), v40) )
          {
            v26 = *(_QWORD *)(v3 + 116);
            FileTime2 = (FILETIME)(10000000i64 * (v24 + v23) + v26);
            v37 = (__int64)FileTime2;
            v27 = CompareFileTime(&FileTime2, &FileTime1);
            v28 = FileTime2;
            if ( v27 < 0 )
              v28 = FileTime1;
            FileTime2 = v28;
            if ( !(unsigned int)OffsetFromCurrentTime(&FileTime2) )
              GetSystemTimeAsFileTime(&FileTime2);
          }
          else
          {
            v37 = 10000000i64 * (v24 + v23) + *(_QWORD *)&FileTime1;
            FileTime2 = (FILETIME)v37;
          }
          v29 = ntohl(*(_DWORD *)(a1 + 528));
          if ( v29 <= (unsigned int)Zone_GetMaxTtlAmongAllZoneScopes(a1) )
            MaxTtlAmongAllZoneScopes = Zone_GetMaxTtlAmongAllZoneScopes(a1);
          else
            MaxTtlAmongAllZoneScopes = ntohl(*(_DWORD *)(a1 + 528));
          v40[0] = (FILETIME)(10000000i64 * (v24 + MaxTtlAmongAllZoneScopes) + *(_QWORD *)&FileTime2);
          FileTime2.dwLowDateTime += 10000000 * (v24 + MaxTtlAmongAllZoneScopes);
          FileTime2.dwHighDateTime = v40[0].dwHighDateTime;
          if ( CompareFileTime(&FileTime2, &v39) >= 0 )
          {
            FileTime1.dwLowDateTime = -1;
            FileTime1.dwHighDateTime = -1;
          }
          else
          {
            v39.dwLowDateTime = -1;
            v39.dwHighDateTime = -1;
          }
        }
      }
    }
    if ( CompareFileTime(&FileTime1, &v39) >= 0 )
    {
      v40[0].dwLowDateTime = -1;
      v40[0].dwHighDateTime = -1;
      v31.dwLowDateTime = CompareFileTime(&v39, v40);
      if ( !v31.dwLowDateTime )
      {
LABEL_84:
        v32 = *(_QWORD *)(a1 + 1128);
        if ( v32 )
        {
          v31.dwLowDateTime = (unsigned int)WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            v33 = Dbg_GuidString((const IID *)(v32 + 8));
            v34 = 83;
LABEL_93:
            v31.dwLowDateTime = WPP_SF_sS(
                                  *((_QWORD *)WPP_GLOBAL_Control + 7),
                                  v34,
                                  (__int64)&WPP_bdeacb4259f0347d69c055acf1d289ef_Traceguids,
                                  *(const char **)(a1 + 16),
                                  (__int64)v33);
            goto LABEL_94;
          }
        }
        goto LABEL_94;
      }
      *(FILETIME *)(a1 + 1128) = v43;
      v31 = v39;
    }
    else
    {
      v31 = FileTime1;
      *(_QWORD *)(a1 + 1128) = v3;
    }
    *(FILETIME *)(a1 + 1116) = v31;
    goto LABEL_84;
  }
  v31.dwLowDateTime = (unsigned int)WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    v33 = Dbg_GuidString((const IID *)(v22 + 8));
    v34 = 84;
    goto LABEL_93;
  }
LABEL_94:
  if ( v4 != -1 )
  {
    if ( dword_1401B99F0 )
      v4 = v4 / 0x2760 + 1;
    CurrentTimePlusOffset(&v43, v4);
    v31.dwLowDateTime = CompareFileTime(&v43, (const FILETIME *)(a1 + 1116));
    if ( (v31.dwLowDateTime & 0x80000000) != 0 )
    {
      v31.dwLowDateTime = v43.dwLowDateTime;
      *(FILETIME *)(a1 + 1116) = v43;
    }
    *(_DWORD *)(a1 + 1040) |= 0x20000u;
  }
  return v31.dwLowDateTime;
}
// 1400696E0: variable 'v21' is possibly undefined
// 1400696B9: variable 'v20' is possibly undefined
// 140187B50: using guessed type __int128 DNS_EVENT_NEXT_KSKROLLOVER_STAGE;
// 1401B99F0: using guessed type int dword_1401B99F0;
##############################
Role: Let's assume that you are an advanced reverse engineer and you are reverse engineering a network driver using IDA Pro, and you are also familiar with the RFC documentation. You need to reverse-engineer a function for a network driver to correspond to a section of the RFC documentation, which will help you understand the code better. The driver you're reversing is Schannel.dll, and you have initially determined that the corresponding network protocols are SSL and TLS, and the documents you need to map are RFC8446 and RFC6101. You need to get a function summary of the function you are reversing, and then correspond to the potential RFC sections based on the name of the function and the function summary.
Function Background: The function is reverse engineered from the driver file Schannel.dll on Windows platform. Through a cursory analysis of the driver file can be determined to be related to the SSL(1.3), TLS(3.0) protocol, that is, with RFC8446, RFC6101 strong correlation.

Output Function Summary: Summarizes the function's functionality with several phrases instead of sentences, focuses on covering the function's control flow information, and highlights the protocol function points implemented by the function. Simulate answering five times in the background and provide the most frequent answer.

Retrieve document sections: giving matches for document sections(FunctionMatchRFCResult) that the code may related to. NOTE if the code is only business related(i.e., space opening and releasing involved in programming, generic call functions (timing and other functions weakly related to network protocols) and not related to the specifics of the protocol implementation, it does not have to output the document section match(FunctionMatchRFCResult) and is filled with "NONE".

Retrieve document sections Thinking Chain: The function code is matched with the RFC document section, and the thinking chain is provided to help you solve the problem better:
	1. Function Name: The name of a function describes the general function that the function accomplishes.
	2. Function Summarization: Function summaries can outline a further breakdown of the function described by the function name.
	3. Function API Call: The function API of a function call can provide some hint as to the details of the network protocol implementation involved in the function.
	4. Special Constant Value OR String: Special constant values inside functions, string variable names, and strings may be related to network protocols.
	5. Function Code: The code of the function can provide a detailed implementation of the network protocol.
Generate Function Information Collection with JSON Format:

{
	"FunctionIndex": "(FILL WITH "File count" with less than four bits are indexed with zeros to make up the four bits.)",
	"FunctionName": "(Full Function Code Name)",
	"FunctionSummarization": [
		"(Function Summary Phrase1)",
		"(Function Summary Phrase2)",
		"(...)"
	],
	"FunctionMatchRFCResult": [
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 1)",
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 2)",
		"(...)"
	],
}

ATTENTION: Remember YOU MUST ONLY output the Function Information Collection result.
