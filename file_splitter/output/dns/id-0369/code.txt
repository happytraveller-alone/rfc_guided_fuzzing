Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 369
// Total lines: 198

//----- (0000000140030680) ----------------------------------------------------
__int64 __fastcall Dp_LoadOrCreateMicrosoftDnsObject(LDAP *ld, __int64 a2, int a3)
{
  __int64 v3; // rbx
  LDAPMessage *v6; // r13
  unsigned int v7; // edi
  LDAP *v8; // r14
  char *v9; // r15
  __int64 v10; // rbp
  char *v11; // rax
  unsigned __int16 *v12; // rdi
  LDAPMessage *v13; // rax
  __int64 v14; // r8
  WCHAR *v15; // rdx
  __int64 v16; // r8
  int v17; // r9d
  int v18; // r9d
  int v19; // r9d
  void *SD; // rbp
  __int64 v22; // [rsp+88h] [rbp+10h] BYREF
  __int64 v23; // [rsp+98h] [rbp+20h] BYREF

  v3 = 0i64;
  LODWORD(v22) = 0;
  LODWORD(v23) = 0;
  v6 = 0i64;
  if ( a2 )
  {
    if ( (*(_BYTE *)(a2 + 100) & 0x10) != 0 )
    {
      if ( *(_DWORD *)(a2 + 16) )
      {
        v7 = 9905;
      }
      else
      {
        v8 = pServerLdap;
        if ( ld )
          v8 = ld;
        if ( v8 )
        {
          Timeout_FreeWithFunctionEx(*(_QWORD *)(a2 + 56), 0i64, (__int64)"ds\\dns\\server\\server\\dpart.c", 3222);
          v9 = *(char **)(a2 + 40);
          v10 = -1i64;
          do
            ++v10;
          while ( *(_WORD *)&v9[2 * v10] );
          v11 = (char *)Mem_Alloc(2 * (int)v10 + 42, 9i64, "ds\\dns\\server\\server\\dpart.c", 224);
          v12 = (unsigned __int16 *)v11;
          if ( v11
            && ((int)StringCchCopyW(v11, v10 + 21, (char *)L"cn=MicrosoftDNS,") < 0
             || (int)StringCchCatW(v12, v10 + 21, v9) < 0) )
          {
            v12 = 0i64;
          }
          *(_QWORD *)(a2 + 56) = v12;
          if ( v12 )
          {
            v13 = Ds_LoadOrCreateDSObject(v8, v12, (__int64)L"container", a3, (BOOL *)&v23, &v22);
            v7 = v22;
            v6 = v13;
            if ( (_DWORD)v22 )
            {
              if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
                && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
              {
                WPP_SF_DS(
                  *((_QWORD *)WPP_GLOBAL_Control + 7),
                  0x3Cu,
                  (__int64)&WPP_0f7f6e0c97433b7ed77e9ce4b2e20f93_Traceguids,
                  v22,
                  *(_QWORD *)(a2 + 56));
              }
              Mem_Free(*(_QWORD **)(a2 + 56), 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\dpart.c", 3248);
              *(_QWORD *)(a2 + 56) = 0i64;
              if ( !a3 )
                v7 = 0;
            }
            else if ( v13 )
            {
              if ( (_DWORD)v23 )
              {
                v15 = *(WCHAR **)(a2 + 56);
                if ( (*(_BYTE *)(a2 + 100) & 8) != 0 )
                {
                  v17 = Ds_RemovePrincipalAccess(v8, v15, v14, (void *)g_pDomainAdminsSid);
                  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
                    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
                  {
                    WPP_SF_DS(
                      *((_QWORD *)WPP_GLOBAL_Control + 7),
                      0x3Du,
                      (__int64)&WPP_0f7f6e0c97433b7ed77e9ce4b2e20f93_Traceguids,
                      v17,
                      *(_QWORD *)(a2 + 56));
                  }
                }
                else
                {
                  v18 = Ds_AddPrincipalAccess(v8, v15, 0i64, L"DnsAdmins", 0xF017Fu, 2u, 1, 0);
                  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
                    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
                  {
                    WPP_SF_DSS(
                      *((_QWORD *)WPP_GLOBAL_Control + 7),
                      0x3Eu,
                      (__int64)&WPP_0f7f6e0c97433b7ed77e9ce4b2e20f93_Traceguids,
                      v18,
                      (__int64)L"DnsAdmins",
                      *(_QWORD *)(a2 + 56));
                  }
                }
                v7 = 0;
                Ds_RemovePrincipalAccess(v8, *(PWSTR *)(a2 + 56), v16, g_pAuthenticatedUserSid);
                if ( g_pEnterpriseDomainControllersSid )
                {
                  v19 = Ds_AddPrincipalAccess(
                          v8,
                          *(PWSTR *)(a2 + 56),
                          g_pEnterpriseDomainControllersSid,
                          0i64,
                          0xF017Fu,
                          2u,
                          1,
                          0);
                  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
                    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
                  {
                    WPP_SF_DS(
                      *((_QWORD *)WPP_GLOBAL_Control + 7),
                      0x3Fu,
                      (__int64)&WPP_0f7f6e0c97433b7ed77e9ce4b2e20f93_Traceguids,
                      v19,
                      *(_QWORD *)(a2 + 56));
                  }
                  v7 = 0;
                }
              }
              SD = Ds_ReadSD(v8, v6);
              if ( SD )
              {
                Timeout_FreeWithFunctionEx(
                  *(_QWORD *)(a2 + 120),
                  0i64,
                  (__int64)"ds\\dns\\server\\server\\dpart.c",
                  3364);
                *(_QWORD *)(a2 + 120) = SD;
              }
            }
            else
            {
              v7 = 13;
            }
          }
          else
          {
            v7 = 14;
          }
        }
        else
        {
          v7 = 9717;
        }
      }
    }
    else
    {
      v7 = 9903;
    }
  }
  else
  {
    v7 = 87;
  }
  ldap_msgfree(v6);
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    if ( a2 )
      v3 = *(_QWORD *)(a2 + 24);
    WPP_SF_Ds(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x40u,
      (__int64)&WPP_0f7f6e0c97433b7ed77e9ce4b2e20f93_Traceguids,
      v7,
      v3);
  }
  return v7;
}
// 140030868: variable 'v14' is possibly undefined
// 140030938: variable 'v16' is possibly undefined
// 14018B618: using guessed type wchar_t aContainer[10];
// 1401C94F8: using guessed type __int64 g_pDomainAdminsSid;
