Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 2328
// Total lines: 161

//----- (000000014011F16C) ----------------------------------------------------
__int64 __fastcall RR_Compare(__int64 a1, __int64 a2, __int64 a3)
{
  CDnsClientSubnetRecordsTrie *v3; // rbx
  int v4; // ebp
  __int16 v7; // cx
  unsigned __int16 v8; // dx
  unsigned __int16 v9; // dx
  unsigned __int16 v10; // dx
  unsigned __int8 *v12; // rcx
  unsigned __int8 *v13; // rdx
  size_t v14; // r8
  __int64 v15; // [rsp+20h] [rbp-D8h]
  __int64 v16; // [rsp+20h] [rbp-D8h]
  char v17[112]; // [rsp+40h] [rbp-B8h] BYREF

  v3 = WPP_GLOBAL_Control;
  v4 = a3;
  if ( (*((_DWORD *)WPP_GLOBAL_Control + 7) & 0x80000) != 0 && *((_BYTE *)WPP_GLOBAL_Control + 25) >= 5u )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
      WPP_SF_qDqDD(
        *((_QWORD *)WPP_GLOBAL_Control + 2),
        *(unsigned __int16 *)(a1 + 12),
        a3,
        a1,
        *(unsigned __int16 *)(a1 + 12),
        a2,
        *(unsigned __int16 *)(a2 + 12),
        a3);
    LODWORD(v15) = v4;
    sprintfSafeA(v17, 0x64ui64, "RR_Compare1 %p flags %04X", (const void *)a1, v15);
    LODWORD(v16) = v4;
    sprintfSafeA(v17, 0x64ui64, "RR_Compare2 %p flags %04X", (const void *)a2, v16);
    v3 = WPP_GLOBAL_Control;
  }
  if ( !a1
    || !a2
    || (v7 = *(_WORD *)(a1 + 12), v7 != *(_WORD *)(a2 + 12))
    || (v8 = *(_WORD *)(a1 + 14), v8 != *(_WORD *)(a2 + 14)) )
  {
    if ( v3 == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_DWORD *)v3 + 7) & 0x80000) == 0
      || *((_BYTE *)v3 + 25) < 5u )
    {
      return 0i64;
    }
    v9 = 11;
LABEL_66:
    WPP_SF_(*((_QWORD *)v3 + 2), v9, (__int64)&WPP_0c8dd3bcc9773665f0246ab8138989fa_Traceguids);
    return 0i64;
  }
  if ( v7 == 1 && *(_DWORD *)(a1 + 56) != *(_DWORD *)(a2 + 56) )
  {
    if ( v3 == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_DWORD *)v3 + 7) & 0x80000) == 0
      || *((_BYTE *)v3 + 25) < 5u )
    {
      return 0i64;
    }
    v9 = 12;
    goto LABEL_66;
  }
  if ( (v4 & 1) != 0 && *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20) )
  {
    if ( v3 == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_DWORD *)v3 + 7) & 0x80000) == 0
      || *((_BYTE *)v3 + 25) < 5u )
    {
      return 0i64;
    }
    v9 = 13;
    goto LABEL_66;
  }
  if ( (v4 & 2) != 0 && *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24) )
  {
    if ( v3 == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_DWORD *)v3 + 7) & 0x80000) == 0
      || *((_BYTE *)v3 + 25) < 5u )
    {
      return 0i64;
    }
    v9 = 14;
    goto LABEL_66;
  }
  if ( v7 == 1 )
  {
    if ( v3 == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_DWORD *)v3 + 7) & 0x80000) == 0
      || *((_BYTE *)v3 + 25) < 5u )
    {
      return 1i64;
    }
    v10 = 15;
LABEL_33:
    WPP_SF_(*((_QWORD *)v3 + 2), v10, (__int64)&WPP_0c8dd3bcc9773665f0246ab8138989fa_Traceguids);
    return 1i64;
  }
  if ( v7 != 6 || (v4 & 4) == 0 )
  {
    if ( !memcmp_0((const void *)(a1 + 56), (const void *)(a2 + 56), v8) )
    {
      if ( v3 == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_DWORD *)v3 + 7) & 0x80000) == 0
        || *((_BYTE *)v3 + 25) < 5u )
      {
        return 1i64;
      }
      v10 = 18;
      goto LABEL_33;
    }
    goto LABEL_53;
  }
  if ( *(_QWORD *)(a1 + 60) == *(_QWORD *)(a2 + 60) && *(_QWORD *)(a1 + 68) == *(_QWORD *)(a2 + 68) )
  {
    if ( v3 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)v3 + 7) & 0x80000) != 0
      && *((_BYTE *)v3 + 25) >= 5u )
    {
      WPP_SF_(*((_QWORD *)v3 + 2), 0x10u, (__int64)&WPP_0c8dd3bcc9773665f0246ab8138989fa_Traceguids);
      v3 = WPP_GLOBAL_Control;
    }
    v12 = (unsigned __int8 *)(*(unsigned __int8 *)(a1 + 76) + a1 + 78);
    v13 = (unsigned __int8 *)(*(unsigned __int8 *)(a2 + 76) + a2 + 78);
    if ( v12 )
    {
      if ( v13 )
      {
        if ( &v12[*v12 + 2] )
        {
          if ( &v13[*v13 + 2] )
          {
            v14 = (unsigned int)*v12 + 2;
            if ( (_DWORD)v14 == *v13 + 2 && !memcmp_0(v12, v13, v14) )
              return 1i64;
          }
        }
      }
    }
  }
  if ( v3 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
  {
    if ( (*((_DWORD *)v3 + 7) & 0x80000) != 0 && *((_BYTE *)v3 + 25) >= 5u )
    {
      WPP_SF_(*((_QWORD *)v3 + 2), 0x11u, (__int64)&WPP_0c8dd3bcc9773665f0246ab8138989fa_Traceguids);
      v3 = WPP_GLOBAL_Control;
    }
LABEL_53:
    if ( v3 == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_DWORD *)v3 + 7) & 0x80000) == 0
      || *((_BYTE *)v3 + 25) < 5u )
    {
      return 0i64;
    }
    v9 = 19;
    goto LABEL_66;
  }
  return 0i64;
}
// 14011F1FE: variable 'v15' is possibly undefined
// 14011F218: variable 'v16' is possibly undefined
