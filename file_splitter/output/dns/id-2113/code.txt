Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 2113
// Total lines: 200

//----- (000000014010A4AC) ----------------------------------------------------
__int64 __fastcall DnsOls_SetZoneSigRefreshTime(__int64 a1, char a2)
{
  unsigned int v4; // esi
  int CurrentTimeInSeconds; // eax
  __int64 v6; // r8
  int v7; // ebp
  unsigned int v8; // r14d
  __int64 *v9; // rax
  unsigned int v10; // r9d
  unsigned int v11; // eax
  unsigned int v12; // edi
  __int64 v13; // rdx
  int v14; // ecx
  int v15; // r9d
  CDnsClientSubnetRecordsTrie *v16; // r10
  unsigned int v17; // eax

  if ( !a1 )
  {
    v4 = 87;
    goto LABEL_65;
  }
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
  {
    WPP_SF_s(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0xCu,
      (__int64)&WPP_9f96d4c672f338bf067ce342b88232b8_Traceguids,
      *(const char **)(a1 + 16));
  }
  v4 = Zone_LockForWriteEx(a1, 1, 0x2710u, (__int64)"ds\\dns\\server\\server\\olssigrefresh.cpp", 192);
  if ( !v4 )
  {
    if ( *(_DWORD *)(a1 + 372) != 1 || (*(_BYTE *)(a1 + 1040) & 4) == 0 && (*(_BYTE *)(a1 + 1040) & 1) == 0 )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_s(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0xDu,
          (__int64)&WPP_9f96d4c672f338bf067ce342b88232b8_Traceguids,
          *(const char **)(a1 + 16));
      }
      goto LABEL_64;
    }
    CurrentTimeInSeconds = Dns_GetCurrentTimeInSeconds();
    dword_1401B9714 = CurrentTimeInSeconds;
    v7 = CurrentTimeInSeconds;
    v8 = *(_DWORD *)(a1 + 1108);
    if ( (a2 & 2) == 0 )
    {
      v9 = *(__int64 **)(a1 + 1136);
      v10 = -1;
      if ( !v9 )
        goto LABEL_57;
      do
      {
        if ( *((_DWORD *)v9 + 13) < v10 )
          v10 = *((_DWORD *)v9 + 13);
        if ( *((_DWORD *)v9 + 15) < v10 )
          v10 = *((_DWORD *)v9 + 15);
        v9 = (__int64 *)*v9;
      }
      while ( v9 );
      if ( v10 - 1 > 0xFFFFFFFD )
      {
LABEL_57:
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
        {
          WPP_SF_Ds(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0xEu,
            (__int64)&WPP_9f96d4c672f338bf067ce342b88232b8_Traceguids,
            v10,
            *(_QWORD *)(a1 + 16));
        }
        v4 = 87;
        goto LABEL_64;
      }
      if ( dword_1401B99F8 )
        v10 /= 0x168u;
      v11 = dword_1401B98FC;
      v12 = v10 / 0xA;
      if ( dword_1401B98FC )
      {
        if ( v12 < dword_1401B98FC )
          v11 = v10 / 0xA;
        v12 = v11;
      }
      if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0 )
      {
        v13 = *(unsigned int *)(a1 + 1104);
        if ( (_DWORD)v13 )
        {
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
          {
            WPP_SF_sDDD(*((_QWORD *)WPP_GLOBAL_Control + 7), v13, v6, *(const char **)(a1 + 16));
          }
        }
        else if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
               && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
        {
          WPP_SF_sd(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x10u,
            (__int64)&WPP_9f96d4c672f338bf067ce342b88232b8_Traceguids,
            *(const char **)(a1 + 16));
        }
      }
      v14 = v7;
      if ( *(_DWORD *)(a1 + 1104) )
        v14 = *(_DWORD *)(a1 + 1104);
      CurrentTimeInSeconds = v14 + v12;
    }
    *(_DWORD *)(a1 + 1108) = CurrentTimeInSeconds;
    if ( (a2 & 4) != 0 )
    {
      v15 = v7 + *(_DWORD *)(a1 + 1068);
      *(_DWORD *)(a1 + 1112) = v15;
      v16 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
      {
LABEL_46:
        if ( (a2 & 1) != 0 )
        {
          v17 = *(_DWORD *)(a1 + 1108);
          if ( v17 )
          {
            if ( !v8 || v17 < v8 )
            {
              if ( v16 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                && (*((_DWORD *)v16 + 17) & 0x200000) != 0
                && *((_BYTE *)v16 + 65) >= 4u )
              {
                WPP_SF_(*((_QWORD *)v16 + 7), 0x13u, (__int64)&WPP_9f96d4c672f338bf067ce342b88232b8_Traceguids);
              }
              SetEvent(g_hOlsResignChangeEvent);
            }
          }
        }
LABEL_64:
        Zone_UnlockAfterWriteEx(a1, 1, (__int64)"ds\\dns\\server\\server\\olssigrefresh.cpp", 98);
        goto LABEL_65;
      }
      if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) == 0 || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
      {
LABEL_42:
        if ( v16 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)v16 + 17) & 0x200000) != 0
          && *((_BYTE *)v16 + 65) >= 4u )
        {
          WPP_SF_DDDs(
            *((_QWORD *)v16 + 7),
            0x12u,
            (__int64)&WPP_9f96d4c672f338bf067ce342b88232b8_Traceguids,
            v8,
            *(_DWORD *)(a1 + 1108),
            *(_DWORD *)(a1 + 1108) - v7,
            *(_QWORD *)(a1 + 16));
          v16 = WPP_GLOBAL_Control;
        }
        goto LABEL_46;
      }
      WPP_SF_Dds(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x11u,
        (__int64)&WPP_9f96d4c672f338bf067ce342b88232b8_Traceguids,
        v15,
        v15 - v7,
        *(_QWORD *)(a1 + 16));
    }
    v16 = WPP_GLOBAL_Control;
    goto LABEL_42;
  }
LABEL_65:
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_Ds(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x14u,
      (__int64)&WPP_9f96d4c672f338bf067ce342b88232b8_Traceguids,
      v4,
      *(_QWORD *)(a1 + 16));
  }
  return v4;
}
// 14010A645: variable 'v6' is possibly undefined
// 1401B9714: using guessed type int dword_1401B9714;
// 1401B98FC: using guessed type int dword_1401B98FC;
// 1401B99F8: using guessed type int dword_1401B99F8;
