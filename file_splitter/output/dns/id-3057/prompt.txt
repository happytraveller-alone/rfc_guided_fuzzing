Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 3057
// Total lines: 257

//----- (000000014015FD20) ----------------------------------------------------
int __fastcall DnsPrint_MessageNoContext(__int64 a1, __int64 a2, __int64 a3, __int16 *a4, unsigned __int16 a5)
{
  __int64 v5; // r15
  __int16 *v6; // rbx
  u_short v8; // si
  int result; // eax
  const char *v10; // r9
  const char *v11; // r9
  unsigned int v12; // edx
  int v13; // eax
  unsigned int v14; // ecx
  const char *v15; // rbx
  unsigned int v16; // r13d
  char *v17; // r12
  int v18; // eax
  int v19; // ebp
  int v20; // r14d
  int v21; // esi
  char *v22; // r15
  int v23; // edi
  __int16 v24; // ax
  __int64 v25; // rdx
  u_short v26; // r13
  u_short v27; // r14
  u_short v28; // r12
  __int16 v29; // ax
  unsigned __int8 *v30; // rdi
  int v31; // ebp
  __int64 v32; // rcx
  char *v33; // r8
  unsigned __int16 v34; // ax
  int v35; // eax
  __int64 v36; // r8
  u_short *v37; // rdi
  int v38; // ebx
  u_short v39; // ax
  unsigned __int16 v40; // bp
  const char *v41; // [rsp+28h] [rbp-D0h]
  unsigned __int16 v42; // [rsp+A0h] [rbp-58h]
  unsigned int v43; // [rsp+A4h] [rbp-54h]
  int v44; // [rsp+A4h] [rbp-54h]
  char *v45; // [rsp+B0h] [rbp-48h]
  unsigned int v46; // [rsp+100h] [rbp+8h]
  u_short v47; // [rsp+100h] [rbp+8h]
  u_short v48; // [rsp+108h] [rbp+10h]
  unsigned int v50; // [rsp+120h] [rbp+28h]
  u_short v51; // [rsp+120h] [rbp+28h]

  v5 = 0i64;
  v6 = a4;
  v42 = a5;
  v8 = 0;
  if ( a5 )
  {
    v45 = (char *)a4 + a5;
  }
  else
  {
    v42 = -1;
    v45 = 0i64;
  }
  result = DnsPrint_Lock();
  if ( !result )
    return result;
  if ( a3 )
  {
    if ( (byte_1401BA001 & 4) == 0 )
      goto LABEL_10;
    WPP_SF_s(100i64, (unsigned __int16)&WPP_7f900513327334733b8f3a4951ec5607_Traceguids, a3, v10);
  }
  if ( (byte_1401BA001 & 4) != 0 )
    WPP_SF_q(101i64, (unsigned __int16)&WPP_7f900513327334733b8f3a4951ec5607_Traceguids, (__int64)v6);
LABEL_10:
  v11 = (const char *)0x140000000i64;
  if ( (byte_1401BA001 & 4) != 0 )
  {
    v12 = *((unsigned __int8 *)v6 + 3);
    v50 = *((_BYTE *)v6 + 3) & 0xF;
    v13 = v50;
    v14 = *((unsigned __int8 *)v6 + 2);
    if ( v50 > 0x13 )
      v13 = 19;
    v15 = "question";
    v16 = (v14 >> 3) & 0xF;
    v17 = ResponseCodeStringTable[v13];
    v18 = v16;
    if ( v16 > 6 )
      v18 = 6;
    v19 = v14 & 1;
    v20 = (v12 >> 6) & 1;
    v21 = (v14 >> 1) & 1;
    v22 = OpcodeStringTable[v18];
    v23 = (v14 >> 2) & 1;
    v46 = v12 >> 7;
    if ( (v14 & 0x80u) != 0 )
      v15 = "response";
    v43 = v14 >> 7;
    v24 = ntohs(a4[1]);
    v41 = v15;
    v6 = a4;
    WPP_SF_HHLsLsLLLLLLsHHHH(
      (__int64)a4,
      v25,
      *a4,
      v24,
      v43,
      v41,
      v16,
      v22,
      v23,
      v21,
      v19,
      v46,
      v20,
      v50,
      v17,
      a4[2],
      a4[3],
      a4[4],
      a4[5]);
    v8 = 0;
    v5 = 0i64;
  }
  v26 = v6[2];
  v27 = v6[3];
  v28 = v6[4];
  v47 = v27;
  v51 = v6[5];
  if ( v26 )
  {
    v29 = v6[2];
  }
  else
  {
    if ( !v28 )
      goto LABEL_24;
    v29 = v6[4];
  }
  if ( (v29 & 0xFF00) != 0 )
  {
    ntohs(*v6);
    v26 = ntohs(v26);
    v47 = ntohs(v27);
    v27 = v47;
    v28 = ntohs(v28);
    v51 = ntohs(v51);
  }
LABEL_24:
  v30 = (unsigned __int8 *)(v6 + 6);
  v31 = 0;
  while ( 1 )
  {
    if ( (byte_1401BA001 & 4) != 0 )
    {
      v32 = v5;
      if ( v5 >= 4 )
        v32 = 4i64;
      if ( (v6[1] & 0x78) == 40 )
        v33 = UpdateSectionNameArray[v32];
      else
        v33 = SectionNameArray[v32];
      WPP_SF_s(103i64, (unsigned __int16)&WPP_7f900513327334733b8f3a4951ec5607_Traceguids, (__int64)v33, v11);
    }
    if ( v31 )
    {
      if ( v31 == 1 )
      {
        v8 = v27;
        v48 = v27;
      }
      else if ( v31 == 2 )
      {
        v8 = v28;
        v48 = v28;
      }
      else
      {
        if ( v31 == 3 )
          v8 = v51;
        v48 = v8;
      }
    }
    else
    {
      v8 = v26;
      v48 = v26;
    }
    v44 = 0;
    if ( v8 )
      break;
LABEL_55:
    ++v31;
    ++v5;
    if ( v31 >= 4 )
    {
      v40 = (_WORD)v30 - (_WORD)v6;
      if ( (byte_1401BA001 & 4) != 0 )
        WPP_SF_D(108i64, (unsigned __int16)&WPP_7f900513327334733b8f3a4951ec5607_Traceguids, v40, (int)v11);
      if ( v45 && v40 < v42 )
      {
        if ( (byte_1401BA001 & 4) != 0 )
          WPP_SF_qddd(109i64, (unsigned __int16)&WPP_7f900513327334733b8f3a4951ec5607_Traceguids, (__int64)v30);
        DnsPrint_RawBinary(0i64, 0i64, (__int64)"Remaining bytes:", 0i64, (__int64)v30, v42 - v40, 0);
      }
      return DnsPrint_Unlock();
    }
    v8 = v48;
    v27 = v47;
  }
  while ( 1 )
  {
    v34 = (_WORD)v30 - (_WORD)v6;
    if ( (unsigned __int16)((_WORD)v30 - (_WORD)v6) >= v42 )
      break;
    if ( (byte_1401BA001 & 4) != 0 )
      WPP_SF_D(105i64, (unsigned __int16)&WPP_7f900513327334733b8f3a4951ec5607_Traceguids, v34, (int)v11);
    v35 = DnsPrint_PacketName(0i64, 0i64, "    Name      \"", v30, (__int64)v6, (unsigned __int64)v45, "\"\n");
    if ( !v35 )
    {
      if ( (byte_1401BA001 & 4) != 0 )
        WPP_SF_(106i64, (unsigned __int16)&WPP_7f900513327334733b8f3a4951ec5607_Traceguids, v36);
      goto LABEL_55;
    }
    v37 = (u_short *)&v30[v35];
    if ( v5 )
    {
      v30 = (unsigned __int8 *)v37
          + (int)DnsPrint_PacketRecord(0i64, 0i64, 0i64, (__int64)v37, (__int64)v6, (unsigned __int64)v45);
    }
    else
    {
      if ( (byte_1401BA001 & 4) != 0 )
      {
        v38 = ntohs(v37[1]);
        v39 = ntohs(*v37);
        WPP_SF_Dd(107i64, (unsigned __int16)&WPP_7f900513327334733b8f3a4951ec5607_Traceguids, v39, v38);
        v6 = a4;
      }
      v30 = (unsigned __int8 *)(v37 + 2);
    }
    if ( ++v44 >= v8 )
      goto LABEL_55;
  }
  if ( (byte_1401BA001 & 4) != 0 )
    WPP_SF_Dd(104i64, (unsigned __int16)&WPP_7f900513327334733b8f3a4951ec5607_Traceguids, v34, v42);
  return DnsPrint_Unlock();
}
// 14015FDBC: variable 'v10' is possibly undefined
// 14015FF24: variable 'v25' is possibly undefined
// 140160014: variable 'v11' is possibly undefined
// 1401601A1: variable 'v36' is possibly undefined
// 14017B670: using guessed type char *UpdateSectionNameArray[17];
// 14017B698: using guessed type char *SectionNameArray[12];
// 14017B6C0: using guessed type char *OpcodeStringTable[7];
// 14017B700: using guessed type char *ResponseCodeStringTable[20];
// 1401BA001: using guessed type char byte_1401BA001;
##############################
Role: Let's assume that you are an advanced reverse engineer and you are reverse engineering a network driver using IDA Pro, and you are also familiar with the RFC documentation. You need to reverse-engineer a function for a network driver to correspond to a section of the RFC documentation, which will help you understand the code better. The driver you're reversing is Schannel.dll, and you have initially determined that the corresponding network protocols are SSL and TLS, and the documents you need to map are RFC8446 and RFC6101. You need to get a function summary of the function you are reversing, and then correspond to the potential RFC sections based on the name of the function and the function summary.
Function Background: The function is reverse engineered from the driver file Schannel.dll on Windows platform. Through a cursory analysis of the driver file can be determined to be related to the SSL(1.3), TLS(3.0) protocol, that is, with RFC8446, RFC6101 strong correlation.

Output Function Summary: Summarizes the function's functionality with several phrases instead of sentences, focuses on covering the function's control flow information, and highlights the protocol function points implemented by the function. Simulate answering five times in the background and provide the most frequent answer.

Retrieve document sections: giving matches for document sections(FunctionMatchRFCResult) that the code may related to. NOTE if the code is only business related(i.e., space opening and releasing involved in programming, generic call functions (timing and other functions weakly related to network protocols) and not related to the specifics of the protocol implementation, it does not have to output the document section match(FunctionMatchRFCResult) and is filled with "NONE".

Retrieve document sections Thinking Chain: The function code is matched with the RFC document section, and the thinking chain is provided to help you solve the problem better:
	1. Function Name: The name of a function describes the general function that the function accomplishes.
	2. Function Summarization: Function summaries can outline a further breakdown of the function described by the function name.
	3. Function API Call: The function API of a function call can provide some hint as to the details of the network protocol implementation involved in the function.
	4. Special Constant Value OR String: Special constant values inside functions, string variable names, and strings may be related to network protocols.
	5. Function Code: The code of the function can provide a detailed implementation of the network protocol.
Generate Function Information Collection with JSON Format:

{
	"FunctionIndex": "(FILL WITH "File count" with less than four bits are indexed with zeros to make up the four bits.)",
	"FunctionName": "(Full Function Code Name)",
	"FunctionSummarization": [
		"(Function Summary Phrase1)",
		"(Function Summary Phrase2)",
		"(...)"
	],
	"FunctionMatchRFCResult": [
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 1)",
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 2)",
		"(...)"
	],
}

ATTENTION: Remember YOU MUST ONLY output the Function Information Collection result.
