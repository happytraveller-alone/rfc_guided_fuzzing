Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 2814
// Total lines: 240

//----- (000000014014BA88) ----------------------------------------------------
__int64 __fastcall CDnsClientSubnetRecordsTrie::findNode(__int64 a1, __int64 a2, __int64 *a3, int a4, __int64 a5)
{
  int v5; // r12d
  __int64 v6; // rdi
  __int64 *v7; // rbp
  unsigned int v10; // ebx
  int v11; // esi
  _BYTE *v12; // r15
  CDnsClientSubnetRecordsTrie *v13; // rcx
  const void *****v14; // r14
  int v15; // ebp
  unsigned __int8 v16; // al
  const void *****v17; // r15
  struct trie_node *Node; // rax
  __int64 v19; // rdx
  CDnsClientSubnetRecordsTrie *v20; // rcx
  __int64 v21; // rbx
  __int64 v22; // rdi
  _QWORD *v23; // rax
  __int64 v24; // rcx
  __int64 v26; // [rsp+20h] [rbp-88h]
  unsigned int v27; // [rsp+40h] [rbp-68h]
  u_long v28; // [rsp+44h] [rbp-64h]
  unsigned int v29; // [rsp+48h] [rbp-60h] BYREF
  _BYTE *v30; // [rsp+50h] [rbp-58h]
  __int64 v31[10]; // [rsp+58h] [rbp-50h] BYREF
  unsigned __int8 v33; // [rsp+B8h] [rbp+10h]
  unsigned int v35; // [rsp+C8h] [rbp+20h] BYREF

  v5 = 0;
  v6 = a4;
  v29 = 0;
  v7 = a3;
  v28 = 0;
  LOBYTE(v35) = 0;
  v30 = 0i64;
  v10 = 0;
  v27 = 0;
  v11 = 0;
  v33 = 0;
  v12 = 0i64;
  if ( (a4 & 0xFFFFFFFD) == 0 )
    v11 = *(_DWORD *)(a2 + 36);
  if ( *(_WORD *)a2 == 2 )
  {
    if ( a4 == 1 )
      v11 = 32;
    v28 = ntohl(*(_DWORD *)(a2 + 4));
    v27 = *(_DWORD *)(a1 + 8);
  }
  else
  {
    if ( *(_WORD *)a2 != 23 )
      return 0i64;
    v12 = (_BYTE *)(a2 + 8);
    v30 = (_BYTE *)(a2 + 8);
    if ( a4 == 1 )
      v11 = 128;
  }
  if ( (_DWORD)v6 == 1 )
  {
    v29 = -1;
    acquireRead((__int64)hClientSubnetRecordsLock, 0xFFFFFFFF, &v29);
    v29 = 1;
  }
  v13 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
  {
    WPP_SF_sd(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0xCu,
      (__int64)&WPP_9cf6ed10bac538b49a60dec21a66994d_Traceguids,
      off_14017ADE0[v6]);
    v13 = WPP_GLOBAL_Control;
  }
  v14 = *(const void ******)a1;
  v31[0] = (__int64)v14;
  if ( v11 <= 0 )
    goto LABEL_51;
  while ( 1 )
  {
    if ( *(_WORD *)a2 == 2 )
    {
      v15 = (v27 & v28) != 0;
      v27 >>= 1;
    }
    else
    {
      if ( v5 % 8 )
      {
        v16 = v33;
      }
      else
      {
        LOBYTE(v35) = *v12;
        v30 = v12 + 1;
        v16 = *(_BYTE *)(a1 + 12);
      }
      v15 = (v16 & (unsigned __int8)v35) != 0;
      v33 = v16 >> 1;
    }
    if ( v13 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)v13 + 17) & 0x400000) != 0
      && *((_BYTE *)v13 + 65) >= 5u )
    {
      WPP_SF_Dqs(
        *((_QWORD *)v13 + 7),
        0xDu,
        (__int64)&WPP_9cf6ed10bac538b49a60dec21a66994d_Traceguids,
        v15,
        (char)v14,
        (__int64)off_14017ADE0[v6]);
      v13 = WPP_GLOBAL_Control;
    }
    v17 = &v14[v15];
    if ( v17[1] )
      goto LABEL_36;
    if ( (_DWORD)v6 == 1 || (_DWORD)v6 == 2 )
      break;
    Node = CDnsClientSubnetRecordsTrie::getNode(v13);
    v17[1] = (const void ****)Node;
    if ( !Node || !*(_QWORD *)Node )
    {
      CDnsClientSubnetRecordsTrie::freeBranch(v20, Node);
      v10 = 14;
      goto LABEL_63;
    }
    *((_QWORD *)Node + 3) = v14;
    v13 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
    {
      WPP_SF_dqqs(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        v19,
        (__int64)off_14017ADE0,
        v15,
        (char)v17[1],
        (char)v14,
        (__int64)off_14017ADE0[v6]);
      v13 = WPP_GLOBAL_Control;
    }
LABEL_36:
    v14 = (const void *****)v17[1];
    v31[0] = (__int64)v14;
    if ( (_DWORD)v6 == 1 && (*v14)[1] )
    {
      if ( v13 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)v13 + 17) & 0x400000) != 0
        && *((_BYTE *)v13 + 65) >= 5u )
      {
        LODWORD(v26) = *((_DWORD *)*v14 + 2);
        WPP_SF_qDs(
          *((_QWORD *)v13 + 7),
          0x10u,
          (__int64)&WPP_9cf6ed10bac538b49a60dec21a66994d_Traceguids,
          v14,
          v26,
          "Find");
      }
      std::list<std::wstring>::_Insert<std::_List_iterator<std::_List_val<std::wstring>>>(
        a5,
        **(_QWORD **)a5,
        ***v14,
        (const void **)**v14);
      v13 = WPP_GLOBAL_Control;
    }
    if ( ++v5 >= v11 )
      goto LABEL_50;
    v12 = v30;
  }
  if ( v13 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)v13 + 17) & 0x400000) != 0
    && *((_BYTE *)v13 + 65) >= 5u )
  {
    LODWORD(v26) = v15;
    WPP_SF_qDs(
      *((_QWORD *)v13 + 7),
      0xEu,
      (__int64)&WPP_9cf6ed10bac538b49a60dec21a66994d_Traceguids,
      v14,
      v26,
      off_14017ADE0[v6]);
    v13 = WPP_GLOBAL_Control;
  }
LABEL_50:
  v7 = a3;
LABEL_51:
  if ( (_DWORD)v6 == 1 )
  {
    if ( v13 == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control || (*((_DWORD *)v13 + 17) & 0x400000) == 0 )
    {
      v21 = a5;
    }
    else
    {
      v21 = a5;
      if ( *((_BYTE *)v13 + 65) >= 5u )
        WPP_SF_Ds(
          *((_QWORD *)v13 + 7),
          0x11u,
          (__int64)&WPP_9cf6ed10bac538b49a60dec21a66994d_Traceguids,
          *(_DWORD *)(a5 + 8),
          (__int64)"Find");
    }
    v10 = *(_QWORD *)(v21 + 8) == 0i64 ? 0x490 : 0;
  }
  else if ( (_DWORD)v6 == 2 && v5 < v11 )
  {
    v10 = 1168;
  }
  else
  {
    v22 = *v7;
    v23 = std::_List_val<CDNSPolicyCriteria *>::_Buynode((__int64)v13, *v7, *(_QWORD *)(*v7 + 8), v31);
    v24 = v7[1];
    if ( v24 == 0x1FFFFFFFFFFFFFFEi64 )
      std::_Xlength_error("list<T> too long");
    v7[1] = v24 + 1;
    *(_QWORD *)(v22 + 8) = v23;
    *(_QWORD *)v23[1] = v23;
  }
LABEL_63:
  if ( v29 )
  {
    v35 = -1;
    releaseRead((__int64)hClientSubnetRecordsLock, &v35, 1);
  }
  return v10;
}
// 14014BD0C: variable 'v19' is possibly undefined
// 14014BD6F: variable 'v26' is possibly undefined
// 14014BDC0: variable 'v20' is possibly undefined
// 14017ADE0: using guessed type char *off_14017ADE0[3];
// 1401B9DB8: using guessed type void *hClientSubnetRecordsLock;
// 14014BA88: using guessed type __int64 var_50[10];
