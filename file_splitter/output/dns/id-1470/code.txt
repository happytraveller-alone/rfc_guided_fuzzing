Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 1470
// Total lines: 306

//----- (00000001400B6EA4) ----------------------------------------------------
__int64 __fastcall Up_ApplyUpdateList(__int64 *a1, __int64 a2, int a3, _DWORD *a4)
{
  int v5; // ebp
  unsigned int v7; // edi
  __int64 v8; // r15
  int v9; // r12d
  __int64 v10; // rbx
  __int64 v11; // rsi
  CDnsClientSubnetRecordsTrie *v12; // rcx
  const char *v13; // rcx
  __int64 v14; // rdx
  __int16 v15; // ax
  unsigned int updated; // eax
  int v17; // ebp
  _QWORD *v18; // rax
  __int64 v20; // rax
  __int64 v21; // rbp
  unsigned int v22; // r8d
  __int64 v23; // rax
  _QWORD *v24; // rax
  __int64 v25; // [rsp+28h] [rbp-40h]
  __int64 *v26; // [rsp+70h] [rbp+8h]

  v5 = a3;
  v26 = a1;
  v7 = 0;
  v8 = 0i64;
  v9 = 0;
  v10 = *a1;
  if ( !*a1 )
  {
LABEL_48:
    v12 = WPP_GLOBAL_Control;
    goto LABEL_49;
  }
  do
  {
    if ( g_fDnsServiceExit == 1 )
    {
      v12 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x80000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x27u, (__int64)&WPP_40fcce62f6f439b0ec75be29cae6130a_Traceguids);
        v12 = WPP_GLOBAL_Control;
      }
      v7 = 1167617;
      goto LABEL_49;
    }
    v11 = *(_QWORD *)(v10 + 8);
    if ( !*(_QWORD *)(v11 + 64)
      && ((*(_DWORD *)(v11 + 84) & 0x88880000) != -2004353024 || !*(_QWORD *)(*(_QWORD *)(v11 + 8) + 64i64)) )
    {
      *(_DWORD *)(v10 + 36) |= 0x8000u;
    }
    if ( *(_DWORD *)(a2 + 372) || v11 != *(_QWORD *)(a2 + 48) )
    {
      v12 = WPP_GLOBAL_Control;
    }
    else
    {
      v12 = WPP_GLOBAL_Control;
      if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x80000) != 0 )
      {
        Dbg_Update("Update apply at root-hints root\n", v10);
        v12 = WPP_GLOBAL_Control;
      }
      if ( !*(_QWORD *)(v10 + 16) )
      {
        v13 = "BAD Update apply at root-hints root\n";
        goto LABEL_13;
      }
    }
    v14 = *(_QWORD *)(v10 + 16);
    if ( !v14 )
    {
      v21 = *(_QWORD *)(v10 + 24);
      if ( v21 )
      {
        *(_QWORD *)(v10 + 24) = RR_UpdateDeleteMatchingRecord(v11, *(unsigned __int16 **)(v10 + 24));
        RR_Free(v21);
      }
      else
      {
        v22 = *(unsigned __int16 *)(v10 + 40);
        if ( (_WORD)v22 != 0xF3F3 )
        {
          if ( (_WORD)v22 == 0xF4F4 )
          {
            v5 = a3;
            if ( (unsigned int)RR_UpdateForceAging(a2, v11, v22) )
              *(_DWORD *)(a2 + 396) |= 0x200u;
          }
          else
          {
            v5 = a3;
            if ( !(_WORD)v22 )
              goto LABEL_28;
            v20 = RR_UpdateDeleteType(a2, v11, v22, a3);
LABEL_65:
            *(_QWORD *)(v10 + 24) = v20;
          }
LABEL_27:
          v12 = WPP_GLOBAL_Control;
          goto LABEL_28;
        }
        *(_QWORD *)(v10 + 24) = RR_UpdateScavenge(a2, v11);
      }
      v12 = WPP_GLOBAL_Control;
      v5 = a3;
      goto LABEL_28;
    }
    v15 = *(_WORD *)(v10 + 40);
    if ( v15 )
    {
      if ( v15 == -3342 )
      {
        if ( !(unsigned int)RR_ListIsMatchingSet(*(_QWORD *)(v10 + 8), v14, 1) )
          return 8i64;
        RR_ListFree(*(_QWORD **)(v10 + 16));
        *(_QWORD *)(v10 + 16) = 0i64;
        goto LABEL_27;
      }
      if ( v15 != 255 )
      {
        v20 = RR_ReplaceSet(a2, v11, *(_QWORD *)(v10 + 16), (__int64)a1);
        goto LABEL_65;
      }
      v17 = 0;
      v18 = *(_QWORD **)(v10 + 16);
      do
      {
        v18 = (_QWORD *)*v18;
        ++v17;
      }
      while ( v18 );
      v7 = RR_ListReplace(v10, v11, *(_QWORD **)(v10 + 16), (_QWORD *)(v10 + 24));
      if ( v7 )
      {
        v12 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x80000) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
        {
          LODWORD(v25) = v7;
          WPP_SF_qsD(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x2Au,
            (__int64)&WPP_40fcce62f6f439b0ec75be29cae6130a_Traceguids,
            v11,
            v11 + 102,
            v25);
          v12 = WPP_GLOBAL_Control;
        }
        if ( (*(_DWORD *)(v11 + 84) & 0x88880000) == -2004353024 )
        {
          if ( v12 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)v12 + 17) & 0x80000) != 0
            && *((_BYTE *)v12 + 65) >= 4u )
          {
            WPP_SF_D(*((_QWORD *)v12 + 7), 0x2Bu, (__int64)&WPP_40fcce62f6f439b0ec75be29cae6130a_Traceguids, v7);
            goto LABEL_48;
          }
          goto LABEL_49;
        }
      }
      else
      {
        v12 = WPP_GLOBAL_Control;
      }
      if ( *(_QWORD *)(v10 + 16) )
      {
        *(_WORD *)(v10 + 42) = 255;
        v9 += v17;
        v12 = WPP_GLOBAL_Control;
      }
      v5 = a3;
    }
    else
    {
      updated = RR_UpdateAdd(a2, v11, v14, v10, v5, 0i64);
      v7 = updated;
      if ( (v5 & 0x400000) != 0 && updated == 9711 )
        v7 = 0;
      if ( !v7 )
        goto LABEL_27;
      if ( (v5 & 3) != 0 )
      {
        v12 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x80000) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          WPP_SF_D(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x28u,
            (__int64)&WPP_40fcce62f6f439b0ec75be29cae6130a_Traceguids,
            v7);
          goto LABEL_48;
        }
        goto LABEL_49;
      }
      v12 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x80000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_Ds(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x29u,
          (__int64)&WPP_40fcce62f6f439b0ec75be29cae6130a_Traceguids,
          v7,
          *(_QWORD *)(a2 + 16));
        goto LABEL_27;
      }
    }
LABEL_28:
    if ( !*(_QWORD *)(v10 + 16) && !*(_QWORD *)(v10 + 24) )
    {
      if ( (*((_DWORD *)v12 + 17) & 0x80000) == 0 )
        goto LABEL_14;
      v13 = "Update turned into no-op on DB-execution";
LABEL_13:
      Dbg_Update(v13, v10);
LABEL_14:
      Up_DetachAndFreeUpdateGivenPrevious((__int64)a1, v26, (int *)v10);
      goto LABEL_87;
    }
    *(_DWORD *)(v10 + 36) |= 0x80000000;
    *(_DWORD *)(a2 + 396) |= 0x200u;
    v26 = (__int64 *)v10;
    if ( v11 == *(_QWORD *)(a2 + 40) )
      *(_DWORD *)(a2 + 396) |= 0x400u;
    v23 = *(_QWORD *)(v10 + 16);
    if ( v23 && *(_WORD *)(v10 + 42) != 255 )
    {
      ++v9;
      *(_WORD *)(v10 + 42) = *(_WORD *)(v23 + 12);
    }
    v24 = *(_QWORD **)(v10 + 24);
    while ( v24 )
    {
      v24 = (_QWORD *)*v24;
      --v9;
    }
    if ( (*(_BYTE *)(v11 + 92) & 2) != 0 && (*(_DWORD *)(v11 + 84) & 0x88880000) == -2004353024 )
      v8 = v11;
LABEL_87:
    v10 = *v26;
  }
  while ( *v26 );
  if ( !v8
    || (v5 & 1) == 0
    || RR_FindNextRecordEx(v8, 0, 1u, 0i64, 0, 0)
    || RR_FindNextRecordEx(v8, 0, 0x1Cu, 0i64, 0, 0) )
  {
    goto LABEL_48;
  }
  v12 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x80000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_qs(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x2Cu,
      (__int64)&WPP_40fcce62f6f439b0ec75be29cae6130a_Traceguids,
      a1,
      *(_QWORD *)(a2 + 16));
    v12 = WPP_GLOBAL_Control;
  }
  v7 = 9005;
LABEL_49:
  if ( a4 )
  {
    if ( v12 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)v12 + 17) & 0x80000) != 0
      && *((_BYTE *)v12 + 65) >= 4u )
    {
      WPP_SF_Ds(
        *((_QWORD *)v12 + 7),
        0x2Du,
        (__int64)&WPP_40fcce62f6f439b0ec75be29cae6130a_Traceguids,
        v9,
        *(_QWORD *)(a2 + 16));
      v12 = WPP_GLOBAL_Control;
    }
    *a4 += v9;
  }
  if ( v12 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)v12 + 17) & 0x80000) != 0
    && *((_BYTE *)v12 + 65) >= 4u )
  {
    WPP_SF_Ds(
      *((_QWORD *)v12 + 7),
      0x2Eu,
      (__int64)&WPP_40fcce62f6f439b0ec75be29cae6130a_Traceguids,
      v7,
      *(_QWORD *)(a2 + 16));
  }
  return v7;
}
// 1400B7115: variable 'v25' is possibly undefined
// 1401B9A40: using guessed type int g_fDnsServiceExit;
