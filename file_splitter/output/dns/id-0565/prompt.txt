Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 565
// Total lines: 328

//----- (0000000140051360) ----------------------------------------------------
__int64 Rpc_ExportSettings()
{
  unsigned int LastError; // ebp
  HANDLE FileW; // rdi
  int v2; // r14d
  char **v3; // rbx
  int v4; // eax
  const char **v5; // r8
  const char *v6; // r8
  const wchar_t **v7; // r8
  const wchar_t *v8; // r8
  __int64 *v9; // rax
  __int64 v10; // rsi
  char *v11; // rbx
  char *v12; // rax
  __int64 v13; // r8
  __int64 v14; // r8
  const unsigned __int16 **NextZone; // rbx
  const char *v16; // r9
  const char *v17; // r8
  const unsigned __int16 **i; // rsi
  const char *v19; // r8
  const char *v20; // r9
  __int64 v21; // rax
  const char *v22; // r8
  const char *v23; // rcx
  __int64 v24; // rax
  const unsigned __int16 *v25; // rax
  const char *v26; // r9
  const char *v27; // r8
  char *v28; // rbx
  char *v29; // rbx
  char *v30; // rbx
  char *v31; // rbx
  char *v32; // rbx
  unsigned int v33; // r11d
  unsigned int v34; // r9d
  char *v35; // rdx
  __int64 v36; // r8
  const char *v37; // rcx
  __int64 dwCreationDisposition; // [rsp+20h] [rbp-2C8h]
  __int64 dwCreationDispositiona; // [rsp+20h] [rbp-2C8h]
  __int64 dwCreationDispositionb; // [rsp+20h] [rbp-2C8h]
  __int64 dwFlagsAndAttributes; // [rsp+28h] [rbp-2C0h]
  HANDLE hTemplateFile; // [rsp+30h] [rbp-2B8h]
  __int64 v44; // [rsp+38h] [rbp-2B0h]
  __int64 v45; // [rsp+40h] [rbp-2A8h]
  struct _SYSTEMTIME SystemTime; // [rsp+58h] [rbp-290h] BYREF
  CHAR v47[72]; // [rsp+68h] [rbp-280h] BYREF
  WCHAR FileName[264]; // [rsp+B0h] [rbp-238h] BYREF

  LastError = 0;
  memset_0(v47, 0, 0x3Dui64);
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0xBu, (__int64)&WPP_98f2ff202faf38a2f5454d6cc86b8b2a_Traceguids);
  }
  if ( (unsigned int)File_CreateDatabaseFilePathEx(0i64, 0i64, (char *)FileName, 261i64, 0i64, 0i64, L"DnsSettings.txt") )
  {
    FileW = CreateFileW(FileName, 2u, 0, 0i64, 2u, 0, 0i64);
    if ( FileW == (HANDLE)-1i64 )
    {
      LastError = GetLastError();
    }
    else
    {
      GetLocalTime(&SystemTime);
      Dns_WriteFormattedSystemTimeToBuffer(v47, &SystemTime);
      FormattedWriteFile(
        FileW,
        ";\r\n;   DNS server settings\r\n;\r\n;   Server name        %s\r\n;   Current time       %s\r\n;\r\n\r\n",
        Str,
        v47);
      FormattedWriteFile(FileW, "[ServerSettings]\r\n\r\n");
      v2 = 0;
      if ( ServerPropertyTable )
      {
        v3 = &ServerPropertyTable;
        do
        {
          FormattedWriteFile(FileW, "%s=", *v3);
          v4 = *((_DWORD *)v3 + 2);
          switch ( v4 )
          {
            case 4:
              v12 = v3[6];
              if ( *((_DWORD *)v3 + 9) )
              {
                if ( v12 )
                  v13 = *(unsigned int *)v12;
                else
                  v13 = 3131961357i64;
                FormattedWriteFile(FileW, "DWORD:0x%08X\r\n", v13);
              }
              else
              {
                if ( v12 )
                  v14 = *(unsigned int *)v12;
                else
                  v14 = 3131961357i64;
                FormattedWriteFile(FileW, "DWORD:%d\r\n", v14);
              }
              break;
            case 34:
              v9 = (__int64 *)v3[6];
              v10 = 0i64;
              if ( v9 )
                v10 = *v9;
              FormattedWriteFile(FileW, "ADDRLIST");
              if ( v10 )
              {
                v11 = dnsAddrArrayStringEx(v10, 0);
                FormattedWriteFile(FileW, ":%s", v11);
                Mem_Free(v11, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\exportsettings.c", 788);
              }
              else
              {
                FormattedWriteFile(FileW, ":NULL");
              }
              FormattedWriteFile(FileW, "\r\n");
              break;
            case -268435455:
              v7 = (const wchar_t **)v3[6];
              if ( !v7 || (v8 = *v7) == 0i64 )
                v8 = L"NULL";
              FormattedWriteFile(FileW, "UNICODE-STRING:%S\r\n", v8);
              break;
            case -16777215:
              v5 = (const char **)v3[6];
              if ( !v5 || (v6 = *v5) == 0i64 )
                v6 = "NULL";
              FormattedWriteFile(FileW, "UTF8-STRING:%s\r\n", v6);
              break;
            default:
              FormattedWriteFile(FileW, "UnknownSettingType\r\n");
              break;
          }
          v3 = &(&ServerPropertyTable)[7 * (unsigned int)++v2];
        }
        while ( *v3 );
        LastError = 0;
      }
      FormattedWriteFile(FileW, "\r\n[Zones]\r\n\r\n");
      NextZone = Zone_ListGetNextZoneEx(0i64, 0i64, 0);
      if ( NextZone )
      {
        do
        {
          v23 = "File";
          v24 = *((unsigned int *)NextZone + 93);
          if ( (*((_BYTE *)NextZone + 388) & 1) != 0 )
            v23 = "AD-integrated";
          if ( (unsigned int)v24 > 4 )
            v16 = "UnknownZoneType";
          else
            v16 = off_14017AD28[v24];
          v17 = "Cache";
          if ( *((_DWORD *)NextZone + 93) )
            v17 = (const char *)NextZone[2];
          FormattedWriteFile(FileW, "%s=%s,%s\r\n", v17, v16, v23);
          NextZone = Zone_ListGetNextZoneEx(0i64, (__int64 *)NextZone, 0);
        }
        while ( NextZone );
        LastError = 0;
      }
      for ( i = Zone_ListGetNextZoneEx(0i64, 0i64, 0); i; i = Zone_ListGetNextZoneEx(0i64, (__int64 *)i, 0) )
      {
        if ( (*((_BYTE *)i + 396) & 4) == 0 )
        {
          v19 = "Cache";
          if ( *((_DWORD *)i + 93) )
            v19 = (const char *)i[2];
          FormattedWriteFile(FileW, "\r\n\r[%s]\r\n\r\n", v19);
          v20 = "File";
          v21 = *((unsigned int *)i + 93);
          if ( (*((_BYTE *)i + 388) & 1) != 0 )
            v20 = "AD-integrated";
          v22 = (unsigned int)v21 > 4 ? "UnknownZoneType" : off_14017AD28[v21];
          LODWORD(dwCreationDisposition) = (_BYTE)i[49] & 3;
          FormattedWriteFile(FileW, "Type=%s\r\nStore=%s\r\nAllowUpdate=%d\r\n", v22, v20, dwCreationDisposition);
          if ( (*((_BYTE *)i + 388) & 1) != 0 )
          {
            v25 = i[106];
            v26 = v25 ? (const char *)*((_QWORD *)v25 + 3) : "NULL";
            FormattedWriteFile(FileW, "ZoneDN=%S\r\nDirectoryPartition=%s\r\n", i[105], v26);
          }
          else
          {
            v27 = "NULL";
            if ( i[17] )
              v27 = (const char *)i[17];
            FormattedWriteFile(FileW, "File=%s\r\n", v27);
          }
          if ( (unsigned int)(*((_DWORD *)i + 93) - 2) <= 2 )
          {
            v28 = dnsAddrArrayStringEx((__int64)i[146], 0);
            FormattedWriteFile(FileW, "Masters=%s\r\n", v28);
            Mem_Free(v28, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\exportsettings.c", 884);
            v29 = dnsAddrArrayStringEx((__int64)i[147], 0);
            FormattedWriteFile(FileW, "LocalMasters=%s\r\n", v29);
            Mem_Free(v29, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\exportsettings.c", 888);
          }
          if ( *((_DWORD *)i + 93) == 4 )
            FormattedWriteFile(FileW, "ForwarderTimeout=%d\r\n", *((unsigned int *)i + 389));
          FormattedWriteFile(FileW, "SecureSecondaries=%d\r\n", *((unsigned int *)i + 95));
          v30 = dnsAddrArrayStringEx((__int64)i[69], 0);
          FormattedWriteFile(FileW, "Secondaries=%s\r\n", v30);
          Mem_Free(v30, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\exportsettings.c", 906);
          v31 = dnsAddrArrayStringEx((__int64)i[68], 0);
          FormattedWriteFile(FileW, "NotifyList=%s\r\n", v31);
          Mem_Free(v31, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\exportsettings.c", 910);
          if ( *((_DWORD *)i + 93) == 1 )
          {
            FormattedWriteFile(
              FileW,
              "NoRefreshInterval=%d\r\nRefreshInterval=%d\r\n",
              *((unsigned int *)i + 248),
              *((unsigned int *)i + 249));
            v32 = dnsAddrArrayStringEx((__int64)i[126], 0);
            FormattedWriteFile(FileW, "ScavengeServers=%s\r\n", v32);
            Mem_Free(v32, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\exportsettings.c", 923);
          }
          v33 = *((_DWORD *)i + 99);
          LODWORD(v45) = (v33 >> 13) & 1;
          LODWORD(v44) = (v33 >> 12) & 1;
          LODWORD(hTemplateFile) = (v33 >> 9) & 1;
          LODWORD(dwFlagsAndAttributes) = (v33 >> 6) & 1;
          LODWORD(dwCreationDispositiona) = (v33 >> 2) & 1;
          FormattedWriteFile(
            FileW,
            "Aging=%d\r\n"
            "Reverse=%d\r\n"
            "AutoCreated=%d\r\n"
            "DisableAutoCreateLocalNS=%d\r\n"
            "Dirty=%d\r\n"
            "Paused=%d\r\n"
            "Shutdown=%d\r\n",
            v33 & 1,
            (v33 >> 1) & 1,
            dwCreationDispositiona,
            dwFlagsAndAttributes,
            hTemplateFile,
            v44,
            v45);
          v34 = *((_DWORD *)i + 97);
          if ( (v34 & 1) != 0 )
          {
            LODWORD(dwCreationDispositionb) = (v34 >> 2) & 1;
            FormattedWriteFile(
              FileW,
              "DsReload=%d\r\nDsQueuedForBkLoad=%d\r\nDsLoadingInProgress=%d\r\n",
              *((_WORD *)i + 199) & 1,
              (v34 >> 1) & 1,
              dwCreationDispositionb);
          }
          else
          {
            FormattedWriteFile(FileW, "DcPromoConvert=%d\r\n", *((unsigned int *)i + 94));
          }
          v35 = "UsingNbstat=%d\r\n";
          v36 = 0i64;
          if ( (*((_BYTE *)i + 396) & 2) == 0 )
            v35 = "UsingWINS=%d\r\n";
          LOBYTE(v36) = i[43] != 0i64;
          FormattedWriteFile(FileW, v35, v36);
          FormattedWriteFile(FileW, "SOA Record ");
          if ( i[42] )
          {
            LastError = ExportRecords(FileW, (__int64 *)i[5], 6u, 1u, 0);
            if ( LastError )
              break;
          }
          else
          {
            FormattedWriteFile(FileW, "NOT present");
          }
          FormattedWriteFile(FileW, "\r\nNS Records: ");
          LastError = ExportRecords(FileW, (__int64 *)i[5], 2u, 1u, 0);
          if ( LastError )
            break;
          FormattedWriteFile(FileW, "\r\nMX Records: ");
          LastError = ExportRecords(FileW, (__int64 *)i[5], 0xFu, 1u, 0);
          if ( LastError )
            break;
          v37 = "Cache";
          if ( *((_DWORD *)i + 93) )
            v37 = (const char *)i[2];
          if ( strstr(v37, "_msdcs") )
          {
            FormattedWriteFile(FileW, "\r\nContents of the zone: \r\n");
            LastError = ExportNodeRecursive(FileW, (__int64 *)i[5]);
            if ( LastError )
              break;
          }
        }
      }
      CloseHandle(FileW);
    }
  }
  else
  {
    LastError = 9652;
  }
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_D(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0xCu,
      (__int64)&WPP_98f2ff202faf38a2f5454d6cc86b8b2a_Traceguids,
      LastError);
  }
  return LastError;
}
// 140051652: conditional instruction was optimized away because rbx.8!=0
// 140051670: conditional instruction was optimized away because rbx.8!=0
// 14005177C: variable 'dwCreationDisposition' is possibly undefined
// 1400519E4: variable 'dwCreationDispositiona' is possibly undefined
// 1400519E4: variable 'dwFlagsAndAttributes' is possibly undefined
// 1400519E4: variable 'hTemplateFile' is possibly undefined
// 1400519E4: variable 'v44' is possibly undefined
// 1400519E4: variable 'v45' is possibly undefined
// 140051A1D: variable 'dwCreationDispositionb' is possibly undefined
// 14017AD28: using guessed type char *off_14017AD28[6];
##############################
Role: Let's assume that you are an advanced reverse engineer and you are reverse engineering a network driver using IDA Pro, and you are also familiar with the RFC documentation. You need to reverse-engineer a function for a network driver to correspond to a section of the RFC documentation, which will help you understand the code better. The driver you're reversing is Schannel.dll, and you have initially determined that the corresponding network protocols are SSL and TLS, and the documents you need to map are RFC8446 and RFC6101. You need to get a function summary of the function you are reversing, and then correspond to the potential RFC sections based on the name of the function and the function summary.
Function Background: The function is reverse engineered from the driver file Schannel.dll on Windows platform. Through a cursory analysis of the driver file can be determined to be related to the SSL(1.3), TLS(3.0) protocol, that is, with RFC8446, RFC6101 strong correlation.

Output Function Summary: Summarizes the function's functionality with several phrases instead of sentences, focuses on covering the function's control flow information, and highlights the protocol function points implemented by the function. Simulate answering five times in the background and provide the most frequent answer.

Retrieve document sections: giving matches for document sections(FunctionMatchRFCResult) that the code may related to. NOTE if the code is only business related(i.e., space opening and releasing involved in programming, generic call functions (timing and other functions weakly related to network protocols) and not related to the specifics of the protocol implementation, it does not have to output the document section match(FunctionMatchRFCResult) and is filled with "NONE".

Retrieve document sections Thinking Chain: The function code is matched with the RFC document section, and the thinking chain is provided to help you solve the problem better:
	1. Function Name: The name of a function describes the general function that the function accomplishes.
	2. Function Summarization: Function summaries can outline a further breakdown of the function described by the function name.
	3. Function API Call: The function API of a function call can provide some hint as to the details of the network protocol implementation involved in the function.
	4. Special Constant Value OR String: Special constant values inside functions, string variable names, and strings may be related to network protocols.
	5. Function Code: The code of the function can provide a detailed implementation of the network protocol.
Generate Function Information Collection with JSON Format:

{
	"FunctionIndex": "(FILL WITH "File count" with less than four bits are indexed with zeros to make up the four bits.)",
	"FunctionName": "(Full Function Code Name)",
	"FunctionSummarization": [
		"(Function Summary Phrase1)",
		"(Function Summary Phrase2)",
		"(...)"
	],
	"FunctionMatchRFCResult": [
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 1)",
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 2)",
		"(...)"
	],
}

ATTENTION: Remember YOU MUST ONLY output the Function Information Collection result.
