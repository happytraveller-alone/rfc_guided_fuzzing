Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 1101
// Total lines: 286

//----- (000000014008F49C) ----------------------------------------------------
__int64 __fastcall RR_ListCompare(__int64 a1, __int64 a2, __int64 a3, __int64 a4, unsigned int a5, unsigned int a6)
{
  unsigned int v6; // r14d
  int v7; // r15d
  int v8; // r12d
  __int64 v11; // rdi
  CDnsClientSubnetRecordsTrie *v13; // rcx
  char *v14; // rax
  char v15; // bp
  __int64 v17; // rbx
  int v18; // ebp
  __int64 v19; // rbx
  __int64 v20; // rbx
  unsigned int v21; // eax
  int v22; // ecx
  unsigned int v23; // eax
  int v24; // eax
  unsigned __int16 v25; // dx
  __int64 v26; // r9
  __int16 v27; // ax
  __int64 v28; // [rsp+20h] [rbp-48h]
  unsigned int v29; // [rsp+28h] [rbp-40h]
  int v31; // [rsp+78h] [rbp+10h]

  v6 = 0;
  v7 = 0;
  v8 = 0;
  v31 = 0;
  v11 = a2;
  v13 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x80000) == 0
    || *((_BYTE *)WPP_GLOBAL_Control + 65) < 5u )
  {
    v15 = a5;
  }
  else
  {
    v14 = Dbg_NodeName(a1);
    v15 = a5;
    v29 = a6;
    WPP_SF_sdD(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x6Du,
      (__int64)&WPP_10d39582251c332017bd035d2c946054_Traceguids,
      v14);
    v13 = WPP_GLOBAL_Control;
  }
  if ( !v11 || !a3 || v11 != a3 )
  {
    v17 = v11;
    if ( v11 != a3 )
    {
      v18 = v15 & 8;
      do
      {
        if ( v18
          && ((unsigned __int16)(*(_WORD *)(v17 + 12) - 46) <= 2u || (unsigned __int16)(*(_WORD *)(v17 + 12) - 50) <= 1u) )
        {
          if ( v13 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)v13 + 17) & 0x80000) != 0
            && *((_BYTE *)v13 + 65) >= 5u )
          {
            LODWORD(v28) = *(unsigned __int16 *)(v17 + 12);
            WPP_SF_qd(*((_QWORD *)v13 + 7), 0x6Fu, (__int64)&WPP_10d39582251c332017bd035d2c946054_Traceguids, v17, v28);
            v13 = WPP_GLOBAL_Control;
          }
        }
        else
        {
          ++v7;
        }
        v17 = *(_QWORD *)v17;
      }
      while ( v17 != a3 );
      v6 = 0;
    }
    v19 = a4;
    if ( a4 )
    {
      do
      {
        if ( (a5 & 8) != 0
          && ((unsigned __int16)(*(_WORD *)(v19 + 12) - 46) <= 2u || (unsigned __int16)(*(_WORD *)(v19 + 12) - 50) <= 1u) )
        {
          if ( v13 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)v13 + 17) & 0x80000) != 0
            && *((_BYTE *)v13 + 65) >= 5u )
          {
            LODWORD(v28) = *(unsigned __int16 *)(v19 + 12);
            WPP_SF_qd(*((_QWORD *)v13 + 7), 0x70u, (__int64)&WPP_10d39582251c332017bd035d2c946054_Traceguids, v19, v28);
          }
        }
        else
        {
          ++v8;
        }
        *(_WORD *)(v19 + 10) &= ~0x8000u;
        v19 = *(_QWORD *)v19;
        v13 = WPP_GLOBAL_Control;
      }
      while ( v19 );
      v11 = a2;
    }
    if ( v7 != v8 )
    {
      if ( v13 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)v13 + 17) & 0x80000) != 0
        && *((_BYTE *)v13 + 65) >= 4u )
      {
        WPP_SF_Dd(*((_QWORD *)v13 + 7), 0x71u, (__int64)&WPP_10d39582251c332017bd035d2c946054_Traceguids, v7);
      }
      return 255i64;
    }
    if ( v11 == a3 )
      goto LABEL_90;
    while ( 1 )
    {
      v20 = a4;
      if ( !a4 )
      {
LABEL_48:
        if ( (a5 & 8) == 0
          || (unsigned __int16)(*(_WORD *)(v11 + 12) - 46) > 2u && (unsigned __int16)(*(_WORD *)(v11 + 12) - 50) > 1u )
        {
          if ( v13 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)v13 + 17) & 0x80000) != 0
            && *((_BYTE *)v13 + 65) >= 4u )
          {
            v24 = *(unsigned __int16 *)(v11 + 12);
            v25 = 115;
            v26 = v11;
LABEL_78:
            LODWORD(v28) = v24;
            WPP_SF_qd(
              *((_QWORD *)v13 + 7),
              v25,
              (__int64)&WPP_10d39582251c332017bd035d2c946054_Traceguids,
              v26,
              v28,
              v29);
          }
          return 255i64;
        }
        if ( v13 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)v13 + 17) & 0x80000) != 0
          && *((_BYTE *)v13 + 65) >= 5u )
        {
          LODWORD(v28) = *(unsigned __int16 *)(v11 + 12);
          WPP_SF_qd(*((_QWORD *)v13 + 7), 0x72u, (__int64)&WPP_10d39582251c332017bd035d2c946054_Traceguids, v11, v28);
          v13 = WPP_GLOBAL_Control;
        }
        v31 = 1;
        goto LABEL_56;
      }
      while ( (*(_WORD *)(v20 + 10) & 0x8000) != 0 || !(unsigned int)RR_Compare(v11, v20, a5) )
      {
        v20 = *(_QWORD *)v20;
        if ( !v20 )
        {
          v13 = WPP_GLOBAL_Control;
          goto LABEL_48;
        }
      }
      *(_WORD *)(v20 + 10) |= 0x8000u;
      if ( a6 )
      {
        if ( a6 == -1 )
        {
          if ( *(_DWORD *)(v11 + 24) )
            *(_DWORD *)(v11 + 24) = g_CurrentTimeHours;
        }
        else
        {
          v21 = *(_DWORD *)(v11 + 24);
          v22 = *(_DWORD *)(v20 + 24);
          if ( v21 != v22 )
          {
            if ( v21 )
            {
              if ( !v22 )
              {
                v23 = 130;
                goto LABEL_71;
              }
              if ( v21 < a6 )
              {
                v23 = 34;
                goto LABEL_71;
              }
            }
            else if ( v22 )
            {
              v23 = 66;
LABEL_71:
              if ( v23 > v6 )
                v6 = v23;
            }
          }
        }
      }
      v13 = WPP_GLOBAL_Control;
LABEL_56:
      v11 = *(_QWORD *)v11;
      if ( v11 == a3 )
      {
        while ( 1 )
        {
LABEL_90:
          if ( !a4 )
          {
            if ( !v6 && v31 )
            {
              if ( v13 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                && (*((_DWORD *)v13 + 17) & 0x80000) != 0
                && *((_BYTE *)v13 + 65) >= 4u )
              {
                WPP_SF_(*((_QWORD *)v13 + 7), 0x76u, (__int64)&WPP_10d39582251c332017bd035d2c946054_Traceguids);
                v13 = WPP_GLOBAL_Control;
              }
              v6 = 18;
            }
            if ( (*((_DWORD *)v13 + 17) & 0x80000) != 0 )
            {
              if ( v6 )
              {
                if ( v13 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control && *((_BYTE *)v13 + 65) >= 4u )
                  WPP_SF_D(*((_QWORD *)v13 + 7), 0x79u, (__int64)&WPP_10d39582251c332017bd035d2c946054_Traceguids, v6);
              }
              else if ( v13 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control && *((_BYTE *)v13 + 65) >= 4u )
              {
                WPP_SF_(*((_QWORD *)v13 + 7), 0x78u, (__int64)&WPP_10d39582251c332017bd035d2c946054_Traceguids);
              }
            }
            return v6;
          }
          v27 = *(_WORD *)(a4 + 10);
          if ( (v27 & 0x8000) != 0 )
          {
            *(_WORD *)(a4 + 10) = v27 & 0x7FFF;
            v13 = WPP_GLOBAL_Control;
          }
          else
          {
            if ( (a5 & 8) == 0
              || (unsigned __int16)(*(_WORD *)(a4 + 12) - 46) > 2u && (unsigned __int16)(*(_WORD *)(a4 + 12) - 50) > 1u )
            {
              if ( v13 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                && (*((_DWORD *)v13 + 17) & 0x80000) != 0
                && *((_BYTE *)v13 + 65) >= 4u )
              {
                v24 = *(unsigned __int16 *)(a4 + 12);
                v25 = 117;
                v26 = a4;
                goto LABEL_78;
              }
              return 255i64;
            }
            if ( v13 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              && (*((_DWORD *)v13 + 17) & 0x80000) != 0
              && *((_BYTE *)v13 + 65) >= 5u )
            {
              LODWORD(v28) = *(unsigned __int16 *)(a4 + 12);
              WPP_SF_qd(*((_QWORD *)v13 + 7), 0x74u, (__int64)&WPP_10d39582251c332017bd035d2c946054_Traceguids, a4, v28);
              v13 = WPP_GLOBAL_Control;
            }
            v31 = 1;
          }
          a4 = *(_QWORD *)a4;
        }
      }
    }
  }
  if ( v13 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)v13 + 17) & 0x80000) != 0
    && *((_BYTE *)v13 + 65) >= 4u )
  {
    WPP_SF_(*((_QWORD *)v13 + 7), 0x6Eu, (__int64)&WPP_10d39582251c332017bd035d2c946054_Traceguids);
  }
  return 255i64;
}
// 14008F9C2: conditional instruction was optimized away because r14d.4 is in (==0|==12|==22|==42|==82)
// 14008F5F3: variable 'v28' is possibly undefined
// 14008F87F: variable 'v29' is possibly undefined
// 1401B8C1C: using guessed type int g_CurrentTimeHours;
