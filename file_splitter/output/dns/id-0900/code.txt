Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 900
// Total lines: 417

//----- (000000014007AAD8) ----------------------------------------------------
__int64 __fastcall Remote_BuildNsListForNode(__int64 a1, _DWORD *a2, unsigned int a3, __int64 a4)
{
  _DWORD *v4; // rsi
  __int64 v5; // r13
  __int64 v6; // r12
  BOOL v7; // r14d
  BOOL v8; // edi
  char *v9; // rax
  unsigned __int64 v10; // r15
  unsigned __int64 v11; // rbx
  __int64 v12; // r14
  __int64 v13; // rsi
  __int64 v14; // r12
  __int64 *v15; // rcx
  int v16; // edi
  CDnsClientSubnetRecordsTrie *v17; // rcx
  char *v18; // rax
  char *v19; // rax
  __int64 v20; // r15
  unsigned int v21; // esi
  __int64 v22; // r14
  unsigned __int16 v23; // di
  unsigned __int64 v24; // r13
  int v25; // esi
  __int64 v26; // rax
  __int64 v27; // rax
  __int64 v28; // rdi
  char v29; // al
  int v30; // r12d
  int v31; // edi
  __int64 v32; // rdx
  __int64 v33; // r8
  CDnsClientSubnetRecordsTrie *v34; // r10
  unsigned int v35; // ebx
  __int64 v36; // rax
  __int64 v37; // rdi
  char v38; // r15
  unsigned __int64 v39; // rax
  _OWORD *v40; // rsi
  __int128 v41; // xmm1
  __int64 v42; // r14
  int v43; // ebx
  _DWORD *v44; // rsi
  _QWORD *v45; // rax
  __int64 v46; // rcx
  unsigned int v47; // eax
  unsigned int v48; // ecx
  const char *v49; // rax
  BOOL v51; // [rsp+58h] [rbp-39h]
  unsigned int v52; // [rsp+5Ch] [rbp-35h] BYREF
  int v53; // [rsp+60h] [rbp-31h]
  unsigned __int64 v54; // [rsp+68h] [rbp-29h]
  unsigned int v55; // [rsp+70h] [rbp-21h]
  __int64 v56; // [rsp+78h] [rbp-19h]
  __int64 v57; // [rsp+80h] [rbp-11h] BYREF
  __int64 v58; // [rsp+88h] [rbp-9h] BYREF
  __int64 NextRecord; // [rsp+90h] [rbp-1h]
  _BOOL8 v60; // [rsp+98h] [rbp+7h]

  v55 = 0;
  v4 = a2;
  v5 = a1;
  v6 = 0i64;
  v7 = 0;
  v51 = 0;
  v8 = DnsAddrArray_GetFamilyCount((__int64)g_ServerAddrs, 23) == 0;
  v52 = -1;
  acquireUpdate(DbaseLock, 0xFFFFFFFF, &v52, 1);
  if ( v5 )
    *(_BYTE *)(v5 + 98) = CurrentTimeoutBin;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x4000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
  {
    v9 = Dbg_NodeName(v5);
    WPP_SF_qs(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x1Du,
      (__int64)&WPP_eab7c483710f366eae903c691df4ee49_Traceguids,
      v4,
      v9);
  }
  v10 = (unsigned __int64)(v4 + 2412);
  v11 = (unsigned __int64)(v4 + 12);
  v60 = v8;
  v54 = (unsigned __int64)(v4 + 2412);
  if ( v4 + 12 < v4 + 2412 )
  {
    while ( 1 )
    {
      v57 = 0i64;
      v12 = 0i64;
      v58 = 0i64;
      v53 = 0;
      v56 = 0i64;
      NextRecord = RR_FindNextRecordEx(v5, 0, 2u, v6, a3, 1);
      v13 = NextRecord;
      if ( !NextRecord )
      {
        if ( v5 )
          v36 = *(_QWORD *)(v5 + 56);
        else
          v36 = 0i64;
        if ( v36
          && *(_DWORD *)(v36 + 372) == 4
          && ((*(_BYTE *)(v36 + 1160) & 0x40) != 0 && (v37 = *(_QWORD *)(v36 + 1176)) != 0
           || (v37 = *(_QWORD *)(v36 + 1168)) != 0) )
        {
          v38 = CurrentTimeoutBin;
          while ( (unsigned int)v12 < *(_DWORD *)(v37 + 4) )
          {
            v39 = (unsigned __int64)(unsigned int)v12 << 6;
            v40 = (_OWORD *)(v39 + v37 + 32);
            if ( v40 && !(unsigned int)DnsAddrArray_ContainsAddr((__int64)g_ServerAddrs, (_WORD *)(v39 + v37 + 32), 3) )
            {
              if ( v5 )
                *(_BYTE *)(v5 + 98) = v38;
              *(_OWORD *)(v11 + 24) = *v40;
              *(_OWORD *)(v11 + 40) = v40[1];
              *(_OWORD *)(v11 + 56) = v40[2];
              v41 = v40[3];
              *(_DWORD *)(v11 + 8) = 0;
              *(_QWORD *)(v11 + 16) = 0i64;
              *(_OWORD *)(v11 + 72) = v41;
              *(_QWORD *)v11 = v5;
              v11 += 96i64;
            }
            LODWORD(v12) = v12 + 1;
          }
        }
        goto LABEL_75;
      }
      if ( !v51 )
        v51 = *(_BYTE *)(NextRecord + 8) != 8;
      v52 = -1;
      releaseUpdate(DbaseLock, &v52, 1);
      v14 = Lookup_NsHostNode(v13 + 56, 536887304, *(_QWORD *)(v5 + 56), &v57, &v58, a3, 0i64, a4);
      v52 = -1;
      acquireUpdate(DbaseLock, 0xFFFFFFFF, &v52, 1);
      v15 = *(__int64 **)(v5 + 64);
      v16 = 1;
      while ( v15 )
      {
        if ( v15 == (__int64 *)v13 )
        {
          v16 = 0;
          break;
        }
        if ( *(_WORD *)(v13 + 12) < *((_WORD *)v15 + 6) )
          break;
        v15 = (__int64 *)*v15;
      }
      v17 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 7) & 0x800) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 25) >= 4u )
      {
        WPP_SF_D(
          *((_QWORD *)WPP_GLOBAL_Control + 2),
          0x7Bu,
          (__int64)&WPP_10d39582251c332017bd035d2c946054_Traceguids,
          v16);
        v17 = WPP_GLOBAL_Control;
      }
      if ( v16 )
      {
        if ( v17 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)v17 + 17) & 0x4000) != 0
          && *((_BYTE *)v17 + 65) >= 4u )
        {
          WPP_SF_qq(*((_QWORD *)v17 + 7), 0x1Eu, (__int64)&WPP_eab7c483710f366eae903c691df4ee49_Traceguids, v13, v5);
        }
LABEL_75:
        v4 = a2;
        v7 = v51;
        break;
      }
      if ( v14 )
      {
        if ( v17 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
        {
          if ( (*((_DWORD *)v17 + 17) & 0x4000) != 0 && *((_BYTE *)v17 + 65) >= 4u )
          {
            v18 = Dbg_NodeName(v5);
            WPP_SF_s(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x1Fu,
              (__int64)&WPP_eab7c483710f366eae903c691df4ee49_Traceguids,
              v18);
            v17 = WPP_GLOBAL_Control;
          }
          if ( v17 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)v17 + 17) & 0x4000) != 0
            && *((_BYTE *)v17 + 65) >= 4u )
          {
            v19 = Dbg_NodeName(v14);
            WPP_SF_s(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x20u,
              (__int64)&WPP_eab7c483710f366eae903c691df4ee49_Traceguids,
              v19);
          }
        }
        while ( v11 < v10 )
        {
          v20 = v14;
          if ( dword_1401B9824 && v12 )
            v20 = v12;
          v21 = 0;
          v52 = 0;
          do
          {
            if ( v21 >= 2 )
              break;
            v22 = 0i64;
            v23 = v21 != 0 ? 1 : 28;
            if ( (v21 != 0 ? 0xFFE5 : 0) != 0 || !v60 )
            {
              v24 = v54;
              if ( v11 < v54 )
              {
                v25 = v53;
                do
                {
                  v26 = RR_FindNextRecordEx(v20, 0, v23, v22, a3, 1);
                  v22 = v26;
                  if ( !v26 || *(char *)(v26 + 10) < 0 )
                    break;
                  if ( !(unsigned int)createRemoteEntry(v11, v14, v26) )
                  {
                    v11 += 96i64;
                    ++v25;
                  }
                }
                while ( v11 < v24 );
                v53 = v25;
                v21 = v52;
              }
            }
            v52 = ++v21;
          }
          while ( v11 < v54 );
          v5 = a1;
          if ( v53 )
          {
            v10 = v54;
            goto LABEL_68;
          }
          if ( !v56 )
          {
            if ( dword_1401B9824 )
            {
              v27 = Remote_NsChaseCname(v14, a3, a4);
              v10 = v54;
              v12 = v27;
              v56 = v27;
              if ( v27 )
                continue;
            }
          }
          v10 = v54;
          break;
        }
        if ( *(_BYTE *)(v14 + 96) == 0xF2 )
        {
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x4000) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            WPP_SF_qs(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x21u,
              (__int64)&WPP_eab7c483710f366eae903c691df4ee49_Traceguids,
              v14,
              v14 + 102);
          }
          v4 = a2;
          v7 = v51;
          break;
        }
        v28 = v57;
        if ( !v57 && v58 && (*(_DWORD *)(v58 + 396) & 0x3000) == 0 && *(_QWORD *)(v58 + 40) != v57 )
          v28 = *(_QWORD *)(v58 + 40);
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x4000) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          WPP_SF_qqs(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x22u,
            (__int64)&WPP_eab7c483710f366eae903c691df4ee49_Traceguids,
            NextRecord,
            v5,
            v5 + 102);
        }
        v29 = CurrentTimeoutBin;
        *(_BYTE *)(v14 + 98) = CurrentTimeoutBin;
        if ( v28 )
          *(_BYTE *)(v28 + 98) = v29;
        *(_QWORD *)v11 = v14;
        DnsAddr_BuildFromIp4((struct in_addr *)(v11 + 24), (struct in_addr)-1, 0);
        *(_QWORD *)(v11 + 8) = v28;
        v11 += 96i64;
      }
LABEL_68:
      if ( v11 >= v10 )
        goto LABEL_75;
      v6 = NextRecord;
    }
  }
  v30 = 1;
  LOBYTE(v31) = -1;
  v52 = -1;
  releaseUpdate(DbaseLock, &v52, 1);
  if ( !*(_QWORD *)v5 && (_DWORD *)v11 == v4 + 12 && v7 )
  {
    v34 = WPP_GLOBAL_Control;
    v35 = -1072573690;
  }
  else
  {
    v32 = (__int64)(v11 - (_QWORD)v4 - 48) / 96;
    *v4 = v32;
    v34 = WPP_GLOBAL_Control;
    if ( (_DWORD)v32 )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x8000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_q(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x14u,
          (__int64)&WPP_eab7c483710f366eae903c691df4ee49_Traceguids,
          v4);
        v34 = WPP_GLOBAL_Control;
      }
      v42 = 0i64;
      if ( *v4 )
      {
        do
        {
          v43 = 50;
          v44 = &a2[24 * v42 + 18];
          if ( *(_WORD *)v44 != 2 || v44[1] != -1 )
          {
            v52 = -1;
            acquireRead(hRemoteLock, 0xFFFFFFFF, &v52);
            v45 = Remote_FindOrCreate((__int64)&a2[24 * v42 + 18], 0);
            if ( v45 )
            {
              if ( *((_DWORD *)v45 + 22) )
                v30 = 0;
              else
                *((_DWORD *)v45 + 22) = 50;
              v43 = *((_DWORD *)v45 + 22);
            }
            v52 = -1;
            releaseRead(hRemoteLock, &v52, 1);
            if ( v30 )
            {
              if ( g_BoundAddrs )
              {
                v47 = rankIpRelativeToIpAddressArray(v46, (struct in_addr *)&a2[24 * v42 + 18]);
                v48 = v43;
                v43 -= v47;
                if ( v47 >= v48 )
                  v43 = 1;
              }
            }
            if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x8000) != 0
              && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
            {
              v49 = DnsAddr_Ntoa((struct in_addr *)&a2[24 * v42 + 18]);
              WPP_SF_sdD(
                *((_QWORD *)WPP_GLOBAL_Control + 7),
                0x15u,
                (__int64)&WPP_eab7c483710f366eae903c691df4ee49_Traceguids,
                v49);
            }
            a2[24 * v42 + 14] = v43;
            LOBYTE(v31) = -1;
            v34 = WPP_GLOBAL_Control;
          }
          v30 = 1;
          v42 = (unsigned int)(v42 + 1);
        }
        while ( (unsigned int)v42 < *a2 );
        v5 = a1;
      }
      v35 = v55;
    }
    else
    {
      v35 = 232;
    }
  }
  if ( v34 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)v34 + 17) & 0x4000) != 0
    && *((_BYTE *)v34 + 65) >= 4u )
  {
    if ( a2 )
      v31 = *a2;
    WPP_SF_ddqs(*((_QWORD *)v34 + 7), v32, v33, v35, v31, v5, v5 + 102);
  }
  return v35;
}
// 14007AE88: conditional instruction was optimized away because edi.4==0
// 14007B1FE: variable 'v46' is possibly undefined
// 14007B2DB: variable 'v32' is possibly undefined
// 14007B2DB: variable 'v33' is possibly undefined
// 1401B9028: using guessed type __int64 hRemoteLock;
// 1401B9824: using guessed type int dword_1401B9824;
// 1401BA4B8: using guessed type char CurrentTimeoutBin;
// 1401EC5E8: using guessed type __int64 DbaseLock;
