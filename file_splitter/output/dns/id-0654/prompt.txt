Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 654
// Total lines: 568

//----- (000000014005B1B0) ----------------------------------------------------
void __fastcall LogUpdatePolicyEvent(__int64 a1, __int64 a2, __int64 a3)
{
  __int64 v6; // rsi
  __int64 v7; // rdi
  unsigned int v8; // r12d
  __int64 v9; // r8
  __int64 v10; // rax
  const WCHAR **v11; // rcx
  const WCHAR *v12; // rcx
  _DWORD *v13; // rax
  unsigned int v14; // r12d
  _DWORD *v15; // rcx
  __int64 v16; // rbx
  const unsigned __int16 *v17; // r8
  __int64 v18; // rdx
  int v19; // r9d
  const unsigned __int16 *v20; // rcx
  __int64 v21; // rdx
  __int64 v22; // rbx
  _DWORD *v23; // rcx
  __int64 v24; // rax
  const unsigned __int16 *v25; // rdx
  UINT v26; // ecx
  UINT v27; // ecx
  __int64 v28; // rax
  __int64 v29; // rdi
  __int64 v30; // rax
  __int64 v31; // rsi
  __int64 v32; // rax
  __int64 v33; // rdi
  __int64 v34; // rax
  __int64 v35; // rsi
  bool v36; // zf
  char *v37; // rcx
  char *v38; // rcx
  __int64 v39; // rax
  __int64 v40; // rax
  WCHAR *v41; // rbx
  __int64 v42; // rax
  __int64 v43; // rax
  WCHAR *v44; // rbx
  __int64 v45; // rax
  __int64 v46; // rax
  WCHAR *v47; // rbx
  __int64 v48; // rax
  __int64 v49; // rax
  WCHAR *v50; // rbx
  __int64 v51; // rax
  __int64 v52; // rax
  WCHAR *v53; // rbx
  WCHAR *v54; // rbx
  __int64 v55; // rax
  __int64 v56; // rax
  __int64 v57; // r8
  unsigned __int16 *v58; // rax
  __int64 v59; // rcx
  CDnsClientSubnetRecordsTrie *v60; // rcx
  unsigned __int16 v61; // dx
  const unsigned __int16 *v62; // rcx
  unsigned int v63; // [rsp+40h] [rbp-C0h] BYREF
  int v64; // [rsp+44h] [rbp-BCh] BYREF
  int v65; // [rsp+48h] [rbp-B8h]
  unsigned __int16 *ConcatenatedString_W; // [rsp+50h] [rbp-B0h]
  unsigned __int16 *v67; // [rsp+58h] [rbp-A8h]
  char *v68[32]; // [rsp+60h] [rbp-A0h] BYREF
  char *v69[32]; // [rsp+160h] [rbp+60h] BYREF
  WCHAR v70[64]; // [rsp+260h] [rbp+160h] BYREF
  WCHAR v71[64]; // [rsp+2E0h] [rbp+1E0h] BYREF
  WCHAR v72[64]; // [rsp+360h] [rbp+260h] BYREF
  WCHAR v73[64]; // [rsp+3E0h] [rbp+2E0h] BYREF
  WCHAR v74[64]; // [rsp+460h] [rbp+360h] BYREF
  WCHAR v75[64]; // [rsp+4E0h] [rbp+3E0h] BYREF
  WCHAR v76[64]; // [rsp+560h] [rbp+460h] BYREF
  WCHAR v77[64]; // [rsp+5E0h] [rbp+4E0h] BYREF
  WCHAR v78[64]; // [rsp+660h] [rbp+560h] BYREF
  wchar_t Buffer[64]; // [rsp+6E0h] [rbp+5E0h] BYREF
  wchar_t v80[64]; // [rsp+760h] [rbp+660h] BYREF
  __int16 v81[448]; // [rsp+7E0h] [rbp+6E0h] BYREF

  ConcatenatedString_W = 0i64;
  v67 = 0i64;
  LODWORD(v6) = 0;
  v65 = 0;
  LODWORD(v7) = 0;
  v8 = 0;
  memset_0(v71, 0, sizeof(v71));
  memset_0(v72, 0, sizeof(v72));
  memset_0(v73, 0, sizeof(v73));
  memset_0(v74, 0, sizeof(v74));
  memset_0(Buffer, 0, sizeof(Buffer));
  memset_0(v80, 0, sizeof(v80));
  memset_0(v75, 0, sizeof(v75));
  memset_0(v76, 0, sizeof(v76));
  memset_0(v77, 0, sizeof(v77));
  memset_0(v70, 0, sizeof(v70));
  memset_0(v78, 0, sizeof(v78));
  if ( (*(_DWORD *)(a3 + 48) & 0x40000) != 0 )
  {
    if ( *(_DWORD *)(a3 + 8) || *(_DWORD *)(a3 + 12) != 3 )
    {
      if ( *(_DWORD *)(a3 + 8) == 1 )
      {
        v13 = *(_DWORD **)(a3 + 40);
        v63 = 0;
        if ( *v13 )
        {
          v14 = v63;
          do
          {
            v15 = *(_DWORD **)(a2 + 40);
            v16 = 0i64;
            if ( *v15 )
            {
              v9 = v14;
              while ( lstrcmpiW(**(LPCWSTR **)(*(_QWORD *)(a3 + 40) + 8 * v9 + 8), **(LPCWSTR **)&v15[2 * v16 + 2]) )
              {
                v15 = *(_DWORD **)(a2 + 40);
                v16 = (unsigned int)(v16 + 1);
                v9 = v14;
                if ( (unsigned int)v16 >= *v15 )
                  goto LABEL_17;
              }
              v18 = *(_QWORD *)(a3 + 40);
              v9 = *(unsigned int *)(*(_QWORD *)(v18 + 8i64 * v14 + 8) + 8i64);
              v19 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + 8 * v16 + 8) + 8i64);
              if ( (_DWORD)v9 != v19 && (dword_1401B9104 & 0x1000) != 0 )
              {
                if ( a1 && *(_DWORD *)(a1 + 372) )
                  v20 = *(const unsigned __int16 **)(a1 + 24);
                else
                  v20 = L"..Cache";
                Template_zszqqz(
                  (__int64)v20,
                  v18,
                  *(const unsigned __int16 **)a3,
                  Str,
                  **(const unsigned __int16 ***)(v18 + 8),
                  v9,
                  v19,
                  v20);
              }
            }
            else
            {
LABEL_17:
              if ( (dword_1401B9104 & 0x1000) != 0 )
              {
                if ( a1 && *(_DWORD *)(a1 + 372) )
                  v17 = *(const unsigned __int16 **)(a1 + 24);
                else
                  v17 = L"..Cache";
                v21 = *(_QWORD *)(*(_QWORD *)(a3 + 40) + 8i64 * v14 + 8);
                Template_zszqz(
                  v14,
                  v21,
                  *(const unsigned __int16 **)a3,
                  Str,
                  *(const unsigned __int16 **)v21,
                  *(_DWORD *)(v21 + 8),
                  v17);
              }
            }
            ++v14;
          }
          while ( v14 < **(_DWORD **)(a3 + 40) );
          LODWORD(v6) = v65;
          v8 = 0;
        }
        v22 = 0i64;
        if ( **(_DWORD **)(a2 + 40) )
        {
          do
          {
            v23 = *(_DWORD **)(a3 + 40);
            v24 = 0i64;
            v63 = 0;
            if ( *v23 )
            {
              v9 = (unsigned int)v22;
              while ( lstrcmpiW(**(LPCWSTR **)(*(_QWORD *)(a2 + 40) + 8 * v9 + 8), **(LPCWSTR **)&v23[2 * v24 + 2]) )
              {
                v23 = *(_DWORD **)(a3 + 40);
                v24 = v63 + 1;
                v63 = v24;
                v9 = (unsigned int)v22;
                if ( (unsigned int)v24 >= *v23 )
                  goto LABEL_37;
              }
            }
            else
            {
LABEL_37:
              if ( (dword_1401B9104 & 0x1000) != 0 )
              {
                if ( a1 && *(_DWORD *)(a1 + 372) )
                  v25 = *(const unsigned __int16 **)(a1 + 24);
                else
                  v25 = L"..Cache";
                Template_zszz(
                  (__int64)v23,
                  &DNS_EVENT_UPDATE_ZONE_LEVEL_POLICY_DELETE_SCOPE,
                  *(const unsigned __int16 **)a3,
                  Str,
                  **(const unsigned __int16 ***)(*(_QWORD *)(a2 + 40) + 8 * v22 + 8),
                  v25);
              }
            }
            v22 = (unsigned int)(v22 + 1);
          }
          while ( (unsigned int)v22 < **(_DWORD **)(a2 + 40) );
          v8 = 0;
        }
      }
    }
    else
    {
      v10 = *(_QWORD *)(a3 + 40);
      if ( v10 )
      {
        v11 = *(const WCHAR ***)(v10 + 8);
        if ( v11 )
        {
          v12 = *v11;
          if ( v12 )
          {
            if ( lstrcmpiW(v12, **(LPCWSTR **)(*(_QWORD *)(a2 + 40) + 8i64)) && (dword_1401B9104 & 0x1000) != 0 )
              Template_zszz(
                *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8i64),
                &DNS_EVENT_UPDATE_FORWARDING_POLICY_SCOPE,
                *(const unsigned __int16 **)a3,
                Str,
                **(const unsigned __int16 ***)(*(_QWORD *)(a3 + 40) + 8i64),
                **(const unsigned __int16 ***)(*(_QWORD *)(a2 + 40) + 8i64));
          }
        }
      }
    }
  }
  if ( (*(_DWORD *)(a3 + 48) & 0x10000) != 0 )
  {
    Dns_GetResourceString(0x2F43u, v71, 64i64);
    if ( *(_DWORD *)(a2 + 20) )
    {
      if ( *(_DWORD *)(a2 + 20) != 1 )
        goto LABEL_51;
      v26 = 12098;
    }
    else
    {
      v26 = 12097;
    }
    Dns_GetResourceString(v26, v72, 64i64);
LABEL_51:
    if ( *(_DWORD *)(a3 + 20) )
    {
      if ( *(_DWORD *)(a3 + 20) != 1 )
      {
LABEL_56:
        v69[0] = (char *)v71;
        v69[2] = (char *)L"; ";
        v68[0] = (char *)v71;
        v68[1] = (char *)v72;
        v69[1] = (char *)v73;
        LODWORD(v6) = 3;
        v68[2] = (char *)L"; ";
        LODWORD(v7) = 3;
        goto LABEL_57;
      }
      v27 = 12098;
    }
    else
    {
      v27 = 12097;
    }
    Dns_GetResourceString(v27, v73, 64i64);
    goto LABEL_56;
  }
LABEL_57:
  if ( (*(_DWORD *)(a3 + 48) & 0x20000) != 0 )
  {
    Dns_GetResourceString(0x2F44u, v74, 64i64);
    if ( _itow_s(*(_DWORD *)(a2 + 28), Buffer, 0x40ui64, 10) || _itow_s(*(_DWORD *)(a3 + 28), v80, 0x40ui64, 10) )
    {
      v60 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
      {
        goto LABEL_117;
      }
      v61 = 43;
      goto LABEL_116;
    }
    v28 = (unsigned int)v7;
    v29 = (unsigned int)(v7 + 1);
    v69[v28] = (char *)v74;
    v30 = (unsigned int)v6;
    v31 = (unsigned int)(v6 + 1);
    v68[v30] = (char *)v74;
    v68[v31] = (char *)Buffer;
    v6 = (unsigned int)(v31 + 1);
    v69[v29] = (char *)v80;
    v7 = (unsigned int)(v29 + 1);
    v68[v6] = (char *)L"; ";
    LODWORD(v6) = v6 + 1;
    v69[v7] = (char *)L"; ";
    LODWORD(v7) = v7 + 1;
  }
  if ( (*(_DWORD *)(a3 + 48) & 0x80000) != 0 )
  {
    Dns_GetResourceString(0x2F45u, v75, 64i64);
    Dns_GetResourceString(0x2EE3u, v76, 64i64);
    Dns_GetResourceString(0x2EE4u, v77, 64i64);
    v32 = (unsigned int)v7;
    v33 = (unsigned int)(v7 + 1);
    v69[v32] = (char *)v75;
    v34 = (unsigned int)v6;
    v35 = (unsigned int)(v6 + 1);
    v36 = *(_DWORD *)(a2 + 24) == 0;
    v68[v34] = (char *)v75;
    v37 = (char *)v76;
    if ( v36 )
      v37 = (char *)v77;
    v68[v35] = v37;
    v6 = (unsigned int)(v35 + 1);
    v38 = (char *)v76;
    if ( !*(_DWORD *)(a3 + 24) )
      v38 = (char *)v77;
    v69[v33] = v38;
    v7 = (unsigned int)(v33 + 1);
    v68[v6] = (char *)L"; ";
    LODWORD(v6) = v6 + 1;
    v69[v7] = (char *)L"; ";
    LODWORD(v7) = v7 + 1;
  }
  if ( (*(_BYTE *)(a3 + 48) & 0x7F) != 0 )
  {
    Dns_GetResourceString(0x2F4Eu, v70, 64i64);
    Dns_GetResourceString(0x2F46u, v78, 64i64);
    v39 = (unsigned int)v7;
    v7 = (unsigned int)(v7 + 1);
    v69[v39] = (char *)v78;
    v40 = (unsigned int)v6;
    v6 = (unsigned int)(v6 + 1);
    v68[v40] = (char *)v78;
    if ( (*(_BYTE *)(a3 + 48) & 1) != 0 )
    {
      Dns_GetResourceString(0x2F47u, (LPWSTR)v81, 64i64);
      v8 = 1;
      v69[v7] = (char *)v81;
      LODWORD(v7) = v7 + 1;
      v63 = v7;
      v68[v6] = (char *)v81;
      LODWORD(v6) = v6 + 1;
      v64 = v6;
      if ( (unsigned int)v7 <= 0x1C )
      {
        SearchAndInsertCriteriaValues(4, a2, a3, (__int64)v70, &v64, (__int64)v68, &v63, (__int64)v69);
        LODWORD(v6) = v64;
        LODWORD(v7) = v63;
      }
    }
    if ( (*(_BYTE *)(a3 + 48) & 2) != 0 )
    {
      v41 = (WCHAR *)&v81[64 * (unsigned __int64)v8];
      Dns_GetResourceString(0x2F48u, v41, 64i64);
      v42 = (unsigned int)v7;
      ++v8;
      LODWORD(v7) = v7 + 1;
      v63 = v7;
      v69[v42] = (char *)v41;
      v43 = (unsigned int)v6;
      LODWORD(v6) = v6 + 1;
      v64 = v6;
      v68[v43] = (char *)v41;
      if ( (unsigned int)v7 <= 0x1C )
      {
        SearchAndInsertCriteriaValues(0, a2, a3, (__int64)v70, &v64, (__int64)v68, &v63, (__int64)v69);
        LODWORD(v6) = v64;
        LODWORD(v7) = v63;
      }
    }
    if ( (*(_BYTE *)(a3 + 48) & 4) != 0 )
    {
      v44 = (WCHAR *)&v81[64 * (unsigned __int64)v8];
      Dns_GetResourceString(0x2F4Bu, v44, 64i64);
      v45 = (unsigned int)v7;
      ++v8;
      LODWORD(v7) = v7 + 1;
      v63 = v7;
      v69[v45] = (char *)v44;
      v46 = (unsigned int)v6;
      LODWORD(v6) = v6 + 1;
      v64 = v6;
      v68[v46] = (char *)v44;
      if ( (unsigned int)v7 <= 0x1C )
      {
        SearchAndInsertCriteriaValues(3, a2, a3, (__int64)v70, &v64, (__int64)v68, &v63, (__int64)v69);
        LODWORD(v6) = v64;
        LODWORD(v7) = v63;
      }
    }
    if ( (*(_BYTE *)(a3 + 48) & 8) != 0 )
    {
      v47 = (WCHAR *)&v81[64 * (unsigned __int64)v8];
      Dns_GetResourceString(0x2F4Cu, v47, 64i64);
      v48 = (unsigned int)v7;
      ++v8;
      LODWORD(v7) = v7 + 1;
      v63 = v7;
      v69[v48] = (char *)v47;
      v49 = (unsigned int)v6;
      LODWORD(v6) = v6 + 1;
      v64 = v6;
      v68[v49] = (char *)v47;
      if ( (unsigned int)v7 <= 0x1C )
      {
        SearchAndInsertCriteriaValues(5, a2, a3, (__int64)v70, &v64, (__int64)v68, &v63, (__int64)v69);
        LODWORD(v6) = v64;
        LODWORD(v7) = v63;
      }
    }
    if ( (*(_BYTE *)(a3 + 48) & 0x10) != 0 )
    {
      v50 = (WCHAR *)&v81[64 * (unsigned __int64)v8];
      Dns_GetResourceString(0x2F4Du, v50, 64i64);
      v51 = (unsigned int)v7;
      ++v8;
      LODWORD(v7) = v7 + 1;
      v63 = v7;
      v69[v51] = (char *)v50;
      v52 = (unsigned int)v6;
      LODWORD(v6) = v6 + 1;
      v64 = v6;
      v68[v52] = (char *)v50;
      if ( (unsigned int)v7 <= 0x1C )
      {
        SearchAndInsertCriteriaValues(6, a2, a3, (__int64)v70, &v64, (__int64)v68, &v63, (__int64)v69);
        LODWORD(v6) = v64;
        LODWORD(v7) = v63;
      }
    }
    if ( (*(_BYTE *)(a3 + 48) & 0x20) != 0 )
    {
      v53 = (WCHAR *)&v81[64 * (unsigned __int64)v8];
      Dns_GetResourceString(0x2F49u, v53, 64i64);
      v69[(unsigned int)v7] = (char *)v53;
      v68[(unsigned int)v6] = (char *)v53;
      LODWORD(v6) = v6 + 1;
      LODWORD(v7) = v7 + 1;
      ++v8;
      v64 = v6;
      v63 = v7;
      if ( (unsigned int)v7 <= 0x1C )
      {
        SearchAndInsertCriteriaValues(1, a2, a3, (__int64)v70, &v64, (__int64)v68, &v63, (__int64)v69);
        LODWORD(v6) = v64;
        LODWORD(v7) = v63;
      }
    }
    if ( (*(_BYTE *)(a3 + 48) & 0x40) != 0 )
    {
      v54 = (WCHAR *)&v81[64 * (unsigned __int64)v8];
      Dns_GetResourceString(0x2F4Au, v54, 64i64);
      v55 = (unsigned int)v7;
      LODWORD(v7) = v7 + 1;
      v63 = v7;
      v69[v55] = (char *)v54;
      v56 = (unsigned int)v6;
      LODWORD(v6) = v6 + 1;
      v64 = v6;
      v68[v56] = (char *)v54;
      if ( (unsigned int)v7 <= 0x1C )
      {
        SearchAndInsertCriteriaValues(2, a2, a3, (__int64)v70, &v64, (__int64)v68, &v63, (__int64)v69);
        LODWORD(v6) = v64;
        LODWORD(v7) = v63;
      }
    }
  }
  if ( (_DWORD)v6 && (_DWORD)v7 )
  {
    v69[(unsigned int)(v7 - 1)] = 0i64;
    v68[(unsigned int)(v6 - 1)] = 0i64;
    ConcatenatedString_W = Dns_CreateConcatenatedString_W(v68, v6, v9);
    v58 = Dns_CreateConcatenatedString_W(v69, v7, v57);
    v67 = v58;
    if ( ConcatenatedString_W && v58 )
    {
      if ( *(_DWORD *)(a3 + 8) )
      {
        if ( (dword_1401B9104 & 0x1000) != 0 )
        {
          if ( a1 && *(_DWORD *)(a1 + 372) )
            v62 = *(const unsigned __int16 **)(a1 + 24);
          else
            v62 = L"..Cache";
          Template_zszzz(
            (__int64)v62,
            (__int64)ConcatenatedString_W,
            *(const unsigned __int16 **)a3,
            Str,
            v62,
            ConcatenatedString_W,
            v58);
        }
      }
      else if ( *(_DWORD *)(a3 + 12) == 3 )
      {
        if ( (dword_1401B9104 & 0x1000) != 0 )
          Template_zszz(
            v59,
            &DNS_EVENT_UPDATE_FORWARDING_POLICY,
            *(const unsigned __int16 **)a3,
            Str,
            ConcatenatedString_W,
            v58);
      }
      else if ( *(_DWORD *)(a3 + 12) == 4 )
      {
        if ( (dword_1401B9104 & 0x2000) != 0 )
          Template_zszz(
            v59,
            &DNS_EVENT_UPDATE_RRL_EXCEPTIONLIST,
            *(const unsigned __int16 **)a3,
            Str,
            ConcatenatedString_W,
            v58);
      }
      else if ( (dword_1401B9104 & 0x1000) != 0 )
      {
        Template_zszz(
          v59,
          &DNS_EVENT_UPDATE_SERVER_LEVEL_POLICY,
          *(const unsigned __int16 **)a3,
          Str,
          ConcatenatedString_W,
          v58);
      }
      goto LABEL_117;
    }
    v60 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
    {
      goto LABEL_117;
    }
    v61 = 44;
LABEL_116:
    WPP_SF_(*((_QWORD *)v60 + 7), v61, (__int64)&WPP_7aabcfb4077e3de7a2cc491a12601782_Traceguids);
  }
LABEL_117:
  Mem_Free(ConcatenatedString_W, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\log.c", 4440);
  Mem_Free(v67, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\log.c", 4441);
}
// 14005BC49: variable 'v9' is possibly undefined
// 14005BC59: variable 'v57' is possibly undefined
// 14005BCAC: variable 'v59' is possibly undefined
// 1401867B8: using guessed type EVENT_DESCRIPTOR DNS_EVENT_UPDATE_FORWARDING_POLICY_SCOPE;
// 140186978: using guessed type EVENT_DESCRIPTOR DNS_EVENT_UPDATE_RRL_EXCEPTIONLIST;
// 140186EC0: using guessed type EVENT_DESCRIPTOR DNS_EVENT_UPDATE_SERVER_LEVEL_POLICY;
// 140186FE0: using guessed type EVENT_DESCRIPTOR DNS_EVENT_UPDATE_ZONE_LEVEL_POLICY_DELETE_SCOPE;
// 140187B38: using guessed type EVENT_DESCRIPTOR DNS_EVENT_UPDATE_FORWARDING_POLICY;
// 14018E014: using guessed type wchar_t asc_14018E014[3];
// 1401B9104: using guessed type int dword_1401B9104;
// 14005B1B0: using guessed type WCHAR var_3C0[448];
##############################
Role: Let's assume that you are an advanced reverse engineer and you are reverse engineering a network driver using IDA Pro, and you are also familiar with the RFC documentation. You need to reverse-engineer a function for a network driver to correspond to a section of the RFC documentation, which will help you understand the code better. The driver you're reversing is Schannel.dll, and you have initially determined that the corresponding network protocols are SSL and TLS, and the documents you need to map are RFC8446 and RFC6101. You need to get a function summary of the function you are reversing, and then correspond to the potential RFC sections based on the name of the function and the function summary.
Function Background: The function is reverse engineered from the driver file Schannel.dll on Windows platform. Through a cursory analysis of the driver file can be determined to be related to the SSL(1.3), TLS(3.0) protocol, that is, with RFC8446, RFC6101 strong correlation.

Output Function Summary: Summarizes the function's functionality with several phrases instead of sentences, focuses on covering the function's control flow information, and highlights the protocol function points implemented by the function. Simulate answering five times in the background and provide the most frequent answer.

Retrieve document sections: giving matches for document sections(FunctionMatchRFCResult) that the code may related to. NOTE if the code is only business related(i.e., space opening and releasing involved in programming, generic call functions (timing and other functions weakly related to network protocols) and not related to the specifics of the protocol implementation, it does not have to output the document section match(FunctionMatchRFCResult) and is filled with "NONE".

Retrieve document sections Thinking Chain: The function code is matched with the RFC document section, and the thinking chain is provided to help you solve the problem better:
	1. Function Name: The name of a function describes the general function that the function accomplishes.
	2. Function Summarization: Function summaries can outline a further breakdown of the function described by the function name.
	3. Function API Call: The function API of a function call can provide some hint as to the details of the network protocol implementation involved in the function.
	4. Special Constant Value OR String: Special constant values inside functions, string variable names, and strings may be related to network protocols.
	5. Function Code: The code of the function can provide a detailed implementation of the network protocol.
Generate Function Information Collection with JSON Format:

{
	"FunctionIndex": "(FILL WITH "File count" with less than four bits are indexed with zeros to make up the four bits.)",
	"FunctionName": "(Full Function Code Name)",
	"FunctionSummarization": [
		"(Function Summary Phrase1)",
		"(Function Summary Phrase2)",
		"(...)"
	],
	"FunctionMatchRFCResult": [
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 1)",
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 2)",
		"(...)"
	],
}

ATTENTION: Remember YOU MUST ONLY output the Function Information Collection result.
