Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 2000
// Total lines: 381

//----- (00000001400F5E8C) ----------------------------------------------------
__int64 __fastcall DnsOls_ResetZoneKeymasterFlagForZone(
        __int64 a1,
        __int64 a2,
        int a3,
        int a4,
        LDAP **a5,
        int *a6,
        const wchar_t ***a7,
        ULONG *a8,
        _DWORD *a9)
{
  PWCHAR *v9; // rdx
  LDAP *v10; // r12
  LDAPMessage *v11; // rsi
  unsigned int v12; // edi
  ULONG v13; // r15d
  int v14; // r13d
  __int64 v16; // rax
  LDAP **v17; // r14
  int v18; // eax
  CDnsClientSubnetRecordsTrie *v19; // rcx
  const char *v20; // r9
  __int64 v21; // rdx
  int v22; // r15d
  int *v23; // rax
  int v24; // ecx
  _DWORD *v25; // r14
  const wchar_t **v26; // rsi
  int v27; // eax
  PWCHAR *valuesW; // rax
  ULONG v29; // r14d
  CDnsClientSubnetRecordsTrie *v30; // rcx
  const char *v31; // r8
  const char *v32; // rax
  HANDLE v33; // rcx
  int v34; // esi
  int v35; // eax
  const char *v36; // r9
  __int64 v37; // rcx
  int v38; // eax
  __int64 v39; // rcx
  int v41; // [rsp+40h] [rbp-40h] BYREF
  LDAPMessage *entry; // [rsp+48h] [rbp-38h] BYREF
  PWCHAR *v43; // [rsp+50h] [rbp-30h]
  LDAP *v44; // [rsp+58h] [rbp-28h] BYREF
  unsigned __int16 *v45; // [rsp+60h] [rbp-20h] BYREF
  __int64 v46; // [rsp+68h] [rbp-18h]
  __int128 v47; // [rsp+70h] [rbp-10h] BYREF
  int v48; // [rsp+C8h] [rbp+48h] BYREF
  int v49; // [rsp+D0h] [rbp+50h]
  int v50; // [rsp+D8h] [rbp+58h]

  v50 = a4;
  v49 = a3;
  v9 = 0i64;
  v41 = 1;
  v48 = 0;
  v10 = 0i64;
  v43 = 0i64;
  v11 = 0i64;
  v44 = 0i64;
  v12 = 0;
  entry = 0i64;
  v13 = 0;
  v14 = 0;
  if ( !dword_1401B9740
    || *(_DWORD *)(a1 + 372) != 1
    || (*(_BYTE *)(a1 + 388) & 1) == 0
    || (v16 = *(_QWORD *)(a1 + 840)) == 0 )
  {
    v19 = WPP_GLOBAL_Control;
    v17 = a5;
    goto LABEL_31;
  }
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
  {
    WPP_SF_sS(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x3Bu,
      (__int64)&WPP_b7aea06a65693a31b0dd129af848d3b8_Traceguids,
      *(const char **)(a1 + 16),
      v16);
    a4 = v50;
  }
  v17 = a5;
  if ( a5 && (v10 = *a5) != 0i64 )
  {
    v44 = *a5;
  }
  else
  {
    v18 = Ds_BindToFsmo((__int64 *)&v44, &v41, a4);
    v12 = v18;
    if ( v18 )
    {
      v19 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        WPP_SF_D(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x3Cu,
          (__int64)&WPP_b7aea06a65693a31b0dd129af848d3b8_Traceguids,
          v18);
        v19 = WPP_GLOBAL_Control;
      }
      v10 = v44;
      v12 = 9906;
      goto LABEL_30;
    }
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      v20 = "domain naming master";
      if ( v41 )
        v20 = "local DC";
      WPP_SF_s(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x3Du,
        (__int64)&WPP_b7aea06a65693a31b0dd129af848d3b8_Traceguids,
        v20);
    }
    v10 = v44;
  }
  if ( !(unsigned int)Zone_LockForWriteEx(a1, 1, 0x2710u, (__int64)"ds\\dns\\server\\server\\olsds.cpp", 248) )
  {
    v25 = a9;
    if ( a9 && *a9 )
    {
      v26 = *a7;
      v43 = (PWCHAR *)*a7;
      v13 = *a8;
LABEL_58:
      v29 = 0;
      if ( v13 )
      {
        while ( _wcsicmp(*(const wchar_t **)(a1 + 840), *v26) )
        {
          ++v29;
          ++v26;
          if ( v29 >= v13 )
            goto LABEL_63;
        }
        v14 = 1;
      }
LABEL_63:
      v30 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        v31 = "not the";
        if ( (*(_BYTE *)(a1 + 1040) & 2) != 0 )
          v31 = "the";
        v32 = "not found";
        if ( v14 )
          v32 = "found";
        WPP_SF_sss(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x40u,
          (__int64)&WPP_b7aea06a65693a31b0dd129af848d3b8_Traceguids,
          *(const char **)(a1 + 16),
          (__int64)v32,
          (__int64)v31);
        v30 = WPP_GLOBAL_Control;
      }
      if ( ((*(_DWORD *)(a1 + 1040) >> 1) & 1) == v14 )
      {
        v34 = v48;
      }
      else
      {
        if ( v30 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)v30 + 17) & 0x200000) != 0
          && *((_BYTE *)v30 + 65) >= 4u )
        {
          WPP_SF_(*((_QWORD *)v30 + 7), 0x41u, (__int64)&WPP_b7aea06a65693a31b0dd129af848d3b8_Traceguids);
        }
        *(_QWORD *)(a1 + 1128) = 0i64;
        v33 = g_hOlsKeyRolloverEvent;
        *(_QWORD *)(a1 + 1116) = 0i64;
        SetEvent(v33);
        v34 = 1;
      }
      v35 = *(_DWORD *)(a1 + 1040) ^ (*(_DWORD *)(a1 + 1040) ^ (2 * v14)) & 2;
      *(_DWORD *)(a1 + 1040) = v35;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        v36 = "FALSE";
        if ( (v35 & 2) != 0 )
          v36 = "TRUE";
        WPP_SF_ss(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x42u,
          (__int64)&WPP_b7aea06a65693a31b0dd129af848d3b8_Traceguids,
          v36,
          *(_QWORD *)(a1 + 16));
      }
      if ( v34 )
      {
        if ( (*(_BYTE *)(a1 + 1040) & 2) != 0 )
        {
          v37 = *(_QWORD *)(a1 + 1080);
          if ( v37 )
          {
            if ( (*(_DWORD *)(a1 + 396) & 0x2000) == 0 )
            {
              v45 = *(unsigned __int16 **)(a1 + 24);
              v46 = v37;
              LOWORD(v48) = 769;
              v47 = DNS_EVENT_DNSSEC_KEYMASTER_ROLE_TRANSFERRED;
              Eventlog_LogEvent((__int64)&v47, v21, 2u, &v45, (unsigned __int8 *)&v48, 0, 0, 0i64);
            }
          }
        }
      }
      v38 = v49;
      v22 = v50;
      if ( v49 )
      {
        v12 = DnsOls_DiscoverZoneKeymasterFqdn(a1, v21, v50, v10);
        if ( v12 )
        {
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
          {
            WPP_SF_Ds(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x43u,
              (__int64)&WPP_b7aea06a65693a31b0dd129af848d3b8_Traceguids,
              v12,
              *(_QWORD *)(a1 + 16));
          }
          v12 = 0;
        }
        v38 = v49;
      }
      if ( v34 && (*(_BYTE *)(a1 + 1040) & 2) == 0 )
      {
        if ( !v38 )
        {
          v12 = DnsOls_DiscoverZoneKeymasterFqdn(a1, v21, v22, v10);
          if ( v12 )
          {
            if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
              && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
            {
              WPP_SF_Ds(
                *((_QWORD *)WPP_GLOBAL_Control + 7),
                0x44u,
                (__int64)&WPP_b7aea06a65693a31b0dd129af848d3b8_Traceguids,
                v12,
                *(_QWORD *)(a1 + 16));
            }
            v12 = 0;
          }
        }
        v39 = *(_QWORD *)(a1 + 1080);
        if ( v39 )
        {
          v45 = *(unsigned __int16 **)(a1 + 24);
          v46 = v39;
          LOWORD(v48) = 769;
          v47 = DNS_EVENT_DNSSEC_KEYMASTER_CHANGE_DETECTED;
          Eventlog_LogEvent((__int64)&v47, v21, 2u, &v45, (unsigned __int8 *)&v48, 0, 0, 0i64);
        }
      }
      v11 = entry;
      goto LABEL_50;
    }
    v27 = Ds_LoadOrCreateSettingsObject(v10, &entry, 0);
    v12 = v27;
    if ( v27 )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        WPP_SF_D(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x3Fu,
          (__int64)&WPP_b7aea06a65693a31b0dd129af848d3b8_Traceguids,
          v27);
      }
      v11 = entry;
    }
    else
    {
      v11 = entry;
      if ( entry )
      {
        valuesW = ldap_get_valuesW(v10, entry, (const PWSTR)L"msDNS-KeymasterZones");
        v43 = valuesW;
        v26 = (const wchar_t **)valuesW;
        if ( valuesW )
          v13 = ldap_count_valuesW(valuesW);
        Dbg_KeymasterValuesForLocalServer();
        if ( v25 )
        {
          *a7 = v26;
          *a8 = v13;
          *v25 = 1;
        }
        goto LABEL_58;
      }
      if ( v25 )
        *v25 = 1;
    }
    v22 = v50;
LABEL_50:
    Zone_UnlockAfterWriteEx(a1, 1, (__int64)"ds\\dns\\server\\server\\olsds.cpp", 211);
    v19 = WPP_GLOBAL_Control;
    v9 = v43;
    v17 = a5;
    goto LABEL_32;
  }
  v19 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_s(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x3Eu,
      (__int64)&WPP_b7aea06a65693a31b0dd129af848d3b8_Traceguids,
      *(const char **)(a1 + 16));
    v19 = WPP_GLOBAL_Control;
  }
LABEL_30:
  v9 = 0i64;
LABEL_31:
  v22 = v50;
LABEL_32:
  if ( !a9 && v9 )
  {
    ldap_value_freeW(v9);
    v19 = WPP_GLOBAL_Control;
  }
  if ( v11 )
  {
    ldap_msgfree(v11);
    v19 = WPP_GLOBAL_Control;
  }
  if ( v17 )
  {
    if ( !*v17 )
    {
      v23 = a6;
      v24 = v41;
      *v17 = v10;
      *v23 = v24;
LABEL_113:
      v19 = WPP_GLOBAL_Control;
    }
  }
  else if ( !v41 && !v22 )
  {
    Ds_LdapUnbind(&v44);
    goto LABEL_113;
  }
  if ( v19 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)v19 + 17) & 0x200000) != 0
    && *((_BYTE *)v19 + 65) >= 4u )
  {
    WPP_SF_D(*((_QWORD *)v19 + 7), 0x45u, (__int64)&WPP_b7aea06a65693a31b0dd129af848d3b8_Traceguids, v12);
  }
  return v12;
}
// 1400F63E5: variable 'v21' is possibly undefined
// 1401861C8: using guessed type __int128 DNS_EVENT_DNSSEC_KEYMASTER_CHANGE_DETECTED;
// 1401868B8: using guessed type __int128 DNS_EVENT_DNSSEC_KEYMASTER_ROLE_TRANSFERRED;
// 1401B9740: using guessed type int dword_1401B9740;
##############################
Role: Let's assume that you are an advanced reverse engineer and you are reverse engineering a network driver using IDA Pro, and you are also familiar with the RFC documentation. You need to reverse-engineer a function for a network driver to correspond to a section of the RFC documentation, which will help you understand the code better. The driver you're reversing is Schannel.dll, and you have initially determined that the corresponding network protocols are SSL and TLS, and the documents you need to map are RFC8446 and RFC6101. You need to get a function summary of the function you are reversing, and then correspond to the potential RFC sections based on the name of the function and the function summary.
Function Background: The function is reverse engineered from the driver file Schannel.dll on Windows platform. Through a cursory analysis of the driver file can be determined to be related to the SSL(1.3), TLS(3.0) protocol, that is, with RFC8446, RFC6101 strong correlation.

Output Function Summary: Summarizes the function's functionality with several phrases instead of sentences, focuses on covering the function's control flow information, and highlights the protocol function points implemented by the function. Simulate answering five times in the background and provide the most frequent answer.

Retrieve document sections: giving matches for document sections(FunctionMatchRFCResult) that the code may related to. NOTE if the code is only business related(i.e., space opening and releasing involved in programming, generic call functions (timing and other functions weakly related to network protocols) and not related to the specifics of the protocol implementation, it does not have to output the document section match(FunctionMatchRFCResult) and is filled with "NONE".

Retrieve document sections Thinking Chain: The function code is matched with the RFC document section, and the thinking chain is provided to help you solve the problem better:
	1. Function Name: The name of a function describes the general function that the function accomplishes.
	2. Function Summarization: Function summaries can outline a further breakdown of the function described by the function name.
	3. Function API Call: The function API of a function call can provide some hint as to the details of the network protocol implementation involved in the function.
	4. Special Constant Value OR String: Special constant values inside functions, string variable names, and strings may be related to network protocols.
	5. Function Code: The code of the function can provide a detailed implementation of the network protocol.
Generate Function Information Collection with JSON Format:

{
	"FunctionIndex": "(FILL WITH "File count" with less than four bits are indexed with zeros to make up the four bits.)",
	"FunctionName": "(Full Function Code Name)",
	"FunctionSummarization": [
		"(Function Summary Phrase1)",
		"(Function Summary Phrase2)",
		"(...)"
	],
	"FunctionMatchRFCResult": [
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 1)",
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 2)",
		"(...)"
	],
}

ATTENTION: Remember YOU MUST ONLY output the Function Information Collection result.
