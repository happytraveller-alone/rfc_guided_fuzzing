Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 636
// Total lines: 215

//----- (0000000140058644) ----------------------------------------------------
void __fastcall LogResourceRecordEvent(__int64 a1, unsigned __int16 *a2, const char *a3, __int64 a4)
{
  const unsigned __int16 *v7; // r11
  int v8; // r10d
  __int64 v9; // rax
  __int64 v10; // rax
  const unsigned __int16 *v11; // r9
  const unsigned __int16 *v12; // rdx
  unsigned __int8 v13; // cl
  UINT v14; // ecx
  char v15; // al
  UINT v16; // ecx
  unsigned __int8 v17; // cl
  UINT v18; // ecx
  __int64 v19; // rcx
  __int64 v20; // rax
  __int64 v21; // rax
  const unsigned __int16 *v22; // r9
  const unsigned __int16 *v23; // rdx
  const unsigned __int16 *v24; // rdx
  UINT v25; // ecx
  WCHAR Buffer[64]; // [rsp+50h] [rbp-B0h] BYREF
  WCHAR v27[64]; // [rsp+D0h] [rbp-30h] BYREF

  if ( a4 && *(_DWORD *)(a4 + 372) )
    v7 = *(const unsigned __int16 **)(a4 + 24);
  else
    v7 = L"..Cache";
  if ( !(_DWORD)a1 )
  {
    if ( a4 && *(_DWORD *)(a4 + 372) )
    {
      if ( (Microsoft_Windows_DNSServerEnableBits & 0x20000000) != 0 )
      {
        v19 = *(_QWORD *)(a4 + 328);
        v20 = a4;
        if ( v19 )
          v20 = *(_QWORD *)(a4 + 328);
        if ( *(_QWORD *)(v20 + 200) )
        {
          v21 = a4;
          if ( v19 )
            v21 = *(_QWORD *)(a4 + 328);
          v22 = **(const unsigned __int16 ***)(v21 + 200);
        }
        else
        {
          v22 = L".";
        }
        v23 = L"Default";
        if ( *(_QWORD *)(a4 + 192) )
          v23 = *(const unsigned __int16 **)(a4 + 192);
        Template_qsqqbzzz(*a2, &DNS_EVENT_RECORD_DELETE, a2[1], a3, 0, *a2, (__int64)(a2 + 12), v7, v23, v22);
      }
    }
    else if ( (dword_1401B9104 & 0x20) != 0 )
    {
      if ( !a4 || (v24 = *(const unsigned __int16 **)(a4 + 192)) == 0i64 )
        v24 = L"Default";
      Template_qsz(a1, (__int64)v24, a2[1], a3, v24);
    }
    if ( a4 != g_pTrustAnchorsZone )
      return;
    memset_0(Buffer, 0, sizeof(Buffer));
    if ( a2[1] == 48 )
    {
      v25 = 12042;
    }
    else
    {
      if ( a2[1] != 43 )
        goto LABEL_98;
      v25 = 12041;
    }
    Dns_GetResourceString(v25, Buffer, 64i64);
LABEL_98:
    if ( (dword_1401B9104 & 0x400) != 0 )
      Template_sz(Microsoft_Windows_DNSServerHandle, &DNS_EVENT_REMOVE_TRUST_POINT, a3, Buffer);
    return;
  }
  if ( a4 && (*((_DWORD *)a2 + 1) & 0x8000000) != 0 )
    v8 = *(_DWORD *)(a4 + 532);
  else
    v8 = *((_DWORD *)a2 + 3);
  if ( (Microsoft_Windows_DNSServerEnableBits & 0x20000000) != 0 )
  {
    if ( (!a4 || !*(_QWORD *)(a4 + 328)) && !a4 )
      goto LABEL_20;
    v9 = *(_QWORD *)(a4 + 328);
    if ( !v9 )
      v9 = a4;
    if ( *(_QWORD *)(v9 + 200) )
    {
      v10 = *(_QWORD *)(a4 + 328);
      if ( !v10 )
        v10 = a4;
      v11 = **(const unsigned __int16 ***)(v10 + 200);
    }
    else
    {
LABEL_20:
      v11 = L".";
    }
    if ( !a4 || (v12 = *(const unsigned __int16 **)(a4 + 192)) == 0i64 )
      v12 = L"Default";
    Template_qsqqbzzz(*a2, &DNS_EVENT_RECORD_CREATE, a2[1], a3, v8, *a2, (__int64)(a2 + 12), v7, v12, v11);
  }
  if ( a4 == g_pTrustAnchorsZone )
  {
    memset_0(v27, 0, sizeof(v27));
    if ( a2[1] == 48 )
    {
      memset_0(Buffer, 0, sizeof(Buffer));
      if ( *((_BYTE *)a2 + 26) == 3 )
        Dns_GetResourceString(0x2F08u, Buffer, 64i64);
      v13 = *((_BYTE *)a2 + 27);
      switch ( v13 )
      {
        case 5u:
          v14 = 12034;
          break;
        case 8u:
          v14 = 12035;
          break;
        case 0xAu:
          v14 = 12036;
          break;
        case 5u:
          v14 = 12037;
          break;
        case 0xDu:
          v14 = 12038;
          break;
        case 0xEu:
          v14 = 12039;
          break;
        default:
          goto LABEL_42;
      }
      Dns_GetResourceString(v14, v27, 64i64);
LABEL_42:
      if ( (dword_1401B9104 & 0x400) != 0 )
        Template_szqbz((unsigned int)*a2 - 4, (__int64)v27, a3, Buffer, *a2 - 4, (__int64)(a2 + 14), v27);
      return;
    }
    if ( a2[1] != 43 )
      return;
    memset_0(Buffer, 0, sizeof(Buffer));
    v15 = *((_BYTE *)a2 + 27);
    switch ( v15 )
    {
      case 1:
        v16 = 12017;
        break;
      case 2:
        v16 = 12018;
        break;
      case 4:
        v16 = 12019;
        break;
      case 3:
        v16 = 12043;
        break;
      case 5:
        v16 = 12044;
        break;
      case 6:
        v16 = 12045;
        break;
      default:
        v16 = 12046;
        if ( v15 != 7 )
          v16 = 12016;
        break;
    }
    Dns_GetResourceString(v16, Buffer, 64i64);
    v17 = *((_BYTE *)a2 + 26);
    switch ( v17 )
    {
      case 5u:
        v18 = 12034;
        break;
      case 8u:
        v18 = 12035;
        break;
      case 0xAu:
        v18 = 12036;
        break;
      case 5u:
        v18 = 12037;
        break;
      case 0xDu:
        v18 = 12038;
        break;
      case 0xEu:
        v18 = 12039;
        break;
      default:
        goto LABEL_72;
    }
    Dns_GetResourceString(v18, v27, 64i64);
LABEL_72:
    if ( (dword_1401B9104 & 0x400) != 0 )
      Template_sqzqbz((unsigned int)*a2 - 4, (__int64)v27, a3, a2[12], Buffer, *a2 - 4, (__int64)(a2 + 14), v27);
  }
}
// 1400586DA: conditional instruction was optimized away because r9.8!=0
// 1400586F8: conditional instruction was optimized away because r9.8!=0
// 1401871E0: using guessed type EVENT_DESCRIPTOR DNS_EVENT_RECORD_CREATE;
// 140187280: using guessed type EVENT_DESCRIPTOR DNS_EVENT_RECORD_DELETE;
// 140188260: using guessed type wchar_t aDefault_1[8];
// 1401B8C48: using guessed type __int64 g_pTrustAnchorsZone;
// 1401B9100: using guessed type int Microsoft_Windows_DNSServerEnableBits;
// 1401B9104: using guessed type int dword_1401B9104;
