Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 2660
// Total lines: 312

//----- (000000014013C5D0) ----------------------------------------------------
__int64 __fastcall Create_CDNSPolicy(struct _zone_info *a1, __int64 a2, int a3)
{
  unsigned int v5; // r12d
  CDnsClientSubnetRecordsTrie *v6; // rcx
  unsigned __int16 v7; // dx
  __int64 v8; // rax
  CDnsPolicyOrder *v9; // rax
  __int64 v10; // r8
  __int64 v11; // rcx
  int v12; // eax
  unsigned int v13; // eax
  CDnsPolicy *v15; // rax
  CDnsPolicy *v16; // r13
  __int64 v17; // r8
  __int64 v18; // rax
  char *v19; // rax
  __int64 v20; // rcx
  __int64 v21; // rdi
  _QWORD *v22; // rax
  const WCHAR *v23; // rcx
  __int64 v24; // r13
  __int64 v25; // rcx
  _QWORD *v26; // rax
  void **PolicyName; // rax
  const void **v28; // rax
  char v29; // di
  __int64 v30; // rax
  const void **v31; // rax
  __int64 v32; // rcx
  __int64 v33; // rbx
  _QWORD *v34; // rax
  char *v35; // [rsp+48h] [rbp-71h] BYREF
  int v36; // [rsp+50h] [rbp-69h]
  CDnsPolicy *v37; // [rsp+58h] [rbp-61h] BYREF
  CDnsPolicyOrder *v38; // [rsp+60h] [rbp-59h]
  char v39[16]; // [rsp+68h] [rbp-51h] BYREF
  void *v40[2]; // [rsp+78h] [rbp-41h] BYREF
  __int64 v41; // [rsp+88h] [rbp-31h]
  unsigned __int64 v42; // [rsp+90h] [rbp-29h]
  CDnsPolicy *v43; // [rsp+A0h] [rbp-19h]
  void *v44[3]; // [rsp+A8h] [rbp-11h] BYREF
  unsigned __int64 v45; // [rsp+C0h] [rbp+7h]

  v36 = a3;
  v5 = Validate_PolicyData(a2, (__int64)a1);
  if ( v5 )
  {
    v6 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
    {
      return v5;
    }
    v7 = 10;
    goto LABEL_53;
  }
  v8 = *(int *)(a2 + 12);
  LODWORD(v35) = 0;
  if ( a1 )
    v9 = (CDnsPolicyOrder *)*((_QWORD *)a1 + v8 + 32);
  else
    v9 = (CDnsPolicyOrder *)((char *)&g_PolicyOrder + 72 * v8);
  v10 = *(unsigned int *)(a2 + 28);
  v11 = (__int64)(*((_QWORD *)v9 + 1) - *(_QWORD *)v9) >> 3;
  v38 = v9;
  v12 = 0;
  if ( v11 )
    v12 = v11;
  v13 = v12 + 1;
  if ( v13 < (unsigned int)v10 )
  {
    v5 = 9985;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      WPP_SF_Sddd(*((_QWORD *)WPP_GLOBAL_Control + 7), 0xCu, v10, *(const unsigned __int16 **)a2);
    }
    return v5;
  }
  if ( !(_DWORD)v10 )
    *(_DWORD *)(a2 + 28) = v13;
  if ( !Get_Policy(*(char **)a2, (__int64)a1, &v35) )
  {
    v15 = (CDnsPolicy *)operator new(0x98ui64, (const struct std::nothrow_t *)&std::nothrow);
    if ( v15 )
      v16 = CDnsPolicy::CDnsPolicy(v15, *(char **)a2, a1);
    else
      v16 = 0i64;
    v37 = v16;
    if ( !v16 )
    {
      v5 = 14;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        WPP_SF_SD(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0xEu,
          (__int64)&WPP_7bc0de5581043365e853c04d44d2eaeb_Traceguids,
          *(const unsigned __int16 **)a2);
      }
      return v5;
    }
    v5 = CDnsPolicy::AddPolicy(v16, (struct _DnssrvRpcPolicy *)a2);
    if ( v5 )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        WPP_SF_Sdd(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0xFu,
          (__int64)&WPP_7bc0de5581043365e853c04d44d2eaeb_Traceguids,
          *(const unsigned __int16 **)a2);
      }
LABEL_37:
      CDnsPolicy::DeletePolicy((const void **)v16, 1, v17);
      CDnsPolicy::`scalar deleting destructor'(v16);
      return v5;
    }
    v18 = *(int *)(a2 + 12);
    if ( a1 )
      v19 = (char *)*((_QWORD *)a1 + v18 + 27);
    else
      v19 = (char *)&g_PolicySvr + 32 * v18;
    v35 = v19;
    if ( !v19 )
    {
      v5 = 87;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        WPP_SF_SD(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x10u,
          (__int64)&WPP_7bc0de5581043365e853c04d44d2eaeb_Traceguids,
          *(const unsigned __int16 **)a2);
      }
      goto LABEL_37;
    }
    if ( !(unsigned int)CDnsPolicy::IsPolicyNegativeType(v16) )
    {
      v5 = (*(__int64 (__fastcall **)(struct CDnsPolicyManager *, CDnsPolicy *, struct _zone_info *))(*(_QWORD *)g_DnsPolicyManager + 8i64))(
             g_DnsPolicyManager,
             v16,
             a1);
      if ( v5 )
      {
        *((_DWORD *)v16 + 25) = 1;
        v21 = g_FailedPolicyList;
        v22 = std::_List_val<CDNSPolicyCriteria *>::_Buynode(
                v20,
                g_FailedPolicyList,
                *(_QWORD *)(g_FailedPolicyList + 8),
                &v37);
        if ( qword_1401B9598 == 0x1FFFFFFFFFFFFFFEi64 )
          std::_Xlength_error("list<T> too long");
        ++qword_1401B9598;
        *(_QWORD *)(v21 + 8) = v22;
        *(_QWORD *)v22[1] = v22;
        v6 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
          || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
        {
          return v5;
        }
        v7 = 17;
        goto LABEL_53;
      }
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_SD(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x12u,
          (__int64)&WPP_7bc0de5581043365e853c04d44d2eaeb_Traceguids,
          *(const unsigned __int16 **)a2);
      }
    }
    if ( v36 || (v5 = AddPolicyToRegistry((__int64)a1, a2, 0)) == 0 )
    {
      PolicyName = (void **)CDnsPolicy::GetPolicyName((const void **)v16, (__int64)v44);
      v42 = 7i64;
      v41 = 0i64;
      LOWORD(v40[0]) = 0;
      std::wstring::assign(v40, PolicyName);
      v43 = v16;
      v28 = (const void **)std::_Tree_val<std::_Tmap_traits<std::wstring,CDnsPolicy_CriteriaNode *,bool (*)(std::wstring const &,std::wstring const &),std::allocator<std::pair<std::wstring const,CDnsPolicy_CriteriaNode *>>,0>>::_Buynode<std::pair<std::wstring,CDnsPolicy_CriteriaNode *>>(
                             (__int64)v35,
                             (__int64)v40);
      std::_Tree<std::_Tmap_traits<std::wstring,CDnsPolicy *,CDnsCompareName,std::allocator<std::pair<std::wstring const,CDnsPolicy *>>,0>>::_Linsert(
        (__int64)v35,
        (__int64)v39,
        v28);
      if ( v42 >= 8 )
        operator delete(v40[0]);
      v42 = 7i64;
      v41 = 0i64;
      LOWORD(v40[0]) = 0;
      if ( v45 >= 8 )
        operator delete(v44[0]);
      v5 = CDnsPolicyOrder::AddPolicyProcessingOrder((const void ****)v38, v16);
      if ( v5 )
      {
        if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
          || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
        {
          v29 = 0;
        }
        else
        {
          v29 = 1;
          v30 = CDnsPolicy::GetPolicyName((const void **)v16, (__int64)v44);
          if ( *(_QWORD *)(v30 + 24) >= 8ui64 )
            v30 = *(_QWORD *)v30;
          WPP_SF_Sdd(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x14u,
            (__int64)&WPP_7bc0de5581043365e853c04d44d2eaeb_Traceguids,
            (const unsigned __int16 *)v30);
        }
        if ( (v29 & 1) != 0 && v45 >= 8 )
          operator delete(v44[0]);
        v31 = (const void **)CDnsPolicy::GetPolicyName((const void **)v16, (__int64)v44);
        std::_Tree<std::_Tmap_traits<std::wstring,CDnsPolicy *,CDnsCompareName,std::allocator<std::pair<std::wstring const,CDnsPolicy *>>,0>>::erase(
          (__int64)v35,
          v31);
        if ( v45 >= 8 )
          operator delete(v44[0]);
        *((_DWORD *)v16 + 25) = 1;
        v33 = g_FailedPolicyList;
        v34 = std::_List_val<CDNSPolicyCriteria *>::_Buynode(
                v32,
                g_FailedPolicyList,
                *(_QWORD *)(g_FailedPolicyList + 8),
                &v37);
        if ( qword_1401B9598 == 0x1FFFFFFFFFFFFFFEi64 )
          std::_Xlength_error("list<T> too long");
        ++qword_1401B9598;
        *(_QWORD *)(v33 + 8) = v34;
        *(_QWORD *)v34[1] = v34;
      }
      else
      {
        DnsTelemetryPolicyInfo(a2, 1);
      }
      return v5;
    }
    if ( a1 )
      v23 = (const WCHAR *)*((_QWORD *)a1 + 3);
    else
      v23 = 0i64;
    RemovePolicyFromPersistence(v23, *(const WCHAR **)a2, *(_DWORD *)(a2 + 8));
    *((_DWORD *)v16 + 25) = 1;
    v24 = g_FailedPolicyList;
    v26 = std::_List_val<CDNSPolicyCriteria *>::_Buynode(
            v25,
            g_FailedPolicyList,
            *(_QWORD *)(g_FailedPolicyList + 8),
            &v37);
    if ( qword_1401B9598 == 0x1FFFFFFFFFFFFFFEi64 )
      std::_Xlength_error("list<T> too long");
    ++qword_1401B9598;
    *(_QWORD *)(v24 + 8) = v26;
    *(_QWORD *)v26[1] = v26;
    v6 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
    {
      return v5;
    }
    v7 = 19;
LABEL_53:
    WPP_SF_Sdd(
      *((_QWORD *)v6 + 7),
      v7,
      (__int64)&WPP_7bc0de5581043365e853c04d44d2eaeb_Traceguids,
      *(const unsigned __int16 **)a2);
    return v5;
  }
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
  {
    WPP_SF_Sdd(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0xDu,
      (__int64)&WPP_7bc0de5581043365e853c04d44d2eaeb_Traceguids,
      *(const unsigned __int16 **)a2);
  }
  return 9971i64;
}
// 14013C862: variable 'v17' is possibly undefined
// 14013C942: variable 'v20' is possibly undefined
// 14013CA6E: variable 'v25' is possibly undefined
// 14013CC28: variable 'v32' is possibly undefined
// 140184CA8: using guessed type void __stdcall operator delete(void *);
// 140185140: using guessed type __int64 (__fastcall *_guard_dispatch_icall_fptr)(_QWORD, _QWORD);
// 1401B91C0: using guessed type struct CDnsPolicyManager *g_DnsPolicyManager;
// 1401B9590: using guessed type __int64 g_FailedPolicyList;
// 1401B9598: using guessed type __int64 qword_1401B9598;
// 14013C5D0: using guessed type char var_A8[16];
