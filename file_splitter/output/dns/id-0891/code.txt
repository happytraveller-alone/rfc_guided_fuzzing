Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 891
// Total lines: 135

//----- (0000000140079C78) ----------------------------------------------------
_QWORD *__fastcall Remote_FindOrCreate(__int64 a1, int a2)
{
  unsigned int v2; // ebp
  _QWORD *v3; // rbx
  BOOL v6; // r15d
  int v7; // r12d
  unsigned __int64 v8; // rax
  char *v9; // r14
  char *v10; // r14
  _QWORD *v11; // rdi
  _QWORD *v12; // rax
  __int64 v13; // rcx
  _BOOL8 v14; // r14
  void *v15; // r15
  int v16; // eax
  unsigned int v17; // ecx
  _OWORD *v18; // rax
  const char *v19; // rax
  unsigned int v21; // [rsp+70h] [rbp+8h] BYREF
  void *Buf2; // [rsp+80h] [rbp+18h]

  v2 = 0;
  Buf2 = 0i64;
  v3 = 0i64;
  v6 = *(_WORD *)a1 == 23;
  v7 = 0;
  if ( *(_WORD *)a1 == 23 )
  {
    Buf2 = (void *)(a1 + 8);
    v8 = *(unsigned __int8 *)(a1 + 23);
    v9 = (char *)&RemoteHashv6;
  }
  else
  {
    if ( *(_WORD *)a1 == 2 )
      v2 = *(_DWORD *)(a1 + 4);
    else
      v2 = -1;
    v8 = (unsigned __int64)v2 >> 24;
    v9 = (char *)&RemoteHashv4;
  }
  v10 = &v9[8 * v8];
  v11 = *(_QWORD **)v10;
  if ( *(_QWORD *)v10 )
    goto LABEL_11;
  if ( a2 )
  {
    v21 = -1;
    acquireWrite(hRemoteLock, 0xFFFFFFFF, &v21);
    v12 = Mem_AllocZero(0x78ui64, 23i64, "ds\\dns\\server\\server\\remote.c", 290);
    v13 = hRemoteLock;
    *(_QWORD *)v10 = v12;
    Lock_ReleaseWrite(v13);
  }
  v11 = *(_QWORD **)v10;
  if ( *(_QWORD *)v10 )
  {
LABEL_11:
    v3 = v11;
    if ( v11 )
    {
      v14 = v6;
      v15 = Buf2;
      do
      {
        v11 = v3;
        if ( v14 )
        {
          v16 = memcmp_0(v3 + 3, v15, 0x10ui64);
        }
        else
        {
          if ( *((_WORD *)v3 + 8) == 2 )
            v17 = *((_DWORD *)v3 + 5);
          else
            v17 = -1;
          v16 = -(v17 < v2);
          if ( v17 > v2 )
            v16 = 1;
        }
        if ( v16 <= 0 )
        {
          if ( v16 >= 0 )
            goto LABEL_34;
          v3 = (_QWORD *)*v3;
          v7 = -1;
        }
        else
        {
          v3 = (_QWORD *)v3[1];
          v7 = 1;
        }
      }
      while ( v3 );
    }
    if ( a2 )
    {
      v18 = Mem_AllocZero(0x78ui64, 23i64, "ds\\dns\\server\\server\\remote.c", 349);
      v3 = v18;
      if ( v18 )
      {
        v18[1] = *(_OWORD *)a1;
        v18[2] = *(_OWORD *)(a1 + 16);
        v18[3] = *(_OWORD *)(a1 + 32);
        v18[4] = *(_OWORD *)(a1 + 48);
        initializeEDNSState((__int64)v18);
        if ( dword_1401B991C )
        {
          *((_DWORD *)v3 + 24) = 3;
          *((_BYTE *)v3 + 108) = 0;
        }
        v21 = -1;
        acquireWrite(hRemoteLock, 0xFFFFFFFF, &v21);
        if ( v7 == 1 )
          v11[1] = v3;
        else
          *v11 = v3;
        Lock_ReleaseWrite(hRemoteLock);
      }
    }
  }
LABEL_34:
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x8000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    v19 = DnsAddr_Ntoa((struct in_addr *)a1);
    WPP_SF_sq(*((_QWORD *)WPP_GLOBAL_Control + 7), 0xBu, (__int64)&WPP_eab7c483710f366eae903c691df4ee49_Traceguids, v19);
  }
  return v3;
}
// 140079DBC: conditional instruction was optimized away because eax.4==0
// 1401B9028: using guessed type __int64 hRemoteLock;
// 1401B991C: using guessed type int dword_1401B991C;
