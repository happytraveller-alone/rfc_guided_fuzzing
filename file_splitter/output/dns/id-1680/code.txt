Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 1680
// Total lines: 357

//----- (00000001400D6CB0) ----------------------------------------------------
__int64 __fastcall Rpc_CreateZone(__int64 a1, __int64 a2, __int64 a3, const wchar_t **a4, int a5, __int64 a6)
{
  __int64 v6; // rsi
  __int64 v7; // rbx
  __int64 v8; // rdi
  _BYTE *v10; // rcx
  unsigned int v11; // r13d
  BOOL v12; // r12d
  unsigned int PartitionForZone; // ebx
  __int64 v14; // rax
  CDnsClientSubnetRecordsTrie *v15; // rcx
  const wchar_t *v16; // rax
  int v17; // ecx
  int v18; // eax
  const char *v19; // r9
  unsigned __int16 v20; // dx
  const wchar_t *v21; // rax
  _BYTE *v22; // rax
  int v23; // r14d
  int v24; // r14d
  const wchar_t *v25; // rax
  __int64 *v26; // r14
  unsigned int v27; // eax
  int v28; // ecx
  BOOL v29; // r14d
  __int64 v31; // [rsp+78h] [rbp+7h] BYREF
  __int64 v32[3]; // [rsp+80h] [rbp+Fh] BYREF

  v6 = a6;
  v7 = 0i64;
  v8 = 0i64;
  v32[0] = 0i64;
  if ( !a6 )
    goto LABEL_37;
  v10 = *(_BYTE **)(a6 + 8);
  if ( !v10 )
    goto LABEL_37;
  v11 = *(_DWORD *)(a6 + 16);
  v12 = *(_DWORD *)(a6 + 40) != 0;
  if ( a4 )
  {
    if ( v11 != 1 || *(_DWORD *)(a6 + 40) )
      goto LABEL_6;
  }
  else if ( v11 - 1 > 3 )
  {
LABEL_6:
    PartitionForZone = 9611;
LABEL_38:
    v15 = WPP_GLOBAL_Control;
    goto LABEL_39;
  }
  v14 = Lookup_ZoneTreeNodeFromDottedNameEx(v10, 0, 0x2000000, (__int64)a4);
  if ( v14 )
  {
    v8 = *(_QWORD *)(v14 + 56);
    v31 = v8;
    if ( v8 )
    {
      v15 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        if ( a4 )
          v16 = *a4;
        else
          v16 = L".";
        WPP_SF_sS(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x75u,
          (__int64)&WPP_5efa35e0870730ffd13051b9da022308_Traceguids,
          *(const char **)(v6 + 8),
          (__int64)v16);
        v15 = WPP_GLOBAL_Control;
      }
      PartitionForZone = 9609;
      if ( *(_DWORD *)(v8 + 372) == 4 )
        PartitionForZone = 9619;
      goto LABEL_39;
    }
  }
  else
  {
    v31 = 0i64;
  }
  if ( v12 && (dword_1401B9750 || g_fDsReadOnlyDcMode) )
  {
    PartitionForZone = 9569;
    goto LABEL_38;
  }
  v17 = *(_DWORD *)(v6 + 88);
  if ( (v17 || *(_QWORD *)(v6 + 96)) && g_liDpInitialized <= 0 )
  {
    PartitionForZone = 50;
    goto LABEL_38;
  }
  if ( (v17 & 0xFFFFFFF1) != 0 )
    goto LABEL_37;
  v18 = (v17 & 2) != 0;
  if ( (v17 & 4) != 0 )
    ++v18;
  if ( (v17 & 8) != 0 )
    ++v18;
  if ( v12 )
  {
    if ( v18 <= 1 )
    {
      if ( v18 || *(_QWORD *)(v6 + 96) )
      {
        PartitionForZone = Dp_FindPartitionForZone(v17, *(char **)(v6 + 96), 1, v32);
        if ( PartitionForZone )
          goto LABEL_38;
        v7 = v32[0];
      }
      goto LABEL_49;
    }
LABEL_37:
    PartitionForZone = 87;
    goto LABEL_38;
  }
  if ( v18 || *(_QWORD *)(v6 + 96) )
    goto LABEL_37;
LABEL_49:
  if ( v12 && (unsigned int)g_ulDsDomainVersion < 2 && v11 - 3 <= 1 && (!v7 || (*(_BYTE *)(v7 + 100) & 2) != 0) )
  {
    PartitionForZone = 50;
    v15 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
    {
LABEL_128:
      if ( v8 && (unsigned int)(*(_DWORD *)(v8 + 372) - 2) <= 1 )
        Xfr_ForceZoneExpiration(v8, 0);
      return PartitionForZone;
    }
    if ( (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) == 0 || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
      goto LABEL_39;
    v20 = 118;
    goto LABEL_58;
  }
  PartitionForZone = validateRPCZoneName(v6, v7, v12);
  if ( PartitionForZone )
  {
    v15 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
      goto LABEL_122;
    if ( (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) == 0 || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
      goto LABEL_39;
    if ( a4 )
      v21 = *a4;
    else
      v21 = L".";
    WPP_SF_DsS(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x77u,
      (__int64)&WPP_5efa35e0870730ffd13051b9da022308_Traceguids,
      PartitionForZone,
      *(_QWORD *)(v6 + 8),
      (__int64)v21);
    goto LABEL_38;
  }
  v22 = Lookup_ZoneNodeFromDotted(0i64, *(_BYTE **)(v6 + 8), 0, 16, (__int64 *)0xFFFFFFFFFFFFFFFFi64, 0i64);
  if ( v22 )
    RpcUtil_DeleteNodeOrSubtreeForAdmin((__int64)v22, 0i64, 0i64, 0i64, 1u);
  if ( v11 == 1 )
  {
    if ( *(_DWORD *)(v6 + 44) || (v23 = 268435458, (*(_BYTE *)(v6 + 28) & 0x10) != 0) )
      v23 = 268435457;
    v24 = *(_DWORD *)(v6 + 28) & 0x5000 | v23;
    if ( v12 )
    {
      PartitionForZone = Ds_OpenServer(0);
      if ( PartitionForZone )
        goto LABEL_38;
      v24 |= 2u;
    }
    PartitionForZone = Zone_CreateNewPrimaryEx(
                         &v31,
                         *(char **)(v6 + 8),
                         *(char **)(v6 + 48),
                         *(_QWORD *)(v6 + 32),
                         v12,
                         v32[0],
                         v24,
                         a4);
    if ( PartitionForZone )
    {
      v15 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
      {
        v8 = v31;
        goto LABEL_122;
      }
      if ( (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) == 0 || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
      {
        v8 = v31;
        goto LABEL_39;
      }
      if ( a4 )
        v25 = *a4;
      else
        v25 = L".";
      WPP_SF_sSD(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x78u,
        (__int64)&WPP_5efa35e0870730ffd13051b9da022308_Traceguids,
        *(const char **)(v6 + 8),
        (__int64)v25);
      v8 = v31;
      goto LABEL_38;
    }
    v8 = v31;
    if ( (*(_DWORD *)(v6 + 28) & 0x5000) != 0 )
    {
      LODWORD(a6) = ((*(_DWORD *)(v6 + 28) & 0x4000) != 0) + 1;
      Reg_SetValue(0x10000000, 0i64, v31, "DcPromoConvert", 4u, (BYTE *)&a6, 4u);
    }
    goto LABEL_108;
  }
  v26 = 0i64;
  PartitionForZone = Zone_ValidateMasterIpList(*(_DWORD **)(v6 + 56));
  if ( PartitionForZone )
    goto LABEL_38;
  if ( v11 == 4 )
  {
    v26 = &a6;
    a6 = *(_QWORD *)(v6 + 80);
  }
  v27 = Zone_CreateEx(
          &v31,
          v11,
          *(char **)(v6 + 8),
          0,
          0x10000000,
          *(_DWORD **)(v6 + 56),
          v12,
          v32[0],
          *(char **)(v6 + 32),
          0,
          v26,
          0i64,
          0i64);
  v8 = v31;
  PartitionForZone = v27;
  if ( v27 )
    goto LABEL_38;
  if ( *(_DWORD *)(v31 + 372) != 4 )
  {
LABEL_105:
    if ( (*(_BYTE *)(v8 + 388) & 1) != 0 )
    {
      PartitionForZone = Ds_WriteZoneToDs(v8, 0, 0);
      if ( PartitionForZone )
      {
LABEL_119:
        Zone_Delete((struct _zone_info *)v8, 0x10000000, 0, 0, 0);
        goto LABEL_38;
      }
    }
    Zone_UnlockAfterWriteEx(v8, 1, (__int64)"ds\\dns\\server\\server\\zonerpc.c", 243);
LABEL_108:
    if ( v8 != g_pTrustAnchorsZone && *(_DWORD *)(v8 + 372) <= 3u )
      *(_DWORD *)(v8 + 304) = 1;
    v28 = *(_DWORD *)(v8 + 372);
    if ( (unsigned int)(v28 - 3) <= 1 )
    {
      v29 = 0;
    }
    else
    {
      v29 = 1;
      if ( v28 != 1 )
        v29 = _strnicmp(*(const char **)(v8 + 16), "_msdcs.", 7ui64) != 0;
    }
    PartitionForZone = RpcUtil_SwitchSecurityContext(0);
    if ( !PartitionForZone )
    {
      if ( v29 )
        Zone_CreateDelegationInParentZone(v8, v6);
      Config_UpdateBootInfo();
      PartitionForZone = RpcUtil_SwitchSecurityContext(1);
      if ( !PartitionForZone )
        goto LABEL_38;
    }
    goto LABEL_119;
  }
  *(_DWORD *)(v31 + 396) |= 0x200u;
  PartitionForZone = Zone_PrepareForLoad(v8);
  if ( PartitionForZone )
  {
    v15 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
      goto LABEL_122;
    if ( (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) == 0 || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
      goto LABEL_39;
    v20 = 121;
    goto LABEL_58;
  }
  PartitionForZone = Zone_ActivateLoadedZone(v8);
  if ( !PartitionForZone )
  {
    if ( *(_DWORD *)(v8 + 372) == 4 )
      Zone_WriteZoneToRegistry(v8);
    goto LABEL_105;
  }
  v15 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
    goto LABEL_122;
  if ( (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0 && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    v20 = 122;
LABEL_58:
    WPP_SF_sd(
      *((_QWORD *)v15 + 7),
      v20,
      (__int64)&WPP_5efa35e0870730ffd13051b9da022308_Traceguids,
      *(const char **)(v6 + 8));
    goto LABEL_38;
  }
LABEL_39:
  if ( v15 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)v15 + 68) & 4) != 0
    && *((_BYTE *)v15 + 65) >= 4u )
  {
    if ( v6 )
      v19 = *(const char **)(v6 + 8);
    else
      v19 = 0i64;
    WPP_SF_sd(*((_QWORD *)v15 + 7), 0x7Bu, (__int64)&WPP_5efa35e0870730ffd13051b9da022308_Traceguids, v19);
  }
LABEL_122:
  if ( PartitionForZone )
    goto LABEL_128;
  LogZoneCreateEvent(v8);
  if ( !dword_1401B9724 )
  {
    LODWORD(v32[0]) = 4;
    v32[1] = 1i64;
    Config_ResetProperty(0x10000000, "AdminConfigured", (__int64)v32);
  }
  if ( v8 )
  {
    if ( (*(_BYTE *)(v8 + 388) & 1) != 0 )
      g_protectSoaReversionUntil = dword_1401B9714 + 600;
    goto LABEL_128;
  }
  return PartitionForZone;
}
// 1401B7F68: using guessed type int g_ulDsDomainVersion;
// 1401B8C48: using guessed type __int64 g_pTrustAnchorsZone;
// 1401B8C94: using guessed type int g_fDsReadOnlyDcMode;
// 1401B8D30: using guessed type int g_liDpInitialized;
// 1401B90C8: using guessed type int g_protectSoaReversionUntil;
// 1401B9714: using guessed type int dword_1401B9714;
// 1401B9724: using guessed type int dword_1401B9724;
// 1401B9750: using guessed type int dword_1401B9750;
