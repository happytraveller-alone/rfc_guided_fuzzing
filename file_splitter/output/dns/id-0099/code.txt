Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 99
// Total lines: 253

//----- (000000014000C71C) ----------------------------------------------------
__int64 __fastcall performSelfpoint(__int64 a1, unsigned __int16 *a2, char a3)
{
  unsigned int v6; // ebx
  char *v7; // rdi
  const char *v8; // r14
  const CHAR *v9; // rdx
  __int64 v10; // r12
  char *v11; // rcx
  __int64 v12; // rbp
  __int64 v13; // rbp
  unsigned __int64 v14; // rax
  int v15; // ecx
  __int64 v16; // r8
  char *v17; // rdx
  signed __int64 v18; // r14
  char v19; // al
  const char *v20; // r8
  __int64 v22; // r8
  char *v23; // rdx
  __int64 v24; // r10
  char v25; // al
  __int64 v26; // rbx
  char *v27; // rax
  char *v28; // rdx
  int v29; // ecx
  signed __int64 v30; // r14
  char v31; // al
  char *v32; // rax
  int v33; // eax
  DWORD dwDisposition; // [rsp+98h] [rbp+10h] BYREF
  HKEY phkResult; // [rsp+A8h] [rbp+20h] BYREF

  v6 = 0;
  v7 = 0i64;
  if ( !*((_DWORD *)a2 + 1) )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_Ds(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x43u,
        (__int64)&WPP_dd5a12aafb1b34b87fc868998e41e2af_Traceguids,
        *a2,
        *(_QWORD *)(a1 + 16));
    }
    goto LABEL_43;
  }
  v8 = "127.0.0.1";
  if ( *a2 == 23 )
  {
    v8 = "::1";
    if ( (unsigned int)DnsAddrArray_GetFamilyCount((__int64)g_ServerAddrs, 23) )
    {
      v9 = (const CHAR *)*((_QWORD *)a2 + 1);
      if ( v9 )
      {
        if ( *(_QWORD *)(a1 + 40) )
        {
          if ( *((_QWORD *)a2 + 2) )
            goto LABEL_17;
          phkResult = 0i64;
          dwDisposition = 0;
          RegCreateKeyExA(HKEY_LOCAL_MACHINE, v9, 0, 0i64, 0, 0x2001Fu, 0i64, &phkResult, &dwDisposition);
          *((_QWORD *)a2 + 2) = phkResult;
        }
      }
    }
  }
  if ( !*((_QWORD *)a2 + 2) )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_sd(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x44u,
        (__int64)&WPP_dd5a12aafb1b34b87fc868998e41e2af_Traceguids,
        *(const char **)(a1 + 16));
    }
    goto LABEL_43;
  }
LABEL_17:
  v10 = -1i64;
  if ( (a3 & 0x10) == 0 && (v11 = (char *)*((_QWORD *)a2 + 7)) != 0i64 && *v11 )
  {
    if ( findLoopbackAddress(v11, *a2) )
      goto LABEL_43;
    v12 = -1i64;
    do
      ++v12;
    while ( *(_BYTE *)(*((_QWORD *)a2 + 7) + v12) );
    v13 = (unsigned int)(v12 + 20);
    v7 = (char *)Mem_Alloc(v13, 0i64, "ds\\dns\\server\\server\\autoconfigure.c", 2562);
    if ( !v7 )
      goto LABEL_42;
    v14 = v13 - 1;
    v15 = 0;
    if ( (a3 & 0x20) != 0 )
    {
      if ( v14 > 0x7FFFFFFE )
        v15 = -2147024809;
      if ( v15 < 0 )
      {
        if ( (_DWORD)v13 )
          *v7 = 0;
      }
      else
      {
        v16 = (unsigned int)v13;
        v17 = v7;
        v15 = 0;
        if ( !(_DWORD)v13 )
          goto LABEL_34;
        v18 = v8 - v7;
        do
        {
          if ( !(2147483646i64 - (unsigned int)v13 + v16) )
            break;
          v19 = v17[v18];
          if ( !v19 )
            break;
          *v17++ = v19;
          --v16;
        }
        while ( v16 );
        if ( !v16 )
        {
LABEL_34:
          --v17;
          v15 = -2147024774;
        }
        *v17 = 0;
      }
      if ( v15 < 0 || (int)StringCchCatA(v7, (unsigned int)v13, (const char *)a2 + 32) < 0 )
        goto LABEL_42;
      v20 = (const char *)*((_QWORD *)a2 + 7);
    }
    else
    {
      if ( v14 > 0x7FFFFFFE )
        v15 = -2147024809;
      if ( v15 < 0 )
      {
        if ( (_DWORD)v13 )
          *v7 = 0;
      }
      else
      {
        v22 = (unsigned int)v13;
        v23 = v7;
        v15 = 0;
        if ( !(_DWORD)v13 )
          goto LABEL_53;
        v24 = *((_QWORD *)a2 + 7) - (_QWORD)v7;
        do
        {
          if ( !(2147483646i64 - (unsigned int)v13 + v22) )
            break;
          v25 = v23[v24];
          if ( !v25 )
            break;
          *v23++ = v25;
          --v22;
        }
        while ( v22 );
        if ( !v22 )
        {
LABEL_53:
          --v23;
          v15 = -2147024774;
        }
        *v23 = 0;
      }
      if ( v15 < 0 || (int)StringCchCatA(v7, (unsigned int)v13, (const char *)a2 + 32) < 0 )
        goto LABEL_42;
      v20 = v8;
    }
    if ( (int)StringCchCatA(v7, (unsigned int)v13, v20) < 0 )
    {
LABEL_42:
      v6 = 14;
      goto LABEL_43;
    }
  }
  else
  {
    v26 = 20i64;
    v27 = (char *)Mem_Alloc(0x14u, 0i64, "ds\\dns\\server\\server\\autoconfigure.c", 2540);
    v7 = v27;
    if ( !v27 )
      goto LABEL_42;
    v28 = v27;
    v29 = 0;
    v30 = v8 - v27;
    do
    {
      if ( v26 == -2147483626 )
        break;
      v31 = v28[v30];
      if ( !v31 )
        break;
      *v28++ = v31;
      --v26;
    }
    while ( v26 );
    if ( !v26 )
    {
      --v28;
      v29 = -2147024774;
    }
    *v28 = 0;
    if ( v29 < 0 )
      goto LABEL_42;
  }
  while ( 1 )
  {
    v32 = strchr(v7, 32);
    if ( !v32 )
      break;
    *v32 = 44;
  }
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_Dss(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x45u,
      (__int64)&WPP_dd5a12aafb1b34b87fc868998e41e2af_Traceguids,
      *a2,
      *(_QWORD *)(a1 + 16),
      (__int64)v7);
  }
  do
    ++v10;
  while ( v7[v10] );
  v33 = RegSetValueExA(*((HKEY *)a2 + 2), "NameServer", 0, 1u, (const BYTE *)v7, v10 + 1);
  v6 = v33;
  if ( v33
    && WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_D(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x46u, (__int64)&WPP_dd5a12aafb1b34b87fc868998e41e2af_Traceguids, v33);
  }
LABEL_43:
  Mem_Free(v7, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\autoconfigure.c", 2665);
  return v6;
}
