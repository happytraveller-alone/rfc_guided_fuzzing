Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 2612
// Total lines: 150

//----- (000000014013496C) ----------------------------------------------------
__int64 __fastcall CDnsPolicyManager::InitializePolicyCriteriaSearchTrees(CDnsPolicyManager *this)
{
  unsigned __int16 v1; // si
  unsigned int LastError; // ebx
  void *v3; // rax
  void *v4; // rdi
  void *v5; // rax
  void *v6; // rdi
  void *v7; // rax
  void *v8; // rdi
  void *v9; // rax
  void *v10; // rdi
  void *v11; // rax
  void *v12; // rdi
  _QWORD *v13; // rcx
  _DWORD *v14; // rdx
  __int64 v15; // r8
  __int64 v16; // r9
  __int64 v17; // r10
  __int64 v18; // r11
  int v19; // eax

  v1 = 0;
  LastError = 0;
  v3 = operator new(0x38ui64, (const struct std::nothrow_t *)&std::nothrow);
  v4 = v3;
  if ( v3 )
  {
    memset_0(v3, 0, 0x38ui64);
    g_PolicyCriteriaSearchRootsQP = v4;
  }
  else
  {
    v4 = 0i64;
    g_PolicyCriteriaSearchRootsQP = 0i64;
  }
  if ( !v4 )
    goto LABEL_5;
  qword_1401B9218 = (__int64)Lock_Create();
  if ( !qword_1401B9218 )
    goto LABEL_5;
  v5 = operator new(0x38ui64, (const struct std::nothrow_t *)&std::nothrow);
  v6 = v5;
  if ( v5 )
  {
    memset_0(v5, 0, 0x38ui64);
    g_PolicyCriteriaSearchRootsDU = v6;
  }
  else
  {
    v6 = 0i64;
    g_PolicyCriteriaSearchRootsDU = 0i64;
  }
  if ( !v6 )
    goto LABEL_5;
  qword_1401B9238 = (__int64)Lock_Create();
  if ( !qword_1401B9238 )
    goto LABEL_5;
  v7 = operator new(0x38ui64, (const struct std::nothrow_t *)&std::nothrow);
  v8 = v7;
  if ( v7 )
  {
    memset_0(v7, 0, 0x38ui64);
    g_PolicyCriteriaSearchRootsXfr = v8;
  }
  else
  {
    v8 = 0i64;
    g_PolicyCriteriaSearchRootsXfr = 0i64;
  }
  if ( !v8 )
    goto LABEL_5;
  qword_1401B91F8 = (__int64)Lock_Create();
  if ( !qword_1401B91F8 )
    goto LABEL_5;
  v9 = operator new(0x38ui64, (const struct std::nothrow_t *)&std::nothrow);
  v10 = v9;
  if ( v9 )
  {
    memset_0(v9, 0, 0x38ui64);
    g_PolicyCriteriaSearchRootsRecursion = v10;
  }
  else
  {
    v10 = 0i64;
    g_PolicyCriteriaSearchRootsRecursion = 0i64;
  }
  if ( !v10 )
    goto LABEL_5;
  qword_1401B9208 = (__int64)Lock_Create();
  if ( !qword_1401B9208 )
    goto LABEL_5;
  v11 = operator new(0x38ui64, (const struct std::nothrow_t *)&std::nothrow);
  v12 = v11;
  if ( v11 )
  {
    memset_0(v11, 0, 0x38ui64);
    g_PolicyCriteriaSearchRootsRRLExceptionlist = v12;
  }
  else
  {
    v12 = 0i64;
    g_PolicyCriteriaSearchRootsRRLExceptionlist = 0i64;
  }
  if ( v12 && (qword_1401B9228 = (__int64)Lock_Create()) != 0 && (hClientSubnetRecordsLock = Lock_Create()) != 0i64 )
  {
    v13 = (_QWORD *)g_PolicyCriteriaSearchRootsDU;
    v14 = PolicyCriteriaOrder;
    v15 = g_PolicyCriteriaSearchRootsQP - g_PolicyCriteriaSearchRootsDU;
    v16 = g_PolicyCriteriaSearchRootsXfr - g_PolicyCriteriaSearchRootsDU;
    v17 = g_PolicyCriteriaSearchRootsRecursion - g_PolicyCriteriaSearchRootsDU;
    v18 = g_PolicyCriteriaSearchRootsRRLExceptionlist - g_PolicyCriteriaSearchRootsDU;
    do
    {
      *(_QWORD *)((char *)v13 + v15) = 0i64;
      *v13 = 0i64;
      *(_QWORD *)((char *)v13 + v16) = 0i64;
      *(_QWORD *)((char *)v13 + v17) = 0i64;
      v19 = v1++;
      *(_QWORD *)((char *)v13++ + v18) = 0i64;
      *v14++ = v19;
    }
    while ( v1 < 7u );
  }
  else
  {
LABEL_5:
    LastError = GetLastError();
  }
  if ( LastError
    && WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
  {
    WPP_SF_D(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x4Fu,
      (__int64)&WPP_bbbcc621566c3408fe84d6a85874d543_Traceguids,
      LastError);
  }
  return LastError;
}
// 1401B91D0: using guessed type _DWORD PolicyCriteriaOrder[7];
// 1401B91F8: using guessed type __int64 qword_1401B91F8;
// 1401B9208: using guessed type __int64 qword_1401B9208;
// 1401B9218: using guessed type __int64 qword_1401B9218;
// 1401B9228: using guessed type __int64 qword_1401B9228;
// 1401B9238: using guessed type __int64 qword_1401B9238;
// 1401B9DB8: using guessed type void *hClientSubnetRecordsLock;
