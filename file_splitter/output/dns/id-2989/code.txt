Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 2989
// Total lines: 127

//----- (0000000140158124) ----------------------------------------------------
__int64 __fastcall Dns_DequeueSecurityContextByKey(_WORD *Buf1, int a2)
{
  unsigned int CurrentTimeInSeconds; // r12d
  const char *v5; // rax
  __int64 v6; // rdx
  WCHAR *v7; // rdx
  __int64 v8; // rcx
  __int64 v9; // rbx
  __int64 *v10; // r14
  __int64 v11; // rax
  char *v12; // rbp
  char *v13; // rsi
  signed __int64 v14; // rbp
  int v15; // eax
  int v16; // eax
  bool v17; // zf
  const char *v18; // rax
  __int64 v19; // rax
  __int64 v21; // [rsp+20h] [rbp-38h]

  CurrentTimeInSeconds = Dns_GetCurrentTimeInSeconds();
  if ( (byte_1401BA001 & 0x20) != 0 )
  {
    v5 = DnsAddr_Ntoa((struct in_addr *)Buf1);
    WPP_SF_sssS(
      *((_QWORD *)Buf1 + 9),
      v6,
      v5,
      *((const char **)Buf1 + 8),
      *((const char **)Buf1 + 9),
      *((const wchar_t **)Buf1 + 10));
  }
  EnterCriticalSection(&SecurityContextListCS);
  if ( (*((_DWORD *)WPP_GLOBAL_Control + 7) & 0x2000) != 0 )
    DnsPrint_SecurityContextList(v8, (__int64)v7, (__int64)"Before Get", (const char *)SecurityContextListHead);
  v9 = SecurityContextListHead;
  v10 = &SecurityContextListHead;
  while ( v9 )
  {
    if ( *(_DWORD *)(v9 + 160) >= CurrentTimeInSeconds )
    {
      if ( (unsigned int)DnsAddr_IsEqual(Buf1, (_WORD *)(v9 + 24), 3) )
      {
        if ( (v8 = *((_QWORD *)Buf1 + 8)) != 0
          && ((v7 = *(WCHAR **)(v9 + 88), (WCHAR *)v8 == v7) || (unsigned int)Dns_NameCompare_UTF8((WCHAR *)v8, v7))
          || (v8 = *((_QWORD *)Buf1 + 9)) != 0
          && ((v7 = *(WCHAR **)(v9 + 96), (WCHAR *)v8 == v7) || (unsigned int)Dns_NameCompare_UTF8((WCHAR *)v8, v7)) )
        {
          v12 = *(char **)(v9 + 104);
          v13 = (char *)*((_QWORD *)Buf1 + 10);
          if ( (byte_1401BA001 & 0x20) != 0 )
            WPP_SF_SS(
              182i64,
              (unsigned __int16)&WPP_9b9f12dbc4273be48aea1d81c92c8dd1_Traceguids,
              *((_QWORD *)Buf1 + 10),
              *(const unsigned __int16 **)(v9 + 104),
              v21);
          if ( v13 && v12 )
          {
            v14 = v12 - v13;
            do
            {
              v15 = *(unsigned __int16 *)&v13[v14];
              v8 = (unsigned int)*(unsigned __int16 *)v13 - v15;
              if ( (_DWORD)v8 )
                break;
              v13 += 2;
            }
            while ( v15 );
            v16 = 0;
            v17 = (_DWORD)v8 == 0;
          }
          else
          {
            v16 = 0;
            v17 = v12 == v13;
          }
          LOBYTE(v16) = v17;
          if ( v16 )
          {
            if ( !a2 || *(_DWORD *)(v9 + 148) )
            {
              v19 = *(_QWORD *)v9;
              ++SecContextDequeue;
              *v10 = v19;
              break;
            }
            if ( (byte_1401BA003 & 0x10) != 0 )
            {
              v18 = DnsAddr_Ntoa((struct in_addr *)Buf1);
              LODWORD(v21) = 0;
              WPP_SF_ssdd(
                13i64,
                (unsigned __int16)&WPP_9b9f12dbc4273be48aea1d81c92c8dd1_Traceguids,
                *((_QWORD *)Buf1 + 8),
                v18,
                v21);
            }
          }
        }
      }
      v10 = (__int64 *)v9;
    }
    else
    {
      v11 = *(_QWORD *)v9;
      ++SecContextTimeout;
      *v10 = v11;
      Dns_FreeSecurityContext(v9);
    }
    v9 = *v10;
  }
  if ( (*((_DWORD *)WPP_GLOBAL_Control + 7) & 0x2000) != 0 )
    DnsPrint_SecurityContextList(v8, (__int64)v7, (__int64)"After Dequeue", (const char *)SecurityContextListHead);
  LeaveCriticalSection(&SecurityContextListCS);
  return v9;
}
// 140158172: variable 'v6' is possibly undefined
// 1401581A2: variable 'v8' is possibly undefined
// 1401581A2: variable 'v7' is possibly undefined
// 14015825B: variable 'v21' is possibly undefined
// 1401B9E24: using guessed type int SecContextTimeout;
// 1401B9E28: using guessed type int SecContextDequeue;
// 1401B9E50: using guessed type __int64 SecurityContextListHead;
// 1401BA001: using guessed type char byte_1401BA001;
// 1401BA003: using guessed type char byte_1401BA003;
