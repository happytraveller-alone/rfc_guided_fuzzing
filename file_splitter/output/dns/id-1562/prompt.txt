Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 1562
// Total lines: 284

//----- (00000001400C597C) ----------------------------------------------------
__int64 Zone_LoadRootHints()
{
  int v0; // esi
  int v1; // r14d
  char v2; // r15
  _QWORD *v3; // rcx
  int v4; // r12d
  __int64 result; // rax
  DWORD CurrentThreadId; // eax
  int v7; // eax
  unsigned int v8; // ebx
  _QWORD *v9; // rax
  __int64 v10; // rdx
  CDnsClientSubnetRecordsTrie *v11; // rcx
  unsigned __int16 v12; // dx
  unsigned int DatabaseFile; // edi
  unsigned int v14; // eax
  _QWORD *v15; // rcx
  int v16; // ebx
  void *v17; // rax
  unsigned int ZoneFromDs; // eax
  __int64 v19; // rax
  _BYTE *v20; // rsi
  _BYTE *ARecord; // rbx
  CDnsClientSubnetRecordsTrie *v22; // rcx
  unsigned __int16 v23; // dx
  __int128 v24; // [rsp+70h] [rbp-10h] BYREF
  int v25; // [rsp+C0h] [rbp+40h] BYREF
  _QWORD *v26; // [rsp+C8h] [rbp+48h] BYREF

  v0 = 0;
  v25 = 0;
  v1 = 0;
  v2 = 0;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x10) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x80u, (__int64)&WPP_e9a0d5dea449334d7c383477da81f939_Traceguids);
  }
  v3 = (_QWORD *)g_pCacheZone;
  v4 = 1;
  v26 = (_QWORD *)g_pCacheZone;
  if ( !g_pCacheZone )
  {
    result = Zone_CreateEx((__int64 *)&v26, 0i64, ".", 0, 0, 0i64, 0, 0i64, 0i64, 0, 0i64, 0i64, 0i64);
    if ( (_DWORD)result )
      return result;
LABEL_16:
    v9 = NTree_InitializeEx(0);
    v26[9] = v9;
    v26[8] = v9;
    if ( *(_QWORD *)(g_Database + 56)
      && (!g_pVirtualizationManager || !*(_QWORD *)(*(_QWORD *)g_pVirtualizationManager + 16i64)) )
    {
      v11 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x10) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
      {
        goto LABEL_70;
      }
      v12 = 130;
LABEL_69:
      WPP_SF_(*((_QWORD *)v11 + 7), v12, (__int64)&WPP_e9a0d5dea449334d7c383477da81f939_Traceguids);
LABEL_70:
      DatabaseFile = 0;
      goto LABEL_71;
    }
    if ( dword_1401B9728 )
    {
      if ( (unsigned int)dword_1401B9728 <= 2 )
        goto LABEL_37;
      if ( dword_1401B9728 != 3 )
      {
        v11 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x83u, (__int64)&WPP_e9a0d5dea449334d7c383477da81f939_Traceguids);
          v11 = WPP_GLOBAL_Control;
        }
        DatabaseFile = 87;
LABEL_56:
        if ( dword_1401B97EC || qword_1401B97D0 && *(_DWORD *)(qword_1401B97D0 + 4) || dword_1401B9708 )
        {
          if ( v11 == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            || (*((_BYTE *)v11 + 68) & 0x10) == 0
            || *((_BYTE *)v11 + 65) < 4u )
          {
            goto LABEL_70;
          }
          v12 = 132;
          goto LABEL_69;
        }
        if ( v11 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_BYTE *)v11 + 68) & 0x10) != 0
          && *((_BYTE *)v11 + 65) >= 4u )
        {
          WPP_SF_(*((_QWORD *)v11 + 7), 0x85u, (__int64)&WPP_e9a0d5dea449334d7c383477da81f939_Traceguids);
        }
        v24 = DNS_EVENT_NO_CACHE_FILE_SPECIFIED;
        Eventlog_LogEvent((__int64)&v24, v10, 0, 0i64, 0i64, DatabaseFile, 0, 0i64);
LABEL_71:
        Zone_ActivateLoadedZone((__int64)v26);
        if ( dword_1401B9728 == 3
          && !v0
          && v1
          && (unsigned int)Ds_IsDsServer(0)
          && (unsigned int)Zone_VerifyRootHintsBeforeWrite((__int64)v26)
          && ((*((_DWORD *)v26 + 99) & 0xA00) != 0 || g_ulDCsInDomain == 1) )
        {
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x10) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            WPP_SF_(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x86u,
              (__int64)&WPP_e9a0d5dea449334d7c383477da81f939_Traceguids);
          }
          if ( !(unsigned int)Ds_WriteZoneToDs(g_pCacheZone, v2, 0) )
          {
            v19 = g_pCacheZone;
            *(_DWORD *)(g_pCacheZone + 388) |= 1u;
            *(_DWORD *)(v19 + 396) &= 0xFFFFF5FF;
          }
        }
        v20 = Lookup_ZoneNodeFromDotted(v26, "localhost", 0, 18, 0i64, 0i64);
        if ( v20 )
        {
          ARecord = RR_CreateARecord(16777343, 0, 0x21u);
          v22 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x10) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            WPP_SF_(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x88u,
              (__int64)&WPP_e9a0d5dea449334d7c383477da81f939_Traceguids);
            v22 = WPP_GLOBAL_Control;
          }
          if ( ARecord )
          {
            if ( (unsigned int)RR_AddToNode((__int64)v26, (__int64)v20, (__int64)ARecord) )
            {
              if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x10) != 0
                && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
              {
                WPP_SF_(
                  *((_QWORD *)WPP_GLOBAL_Control + 7),
                  0x89u,
                  (__int64)&WPP_e9a0d5dea449334d7c383477da81f939_Traceguids);
              }
              RR_Free((__int64)ARecord);
            }
            else
            {
              ARecord[8] = -63;
              *((_WORD *)ARecord + 5) |= 0x20u;
              *((_DWORD *)ARecord + 5) = htonl(0x258u);
              *((_DWORD *)v20 + 23) |= 0x10000u;
            }
            goto LABEL_106;
          }
          if ( v22 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_BYTE *)v22 + 68) & 0x10) != 0
            && *((_BYTE *)v22 + 65) >= 4u )
          {
            v23 = 138;
LABEL_105:
            WPP_SF_(*((_QWORD *)v22 + 7), v23, (__int64)&WPP_e9a0d5dea449334d7c383477da81f939_Traceguids);
          }
        }
        else
        {
          v22 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x10) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            v23 = 139;
            goto LABEL_105;
          }
        }
LABEL_106:
        if ( v4 )
          Zone_UnlockAfterWriteEx((__int64)v26, 1, (__int64)"ds\\dns\\server\\server\\zone.c", 85);
        return DatabaseFile;
      }
    }
    v14 = Ds_LoadZoneFromDs((struct _zone_info *)v26, 0, &v25);
    DatabaseFile = v14;
    if ( v14 )
    {
      if ( v14 == 9607 || v14 == 9622 )
        goto LABEL_53;
    }
    else if ( v25 )
    {
LABEL_33:
      v0 = 1;
      goto LABEL_71;
    }
    v2 = 32;
LABEL_37:
    v15 = v26;
    v16 = 0;
    if ( !v26[17] )
    {
      v26[18] = L"cache.dns";
      v16 = 1;
      v15 = v26;
    }
    DatabaseFile = File_LoadDatabaseFile((__int64)v15, 0i64, 0i64, 0i64);
    if ( !DatabaseFile )
    {
      if ( v16 )
      {
        v17 = Dns_StringCopyAllocate((char *)L"cache.dns", 0, 1i64, 1);
        v26[18] = v17;
      }
      v1 = 1;
      goto LABEL_71;
    }
    if ( v16 )
      v26[18] = 0i64;
    if ( GetLastError() )
      DatabaseFile = GetLastError();
    if ( dword_1401B9728 != 2 )
      goto LABEL_54;
    ZoneFromDs = Ds_LoadZoneFromDs((struct _zone_info *)v26, 0, 0i64);
    DatabaseFile = ZoneFromDs;
    if ( !ZoneFromDs )
    {
      if ( !*((_DWORD *)v26 + 111) )
        goto LABEL_71;
      goto LABEL_33;
    }
    if ( ZoneFromDs != 9607 && ZoneFromDs != 9622 )
    {
LABEL_54:
      if ( !DatabaseFile )
        goto LABEL_71;
      v11 = WPP_GLOBAL_Control;
      goto LABEL_56;
    }
LABEL_53:
    v4 = 0;
    goto LABEL_54;
  }
  if ( *(char *)(g_pCacheZone + 428) < 0 )
  {
    CurrentThreadId = GetCurrentThreadId();
    v3 = v26;
    if ( *((_DWORD *)v26 + 101) == CurrentThreadId )
      goto LABEL_16;
  }
  v7 = Zone_LockForWriteEx((__int64)v3, 1, 0x2710u, (__int64)"ds\\dns\\server\\server\\zone.c", 228);
  v8 = v7;
  if ( !v7 )
    goto LABEL_16;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x10) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
  {
    WPP_SF_D(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x81u, (__int64)&WPP_e9a0d5dea449334d7c383477da81f939_Traceguids, v7);
  }
  return v8;
}
// 1400C5D15: variable 'v10' is possibly undefined
// 140186F40: using guessed type __int128 DNS_EVENT_NO_CACHE_FILE_SPECIFIED;
// 1401B7F00: using guessed type int g_ulDCsInDomain;
// 1401B9270: using guessed type struct CDnsVirtualizationManager *g_pVirtualizationManager;
// 1401B9708: using guessed type int dword_1401B9708;
// 1401B9728: using guessed type int dword_1401B9728;
// 1401B97D0: using guessed type __int64 qword_1401B97D0;
// 1401B97EC: using guessed type int dword_1401B97EC;
// 1401EC600: using guessed type __int64 g_Database;
// 1401EC628: using guessed type __int64 g_pCacheZone;
##############################
Role: Let's assume that you are an advanced reverse engineer and you are reverse engineering a network driver using IDA Pro, and you are also familiar with the RFC documentation. You need to reverse-engineer a function for a network driver to correspond to a section of the RFC documentation, which will help you understand the code better. The driver you're reversing is Schannel.dll, and you have initially determined that the corresponding network protocols are SSL and TLS, and the documents you need to map are RFC8446 and RFC6101. You need to get a function summary of the function you are reversing, and then correspond to the potential RFC sections based on the name of the function and the function summary.
Function Background: The function is reverse engineered from the driver file Schannel.dll on Windows platform. Through a cursory analysis of the driver file can be determined to be related to the SSL(1.3), TLS(3.0) protocol, that is, with RFC8446, RFC6101 strong correlation.

Output Function Summary: Summarizes the function's functionality with several phrases instead of sentences, focuses on covering the function's control flow information, and highlights the protocol function points implemented by the function. Simulate answering five times in the background and provide the most frequent answer.

Retrieve document sections: giving matches for document sections(FunctionMatchRFCResult) that the code may related to. NOTE if the code is only business related(i.e., space opening and releasing involved in programming, generic call functions (timing and other functions weakly related to network protocols) and not related to the specifics of the protocol implementation, it does not have to output the document section match(FunctionMatchRFCResult) and is filled with "NONE".

Retrieve document sections Thinking Chain: The function code is matched with the RFC document section, and the thinking chain is provided to help you solve the problem better:
	1. Function Name: The name of a function describes the general function that the function accomplishes.
	2. Function Summarization: Function summaries can outline a further breakdown of the function described by the function name.
	3. Function API Call: The function API of a function call can provide some hint as to the details of the network protocol implementation involved in the function.
	4. Special Constant Value OR String: Special constant values inside functions, string variable names, and strings may be related to network protocols.
	5. Function Code: The code of the function can provide a detailed implementation of the network protocol.
Generate Function Information Collection with JSON Format:

{
	"FunctionIndex": "(FILL WITH "File count" with less than four bits are indexed with zeros to make up the four bits.)",
	"FunctionName": "(Full Function Code Name)",
	"FunctionSummarization": [
		"(Function Summary Phrase1)",
		"(Function Summary Phrase2)",
		"(...)"
	],
	"FunctionMatchRFCResult": [
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 1)",
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 2)",
		"(...)"
	],
}

ATTENTION: Remember YOU MUST ONLY output the Function Information Collection result.
