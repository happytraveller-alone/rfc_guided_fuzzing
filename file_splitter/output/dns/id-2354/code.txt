Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 2354
// Total lines: 169

//----- (0000000140121970) ----------------------------------------------------
__int64 __fastcall Nsec3FileRead(__int64 a1, unsigned int a2, __int64 a3, __int64 a4)
{
  unsigned int v4; // r13d
  unsigned __int16 *v8; // r12
  unsigned __int16 v9; // r15
  unsigned int v10; // ebx
  _QWORD *v11; // r13
  __int64 v12; // rbx
  unsigned int v13; // esi
  _BYTE *v14; // rax
  unsigned int v15; // ebx
  void *v16; // rax
  unsigned int v18; // esi
  __int64 v19; // rdi
  unsigned int v20; // ebx
  unsigned __int16 v21; // cx
  int v22; // edx
  __int64 v23; // rbx
  unsigned __int16 v24; // cx
  _BYTE *v25; // rax
  _BYTE *v26; // rsi
  u_short v27; // cx
  u_short v28; // ax
  size_t v29; // r8
  __int64 v30; // rdi
  void *v31; // rdx
  unsigned int v32; // [rsp+30h] [rbp-30h] BYREF
  unsigned int Size; // [rsp+34h] [rbp-2Ch] BYREF
  int Size_4; // [rsp+38h] [rbp-28h]
  unsigned int v35; // [rsp+3Ch] [rbp-24h]
  unsigned int v36; // [rsp+40h] [rbp-20h]
  unsigned int v37; // [rsp+44h] [rbp-1Ch]
  void *Src; // [rsp+48h] [rbp-18h]
  void *v39; // [rsp+50h] [rbp-10h]
  unsigned __int16 v40; // [rsp+98h] [rbp+38h] BYREF

  v4 = 0;
  Src = 0i64;
  v39 = 0i64;
  Size_4 = 0;
  v8 = 0i64;
  v40 = 0;
  v9 = 0;
  if ( a2 < 5 )
  {
    v10 = -1072573181;
LABEL_3:
    v11 = 0i64;
    goto LABEL_22;
  }
  if ( !(unsigned int)File_ParseDwordToken(&v32, a3, a4)
    || (v35 = v32, v32 > 0xFF)
    || !(unsigned int)File_ParseDwordToken(&v32, a3 + 16, a4)
    || (v36 = v32, v32 > 0xFF)
    || !(unsigned int)File_ParseDwordToken(&v32, a3 + 32, a4)
    || v32 > 0xFFFF
    || (v12 = *(unsigned int *)(a3 + 56), v13 = a2 - 3, (unsigned int)v12 > 0x1FE) )
  {
    v10 = -1072573183;
    goto LABEL_3;
  }
  Size = *(_DWORD *)(a3 + 56);
  if ( (_DWORD)v12 != 1 || **(_BYTE **)(a3 + 48) != 45 )
  {
    v14 = Mem_Alloc(v12, 0i64, "ds\\dns\\server\\dnscore\\rrfile.c", 3738);
    Src = v14;
    if ( !v14 )
    {
      v10 = 14;
      v11 = 0i64;
      goto LABEL_22;
    }
    v10 = buildByteBufferFromHexStringTokens(v14, &Size, 1, a3 + 48, (unsigned __int64)&v14[v12]);
    if ( v10 )
      goto LABEL_21;
    v4 = Size;
  }
  v15 = *(_DWORD *)(a3 + 72);
  if ( (v15 & 7) != 0 || v15 > 0x198 )
    goto LABEL_26;
  Size = *(_DWORD *)(a3 + 72);
  v16 = Mem_Alloc(v15, 0i64, "ds\\dns\\server\\dnscore\\rrfile.c", 3785);
  v39 = v16;
  if ( !v16 )
  {
LABEL_20:
    v10 = 14;
LABEL_21:
    v11 = Src;
    goto LABEL_22;
  }
  if ( !(unsigned int)Dns_Base32HexToBinary(*(_QWORD *)(a3 + 64), v15, (__int64)v16, &Size) )
  {
LABEL_26:
    v10 = -1072573183;
    goto LABEL_21;
  }
  v18 = v13 - 2;
  v19 = a3 + 80;
  v20 = v18;
  v37 = v18;
  if ( v18 )
  {
    v8 = (unsigned __int16 *)Mem_Alloc(2 * v18, 0i64, "ds\\dns\\server\\dnscore\\rrfile.c", 3815);
    if ( !v8 )
      goto LABEL_20;
    while ( 1 )
    {
      v21 = Dns_RecordTypeForNameA(*(_BYTE **)v19, *(_DWORD *)(v19 + 8));
      if ( !v21 )
      {
        v21 = DnsRecordTypeForUnknownRecords(*(const char **)v19, *(_DWORD *)(v19 + 8));
        if ( !v21 )
          goto LABEL_26;
      }
      v22 = Size_4;
      v19 += 16i64;
      v8[Size_4] = v21;
      Size_4 = v22 + 1;
      if ( !--v18 )
      {
        if ( (unsigned int)Dns_GenerateNsecTypeBitMaps(v8, v20, 0i64, 0, &v40) != 234 )
          goto LABEL_33;
        v9 = v40;
        break;
      }
    }
  }
  v23 = Size;
  v24 = v9 + Size + v4 + 6;
  if ( v24 < 6u )
  {
LABEL_33:
    v10 = 13;
    goto LABEL_21;
  }
  v25 = RR_AllocateEx(v24, 0, 0);
  v26 = v25;
  if ( !v25 )
    goto LABEL_20;
  v27 = v32;
  *(_QWORD *)(a4 + 800) = v25;
  v25[56] = v35;
  v25[57] = v36;
  v28 = htons(v27);
  v29 = v4;
  v26[60] = v4;
  v30 = v4;
  v11 = Src;
  v31 = Src;
  *((_WORD *)v26 + 29) = v28;
  v26[61] = v23;
  memcpy_0(v26 + 62, v31, v29);
  memcpy_0(&v26[v30 + 62], v39, (unsigned int)v23);
  v10 = Dns_GenerateNsecTypeBitMaps(v8, v37, &v26[v30 + 62 + v23], v9, &v40);
  if ( v10 )
  {
    Mem_Free(v26, 0i64, 0i64, (__int64)"ds\\dns\\server\\dnscore\\rrfile.c", 3909);
    *(_QWORD *)(a4 + 800) = 0i64;
  }
LABEL_22:
  Mem_Free(v8, 0i64, 0i64, (__int64)"ds\\dns\\server\\dnscore\\rrfile.c", 3920);
  Mem_Free(v39, 0i64, 0i64, (__int64)"ds\\dns\\server\\dnscore\\rrfile.c", 3921);
  Mem_Free(v11, 0i64, 0i64, (__int64)"ds\\dns\\server\\dnscore\\rrfile.c", 3922);
  if ( v10 == -1072573183 )
    *(_DWORD *)(a4 + 1596) = -1072573180;
  return v10;
}
