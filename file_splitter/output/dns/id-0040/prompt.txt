Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 40
// Total lines: 339

//----- (0000000140002320) ----------------------------------------------------
__int64 Scavenge_Thread()
{
  unsigned int v0; // esi
  CDnsClientSubnetRecordsTrie *v1; // rcx
  unsigned __int16 v2; // dx
  __int64 v3; // rdx
  __int64 *i; // rdx
  int v5; // eax
  int v6; // ecx
  unsigned int v7; // eax
  CDnsClientSubnetRecordsTrie *v8; // rcx
  unsigned __int16 v9; // dx
  __int64 v10; // rdi
  __int64 v11; // r8
  const unsigned __int16 **NextZone; // rax
  __int64 v13; // rbx
  int CurrentTimeInSeconds; // eax
  __int64 *v15; // r9
  __int128 *v16; // rcx
  unsigned __int16 v17; // r8
  __int64 v19; // [rsp+58h] [rbp-B0h] BYREF
  FILETIME FileTime; // [rsp+60h] [rbp-A8h] BYREF
  __int64 v21; // [rsp+68h] [rbp-A0h] BYREF
  __int64 v22; // [rsp+70h] [rbp-98h]
  int v23; // [rsp+78h] [rbp-90h]
  int v24; // [rsp+7Ch] [rbp-8Ch]
  unsigned int v25; // [rsp+80h] [rbp-88h]
  unsigned int v26; // [rsp+84h] [rbp-84h]
  unsigned int v27; // [rsp+88h] [rbp-80h]
  unsigned int v28; // [rsp+8Ch] [rbp-7Ch]
  char v29[40]; // [rsp+90h] [rbp-78h] BYREF
  int v30; // [rsp+B8h] [rbp-50h]
  __int64 v31[2]; // [rsp+D8h] [rbp-30h] BYREF
  EVENT_DESCRIPTOR v32; // [rsp+E8h] [rbp-20h] BYREF
  __int128 v33; // [rsp+F8h] [rbp-10h] BYREF
  struct _SYSTEMTIME SystemTime; // [rsp+108h] [rbp+0h] BYREF
  __int64 v35[6]; // [rsp+118h] [rbp+10h] BYREF

  v0 = 0;
  v1 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    Aging_UpdateAgingTime();
    WPP_SF_Dd(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x18u,
      (__int64)&WPP_7b1a01b88f443306118dfd5b288785fb_Traceguids,
      dword_1401B9714);
    v1 = WPP_GLOBAL_Control;
  }
  if ( !g_ScavengeLock )
  {
    if ( v1 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)v1 + 17) & 0x200) != 0
      && *((_BYTE *)v1 + 65) >= 4u )
    {
      v2 = 25;
LABEL_10:
      WPP_SF_(*((_QWORD *)v1 + 7), v2, (__int64)&WPP_7b1a01b88f443306118dfd5b288785fb_Traceguids);
      goto LABEL_105;
    }
    goto LABEL_105;
  }
  if ( g_ServerState != 2 || g_lDsLoadingThreads )
  {
    if ( v1 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)v1 + 17) & 0x200) != 0
      && *((_BYTE *)v1 + 65) >= 4u )
    {
      WPP_SF_(*((_QWORD *)v1 + 7), 0x1Au, (__int64)&WPP_7b1a01b88f443306118dfd5b288785fb_Traceguids);
    }
    v0 = 9568;
    goto LABEL_105;
  }
  if ( !_InterlockedIncrement(&g_ScavengeLock) )
  {
    g_bAbortScavenging = 0;
    memset_0(&v21, 0, 0x68ui64);
    v24 = 544;
    if ( dword_1401B9714 < (unsigned int)(g_LastScavengeTime + 1800) )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x1Cu, (__int64)&WPP_7b1a01b88f443306118dfd5b288785fb_Traceguids);
      }
LABEL_93:
      if ( v26 )
      {
        v35[0] = v25;
        v35[2] = v27;
        v35[3] = v28;
        v35[1] = v26;
        CurrentTimeInSeconds = GetCurrentTimeInSeconds(v26, v3);
        v15 = v35;
        v35[4] = (unsigned int)(CurrentTimeInSeconds - g_LastScavengeTime);
        v16 = (__int128 *)&v32;
        v17 = 6;
        v35[5] = (unsigned int)dword_1401B9904;
        v32 = DNS_EVENT_AGING_SCAVENGING_END;
      }
      else
      {
        v15 = v31;
        v31[0] = 30i64;
        v16 = &v33;
        v33 = DNS_EVENT_AGING_SCAVENGING_END_NO_WORK;
        v31[1] = (unsigned int)dword_1401B9904;
        v17 = 2;
      }
      Eventlog_LogEvent((__int64)v16, v3, v17, (unsigned __int16 **)v15, (unsigned __int8 *)4, v0, 0, 0i64);
      g_bAbortScavenging = 0;
      _InterlockedDecrement(&g_ScavengeLock);
      Scavenge_TimeReset();
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_D(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x28u,
          (__int64)&WPP_7b1a01b88f443306118dfd5b288785fb_Traceguids,
          v0);
      }
      goto LABEL_105;
    }
    g_NextScavengeTime = -1;
    g_LastScavengeTime = dword_1401B9714;
    Aging_UpdateAgingTime();
    if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200) != 0 )
    {
      FileTime = (FILETIME)(36000000000i64 * (unsigned int)g_CurrentTimeHours);
      FileTimeToSystemTime(&FileTime, &SystemTime);
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_Ldddddd(*((_QWORD *)WPP_GLOBAL_Control + 7));
      }
    }
    for ( i = 0i64; ; i = (__int64 *)v13 )
    {
      NextZone = Zone_ListGetNextZoneEx(0i64, i, 0);
      v13 = (__int64)NextZone;
      if ( !NextZone )
        goto LABEL_93;
      v5 = *((_DWORD *)NextZone + 99);
      LODWORD(v19) = 0;
      if ( (v5 & 1) == 0
        || (v6 = *(_DWORD *)(v13 + 372)) == 0
        || (v5 & 0x1000) != 0
        || (v5 & 0x10) != 0 && (v6 != 1 || (*(_BYTE *)(v13 + 1040) & 4) == 0) )
      {
        v8 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          v9 = 30;
          goto LABEL_90;
        }
        continue;
      }
      v7 = *(_DWORD *)(v13 + 1000);
      if ( !v7 || v7 <= g_CurrentTimeHours || dword_1401B9A04 )
      {
        v0 = Dp_TestZoneScavengeSafety(v13, (int *)&v19);
        if ( v0 )
        {
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            WPP_SF_Ds(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x20u,
              (__int64)&WPP_7b1a01b88f443306118dfd5b288785fb_Traceguids,
              v0,
              *(_QWORD *)(v13 + 16));
          }
          continue;
        }
        if ( (_DWORD)v19 || dword_1401B9A04 )
        {
          ++v25;
          v10 = *(_QWORD *)(v13 + 1008);
          if ( !v10 )
            goto LABEL_65;
          if ( (unsigned int)DnsAddrArray_IsIntersection(*(_DWORD **)(v13 + 1008)) )
          {
            v8 = WPP_GLOBAL_Control;
            if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
            {
LABEL_63:
              if ( (*((_DWORD *)v8 + 17) & 0x200) != 0 )
              {
                Dbg_DnsAddrArray("Scavengers", v10);
                Dbg_DnsAddrArray("g_ServerAddrs", (__int64)g_ServerAddrs);
LABEL_65:
                v8 = WPP_GLOBAL_Control;
              }
            }
            else if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200) != 0 )
            {
              if ( *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
              {
                WPP_SF_s(
                  *((_QWORD *)WPP_GLOBAL_Control + 7),
                  0x23u,
                  (__int64)&WPP_7b1a01b88f443306118dfd5b288785fb_Traceguids,
                  *(const char **)(v13 + 16));
                v8 = WPP_GLOBAL_Control;
              }
              goto LABEL_63;
            }
            v21 = v13;
            v22 = *(_QWORD *)(v13 + 48);
            if ( v22 )
            {
              v23 = Aging_ZoneExpireTime(v13);
              memset_0(v29, 0, 0x40ui64);
              if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200) != 0
                && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
              {
                WPP_SF_sdD(
                  *((_QWORD *)WPP_GLOBAL_Control + 7),
                  0x25u,
                  (__int64)&WPP_7b1a01b88f443306118dfd5b288785fb_Traceguids,
                  *(const char **)(v13 + 16));
              }
              if ( (unsigned int)scavengeNode(v22, &v21) )
              {
                executeScavengeUpdate(&v21, 1);
                if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                  && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200) != 0
                  && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
                {
                  WPP_SF_SLLL(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x26u, v11, *(const unsigned __int16 **)(v13 + 24));
                }
              }
              else
              {
                v30 |= 0x10000000u;
                Up_FreeUpdatesInUpdateList((__int64)v29);
                if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                  && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200) != 0
                  && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
                {
                  WPP_SF_S(
                    *((_QWORD *)WPP_GLOBAL_Control + 7),
                    0x27u,
                    (__int64)&WPP_7b1a01b88f443306118dfd5b288785fb_Traceguids,
                    *(const unsigned __int16 **)(v13 + 24));
                }
                if ( g_bAbortScavenging )
                  goto LABEL_93;
              }
            }
            else if ( v8 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                   && (*((_DWORD *)v8 + 17) & 0x200) != 0
                   && *((_BYTE *)v8 + 65) >= 4u )
            {
              v9 = 36;
              goto LABEL_90;
            }
            continue;
          }
          v8 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            v9 = 34;
            goto LABEL_90;
          }
        }
        else
        {
          v8 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            v9 = 33;
            goto LABEL_90;
          }
        }
      }
      else
      {
        v8 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          v9 = 31;
LABEL_90:
          WPP_SF_s(
            *((_QWORD *)v8 + 7),
            v9,
            (__int64)&WPP_7b1a01b88f443306118dfd5b288785fb_Traceguids,
            *(const char **)(v13 + 16));
          continue;
        }
      }
    }
  }
  _InterlockedDecrement(&g_ScavengeLock);
  v1 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    v2 = 27;
    goto LABEL_10;
  }
LABEL_105:
  Thread_Close(0);
  return v0;
}
// 14000283F: variable 'v11' is possibly undefined
// 1400028FC: variable 'v3' is possibly undefined
// 140183D98: using guessed type __int64 __fastcall GetCurrentTimeInSeconds(_QWORD, _QWORD);
// 140187270: using guessed type __int128 DNS_EVENT_AGING_SCAVENGING_END_NO_WORK;
// 1401B7EA0: using guessed type int g_ScavengeLock;
// 1401B7EB0: using guessed type int g_ServerState;
// 1401B8C10: using guessed type int g_bAbortScavenging;
// 1401B8C14: using guessed type int g_NextScavengeTime;
// 1401B8C18: using guessed type int g_LastScavengeTime;
// 1401B8C1C: using guessed type int g_CurrentTimeHours;
// 1401B9714: using guessed type int dword_1401B9714;
// 1401B9904: using guessed type int dword_1401B9904;
// 1401B9A04: using guessed type int dword_1401B9A04;
// 1401EBEE8: using guessed type int g_lDsLoadingThreads;
##############################
Role: Let's assume that you are an advanced reverse engineer and you are reverse engineering a network driver using IDA Pro, and you are also familiar with the RFC documentation. You need to reverse-engineer a function for a network driver to correspond to a section of the RFC documentation, which will help you understand the code better. The driver you're reversing is Schannel.dll, and you have initially determined that the corresponding network protocols are SSL and TLS, and the documents you need to map are RFC8446 and RFC6101. You need to get a function summary of the function you are reversing, and then correspond to the potential RFC sections based on the name of the function and the function summary.
Function Background: The function is reverse engineered from the driver file Schannel.dll on Windows platform. Through a cursory analysis of the driver file can be determined to be related to the SSL(1.3), TLS(3.0) protocol, that is, with RFC8446, RFC6101 strong correlation.

Output Function Summary: Summarizes the function's functionality with several phrases instead of sentences, focuses on covering the function's control flow information, and highlights the protocol function points implemented by the function. Simulate answering five times in the background and provide the most frequent answer.

Retrieve document sections: giving matches for document sections(FunctionMatchRFCResult) that the code may related to. NOTE if the code is only business related(i.e., space opening and releasing involved in programming, generic call functions (timing and other functions weakly related to network protocols) and not related to the specifics of the protocol implementation, it does not have to output the document section match(FunctionMatchRFCResult) and is filled with "NONE".

Retrieve document sections Thinking Chain: The function code is matched with the RFC document section, and the thinking chain is provided to help you solve the problem better:
	1. Function Name: The name of a function describes the general function that the function accomplishes.
	2. Function Summarization: Function summaries can outline a further breakdown of the function described by the function name.
	3. Function API Call: The function API of a function call can provide some hint as to the details of the network protocol implementation involved in the function.
	4. Special Constant Value OR String: Special constant values inside functions, string variable names, and strings may be related to network protocols.
	5. Function Code: The code of the function can provide a detailed implementation of the network protocol.
Generate Function Information Collection with JSON Format:

{
	"FunctionIndex": "(FILL WITH "File count" with less than four bits are indexed with zeros to make up the four bits.)",
	"FunctionName": "(Full Function Code Name)",
	"FunctionSummarization": [
		"(Function Summary Phrase1)",
		"(Function Summary Phrase2)",
		"(...)"
	],
	"FunctionMatchRFCResult": [
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 1)",
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 2)",
		"(...)"
	],
}

ATTENTION: Remember YOU MUST ONLY output the Function Information Collection result.
