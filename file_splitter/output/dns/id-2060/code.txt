Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 2060
// Total lines: 602

//----- (0000000140101010) ----------------------------------------------------
__int64 __fastcall Rpc_ModifyZoneSKD(
        __int64 a1,
        __int64 a2,
        __int64 a3,
        __int64 a4,
        int a5,
        __int64 a6,
        _DWORD *a7,
        struct _DnssrvRpcSigningKeyDescriptor **a8)
{
  _DWORD *v8; // rax
  __int64 v9; // r14
  __int64 v10; // r12
  struct _dnsskd *v11; // rdi
  char v12; // bl
  CDnsClientSubnetRecordsTrie **v14; // rdx
  const char *v15; // r9
  __int64 v16; // rcx
  unsigned int v17; // esi
  __int64 v19; // rdx
  int v20; // eax
  struct _DnssrvRpcSigningKeyDescriptor *v21; // rax
  __int64 v22; // rcx
  char *v23; // rax
  _DWORD *Skd; // rax
  IID *v25; // rbx
  int Guid; // eax
  void *v27; // rax
  int v28; // edx
  int v29; // ecx
  int v30; // eax
  unsigned int v31; // eax
  CDnsClientSubnetRecordsTrie *v32; // rcx
  unsigned __int16 v33; // dx
  int v34; // r9d
  char *v35; // rax
  char *v36; // rax
  __int64 v37; // r8
  int v38; // eax
  __int16 v39; // cx
  _BYTE *i; // rax
  char *v41; // rax
  _QWORD *v42; // rax
  __int64 v43; // rbx
  char *v44; // rax
  _QWORD *ZoneSkdByGuid; // rbx
  unsigned int v46; // r9d
  unsigned int v47; // r8d
  int v48; // r8d
  int v49; // eax
  int v50; // eax
  int v51; // eax
  CDnsClientSubnetRecordsTrie *v52; // rcx
  unsigned __int16 v53; // dx
  char *v54; // rax
  _BYTE *j; // rax
  char v56; // [rsp+59h] [rbp-28h]
  char v57; // [rsp+5Ah] [rbp-27h]
  char v58; // [rsp+5Bh] [rbp-26h]
  __int128 v59; // [rsp+78h] [rbp-9h] BYREF

  v8 = a7;
  v9 = 0i64;
  v10 = 0i64;
  v11 = 0i64;
  v12 = 0;
  v58 = 0;
  v56 = 0;
  v57 = 0;
  v14 = &WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    if ( a3 )
      v15 = *(const char **)(a3 + 16);
    else
      v15 = 0i64;
    WPP_SF_s(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x4Du, (__int64)&WPP_fcf90f505e41335ad1a88e0d5ede2d0c_Traceguids, v15);
    v8 = a7;
  }
  *v8 = 0;
  *a8 = 0i64;
  if ( !a3 || a5 != 45 || !a6 )
  {
    v17 = 87;
    goto LABEL_190;
  }
  v16 = a3;
  if ( *(_QWORD *)(a3 + 328) )
    v16 = *(_QWORD *)(a3 + 328);
  if ( *(_QWORD *)(v16 + 200) )
  {
    v17 = 9553;
    goto LABEL_15;
  }
  v17 = RpcUtil_SwitchSecurityContext(0);
  if ( !v17 )
  {
    v58 = 1;
    v17 = Zone_LockForRPCSeqEx(a3, 0x2710u);
    if ( v17 )
    {
      v14 = &WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x10) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_s(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x4Eu,
          (__int64)&WPP_fcf90f505e41335ad1a88e0d5ede2d0c_Traceguids,
          *(const char **)(a3 + 16));
      }
      goto LABEL_190;
    }
    v57 = 1;
    v17 = Zone_LockForWriteEx(a3, 1, 0x2710u, (__int64)"ds\\dns\\server\\server\\olsrpc.cpp", 151);
    if ( v17 )
      goto LABEL_15;
    v56 = 1;
    if ( *(_DWORD *)(a3 + 372) != 1 )
    {
      v17 = 9611;
      goto LABEL_15;
    }
    if ( (*(_BYTE *)(a3 + 388) & 1) != 0 && (dword_1401B9750 || g_fDsReadOnlyDcMode)
      || (*(_BYTE *)(a3 + 1160) & 0x40) != 0 )
    {
      v17 = 9569;
      goto LABEL_15;
    }
    DnsOls_ResetZoneKeymasterFlagForZone(a3, v19, 1, 0, 0i64, 0i64, 0i64, 0i64, 0i64);
    if ( (*(_BYTE *)(a3 + 1040) & 2) == 0 )
    {
      v17 = 9101;
      goto LABEL_15;
    }
    v17 = ZoneScopes_LockAll(a3, 1, 10000, 0i64, 0i64);
    if ( v17 )
    {
      v14 = &WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x4Fu, (__int64)&WPP_fcf90f505e41335ad1a88e0d5ede2d0c_Traceguids);
      }
      goto LABEL_190;
    }
    v59 = 0ui64;
    if ( *(_OWORD *)(a6 + 8) == 0i64 )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x50u, (__int64)&WPP_fcf90f505e41335ad1a88e0d5ede2d0c_Traceguids);
      }
      if ( (unsigned __int64)DnsOls_CountSKDs(a3, 0, *(unsigned int *)(a6 + 36), *(_BYTE *)(a6 + 40)) >= 3 )
      {
        v17 = 9113;
        v14 = &WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
        {
          v20 = DnsOls_CountSKDs(a3, 0, *(unsigned int *)(a6 + 36), *(_BYTE *)(a6 + 40));
          WPP_SF_Ddd(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x51u,
            (__int64)&WPP_fcf90f505e41335ad1a88e0d5ede2d0c_Traceguids,
            v20);
          goto LABEL_59;
        }
        goto LABEL_60;
      }
      if ( !*(_QWORD *)(a6 + 24) )
      {
        v17 = 87;
        goto LABEL_60;
      }
      v22 = *(_QWORD *)(a3 + 1128);
      if ( *(_DWORD *)(a3 + 372) == 1 && (*(_BYTE *)(a3 + 1040) & 4) != 0 && v22 && *(_DWORD *)(v22 + 96) > 1u )
      {
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
        {
          v23 = Dbg_GuidString((const IID *)(v22 + 8));
          WPP_SF_S(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x52u,
            (__int64)&WPP_fcf90f505e41335ad1a88e0d5ede2d0c_Traceguids,
            (const unsigned __int16 *)v23);
        }
        v17 = 9116;
        goto LABEL_60;
      }
      Skd = Dns_AllocateSkd();
      v10 = (__int64)Skd;
      if ( !Skd )
        goto LABEL_78;
      v25 = (IID *)(Skd + 2);
      Guid = CoCreateGuid((GUID *)(Skd + 2));
      if ( Guid )
        v17 = GenerateGuid(v25, Guid);
      else
        v17 = 0;
      if ( v17 )
        goto LABEL_60;
      v27 = Dns_StringCopyAllocate(*(char **)(a6 + 24), 0, 1i64, 1);
      *(_QWORD *)(v10 + 24) = v27;
      if ( !v27 )
      {
LABEL_78:
        v17 = 14;
        goto LABEL_60;
      }
      *(_DWORD *)(v10 + 32) = *(_DWORD *)(a6 + 32);
      v28 = *(_DWORD *)(a6 + 36);
      *(_DWORD *)(v10 + 36) = v28;
      *(_BYTE *)(v10 + 40) = *(_BYTE *)(a6 + 40);
      *(_DWORD *)(v10 + 44) = *(_DWORD *)(a6 + 44);
      *(_DWORD *)(v10 + 48) = *(_DWORD *)(a6 + 48);
      *(_DWORD *)(v10 + 52) = *(_DWORD *)(a6 + 52);
      *(_DWORD *)(v10 + 56) = *(_DWORD *)(a6 + 56);
      *(_DWORD *)(v10 + 60) = *(_DWORD *)(a6 + 60);
      v29 = *(_DWORD *)(a6 + 68);
      *(_DWORD *)(v10 + 68) = v29;
      *(_DWORD *)(v10 + 72) = *(_DWORD *)(a6 + 72);
      *(_DWORD *)(v10 + 64) = v28 != 0;
      if ( !v29 )
        *(_DWORD *)(v10 + 68) = v28 != 0 ? 65232000 : 7776000;
      v30 = *(_DWORD *)(v10 + 72);
      if ( !v30 )
        v30 = 1;
      *(_DWORD *)(v10 + 72) = v30;
      v31 = DnsOls_ValidateSKD(a3, v10, 0);
      v17 = v31;
      if ( v31 )
      {
        v32 = WPP_GLOBAL_Control;
        v14 = &WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) == 0
          || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
        {
          goto LABEL_189;
        }
        v33 = 83;
        v34 = v31;
LABEL_93:
        WPP_SF_D(*((_QWORD *)v32 + 7), v33, (__int64)&WPP_fcf90f505e41335ad1a88e0d5ede2d0c_Traceguids, v34);
        goto LABEL_189;
      }
      v17 = DnsOls_AddSkdToZone(a3, v10);
      if ( v17 )
      {
        v14 = &WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
        {
          v35 = Dbg_GuidString(v25);
          WPP_SF_DSs(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x54u,
            (__int64)&WPP_fcf90f505e41335ad1a88e0d5ede2d0c_Traceguids,
            v17,
            (__int64)v35,
            *(_QWORD *)(a3 + 16));
        }
        goto LABEL_189;
      }
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        v36 = Dbg_GuidString(v25);
        WPP_SF_Ss(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x55u,
          (__int64)&WPP_fcf90f505e41335ad1a88e0d5ede2d0c_Traceguids,
          (const unsigned __int16 *)v36,
          *(_QWORD *)(a3 + 16));
      }
      v11 = (struct _dnsskd *)v10;
      v37 = v10;
      v10 = 0i64;
      v17 = DnsOls_WriteSkdToStorage(0, a3, v37, 0);
      if ( v17 )
      {
        v32 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) == 0
          || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
        {
          goto LABEL_189;
        }
        v33 = 86;
LABEL_108:
        v34 = v17;
        goto LABEL_93;
      }
      if ( *(_DWORD *)(a3 + 372) != 1 || (v38 = *(_DWORD *)(a3 + 1040), (v38 & 4) == 0) )
      {
        v12 = 1;
        goto LABEL_113;
      }
      *(_DWORD *)(a3 + 1040) = v38 | 8;
      DnsOls_MarkZoneForResign(a3, 1);
      PersistZoneResignSchedule(a3, 0);
    }
    else
    {
      for ( i = (_BYTE *)(a6 + 24); (unsigned __int64)i < a6 + 80; ++i )
      {
        if ( *i )
        {
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            v44 = Dbg_GuidString((const IID *)(a6 + 8));
            WPP_SF_S(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x5Cu,
              (__int64)&WPP_fcf90f505e41335ad1a88e0d5ede2d0c_Traceguids,
              (const unsigned __int16 *)v44);
          }
          ZoneSkdByGuid = DnsOls_FindZoneSkdByGuid(a3, (const IID *)(a6 + 8));
          if ( ZoneSkdByGuid )
          {
            v46 = *(_DWORD *)(a6 + 52);
            LODWORD(v14) = 21598;
            if ( v46 - 1 <= 0x545E || v46 >= 0x278D01 )
            {
              v52 = WPP_GLOBAL_Control;
              if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) == 0
                || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
              {
                goto LABEL_174;
              }
              v53 = 93;
            }
            else
            {
              v46 = *(_DWORD *)(a6 + 56);
              if ( v46 - 1 > 0x545E && v46 < 0x278D01 )
              {
                v46 = *(_DWORD *)(a6 + 60);
                if ( v46 - 1 > 0x545E && v46 < 0x278D01 )
                {
                  v47 = *(_DWORD *)(a6 + 72);
                  if ( !v47 || v47 == *((_DWORD *)ZoneSkdByGuid + 18) )
                    goto LABEL_141;
                  v17 = setRolloverAction((struct _zone_info *)a3, (struct _dnsskd *)ZoneSkdByGuid, v47);
                  if ( v17 )
                    goto LABEL_60;
                  LODWORD(v11) = 1;
                  if ( *(_DWORD *)(a6 + 72) == 3 )
                  {
                    v59 = DNS_EVENT_KEY_RETIRAL;
                    LogDnssecKeyRollover(&v59, a3, (__int64)ZoneSkdByGuid, 0i64);
                  }
LABEL_141:
                  v48 = *(_DWORD *)(a6 + 68);
                  if ( v48 && v48 != *((_DWORD *)ZoneSkdByGuid + 17) )
                  {
                    v17 = setRolloverPeriod((struct _zone_info *)a3, (struct _dnsskd *)ZoneSkdByGuid, v48);
                    if ( !v17 )
                    {
                      LODWORD(v11) = 1;
                      goto LABEL_145;
                    }
LABEL_59:
                    v11 = 0i64;
LABEL_60:
                    ZoneScopes_UnLockAll(a3, (unsigned int)v14, 0i64);
LABEL_61:
                    if ( !v17 )
                      DnsOls_SetZoneSigRefreshTime(a3, 1);
                    if ( v11 )
                    {
                      v21 = Rpc_AllocateSkd(v11);
                      if ( v21 )
                      {
                        *a7 = 45;
                        *a8 = v21;
                      }
                    }
                    goto LABEL_15;
                  }
LABEL_145:
                  v49 = *(_DWORD *)(a6 + 52);
                  if ( v49 && v49 != *((_DWORD *)ZoneSkdByGuid + 13) )
                  {
                    *((_DWORD *)ZoneSkdByGuid + 13) = v49;
                    LODWORD(v11) = 1;
                  }
                  v50 = *(_DWORD *)(a6 + 56);
                  if ( v50 && v50 != *((_DWORD *)ZoneSkdByGuid + 14) )
                  {
                    *((_DWORD *)ZoneSkdByGuid + 14) = v50;
                    LODWORD(v11) = 1;
                  }
                  v51 = *(_DWORD *)(a6 + 60);
                  if ( v51 && v51 != *((_DWORD *)ZoneSkdByGuid + 15) )
                  {
                    *((_DWORD *)ZoneSkdByGuid + 15) = v51;
                    LODWORD(v11) = 1;
                  }
                  if ( (_DWORD)v11 )
                  {
                    v17 = DnsOls_WriteSkdToStorage(0, a3, (__int64)ZoneSkdByGuid, 0);
                    if ( v17 )
                    {
                      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                        && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
                        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
                      {
                        WPP_SF_D(
                          *((_QWORD *)WPP_GLOBAL_Control + 7),
                          0x60u,
                          (__int64)&WPP_fcf90f505e41335ad1a88e0d5ede2d0c_Traceguids,
                          v17);
                      }
                    }
                  }
                  v11 = (struct _dnsskd *)ZoneSkdByGuid;
LABEL_189:
                  v12 = 1;
LABEL_190:
                  if ( !v17 )
                  {
LABEL_113:
                    v59 = 0ui64;
                    if ( *(_OWORD *)(a6 + 8) == 0i64 )
                    {
                      v39 = 569;
                    }
                    else
                    {
                      for ( j = (_BYTE *)(a6 + 24); ; ++j )
                      {
                        if ( (unsigned __int64)j >= a6 + 80 )
                        {
                          v39 = 571;
                          goto LABEL_208;
                        }
                        if ( *j )
                          break;
                      }
                      v39 = 570;
                    }
LABEL_208:
                    LogSKDEvent(v39, a3, (__int64)v11);
                  }
                  if ( v12 )
                    goto LABEL_60;
                  goto LABEL_61;
                }
                v52 = WPP_GLOBAL_Control;
                if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                  && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
                  && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
                {
                  v53 = 95;
                  goto LABEL_173;
                }
LABEL_174:
                v17 = 9123;
                goto LABEL_60;
              }
              v52 = WPP_GLOBAL_Control;
              if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) == 0
                || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
              {
                goto LABEL_174;
              }
              v53 = 94;
            }
LABEL_173:
            WPP_SF_D(*((_QWORD *)v52 + 7), v53, (__int64)&WPP_fcf90f505e41335ad1a88e0d5ede2d0c_Traceguids, v46);
            goto LABEL_174;
          }
LABEL_124:
          v17 = 1168;
          goto LABEL_60;
        }
      }
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        v41 = Dbg_GuidString((const IID *)(a6 + 8));
        WPP_SF_S(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x57u,
          (__int64)&WPP_fcf90f505e41335ad1a88e0d5ede2d0c_Traceguids,
          (const unsigned __int16 *)v41);
      }
      v42 = DnsOls_FindZoneSkdByGuid(a3, (const IID *)(a6 + 8));
      v43 = (__int64)v42;
      if ( !v42 )
        goto LABEL_124;
      if ( *((_DWORD *)v42 + 23) != 1 && *(_DWORD *)(a3 + 372) == 1 && (*(_BYTE *)(a3 + 1040) & 4) != 0 )
      {
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
        {
          v54 = Dbg_GuidString((const IID *)(v42 + 1));
          WPP_SF_SD(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x58u,
            (__int64)&WPP_fcf90f505e41335ad1a88e0d5ede2d0c_Traceguids,
            (const unsigned __int16 *)v54);
        }
        v17 = 9119;
        goto LABEL_59;
      }
      v17 = DnsOls_RemoveSkdFromZone(a3, v42);
      if ( v17 )
      {
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
        {
          WPP_SF_Dqs(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x59u,
            (__int64)&WPP_fcf90f505e41335ad1a88e0d5ede2d0c_Traceguids,
            v17,
            v43,
            *(_QWORD *)(a3 + 16));
        }
        v11 = 0i64;
        goto LABEL_189;
      }
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_qs(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x5Au,
          (__int64)&WPP_fcf90f505e41335ad1a88e0d5ede2d0c_Traceguids,
          v43,
          *(_QWORD *)(a3 + 16));
      }
      v11 = (struct _dnsskd *)v43;
      v10 = v43;
      v17 = DnsOls_WriteSkdToStorage(0, a3, v43, 1);
      if ( v17 )
      {
        v32 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) == 0
          || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
        {
          goto LABEL_189;
        }
        v33 = 91;
        goto LABEL_108;
      }
    }
    v12 = 1;
    goto LABEL_113;
  }
LABEL_15:
  Dns_FreeSkd(v10);
  if ( v56 )
    Zone_UnlockAfterWriteEx(a3, 1, (__int64)"ds\\dns\\server\\server\\olsrpc.cpp", 218);
  if ( v57 )
    Lock_ReleaseWrite(*(_QWORD *)(a3 + 312));
  if ( v58 )
    RpcUtil_SwitchSecurityContext(1);
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    if ( a3 )
      v9 = *(_QWORD *)(a3 + 16);
    WPP_SF_Dsq(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x61u,
      (__int64)&WPP_fcf90f505e41335ad1a88e0d5ede2d0c_Traceguids,
      v17,
      v9);
  }
  return v17;
}
// 1401012D1: variable 'v19' is possibly undefined
// 14010143D: variable 'v14' is possibly undefined
// 1401861E8: using guessed type __int128 DNS_EVENT_KEY_RETIRAL;
// 1401B8C94: using guessed type int g_fDsReadOnlyDcMode;
// 1401B9750: using guessed type int dword_1401B9750;
