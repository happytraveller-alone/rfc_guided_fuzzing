Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 1687
// Total lines: 280

//----- (00000001400D7B60) ----------------------------------------------------
__int64 __fastcall IsValidScopeName(WCHAR *lpString1, __int64 a2, int a3)
{
  int v6; // r9d
  unsigned int v7; // ebx
  CDnsClientSubnetRecordsTrie *v8; // rcx
  unsigned __int16 v9; // dx
  CDnsClientSubnetRecordsTrie *v10; // rcx
  unsigned __int16 v11; // dx
  const wchar_t *v12; // r13
  _QWORD *v13; // rax
  DWORD LastError; // eax
  unsigned int v15; // eax
  CDnsClientSubnetRecordsTrie *v16; // rcx
  unsigned __int16 v17; // dx
  int v18; // r9d
  __int64 v19; // r12
  void *v20; // rdx
  unsigned __int64 v21; // r13
  void *v22; // rax
  wchar_t *v23; // rax
  wchar_t *v24; // r15
  DWORD v25; // eax
  const char *v26; // rax
  wchar_t *v27; // rcx
  __int64 v28; // rax
  unsigned __int64 i; // rax
  unsigned int v31; // [rsp+30h] [rbp-D0h]
  const void *v32; // [rsp+38h] [rbp-C8h]
  _QWORD *v33; // [rsp+40h] [rbp-C0h]
  char v34[8]; // [rsp+50h] [rbp-B0h] BYREF
  void *Src; // [rsp+58h] [rbp-A8h]
  int v36; // [rsp+60h] [rbp-A0h]
  int v37; // [rsp+64h] [rbp-9Ch]
  __int64 v38[46]; // [rsp+140h] [rbp+40h] BYREF
  CHAR v39[64]; // [rsp+2B0h] [rbp+1B0h] BYREF

  memset_0(v39, 0, sizeof(v39));
  v31 = 2;
  memset_0(v34, 0, 0xE8ui64);
  if ( !a3 )
  {
    if ( !lpString1 || !a2 )
    {
      v6 = 87;
      v7 = 87;
      v8 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        v9 = 132;
LABEL_8:
        WPP_SF_D(*((_QWORD *)v8 + 7), v9, (__int64)&WPP_5efa35e0870730ffd13051b9da022308_Traceguids, v6);
        return v7;
      }
      return v7;
    }
LABEL_15:
    if ( !*lpString1 )
    {
      v7 = a3 != 0 ? 9958 : 9954;
      v10 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
      {
        return v7;
      }
      v11 = 134;
      goto LABEL_20;
    }
    v12 = L".";
    if ( !a3
      && !*(_DWORD *)(a2 + 372)
      && (!(unsigned int)wcsicmp_ThatWorks(lpString1, L"..Cache") || !(unsigned int)wcsicmp_ThatWorks(lpString1, L".")) )
    {
      v7 = 9953;
      v10 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
      {
        return v7;
      }
      v11 = 135;
LABEL_20:
      WPP_SF_(*((_QWORD *)v10 + 7), v11, (__int64)&WPP_5efa35e0870730ffd13051b9da022308_Traceguids);
      return v7;
    }
    v13 = Dns_StringCopyAllocate((char *)lpString1, 0, 1i64, 2);
    v33 = v13;
    if ( !v13 )
    {
      LastError = GetLastError();
      v7 = LastError;
      v8 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        v9 = 136;
        v6 = LastError;
        goto LABEL_8;
      }
      return v7;
    }
    Src = v13;
    if ( a2 )
      v36 = *(_DWORD *)(a2 + 372);
    else
      v36 = 1;
    if ( a2 )
      v37 = *(_BYTE *)(a2 + 392) & 3;
    else
      v37 = 1;
    v15 = validateRPCZoneName((__int64)v34, 0i64, 0);
    v7 = v15;
    if ( v15 )
    {
      if ( v15 == 123 )
        v7 = a3 != 0 ? 9958 : 9954;
      v16 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
      {
        goto LABEL_94;
      }
      v17 = 137;
      v18 = v7;
    }
    else
    {
      if ( !(unsigned int)Name_ConvertDottedNameToLookupName((char *)Src, 0, (unsigned __int16 *)v38) )
      {
        v7 = a3 != 0 ? 9958 : 9954;
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
        {
          WPP_SF_SD(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x8Au,
            (__int64)&WPP_5efa35e0870730ffd13051b9da022308_Traceguids,
            lpString1);
        }
        goto LABEL_94;
      }
      if ( a2 && *(_DWORD *)(a2 + 372) == 1 || a3 == 1 )
        v31 = dword_1401B9854;
      v19 = LOWORD(v38[0]);
      if ( LOWORD(v38[0]) )
      {
        while ( 1 )
        {
          v20 = (void *)v38[v19--];
          v32 = v20;
          v21 = *((unsigned __int8 *)&v38[41] + v19);
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
          {
            v22 = FormatLabelA(*((unsigned __int8 *)&v38[41] + v19), v20);
            WPP_SF_Ds(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x8Bu,
              (__int64)&WPP_5efa35e0870730ffd13051b9da022308_Traceguids,
              v21,
              (__int64)v22);
            v20 = (void *)v38[v19 + 1];
          }
          if ( (unsigned int)Dns_DowncaseNameLabel(v39, (unsigned __int8 *)v20, v21, (const char *)v31) == -1 )
            break;
          if ( !v19 )
          {
            v12 = L".";
            goto LABEL_65;
          }
        }
        v7 = a3 != 0 ? 9958 : 9954;
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
        {
          v26 = (const char *)FormatLabelA(v21, v32);
          WPP_SF_sSD(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x8Cu,
            (__int64)&WPP_5efa35e0870730ffd13051b9da022308_Traceguids,
            v26,
            (__int64)lpString1);
        }
        goto LABEL_94;
      }
LABEL_65:
      v23 = (wchar_t *)Dns_StringCopyAllocate((char *)lpString1, 0, 1i64, 1);
      v24 = v23;
      if ( v23 )
      {
        v27 = v23;
        v28 = 2147483646i64;
        do
        {
          if ( !*v27 )
            break;
          ++v27;
          --v28;
        }
        while ( v28 );
        if ( v28 )
        {
          for ( i = (unsigned __int64)(2 * (2147483646 - v28)) >> 1; i > 1 && v24[i - 1] == 46; v24[i] = 0 )
            --i;
          if ( a2 )
            v12 = *(const wchar_t **)(a2 + 24);
          if ( !_wcsicmp(v24, v12) )
          {
            v7 = a3 != 0 ? 9960 : 9953;
            if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
              && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
            {
              WPP_SF_(
                *((_QWORD *)WPP_GLOBAL_Control + 7),
                0x8Fu,
                (__int64)&WPP_5efa35e0870730ffd13051b9da022308_Traceguids);
            }
          }
        }
        else
        {
          v7 = 87;
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
          {
            WPP_SF_D(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x8Eu,
              (__int64)&WPP_5efa35e0870730ffd13051b9da022308_Traceguids,
              87);
          }
        }
        Mem_Free(v24, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\zonerpc.c", 8587);
        goto LABEL_94;
      }
      v25 = GetLastError();
      v7 = v25;
      v16 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
      {
LABEL_94:
        Mem_Free(v33, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\zonerpc.c", 8592);
        return v7;
      }
      v17 = 141;
      v18 = v25;
    }
    WPP_SF_D(*((_QWORD *)v16 + 7), v17, (__int64)&WPP_5efa35e0870730ffd13051b9da022308_Traceguids, v18);
    goto LABEL_94;
  }
  if ( a3 != 1 || lpString1 )
    goto LABEL_15;
  v6 = 87;
  v7 = 87;
  v8 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
  {
    v9 = 133;
    goto LABEL_8;
  }
  return v7;
}
// 1401B9854: using guessed type int dword_1401B9854;
// 1400D7B60: using guessed type char var_2E0[8];
