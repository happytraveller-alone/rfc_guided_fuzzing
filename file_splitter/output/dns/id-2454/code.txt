Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 2454
// Total lines: 138

//----- (000000014012A050) ----------------------------------------------------
__int64 __fastcall std::basic_stringbuf<unsigned short>::overflow(__int64 a1, unsigned __int16 a2)
{
  unsigned __int64 *v4; // r9
  unsigned __int64 v5; // rdx
  unsigned __int64 v6; // r8
  __int64 v7; // rcx
  __int64 result; // rax
  unsigned __int64 v9; // rdx
  int *v10; // r8
  __int64 v11; // r9
  unsigned __int64 v12; // rsi
  unsigned __int64 v13; // rax
  unsigned __int64 v14; // r14
  __int64 v15; // rdi
  const void **v16; // rax
  void *v17; // r15
  __int64 *v18; // rax
  bool v19; // zf
  __int64 *v20; // rax
  __int64 v21; // rdx
  __int64 v22; // r8
  __int64 v23; // rcx
  __int64 v24; // rdx
  _DWORD *v25; // rax
  _WORD **v26; // rcx
  unsigned __int16 *v27; // rdx
  char pExceptionObject[56]; // [rsp+20h] [rbp-38h] BYREF

  if ( (*(_BYTE *)(a1 + 120) & 8) != 0 )
  {
    v4 = *(unsigned __int64 **)(a1 + 72);
    v5 = *v4;
    if ( *v4 )
    {
      v6 = *(_QWORD *)(a1 + 112);
      if ( v5 < v6 )
      {
        v7 = **(int **)(a1 + 96);
        *v4 = v6;
        **(_DWORD **)(a1 + 96) = (__int64)(v5 + 2 * v7 - v6) >> 1;
      }
    }
  }
  if ( a2 == 0xFFFF )
    return 0i64;
  v9 = **(_QWORD **)(a1 + 72);
  if ( !v9 || (v10 = *(int **)(a1 + 96), v11 = *v10, v9 >= v9 + 2 * v11) )
  {
    if ( (*(_BYTE *)(a1 + 120) & 2) != 0 )
      return 0xFFFFi64;
    if ( v9 )
      v12 = (__int64)(v9 + 2i64 * **(int **)(a1 + 96) - **(_QWORD **)(a1 + 32)) >> 1;
    else
      v12 = 0i64;
    v13 = 32i64;
    if ( v12 >> 1 < 0x20 || (v13 = v12 >> 1) != 0 )
    {
      do
      {
        if ( 0x7FFFFFFF - v13 >= v12 )
          break;
        v13 >>= 1;
      }
      while ( v13 );
    }
    if ( !v13 )
      return 0xFFFFi64;
    v14 = v13 + v12;
    v15 = 0i64;
    if ( v13 + v12 )
    {
      if ( v14 > 0x7FFFFFFFFFFFFFFFi64 || (v15 = (__int64)operator new(2 * v14)) == 0 )
      {
        std::bad_alloc::bad_alloc((std::bad_alloc *)pExceptionObject, 0i64);
        CxxThrowException_0(pExceptionObject, (_ThrowInfo *)&TI2_AVbad_alloc_std__);
      }
    }
    v16 = *(const void ***)(a1 + 32);
    v17 = (void *)*v16;
    if ( v12 )
    {
      memcpy_0((void *)v15, *v16, 2 * v12);
      *(_QWORD *)(a1 + 112) = v15 + 2 * ((__int64)(*(_QWORD *)(a1 + 112) - (_QWORD)v17) >> 1);
      v21 = v15 + 2 * ((__int64)(**(_QWORD **)(a1 + 72) - (_QWORD)v17) >> 1);
      **(_QWORD **)(a1 + 40) = v15 + 2 * ((__int64)(**(_QWORD **)(a1 + 40) - (_QWORD)v17) >> 1);
      **(_QWORD **)(a1 + 72) = v21;
      **(_DWORD **)(a1 + 96) = (__int64)(v15 + 2 * v14 - v21) >> 1;
      if ( (*(_BYTE *)(a1 + 120) & 4) == 0 )
      {
        v22 = **(_QWORD **)(a1 + 72);
        v23 = (__int64)(**(_QWORD **)(a1 + 64) - (_QWORD)v17) >> 1;
        **(_QWORD **)(a1 + 32) = v15;
        v24 = v15 + 2 * v23;
        **(_QWORD **)(a1 + 64) = v24;
        **(_DWORD **)(a1 + 88) = (v22 - v24 + 2) >> 1;
        goto LABEL_31;
      }
      **(_QWORD **)(a1 + 32) = v15;
      v20 = *(__int64 **)(a1 + 64);
    }
    else
    {
      v18 = *(__int64 **)(a1 + 40);
      *(_QWORD *)(a1 + 112) = v15;
      *v18 = v15;
      **(_QWORD **)(a1 + 72) = v15;
      **(_DWORD **)(a1 + 96) = (__int64)(2 * v14) >> 1;
      v19 = (*(_BYTE *)(a1 + 120) & 4) == 0;
      **(_QWORD **)(a1 + 32) = v15;
      v20 = *(__int64 **)(a1 + 64);
      if ( v19 )
      {
        *v20 = v15;
        **(_DWORD **)(a1 + 88) = 1;
LABEL_31:
        if ( (*(_BYTE *)(a1 + 120) & 1) != 0 )
          operator delete(v17);
        v25 = *(_DWORD **)(a1 + 96);
        *(_DWORD *)(a1 + 120) |= 1u;
        --*v25;
        goto LABEL_34;
      }
    }
    *v20 = 0i64;
    **(_DWORD **)(a1 + 88) = v15 >> 1;
    goto LABEL_31;
  }
  *v10 = v11 - 1;
LABEL_34:
  v26 = *(_WORD ***)(a1 + 72);
  v27 = (*v26)++;
  result = a2;
  *v27 = a2;
  return result;
}
// 14012A19C: conditional instruction was optimized away because rsi.8!=0
// 140184CA8: using guessed type void __stdcall operator delete(void *);
