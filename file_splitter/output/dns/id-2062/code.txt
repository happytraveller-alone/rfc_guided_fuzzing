Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 2062
// Total lines: 166

//----- (0000000140101F10) ----------------------------------------------------
__int64 __fastcall Rpc_PerformZoneKeyRollover(__int64 a1, __int64 a2, __int64 a3, __int64 a4, int a5, LPCOLESTR lpsz)
{
  __int64 v6; // rbx
  CDnsClientSubnetRecordsTrie *v8; // r10
  const char *v9; // r9
  unsigned int v10; // edi
  __int64 v11; // rcx
  __int64 v12; // rdx
  int v13; // eax
  int v14; // eax
  _QWORD *ZoneSkdByGuid; // rax
  __int64 v16; // rbp
  int v17; // eax
  __int64 v18; // rax
  char *v19; // rax
  const EVENT_DESCRIPTOR *v20; // rdx
  __int128 v22; // [rsp+50h] [rbp-48h] BYREF
  GUID pclsid; // [rsp+60h] [rbp-38h] BYREF

  v6 = 0i64;
  pclsid.Data1 = 0;
  *(_QWORD *)&pclsid.Data2 = 0i64;
  *(_DWORD *)&pclsid.Data4[4] = 0;
  v8 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    if ( a3 )
      v9 = *(const char **)(a3 + 16);
    else
      v9 = 0i64;
    WPP_SF_sS(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x68u,
      (__int64)&WPP_fcf90f505e41335ad1a88e0d5ede2d0c_Traceguids,
      v9,
      (__int64)lpsz);
    v8 = WPP_GLOBAL_Control;
  }
  if ( a3 )
  {
    v11 = a3;
    if ( *(_QWORD *)(a3 + 328) )
      v11 = *(_QWORD *)(a3 + 328);
    if ( *(_QWORD *)(v11 + 200) )
    {
      v10 = 9553;
      goto LABEL_48;
    }
    v10 = Zone_LockForRPCSeqEx(a3, 0x2710u);
    if ( v10 )
    {
LABEL_47:
      v8 = WPP_GLOBAL_Control;
      goto LABEL_48;
    }
    v10 = Zone_LockForWriteEx(a3, 1, 0x2710u, (__int64)"ds\\dns\\server\\server\\olsrpc.cpp", 238);
    if ( v10 )
    {
LABEL_46:
      Lock_ReleaseWrite(*(_QWORD *)(a3 + 312));
      goto LABEL_47;
    }
    if ( *(_DWORD *)(a3 + 372) != 1 )
    {
      v10 = 9611;
LABEL_45:
      Zone_UnlockAfterWriteEx(a3, 1, (__int64)"ds\\dns\\server\\server\\olsrpc.cpp", 111);
      goto LABEL_46;
    }
    DnsOls_ResetZoneKeymasterFlagForZone(a3, v12, 1, 0, 0i64, 0i64, 0i64, 0i64, 0i64);
    v13 = *(_DWORD *)(a3 + 1040);
    if ( (v13 & 2) == 0 )
    {
      v10 = 9101;
      goto LABEL_45;
    }
    if ( (v13 & 4) == 0 )
    {
      v10 = 9121;
      goto LABEL_45;
    }
    if ( a5 != 3 || !lpsz )
    {
      v10 = 87;
      goto LABEL_45;
    }
    v14 = CLSIDFromString(lpsz, &pclsid);
    if ( v14 )
      v10 = GuidFromString((__int64)lpsz, v14);
    else
      v10 = 0;
    if ( v10 )
      goto LABEL_45;
    ZoneSkdByGuid = DnsOls_FindZoneSkdByGuid(a3, &pclsid);
    v16 = (__int64)ZoneSkdByGuid;
    if ( !ZoneSkdByGuid )
    {
      v10 = 1168;
      goto LABEL_45;
    }
    v17 = *((_DWORD *)ZoneSkdByGuid + 24);
    if ( v17 == 1 )
    {
      v10 = 9120;
      goto LABEL_45;
    }
    if ( (unsigned int)(v17 - 2) <= 6 )
    {
      v10 = 9116;
      goto LABEL_45;
    }
    v18 = *(_QWORD *)(a3 + 1128);
    if ( !v18 || *(_DWORD *)(v18 + 96) < 2u )
    {
      *(_QWORD *)(a3 + 1128) = 0i64;
      *(_QWORD *)(a3 + 1116) = 0i64;
    }
    *(_DWORD *)(v16 + 96) = 1;
    if ( *(_DWORD *)(v16 + 36) )
    {
      if ( (dword_1401B9144 & 0x40) != 0 )
      {
        v19 = Dbg_GuidString((const IID *)(v16 + 8));
        v20 = (const EVENT_DESCRIPTOR *)&DNS_EVENT_NEXT_KSKROLLOVER_STAGE;
LABEL_42:
        Template_zzz(
          Microsoft_Windows_DNS_Server_ServiceHandle,
          v20,
          (const unsigned __int16 *)v19,
          *(const unsigned __int16 **)(a3 + 24),
          L"DNS_SKD_STATUS_QUEUED");
      }
    }
    else if ( (dword_1401B9144 & 0x40) != 0 )
    {
      v19 = Dbg_GuidString((const IID *)(v16 + 8));
      v20 = &DNS_EVENT_NEXT_ZSKROLLOVER_STAGE;
      goto LABEL_42;
    }
    GetSystemTimeAsFileTime((LPFILETIME)(v16 + 84));
    *(_DWORD *)(v16 + 104) = 1;
    DnsOls_WriteSkdToStorage(0x10000000, a3, v16, 0);
    v22 = DNS_EVENT_KEY_ROLLOVER_TRIGGERED;
    LogDnssecKeyRollover(&v22, a3, v16, 0i64);
    SetEvent(g_hOlsKeyRolloverEvent);
    goto LABEL_45;
  }
  v10 = 87;
LABEL_48:
  if ( v8 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)v8 + 68) & 4) != 0
    && *((_BYTE *)v8 + 65) >= 4u )
  {
    if ( a3 )
      v6 = *(_QWORD *)(a3 + 16);
    WPP_SF_Ds(*((_QWORD *)v8 + 7), 0x69u, (__int64)&WPP_fcf90f505e41335ad1a88e0d5ede2d0c_Traceguids, v10, v6);
  }
  return v10;
}
// 140102051: variable 'v12' is possibly undefined
// 140187070: using guessed type __int128 DNS_EVENT_KEY_ROLLOVER_TRIGGERED;
// 140187B50: using guessed type __int128 DNS_EVENT_NEXT_KSKROLLOVER_STAGE;
// 1401B9144: using guessed type int dword_1401B9144;
