Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 2632
// Total lines: 335

//----- (000000014013A3A0) ----------------------------------------------------
__int64 __fastcall MatchPolicyRecursion(struct _DNS_MSGINFO *a1, __int64 a2, __int64 *a3, __int64 a4)
{
  char v8; // si
  int v9; // r13d
  __int64 *v10; // r12
  __int64 result; // rax
  char *v12; // rax
  int v13; // r14d
  CDnsClientSubnetRecordsTrie *v14; // rcx
  unsigned __int16 v15; // dx
  unsigned int v16; // r9d
  const void **matched; // rcx
  __int64 v18; // rax
  __int64 v19; // r8
  const unsigned __int16 *v20; // r9
  int v21; // eax
  _QWORD *v22; // rax
  __int64 v23; // rdx
  __int64 v24; // r8
  _QWORD *v25; // rcx
  __int64 v26; // r8
  __int64 v27; // rcx
  bool v28; // dl
  __int64 v29; // rdx
  __int64 v30; // [rsp+20h] [rbp-E0h]
  unsigned int v31; // [rsp+40h] [rbp-C0h] BYREF
  unsigned int v32; // [rsp+44h] [rbp-BCh] BYREF
  const void **v33; // [rsp+48h] [rbp-B8h] BYREF
  __int64 v34; // [rsp+50h] [rbp-B0h] BYREF
  void *v35[3]; // [rsp+58h] [rbp-A8h] BYREF
  unsigned __int64 v36; // [rsp+70h] [rbp-90h]
  __int16 v37[184]; // [rsp+80h] [rbp-80h] BYREF

  v32 = 0;
  v31 = 0;
  v33 = 0i64;
  v8 = 0;
  memset_0(v37, 0, sizeof(v37));
  *(_DWORD *)(a4 + 512) = 1;
  v9 = 0;
  v34 = 0i64;
  v10 = (__int64 *)((char *)a1 + 3664);
  *((_QWORD *)a1 + 458) = 0i64;
  if ( dword_1401B991C )
    *((_BYTE *)a1 + 1417) = 1;
  if ( (*((_DWORD *)a1 + 1572) & 0x100) == 0 )
    *((_QWORD *)a1 + 461) = 0i64;
  wcscpy_s((wchar_t *)a4, 0xFFui64, L".");
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 7), 0xCCu, (__int64)&WPP_bbbcc621566c3408fe84d6a85874d543_Traceguids, a1);
  }
  if ( a2 )
  {
    if ( !(unsigned int)Name_ConvertPacketNameToLookupNameEx(
                          (__int64)a1,
                          (unsigned __int8 *)a1 + 6316,
                          (unsigned __int16 *)v37,
                          1) )
      return 9002i64;
  }
  else
  {
    Name_WriteLookupNameForNode(a3, (unsigned __int16 *)v37);
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      v12 = Dbg_LookupName((unsigned __int16 *)v37);
      WPP_SF_s(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0xCDu,
        (__int64)&WPP_bbbcc621566c3408fe84d6a85874d543_Traceguids,
        v12);
    }
  }
  result = (*(__int64 (__fastcall **)(struct CDnsPolicyManager *, __int64, _QWORD, __int64 *))(*(_QWORD *)g_DnsPolicyManager
                                                                                             + 40i64))(
             g_DnsPolicyManager,
             3i64,
             0i64,
             &v34);
  v31 = result;
  if ( (_DWORD)result )
  {
    v13 = 0;
    goto LABEL_101;
  }
  v13 = 1;
  result = (*(__int64 (__fastcall **)(struct CDnsPolicyManager *, struct _DNS_MSGINFO *, __int16 *, const void ***, int, _QWORD))(*(_QWORD *)g_DnsPolicyManager + 24i64))(
             g_DnsPolicyManager,
             a1,
             v37,
             &v33,
             3,
             0i64);
  v31 = result;
  if ( (_DWORD)result )
  {
    v14 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
    {
      goto LABEL_101;
    }
    v15 = 206;
    goto LABEL_22;
  }
  result = Policy_AcquireReadLock(&g_hServerLevelNegativePolicyLock, 0xFFFFFFFF);
  v31 = result;
  if ( (_DWORD)result )
  {
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
    {
      goto LABEL_101;
    }
    WPP_SF_D(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0xCFu,
      (__int64)&WPP_bbbcc621566c3408fe84d6a85874d543_Traceguids,
      result);
    goto LABEL_23;
  }
  v9 = 1;
  if ( v33 )
    v16 = *((_DWORD *)v33 + 26);
  else
    v16 = -1;
  matched = MatchNegativePolicies(a1, 0i64, 3i64, v16, &v31);
  result = v31;
  if ( matched )
  {
    v33 = matched;
    goto LABEL_40;
  }
  if ( !v31 )
  {
    matched = v33;
LABEL_40:
    if ( matched )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        v8 = 1;
        v18 = CDnsPolicy::Name(matched, (__int64)v35);
        v20 = (const unsigned __int16 *)v18;
        if ( *(_QWORD *)(v18 + 24) >= 8ui64 )
          v20 = *(const unsigned __int16 **)v18;
        WPP_SF_Sqdq(*((_QWORD *)WPP_GLOBAL_Control + 7), 0xD1u, v19, v20);
        matched = v33;
      }
      if ( (v8 & 1) != 0 )
      {
        v8 &= ~1u;
        if ( v36 >= 8 )
        {
          operator delete(v35[0]);
          matched = v33;
        }
      }
      v21 = *((_DWORD *)matched + 23);
      *(_DWORD *)(a4 + 512) = v21;
      if ( v21 == 1 )
      {
        CDnsPolicyContent::GetScope((CDnsPolicyContent *)matched[17], (unsigned __int16 *const)a4);
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          v8 |= 2u;
          v22 = (_QWORD *)CDnsPolicy::Name(v33, (__int64)v35);
          v25 = v22;
          if ( v22[3] >= 8ui64 )
            v25 = (_QWORD *)*v22;
          WPP_SF_qSqS(*((_QWORD *)WPP_GLOBAL_Control + 7), v23, v24, a1, v25, v33, a4);
        }
        if ( (v8 & 2) != 0 && v36 >= 8 )
          operator delete(v35[0]);
        matched = v33;
      }
      UpdatePolicyInMsg(a1, matched);
      v33 = 0i64;
      v32 = -1;
      releaseRead(g_hServerLevelNegativePolicyLock, &v32, 1);
      v9 = 0;
      (*(void (__fastcall **)(struct CDnsPolicyManager *, __int64))(*(_QWORD *)g_DnsPolicyManager + 48i64))(
        g_DnsPolicyManager,
        v34);
      v13 = 0;
      if ( *(_WORD *)a4 && (*(_WORD *)a4 != Source[0] || *(_WORD *)(a4 + 2) != Source[1]) )
      {
        result = LookUp_ServerScopeMap(
                   gServerScopeMap,
                   qword_1401C91E8,
                   v26,
                   0xFFFFFFFF,
                   (const unsigned __int16 *)a4,
                   (_QWORD *)a1 + 458);
        v31 = result;
        if ( (_DWORD)result )
        {
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
          {
            WPP_SF_SD(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0xD7u,
              (__int64)&WPP_bbbcc621566c3408fe84d6a85874d543_Traceguids,
              (const unsigned __int16 *)a4);
          }
          result = 9002i64;
          v31 = 9002;
        }
        else if ( *v10 )
        {
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            WPP_SF_S(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0xD6u,
              (__int64)&WPP_bbbcc621566c3408fe84d6a85874d543_Traceguids,
              (const unsigned __int16 *)a4);
            result = v31;
          }
          v27 = *v10;
          if ( dword_1401B991C )
          {
            v29 = *(_QWORD *)(v27 + 256);
            if ( (!v29 || !*(_DWORD *)(v29 + 4)) && !*(_DWORD *)(v27 + 296) )
              *((_BYTE *)a1 + 1417) = 0;
          }
          else
          {
            v28 = *(_DWORD *)(v27 + 296) && (*((_BYTE *)a1 + 6306) & 1) != 0;
            *((_BYTE *)a1 + 1417) = v28;
          }
          if ( (*((_DWORD *)a1 + 1572) & 0x100) == 0 )
            *((_QWORD *)a1 + 461) = v27;
        }
        else
        {
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
          {
            WPP_SF_S(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0xD5u,
              (__int64)&WPP_bbbcc621566c3408fe84d6a85874d543_Traceguids,
              (const unsigned __int16 *)a4);
          }
          *((_DWORD *)a1 + 1572) |= 0x20u;
          result = 9959i64;
          v31 = 9959;
        }
        goto LABEL_101;
      }
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0xD4u, (__int64)&WPP_bbbcc621566c3408fe84d6a85874d543_Traceguids);
      }
    }
    else
    {
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
      {
        goto LABEL_101;
      }
      LODWORD(v30) = *(_DWORD *)(a4 + 512);
      WPP_SF_qd(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0xD3u,
        (__int64)&WPP_bbbcc621566c3408fe84d6a85874d543_Traceguids,
        a1,
        v30);
    }
    goto LABEL_23;
  }
  v14 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) == 0
    || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
  {
    goto LABEL_101;
  }
  v15 = 208;
LABEL_22:
  WPP_SF_Dq(*((_QWORD *)v14 + 7), v15, (__int64)&WPP_bbbcc621566c3408fe84d6a85874d543_Traceguids, result);
LABEL_23:
  result = v31;
LABEL_101:
  *((_DWORD *)a1 + 1572) |= 0x100u;
  if ( v9 )
  {
    v32 = -1;
    releaseRead(g_hServerLevelNegativePolicyLock, &v32, 1);
    result = v31;
  }
  if ( v13 )
  {
    (*(void (__fastcall **)(struct CDnsPolicyManager *, __int64))(*(_QWORD *)g_DnsPolicyManager + 48i64))(
      g_DnsPolicyManager,
      v34);
    return v31;
  }
  return result;
}
// 14013A706: variable 'v19' is possibly undefined
// 14013A7AD: variable 'v23' is possibly undefined
// 14013A7AD: variable 'v24' is possibly undefined
// 14013A860: variable 'v26' is possibly undefined
// 14013AA1F: variable 'v30' is possibly undefined
// 140184CA8: using guessed type void __stdcall operator delete(void *);
// 140185140: using guessed type __int64 (__fastcall *_guard_dispatch_icall_fptr)(_QWORD, _QWORD);
// 1401B91C0: using guessed type struct CDnsPolicyManager *g_DnsPolicyManager;
// 1401B91C8: using guessed type __int64 g_hServerLevelNegativePolicyLock;
// 1401B991C: using guessed type int dword_1401B991C;
// 1401C91E0: using guessed type __int64 gServerScopeMap;
// 1401C91E8: using guessed type __int64 qword_1401C91E8;
// 14013A3A0: using guessed type unsigned __int16 var_1B0[184];
##############################
Role: Let's assume that you are an advanced reverse engineer and you are reverse engineering a network driver using IDA Pro, and you are also familiar with the RFC documentation. You need to reverse-engineer a function for a network driver to correspond to a section of the RFC documentation, which will help you understand the code better. The driver you're reversing is Schannel.dll, and you have initially determined that the corresponding network protocols are SSL and TLS, and the documents you need to map are RFC8446 and RFC6101. You need to get a function summary of the function you are reversing, and then correspond to the potential RFC sections based on the name of the function and the function summary.
Function Background: The function is reverse engineered from the driver file Schannel.dll on Windows platform. Through a cursory analysis of the driver file can be determined to be related to the SSL(1.3), TLS(3.0) protocol, that is, with RFC8446, RFC6101 strong correlation.

Output Function Summary: Summarizes the function's functionality with several phrases instead of sentences, focuses on covering the function's control flow information, and highlights the protocol function points implemented by the function. Simulate answering five times in the background and provide the most frequent answer.

Retrieve document sections: giving matches for document sections(FunctionMatchRFCResult) that the code may related to. NOTE if the code is only business related(i.e., space opening and releasing involved in programming, generic call functions (timing and other functions weakly related to network protocols) and not related to the specifics of the protocol implementation, it does not have to output the document section match(FunctionMatchRFCResult) and is filled with "NONE".

Retrieve document sections Thinking Chain: The function code is matched with the RFC document section, and the thinking chain is provided to help you solve the problem better:
	1. Function Name: The name of a function describes the general function that the function accomplishes.
	2. Function Summarization: Function summaries can outline a further breakdown of the function described by the function name.
	3. Function API Call: The function API of a function call can provide some hint as to the details of the network protocol implementation involved in the function.
	4. Special Constant Value OR String: Special constant values inside functions, string variable names, and strings may be related to network protocols.
	5. Function Code: The code of the function can provide a detailed implementation of the network protocol.
Generate Function Information Collection with JSON Format:

{
	"FunctionIndex": "(FILL WITH "File count" with less than four bits are indexed with zeros to make up the four bits.)",
	"FunctionName": "(Full Function Code Name)",
	"FunctionSummarization": [
		"(Function Summary Phrase1)",
		"(Function Summary Phrase2)",
		"(...)"
	],
	"FunctionMatchRFCResult": [
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 1)",
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 2)",
		"(...)"
	],
}

ATTENTION: Remember YOU MUST ONLY output the Function Information Collection result.
