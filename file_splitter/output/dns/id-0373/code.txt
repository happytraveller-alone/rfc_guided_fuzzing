Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 373
// Total lines: 209

//----- (0000000140031A58) ----------------------------------------------------
__int64 __fastcall Dp_ModifyLocalDsEnlistment(__int64 a1, int a2)
{
  int v3; // ecx
  const wchar_t *v4; // rax
  const wchar_t *v6; // rdx
  int v7; // r14d
  int v8; // esi
  int v9; // r12d
  CDnsClientSubnetRecordsTrie *v10; // rcx
  __int64 v11; // r8
  __int64 v12; // rax
  const char *v13; // r9
  unsigned int v14; // ebx
  const unsigned __int16 *v15; // r9
  unsigned __int16 *v16; // rbx
  unsigned int v17; // eax
  __int128 *v18; // rax
  int outvalue; // [rsp+20h] [rbp-59h]
  ULONG v21; // [rsp+28h] [rbp-51h]
  __int64 v22[2]; // [rsp+40h] [rbp-39h] BYREF
  LDAPModW *mods[2]; // [rsp+50h] [rbp-29h] BYREF
  __int128 v24; // [rsp+60h] [rbp-19h] BYREF
  __int128 v25; // [rsp+70h] [rbp-9h] BYREF
  BOOL v26; // [rsp+80h] [rbp+7h] BYREF
  const wchar_t *v27; // [rsp+88h] [rbp+Fh]
  __int64 *v28; // [rsp+90h] [rbp+17h]
  unsigned __int16 *v29; // [rsp+E0h] [rbp+67h] BYREF
  int v30; // [rsp+E8h] [rbp+6Fh] BYREF

  v22[0] = qword_1401B6B28;
  v30 = 0;
  v22[1] = 0i64;
  v26 = a2 == 0;
  v3 = g_fDsReadOnlyDcMode;
  v4 = L"msDS-NC-Replica-Locations";
  if ( dword_1401B9750 )
    v3 = 1;
  mods[1] = 0i64;
  v6 = L"msDS-NC-RO-Replica-Locations";
  v7 = 0;
  if ( v3 )
    v4 = L"msDS-NC-RO-Replica-Locations";
  v8 = 0;
  v27 = v4;
  v9 = 1;
  v28 = v22;
  mods[0] = (LDAPModW *)&v26;
  v10 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    if ( a1 )
      v11 = *(_QWORD *)(a1 + 48);
    else
      v11 = 0i64;
    if ( a1 )
      v12 = *(_QWORD *)(a1 + 32);
    else
      v12 = 0i64;
    v13 = "Removing";
    if ( a2 )
      v13 = "Adding";
    WPP_SF_sSS(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x5Au,
      (__int64)&WPP_0f7f6e0c97433b7ed77e9ce4b2e20f93_Traceguids,
      v13,
      v12,
      v11);
    v10 = WPP_GLOBAL_Control;
  }
  if ( (a1 == g_pDomainDp || a1 == g_pForestDp) && !a2 )
  {
    if ( v10 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)v10 + 17) & 0x400) != 0
      && *((_BYTE *)v10 + 65) >= 4u )
    {
      WPP_SF_(*((_QWORD *)v10 + 7), 0x5Bu, (__int64)&WPP_0f7f6e0c97433b7ed77e9ce4b2e20f93_Traceguids);
      v10 = WPP_GLOBAL_Control;
    }
    v14 = 9005;
    goto LABEL_56;
  }
  EnterCriticalSection(&g_DpCS);
  if ( a1 && *(_QWORD *)(a1 + 48) )
  {
    if ( g_pFsmo && (v15 = *(const unsigned __int16 **)(g_pFsmo + 8)) != 0i64 )
    {
      if ( g_fServiceStarting && g_fFsmoDown )
      {
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          WPP_SF_S(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x5Eu,
            (__int64)&WPP_0f7f6e0c97433b7ed77e9ce4b2e20f93_Traceguids,
            v15);
        }
        v8 = 1;
      }
      else
      {
        v16 = (unsigned __int16 *)Ds_Connect(*(PWSTR *)(g_pFsmo + 8), 2, &v30);
        v29 = v16;
        if ( !v30 )
        {
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            WPP_SF_S(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              v30 + 92,
              (__int64)&WPP_0f7f6e0c97433b7ed77e9ce4b2e20f93_Traceguids,
              *(const unsigned __int16 **)(g_pFsmo + 8));
          }
          v7 = 1;
          v17 = Dns_LdapModifyExt((LDAP *)v16, *(PWSTR *)(a1 + 48), mods, 0i64, outvalue, v21, 0);
          v14 = v17;
          if ( ((v17 - 16) & 0xFFFFFFEF) != 0 )
          {
            if ( v17 == 20 )
            {
              v14 = 0;
              v9 = 0;
            }
          }
          else
          {
            v14 = 9002;
          }
          goto LABEL_53;
        }
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          WPP_SF_SD(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x5Du,
            (__int64)&WPP_0f7f6e0c97433b7ed77e9ce4b2e20f93_Traceguids,
            *(const unsigned __int16 **)(g_pFsmo + 8));
        }
        v8 = 1;
        g_fFsmoDown = 1;
      }
      v14 = 8367;
    }
    else
    {
      v14 = 8367;
      v8 = 1;
    }
  }
  else
  {
    v14 = 87;
  }
LABEL_53:
  LeaveCriticalSection(&g_DpCS);
  if ( v7 )
    Ds_LdapUnbind((LDAP **)&v29);
  v10 = WPP_GLOBAL_Control;
LABEL_56:
  if ( v10 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)v10 + 17) & 0x400) != 0
    && *((_BYTE *)v10 + 65) >= 4u )
  {
    WPP_SF_D(*((_QWORD *)v10 + 7), 0x5Fu, (__int64)&WPP_0f7f6e0c97433b7ed77e9ce4b2e20f93_Traceguids, v14);
  }
  if ( v8 )
  {
    if ( g_pFsmo && *(_QWORD *)(g_pFsmo + 8) )
      v29 = *(unsigned __int16 **)(g_pFsmo + 8);
    else
      v29 = L"\"\"";
    v24 = DNS_EVENT_DP_FSMO_UNAVAILABLE;
    Eventlog_LogEvent((__int64)&v24, (__int64)v6, 1u, &v29, (unsigned __int8 *)1, v14, 0, 0i64);
  }
  else if ( !v14 && v9 )
  {
    v24 = *(_OWORD *)(a1 + 32);
    v18 = (__int128 *)&DNS_EVENT_DP_ENLISTED;
    if ( !a2 )
      v18 = (__int128 *)&DNS_EVENT_DP_UNENLISTED;
    v25 = *v18;
    Eventlog_LogEvent((__int64)&v25, (__int64)v6, 2u, (unsigned __int16 **)&v24, (unsigned __int8 *)1, 0, 0, 0i64);
  }
  return v14;
}
// 140031CBB: variable 'outvalue' is possibly undefined
// 140031CBB: variable 'v21' is possibly undefined
// 140031DF3: variable 'v6' is possibly undefined
// 140187788: using guessed type __int128 DNS_EVENT_DP_FSMO_UNAVAILABLE;
// 14018B2C8: using guessed type wchar_t aMsdsNcReplicaL[26];
// 14018B300: using guessed type wchar_t aMsdsNcRoReplic[29];
// 14018B6BC: using guessed type wchar_t asc_14018B6BC[3];
// 1401B6B28: using guessed type __int64 qword_1401B6B28;
// 1401B8C54: using guessed type int g_fServiceStarting;
// 1401B8C94: using guessed type int g_fDsReadOnlyDcMode;
// 1401B8C98: using guessed type __int64 g_pDomainDp;
// 1401B8CA0: using guessed type __int64 g_pForestDp;
// 1401B8CFC: using guessed type int g_fFsmoDown;
// 1401B8D08: using guessed type __int64 g_pFsmo;
// 1401B9750: using guessed type int dword_1401B9750;
