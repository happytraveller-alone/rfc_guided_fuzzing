Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 1048
// Total lines: 163

//----- (00000001400888A8) ----------------------------------------------------
__int64 __fastcall Flat_WriteRecordToBuffer(__int64 a1, __int64 a2, __int64 a3, __int64 a4, int a5)
{
  __int64 v5; // rbx
  __int64 v7; // r14
  _WORD *v8; // r15
  u_long v12; // edx
  unsigned int v13; // eax
  int v14; // r8d
  __int64 v16; // rbx
  __int64 (__fastcall *v17)(_WORD *, __int64, __int64, __int64); // rax
  __int64 v18; // rax
  CDnsClientSubnetRecordsTrie *v19; // rcx
  unsigned __int64 v20; // rbx
  unsigned int LastError; // esi
  __int64 v22; // [rsp+20h] [rbp-38h]
  __int64 v23; // [rsp+28h] [rbp-30h]

  v5 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = (_WORD *)v5;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_qqqqD(*((_QWORD *)WPP_GLOBAL_Control + 7), a2, a3, a3, v5, v7, a2, a5);
  }
  SetLastError(0);
  if ( (unsigned __int64)(v7 - v5) >= 0x18 )
  {
    *(_WORD *)(v5 + 2) = *(_WORD *)(a3 + 12);
    *(_DWORD *)(v5 + 4) = *(unsigned __int8 *)(a3 + 8);
    *(_DWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 16) = *(unsigned int *)(a3 + 24);
    if ( (*(_BYTE *)(a4 + 92) & 0x10) != 0 )
    {
      *(_DWORD *)(v5 + 4) |= 0x40000000u;
      if ( (*(_DWORD *)(a4 + 92) & 0x100) != 0 )
        *(_DWORD *)(v5 + 4) |= 0x20000000u;
    }
    if ( *(_WORD *)(a3 + 12) > 0x34u || !RRHasNonWireDataTypeTable[*(unsigned __int16 *)(a3 + 12)] )
      *(_DWORD *)(v5 + 4) |= 0x100000u;
    v12 = *(_DWORD *)(a3 + 20);
    if ( (*(_BYTE *)(a3 + 8) & 1) != 0 )
    {
      v13 = *(_DWORD *)(a3 + 20);
      v14 = dword_1401B9714;
      if ( dword_1401B991C )
        v13 = *(_DWORD *)(a3 + 16) + dword_1401B9920;
      if ( v13 < dword_1401B9714 )
      {
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          LODWORD(v23) = dword_1401B9714;
          LODWORD(v22) = v13;
          WPP_SF_qdD(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x1Du,
            (__int64)&WPP_383afeabe81e3a0b0d234d71fa57327a_Traceguids,
            a3,
            v22,
            v23);
        }
        return 0i64;
      }
      if ( dword_1401B991C )
        v14 = *(_DWORD *)(a3 + 16);
      *(_DWORD *)(v5 + 4) |= 0x80000000;
      *(_DWORD *)(v5 + 12) = v12 - v14;
    }
    else
    {
      *(_DWORD *)(v5 + 12) = ntohl(v12);
    }
    v16 = v5 + 24;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
    {
      LODWORD(v23) = v7 - v16;
      WPP_SF_qqd(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x1Eu,
        (__int64)&WPP_383afeabe81e3a0b0d234d71fa57327a_Traceguids,
        v8,
        v16,
        v23);
    }
    v17 = (__int64 (__fastcall *)(_WORD *, __int64, __int64, __int64))RR_DispatchFunctionForType(
                                                                        (__int64)&RRFlatWriteTable,
                                                                        *(_WORD *)(a3 + 12));
    if ( !v17 )
      return 87i64;
    v18 = v17(v8, a3, v16, v7);
    v5 = v18;
    if ( v18 )
    {
      *v8 = v18 - (_WORD)v8 - 24;
      if ( a2 )
        ++*(_WORD *)(a2 + 2);
      v19 = WPP_GLOBAL_Control;
      v20 = (v18 + 3) & 0xFFFFFFFFFFFFFFFCui64;
      *(_QWORD *)(a1 + 32) = v20;
      if ( (*((_BYTE *)v19 + 68) & 4) != 0
        && *((_BYTE *)v19 + 65) >= 5u
        && v19 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
      {
        WPP_SF_qqq(*((_QWORD *)v19 + 7), 0x20u, (__int64)&WPP_383afeabe81e3a0b0d234d71fa57327a_Traceguids, a3, v8, v20);
      }
      return 0i64;
    }
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_D(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x1Fu,
        (__int64)&WPP_383afeabe81e3a0b0d234d71fa57327a_Traceguids,
        *(unsigned __int16 *)(a3 + 12));
    }
  }
  LastError = GetLastError();
  if ( !LastError )
    LastError = 234;
  if ( LastError == 234 )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_qqq(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x21u,
        (__int64)&WPP_383afeabe81e3a0b0d234d71fa57327a_Traceguids,
        a3,
        v5,
        v7);
    }
  }
  else if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
         && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
         && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_dqqq(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x22u,
      (__int64)&WPP_383afeabe81e3a0b0d234d71fa57327a_Traceguids,
      LastError);
  }
  return LastError;
}
// 140088B32: conditional instruction was optimized away because al.1>=5u
// 1400889FF: variable 'v22' is possibly undefined
// 1400889FF: variable 'v23' is possibly undefined
// 140185140: using guessed type __int64 (__fastcall *_guard_dispatch_icall_fptr)(_QWORD, _QWORD);
// 14018FB20: using guessed type _DWORD RRHasNonWireDataTypeTable[54];
// 1401B30F0: using guessed type void *RRFlatWriteTable;
// 1401B9714: using guessed type int dword_1401B9714;
// 1401B991C: using guessed type int dword_1401B991C;
// 1401B9920: using guessed type int dword_1401B9920;
