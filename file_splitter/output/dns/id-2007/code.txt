Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 2007
// Total lines: 226

//----- (00000001400F760C) ----------------------------------------------------
__int64 __fastcall DnsOls_CopyDirectoryZoneProperties(__int64 a1, unsigned __int16 *a2, WCHAR *a3, __int64 a4)
{
  __int64 v4; // rsi
  ULONG v7; // edi
  int v8; // eax
  CDnsClientSubnetRecordsTrie *v9; // r10
  const unsigned __int16 **v10; // r15
  int v11; // r13d
  const unsigned __int16 *v12; // r12
  struct berval **values_lenW; // rax
  struct berval **v14; // rbx
  __int64 v15; // rbx
  __int64 v16; // r15
  int v17; // eax
  int attrs; // [rsp+20h] [rbp-E0h]
  ULONG attrsonly; // [rsp+28h] [rbp-D8h]
  PLDAPMessage res; // [rsp+60h] [rbp-A0h] BYREF
  LDAPMessage *Message; // [rsp+68h] [rbp-98h]
  PWSTR dn; // [rsp+70h] [rbp-90h]
  __int64 v24; // [rsp+78h] [rbp-88h]
  PLDAPControlW ServerControls[2]; // [rsp+80h] [rbp-80h] BYREF
  LDAPModW *mods[2]; // [rsp+90h] [rbp-70h] BYREF
  int v27; // [rsp+A0h] [rbp-60h] BYREF
  const unsigned __int16 *v28; // [rsp+A8h] [rbp-58h]
  struct berval **v29; // [rsp+B0h] [rbp-50h]
  __int64 v30[20]; // [rsp+C0h] [rbp-40h] BYREF

  v4 = 0i64;
  v24 = a4;
  dn = a3;
  res = 0i64;
  ServerControls[0] = (PLDAPControlW)&SecurityDescriptorControl_DGO;
  ServerControls[1] = 0i64;
  if ( !a1 )
  {
    v7 = 87;
    goto LABEL_53;
  }
  if ( (*(_BYTE *)(a1 + 388) & 1) == 0 || *(_DWORD *)(a1 + 372) != 1 )
  {
    v7 = 9611;
LABEL_50:
    v9 = WPP_GLOBAL_Control;
    goto LABEL_51;
  }
  if ( (*(_BYTE *)(a1 + 1040) & 2) == 0 && *(_QWORD *)(a1 + 1136) )
  {
    v7 = 9101;
    goto LABEL_53;
  }
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_S(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x64u, (__int64)&WPP_b7aea06a65693a31b0dd129af848d3b8_Traceguids, a2);
  }
  v8 = ldap_search_ext_sW(
         pServerLdap,
         a2,
         0,
         g_szDnsZoneFilter,
         &DsTypeAttributeTable,
         0,
         ServerControls,
         0i64,
         &g_LdapTimeout,
         0,
         &res);
  v7 = v8;
  if ( v8 )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      WPP_SF_DS(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x65u,
        (__int64)&WPP_b7aea06a65693a31b0dd129af848d3b8_Traceguids,
        v8,
        (__int64)a2);
    }
    v7 = Ds_ErrorHandler(v7, (__int64)a2, pServerLdap, 0);
    goto LABEL_50;
  }
  Message = ldap_first_entry(pServerLdap, res);
  if ( !Message )
  {
    v9 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      WPP_SF_S(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x66u,
        (__int64)&WPP_b7aea06a65693a31b0dd129af848d3b8_Traceguids,
        a2);
      v9 = WPP_GLOBAL_Control;
    }
    v7 = 9002;
    goto LABEL_51;
  }
  v10 = (const unsigned __int16 **)v30;
  v9 = WPP_GLOBAL_Control;
  v11 = 0;
  v30[0] = (__int64)off_1401B6C70;
  v30[1] = (__int64)off_1401B6C78;
  v30[2] = (__int64)off_1401B6C80;
  v30[3] = (__int64)off_1401B6C88;
  v30[4] = (__int64)off_1401B6C90;
  v30[5] = (__int64)off_1401B6C98;
  v30[6] = (__int64)off_1401B6CA0;
  v30[7] = (__int64)off_1401B6CA8;
  v30[8] = (__int64)off_1401B6CB8;
  v30[9] = (__int64)off_1401B6CC0;
  v30[10] = (__int64)off_1401B6CB0;
  v30[11] = (__int64)off_1401B6CC8;
  v30[12] = (__int64)off_1401B6CD0;
  v30[13] = (__int64)off_1401B6CD8;
  v30[14] = (__int64)off_1401B6CE0;
  v30[15] = (__int64)off_1401B6CE8;
  v30[16] = (__int64)off_1401B6CF0[0];
  v30[17] = (__int64)off_1401B6CF8;
  v30[18] = (__int64)off_1401B6D00;
  v30[19] = (__int64)off_1401B6D08;
  while ( 1 )
  {
    if ( v9 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)v9 + 17) & 0x400) != 0
      && *((_BYTE *)v9 + 65) >= 4u )
    {
      WPP_SF_S(*((_QWORD *)v9 + 7), 0x67u, (__int64)&WPP_b7aea06a65693a31b0dd129af848d3b8_Traceguids, *v10);
    }
    v12 = *v10;
    values_lenW = ldap_get_values_lenW(pServerLdap, Message, (const PWSTR)*v10);
    v14 = values_lenW;
    if ( values_lenW )
      break;
    v9 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
    {
      goto LABEL_36;
    }
    WPP_SF_S(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x68u, (__int64)&WPP_b7aea06a65693a31b0dd129af848d3b8_Traceguids, v12);
LABEL_35:
    v9 = WPP_GLOBAL_Control;
LABEL_36:
    ++v11;
    ++v10;
    if ( (unsigned __int64)v11 >= 0x14 )
      goto LABEL_42;
  }
  v29 = values_lenW;
  mods[0] = (LDAPModW *)&v27;
  v27 = 128;
  v28 = v12;
  mods[1] = 0i64;
  v7 = Dns_LdapModifyExt(pServerLdap, dn, mods, ServerControls, attrs, attrsonly, 0);
  ldap_value_free_len(v14);
  if ( !v7 )
    goto LABEL_35;
  v9 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
  {
    WPP_SF_DSs(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x69u,
      (__int64)&WPP_b7aea06a65693a31b0dd129af848d3b8_Traceguids,
      v7,
      v30[v11],
      *(_QWORD *)(a1 + 16));
    v9 = WPP_GLOBAL_Control;
  }
LABEL_42:
  if ( !v7 && (*(_BYTE *)(a1 + 1040) & 2) != 0 )
  {
    v15 = *(_QWORD *)(a1 + 840);
    v16 = v24;
    *(_QWORD *)(a1 + 840) = v24;
    v17 = DnsOls_SetLocalServerAsKeymaster(pServerLdap, a1);
    *(_QWORD *)(a1 + 840) = v15;
    v7 = v17;
    if ( !v17 )
      goto LABEL_50;
    v9 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      WPP_SF_DS(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x6Au,
        (__int64)&WPP_b7aea06a65693a31b0dd129af848d3b8_Traceguids,
        v17,
        v16);
      goto LABEL_50;
    }
  }
LABEL_51:
  if ( res )
  {
    ldap_msgfree(res);
LABEL_53:
    v9 = WPP_GLOBAL_Control;
  }
  if ( v9 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)v9 + 17) & 0x400) != 0
    && *((_BYTE *)v9 + 65) >= 4u )
  {
    if ( a1 )
      v4 = *(_QWORD *)(a1 + 16);
    WPP_SF_Ds(*((_QWORD *)v9 + 7), 0x6Bu, (__int64)&WPP_b7aea06a65693a31b0dd129af848d3b8_Traceguids, v7, v4);
  }
  return v7;
}
// 1400F798A: variable 'attrs' is possibly undefined
// 1400F798A: variable 'attrsonly' is possibly undefined
// 1401B6CF0: using guessed type wchar_t *off_1401B6CF0[4];
// 1401B6D08: using guessed type wchar_t *off_1401B6D08;
// 1401EC440: using guessed type __int64 SecurityDescriptorControl_DGO;
