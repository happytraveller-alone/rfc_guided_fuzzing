Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 1826
// Total lines: 138

//----- (00000001400E5A60) ----------------------------------------------------
__int64 __fastcall std::filebuf::uflow(__int64 a1)
{
  unsigned __int64 v2; // rcx
  int *v3; // rdx
  __int64 v4; // r8
  _QWORD *v5; // rcx
  unsigned __int8 *v6; // rdx
  _QWORD *v8; // rdx
  __int64 v9; // rcx
  int v10; // eax
  unsigned int i; // edi
  int v12; // eax
  void **v13; // r9
  void **v14; // r8
  int v15; // eax
  void **v16; // rcx
  void **v17; // rax
  void **v18; // r8
  __int64 v19; // rdx
  int v20; // eax
  __int64 v21; // rdi
  unsigned __int8 Destination; // [rsp+58h] [rbp-9h] BYREF
  char v23[7]; // [rsp+59h] [rbp-8h] BYREF
  __int64 v24; // [rsp+60h] [rbp-1h] BYREF
  __int64 v25[2]; // [rsp+68h] [rbp+7h] BYREF
  void *Source[2]; // [rsp+78h] [rbp+17h] BYREF
  __int64 v27; // [rsp+88h] [rbp+27h]
  unsigned __int64 v28; // [rsp+90h] [rbp+2Fh]

  v25[1] = -2i64;
  v2 = **(_QWORD **)(a1 + 64);
  if ( v2 && (v3 = *(int **)(a1 + 88), v4 = *v3, v2 < v2 + v4) )
  {
    *v3 = v4 - 1;
    v5 = *(_QWORD **)(a1 + 64);
    v6 = (unsigned __int8 *)(*v5)++;
    return *v6;
  }
  else if ( *(_QWORD *)(a1 + 152) )
  {
    v8 = *(_QWORD **)(a1 + 32);
    if ( *v8 == a1 + 136 )
    {
      v9 = *(_QWORD *)(a1 + 120);
      *v8 = *(_QWORD *)(a1 + 112);
      **(_QWORD **)(a1 + 64) = v9;
      **(_DWORD **)(a1 + 88) = 0;
    }
    if ( *(_QWORD *)(a1 + 128) )
    {
      v28 = 15i64;
      v27 = 0i64;
      LOBYTE(Source[0]) = 0;
      v12 = fgetc(*(FILE **)(a1 + 152));
      for ( i = -1; v12 != -1; v12 = fgetc(*(FILE **)(a1 + 152)) )
      {
        std::string::append((size_t *)Source, 1ui64, v12);
        v13 = Source;
        if ( v28 >= 0x10 )
          v13 = (void **)Source[0];
        v14 = Source;
        if ( v28 >= 0x10 )
          v14 = (void **)Source[0];
        v15 = (*(__int64 (__fastcall **)(_QWORD, __int64, void **, __int64, __int64 *, unsigned __int8 *, char *, __int64 *))(**(_QWORD **)(a1 + 128) + 32i64))(
                *(_QWORD *)(a1 + 128),
                a1 + 140,
                v14,
                (__int64)v13 + v27,
                &v24,
                &Destination,
                v23,
                v25);
        if ( v15 < 0 )
          break;
        if ( v15 <= 1 )
        {
          v16 = Source;
          if ( (unsigned __int8 *)v25[0] != &Destination )
          {
            if ( v28 >= 0x10 )
              LODWORD(v16) = Source[0];
            v19 = v24;
            v20 = (_DWORD)v16 + v27 - v24;
            v21 = v20;
            if ( v20 > 0 )
            {
              while ( 1 )
              {
                ungetc(*(char *)(--v21 + v19), *(FILE **)(a1 + 152));
                if ( v21 <= 0 )
                  break;
                v19 = v24;
              }
            }
            goto LABEL_35;
          }
          v17 = Source;
          if ( v28 >= 0x10 )
            v17 = (void **)Source[0];
          std::string::erase(Source, 0i64, v24 - (_QWORD)v17);
        }
        else
        {
          if ( v15 != 3 )
            break;
          if ( v27 )
          {
            v18 = Source;
            if ( v28 >= 0x10 )
              v18 = (void **)Source[0];
            memcpy_s(&Destination, 1ui64, v18, 1ui64);
LABEL_35:
            i = Destination;
            break;
          }
        }
      }
      if ( v28 >= 0x10 )
        operator delete(Source[0]);
    }
    else
    {
      v10 = fgetc(*(FILE **)(a1 + 152));
      i = -1;
      if ( v10 != -1 )
        return (unsigned __int8)v10;
    }
    return i;
  }
  else
  {
    return 0xFFFFFFFFi64;
  }
}
// 140184CA8: using guessed type void __stdcall operator delete(void *);
// 140185140: using guessed type __int64 (__fastcall *_guard_dispatch_icall_fptr)(_QWORD, _QWORD);
// 1400E5A60: using guessed type char var_5F[7];
