Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 973
// Total lines: 351

//----- (0000000140082660) ----------------------------------------------------
__int64 __fastcall Xfr_ReadXfrMessageToDatabase(__int64 a1, __int64 a2)
{
  char v3; // dl
  unsigned int v4; // r10d
  int v6; // r12d
  CDnsClientSubnetRecordsTrie *v7; // rcx
  unsigned __int64 v8; // r8
  unsigned __int8 *v9; // r9
  int v10; // edx
  char *v11; // rax
  unsigned __int64 v12; // rax
  __int64 v13; // rdx
  __int64 v14; // rsi
  __int64 v15; // r12
  unsigned __int16 v16; // dx
  int v17; // ecx
  __int64 v18; // r8
  __int64 RecordFromWire; // rax
  int v20; // r12d
  unsigned __int16 *v21; // rax
  __int64 v22; // rdx
  __int64 v23; // r8
  __int64 v24; // rdx
  const char *v25; // rax
  __int128 v26; // xmm0
  CDnsClientSubnetRecordsTrie *v27; // rcx
  unsigned __int16 v28; // dx
  int v29; // [rsp+40h] [rbp-C0h]
  unsigned __int64 v30; // [rsp+48h] [rbp-B8h]
  unsigned __int8 *v31; // [rsp+50h] [rbp-B0h]
  int v32; // [rsp+58h] [rbp-A8h]
  int v33; // [rsp+5Ch] [rbp-A4h]
  __int128 v35; // [rsp+70h] [rbp-90h] BYREF
  __int64 v36; // [rsp+80h] [rbp-80h]
  char v37[16]; // [rsp+88h] [rbp-78h] BYREF
  __int64 v38; // [rsp+98h] [rbp-68h]
  unsigned __int16 v39; // [rsp+A6h] [rbp-5Ah]
  unsigned __int16 *v40[4]; // [rsp+B0h] [rbp-50h] BYREF
  char v41[256]; // [rsp+D0h] [rbp-30h] BYREF
  __int64 v42; // [rsp+1D0h] [rbp+D0h] BYREF

  v33 = 0;
  v3 = *(_BYTE *)(a2 + 6307);
  v4 = 0;
  if ( (v3 & 0xF) != 0 )
    return (v3 & 0xFu) + 9000;
  v6 = *(unsigned __int16 *)(a2 + 6310);
  v29 = v6;
  if ( *(_DWORD *)(a1 + 372) == 3 )
  {
    v6 += *(unsigned __int16 *)(a2 + 6314) + *(unsigned __int16 *)(a2 + 6312);
    v29 = v6;
LABEL_7:
    v7 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x40) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
    {
      WPP_SF_qd(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0xEu,
        (__int64)&WPP_95413813eca334a66ae97b50395580a7_Traceguids,
        a2,
        v6);
      v7 = WPP_GLOBAL_Control;
      v4 = 0;
    }
    v8 = *(unsigned __int16 *)(a2 + 6302) + a2 + 6304;
    v32 = 0;
    v9 = (unsigned __int8 *)(a2 + 6316);
    v30 = v8;
    v31 = (unsigned __int8 *)(a2 + 6316);
    v10 = 0;
    while ( 1 )
    {
      if ( v10 >= v6 + *(unsigned __int16 *)(a2 + 6308) )
        return v4;
      if ( (unsigned __int64)v9 >= v8 )
      {
        if ( v7 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)v7 + 17) & 0x800) != 0
          && *((_BYTE *)v7 + 65) >= 4u )
        {
          WPP_SF_Dd(
            *((_QWORD *)v7 + 7),
            0xFu,
            (__int64)&WPP_95413813eca334a66ae97b50395580a7_Traceguids,
            *(unsigned __int16 *)(a2 + 6302));
        }
        goto LABEL_105;
      }
      if ( v7 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)v7 + 68) & 0x40) != 0
        && *((_BYTE *)v7 + 65) >= 5u )
      {
        v11 = Dbg_PacketName(v9, a2 + 6304, 0i64);
        WPP_SF_s(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x10u,
          (__int64)&WPP_95413813eca334a66ae97b50395580a7_Traceguids,
          v11);
        v9 = v31;
      }
      v12 = Wire_SkipPacketName(a2, (__int64)v9);
      v13 = 0i64;
      v14 = v12;
      if ( !v12 )
        goto LABEL_95;
      if ( v32 >= *(unsigned __int16 *)(a2 + 6308) )
        break;
      v8 = v30;
      if ( v12 > v30 - 4 )
      {
        v27 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          v28 = 17;
          goto LABEL_104;
        }
        goto LABEL_105;
      }
      v7 = WPP_GLOBAL_Control;
      v9 = (unsigned __int8 *)(v12 + 4);
      v31 = (unsigned __int8 *)(v12 + 4);
LABEL_33:
      v4 = v33;
      v10 = ++v32;
      if ( v33 )
        return v4;
    }
    *(_QWORD *)&v35 = Lookup_ZoneNode(a1, v31, a2, 0i64, 272, 0i64, 0i64, 0i64);
    v15 = v35;
    if ( !(_QWORD)v35 )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_qq(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x12u,
          (__int64)&WPP_95413813eca334a66ae97b50395580a7_Traceguids,
          a2,
          v31);
      }
LABEL_95:
      Wire_PacketNameError((struct in_addr *)a2, v13, v14 - a2 - 6304);
      return 123i64;
    }
    v31 = (unsigned __int8 *)Wire_ParseWireRecord(v14, v30, 1, (__int64)v37);
    v9 = v31;
    if ( !v31 )
    {
      v27 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x40) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        v28 = 19;
        goto LABEL_104;
      }
      goto LABEL_105;
    }
    if ( v39 == 41 )
    {
      v7 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x40) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
      {
        goto LABEL_32;
      }
      v16 = 20;
    }
    else
    {
      if ( *(_DWORD *)(a1 + 372) == 3 )
      {
        if ( v39 > 0x1Cu || (v17 = 268435526, !_bittest(&v17, v39)) )
        {
          v7 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x40) == 0
            || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
          {
            goto LABEL_32;
          }
          WPP_SF_D(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x15u,
            (__int64)&WPP_95413813eca334a66ae97b50395580a7_Traceguids,
            v39);
          goto LABEL_30;
        }
      }
      else if ( *(_BYTE *)(a2 + 1328) )
      {
        if ( v15 == *(_QWORD *)(a1 + 64) && v39 == 6 )
        {
          if ( RR_FindNextRecordEx(v15, 0, 6u, 0i64, 0, 0) )
            return 1168384i64;
          v33 = 1168384;
        }
      }
      else
      {
        if ( (*(_DWORD *)(a2 + 1312) != 2 || !*(_DWORD *)(a2 + 1320)) && v39 != 6 )
        {
          v27 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            v28 = 22;
            goto LABEL_104;
          }
          goto LABEL_105;
        }
        *(_BYTE *)(a2 + 1328) = 1;
      }
      *(_BYTE *)(v15 + 98) = CurrentTimeoutBin;
      v18 = v38;
      *(_QWORD *)(a2 + 192) = v15;
      RecordFromWire = Wire_CreateRecordFromWire(a2, v37, v18, 0x1Du);
      v36 = RecordFromWire;
      if ( RecordFromWire )
      {
        v20 = RR_AddToNode(a1, v15, RecordFromWire);
        if ( v20 )
        {
          RR_Free(v36);
          Name_PlaceNodeNameInBuffer(v41, (unsigned __int64)&v42, (__int64 *)v35, 0i64);
          v40[0] = *(unsigned __int16 **)(a1 + 16);
          v21 = (unsigned __int16 *)DnsAddr_Ntoa((struct in_addr *)(a2 + 64));
          v40[1] = v21;
          v40[2] = (unsigned __int16 *)v41;
          v7 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            WPP_SF_sssd(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              v22,
              v23,
              *(const char **)(a1 + 16),
              (__int64)v41,
              (__int64)v21);
            v7 = WPP_GLOBAL_Control;
          }
          v24 = (unsigned int)(v20 - 9707);
          if ( v20 == 9707 )
          {
            v26 = DNS_EVENT_XFR_CNAME_LOOP;
          }
          else
          {
            v24 = (unsigned int)(v20 - 9708);
            if ( v20 == 9708 )
            {
              v26 = DNS_EVENT_XFR_ADD_RR_AT_CNAME;
            }
            else
            {
              v24 = (unsigned int)(v20 - 9709);
              if ( v20 != 9709 )
              {
                if ( v20 != 9711 )
                {
                  if ( v7 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
                  {
                    if ( (*((_BYTE *)v7 + 68) & 0x40) != 0 && *((_BYTE *)v7 + 65) >= 4u )
                    {
                      WPP_SF_D(
                        *((_QWORD *)v7 + 7),
                        0x19u,
                        (__int64)&WPP_95413813eca334a66ae97b50395580a7_Traceguids,
                        v20);
                      v7 = WPP_GLOBAL_Control;
                    }
                    if ( v7 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                      && (*((_DWORD *)v7 + 17) & 0x800) != 0
                      && *((_BYTE *)v7 + 65) >= 4u )
                    {
                      v25 = DnsAddr_Ntoa((struct in_addr *)(a2 + 64));
                      WPP_SF_s(
                        *((_QWORD *)WPP_GLOBAL_Control + 7),
                        0xAu,
                        (__int64)&WPP_95413813eca334a66ae97b50395580a7_Traceguids,
                        v25);
                    }
                  }
                  v35 = DNS_EVENT_SERVER_FAILURE_PROCESSING_PACKET;
                  EventLog_BadPacket(&v35, a2);
                  return 9002i64;
                }
                goto LABEL_31;
              }
              v26 = DNS_EVENT_XFR_CNAME_NOT_ALONE;
            }
          }
          v35 = v26;
          Eventlog_LogEvent((__int64)&v35, v24, 3u, v40, (unsigned __int8 *)3, 0, 0, 0i64);
        }
        goto LABEL_30;
      }
      v7 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
      {
        goto LABEL_31;
      }
      v16 = 23;
    }
    WPP_SF_(*((_QWORD *)v7 + 7), v16, (__int64)&WPP_95413813eca334a66ae97b50395580a7_Traceguids);
LABEL_30:
    v7 = WPP_GLOBAL_Control;
LABEL_31:
    v9 = v31;
LABEL_32:
    v6 = v29;
    v8 = v30;
    goto LABEL_33;
  }
  if ( *(unsigned __int16 *)(a2 + 6314) <= (*(_QWORD *)(a1 + 192) != 0i64) && !*(_WORD *)(a2 + 6312) )
    goto LABEL_7;
  v27 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x40) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    v28 = 13;
LABEL_104:
    WPP_SF_(*((_QWORD *)v27 + 7), v28, (__int64)&WPP_95413813eca334a66ae97b50395580a7_Traceguids);
  }
LABEL_105:
  Wire_PacketError((struct in_addr *)a2);
  return 9502i64;
}
// 140082AD7: variable 'v22' is possibly undefined
// 140082AD7: variable 'v23' is possibly undefined
// 140082CC5: variable 'v13' is possibly undefined
// 1401861B8: using guessed type __int128 DNS_EVENT_XFR_ADD_RR_AT_CNAME;
// 140186288: using guessed type __int128 DNS_EVENT_SERVER_FAILURE_PROCESSING_PACKET;
// 140186A48: using guessed type __int128 DNS_EVENT_XFR_CNAME_LOOP;
// 140186EE0: using guessed type __int128 DNS_EVENT_XFR_CNAME_NOT_ALONE;
// 1401BA4B8: using guessed type char CurrentTimeoutBin;
##############################
Role: Let's assume that you are an advanced reverse engineer and you are reverse engineering a network driver using IDA Pro, and you are also familiar with the RFC documentation. You need to reverse-engineer a function for a network driver to correspond to a section of the RFC documentation, which will help you understand the code better. The driver you're reversing is Schannel.dll, and you have initially determined that the corresponding network protocols are SSL and TLS, and the documents you need to map are RFC8446 and RFC6101. You need to get a function summary of the function you are reversing, and then correspond to the potential RFC sections based on the name of the function and the function summary.
Function Background: The function is reverse engineered from the driver file Schannel.dll on Windows platform. Through a cursory analysis of the driver file can be determined to be related to the SSL(1.3), TLS(3.0) protocol, that is, with RFC8446, RFC6101 strong correlation.

Output Function Summary: Summarizes the function's functionality with several phrases instead of sentences, focuses on covering the function's control flow information, and highlights the protocol function points implemented by the function. Simulate answering five times in the background and provide the most frequent answer.

Retrieve document sections: giving matches for document sections(FunctionMatchRFCResult) that the code may related to. NOTE if the code is only business related(i.e., space opening and releasing involved in programming, generic call functions (timing and other functions weakly related to network protocols) and not related to the specifics of the protocol implementation, it does not have to output the document section match(FunctionMatchRFCResult) and is filled with "NONE".

Retrieve document sections Thinking Chain: The function code is matched with the RFC document section, and the thinking chain is provided to help you solve the problem better:
	1. Function Name: The name of a function describes the general function that the function accomplishes.
	2. Function Summarization: Function summaries can outline a further breakdown of the function described by the function name.
	3. Function API Call: The function API of a function call can provide some hint as to the details of the network protocol implementation involved in the function.
	4. Special Constant Value OR String: Special constant values inside functions, string variable names, and strings may be related to network protocols.
	5. Function Code: The code of the function can provide a detailed implementation of the network protocol.
Generate Function Information Collection with JSON Format:

{
	"FunctionIndex": "(FILL WITH "File count" with less than four bits are indexed with zeros to make up the four bits.)",
	"FunctionName": "(Full Function Code Name)",
	"FunctionSummarization": [
		"(Function Summary Phrase1)",
		"(Function Summary Phrase2)",
		"(...)"
	],
	"FunctionMatchRFCResult": [
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 1)",
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 2)",
		"(...)"
	],
}

ATTENTION: Remember YOU MUST ONLY output the Function Information Collection result.
