Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 1967
// Total lines: 221

//----- (00000001400F2724) ----------------------------------------------------
void __fastcall DnsOls_DetectResignChanges(
        __int64 a1,
        unsigned int a2,
        const void *a3,
        __int64 a4,
        _DWORD *a5,
        _DWORD *a6)
{
  _DWORD *v6; // r13
  size_t v8; // r15
  bool v10; // bp
  unsigned int v11; // r8d
  int v12; // ecx
  int v13; // eax
  CDnsClientSubnetRecordsTrie *v14; // rdi
  const char *v15; // rax
  bool v16; // zf
  int v17; // ecx
  CDnsClientSubnetRecordsTrie *v18; // rcx
  unsigned __int16 v19; // dx
  int DNSKEYsFromDirectory; // r9d
  int v21; // eax
  const char *v22; // rax
  int v23; // edi
  __int64 v24; // rdx
  unsigned int v25; // ecx
  unsigned __int16 *v26[2]; // [rsp+40h] [rbp-48h] BYREF
  __int128 v27; // [rsp+50h] [rbp-38h] BYREF

  v6 = a6;
  v8 = a2;
  *a6 = 0;
  if ( *(_QWORD *)(a1 + 40) )
  {
    v10 = 0;
    if ( (*(_BYTE *)(a1 + 388) & 1) == 0 )
      v10 = *a5 == 1;
    v11 = *(_DWORD *)(a1 + 1040);
    v12 = (v11 >> 3) & 1;
    v13 = (v11 >> 2) & 1;
    if ( v13 != v12 )
    {
      v14 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        v15 = "unsigned";
        if ( v12 )
          v15 = "signed";
        WPP_SF_ss(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0xB8u,
          (__int64)&WPP_4a0a7bf065bf32df4bbeec8f9c7ea0c3_Traceguids,
          *(const char **)(a1 + 16),
          (__int64)v15);
        v14 = WPP_GLOBAL_Control;
      }
      v16 = (*(_BYTE *)(a1 + 1040) & 8) == 0;
      *a5 = 1;
      if ( v16 )
        v10 = 1;
      goto LABEL_45;
    }
    if ( *(_DWORD *)(a1 + 372) != 1 || !v13 )
      goto LABEL_44;
    if ( *a5 )
    {
      v14 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
      {
        goto LABEL_38;
      }
      WPP_SF_s(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0xB9u,
        (__int64)&WPP_4a0a7bf065bf32df4bbeec8f9c7ea0c3_Traceguids,
        *(const char **)(a1 + 16));
LABEL_37:
      v14 = WPP_GLOBAL_Control;
LABEL_38:
      if ( (*(_BYTE *)(a1 + 388) & 1) == 0 )
        goto LABEL_45;
      DNSKEYsFromDirectory = DnsOls_ReadDNSKEYsFromDirectory(a1, *(_QWORD *)(a1 + 40));
      if ( DNSKEYsFromDirectory )
      {
        v14 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x80000) == 0
          || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
        {
          goto LABEL_45;
        }
        WPP_SF_Ds(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0xBCu,
          (__int64)&WPP_4a0a7bf065bf32df4bbeec8f9c7ea0c3_Traceguids,
          DNSKEYsFromDirectory,
          *(_QWORD *)(a1 + 16));
      }
LABEL_44:
      v14 = WPP_GLOBAL_Control;
LABEL_45:
      if ( (*(_BYTE *)(a1 + 1040) & 0x10) != 0
        && (*(_DWORD *)(a1 + 1096) != (_DWORD)v8 || (_DWORD)v8 && memcmp_0(*(const void **)(a1 + 1088), a3, v8)) )
      {
        if ( v14 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)v14 + 17) & 0x400) != 0
          && *((_BYTE *)v14 + 65) >= 4u )
        {
          WPP_SF_s(
            *((_QWORD *)v14 + 7),
            0xBDu,
            (__int64)&WPP_4a0a7bf065bf32df4bbeec8f9c7ea0c3_Traceguids,
            *(const char **)(a1 + 16));
        }
        Mem_Free(*(_QWORD **)(a1 + 1088), 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\olscore.cpp", 6803);
        *(_QWORD *)(a1 + 1088) = a3;
        *(_DWORD *)(a1 + 1096) = v8;
        *v6 = 1;
        if ( *(_DWORD *)(a1 + 372) == 1 )
        {
          v21 = *(_DWORD *)(a1 + 1040);
          if ( (v21 & 4) != 0 )
          {
            *a5 = 1;
            *(_DWORD *)(a1 + 1040) = v21 | 0x8000;
          }
        }
        v14 = WPP_GLOBAL_Control;
      }
      if ( v14 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)v14 + 17) & 0x400) != 0
        && *((_BYTE *)v14 + 65) >= 4u )
      {
        v22 = "does not";
        if ( *a5 )
          v22 = "does";
        WPP_SF_ss(
          *((_QWORD *)v14 + 7),
          0xBEu,
          (__int64)&WPP_4a0a7bf065bf32df4bbeec8f9c7ea0c3_Traceguids,
          *(const char **)(a1 + 16),
          (__int64)v22);
      }
      if ( *a5 )
      {
        v23 = *(_DWORD *)(a1 + 1100);
        if ( (*(_BYTE *)(a1 + 1040) & 2) != 0 )
          v10 = 1;
        DnsOls_MarkZoneForResign(a1, v10);
        if ( (*(_BYTE *)(a1 + 1040) & 2) == 0 )
        {
          v25 = *(_DWORD *)(a1 + 1100);
          if ( v23 != v25 && v25 >= dword_1401B9714 )
          {
            LOWORD(a6) = 1025;
            v26[0] = *(unsigned __int16 **)(a1 + 24);
            v26[1] = (unsigned __int16 *)(v25 - dword_1401B9714);
            v27 = DNS_EVENT_DNSSEC_REPL_RESIGNING;
            Eventlog_LogEvent((__int64)&v27, v24, 2u, v26, (unsigned __int8 *)&a6, 0, 0, 0i64);
          }
        }
      }
      return;
    }
    v17 = (v11 >> 4) & 1;
    if ( ((*(_DWORD *)a4 >> 4) & 1) == v17 )
    {
      if ( !v17
        || (((unsigned __int8)v11 ^ (unsigned __int8)*(_DWORD *)a4) & 0x20) == 0
        && *(_BYTE *)(a4 + 4) == *(_BYTE *)(a1 + 1044)
        && *(_WORD *)(a4 + 6) == *(_WORD *)(a1 + 1046)
        && (v11 & 0x4000) == 0 )
      {
        goto LABEL_37;
      }
      v18 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
      {
        goto LABEL_36;
      }
      v19 = 187;
    }
    else
    {
      v18 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
      {
        goto LABEL_36;
      }
      v19 = 186;
    }
    WPP_SF_s(
      *((_QWORD *)v18 + 7),
      v19,
      (__int64)&WPP_4a0a7bf065bf32df4bbeec8f9c7ea0c3_Traceguids,
      *(const char **)(a1 + 16));
LABEL_36:
    *(_DWORD *)(a1 + 1040) |= 0x8000u;
    *a5 = 1;
    goto LABEL_37;
  }
  if ( (*(_BYTE *)(a1 + 388) & 1) != 0 && a3 )
  {
    Mem_Free(*(_QWORD **)(a1 + 1088), 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\olscore.cpp", 6891);
    *(_QWORD *)(a1 + 1088) = a3;
    *(_DWORD *)(a1 + 1096) = v8;
    *v6 = 1;
  }
}
// 1400F2B36: variable 'v24' is possibly undefined
// 140187150: using guessed type __int128 DNS_EVENT_DNSSEC_REPL_RESIGNING;
// 1401B9714: using guessed type int dword_1401B9714;
