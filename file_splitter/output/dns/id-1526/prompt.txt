Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 1526
// Total lines: 555

//----- (00000001400BF564) ----------------------------------------------------
__int64 __fastcall Zone_CreateEx(
        __int64 *a1,
        __int64 a2,
        char *a3,
        unsigned int a4,
        int a5,
        _DWORD *a6,
        unsigned int a7,
        __int64 a8,
        char *a9,
        unsigned int a10,
        _DWORD *a11,
        __int64 a12,
        _QWORD *a13)
{
  __int64 v14; // r14
  int v15; // r12d
  char *v16; // r13
  unsigned int v17; // ebx
  __int64 v18; // rdi
  void *v19; // rax
  _QWORD *v20; // rax
  unsigned int inited; // esi
  CDnsClientSubnetRecordsTrie *v22; // rcx
  __int64 v23; // rbx
  __int64 v24; // r15
  __int64 *v25; // rax
  int v26; // ecx
  __int64 v27; // rax
  __int64 v28; // rax
  __int64 v29; // rbp
  __int64 v30; // rcx
  _BYTE *v31; // rax
  _QWORD *v32; // rax
  unsigned int v33; // r12d
  unsigned int v34; // eax
  _QWORD *v35; // rax
  HANDLE EventW; // rax
  unsigned __int16 v37; // dx
  _QWORD *v38; // rax
  unsigned __int16 v39; // dx
  _QWORD *v40; // rax
  __int64 v41; // rcx
  __int64 v42; // rdx
  __int64 v43; // rax
  char *v44; // rbp
  unsigned int v45; // r15d
  unsigned __int8 *CountNameFromDottedName; // rax
  unsigned __int8 *v47; // rsi
  char v48; // al
  int v49; // r14d
  _QWORD *v50; // rax
  _DWORD *v51; // rdx
  int v52; // ebx
  unsigned int v53; // eax
  _DWORD *v54; // rcx
  __int16 v55; // bx
  int v56; // ecx
  void *v57; // rax
  int v58; // eax
  int v59; // eax
  __int64 v60; // rcx
  unsigned int v61; // ebx
  int v62; // ebx
  int v63; // eax
  __int64 v64; // rbx
  unsigned int v65; // eax
  LPVOID v66; // rax
  __int64 v68; // rax
  __int64 v69[8]; // [rsp+48h] [rbp-40h] BYREF
  int v71; // [rsp+98h] [rbp+10h]
  unsigned int v72; // [rsp+A8h] [rbp+20h] BYREF

  LODWORD(v14) = a4;
  v15 = a5 & 0x10000000;
  v16 = a3;
  v17 = a2;
  v18 = 0i64;
  v71 = (a5 & 0x10000000) != 0 ? 0x10000000 : 0;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x10) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    v19 = FormatLabelA(a4, a3);
    WPP_SF_Ds(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0xDu,
      (__int64)&WPP_e9a0d5dea449334d7c383477da81f939_Traceguids,
      v17,
      (__int64)v19);
  }
  v20 = a13;
  *a1 = 0i64;
  if ( v20 )
    *v20 = 0i64;
  if ( !(_DWORD)v14 )
  {
    v14 = -1i64;
    do
      ++v14;
    while ( v16[v14] );
  }
  if ( v17 >= 6 || !strncmp(v16, ".", (unsigned int)v14) && v17 - 3 <= 1 )
  {
    inited = 9611;
LABEL_12:
    v22 = WPP_GLOBAL_Control;
LABEL_13:
    v23 = 0i64;
LABEL_14:
    if ( v22 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)v22 + 68) & 0x10) != 0
      && *((_BYTE *)v22 + 65) >= 4u )
    {
      WPP_SF_D(*((_QWORD *)v22 + 7), 0x15u, (__int64)&WPP_e9a0d5dea449334d7c383477da81f939_Traceguids, inited);
    }
    goto LABEL_175;
  }
  v24 = a12;
  if ( a12 )
  {
    v25 = *(__int64 **)(a12 + 24);
    v26 = 0;
    if ( v25 == &g_Database )
      v27 = g_Database;
    else
      v27 = *v25;
    LOBYTE(v26) = *(_QWORD *)(v27 + 56) != 0i64;
  }
  else
  {
    if ( *(_QWORD *)(g_Database + 56) && v17 == 4 )
      goto LABEL_29;
    v26 = 0;
  }
  if ( v26 )
  {
LABEL_29:
    inited = 9562;
    goto LABEL_12;
  }
  v28 = Lookup_ZoneTreeNodeFromDottedNameEx(v16, v14, (v17 != 4 ? 0x2000000 : 0) | 0x11u, a12);
  v29 = v28;
  if ( v28 )
  {
    if ( v17 != 4 )
    {
      v23 = *(_QWORD *)(v28 + 56);
      inited = 9609;
      goto LABEL_37;
    }
    v30 = *(_QWORD *)(v28 + 56);
    if ( *(_DWORD *)(v30 + 372) != 4 )
    {
      v69[0] = 0i64;
      v31 = Lookup_ZoneNodeFromDotted((_QWORD *)v30, v16, v14, 17, v69, 0i64);
      if ( (v31 || (v31 = (_BYTE *)v69[0]) != 0i64) && v31[96] != 67 )
      {
        v23 = *(_QWORD *)(v29 + 56);
        inited = 9604;
LABEL_37:
        v22 = WPP_GLOBAL_Control;
        goto LABEL_14;
      }
    }
  }
  if ( v15 )
  {
    inited = RpcUtil_SwitchSecurityContext(0);
    if ( inited )
      goto LABEL_135;
  }
  if ( !v24 )
    Zone_ListMigrateZones();
  if ( v15 )
  {
    inited = RpcUtil_SwitchSecurityContext(1);
    if ( inited )
      goto LABEL_135;
  }
  v32 = Mem_AllocZero(0x678ui64, 4i64, "ds\\dns\\server\\server\\zone.c", 602);
  v18 = (__int64)v32;
  if ( !v32 )
    goto LABEL_46;
  v33 = a7;
  v32[41] = v32;
  if ( v17 == 1 )
  {
    v34 = v32[130] & 0xFFFF161F;
    *(_DWORD *)(v18 + 1044) = 3278849;
    *(_QWORD *)(v18 + 1080) = 0i64;
    *(_DWORD *)(v18 + 1040) = v34 | 0x1610;
    *(_QWORD *)(v18 + 1048) = 0i64;
    *(_QWORD *)(v18 + 1056) = 0i64;
    *(_DWORD *)(v18 + 1064) = 3600;
    *(_DWORD *)(v18 + 1068) = 43200;
    *(_DWORD *)(v18 + 1072) = v33 != 0 ? 0x2A300 : 0;
    *(_QWORD *)(v18 + 1088) = 0i64;
    *(_DWORD *)(v18 + 1096) = 0;
    *(_QWORD *)(v18 + 1136) = 0i64;
  }
  v35 = Mem_Alloc(0x10u, 12i64, "ds\\dns\\server\\server\\zone.c", 655);
  *(_QWORD *)(v18 + 856) = v35;
  if ( !v35 )
  {
LABEL_46:
    inited = 14;
    goto LABEL_12;
  }
  *v35 = -1i64;
  v35[1] = -1i64;
  EventW = CreateEventW(0i64, 0, 0, 0i64);
  *(_QWORD *)(v18 + 408) = EventW;
  if ( !EventW )
  {
    v22 = WPP_GLOBAL_Control;
    inited = 14;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x10) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
    {
      goto LABEL_13;
    }
    v37 = 14;
    goto LABEL_55;
  }
  v38 = Lock_Create();
  *(_QWORD *)(v18 + 416) = v38;
  if ( !v38 )
  {
    v22 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x10) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
    {
      goto LABEL_62;
    }
    v39 = 15;
LABEL_61:
    WPP_SF_(*((_QWORD *)v22 + 7), v39, (__int64)&WPP_e9a0d5dea449334d7c383477da81f939_Traceguids);
    v22 = WPP_GLOBAL_Control;
LABEL_62:
    inited = 14;
    goto LABEL_13;
  }
  v40 = Lock_Create();
  *(_QWORD *)(v18 + 312) = v40;
  if ( !v40 )
  {
    v22 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x10) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
    {
      goto LABEL_62;
    }
    v39 = 16;
    goto LABEL_61;
  }
  *(_DWORD *)(v18 + 372) = v17;
  inited = Init_ScopeMap((_QWORD *)(v18 + 160), (__int64 *)(v18 + 168), 0);
  if ( !inited )
  {
    *(_QWORD *)(v18 + 200) = v24;
    if ( v24 )
      *(_DWORD *)(v18 + 304) = 0;
    *(_QWORD *)(v18 + 208) = 0i64;
    *(_QWORD *)(v18 + 208) = operator new[](0x50ui64, (const struct std::nothrow_t *)&std::nothrow);
    v41 = 0i64;
    v42 = 5i64;
    do
    {
      v43 = *(_QWORD *)(v18 + 208);
      *(_QWORD *)(v41 + v43) = 0i64;
      *(_QWORD *)(v41 + v43 + 8) = 0i64;
      v41 += 16i64;
      --v42;
    }
    while ( v42 );
    inited = Init_PolicyMap((_QWORD *)(v18 + 216), 0i64, 0);
    if ( inited )
    {
      v22 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
        goto LABEL_174;
      if ( (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x10) == 0 || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
        goto LABEL_13;
      v37 = 19;
LABEL_55:
      WPP_SF_(*((_QWORD *)v22 + 7), v37, (__int64)&WPP_e9a0d5dea449334d7c383477da81f939_Traceguids);
      v22 = WPP_GLOBAL_Control;
      goto LABEL_13;
    }
    inited = Init_PolicyMap((_QWORD *)(v18 + 256), a2, 1);
    if ( inited )
    {
      v22 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
        goto LABEL_174;
      if ( (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x10) == 0 || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
        goto LABEL_13;
      v37 = 20;
      goto LABEL_55;
    }
    if ( v33 == 15 )
      *(_DWORD *)(v18 + 396) |= 4u;
    *(_BYTE *)(v18 + 868) = 48;
    *(_DWORD *)(v18 + 396) |= 0x2000u;
    inited = Zone_LockForWriteEx(v18, 1, 0, (__int64)"ds\\dns\\server\\server\\zone.c", 23);
    if ( !inited )
    {
      if ( v17 )
      {
        v44 = a9;
      }
      else
      {
        LODWORD(v14) = 0;
        v16 = ".";
        v44 = a9;
        if ( !a9 && !v33 )
        {
          v44 = "cache.dns";
          v45 = 0;
          goto LABEL_96;
        }
      }
      v45 = a10;
LABEL_96:
      inited = setZoneName(v18, v16, v14);
      if ( inited )
        goto LABEL_135;
      if ( g_isRegisteredForUTC == 1 )
      {
        CountNameFromDottedName = Name_CreateCountNameFromDottedName(v16, 0);
        v47 = CountNameFromDottedName;
        if ( CountNameFromDottedName )
        {
          v48 = Name_ResourceTypeForCountName((struct _CountName *)CountNameFromDottedName);
          if ( (v48 & 1) != 0 )
            _InterlockedAdd(&dword_1401B95E0, 1u);
          if ( (v48 & 2) != 0 )
            _InterlockedAdd(&dword_1401B95DC, 1u);
          Mem_Free(v47, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\dnstelemetry.cpp", 276);
        }
      }
      if ( !v17 || v17 == 5 )
      {
        v50 = NTree_InitializeEx(0);
        if ( !v50 )
        {
          v23 = 0i64;
          inited = 14;
          goto LABEL_37;
        }
        if ( v17 )
          v50[7] = v18;
        *(_QWORD *)(v18 + 40) = v50;
        *(_QWORD *)(v18 + 48) = v50;
        *((_DWORD *)v50 + 23) |= 0x10u;
      }
      else
      {
        inited = Zone_RootCreate(v18, a13);
        if ( inited )
          goto LABEL_135;
        if ( g_bRegistryWriteBack )
        {
          v49 = v71;
          if ( (*(_BYTE *)(v18 + 396) & 4) == 0 )
          {
            v72 = v17;
            Reg_SetValue(v71, 0i64, v18, "Type", 4u, (BYTE *)&v72, 4u);
          }
LABEL_116:
          if ( (unsigned int)(*(_DWORD *)(v18 + 372) - 2) <= 2 )
          {
            v51 = a6;
            v52 = *(_DWORD *)(v18 + 388);
            *(_DWORD *)(v18 + 388) = v52 ^ (v33 ^ v52) & 1;
            v53 = Zone_SetMasters(v18, v51, 0, v49);
            *(_DWORD *)(v18 + 388) &= ~1u;
            *(_DWORD *)(v18 + 388) |= v52 & 1;
            inited = v53;
            if ( v53 )
              goto LABEL_135;
          }
          v54 = a11;
          if ( a11 )
          {
            if ( *(_DWORD *)(v18 + 372) != 4 )
              goto LABEL_124;
            *(_DWORD *)(v18 + 1556) = *a11;
            *(_DWORD *)(v18 + 1160) ^= (*(_DWORD *)(v18 + 1160) ^ (32 * v54[1])) & 0x20;
          }
          if ( *(_DWORD *)(v18 + 372) == 4 && !*(_DWORD *)(v18 + 1556) )
            *(_DWORD *)(v18 + 1556) = 3;
LABEL_124:
          v55 = a5;
          if ( (*(_BYTE *)(v18 + 396) & 4) == 0 )
          {
            inited = Zone_DatabaseSetup(v18, v33, v44, v45, a5, a8, 0, 0i64);
            if ( inited )
              goto LABEL_135;
          }
          if ( (unsigned int)(*(_DWORD *)(v18 + 372) - 2) <= 1 )
          {
            Xfr_InitializeSecondaryZoneTimeouts(v18, a2);
          }
          else if ( (*(_BYTE *)(v18 + 388) & 1) == 0 )
          {
            goto LABEL_131;
          }
          Xfr_InitializeSecondaryZoneControl();
LABEL_131:
          v56 = *(_DWORD *)(v18 + 372);
          *(_DWORD *)(v18 + 960) = 286331153;
          *(_DWORD *)(v18 + 1560) = 572662306;
          if ( v56 )
          {
            if ( v56 == 5 )
            {
              *(_DWORD *)(v18 + 396) &= ~0x2000u;
            }
            else
            {
              if ( (*(_BYTE *)(v18 + 388) & 1) != 0 || (v58 = 0, (v55 & 0x5000) != 0) )
                v58 = 1;
              if ( v56 != 1 || v58 )
                *(_BYTE *)(v18 + 385) = 2;
              else
                *(_BYTE *)(v18 + 385) = 1;
              if ( v56 == 1 )
                *(_DWORD *)(v18 + 380) = v58 != 0 ? 3 : 1;
              else
                *(_DWORD *)(v18 + 380) = 3;
              if ( dword_1401B9708 && (*(_BYTE *)(v18 + 396) & 4) == 0 )
                Zone_SetSecondaries(v18, *(_DWORD *)(v18 + 380), 0i64, *(unsigned __int8 *)(v18 + 385), 0i64, 1, v49);
              if ( dword_1401B98F8 )
              {
                v59 = _stricmp(*(const char **)(v18 + 16), "TrustAnchors");
                v60 = g_pTrustAnchorsZone;
                if ( !v59 )
                  v60 = v18;
                g_pTrustAnchorsZone = v60;
              }
            }
          }
          else
          {
            if ( !*(_QWORD *)(v18 + 144) )
            {
              v57 = Dns_StringCopyAllocate((char *)L"cache.dns", 0, 1i64, 1);
              *(_QWORD *)(v18 + 144) = v57;
              if ( !v57 )
                goto LABEL_134;
            }
            g_pCacheZone = v18;
          }
          if ( *(_DWORD *)(v18 + 372) == 1 )
          {
            *(_DWORD *)(v18 + 992) = dword_1401B9910;
            *(_DWORD *)(v18 + 996) = dword_1401B990C;
            LOBYTE(v61) = dword_1401B9908;
            if ( (*(_BYTE *)(v18 + 388) & 1) == 0 )
              v61 = (unsigned int)dword_1401B9908 >> 1;
            v62 = v61 & 1;
            if ( v62 && (*(_BYTE *)(v18 + 396) & 1) == 0 && !*(_DWORD *)(v18 + 1000) )
              Aging_ResetZoneAgingTime(v18);
            *(_DWORD *)(v18 + 396) &= ~1u;
            *(_DWORD *)(v18 + 396) |= v62 & 1;
          }
          Zone_ListInsertZone(v18);
          v63 = *(_DWORD *)(v18 + 372);
          if ( v63 && v63 != 5 )
          {
            v64 = *(_QWORD *)(v18 + 56);
            Dbase_LockEx(0i64, 2, (__int64)"ds\\dns\\server\\server\\zone.c", 123);
            *(_DWORD *)(v64 + 92) |= 0x110u;
            *(_QWORD *)(v64 + 56) = v18;
            Dbase_UnlockEx(0i64, 2, (__int64)"ds\\dns\\server\\server\\zone.c", 128);
          }
          if ( !_stricmp(*(const char **)(v18 + 16), "GlobalNames") )
            Gnz_LocalGlobalNamesZoneLoaded(v18);
          v65 = *(_DWORD *)(v18 + 372) - 1;
          *(_QWORD *)(v18 + 1648) = 0i64;
          if ( v65 <= 1 )
          {
            v66 = Mem_Alloc(0x5A8u, 16i64, "ds\\dns\\server\\server\\zone.c", 1176);
            *(_QWORD *)(v18 + 1648) = v66;
            if ( !v66 )
            {
LABEL_134:
              inited = 14;
              goto LABEL_135;
            }
            Zone_Stats_Initialize((__int64)v66);
          }
          *a1 = v18;
          return 0i64;
        }
      }
      v49 = v71;
      goto LABEL_116;
    }
LABEL_135:
    v23 = 0i64;
    goto LABEL_37;
  }
  v22 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
  {
    if ( (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x10) == 0 || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
      goto LABEL_13;
    v37 = 17;
    goto LABEL_55;
  }
LABEL_174:
  v23 = 0i64;
LABEL_175:
  if ( v18 )
  {
    v68 = g_pCacheZone;
    if ( v18 == g_pCacheZone )
      v68 = 0i64;
    g_pCacheZone = v68;
    if ( *(char *)(v18 + 428) < 0 && *(_DWORD *)(v18 + 404) == GetCurrentThreadId() )
      Zone_TransferWriteLockEx(v18);
    _InterlockedExchange((volatile __int32 *)(v18 + 432), 255);
    Zone_Free(v18, a2, (__int64)a3);
  }
  *a1 = 0i64;
  if ( a13 )
  {
    if ( !*a13 )
      *a13 = v23;
  }
  return inited;
}
// 1400BFA9B: variable 'a2' is possibly undefined
// 1400C003F: variable 'a3' is possibly undefined
// 1401B805C: using guessed type int g_bRegistryWriteBack;
// 1401B8C48: using guessed type __int64 g_pTrustAnchorsZone;
// 1401B9190: using guessed type int g_isRegisteredForUTC;
// 1401B95DC: using guessed type int dword_1401B95DC;
// 1401B95E0: using guessed type int dword_1401B95E0;
// 1401B9708: using guessed type int dword_1401B9708;
// 1401B98F8: using guessed type int dword_1401B98F8;
// 1401B9908: using guessed type int dword_1401B9908;
// 1401B990C: using guessed type int dword_1401B990C;
// 1401B9910: using guessed type int dword_1401B9910;
// 1401EC600: using guessed type __int64 g_Database;
// 1401EC628: using guessed type __int64 g_pCacheZone;
// 1400BF564: using guessed type __int64 var_40[8];
##############################
Role: Let's assume that you are an advanced reverse engineer and you are reverse engineering a network driver using IDA Pro, and you are also familiar with the RFC documentation. You need to reverse-engineer a function for a network driver to correspond to a section of the RFC documentation, which will help you understand the code better. The driver you're reversing is Schannel.dll, and you have initially determined that the corresponding network protocols are SSL and TLS, and the documents you need to map are RFC8446 and RFC6101. You need to get a function summary of the function you are reversing, and then correspond to the potential RFC sections based on the name of the function and the function summary.
Function Background: The function is reverse engineered from the driver file Schannel.dll on Windows platform. Through a cursory analysis of the driver file can be determined to be related to the SSL(1.3), TLS(3.0) protocol, that is, with RFC8446, RFC6101 strong correlation.

Output Function Summary: Summarizes the function's functionality with several phrases instead of sentences, focuses on covering the function's control flow information, and highlights the protocol function points implemented by the function. Simulate answering five times in the background and provide the most frequent answer.

Retrieve document sections: giving matches for document sections(FunctionMatchRFCResult) that the code may related to. NOTE if the code is only business related(i.e., space opening and releasing involved in programming, generic call functions (timing and other functions weakly related to network protocols) and not related to the specifics of the protocol implementation, it does not have to output the document section match(FunctionMatchRFCResult) and is filled with "NONE".

Retrieve document sections Thinking Chain: The function code is matched with the RFC document section, and the thinking chain is provided to help you solve the problem better:
	1. Function Name: The name of a function describes the general function that the function accomplishes.
	2. Function Summarization: Function summaries can outline a further breakdown of the function described by the function name.
	3. Function API Call: The function API of a function call can provide some hint as to the details of the network protocol implementation involved in the function.
	4. Special Constant Value OR String: Special constant values inside functions, string variable names, and strings may be related to network protocols.
	5. Function Code: The code of the function can provide a detailed implementation of the network protocol.
Generate Function Information Collection with JSON Format:

{
	"FunctionIndex": "(FILL WITH "File count" with less than four bits are indexed with zeros to make up the four bits.)",
	"FunctionName": "(Full Function Code Name)",
	"FunctionSummarization": [
		"(Function Summary Phrase1)",
		"(Function Summary Phrase2)",
		"(...)"
	],
	"FunctionMatchRFCResult": [
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 1)",
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 2)",
		"(...)"
	],
}

ATTENTION: Remember YOU MUST ONLY output the Function Information Collection result.
