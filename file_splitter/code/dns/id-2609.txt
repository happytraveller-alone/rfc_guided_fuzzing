//----- (00000001401345B0) ----------------------------------------------------
__int64 *__fastcall CDnsPolicy_TimeofDayCriteriaTree::GetCriteriaNodes(__int64 a1, unsigned __int16 a2)
{
  __int64 *v4; // rax
  __int64 *v5; // rbx
  _QWORD *v6; // rax
  __int64 v7; // rcx
  __int64 v8; // rdi
  _QWORD *v9; // rax
  __int64 v10; // rdx
  char pExceptionObject[32]; // [rsp+28h] [rbp-20h] BYREF
  __int64 *v13; // [rsp+60h] [rbp+18h] BYREF

  v4 = (__int64 *)operator new(0x18ui64);
  v5 = v4;
  v13 = v4;
  if ( v4 )
  {
    v4[1] = 0i64;
    v6 = operator new(0x18ui64);
    if ( !v6 )
    {
      std::bad_alloc::bad_alloc((std::bad_alloc *)pExceptionObject, 0i64);
      CxxThrowException_0(pExceptionObject, (_ThrowInfo *)&TI2_AVbad_alloc_std__);
    }
    *v5 = (__int64)v6;
    *v6 = v6;
    *(_QWORD *)(*v5 + 8) = *v5;
  }
  else
  {
    v5 = 0i64;
  }
  v7 = **(_QWORD **)(a1 + 8);
  if ( *(_QWORD *)(v7 + 8i64 * a2) )
  {
    v13 = *(__int64 **)(v7 + 8i64 * a2);
    v8 = *v5;
    v9 = std::_List_val<CDNSPolicyCriteria *>::_Buynode(v7, *v5, *(_QWORD *)(*v5 + 8), &v13);
    v10 = v5[1];
    if ( v10 == 0x1FFFFFFFFFFFFFFEi64 )
      std::_Xlength_error("list<T> too long");
    v5[1] = v10 + 1;
    *(_QWORD *)(v8 + 8) = v9;
    *(_QWORD *)v9[1] = v9;
  }
  return v5;
}
