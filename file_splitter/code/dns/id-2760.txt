//----- (00000001401454D0) ----------------------------------------------------
__int64 __fastcall CDNSPolicyCriteriaFqdn::AddCriteria(
        CDNSPolicyCriteriaFqdn *this,
        struct _PolicyCriteriaList *a2,
        char *a3)
{
  char *v3; // rax
  int v6; // ebx
  unsigned int v8; // r12d
  __int64 v9; // rax
  unsigned int v10; // r14d
  __int64 *v11; // rax
  __int64 v12; // r8
  const char *v13; // r9
  __int64 v14; // r15
  _QWORD *v15; // rax
  __int64 v16; // rdx
  __int64 v17; // rax
  unsigned int v18; // r14d
  __int64 *v19; // rax
  __int64 v20; // r8
  const char *v21; // r9
  __int64 v22; // r15
  _QWORD *v23; // rax
  __int64 v24; // rdx
  unsigned __int64 v25; // r8
  void *v27[3]; // [rsp+48h] [rbp-38h] BYREF
  unsigned __int64 v28; // [rsp+60h] [rbp-20h]

  v3 = a3;
  v6 = 0;
  if ( *((_DWORD *)a2 + 1) != 4 )
    return 87i64;
  v8 = 0;
  if ( *(_DWORD *)a2 )
  {
    do
    {
      v9 = *((_QWORD *)a2 + 1);
      if ( *(_DWORD *)(v9 + 16i64 * v8) == 1 )
      {
        v10 = 0;
        if ( *(_DWORD *)(v9 + 16i64 * v8 + 4) )
        {
          do
          {
            if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
              && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
            {
              v11 = (__int64 *)CDnsPolicy::Name(*((const void ***)this + 2), (__int64)v27);
              v12 = (__int64)v11;
              v6 |= 1u;
              if ( (unsigned __int64)v11[3] >= 8 )
                v12 = *v11;
              v13 = *(const char **)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 16i64 * v8 + 8) + 8i64 * v10);
              if ( *((_QWORD *)v13 + 3) >= 0x10ui64 )
                v13 = *(const char **)v13;
              WPP_SF_sS(
                *((_QWORD *)WPP_GLOBAL_Control + 7),
                0x3Fu,
                (__int64)&WPP_42dbba61d26d3062f1ad4e084cdc81fe_Traceguids,
                v13,
                v12);
            }
            if ( (v6 & 1) != 0 )
            {
              v6 &= ~1u;
              if ( v28 >= 8 )
                operator delete(v27[0]);
            }
            v14 = *((_QWORD *)this + 8);
            v15 = std::_List_val<std::string>::_Buynode(
                    v10,
                    v14,
                    *(_QWORD *)(v14 + 8),
                    *(const void ***)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 16i64 * v8 + 8) + 8i64 * v10));
            v16 = *((_QWORD *)this + 9);
            if ( v16 == 0x666666666666665i64 )
              std::_Xlength_error("list<T> too long");
            *((_QWORD *)this + 9) = v16 + 1;
            *(_QWORD *)(v14 + 8) = v15;
            *(_QWORD *)v15[1] = v15;
            ++v10;
          }
          while ( v10 < *(_DWORD *)(*((_QWORD *)a2 + 1) + 16i64 * v8 + 4) );
        }
      }
      v17 = *((_QWORD *)a2 + 1);
      if ( *(_DWORD *)(v17 + 16i64 * v8) == 2 )
      {
        v18 = 0;
        if ( *(_DWORD *)(v17 + 16i64 * v8 + 4) )
        {
          do
          {
            if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
              && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
            {
              v19 = (__int64 *)CDnsPolicy::Name(*((const void ***)this + 2), (__int64)v27);
              v20 = (__int64)v19;
              v6 |= 2u;
              if ( (unsigned __int64)v19[3] >= 8 )
                v20 = *v19;
              v21 = *(const char **)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 16i64 * v8 + 8) + 8i64 * v18);
              if ( *((_QWORD *)v21 + 3) >= 0x10ui64 )
                v21 = *(const char **)v21;
              WPP_SF_sS(
                *((_QWORD *)WPP_GLOBAL_Control + 7),
                0x40u,
                (__int64)&WPP_42dbba61d26d3062f1ad4e084cdc81fe_Traceguids,
                v21,
                v20);
            }
            if ( (v6 & 2) != 0 )
            {
              v6 &= ~2u;
              if ( v28 >= 8 )
                operator delete(v27[0]);
            }
            v22 = *((_QWORD *)this + 11);
            v23 = std::_List_val<std::string>::_Buynode(
                    v18,
                    v22,
                    *(_QWORD *)(v22 + 8),
                    *(const void ***)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 16i64 * v8 + 8) + 8i64 * v18));
            v24 = *((_QWORD *)this + 12);
            if ( v24 == 0x666666666666665i64 )
              std::_Xlength_error("list<T> too long");
            *((_QWORD *)this + 12) = v24 + 1;
            *(_QWORD *)(v22 + 8) = v23;
            *(_QWORD *)v23[1] = v23;
            ++v18;
          }
          while ( v18 < *(_DWORD *)(*((_QWORD *)a2 + 1) + 16i64 * v8 + 4) );
        }
      }
      ++v8;
    }
    while ( v8 < *(_DWORD *)a2 );
    v3 = a3;
  }
  v25 = -1i64;
  do
    ++v25;
  while ( *(_WORD *)&v3[2 * v25] );
  std::wstring::assign((char *)this + 24, v3, v25);
  return 0i64;
}
// 140184CA8: using guessed type void __stdcall operator delete(void *);
