//----- (00000001400B77D8) ----------------------------------------------------
__int64 __fastcall Up_ExecuteUpdateEx(const char **a1, __int64 a2, int a3, int a4, __int64 a5, char a6)
{
  int v10; // r12d
  CDnsClientSubnetRecordsTrie *v11; // rax
  unsigned int v12; // ebp
  const char *v13; // rcx
  unsigned int refreshed; // edi
  const char *v15; // rcx
  int v16; // edi
  unsigned int v17; // eax
  const char *v18; // rcx
  int v20; // r9d

  v10 = 0;
  v11 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
  {
    if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x80000) == 0 )
      goto LABEL_8;
    if ( *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_s(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x36u,
        (__int64)&WPP_40fcce62f6f439b0ec75be29cae6130a_Traceguids,
        a1[2]);
      v11 = WPP_GLOBAL_Control;
    }
  }
  if ( (*((_DWORD *)v11 + 17) & 0x80000) != 0 && *((_BYTE *)v11 + 65) >= 5u )
    Dbg_UpdateList("List before execution:", a2);
LABEL_8:
  if ( (a3 & 0x2000000) == 0 )
  {
    v12 = 0;
    if ( (a3 & 0x202) != 0 )
    {
      v12 = 10000;
    }
    else if ( (a3 & 0x20) != 0 )
    {
      v12 = 120000;
    }
    if ( (a3 & 0x8000000) == 0 && *((_DWORD *)a1 + 93) == 1 && ((_BYTE)a1[130] & 4) != 0 )
    {
      v13 = (const char *)a1;
      if ( a1[41] )
        v13 = a1[41];
      refreshed = Zone_LockForRPCSeqEx((__int64)v13, v12);
      if ( refreshed )
      {
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x80000) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          WPP_SF_Ds(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x37u,
            (__int64)&WPP_40fcce62f6f439b0ec75be29cae6130a_Traceguids,
            refreshed,
            (__int64)a1[2]);
        }
LABEL_56:
        Up_FreeUpdatesInUpdateList(a2);
        return refreshed;
      }
      v10 = 1;
    }
    refreshed = Zone_LockForWriteEx((__int64)a1, 1, v12, a5, a6);
    if ( refreshed )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x80000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_Ds(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x38u,
          (__int64)&WPP_40fcce62f6f439b0ec75be29cae6130a_Traceguids,
          refreshed,
          (__int64)a1[2]);
      }
      goto LABEL_51;
    }
    if ( (a3 & 0x8000000) == 0 && *((_DWORD *)a1 + 93) == 1 && ((_BYTE)a1[130] & 4) != 0 )
    {
      refreshed = DnsOls_RefreshAllDnsKeyPairObject((struct _zone_info *)a1);
      if ( refreshed )
      {
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x80000) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          WPP_SF_sd(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x39u,
            (__int64)&WPP_40fcce62f6f439b0ec75be29cae6130a_Traceguids,
            a1[2]);
        }
        goto LABEL_50;
      }
    }
    if ( v10 )
    {
      if ( !a1 || (v15 = a1[41]) == 0i64 )
        v15 = (const char *)a1;
      Lock_ReleaseWrite(*((_QWORD *)v15 + 39));
      v10 = 0;
    }
  }
  *(_DWORD *)(a2 + 40) |= a3;
  v16 = *(_DWORD *)(a2 + 40);
  Aging_InitZoneUpdate((__int64)a1, a2);
  if ( (*((_BYTE *)a1 + 388) & 1) != 0 )
  {
    if ( (v16 & 2) != 0 || ((_BYTE)a1[49] & 3) == 2 && (v16 & 0xA00) == 0 )
      v17 = processDsSecureUpdate((__int64)a1, a2);
    else
      v17 = processDsUpdate((__int64)a1, a2);
  }
  else
  {
    v17 = processNonDsUpdate((__int64)a1, (_QWORD *)a2);
  }
  refreshed = v17;
  if ( v17 )
  {
LABEL_50:
    Zone_UnlockAfterWriteEx((__int64)a1, 1, (__int64)"ds\\dns\\server\\server\\update.c", 44);
LABEL_51:
    if ( v10 )
    {
      if ( !a1 || (v18 = a1[41]) == 0i64 )
        v18 = (const char *)a1;
      Lock_ReleaseWrite(*((_QWORD *)v18 + 39));
    }
    goto LABEL_56;
  }
  Up_ApplyTempUpdatesToDatabase((__int64)a1, a2);
  LogRecordUpdatesEvent(a4, (__int64)a1, a2);
  Up_CompleteZoneUpdate((__int64)a1, a2, 0i64, v20);
  return 0i64;
}
// 1400B7B0B: variable 'v20' is possibly undefined
