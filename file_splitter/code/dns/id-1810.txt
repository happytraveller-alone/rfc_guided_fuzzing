//----- (00000001400E4BEC) ----------------------------------------------------
__int64 *__fastcall std::_Tree<std::_Tmap_traits<_CountName,std::unique_ptr<TrustPoint>,CountNameCompare,std::allocator<std::pair<_CountName const,std::unique_ptr<TrustPoint>>>,0>>::erase(
        __int64 a1,
        __int64 *a2,
        __int64 *a3)
{
  __int64 *v4; // rcx
  __int64 *v5; // rbx
  __int64 i; // r9
  __int64 j; // rax
  __int64 v8; // r8
  __int64 v9; // rdx
  __int64 v10; // rcx
  __int64 *v11; // rax
  __int64 v12; // rax
  __int64 v13; // rcx
  __int64 *v14; // rax
  char v15; // cl
  __int64 *v16; // rcx
  __int64 *v17; // rcx
  __int64 **v18; // rax
  __int64 v19; // r9
  __int64 v20; // rax
  __int64 *v21; // rcx
  __int64 v22; // rax
  __int64 **v23; // rax
  __int64 *v24; // rax
  __int64 *v25; // rcx
  __int64 **v26; // rax
  __int64 **v27; // r9
  __int64 **v28; // rax
  __int64 v29; // rax
  __int64 **v30; // rax
  struct _RTL_CRITICAL_SECTION *v31; // rcx
  __int64 v33; // [rsp+40h] [rbp+18h]

  if ( *((_BYTE *)a3 + 297) )
    std::_Xout_of_range("invalid map/set<T> iterator");
  v4 = a3 + 2;
  v5 = a3;
  i = a3[2];
  if ( *(_BYTE *)(i + 297) )
  {
    for ( i = a3[1]; !*(_BYTE *)(i + 297) && a3 == *(__int64 **)(i + 16); i = *(_QWORD *)(i + 8) )
      a3 = (__int64 *)i;
  }
  else
  {
    for ( j = *(_QWORD *)i; !*(_BYTE *)(j + 297); j = *(_QWORD *)j )
      i = j;
  }
  v33 = i;
  if ( *(_BYTE *)(*v5 + 297) )
  {
    v8 = *v4;
LABEL_16:
    v9 = v5[1];
    if ( !*(_BYTE *)(v8 + 297) )
      *(_QWORD *)(v8 + 8) = v9;
    if ( *(__int64 **)(qword_1401B9288 + 8) == v5 )
    {
      *(_QWORD *)(qword_1401B9288 + 8) = v8;
    }
    else if ( *(__int64 **)v9 == v5 )
    {
      *(_QWORD *)v9 = v8;
    }
    else
    {
      *(_QWORD *)(v9 + 16) = v8;
    }
    if ( *(__int64 **)qword_1401B9288 == v5 )
    {
      if ( *(_BYTE *)(v8 + 297) )
      {
        v10 = v9;
      }
      else
      {
        v11 = *(__int64 **)v8;
        v10 = v8;
        while ( !*((_BYTE *)v11 + 297) )
        {
          v10 = (__int64)v11;
          v11 = (__int64 *)*v11;
        }
      }
      *(_QWORD *)qword_1401B9288 = v10;
    }
    if ( *(__int64 **)(qword_1401B9288 + 16) == v5 )
    {
      if ( *(_BYTE *)(v8 + 297) )
      {
        v12 = v9;
      }
      else
      {
        v13 = *(_QWORD *)(v8 + 16);
        v12 = v8;
        while ( !*(_BYTE *)(v13 + 297) )
        {
          v12 = v13;
          v13 = *(_QWORD *)(v13 + 16);
        }
      }
      *(_QWORD *)(qword_1401B9288 + 16) = v12;
    }
    goto LABEL_48;
  }
  if ( *(_BYTE *)(*v4 + 297) )
  {
    v8 = *v5;
    goto LABEL_16;
  }
  v8 = *(_QWORD *)(i + 16);
  if ( (__int64 *)i == v5 )
    goto LABEL_16;
  *(_QWORD *)(*v5 + 8) = i;
  *(_QWORD *)i = *v5;
  if ( i == *v4 )
  {
    v9 = i;
  }
  else
  {
    v9 = *(_QWORD *)(i + 8);
    if ( !*(_BYTE *)(v8 + 297) )
      *(_QWORD *)(v8 + 8) = v9;
    *(_QWORD *)v9 = v8;
    *(_QWORD *)(i + 16) = *v4;
    *(_QWORD *)(*v4 + 8) = i;
  }
  if ( *(__int64 **)(qword_1401B9288 + 8) == v5 )
  {
    *(_QWORD *)(qword_1401B9288 + 8) = i;
  }
  else
  {
    v14 = (__int64 *)v5[1];
    if ( (__int64 *)*v14 == v5 )
      *v14 = i;
    else
      v14[2] = i;
  }
  *(_QWORD *)(i + 8) = v5[1];
  v15 = *(_BYTE *)(i + 296);
  *(_BYTE *)(i + 296) = *((_BYTE *)v5 + 296);
  *((_BYTE *)v5 + 296) = v15;
LABEL_48:
  if ( *((_BYTE *)v5 + 296) != 1 )
    goto LABEL_114;
  while ( v8 != *(_QWORD *)(qword_1401B9288 + 8) && *(_BYTE *)(v8 + 296) == 1 )
  {
    v16 = *(__int64 **)v9;
    if ( v8 == *(_QWORD *)v9 )
    {
      v16 = *(__int64 **)(v9 + 16);
      if ( !*((_BYTE *)v16 + 296) )
      {
        *((_BYTE *)v16 + 296) = 1;
        v17 = *(__int64 **)(v9 + 16);
        *(_BYTE *)(v9 + 296) = 0;
        *(_QWORD *)(v9 + 16) = *v17;
        if ( !*(_BYTE *)(*v17 + 297) )
          *(_QWORD *)(*v17 + 8) = v9;
        v17[1] = *(_QWORD *)(v9 + 8);
        if ( v9 == *(_QWORD *)(qword_1401B9288 + 8) )
        {
          *(_QWORD *)(qword_1401B9288 + 8) = v17;
        }
        else
        {
          v18 = *(__int64 ***)(v9 + 8);
          if ( (__int64 *)v9 == *v18 )
            *v18 = v17;
          else
            v18[2] = v17;
        }
        *v17 = v9;
        *(_QWORD *)(v9 + 8) = v17;
        v16 = *(__int64 **)(v9 + 16);
      }
      if ( !*((_BYTE *)v16 + 297) )
      {
        if ( *(_BYTE *)(*v16 + 296) != 1 || *(_BYTE *)(v16[2] + 296) != 1 )
        {
          if ( *(_BYTE *)(v16[2] + 296) == 1 )
          {
            *(_BYTE *)(*v16 + 296) = 1;
            v19 = *v16;
            *((_BYTE *)v16 + 296) = 0;
            *v16 = *(_QWORD *)(v19 + 16);
            v20 = *(_QWORD *)(v19 + 16);
            if ( !*(_BYTE *)(v20 + 297) )
              *(_QWORD *)(v20 + 8) = v16;
            *(_QWORD *)(v19 + 8) = v16[1];
            if ( v16 == *(__int64 **)(qword_1401B9288 + 8) )
            {
              *(_QWORD *)(qword_1401B9288 + 8) = v19;
            }
            else
            {
              v24 = (__int64 *)v16[1];
              if ( v16 == (__int64 *)v24[2] )
                v24[2] = v19;
              else
                *v24 = v19;
            }
            *(_QWORD *)(v19 + 16) = v16;
            v16[1] = v19;
            v16 = *(__int64 **)(v9 + 16);
          }
          *((_BYTE *)v16 + 296) = *(_BYTE *)(v9 + 296);
          *(_BYTE *)(v9 + 296) = 1;
          *(_BYTE *)(v16[2] + 296) = 1;
          v25 = *(__int64 **)(v9 + 16);
          *(_QWORD *)(v9 + 16) = *v25;
          if ( !*(_BYTE *)(*v25 + 297) )
            *(_QWORD *)(*v25 + 8) = v9;
          v25[1] = *(_QWORD *)(v9 + 8);
          if ( v9 == *(_QWORD *)(qword_1401B9288 + 8) )
          {
            *(_QWORD *)(qword_1401B9288 + 8) = v25;
          }
          else
          {
            v26 = *(__int64 ***)(v9 + 8);
            if ( (__int64 *)v9 == *v26 )
              *v26 = v25;
            else
              v26[2] = v25;
          }
          *v25 = v9;
LABEL_112:
          *(_QWORD *)(v9 + 8) = v25;
          break;
        }
LABEL_81:
        *((_BYTE *)v16 + 296) = 0;
      }
    }
    else
    {
      if ( !*((_BYTE *)v16 + 296) )
      {
        *((_BYTE *)v16 + 296) = 1;
        v21 = *(__int64 **)v9;
        *(_BYTE *)(v9 + 296) = 0;
        *(_QWORD *)v9 = v21[2];
        v22 = v21[2];
        if ( !*(_BYTE *)(v22 + 297) )
          *(_QWORD *)(v22 + 8) = v9;
        v21[1] = *(_QWORD *)(v9 + 8);
        if ( v9 == *(_QWORD *)(qword_1401B9288 + 8) )
        {
          *(_QWORD *)(qword_1401B9288 + 8) = v21;
        }
        else
        {
          v23 = *(__int64 ***)(v9 + 8);
          if ( (__int64 *)v9 == v23[2] )
            v23[2] = v21;
          else
            *v23 = v21;
        }
        v21[2] = v9;
        *(_QWORD *)(v9 + 8) = v21;
        v16 = *(__int64 **)v9;
      }
      if ( !*((_BYTE *)v16 + 297) )
      {
        if ( *(_BYTE *)(v16[2] + 296) != 1 || *(_BYTE *)(*v16 + 296) != 1 )
        {
          if ( *(_BYTE *)(*v16 + 296) == 1 )
          {
            *(_BYTE *)(v16[2] + 296) = 1;
            v27 = (__int64 **)v16[2];
            *((_BYTE *)v16 + 296) = 0;
            v16[2] = (__int64)*v27;
            if ( !*((_BYTE *)*v27 + 297) )
              (*v27)[1] = (__int64)v16;
            v27[1] = (__int64 *)v16[1];
            if ( v16 == *(__int64 **)(qword_1401B9288 + 8) )
            {
              *(_QWORD *)(qword_1401B9288 + 8) = v27;
            }
            else
            {
              v28 = (__int64 **)v16[1];
              if ( v16 == *v28 )
                *v28 = (__int64 *)v27;
              else
                v28[2] = (__int64 *)v27;
            }
            *v27 = v16;
            v16[1] = (__int64)v27;
            v16 = *(__int64 **)v9;
          }
          *((_BYTE *)v16 + 296) = *(_BYTE *)(v9 + 296);
          *(_BYTE *)(v9 + 296) = 1;
          *(_BYTE *)(*v16 + 296) = 1;
          v25 = *(__int64 **)v9;
          *(_QWORD *)v9 = *(_QWORD *)(*(_QWORD *)v9 + 16i64);
          v29 = v25[2];
          if ( !*(_BYTE *)(v29 + 297) )
            *(_QWORD *)(v29 + 8) = v9;
          v25[1] = *(_QWORD *)(v9 + 8);
          if ( v9 == *(_QWORD *)(qword_1401B9288 + 8) )
          {
            *(_QWORD *)(qword_1401B9288 + 8) = v25;
          }
          else
          {
            v30 = *(__int64 ***)(v9 + 8);
            if ( (__int64 *)v9 == v30[2] )
              v30[2] = v25;
            else
              *v30 = v25;
          }
          v25[2] = v9;
          goto LABEL_112;
        }
        goto LABEL_81;
      }
    }
    v8 = v9;
    v9 = *(_QWORD *)(v9 + 8);
  }
  *(_BYTE *)(v8 + 296) = 1;
LABEL_114:
  v31 = (struct _RTL_CRITICAL_SECTION *)v5[36];
  if ( v31 )
    TrustPoint::`scalar deleting destructor'(v31);
  operator delete(v5);
  if ( qword_1401B9290 )
    --qword_1401B9290;
  *a2 = v33;
  return a2;
}
// 140184CA8: using guessed type void __stdcall operator delete(void *);
// 1401B9288: using guessed type __int64 qword_1401B9288;
// 1401B9290: using guessed type __int64 qword_1401B9290;
