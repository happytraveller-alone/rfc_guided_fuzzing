//----- (0000000140105C98) ----------------------------------------------------
__int64 __fastcall DnsOls_UpdateExistingNsec3(
        struct _zone_info *a1,
        __int64 a2,
        __int64 a3,
        struct _DnsTreeNode *a4,
        __int64 a5,
        __int64 a6,
        __int128 *a7,
        __int64 a8,
        __int16 a9,
        struct _DnsUpdateList *a10)
{
  struct _DnsTreeNode *NextNsec3Node; // rbx
  _QWORD *v15; // rax
  unsigned int updated; // ebx
  char *v17; // rax
  __int128 v19; // [rsp+70h] [rbp-48h] BYREF
  __int64 v20[4]; // [rsp+80h] [rbp-38h] BYREF

  if ( a10 )
    DnsOls_CreateAppendUpdate(a10, a4, 0i64, 46);
  else
    RR_ListDeleteTypeNotInList((__int64)a4, 0x2Eu, 0, 0i64, 0);
  NextNsec3Node = DnsOls_FindNextNsec3Node(a1, a4);
  v19 = *a7;
  v15 = std::vector<unsigned short>::vector<unsigned short>(v20, a6);
  updated = CreateAndUpdateNsec3ForNode(
              (__int64)a1,
              a2,
              a3,
              a4,
              a5,
              (__int64)NextNsec3Node + 102,
              *((_BYTE *)NextNsec3Node + 101),
              (__int64)v15,
              (__int64)&v19,
              a10,
              a8,
              a9);
  if ( updated )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      v17 = Dbg_NodeName(a3);
      WPP_SF_s(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x1Du,
        (__int64)&WPP_41961b29e2683d0b96cfd252d798ca95_Traceguids,
        v17);
    }
    if ( *(_QWORD *)a6 )
      operator delete(*(void **)a6);
  }
  else
  {
    if ( *(_QWORD *)a6 )
      operator delete(*(void **)a6);
    updated = 0;
  }
  *(_QWORD *)a6 = 0i64;
  *(_QWORD *)(a6 + 8) = 0i64;
  *(_QWORD *)(a6 + 16) = 0i64;
  return updated;
}
// 140184CA8: using guessed type void __stdcall operator delete(void *);
// 140105C98: using guessed type __int64 var_38[4];
