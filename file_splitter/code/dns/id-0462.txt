//----- (000000014003B10C) ----------------------------------------------------
LDAP *__fastcall Ds_Connect(PWSTR HostName, char a2, _DWORD *a3)
{
  LDAP *v6; // rax
  LDAP *v7; // rsi
  ULONG LastError; // edi
  CDnsClientSubnetRecordsTrie *v9; // rcx
  unsigned __int16 v10; // dx
  int optionW; // eax
  CDnsClientSubnetRecordsTrie *v12; // rcx
  unsigned __int16 v13; // dx
  int v14; // eax
  int v15; // eax
  int v16; // eax
  LDAP *result; // rax
  int v18; // r9d
  int v19; // r9d
  __int64 v20; // rdx
  __int64 v21; // r8
  int v22; // r9d
  CDnsClientSubnetRecordsTrie *v23; // rcx
  int v24; // eax
  PVOID v25; // rcx
  CDnsClientSubnetRecordsTrie *v26; // r10
  int invalue; // [rsp+40h] [rbp-39h] BYREF
  PVOID pvContextBuffer; // [rsp+48h] [rbp-31h] BYREF
  PVOID v29; // [rsp+50h] [rbp-29h] BYREF
  PVOID pBuffer; // [rsp+58h] [rbp-21h] BYREF
  PVOID v31; // [rsp+60h] [rbp-19h] BYREF
  PVOID v32; // [rsp+68h] [rbp-11h]
  __int64 v33; // [rsp+70h] [rbp-9h]
  __int64 v34; // [rsp+78h] [rbp-1h]
  struct _SecHandle outvalue; // [rsp+80h] [rbp+7h] BYREF

  if ( a3 )
    *a3 = 0;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
  {
    WPP_SF_S(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x6Du,
      (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
      HostName);
  }
  v6 = ldap_initW(HostName, 0x185u);
  pvContextBuffer = v6;
  v7 = v6;
  if ( !v6 )
  {
    LastError = LdapGetLastError();
    v9 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
    {
      goto LABEL_52;
    }
    v10 = 110;
LABEL_12:
    WPP_SF_DS(
      *((_QWORD *)v9 + 7),
      v10,
      (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
      LastError,
      (__int64)HostName);
LABEL_52:
    if ( !LastError )
      LastError = GetLastError();
    v16 = Ds_ErrorHandler(LastError, 0i64, v7, 0);
    if ( a3 )
      *a3 = v16;
    return 0i64;
  }
  invalue = 1;
  ldap_set_optionW(v6, 152, &invalue);
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x6Fu, (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids);
  }
  Service_ServiceControlAnnounceStart();
  LastError = ldap_connect(v7, 0i64);
  if ( LastError )
  {
    v9 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
    {
      goto LABEL_52;
    }
    v10 = 112;
    goto LABEL_12;
  }
  invalue = 3;
  ldap_set_optionW(v7, 17, &invalue);
  invalue = 180;
  ldap_set_optionW(v7, 4, &invalue);
  invalue = 0;
  ldap_set_optionW(v7, 8, &invalue);
  if ( (a2 & 2) != 0 )
  {
    optionW = ldap_get_optionW(v7, 146, &invalue);
    if ( optionW )
    {
      v12 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        v13 = 115;
        goto LABEL_29;
      }
    }
    else
    {
      invalue |= 1u;
      optionW = ldap_set_optionW(v7, 146, &invalue);
      if ( optionW )
      {
        v12 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          v13 = 113;
LABEL_29:
          WPP_SF_D(*((_QWORD *)v12 + 7), v13, (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids, optionW);
        }
      }
      else if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
             && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
             && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_Dq(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x72u,
          (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
          invalue);
      }
    }
  }
  if ( HostName )
  {
    v15 = ldap_bind_sW(v7, 0i64, 0i64, 0x486u);
  }
  else
  {
    v14 = Ds_DoLocalLdapBind(v7, 1);
    if ( !v14 )
      goto LABEL_57;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_D(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x74u,
        (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
        v14);
    }
    v15 = Ds_DoLocalLdapBind(v7, 0);
  }
  LastError = v15;
  if ( v15 )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_DS(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x75u,
        (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
        v15,
        (__int64)HostName);
    }
    Ds_LdapUnbind((LDAP **)&pvContextBuffer);
    v7 = (LDAP *)pvContextBuffer;
    goto LABEL_52;
  }
LABEL_57:
  if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0 )
  {
    outvalue.dwLower = 0i64;
    outvalue.dwUpper = 0i64;
    v32 = 0i64;
    v33 = 0i64;
    v34 = 0i64;
    pBuffer = 0i64;
    pvContextBuffer = 0i64;
    v31 = 0i64;
    v29 = 0i64;
    ldap_get_optionW(v7, 153, &outvalue);
    v18 = QueryContextAttributesW(&outvalue, 1u, &pBuffer);
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_DS(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x76u,
        (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
        v18,
        (__int64)pBuffer);
    }
    FreeContextBuffer(pBuffer);
    v19 = QueryContextAttributesW(&outvalue, 6u, &pvContextBuffer);
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_DS(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x77u,
        (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
        v19,
        (__int64)pvContextBuffer);
    }
    FreeContextBuffer(pvContextBuffer);
    v22 = QueryContextAttributesW(&outvalue, 5u, &v31);
    v23 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
    {
      if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0 && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_DSS(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x78u,
          (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
          v22,
          (__int64)v31,
          (__int64)v32);
        v23 = WPP_GLOBAL_Control;
      }
      if ( v23 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)v23 + 17) & 0x400) != 0
        && *((_BYTE *)v23 + 65) >= 4u )
      {
        WPP_SF_dDD(*((_QWORD *)v23 + 7), v20, v21, v33);
      }
    }
    FreeContextBuffer(v31);
    FreeContextBuffer(v32);
    v24 = QueryContextAttributesW(&outvalue, 0xAu, &v29);
    v25 = v29;
    if ( v29 )
    {
      v26 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
      {
        if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0 && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          WPP_SF_DDddd(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            *((unsigned __int16 *)v29 + 3),
            *((unsigned __int16 *)v29 + 2),
            v24);
          v25 = v29;
          v26 = WPP_GLOBAL_Control;
        }
        if ( v26 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)v26 + 17) & 0x400) != 0
          && *((_BYTE *)v26 + 65) >= 4u )
        {
          WPP_SF_SS(
            *((_QWORD *)v26 + 7),
            0x7Bu,
            (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
            *((const unsigned __int16 **)v25 + 2),
            *((_QWORD *)v25 + 3));
          v25 = v29;
        }
      }
      FreeContextBuffer(v25);
    }
  }
  byte_1401EC398 = 1;
  LazyCommitControl = (__int64)L"1.2.840.113556.1.4.619";
  dword_1401EC388 = 0;
  NoDsSvrReferralControl = (__int64)L"1.2.840.113556.1.4.1339";
  qword_1401EC450 = (__int64)&g_SecurityInformation_DGO;
  qword_1401EC3B0 = (__int64)&g_SecurityInformation_D;
  result = v7;
  qword_1401EC390 = 0i64;
  byte_1401EC438 = 0;
  dword_1401EC428 = 0;
  qword_1401EC430 = 0i64;
  SecurityDescriptorControl_DGO = (__int64)L"1.2.840.113556.1.4.801";
  byte_1401EC458 = 1;
  dword_1401EC448 = 5;
  SecurityDescriptorControl_D = (__int64)L"1.2.840.113556.1.4.801";
  byte_1401EC3B8 = 1;
  dword_1401EC3A8 = 5;
  return result;
}
// 14003B62D: variable 'v20' is possibly undefined
// 14003B62D: variable 'v21' is possibly undefined
// 14018BFC8: using guessed type wchar_t a12840113556146[23];
// 14018BFF8: using guessed type wchar_t a12840113556148[23];
// 14018C028: using guessed type wchar_t a12840113556141_0[24];
// 1401EC380: using guessed type __int64 LazyCommitControl;
// 1401EC388: using guessed type int dword_1401EC388;
// 1401EC390: using guessed type __int64 qword_1401EC390;
// 1401EC398: using guessed type char byte_1401EC398;
// 1401EC3A0: using guessed type __int64 SecurityDescriptorControl_D;
// 1401EC3A8: using guessed type int dword_1401EC3A8;
// 1401EC3B0: using guessed type __int64 qword_1401EC3B0;
// 1401EC3B8: using guessed type char byte_1401EC3B8;
// 1401EC420: using guessed type __int64 NoDsSvrReferralControl;
// 1401EC428: using guessed type int dword_1401EC428;
// 1401EC430: using guessed type __int64 qword_1401EC430;
// 1401EC438: using guessed type char byte_1401EC438;
// 1401EC440: using guessed type __int64 SecurityDescriptorControl_DGO;
// 1401EC448: using guessed type int dword_1401EC448;
// 1401EC450: using guessed type __int64 qword_1401EC450;
// 1401EC458: using guessed type char byte_1401EC458;
