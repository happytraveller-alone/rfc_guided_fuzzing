//----- (000000014015017C) ----------------------------------------------------
__int64 __fastcall std::_Hash<std::tr1::_Umap_traits<IDnsRRLStateKey *,IDnsRRLStateInfo *,std::_Hash_compare<IDnsRRLStateKey *,CDnsRRLStateKeyHasher,CDnsRRLStateKeyEqual>,std::allocator<std::pair<IDnsRRLStateKey * const,IDnsRRLStateInfo *>>,0>>::_Insert(
        __int64 a1,
        __int64 a2,
        _QWORD *a3,
        __int64 **a4)
{
  unsigned __int64 v5; // rax
  _QWORD *v6; // r9
  __int64 v7; // rbx
  __int64 v8; // rdi
  __int64 v9; // rax
  __int64 result; // rax
  __int64 **v11; // rax
  __int64 v12; // rcx
  __int64 *v13; // r8
  __int64 v14; // r8
  __int64 v15; // rcx
  __int64 ***v16; // rcx
  __int64 **v17; // rdx
  __int64 v18; // rax
  __int64 v19; // rdx
  float v20; // xmm0_4
  float v21; // xmm2_4
  int i; // eax
  _QWORD *v23; // rax
  __int64 v24; // rbx
  __int64 v25; // r9
  bool v26; // [rsp+20h] [rbp-48h]
  char v27[48]; // [rsp+38h] [rbp-30h] BYREF

  v5 = std::_Hash<std::tr1::_Umap_traits<IDnsRRLStateKey *,IDnsRRLStateInfo *,std::_Hash_compare<IDnsRRLStateKey *,CDnsRRLStateKeyHasher,CDnsRRLStateKeyEqual>,std::allocator<std::pair<IDnsRRLStateKey * const,IDnsRRLStateInfo *>>,0>>::_Hashval(
         a1,
         a3);
  v6 = (_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  v8 = 2 * v5;
  v9 = *(_QWORD *)(a1 + 32);
  if ( v7 == *(_QWORD *)(v9 + 8 * v8) || (v7 = **(_QWORD **)(v9 + 8 * v8 + 8), v7 == *(_QWORD *)(v9 + 8 * v8)) )
  {
LABEL_12:
    v11 = a4;
    v12 = (__int64)*a4;
    if ( (__int64 *)v7 != *a4 )
    {
      *a4[1] = v12;
      **(_QWORD **)(v12 + 8) = v7;
      **(_QWORD **)(v7 + 8) = a4;
      v13 = *(__int64 **)(v7 + 8);
      *(_QWORD *)(v7 + 8) = *(_QWORD *)(v12 + 8);
      *(_QWORD *)(v12 + 8) = a4[1];
      a4[1] = v13;
      v11 = a4;
    }
    v14 = *(_QWORD *)(a1 + 32);
    v15 = *(_QWORD *)(v14 + 8 * v8);
    if ( v15 == *v6 )
    {
      *(_QWORD *)(v14 + 8 * v8) = v11;
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v8 + 8) = v11;
    }
    else if ( v15 == v7 )
    {
      *(_QWORD *)(v14 + 8 * v8) = v11;
    }
    else
    {
      v16 = *(__int64 ****)(v14 + 8 * v8 + 8);
      v17 = *v16;
      *(_QWORD *)(v14 + 8 * v8 + 8) = *v16;
      if ( v17 != v11 )
        *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v8 + 8) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v8 + 8)
                                                                   + 8i64);
    }
    v18 = *(_QWORD *)(a1 + 16);
    v19 = *(_QWORD *)(a1 + 72);
    v20 = (float)(int)v18;
    if ( v18 < 0 )
      v20 = v20 + 1.8446744e19;
    v21 = (float)(int)v19;
    if ( v19 < 0 )
      v21 = v21 + 1.8446744e19;
    if ( (float)(v20 / v21) > *(float *)(a1 + 80) )
    {
      for ( i = 0; i < 3; ++i )
      {
        if ( (unsigned __int64)v19 >= 0xFFFFFFFFFFFFFFFi64 )
          break;
        v19 *= 2i64;
      }
      std::_Hash<std::_Hmap_traits<unsigned short,TrustAnchor,stdext::hash_compare<unsigned short,std::less<unsigned short>>,std::allocator<std::pair<unsigned short const,TrustAnchor>>,1>>::_Init(
        (_QWORD *)a1,
        v19);
      v23 = *(_QWORD **)(a1 + 8);
      if ( (_QWORD *)*v23 != v23 )
      {
        v24 = v23[1];
        do
        {
          v25 = **(_QWORD **)(a1 + 8);
          v26 = v25 == v24;
          std::_Hash<std::tr1::_Umap_traits<IDnsRRLStateKey *,IDnsRRLStateInfo *,std::_Hash_compare<IDnsRRLStateKey *,CDnsRRLStateKeyHasher,CDnsRRLStateKeyEqual>,std::allocator<std::pair<IDnsRRLStateKey * const,IDnsRRLStateInfo *>>,0>>::_Insert(
            a1,
            (__int64)v27,
            (_QWORD *)(v25 + 16),
            (__int64 **)v25);
        }
        while ( !v26 );
      }
    }
    *(_QWORD *)a2 = a4;
    *(_BYTE *)(a2 + 8) = 1;
    return a2;
  }
  else
  {
    while ( 1 )
    {
      v7 = *(_QWORD *)(v7 + 8);
      if ( (*(unsigned __int8 (__fastcall **)(_QWORD, _QWORD))(*(_QWORD *)*a3 + 80i64))(*a3, *(_QWORD *)(v7 + 16)) )
        break;
      if ( v7 == *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v8) )
        goto LABEL_11;
    }
    if ( !(*(unsigned __int8 (__fastcall **)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 16) + 80i64))(
            *(_QWORD *)(v7 + 16),
            *a3) )
    {
      v7 = *(_QWORD *)v7;
LABEL_11:
      v6 = (_QWORD *)(a1 + 8);
      goto LABEL_12;
    }
    if ( a4 != *(__int64 ***)(a1 + 8) )
    {
      *a4[1] = (__int64)*a4;
      (*a4)[1] = (__int64)a4[1];
      operator delete(a4);
      --*(_QWORD *)(a1 + 16);
    }
    result = a2;
    *(_QWORD *)a2 = v7;
    *(_BYTE *)(a2 + 8) = 0;
  }
  return result;
}
// 140184CA8: using guessed type void __stdcall operator delete(void *);
// 140185140: using guessed type __int64 (__fastcall *_guard_dispatch_icall_fptr)(_QWORD, _QWORD);
// 14015017C: using guessed type char var_30[48];
