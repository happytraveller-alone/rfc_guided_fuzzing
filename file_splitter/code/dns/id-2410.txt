//----- (0000000140125DD0) ----------------------------------------------------
_BYTE *__fastcall DnsSign::SignData(
        DnsSign::CCNGAlgorithmManager *a1,
        __int64 a2,
        char a3,
        NCRYPT_KEY_HANDLE a4,
        int a5)
{
  __int64 v6; // rdi
  int v8; // eax
  int v9; // ebx
  _BYTE *v10; // rax
  _BYTE *v11; // rbx
  int v12; // eax
  int v13; // edi
  DWORD pcbResult; // [rsp+40h] [rbp-91h] BYREF
  __int64 v16[3]; // [rsp+48h] [rbp-89h] BYREF
  char v17[24]; // [rsp+60h] [rbp-71h] BYREF
  char v18[56]; // [rsp+78h] [rbp-59h] BYREF
  char pExceptionObject[56]; // [rsp+B0h] [rbp-21h] BYREF

  v16[1] = -2i64;
  v6 = (unsigned int)a2;
  pcbResult = 0;
  LOBYTE(a2) = a3;
  v16[0] = (__int64)DnsSign::CCNGAlgorithmManager::GetCNGHashAlgorithmID(a1, a2);
  v8 = NCryptSignHash(
         a4,
         (void *)((unsigned __int64)v16 & -(__int64)(a5 != 0)),
         *(PBYTE *)a1,
         *((_DWORD *)a1 + 2) - *(_DWORD *)a1,
         0i64,
         0,
         &pcbResult,
         a5 != 0 ? 2 : 0);
  v9 = v8;
  if ( v8 < 0 )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 7) & 0x100000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 25) >= 4u )
    {
      WPP_SF_D(
        *((_QWORD *)WPP_GLOBAL_Control + 2),
        0x33u,
        (__int64)&WPP_52544f7432c93905eab44474fa1b3f20_Traceguids,
        v8);
    }
    DnsSign::CRunTimeException::CRunTimeException((DnsSign::CRunTimeException *)v18, v9);
    DnsSign::CException::AppendErrorMessageByID((DnsSign::CException *)v18, 0xD6DBDu);
    DnsSign::CRunTimeException::CRunTimeException(
      (DnsSign::CRunTimeException *)pExceptionObject,
      (const struct DnsSign::CRunTimeException *)v18);
    CxxThrowException_0(pExceptionObject, (_ThrowInfo *)&TI2_AVCRunTimeException_DnsSign__);
  }
  if ( (unsigned int)v6 > 0xFFFF || pcbResult > 0xFFFF || (unsigned __int16)(pcbResult + v6) < (unsigned __int16)v6 )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 7) & 0x100000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 25) >= 4u )
    {
      WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x34u, (__int64)&WPP_52544f7432c93905eab44474fa1b3f20_Traceguids);
    }
    DnsSign::CRunTimeException::CRunTimeException((DnsSign::CRunTimeException *)v18, 534);
    DnsSign::CException::AppendErrorMessageByID((DnsSign::CException *)v18, 0xD6DC5u);
    DnsSign::CRunTimeException::CRunTimeException(
      (DnsSign::CRunTimeException *)pExceptionObject,
      (const struct DnsSign::CRunTimeException *)v18);
    CxxThrowException_0(pExceptionObject, (_ThrowInfo *)&TI2_AVCRunTimeException_DnsSign__);
  }
  v10 = RR_AllocateEx((unsigned __int16)pcbResult + (unsigned __int16)v6, 0, 0);
  v11 = v10;
  if ( !v10 )
  {
    std::bad_alloc::bad_alloc((std::bad_alloc *)v17);
    CxxThrowException_0(v17, (_ThrowInfo *)&TI2_AVbad_alloc_std__);
  }
  v16[2] = (__int64)v10;
  v12 = NCryptSignHash(
          a4,
          (void *)((unsigned __int64)v16 & -(__int64)(a5 != 0)),
          *(PBYTE *)a1,
          *((_DWORD *)a1 + 2) - *(_DWORD *)a1,
          &v10[v6 + 56],
          pcbResult,
          &pcbResult,
          a5 != 0 ? 2 : 0);
  v13 = v12;
  if ( v12 < 0 )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 7) & 0x100000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 25) >= 4u )
    {
      WPP_SF_D(
        *((_QWORD *)WPP_GLOBAL_Control + 2),
        0x35u,
        (__int64)&WPP_52544f7432c93905eab44474fa1b3f20_Traceguids,
        v12);
    }
    DnsSign::CRunTimeException::CRunTimeException((DnsSign::CRunTimeException *)v18, v13);
    DnsSign::CException::AppendErrorMessageByID((DnsSign::CException *)v18, 0xD6DBDu);
    DnsSign::CRunTimeException::CRunTimeException(
      (DnsSign::CRunTimeException *)pExceptionObject,
      (const struct DnsSign::CRunTimeException *)v18);
    CxxThrowException_0(pExceptionObject, (_ThrowInfo *)&TI2_AVCRunTimeException_DnsSign__);
  }
  Mem_Free(0i64, 0i64, 0i64, (__int64)"ds\\dns\\server\\dnssign\\zone.cpp", 239);
  return v11;
}
