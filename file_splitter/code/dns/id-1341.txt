//----- (00000001400AAA60) ----------------------------------------------------
__int64 __fastcall Rpc_GetStatistics(
        __int64 a1,
        __int64 a2,
        __int64 a3,
        __int64 a4,
        int a5,
        __int64 a6,
        _DWORD *a7,
        _QWORD *a8)
{
  unsigned __int16 *v8; // rax
  unsigned int v9; // ebx
  int v10; // ecx
  _DWORD *v11; // rax
  _DWORD *v12; // rdi
  char *v14; // r14
  unsigned __int16 *v15; // rcx
  int v16; // ebp
  size_t v17; // rbx

  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_D(*((_QWORD *)WPP_GLOBAL_Control + 7), 0xAu, (__int64)&WPP_04ba7adc0f233f32aafbb90a0c0540d0_Traceguids, a6);
  }
  v8 = (unsigned __int16 *)Src;
  v9 = 0;
  v10 = 0;
  while ( v8 )
  {
    if ( ((unsigned int)a6 & *(_DWORD *)v8) != 0 )
      v9 += v8[2] + 8;
    v8 = *(unsigned __int16 **)&StatsTable[16 * ++v10 + 8];
  }
  v11 = MIDL_user_allocate(v9 + 8i64);
  v12 = v11;
  if ( !v11 )
    return 14i64;
  *v11 = v9;
  v14 = (char *)(v11 + 1);
  deriveAndTimeSetStats();
  v15 = (unsigned __int16 *)Src;
  v16 = 0;
  while ( v15 )
  {
    if ( ((unsigned int)a6 & *(_DWORD *)v15) != 0 )
    {
      v17 = (unsigned int)v15[2] + 8;
      memcpy_0(v14, v15, v17);
      v14 += v17;
    }
    v15 = *(unsigned __int16 **)&StatsTable[16 * ++v16 + 8];
  }
  *a8 = v12;
  *a7 = 5;
  return 0i64;
}
// 1401B6D80: using guessed type _BYTE StatsTable[8];
