//----- (000000014015AF20) ----------------------------------------------------
__int64 __fastcall Dns_GetBufferLengthForStringCopy(WCHAR *lpMultiByteStr, int cbMultiByte, __int64 a3, int a4)
{
  int v5; // ebp
  __int64 v6; // rbx
  DWORD v8; // ecx
  UINT v10; // ecx
  int v11; // eax
  UINT v12; // ecx
  int v13; // eax
  char *v14; // rcx
  __int64 v15; // rdx
  char v16; // al
  LPSTR lpMultiByteStra; // [rsp+20h] [rbp-98h]
  __int64 cbMultiBytea; // [rsp+28h] [rbp-90h]
  LPCCH lpDefaultChar; // [rsp+30h] [rbp-88h]
  char v20[80]; // [rsp+40h] [rbp-78h] BYREF

  v5 = a3;
  LODWORD(v6) = cbMultiByte;
  if ( (byte_1401BA003 & 0x10) != 0 )
    WPP_SF_(11i64, (unsigned __int16)&WPP_55e0bf752fa338bf02c5c4b0361aeb86_Traceguids, a3);
  if ( !lpMultiByteStr )
  {
    v8 = 87;
LABEL_51:
    SetLastError(v8);
    return 0i64;
  }
  if ( v5 == 1 )
  {
    if ( !(_DWORD)v6 )
    {
      v6 = -1i64;
      do
        ++v6;
      while ( lpMultiByteStr[v6] );
      LODWORD(v6) = (unsigned __int16)v6;
    }
    switch ( a4 )
    {
      case 1:
        return (unsigned int)(2 * v6 + 2);
      case 2:
        v10 = 65001;
LABEL_16:
        v11 = WideCharToMultiByte(v10, 0, lpMultiByteStr, v6, 0i64, 0, 0i64, 0i64);
        if ( v11 || !(_DWORD)v6 )
          return (unsigned int)(v11 + 1);
        goto LABEL_39;
      case 3:
        v10 = 0;
        goto LABEL_16;
    }
    goto LABEL_39;
  }
  if ( !(_DWORD)v6 )
  {
    v6 = -1i64;
    do
      ++v6;
    while ( *((_BYTE *)lpMultiByteStr + v6) );
  }
  if ( a4 == v5 )
    return (unsigned int)(v6 + 1);
  if ( a4 == 1 )
  {
    if ( v5 == 2 )
    {
      v12 = 65001;
    }
    else
    {
      if ( v5 != 3 )
        goto LABEL_39;
      v12 = 0;
    }
    v13 = MultiByteToWideChar(v12, 0, (LPCCH)lpMultiByteStr, v6, 0i64, 0);
    if ( v13 || !(_DWORD)v6 )
      return (unsigned int)(2 * v13 + 2);
    goto LABEL_39;
  }
  if ( v5 != 2 )
  {
    if ( v5 == 3 && a4 == 2 )
      return Dns_Utf8ToOrFromAnsi(0i64, 0i64, (unsigned __int8 *)lpMultiByteStr, v6, 3, 2);
    goto LABEL_39;
  }
  if ( a4 != 3 )
  {
LABEL_39:
    if ( (byte_1401BA003 & 0x10) != 0 )
    {
      if ( (unsigned int)v6 <= 0x7FFFFFFEui64 )
      {
        v14 = v20;
        v15 = 65i64;
        do
        {
          if ( !((unsigned int)v6 + v15 - 65) )
            break;
          v16 = v14[(char *)lpMultiByteStr - v20];
          if ( !v16 )
            break;
          *v14++ = v16;
          --v15;
        }
        while ( v15 );
        if ( !v15 )
          --v14;
        *v14 = 0;
      }
      else
      {
        v20[0] = 0;
      }
      LODWORD(lpDefaultChar) = a4;
      LODWORD(cbMultiBytea) = v5;
      LODWORD(lpMultiByteStra) = v6;
      WPP_SF_qsddd(
        12i64,
        (unsigned __int16)&WPP_55e0bf752fa338bf02c5c4b0361aeb86_Traceguids,
        (__int64)lpMultiByteStr,
        v20,
        lpMultiByteStra,
        cbMultiBytea,
        lpDefaultChar);
    }
    v8 = 13;
    goto LABEL_51;
  }
  return Dns_Utf8ToOrFromAnsi(0i64, 0i64, (unsigned __int8 *)lpMultiByteStr, v6, 2, 3);
}
// 14015B108: variable 'lpMultiByteStra' is possibly undefined
// 14015B108: variable 'cbMultiBytea' is possibly undefined
// 14015B108: variable 'lpDefaultChar' is possibly undefined
// 1401BA003: using guessed type char byte_1401BA003;
