//----- (0000000140051360) ----------------------------------------------------
__int64 Rpc_ExportSettings()
{
  unsigned int LastError; // ebp
  HANDLE FileW; // rdi
  int v2; // r14d
  char **v3; // rbx
  int v4; // eax
  const char **v5; // r8
  const char *v6; // r8
  const wchar_t **v7; // r8
  const wchar_t *v8; // r8
  __int64 *v9; // rax
  __int64 v10; // rsi
  char *v11; // rbx
  char *v12; // rax
  __int64 v13; // r8
  __int64 v14; // r8
  const unsigned __int16 **NextZone; // rbx
  const char *v16; // r9
  const char *v17; // r8
  const unsigned __int16 **i; // rsi
  const char *v19; // r8
  const char *v20; // r9
  __int64 v21; // rax
  const char *v22; // r8
  const char *v23; // rcx
  __int64 v24; // rax
  const unsigned __int16 *v25; // rax
  const char *v26; // r9
  const char *v27; // r8
  char *v28; // rbx
  char *v29; // rbx
  char *v30; // rbx
  char *v31; // rbx
  char *v32; // rbx
  unsigned int v33; // r11d
  unsigned int v34; // r9d
  char *v35; // rdx
  __int64 v36; // r8
  const char *v37; // rcx
  __int64 dwCreationDisposition; // [rsp+20h] [rbp-2C8h]
  __int64 dwCreationDispositiona; // [rsp+20h] [rbp-2C8h]
  __int64 dwCreationDispositionb; // [rsp+20h] [rbp-2C8h]
  __int64 dwFlagsAndAttributes; // [rsp+28h] [rbp-2C0h]
  HANDLE hTemplateFile; // [rsp+30h] [rbp-2B8h]
  __int64 v44; // [rsp+38h] [rbp-2B0h]
  __int64 v45; // [rsp+40h] [rbp-2A8h]
  struct _SYSTEMTIME SystemTime; // [rsp+58h] [rbp-290h] BYREF
  CHAR v47[72]; // [rsp+68h] [rbp-280h] BYREF
  WCHAR FileName[264]; // [rsp+B0h] [rbp-238h] BYREF

  LastError = 0;
  memset_0(v47, 0, 0x3Dui64);
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0xBu, (__int64)&WPP_98f2ff202faf38a2f5454d6cc86b8b2a_Traceguids);
  }
  if ( (unsigned int)File_CreateDatabaseFilePathEx(0i64, 0i64, (char *)FileName, 261i64, 0i64, 0i64, L"DnsSettings.txt") )
  {
    FileW = CreateFileW(FileName, 2u, 0, 0i64, 2u, 0, 0i64);
    if ( FileW == (HANDLE)-1i64 )
    {
      LastError = GetLastError();
    }
    else
    {
      GetLocalTime(&SystemTime);
      Dns_WriteFormattedSystemTimeToBuffer(v47, &SystemTime);
      FormattedWriteFile(
        FileW,
        ";\r\n;   DNS server settings\r\n;\r\n;   Server name        %s\r\n;   Current time       %s\r\n;\r\n\r\n",
        Str,
        v47);
      FormattedWriteFile(FileW, "[ServerSettings]\r\n\r\n");
      v2 = 0;
      if ( ServerPropertyTable )
      {
        v3 = &ServerPropertyTable;
        do
        {
          FormattedWriteFile(FileW, "%s=", *v3);
          v4 = *((_DWORD *)v3 + 2);
          switch ( v4 )
          {
            case 4:
              v12 = v3[6];
              if ( *((_DWORD *)v3 + 9) )
              {
                if ( v12 )
                  v13 = *(unsigned int *)v12;
                else
                  v13 = 3131961357i64;
                FormattedWriteFile(FileW, "DWORD:0x%08X\r\n", v13);
              }
              else
              {
                if ( v12 )
                  v14 = *(unsigned int *)v12;
                else
                  v14 = 3131961357i64;
                FormattedWriteFile(FileW, "DWORD:%d\r\n", v14);
              }
              break;
            case 34:
              v9 = (__int64 *)v3[6];
              v10 = 0i64;
              if ( v9 )
                v10 = *v9;
              FormattedWriteFile(FileW, "ADDRLIST");
              if ( v10 )
              {
                v11 = dnsAddrArrayStringEx(v10, 0);
                FormattedWriteFile(FileW, ":%s", v11);
                Mem_Free(v11, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\exportsettings.c", 788);
              }
              else
              {
                FormattedWriteFile(FileW, ":NULL");
              }
              FormattedWriteFile(FileW, "\r\n");
              break;
            case -268435455:
              v7 = (const wchar_t **)v3[6];
              if ( !v7 || (v8 = *v7) == 0i64 )
                v8 = L"NULL";
              FormattedWriteFile(FileW, "UNICODE-STRING:%S\r\n", v8);
              break;
            case -16777215:
              v5 = (const char **)v3[6];
              if ( !v5 || (v6 = *v5) == 0i64 )
                v6 = "NULL";
              FormattedWriteFile(FileW, "UTF8-STRING:%s\r\n", v6);
              break;
            default:
              FormattedWriteFile(FileW, "UnknownSettingType\r\n");
              break;
          }
          v3 = &(&ServerPropertyTable)[7 * (unsigned int)++v2];
        }
        while ( *v3 );
        LastError = 0;
      }
      FormattedWriteFile(FileW, "\r\n[Zones]\r\n\r\n");
      NextZone = Zone_ListGetNextZoneEx(0i64, 0i64, 0);
      if ( NextZone )
      {
        do
        {
          v23 = "File";
          v24 = *((unsigned int *)NextZone + 93);
          if ( (*((_BYTE *)NextZone + 388) & 1) != 0 )
            v23 = "AD-integrated";
          if ( (unsigned int)v24 > 4 )
            v16 = "UnknownZoneType";
          else
            v16 = off_14017AD28[v24];
          v17 = "Cache";
          if ( *((_DWORD *)NextZone + 93) )
            v17 = (const char *)NextZone[2];
          FormattedWriteFile(FileW, "%s=%s,%s\r\n", v17, v16, v23);
          NextZone = Zone_ListGetNextZoneEx(0i64, (__int64 *)NextZone, 0);
        }
        while ( NextZone );
        LastError = 0;
      }
      for ( i = Zone_ListGetNextZoneEx(0i64, 0i64, 0); i; i = Zone_ListGetNextZoneEx(0i64, (__int64 *)i, 0) )
      {
        if ( (*((_BYTE *)i + 396) & 4) == 0 )
        {
          v19 = "Cache";
          if ( *((_DWORD *)i + 93) )
            v19 = (const char *)i[2];
          FormattedWriteFile(FileW, "\r\n\r[%s]\r\n\r\n", v19);
          v20 = "File";
          v21 = *((unsigned int *)i + 93);
          if ( (*((_BYTE *)i + 388) & 1) != 0 )
            v20 = "AD-integrated";
          v22 = (unsigned int)v21 > 4 ? "UnknownZoneType" : off_14017AD28[v21];
          LODWORD(dwCreationDisposition) = (_BYTE)i[49] & 3;
          FormattedWriteFile(FileW, "Type=%s\r\nStore=%s\r\nAllowUpdate=%d\r\n", v22, v20, dwCreationDisposition);
          if ( (*((_BYTE *)i + 388) & 1) != 0 )
          {
            v25 = i[106];
            v26 = v25 ? (const char *)*((_QWORD *)v25 + 3) : "NULL";
            FormattedWriteFile(FileW, "ZoneDN=%S\r\nDirectoryPartition=%s\r\n", i[105], v26);
          }
          else
          {
            v27 = "NULL";
            if ( i[17] )
              v27 = (const char *)i[17];
            FormattedWriteFile(FileW, "File=%s\r\n", v27);
          }
          if ( (unsigned int)(*((_DWORD *)i + 93) - 2) <= 2 )
          {
            v28 = dnsAddrArrayStringEx((__int64)i[146], 0);
            FormattedWriteFile(FileW, "Masters=%s\r\n", v28);
            Mem_Free(v28, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\exportsettings.c", 884);
            v29 = dnsAddrArrayStringEx((__int64)i[147], 0);
            FormattedWriteFile(FileW, "LocalMasters=%s\r\n", v29);
            Mem_Free(v29, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\exportsettings.c", 888);
          }
          if ( *((_DWORD *)i + 93) == 4 )
            FormattedWriteFile(FileW, "ForwarderTimeout=%d\r\n", *((unsigned int *)i + 389));
          FormattedWriteFile(FileW, "SecureSecondaries=%d\r\n", *((unsigned int *)i + 95));
          v30 = dnsAddrArrayStringEx((__int64)i[69], 0);
          FormattedWriteFile(FileW, "Secondaries=%s\r\n", v30);
          Mem_Free(v30, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\exportsettings.c", 906);
          v31 = dnsAddrArrayStringEx((__int64)i[68], 0);
          FormattedWriteFile(FileW, "NotifyList=%s\r\n", v31);
          Mem_Free(v31, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\exportsettings.c", 910);
          if ( *((_DWORD *)i + 93) == 1 )
          {
            FormattedWriteFile(
              FileW,
              "NoRefreshInterval=%d\r\nRefreshInterval=%d\r\n",
              *((unsigned int *)i + 248),
              *((unsigned int *)i + 249));
            v32 = dnsAddrArrayStringEx((__int64)i[126], 0);
            FormattedWriteFile(FileW, "ScavengeServers=%s\r\n", v32);
            Mem_Free(v32, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\exportsettings.c", 923);
          }
          v33 = *((_DWORD *)i + 99);
          LODWORD(v45) = (v33 >> 13) & 1;
          LODWORD(v44) = (v33 >> 12) & 1;
          LODWORD(hTemplateFile) = (v33 >> 9) & 1;
          LODWORD(dwFlagsAndAttributes) = (v33 >> 6) & 1;
          LODWORD(dwCreationDispositiona) = (v33 >> 2) & 1;
          FormattedWriteFile(
            FileW,
            "Aging=%d\r\n"
            "Reverse=%d\r\n"
            "AutoCreated=%d\r\n"
            "DisableAutoCreateLocalNS=%d\r\n"
            "Dirty=%d\r\n"
            "Paused=%d\r\n"
            "Shutdown=%d\r\n",
            v33 & 1,
            (v33 >> 1) & 1,
            dwCreationDispositiona,
            dwFlagsAndAttributes,
            hTemplateFile,
            v44,
            v45);
          v34 = *((_DWORD *)i + 97);
          if ( (v34 & 1) != 0 )
          {
            LODWORD(dwCreationDispositionb) = (v34 >> 2) & 1;
            FormattedWriteFile(
              FileW,
              "DsReload=%d\r\nDsQueuedForBkLoad=%d\r\nDsLoadingInProgress=%d\r\n",
              *((_WORD *)i + 199) & 1,
              (v34 >> 1) & 1,
              dwCreationDispositionb);
          }
          else
          {
            FormattedWriteFile(FileW, "DcPromoConvert=%d\r\n", *((unsigned int *)i + 94));
          }
          v35 = "UsingNbstat=%d\r\n";
          v36 = 0i64;
          if ( (*((_BYTE *)i + 396) & 2) == 0 )
            v35 = "UsingWINS=%d\r\n";
          LOBYTE(v36) = i[43] != 0i64;
          FormattedWriteFile(FileW, v35, v36);
          FormattedWriteFile(FileW, "SOA Record ");
          if ( i[42] )
          {
            LastError = ExportRecords(FileW, (__int64 *)i[5], 6u, 1u, 0);
            if ( LastError )
              break;
          }
          else
          {
            FormattedWriteFile(FileW, "NOT present");
          }
          FormattedWriteFile(FileW, "\r\nNS Records: ");
          LastError = ExportRecords(FileW, (__int64 *)i[5], 2u, 1u, 0);
          if ( LastError )
            break;
          FormattedWriteFile(FileW, "\r\nMX Records: ");
          LastError = ExportRecords(FileW, (__int64 *)i[5], 0xFu, 1u, 0);
          if ( LastError )
            break;
          v37 = "Cache";
          if ( *((_DWORD *)i + 93) )
            v37 = (const char *)i[2];
          if ( strstr(v37, "_msdcs") )
          {
            FormattedWriteFile(FileW, "\r\nContents of the zone: \r\n");
            LastError = ExportNodeRecursive(FileW, (__int64 *)i[5]);
            if ( LastError )
              break;
          }
        }
      }
      CloseHandle(FileW);
    }
  }
  else
  {
    LastError = 9652;
  }
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_D(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0xCu,
      (__int64)&WPP_98f2ff202faf38a2f5454d6cc86b8b2a_Traceguids,
      LastError);
  }
  return LastError;
}
// 140051652: conditional instruction was optimized away because rbx.8!=0
// 140051670: conditional instruction was optimized away because rbx.8!=0
// 14005177C: variable 'dwCreationDisposition' is possibly undefined
// 1400519E4: variable 'dwCreationDispositiona' is possibly undefined
// 1400519E4: variable 'dwFlagsAndAttributes' is possibly undefined
// 1400519E4: variable 'hTemplateFile' is possibly undefined
// 1400519E4: variable 'v44' is possibly undefined
// 1400519E4: variable 'v45' is possibly undefined
// 140051A1D: variable 'dwCreationDispositionb' is possibly undefined
// 14017AD28: using guessed type char *off_14017AD28[6];
