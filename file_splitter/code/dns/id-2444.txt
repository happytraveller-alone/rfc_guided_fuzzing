//----- (00000001401295C8) ----------------------------------------------------
void __fastcall DnsSign::CCertificateStore::SelectSingleCertificate(
        HCERTSTORE *this,
        const struct DnsSign::CertificateStoreSpec *a2,
        const struct DnsSign::CertificateSelectionSpec *a3,
        PCCERT_CONTEXT *a4)
{
  __int64 v7; // rdx
  PCCERT_CONTEXT *v8; // rdi
  int v9; // eax
  __int64 v10; // r10
  const CERT_CONTEXT *v11; // r14
  PCCERT_CONTEXT *v12; // rbx
  __int128 v13; // [rsp+20h] [rbp-99h] BYREF
  __int64 v14; // [rsp+30h] [rbp-89h]
  __int64 v15; // [rsp+40h] [rbp-79h]
  __int64 v16[5]; // [rsp+48h] [rbp-71h] BYREF
  char v17[56]; // [rsp+70h] [rbp-49h] BYREF
  char pExceptionObject[56]; // [rsp+A8h] [rbp-11h] BYREF

  v15 = -2i64;
  v13 = 0i64;
  v14 = 0i64;
  DnsSign::CCertificateStore::SelectCertificates(this, (__int64)a3, &v13);
  v8 = (PCCERT_CONTEXT *)v13;
  if ( (_QWORD)v13 == *((_QWORD *)&v13 + 1) )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 7) & 0x100000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 25) >= 4u )
    {
      WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x19u, (__int64)&WPP_53898a8021d033fe120236609d33d737_Traceguids);
    }
    DnsSign::CRunTimeException::CRunTimeException((DnsSign::CRunTimeException *)v17, v7, 12);
    DnsSign::CException::AppendErrorMessageByID((DnsSign::CException *)v17, 0xD6D9Du);
    std::wstring::wstring((__int64)v16, (char *)L"\n");
    DnsSign::AppendCertificateSelectionString((__int64)a2, (__int64)a3, (char *)v16);
    DnsSign::CException::AppendErrorMessage((__int64)v17, v16);
    DnsSign::CRunTimeException::CRunTimeException(
      (DnsSign::CRunTimeException *)pExceptionObject,
      (const struct DnsSign::CRunTimeException *)v17);
    CxxThrowException_0(pExceptionObject, (_ThrowInfo *)&TI2_AVCRunTimeException_DnsSign__);
  }
  if ( (unsigned __int64)((__int64)(*((_QWORD *)&v13 + 1) - v13) >> 3) > 1 )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 7) & 0x100000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 25) >= 4u )
    {
      v9 = std::vector<DnsSign::CCertificate>::size(&v13);
      WPP_SF_D(*(_QWORD *)(v10 + 16), 0x1Au, (__int64)&WPP_53898a8021d033fe120236609d33d737_Traceguids, v9);
    }
    DnsSign::CRunTimeException::CRunTimeException((DnsSign::CRunTimeException *)v17, v7, 13);
    DnsSign::CException::AppendErrorMessageByID((DnsSign::CException *)v17, 0xD6D9Eu);
    std::wstring::wstring((__int64)v16, (char *)L"\n");
    DnsSign::AppendCertificateSelectionString((__int64)a2, (__int64)a3, (char *)v16);
    DnsSign::CException::AppendErrorMessage((__int64)v17, v16);
    DnsSign::CRunTimeException::CRunTimeException(
      (DnsSign::CRunTimeException *)pExceptionObject,
      (const struct DnsSign::CRunTimeException *)v17);
    CxxThrowException_0(pExceptionObject, (_ThrowInfo *)&TI2_AVCRunTimeException_DnsSign__);
  }
  v11 = *(const CERT_CONTEXT **)v13;
  *(_QWORD *)v13 = 0i64;
  if ( *a4 )
  {
    CertFreeCertificateContext(*a4);
    *a4 = 0i64;
  }
  *a4 = v11;
  v12 = v8;
  do
  {
    if ( *v12 )
    {
      CertFreeCertificateContext(*v12);
      *v12 = 0i64;
    }
    ++v12;
  }
  while ( v12 != *((PCCERT_CONTEXT **)&v13 + 1) );
  operator delete(v8);
}
// 140129668: variable 'v7' is possibly undefined
// 14012971A: variable 'v10' is possibly undefined
// 140184CA8: using guessed type void __stdcall operator delete(void *);
// 140194648: using guessed type wchar_t asc_140194648[2];
// 1401295C8: using guessed type _QWORD var_C8[5];
