//----- (0000000140064074) ----------------------------------------------------
__int64 __fastcall Name_GetIpAddressForReverseNode(__int64 a1, __int64 a2, struct in_addr *a3)
{
  unsigned int v3; // ebx
  ULONG v5; // r14d
  __int64 *v8; // rdx
  __int64 *v9; // rcx
  _QWORD *v10; // rax
  _QWORD *v11; // rax
  __int64 v12; // rcx
  __int64 v13; // rdi
  unsigned int v14; // eax

  v3 = 0;
  v5 = 0;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
  {
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x17u, (__int64)&WPP_7fc80419a8b133cb02be4345e744511d_Traceguids);
  }
  v8 = &g_Database;
  if ( a1 )
    v9 = *(__int64 **)(a1 + 24);
  else
    v9 = &g_Database;
  v10 = (_QWORD *)a2;
  if ( a2 )
  {
    while ( v10 != (_QWORD *)v9[3] )
    {
      v10 = (_QWORD *)*v10;
      if ( !v10 )
        goto LABEL_11;
    }
    a3[9].S_un.S_addr = 0;
    return 1i64;
  }
LABEL_11:
  if ( a1 )
    v8 = *(__int64 **)(a1 + 24);
  v11 = (_QWORD *)a2;
  if ( a2 )
  {
    while ( v11 != (_QWORD *)v8[1] )
    {
      v11 = (_QWORD *)*v11;
      if ( !v11 )
        goto LABEL_16;
    }
    if ( a1 )
      v13 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8i64);
    else
      v13 = qword_1401EC608;
    while ( a2 != v13 )
    {
      v5 += 8;
      v14 = strtoul((const char *)(a2 + 102), 0i64, 10);
      if ( v14 > 0xFF )
      {
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
        {
          WPP_SF_s(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x18u,
            (__int64)&WPP_7fc80419a8b133cb02be4345e744511d_Traceguids,
            (const char *)(a2 + 102));
        }
        return 0i64;
      }
      a2 = *(_QWORD *)a2;
      v3 = (v14 << 24) | (v3 >> 8);
    }
    goto LABEL_25;
  }
LABEL_16:
  if ( a2 == (a1 != 0) )
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16i64);
  else
    v12 = qword_1401EC610;
  if ( v12 )
  {
LABEL_25:
    DnsAddr_BuildFromIp4(a3, (struct in_addr)v3, 0);
    a3[9].S_un.S_addr = v5;
    return 1i64;
  }
  return 0i64;
}
// 1401EC600: using guessed type __int64 g_Database;
// 1401EC608: using guessed type __int64 qword_1401EC608;
// 1401EC610: using guessed type __int64 qword_1401EC610;
