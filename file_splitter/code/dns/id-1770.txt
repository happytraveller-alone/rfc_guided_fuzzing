//----- (00000001400DF1E4) ----------------------------------------------------
TrustAnchor *__fastcall TrustAnchor::TrustAnchor(TrustAnchor *this, const char *a2)
{
  __int64 v4; // rax
  unsigned __int64 v5; // rcx
  void *v6; // r14
  __int64 v7; // rcx
  __int64 v8; // rbx
  void *v9; // rax
  _BYTE *v10; // rsi
  volatile signed __int32 *v11; // rbx
  __int64 v12; // rdx
  __int16 v13; // ax
  volatile signed __int32 *v14; // rbx
  void *v16[2]; // [rsp+78h] [rbp-29h] BYREF
  int v17; // [rsp+88h] [rbp-19h] BYREF
  u_short v18; // [rsp+8Ch] [rbp-15h] BYREF
  char v19; // [rsp+90h] [rbp-11h] BYREF
  char v20; // [rsp+94h] [rbp-Dh] BYREF
  void *v21; // [rsp+98h] [rbp-9h]
  __int64 v22; // [rsp+A0h] [rbp-1h]
  TrustAnchor *v23; // [rsp+A8h] [rbp+7h]
  __int64 v24; // [rsp+B0h] [rbp+Fh] BYREF
  __int16 v25; // [rsp+B8h] [rbp+17h]

  v22 = -2i64;
  v23 = this;
  *(_QWORD *)this = 0i64;
  *((_QWORD *)this + 1) = 0i64;
  v21 = 0i64;
  operator delete(0i64);
  *((_QWORD *)this + 3) = 0i64;
  *((_QWORD *)this + 4) = 0i64;
  *((_DWORD *)this + 4) = 0;
  if ( !a2 )
    goto LABEL_29;
  v4 = -1i64;
  do
    ++v4;
  while ( a2[v4] );
  if ( !v4 )
    goto LABEL_29;
  v5 = -1i64;
  do
    ++v5;
  while ( a2[v5] );
  v6 = operator new[](v5);
  if ( v6 )
    operator delete(0i64);
  v21 = v6;
  if ( !v6 )
    goto LABEL_29;
  v24 = 0i64;
  v25 = 0;
  v7 = -1i64;
  do
    ++v7;
  while ( a2[v7] );
  if ( sscanf_s(
         a2,
         "TrustAnchor, %[^,], %hu, %u, %I64u, %I64u, %u, %u, %u, %[^,]",
         &v24,
         10i64,
         (char *)this + 20,
         (char *)this + 16,
         (char *)this + 32,
         (char *)this + 24,
         &v18,
         &v19,
         &v20) != 9 )
    goto LABEL_29;
  v17 = 0;
  v8 = -1i64;
  do
    ++v8;
  while ( *((_BYTE *)v6 + v8) );
  v9 = operator new[](saturated_mul((unsigned int)(v8 + 56), 8ui64));
  *(_OWORD *)v16 = 0i64;
  std::tr1::shared_ptr<_Dbase_Record>::_Resetp<_Dbase_Record>(v16, (__int64)v9);
  v10 = v16[0];
  if ( !v16[0] )
    goto LABEL_33;
  memset_0(v16[0], 0, (unsigned int)v8);
  if ( (unsigned int)Dns_SecurityBase64StringToKey(v10 + 60, &v17, (__int64)v6, v8) )
    goto LABEL_33;
  v12 = -1i64;
  do
    ++v12;
  while ( *((_BYTE *)&v24 + v12) );
  v13 = DnsRecordTypeForName(&v24, v12);
  *((_WORD *)v10 + 6) = v13;
  if ( v13 != 48 && v13 != 43 )
  {
LABEL_33:
    if ( v16[1] )
    {
      if ( _InterlockedExchangeAdd((volatile signed __int32 *)v16[1] + 2, 0xFFFFFFFF) == 1 )
      {
        v11 = (volatile signed __int32 *)v16[1];
        (**(void (__fastcall ***)(void *))v16[1])(v16[1]);
        if ( _InterlockedExchangeAdd(v11 + 3, 0xFFFFFFFF) == 1 )
          (*(void (__fastcall **)(void *))(*(_QWORD *)v16[1] + 8i64))(v16[1]);
      }
    }
LABEL_29:
    *((_DWORD *)this + 4) = 0;
    goto LABEL_30;
  }
  *((_WORD *)v10 + 7) = v17 + 4;
  *((_WORD *)v10 + 28) = htons(v18);
  v10[58] = v19;
  v10[59] = v20;
  v14 = (volatile signed __int32 *)*((_QWORD *)this + 1);
  *((void **)this + 1) = v16[1];
  *(_QWORD *)this = v10;
  if ( v14 )
  {
    if ( _InterlockedExchangeAdd(v14 + 2, 0xFFFFFFFF) == 1 )
    {
      (**(void (__fastcall ***)(volatile signed __int32 *))v14)(v14);
      if ( _InterlockedExchangeAdd(v14 + 3, 0xFFFFFFFF) == 1 )
        (*(void (__fastcall **)(volatile signed __int32 *))(*(_QWORD *)v14 + 8i64))(v14);
    }
  }
LABEL_30:
  operator delete(v21);
  return this;
}
// 140183D50: using guessed type __int64 __fastcall DnsRecordTypeForName(_QWORD, _QWORD);
// 140184CA8: using guessed type void __stdcall operator delete(void *);
// 140185140: using guessed type __int64 (__fastcall *_guard_dispatch_icall_fptr)(_QWORD, _QWORD);
