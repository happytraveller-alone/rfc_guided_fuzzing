//----- (0000000140146310) ----------------------------------------------------
__int64 __fastcall CDNSPolicyCriteriaSubnetRecord::DeleteCriteria(CDNSPolicyCriteriaSubnetRecord *this)
{
  int v2; // edi
  _QWORD *v3; // rsi
  _QWORD *v4; // rax
  _QWORD *v5; // rbx
  CDnsClientSubnetRecordsTrie *v6; // rcx
  const wchar_t *v7; // rax
  const unsigned __int16 *v8; // r9
  _QWORD *v9; // rax
  _QWORD *v10; // rbx
  CDnsClientSubnetRecordsTrie *v11; // rcx
  const wchar_t *v12; // rax
  const unsigned __int16 *v13; // r9
  void *v15[3]; // [rsp+40h] [rbp-30h] BYREF
  unsigned __int64 v16; // [rsp+58h] [rbp-18h]

  v2 = 0;
  v3 = (_QWORD *)((char *)this + 64);
  v4 = (_QWORD *)*((_QWORD *)this + 8);
  v5 = (_QWORD *)*v4;
  if ( (_QWORD *)*v4 != v4 )
  {
    do
    {
      v6 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        if ( *((_QWORD *)this + 2) )
        {
          v7 = (const wchar_t *)CDnsPolicy::Name(*((const void ***)this + 2), (__int64)v15);
          v2 |= 1u;
          v6 = WPP_GLOBAL_Control;
          if ( *((_QWORD *)v7 + 3) >= 8ui64 )
            v7 = *(const wchar_t **)v7;
        }
        else
        {
          v7 = L"NULL";
        }
        v8 = (const unsigned __int16 *)(v5 + 2);
        if ( v5[5] >= 8ui64 )
          v8 = *(const unsigned __int16 **)v8;
        WPP_SF_SS(
          *((_QWORD *)v6 + 7),
          0x4Au,
          (__int64)&WPP_42dbba61d26d3062f1ad4e084cdc81fe_Traceguids,
          v8,
          (__int64)v7);
      }
      if ( (v2 & 1) != 0 )
      {
        v2 &= ~1u;
        if ( v16 >= 8 )
          operator delete(v15[0]);
      }
      Decrement_ClientSubnetRecordReference((const void **)v5 + 2);
      v5 = (_QWORD *)*v5;
    }
    while ( v5 != (_QWORD *)*v3 );
  }
  std::list<std::wstring>::clear((__int64)v3);
  v9 = (_QWORD *)*((_QWORD *)this + 11);
  v10 = (_QWORD *)*v9;
  if ( (_QWORD *)*v9 != v9 )
  {
    do
    {
      v11 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        if ( *((_QWORD *)this + 2) )
        {
          v12 = (const wchar_t *)CDnsPolicy::Name(*((const void ***)this + 2), (__int64)v15);
          v2 |= 2u;
          v11 = WPP_GLOBAL_Control;
          if ( *((_QWORD *)v12 + 3) >= 8ui64 )
            v12 = *(const wchar_t **)v12;
        }
        else
        {
          v12 = L"NULL";
        }
        v13 = (const unsigned __int16 *)(v10 + 2);
        if ( v10[5] >= 8ui64 )
          v13 = *(const unsigned __int16 **)v13;
        WPP_SF_SS(
          *((_QWORD *)v11 + 7),
          0x4Bu,
          (__int64)&WPP_42dbba61d26d3062f1ad4e084cdc81fe_Traceguids,
          v13,
          (__int64)v12);
      }
      if ( (v2 & 2) != 0 )
      {
        v2 &= ~2u;
        if ( v16 >= 8 )
          operator delete(v15[0]);
      }
      Decrement_ClientSubnetRecordReference((const void **)v10 + 2);
      v10 = (_QWORD *)*v10;
    }
    while ( v10 != *((_QWORD **)this + 11) );
  }
  std::list<std::wstring>::clear((__int64)this + 88);
  *((_QWORD *)this + 2) = 0i64;
  return 0i64;
}
// 140184CA8: using guessed type void __stdcall operator delete(void *);
