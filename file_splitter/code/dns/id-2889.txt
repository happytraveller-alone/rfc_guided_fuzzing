//----- (00000001401500C0) ----------------------------------------------------
__int64 **__fastcall std::_Hash<std::tr1::_Umap_traits<IDnsRRLStateKey *,IDnsRRLStateInfo *,std::_Hash_compare<IDnsRRLStateKey *,CDnsRRLStateKeyHasher,CDnsRRLStateKeyEqual>,std::allocator<std::pair<IDnsRRLStateKey * const,IDnsRRLStateInfo *>>,0>>::find(
        __int64 a1,
        __int64 **a2,
        _QWORD *a3)
{
  unsigned __int64 v6; // rax
  __int64 v7; // r14
  __int64 i; // rbx
  __int64 v9; // rax
  __int64 v10; // rcx

  v6 = std::_Hash<std::tr1::_Umap_traits<IDnsRRLStateKey *,IDnsRRLStateInfo *,std::_Hash_compare<IDnsRRLStateKey *,CDnsRRLStateKeyHasher,CDnsRRLStateKeyEqual>,std::allocator<std::pair<IDnsRRLStateKey * const,IDnsRRLStateInfo *>>,0>>::_Hashval(
         a1,
         a3);
  v7 = 2 * v6;
  for ( i = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16 * v6); ; i = *(_QWORD *)i )
  {
    v9 = *(_QWORD *)(a1 + 32);
    v10 = *(_QWORD *)(a1 + 8);
    if ( *(_QWORD *)(v9 + 8 * v7) != v10 )
      v10 = **(_QWORD **)(v9 + 8 * v7 + 8);
    if ( i == v10 )
    {
      *a2 = *(__int64 **)(a1 + 8);
      return a2;
    }
    if ( (*(unsigned __int8 (__fastcall **)(_QWORD, _QWORD))(**(_QWORD **)(i + 16) + 80i64))(*(_QWORD *)(i + 16), *a3) )
      break;
  }
  if ( !(*(unsigned __int8 (__fastcall **)(_QWORD, _QWORD))(*(_QWORD *)*a3 + 80i64))(*a3, *(_QWORD *)(i + 16)) )
    i = *(_QWORD *)(a1 + 8);
  *a2 = (__int64 *)i;
  return a2;
}
// 140185140: using guessed type __int64 (__fastcall *_guard_dispatch_icall_fptr)(_QWORD, _QWORD);
