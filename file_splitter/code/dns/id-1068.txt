//----- (0000000140089EFC) ----------------------------------------------------
__int64 __fastcall processNonExistenceRecordList(
        __int64 a1,
        __int64 a2,
        __int64 a3,
        __int64 a4,
        int a5,
        int a6,
        __int64 a7)
{
  __int64 v9; // rdi
  __int64 v11; // r14
  __int64 v12; // r8
  __int64 result; // rax
  const char *v14; // rax
  __int64 v15; // rbx
  unsigned int v16; // edi
  u_long v17; // eax
  bool v18; // cc
  u_long v19; // eax
  __int64 v20; // rdx
  int v21; // r8d
  __int64 v22; // [rsp+20h] [rbp-38h]

  v9 = a2;
  v11 = 0i64;
  v12 = (__int64)&WPP_GLOBAL_Control;
  result = 1i64;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x80000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
  {
    if ( !a1 || *(_WORD *)(a1 + 496) != 1 || (v14 = "is", *(_WORD *)(a1 + 498) != 0x8000) )
      v14 = "is not";
    result = WPP_SF_qs(
               *((_QWORD *)WPP_GLOBAL_Control + 7),
               0x15u,
               (__int64)&WPP_10d39582251c332017bd035d2c946054_Traceguids,
               a1,
               v14);
  }
  v15 = a7;
  if ( a7 )
  {
    while ( *(_WORD *)(v15 + 12) != 46 )
    {
LABEL_25:
      *(_DWORD *)(v15 + 16) = *(_DWORD *)(a4 + 16);
      v20 = *(unsigned int *)(a4 + 20);
      *(_DWORD *)(v15 + 20) = v20;
      *(_BYTE *)(v15 + 8) = *(_BYTE *)(a4 + 8);
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x80000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
      {
        LODWORD(v22) = v20;
        WPP_SF_qLq(*((_QWORD *)WPP_GLOBAL_Control + 7), v20, v12, v15, v22, a4);
      }
      v21 = a1 && *(_WORD *)(a1 + 496) == 1 && *(_WORD *)(a1 + 498) == 0x8000;
      result = (__int64)Dnssec_SetInitialRecordStatus(v15, v9, v21);
      if ( a1 )
      {
        if ( (*(_BYTE *)(v15 + 28) & 4) != 0 )
        {
          if ( !v11 || (result = *(unsigned __int16 *)(v15 + 12), *(_WORD *)(v11 + 12) != (_WORD)result) )
            result = Dnssec_MsgAddValidatorRecordSet(a1, a3, *(_WORD *)(a4 + 12), *(_WORD *)(v15 + 12), a5);
        }
      }
      v11 = v15;
      v15 = *(_QWORD *)v15;
      if ( !v15 )
        return result;
    }
    v16 = _time32(0i64);
    v17 = ntohl(*(_DWORD *)(v15 + 64));
    v18 = v16 <= v17;
    if ( v16 < v17 )
    {
      if ( v17 - v16 <= 0x80000000 )
        goto LABEL_16;
      v18 = v16 <= v17;
    }
    if ( v18 || v16 - v17 <= 0x80000000 )
    {
      v19 = 0;
      goto LABEL_18;
    }
LABEL_16:
    v19 = v17 - v16;
LABEL_18:
    v12 = v19 + a6;
    if ( *(_DWORD *)(a4 + 20) < (unsigned int)v12 )
      v12 = *(unsigned int *)(a4 + 20);
    *(_DWORD *)(a4 + 20) = v12;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x80000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
    {
      LODWORD(v22) = v12;
      WPP_SF_qd(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x16u,
        (__int64)&WPP_10d39582251c332017bd035d2c946054_Traceguids,
        a4,
        v22);
    }
    v9 = a2;
    goto LABEL_25;
  }
  return result;
}
// 14008A048: variable 'v22' is possibly undefined
// 14008A096: variable 'v12' is possibly undefined
