//----- (0000000140055988) ----------------------------------------------------
__int64 __fastcall FastMutex_Acquire(__int64 a1, unsigned int a2)
{
  ULONGLONG v2; // rbp
  DWORD CurrentThreadId; // eax
  DWORD v5; // esi
  __int64 result; // rax
  ULONGLONG TickCount64; // r14
  unsigned int i; // edx
  signed __int32 v9; // eax
  signed __int32 v10; // ett
  DWORD v11; // eax
  DWORD v12; // ecx
  ULONGLONG v13; // rcx
  DWORD v14; // eax
  HANDLE Handles[3]; // [rsp+30h] [rbp-18h] BYREF

  v2 = a2;
  CurrentThreadId = GetCurrentThreadId();
  v5 = CurrentThreadId;
  if ( _interlockedbittestandset((volatile signed __int32 *)a1, 0x1Fu) )
  {
    if ( *(_DWORD *)(a1 + 4) != CurrentThreadId )
    {
      Handles[0] = *(HANDLE *)(a1 + 8);
      Handles[1] = hDnsShutdownEvent;
      TickCount64 = GetTickCount64();
      while ( 1 )
      {
        for ( i = 0; i < *(_DWORD *)(a1 + 16); ++i )
        {
          v9 = *(_DWORD *)a1;
          while ( v9 >= 0 )
          {
            v10 = v9;
            v9 = _InterlockedCompareExchange((volatile signed __int32 *)a1, v9 | 0x80000000, v9);
            if ( v10 == v9 )
              goto LABEL_23;
          }
          _mm_pause();
        }
        if ( (_DWORD)v2 != -1 && g_fDnsServiceExit == 1 )
          break;
        _InterlockedIncrement((volatile signed __int32 *)a1);
        if ( !_interlockedbittestandset((volatile signed __int32 *)a1, 0x1Fu) )
        {
          _InterlockedDecrement((volatile signed __int32 *)a1);
LABEL_23:
          result = 1i64;
          *(_DWORD *)(a1 + 4) = v5;
          return result;
        }
        if ( (_DWORD)v2 == -1 )
        {
          v11 = -1;
          v12 = 1;
        }
        else
        {
          v13 = GetTickCount64() - TickCount64;
          if ( v2 <= v13 )
            goto LABEL_20;
          v11 = v2 - v13;
          v12 = 2;
        }
        v14 = WaitForMultipleObjectsEx(v12, Handles, 0, v11, 0);
        if ( v14 && v14 != 258 )
        {
LABEL_20:
          _InterlockedDecrement((volatile signed __int32 *)a1);
          return 0i64;
        }
        _InterlockedDecrement((volatile signed __int32 *)a1);
      }
    }
    return 0i64;
  }
  else
  {
    *(_DWORD *)(a1 + 4) = CurrentThreadId;
    return 1i64;
  }
}
// 1401B9A40: using guessed type int g_fDnsServiceExit;
