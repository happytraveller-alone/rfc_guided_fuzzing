//----- (00000001400A148C) ----------------------------------------------------
__int64 Sock_StartReceiveOnUdpSockets()
{
  int v0; // esi
  __int64 v1; // rbx
  signed int v2; // edi
  bool v3; // cc
  __int64 v4; // r14

  v0 = 0;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x2000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x56u, (__int64)&WPP_0e6d7f56a09830e1f84833a99c0e37ce_Traceguids);
  }
  _InterlockedIncrement(&dword_1401C7B4C);
  EnterCriticalSection(&g_SocketListCs);
  v1 = g_SocketList;
  if ( (__int64 *)g_SocketList == &g_SocketList )
    goto LABEL_22;
  do
  {
    FastMutex_Acquire(*(_QWORD *)(v1 + 120), 0xFFFFFFFF);
    if ( *(_DWORD *)(v1 + 96) == 2 && *(_DWORD *)(v1 + 104) && !*(_QWORD *)(v1 + 24) )
    {
      v2 = 0;
      v3 = g_OverlapCount <= 0;
      *(_QWORD *)(v1 + 24) = g_hUdpCompletionPort;
      *(_BYTE *)(v1 + 113) = 0;
      if ( !v3 )
      {
        v4 = 0i64;
        do
        {
          *(_DWORD *)(v4 + *(_QWORD *)(v1 + 224)) = v2;
          if ( !*(_QWORD *)(v4 + *(_QWORD *)(v1 + 224) + 40) )
            Udp_DropReceive(v1, v2);
          ++v2;
          v4 += 64i64;
        }
        while ( v2 < g_OverlapCount );
      }
      if ( !*(_QWORD *)(v1 + 24) )
      {
        Log_SocketFailure("Start UDP listen failed!", v1, 0);
        ++v0;
      }
    }
    FastMutex_Release(*(_QWORD *)(v1 + 120));
    v1 = *(_QWORD *)v1;
  }
  while ( (__int64 *)v1 != &g_SocketList );
  if ( !v0 )
  {
LABEL_22:
    g_fUdpSocketsDirty = 0;
  }
  else if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
         && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x2000) != 0
         && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_D(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x57u, (__int64)&WPP_0e6d7f56a09830e1f84833a99c0e37ce_Traceguids, v0);
  }
  LeaveCriticalSection(&g_SocketListCs);
  return 0i64;
}
// 1401C7B4C: using guessed type int dword_1401C7B4C;
// 1401C86AC: using guessed type int g_fUdpSocketsDirty;
// 1401C87F0: using guessed type __int64 g_SocketList;
// 1401C8828: using guessed type int g_OverlapCount;
