//----- (00000001401395C8) ----------------------------------------------------
__int64 __fastcall CDnsPolicyManager::GetPolicyLock(__int64 a1, int a2, __int64 a3)
{
  __int64 v3; // rdi
  __int64 v6; // rsi
  _QWORD *v7; // rax
  const char *PolicyTypeString; // rax
  __int64 v9; // r10

  v3 = 0i64;
  if ( a3 )
  {
    v6 = *(_QWORD *)(a3 + 208) + 16i64 * a2;
    if ( *(_QWORD *)(v6 + 8) )
      return *(_QWORD *)(v6 + 8);
    v7 = Lock_Create();
    *(_QWORD *)(v6 + 8) = v7;
    if ( v7 )
    {
      return *(_QWORD *)(v6 + 8);
    }
    else
    {
      GetLastError();
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        PolicyTypeString = GetPolicyTypeString(a2);
        WPP_SF_sd(
          *(_QWORD *)(v9 + 56),
          0x99u,
          (__int64)&WPP_bbbcc621566c3408fe84d6a85874d543_Traceguids,
          PolicyTypeString);
      }
      return 0i64;
    }
  }
  else if ( a2 )
  {
    switch ( a2 )
    {
      case 2:
        return qword_1401B9238;
      case 1:
        return qword_1401B91F8;
      case 3:
        return qword_1401B9208;
      case 4:
        return qword_1401B9228;
      default:
        return v3;
    }
  }
  else
  {
    return qword_1401B9218;
  }
}
// 14013968A: variable 'v9' is possibly undefined
// 1401B91F8: using guessed type __int64 qword_1401B91F8;
// 1401B9208: using guessed type __int64 qword_1401B9208;
// 1401B9218: using guessed type __int64 qword_1401B9218;
// 1401B9228: using guessed type __int64 qword_1401B9228;
// 1401B9238: using guessed type __int64 qword_1401B9238;
