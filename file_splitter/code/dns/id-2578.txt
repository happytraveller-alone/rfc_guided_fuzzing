//----- (0000000140130ED4) ----------------------------------------------------
CDnsPolicy_CriteriaNode *__fastcall CDnsPolicy_CriteriaNode::`scalar deleting destructor'(
        CDnsPolicy_CriteriaNode *this)
{
  _QWORD *v2; // rcx
  _QWORD ***v3; // rax
  _QWORD **v4; // rcx
  _QWORD **v5; // rax
  _QWORD *v6; // rcx
  _QWORD *v7; // rbx
  _QWORD *v8; // rcx
  _QWORD *v9; // rbx

  while ( *((_QWORD *)this + 4) )
  {
    v2 = *(_QWORD **)(**((_QWORD **)this + 3) + 16i64);
    if ( v2 )
    {
      *v2 = &CDnsPolicy_CriteriaTree::`vftable';
      operator delete(v2);
    }
    v3 = (_QWORD ***)*((_QWORD *)this + 3);
    v4 = *v3;
    if ( *v3 != v3 )
    {
      *v4[1] = *v4;
      (*v4)[1] = v4[1];
      operator delete(v4);
      --*((_QWORD *)this + 4);
    }
  }
  v5 = (_QWORD **)*((_QWORD *)this + 3);
  v6 = *v5;
  *v5 = v5;
  *(_QWORD *)(*((_QWORD *)this + 3) + 8i64) = *((_QWORD *)this + 3);
  *((_QWORD *)this + 4) = 0i64;
  if ( v6 != *((_QWORD **)this + 3) )
  {
    do
    {
      v7 = (_QWORD *)*v6;
      operator delete(v6);
      v6 = v7;
    }
    while ( v7 != *((_QWORD **)this + 3) );
  }
  operator delete(*((void **)this + 3));
  v8 = **(_QWORD ***)this;
  **(_QWORD **)this = *(_QWORD *)this;
  *(_QWORD *)(*(_QWORD *)this + 8i64) = *(_QWORD *)this;
  *((_QWORD *)this + 1) = 0i64;
  if ( v8 != *(_QWORD **)this )
  {
    do
    {
      v9 = (_QWORD *)*v8;
      operator delete(v8);
      v8 = v9;
    }
    while ( v9 != *(_QWORD **)this );
  }
  operator delete(*(void **)this);
  operator delete(this);
  return this;
}
// 1401719A0: using guessed type void *CDnsPolicy_CriteriaTree::`vftable';
// 140184CA8: using guessed type void __stdcall operator delete(void *);
