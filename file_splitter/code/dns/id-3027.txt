//----- (000000014015BEC0) ----------------------------------------------------
_WORD *__fastcall Atma_RecordBuildW(int a1, __int64 a2)
{
  _WORD *Record; // rbx
  char v5; // al
  WCHAR *v6; // r8
  __int64 v7; // rcx
  __int64 v8; // r9
  _BYTE *v9; // rdx
  _BYTE *v10; // r14
  __int64 v11; // rbp
  char *v12; // rsi
  char String[4]; // [rsp+30h] [rbp-138h] BYREF
  int v14[3]; // [rsp+34h] [rbp-134h] BYREF
  _WORD v15[128]; // [rsp+40h] [rbp-128h] BYREF

  if ( a1 != 2 )
    goto LABEL_2;
  Record = Dns_AllocateRecordEx(0x29ui64);
  if ( !Record )
    return 0i64;
  v5 = wcstoul(*(const wchar_t **)a2, 0i64, 10);
  if ( (unsigned __int8)(v5 - 1) > 1u
    || (*((_BYTE *)Record + 32) = v5,
        v6 = *(WCHAR **)(a2 + 8),
        v14[0] = 42,
        !(unsigned int)Dns_StringCopy(v15, (unsigned int *)v14, v6, 0, 1, 2)) )
  {
    Dns_RecordFree((void **)Record);
LABEL_2:
    SetLastError(0xDu);
    return 0i64;
  }
  v7 = -1i64;
  if ( *((_BYTE *)Record + 32) == 1 )
  {
    do
      ++v7;
    while ( *((_BYTE *)v15 + v7) );
    if ( (unsigned int)v7 > 0x14 )
      LODWORD(v7) = 20;
    if ( (_DWORD)v7 )
    {
      v8 = (unsigned int)v7;
      v9 = (char *)Record + 33;
      do
      {
        *v9 = v9[(char *)v15 - (char *)Record - 33];
        ++v9;
        --v8;
      }
      while ( v8 );
    }
    Record[9] = v7;
  }
  else
  {
    do
      ++v7;
    while ( *((_BYTE *)v15 + v7) );
    if ( (unsigned int)v7 >> 1 != 20 )
    {
      Dns_RecordFree((void **)Record);
      return 0i64;
    }
    v10 = (char *)Record + 33;
    v11 = 20i64;
    v12 = (char *)v15;
    do
    {
      String[0] = *v12;
      String[1] = v12[1];
      String[2] = 0;
      *v10 = strtoul(String, 0i64, 16);
      v12 += 2;
      ++v10;
      --v11;
    }
    while ( v11 );
    Record[9] = 20;
  }
  ++Record[9];
  return Record;
}
// 14015BEC0: using guessed type unsigned int var_134[3];
