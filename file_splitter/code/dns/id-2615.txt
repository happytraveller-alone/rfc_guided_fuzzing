//----- (0000000140134DC0) ----------------------------------------------------
__int64 __fastcall CDnsPolicyManager::AddPolicy(CDnsPolicyManager *this, const void **a2, struct _zone_info *a3)
{
  char v5; // bl
  const wchar_t *v6; // rdi
  __int64 v7; // rax
  unsigned int PolicyCriteriaInOrder; // r15d
  __int64 **v9; // rdi
  CDnsPolicyManager *v10; // rcx
  __int64 PolicyLock; // rax
  __int64 v12; // r13
  __int64 v13; // rcx
  struct _zone_info *v14; // r8
  const void **v15; // r14
  __int64 **v16; // rax
  __int64 *v17; // rax
  unsigned __int16 i; // r14
  CDnsPolicyManager *v19; // rcx
  struct CDnsPolicy_CriteriaTree *PolicyCriteriaSearchTree; // rax
  const void **v21; // r14
  _QWORD *v22; // rax
  __int64 *v23; // rcx
  __int64 v24; // rax
  __int64 *v25; // rbx
  __int64 v26; // r14
  _QWORD *v27; // rdx
  __int64 v28; // rax
  __int64 *v29; // rcx
  __int64 *v30; // rcx
  __int64 *v31; // rbx
  int v33; // [rsp+98h] [rbp-108h]
  unsigned int v34; // [rsp+A4h] [rbp-FCh] BYREF
  unsigned int v35; // [rsp+A8h] [rbp-F8h] BYREF
  const void **v36; // [rsp+B0h] [rbp-F0h]
  __int64 v37; // [rsp+B8h] [rbp-E8h]
  __int64 **v38; // [rsp+C0h] [rbp-E0h] BYREF
  __int64 PolicySearchCriteriaRoots; // [rsp+C8h] [rbp-D8h]
  __int64 v40[4]; // [rsp+D0h] [rbp-D0h] BYREF
  __int128 v41; // [rsp+F0h] [rbp-B0h] BYREF
  __int64 v42; // [rsp+100h] [rbp-A0h]
  __int64 v43; // [rsp+110h] [rbp-90h]
  char pExceptionObject[24]; // [rsp+118h] [rbp-88h] BYREF
  void *v45[3]; // [rsp+130h] [rbp-70h] BYREF
  unsigned __int64 v46; // [rsp+148h] [rbp-58h]

  v43 = -2i64;
  v36 = a2;
  v40[0] = (__int64)this;
  v40[2] = (__int64)a2;
  v40[1] = (__int64)a3;
  v5 = 0;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
  {
    if ( a3 )
      v6 = (const wchar_t *)*((_QWORD *)a3 + 3);
    else
      v6 = L"Not Applicable";
    v7 = CDnsPolicy::Name(a2, (__int64)v45);
    v5 = 1;
    if ( *(_QWORD *)(v7 + 24) >= 8ui64 )
      v7 = *(_QWORD *)v7;
    WPP_SF_SdS(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x50u,
      (__int64)&WPP_bbbcc621566c3408fe84d6a85874d543_Traceguids,
      (const unsigned __int16 *)v7,
      *((_DWORD *)a2 + 21),
      (__int64)v6);
  }
  if ( (v5 & 1) != 0 )
  {
    v5 &= ~1u;
    if ( v46 >= 8 )
      operator delete(v45[0]);
  }
  PolicyCriteriaInOrder = 0;
  v33 = 0;
  v38 = 0i64;
  v41 = 0i64;
  v42 = 0i64;
  std::vector<CDNSPolicyCriteria *>::_Construct_n(&v41, (__int64)a2, (__int64 *)&v38);
  v9 = 0i64;
  PolicyLock = CDnsPolicyManager::GetPolicyLock(v10, (struct CDnsPolicy *)a2, a3);
  v12 = PolicyLock;
  v37 = PolicyLock;
  if ( PolicyLock )
  {
    v35 = -1;
    if ( (unsigned int)acquireUpdate(PolicyLock, 0x2710u, &v35, 1) == -1 )
    {
      PolicyCriteriaInOrder = 9980;
      goto LABEL_55;
    }
    v33 = 1;
    v35 = 1;
    v14 = a3;
    v15 = v36;
    PolicySearchCriteriaRoots = CDnsPolicyManager::GetPolicySearchCriteriaRoots(v13, (__int64)v36, (__int64)v14);
    if ( !PolicySearchCriteriaRoots )
    {
      PolicyCriteriaInOrder = 14;
      goto LABEL_55;
    }
    v16 = (__int64 **)operator new(0x18ui64);
    v9 = v16;
    v38 = v16;
    if ( v16 )
    {
      v16[1] = 0i64;
      v17 = (__int64 *)operator new(0x18ui64);
      if ( !v17 )
      {
        std::bad_alloc::bad_alloc((std::bad_alloc *)pExceptionObject, 0i64);
        CxxThrowException_0(pExceptionObject, (_ThrowInfo *)&TI2_AVbad_alloc_std__);
      }
      *v9 = v17;
      *v17 = (__int64)v17;
      (*v9)[1] = (__int64)*v9;
    }
    else
    {
      v9 = 0i64;
    }
    v38 = v9;
    PolicyCriteriaInOrder = CDnsPolicyUtil::GetPolicyCriteriaInOrder((__int64)v15, &v41);
    if ( !PolicyCriteriaInOrder )
    {
      for ( i = 0; i < 7u; ++i )
      {
        if ( *(_QWORD *)(v41 + 8i64 * i) )
        {
          if ( !*(_QWORD *)(PolicySearchCriteriaRoots + 8i64 * i) )
          {
            v34 = -1;
            if ( (unsigned int)acquireWrite(v37, 0x2710u, &v34) == -1 )
            {
              PolicyCriteriaInOrder = 9980;
              break;
            }
            PolicyCriteriaSearchTree = CDnsPolicyManager::GetPolicyCriteriaSearchTree(v19, i);
            *(_QWORD *)(PolicySearchCriteriaRoots + 8i64 * i) = PolicyCriteriaSearchTree;
            Lock_ReleaseWrite(v37);
          }
          CDnsPolicyManager::AddCriteriaToPolicyTree(
            v40[0],
            *(_QWORD *)(PolicySearchCriteriaRoots + 8i64 * i),
            &v41,
            i,
            (__int64)v36,
            v9,
            v37);
          if ( !*((_DWORD *)v36 + 20) )
            break;
        }
      }
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) == 0 )
      {
        v21 = v36;
      }
      else
      {
        v21 = v36;
        if ( *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          v22 = (_QWORD *)CDnsPolicy::Name(v36, (__int64)v45);
          v5 |= 4u;
          if ( v22[3] >= 8ui64 )
            v22 = (_QWORD *)*v22;
          WPP_SF_DS(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x52u,
            (__int64)&WPP_bbbcc621566c3408fe84d6a85874d543_Traceguids,
            *((_DWORD *)v9 + 2),
            (__int64)v22);
        }
      }
      if ( (v5 & 4) != 0 && v46 >= 8 )
        operator delete(v45[0]);
      v34 = -1;
      v12 = v37;
      if ( (unsigned int)acquireWrite(v37, 0x2710u, &v34) == -1 )
      {
        PolicyCriteriaInOrder = 9980;
        goto LABEL_55;
      }
      while ( v9[1] )
      {
        v24 = **v9;
        v40[0] = (__int64)v21;
        v25 = *(__int64 **)(v24 + 16);
        v26 = *v25;
        v27 = std::_List_val<CDNSPolicyCriteria *>::_Buynode((__int64)v23, *v25, *(_QWORD *)(*v25 + 8), v40);
        v28 = v25[1];
        if ( 0x1FFFFFFFFFFFFFFEi64 == v28 )
          std::_Xlength_error("list<T> too long");
        v25[1] = v28 + 1;
        *(_QWORD *)(v26 + 8) = v27;
        *(_QWORD *)v27[1] = v27;
        v23 = (__int64 *)**v9;
        v21 = v36;
        if ( v23 != *v9 )
        {
          *(_QWORD *)v23[1] = *v23;
          *(_QWORD *)(*v23 + 8) = v23[1];
          operator delete(v23);
          v9[1] = (__int64 *)((char *)v9[1] - 1);
        }
      }
      Lock_ReleaseWrite(v12);
    }
    if ( !PolicyCriteriaInOrder )
    {
LABEL_56:
      if ( v9 )
      {
        v30 = (__int64 *)**v9;
        **v9 = (__int64)*v9;
        (*v9)[1] = (__int64)*v9;
        v9[1] = 0i64;
        if ( v30 != *v9 )
        {
          do
          {
            v31 = (__int64 *)*v30;
            operator delete(v30);
            v30 = v31;
          }
          while ( v31 != *v9 );
        }
        operator delete(*v9);
        operator delete(v9);
      }
      if ( v33 )
      {
        v34 = -1;
        releaseUpdate(v12, &v34, 1);
      }
      goto LABEL_62;
    }
LABEL_55:
    while ( v9[1] )
    {
      v29 = (__int64 *)**v9;
      if ( v29 != *v9 )
      {
        *(_QWORD *)v29[1] = *v29;
        *(_QWORD *)(*v29 + 8) = v29[1];
        operator delete(v29);
        v9[1] = (__int64 *)((char *)v9[1] - 1);
      }
    }
    goto LABEL_56;
  }
LABEL_62:
  if ( (_QWORD)v41 )
    operator delete((void *)v41);
  return PolicyCriteriaInOrder;
}
// 140134DC0: could not find valid save-restore pair for rbp
// 140134EFE: variable 'a2' is possibly undefined
// 140134F0D: variable 'v10' is possibly undefined
// 140134F67: variable 'v13' is possibly undefined
// 140135061: variable 'v19' is possibly undefined
// 1401351BC: variable 'v23' is possibly undefined
// 140184CA8: using guessed type void __stdcall operator delete(void *);
// 140185140: using guessed type __int64 (__fastcall *_guard_dispatch_icall_fptr)(_QWORD, _QWORD);
// 140194918: using guessed type wchar_t aNotApplicable[15];
