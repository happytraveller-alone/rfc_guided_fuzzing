//----- (0000000140157064) ----------------------------------------------------
__int64 __fastcall Dns_ParseSigTime(__int64 a1, int a2)
{
  __int64 v2; // rax
  __int64 v4; // rdx
  WORD v5; // ax
  struct _FILETIME FileTime; // [rsp+20h] [rbp-30h] BYREF
  SYSTEMTIME SystemTime; // [rsp+28h] [rbp-28h] BYREF
  _FILETIME String; // [rsp+38h] [rbp-18h] BYREF

  FileTime.dwLowDateTime = 0;
  LODWORD(v2) = a2;
  LODWORD(v4) = -1;
  FileTime.dwHighDateTime = 0;
  if ( !(_DWORD)v2 )
  {
    v2 = -1i64;
    do
      ++v2;
    while ( *(_BYTE *)(a1 + v2) );
  }
  if ( (_DWORD)v2 == 14 )
  {
    LOBYTE(String.dwHighDateTime) = 0;
    *(_QWORD *)&SystemTime.wYear = 0i64;
    *(_QWORD *)&SystemTime.wHour = 0i64;
    String.dwLowDateTime = *(_DWORD *)a1;
    v5 = atoi((const char *)&String);
    BYTE2(String.dwLowDateTime) = 0;
    SystemTime.wYear = v5;
    LOWORD(String.dwLowDateTime) = *(_WORD *)(a1 + 4);
    *(_DWORD *)&SystemTime.wMonth = (unsigned __int16)atoi((const char *)&String);
    LOWORD(String.dwLowDateTime) = *(_WORD *)(a1 + 6);
    *(_QWORD *)&SystemTime.wDay = (unsigned __int16)atoi((const char *)&String);
    LOWORD(String.dwLowDateTime) = *(_WORD *)(a1 + 8);
    *(_DWORD *)&SystemTime.wHour = (unsigned __int16)atoi((const char *)&String);
    LOWORD(String.dwLowDateTime) = *(_WORD *)(a1 + 10);
    SystemTime.wMinute = atoi((const char *)&String);
    LOWORD(String.dwLowDateTime) = *(_WORD *)(a1 + 12);
    SystemTime.wSecond = atoi((const char *)&String);
    SystemTimeToFileTime(&SystemTime, &FileTime);
    String = FileTime;
    return (unsigned int)((*(_QWORD *)&FileTime - 116444736000000000i64) / 0x989680ui64);
  }
  return (unsigned int)v4;
}
// 140157064: using guessed type struct _FILETIME String;
