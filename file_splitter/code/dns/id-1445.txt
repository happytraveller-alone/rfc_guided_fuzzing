//----- (00000001400B4294) ----------------------------------------------------
void __fastcall Udp_DropReceive(__int64 a1, unsigned int a2)
{
  __int64 v2; // rsi
  CDnsClientSubnetRecordsTrie *v4; // rcx
  __int64 UdpMessage; // rax
  __int64 v6; // rbp
  _DWORD *v7; // r13
  __int64 v8; // r14
  __int64 v9; // rax
  DWORD LastError; // esi
  CDnsClientSubnetRecordsTrie *v11; // rcx
  __int64 v12; // rdx
  __int64 v13; // r8
  const char *v14; // rax
  int v15; // ebp
  __int64 v16; // r8
  __int128 v17[4]; // [rsp+50h] [rbp-68h] BYREF

  v2 = a2;
  v4 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x2000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
  {
    GetCurrentThreadId();
    WPP_SF_Dd(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0xAu,
      (__int64)&WPP_c6f5dbb53293365598fc41978a1596e7_Traceguids,
      *(_DWORD *)(a1 + 16));
    v4 = WPP_GLOBAL_Control;
  }
  if ( g_fDnsServiceExit == 1 )
    goto LABEL_75;
  if ( !(unsigned int)Thread_ServiceCheck(0) )
  {
    v4 = WPP_GLOBAL_Control;
LABEL_75:
    if ( v4 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)v4 + 17) & 0x2000) != 0
      && *((_BYTE *)v4 + 65) >= 4u )
    {
      WPP_SF_(*((_QWORD *)v4 + 7), 0xBu, (__int64)&WPP_c6f5dbb53293365598fc41978a1596e7_Traceguids);
    }
    return;
  }
  if ( (unsigned int)v2 >= g_OverlapCount )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x2000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_Dd(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0xCu,
        (__int64)&WPP_c6f5dbb53293365598fc41978a1596e7_Traceguids,
        v2);
    }
    return;
  }
  UdpMessage = Packet_AllocateUdpMessage();
  v6 = UdpMessage;
  if ( !UdpMessage )
    return;
  v7 = (_DWORD *)(UdpMessage + 96);
  v8 = v2 << 6;
  *(_QWORD *)(v8 + *(_QWORD *)(a1 + 224) + 40) = UdpMessage;
  *(_DWORD *)(v8 + *(_QWORD *)(a1 + 224) + 48) = *(_DWORD *)(UdpMessage + 48);
  *(_QWORD *)(v8 + *(_QWORD *)(a1 + 224) + 56) = UdpMessage + 6304;
  v9 = *(_QWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 132) = 0;
  *(_QWORD *)(v6 + 56) = v9;
  *(_DWORD *)(a1 + 108) = 1;
  for ( *(_DWORD *)(v6 + 96) = 32;
        WSARecvFrom(
          *(_QWORD *)(a1 + 16),
          (LPWSABUF)(v8 + *(_QWORD *)(a1 + 224) + 48i64),
          1u,
          (LPDWORD)(a1 + 128),
          (LPDWORD)(a1 + 132),
          (struct sockaddr *)(v6 + 64),
          (LPINT)(v6 + 96),
          (LPWSAOVERLAPPED)(v8 + *(_QWORD *)(a1 + 224) + 8i64),
          0i64);
        *v7 = 32 )
  {
    LastError = GetLastError();
    if ( LastError == 997 )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x2000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
      {
        WPP_SF_D(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0xEu,
          (__int64)&WPP_c6f5dbb53293365598fc41978a1596e7_Traceguids,
          *(_DWORD *)(a1 + 16));
      }
      goto LABEL_41;
    }
    if ( *(_DWORD *)(a1 + 108) != 1 )
    {
      v15 = *(_DWORD *)(a1 + 108);
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x2000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        GetCurrentThreadId();
        WPP_SF_ddD(*((_QWORD *)WPP_GLOBAL_Control + 7), 0xFu, v16, *(_DWORD *)(a1 + 16));
      }
      if ( v15 == -1 )
        Sock_CleanupDeadSocketMessage(a1);
      Log_SocketFailure("ERROR: RecvFrom failure in weird state.", a1, LastError);
      return;
    }
    *(_DWORD *)(a1 + 108) = 3;
    v11 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x2000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      GetCurrentThreadId();
      WPP_SF_dqdD(*((_QWORD *)WPP_GLOBAL_Control + 7), v12, v13, LastError);
      v11 = WPP_GLOBAL_Control;
    }
    if ( ((LastError - 10052) & 0xFFFFFFFD) != 0 )
    {
      if ( LastError != 10040 )
      {
        if ( g_fDnsServiceExit != 1 )
        {
          if ( (unsigned int)Thread_ServiceCheck(1) )
          {
            if ( (unsigned int)Sock_GetAssociatedIpAddr(*(_QWORD *)(a1 + 16), v17) )
            {
              Packet_FreeUdpMessage(v6);
              *(_QWORD *)(v8 + *(_QWORD *)(a1 + 224) + 40) = 0i64;
              _InterlockedIncrement(&dword_1401C7B2C);
              if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x2000) != 0
                && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
              {
                WPP_SF_q(
                  *((_QWORD *)WPP_GLOBAL_Control + 7),
                  0x58u,
                  (__int64)&WPP_0e6d7f56a09830e1f84833a99c0e37ce_Traceguids,
                  a1);
              }
              Log_SocketFailure("ERROR: RecvFrom() failed causing listen shutdown!", a1, LastError);
              _InterlockedIncrement(&dword_1401C7B48);
              EnterCriticalSection(&g_SocketListCs);
              *(_QWORD *)(a1 + 24) = 0i64;
              g_fUdpSocketsDirty = 1;
              LeaveCriticalSection(&g_SocketListCs);
              if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x2000) != 0
                && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
              {
                WPP_SF_Ddq(
                  *((_QWORD *)WPP_GLOBAL_Control + 7),
                  0x17u,
                  (__int64)&WPP_c6f5dbb53293365598fc41978a1596e7_Traceguids,
                  *(_DWORD *)(a1 + 16));
              }
            }
            else
            {
              if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x2000) != 0
                && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
              {
                WPP_SF_Dq(
                  *((_QWORD *)WPP_GLOBAL_Control + 7),
                  0x16u,
                  (__int64)&WPP_c6f5dbb53293365598fc41978a1596e7_Traceguids,
                  *(_DWORD *)(a1 + 16));
              }
              Sock_CleanupDeadSocketMessage(a1);
            }
            return;
          }
          v11 = WPP_GLOBAL_Control;
        }
        if ( v11 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)v11 + 17) & 0x2000) != 0
          && *((_BYTE *)v11 + 65) >= 4u )
        {
          WPP_SF_D(*((_QWORD *)v11 + 7), 0x15u, (__int64)&WPP_c6f5dbb53293365598fc41978a1596e7_Traceguids, LastError);
        }
        return;
      }
      if ( v11 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)v11 + 17) & 0x2000) != 0
        && *((_BYTE *)v11 + 65) >= 4u )
      {
        WPP_SF_Dd(
          *((_QWORD *)v11 + 7),
          0x14u,
          (__int64)&WPP_c6f5dbb53293365598fc41978a1596e7_Traceguids,
          *(_DWORD *)(a1 + 16));
      }
      _InterlockedIncrement(&dword_1401C7B30);
    }
    else
    {
      if ( v11 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)v11 + 17) & 0x2000) != 0
        && *((_BYTE *)v11 + 65) >= 4u )
      {
        WPP_SF_D(*((_QWORD *)v11 + 7), 0x11u, (__int64)&WPP_c6f5dbb53293365598fc41978a1596e7_Traceguids, LastError);
        v11 = WPP_GLOBAL_Control;
      }
      if ( v11 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)v11 + 17) & 0x2000) != 0
        && *((_BYTE *)v11 + 65) >= 4u )
      {
        WPP_SF_Ddd(
          *((_QWORD *)v11 + 7),
          0x12u,
          (__int64)&WPP_c6f5dbb53293365598fc41978a1596e7_Traceguids,
          *(_DWORD *)(a1 + 16));
      }
      ++*(_BYTE *)(a1 + 113);
      _InterlockedIncrement(&dword_1401C7B34);
    }
    *(_DWORD *)(a1 + 108) = 1;
  }
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x2000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
  {
    v14 = DnsAddr_Ntoa((struct in_addr *)(v6 + 64));
    WPP_SF_Dds(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0xDu,
      (__int64)&WPP_c6f5dbb53293365598fc41978a1596e7_Traceguids,
      *(_DWORD *)(a1 + 16),
      *(_DWORD *)(a1 + 128),
      (__int64)v14);
  }
LABEL_41:
  *(_BYTE *)(a1 + 113) = 0;
}
// 1400B44A6: variable 'v12' is possibly undefined
// 1400B44A6: variable 'v13' is possibly undefined
// 1400B4899: variable 'v16' is possibly undefined
// 1401B9A40: using guessed type int g_fDnsServiceExit;
// 1401C7B2C: using guessed type int dword_1401C7B2C;
// 1401C7B30: using guessed type int dword_1401C7B30;
// 1401C7B34: using guessed type int dword_1401C7B34;
// 1401C7B48: using guessed type int dword_1401C7B48;
// 1401C86AC: using guessed type int g_fUdpSocketsDirty;
// 1401C8828: using guessed type int g_OverlapCount;
// 1400B4294: using guessed type __int128 var_68[4];
