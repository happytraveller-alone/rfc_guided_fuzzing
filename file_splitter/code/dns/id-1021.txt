//----- (0000000140087610) ----------------------------------------------------
__int64 __fastcall NbstatFlatRead(unsigned __int16 *a1, __int64 a2)
{
  char *v2; // r8
  unsigned __int64 v5; // rcx
  const char *v7; // rax
  int v8; // eax
  _BYTE *v9; // rax
  unsigned __int8 v10[272]; // [rsp+30h] [rbp-138h] BYREF

  v2 = (char *)a1 + *a1 + 24;
  if ( v2 < (char *)a1 + 38 )
    return 9702i64;
  v5 = *((unsigned __int8 *)a1 + 36);
  if ( v2 < (char *)a1 + v5 + 37 )
    return 9702i64;
  if ( !(_BYTE)v5 )
    return 13i64;
  if ( (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
    && WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    v7 = (const char *)FormatLabelA(v5, (char *)a1 + 37);
    WPP_SF_sd(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x11u, (__int64)&WPP_383afeabe81e3a0b0d234d71fa57327a_Traceguids, v7);
  }
  v8 = Name_ConvertRpcNameToCountName(v10, (unsigned __int8 *)a1 + 36);
  if ( !v8 )
    return 9702i64;
  v9 = RR_AllocateEx((unsigned __int16)v8 + 12, 0, 0);
  if ( !v9 )
    return 14i64;
  *(_QWORD *)(a2 + 800) = v9;
  if ( *a1 < 0xEu )
    return 13i64;
  *(_OWORD *)(v9 + 56) = *(_OWORD *)(a1 + 12);
  Name_CopyCountName(v9 + 68, v10);
  return 0i64;
}
