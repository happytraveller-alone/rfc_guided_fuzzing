//----- (000000014014D6B0) ----------------------------------------------------
volatile signed __int32 *__fastcall UpdateZoneLevelRRLStats(__int64 a1, int a2)
{
  __int64 v2; // rax
  CDnsClientSubnetRecordsTrie *v3; // rcx
  volatile signed __int32 *result; // rax
  unsigned __int16 v5; // dx

  if ( (*(_BYTE *)(a1 + 6307) & 0xF) == 5 )
    v2 = *(_QWORD *)(a1 + 464);
  else
    v2 = *(_QWORD *)(a1 + 456);
  if ( v2 )
    v2 = *(_QWORD *)(v2 + 56);
  if ( v2 )
  {
    result = *(volatile signed __int32 **)(v2 + 1648);
    if ( !result )
      return result;
    switch ( a2 )
    {
      case 0:
        _InterlockedIncrement(result + 357);
        return result;
      case 3:
        _InterlockedIncrement(result + 358);
        return result;
      case 1:
        _InterlockedIncrement(result + 360);
        return result;
      case 2:
        _InterlockedIncrement(result + 359);
        return result;
    }
    v3 = WPP_GLOBAL_Control;
    result = (volatile signed __int32 *)&WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      v5 = 47;
      return (volatile signed __int32 *)WPP_SF_(
                                          *((_QWORD *)v3 + 7),
                                          v5,
                                          (__int64)&WPP_fb17dad7faab38b20f3316f2d4e4b278_Traceguids);
    }
  }
  else
  {
    v3 = WPP_GLOBAL_Control;
    result = (volatile signed __int32 *)&WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      v5 = 46;
      return (volatile signed __int32 *)WPP_SF_(
                                          *((_QWORD *)v3 + 7),
                                          v5,
                                          (__int64)&WPP_fb17dad7faab38b20f3316f2d4e4b278_Traceguids);
    }
  }
  return result;
}
