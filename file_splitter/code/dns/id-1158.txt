//----- (0000000140094AD0) ----------------------------------------------------
__int64 __fastcall Dnssrv_R_DnssrvEnumRecords4(
        int a1,
        __int64 a2,
        __int64 a3,
        __int64 a4,
        const wchar_t *a5,
        char *Str2,
        WCHAR *a7,
        char *a8,
        _BYTE *a9,
        __int16 a10,
        int a11,
        int a12,
        int a13,
        int *a14,
        _QWORD *a15)
{
  __int64 SiblingWithLocking; // rdi
  void *v16; // r13
  CDnsClientSubnetRecordsTrie *v18; // rcx
  __int64 result; // rax
  __int64 v20; // r9
  __int64 v21; // rsi
  int ZoneScope; // eax
  unsigned int v23; // ebx
  __int64 v24; // r15
  _BYTE *ZoneNodeFromDotted; // rax
  __int64 v26; // r14
  int *v27; // r8
  void *v28; // rax
  _BYTE *ChildNode; // rax
  unsigned int v30; // eax
  __int64 v31; // [rsp+58h] [rbp-49h] BYREF
  BOOL v32; // [rsp+60h] [rbp-41h] BYREF
  __int64 v33; // [rsp+68h] [rbp-39h] BYREF
  __int64 v34; // [rsp+70h] [rbp-31h] BYREF
  int v35; // [rsp+78h] [rbp-29h]
  void *v36; // [rsp+80h] [rbp-21h]
  __int64 v37; // [rsp+88h] [rbp-19h]
  void *v38; // [rsp+90h] [rbp-11h]
  __int64 v39; // [rsp+98h] [rbp-9h]

  v33 = 0i64;
  SiblingWithLocking = 0i64;
  v32 = 0;
  v16 = 0i64;
  v31 = 0i64;
  v18 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
  {
    if ( (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0 && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_DDsS(*((_QWORD *)WPP_GLOBAL_Control + 7), a2, a3, a1, a2, (__int64)Str2, (__int64)a5);
      v18 = WPP_GLOBAL_Control;
    }
    if ( v18 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)v18 + 68) & 4) != 0
      && *((_BYTE *)v18 + 65) >= 4u )
    {
      WPP_SF_ssdDq(*((_QWORD *)v18 + 7), (unsigned int)a11, (__int64)a14, a8, (__int64)a9);
    }
  }
  if ( !a14 || !a15 )
    return 87i64;
  *a14 = 0;
  *a15 = 0i64;
  memset_0(&v34, 0, 0x30ui64);
  result = RpcUtil_FindVirtualizationInstance(a5, &v31);
  if ( !(_DWORD)result )
  {
    result = RpcUtil_FindZoneEx(Str2, 1, &v33, 0, v31);
    if ( !(_DWORD)result )
    {
      v21 = v33;
      result = RpcUtil_SessionSecurityInit(0i64, v33, 20, v20, &v32);
      LODWORD(v31) = result;
      if ( !(_DWORD)result )
      {
        if ( a7 )
        {
          v33 = 0i64;
          ZoneScope = GetZoneScope(v21, a7, &v33);
          LODWORD(v31) = ZoneScope;
          v23 = ZoneScope;
          if ( ZoneScope )
          {
            if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
              && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
            {
              WPP_SF_D(
                *((_QWORD *)WPP_GLOBAL_Control + 7),
                0xDu,
                (__int64)&WPP_94ace1326352386894146b7c4d888c88_Traceguids,
                ZoneScope);
            }
            goto LABEL_56;
          }
          v21 = v33;
        }
        v24 = -1i64;
        ZoneNodeFromDotted = Lookup_FindZoneNodeFromDotted((_QWORD *)v21, a8, (__int64 *)0xFFFFFFFFFFFFFFFFi64, &v31);
        v23 = v31;
        v26 = (__int64)ZoneNodeFromDotted;
        if ( !(_DWORD)v31 )
        {
          if ( !ZoneNodeFromDotted )
            goto LABEL_23;
          if ( v21 && *(_DWORD *)(v21 + 372) != 4 && !NTree_NodeOrChildHasRecords((__int64)ZoneNodeFromDotted, 1) )
          {
            v23 = 9714;
LABEL_28:
            v27 = a14;
LABEL_29:
            if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
              && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
            {
              WPP_SF_dqd(
                *((_QWORD *)WPP_GLOBAL_Control + 7),
                0xEu,
                (__int64)&WPP_94ace1326352386894146b7c4d888c88_Traceguids,
                *v27);
            }
            if ( v32 )
              RpcUtil_SwitchSecurityContext(0);
            if ( (v23 & 0x11D000) != 0 )
              return 9002;
            return v23;
          }
          v28 = MIDL_user_allocate(0x40000ui64);
          v16 = v28;
          if ( !v28 )
          {
            v23 = 14;
            goto LABEL_28;
          }
          v36 = v28;
          v35 = 262128;
          v39 = 262128i64;
          v37 = (__int64)v28 + 262128;
          v38 = v28;
          v34 = 0i64;
          if ( a9 && *a9 )
          {
            do
              ++v24;
            while ( a9[v24] );
            ChildNode = NTree_FindOrCreateChildNodeEx(v26, a9, v24, 0, 0i64, 0, 0i64, 0, 0i64);
            SiblingWithLocking = (__int64)ChildNode;
            if ( !ChildNode || *(_QWORD *)ChildNode != v26 )
            {
              v23 = 87;
              goto LABEL_58;
            }
          }
          SetLastError(0);
          if ( SiblingWithLocking )
          {
LABEL_50:
            if ( (a11 & 0x10000) == 0 && SiblingWithLocking )
            {
              do
              {
                v30 = addNodeToRpcBuffer((__int64)&v34, v21, SiblingWithLocking, a10, a11, 0);
                v23 = v30;
                if ( v30 && (v30 == 234 || g_fDnsServiceExit == 1) )
                  break;
                SiblingWithLocking = NTree_NextSiblingWithLocking(SiblingWithLocking);
              }
              while ( SiblingWithLocking );
            }
LABEL_56:
            if ( !v23 )
              goto LABEL_23;
            goto LABEL_57;
          }
          if ( (a11 & 0x20000) != 0 || (v23 = addNodeToRpcBuffer((__int64)&v34, v21, v26, a10, a11, 0x80000000)) == 0 )
          {
            SiblingWithLocking = NTree_FirstChild(v26);
            goto LABEL_50;
          }
        }
LABEL_57:
        if ( v23 != 234 )
        {
LABEL_58:
          if ( v16 )
            MIDL_user_free(v16);
          goto LABEL_28;
        }
LABEL_23:
        v27 = a14;
        *a14 = (_DWORD)v38 - (_DWORD)v36;
        *a15 = v36;
        goto LABEL_29;
      }
    }
  }
  return result;
}
// 140094C1C: variable 'v20' is possibly undefined
// 1401B9A40: using guessed type int g_fDnsServiceExit;
