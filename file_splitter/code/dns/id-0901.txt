//----- (000000014007B2FC) ----------------------------------------------------
__int64 __fastcall Remote_BuildVisitListForNewZone(__int64 a1, __int64 a2)
{
  CDnsClientSubnetRecordsTrie *v4; // rbx
  char *v5; // rax
  __int64 v6; // r12
  char *v7; // rbx
  char *v8; // rax
  unsigned int v9; // esi
  char *v10; // rbx
  unsigned int v11; // eax
  int v12; // r15d
  __int64 i; // r14
  int v14; // r15d
  __int64 v15; // r14
  int v16; // edx
  int *v17; // r10
  int v18; // r8d
  int v19; // r9d
  int v20; // edi
  char v21; // r11
  __int128 *v22; // rcx
  unsigned int v23; // eax
  int v24; // eax
  __int128 v25; // xmm6
  unsigned int v26; // edi
  __int128 v27; // xmm7
  __int128 v28; // xmm8
  __int128 v29; // xmm9
  __int128 v30; // xmm0
  __int64 v31; // rcx
  const char *v32; // rax
  unsigned __int64 v33; // rcx
  unsigned int v35; // [rsp+30h] [rbp-D0h]
  char v36; // [rsp+30h] [rbp-D0h]
  int *v37; // [rsp+38h] [rbp-C8h]
  ULONG v38; // [rsp+40h] [rbp-C0h]
  unsigned int v39; // [rsp+44h] [rbp-BCh]
  int v40; // [rsp+48h] [rbp-B8h]
  char *v41; // [rsp+50h] [rbp-B0h]
  char *v42; // [rsp+58h] [rbp-A8h]
  __int128 Buf1[4]; // [rsp+60h] [rbp-A0h] BYREF
  int v44[18]; // [rsp+A0h] [rbp-60h] BYREF
  __int128 v45[598]; // [rsp+E8h] [rbp-18h] BYREF
  char v46[112]; // [rsp+2650h] [rbp+2550h] BYREF
  char v47[112]; // [rsp+26C0h] [rbp+25C0h] BYREF

  v4 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x8000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    v5 = Dbg_NodeName(a1);
    WPP_SF_qs(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x24u,
      (__int64)&WPP_eab7c483710f366eae903c691df4ee49_Traceguids,
      a2,
      v5);
    v4 = WPP_GLOBAL_Control;
  }
  memset_0(v44, 0, 0x30ui64);
  if ( a1 )
  {
    *(_BYTE *)(a1 + 98) = CurrentTimeoutBin;
    v4 = WPP_GLOBAL_Control;
  }
  v6 = *(_QWORD *)(a2 + 1280);
  if ( a1 == *(_QWORD *)(v6 + 32) )
  {
    if ( (qword_1401B9780 & 0x400000) != 0 )
    {
      v7 = 0i64;
      if ( (unsigned int)Log_EnterLock() )
      {
        g_pszCurrentLogLevelString = (__int64)"REMOTE";
        v7 = Log_FormatNodeName((__int64 *)a1);
        Log_Printf("Refusing to build NS list for previously responding zone %s (query %p)\n", v7, (const void *)a2);
        g_pszCurrentLogLevelString = 0i64;
        Log_LeaveLock();
      }
      Mem_Free(v7, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\remote.c", 2210);
      v4 = WPP_GLOBAL_Control;
    }
    if ( v4 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)v4 + 17) & 0x8000) != 0
      && *((_BYTE *)v4 + 65) >= 4u )
    {
      v8 = Dbg_NodeName(a1);
      WPP_SF_sq(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x25u,
        (__int64)&WPP_eab7c483710f366eae903c691df4ee49_Traceguids,
        v8);
      v4 = WPP_GLOBAL_Control;
    }
    v9 = -1072573691;
    goto LABEL_88;
  }
  if ( (qword_1401B9780 & 0x400000) != 0 )
  {
    v10 = 0i64;
    if ( (unsigned int)Log_EnterLock() )
    {
      g_pszCurrentLogLevelString = (__int64)"REMOTE";
      v10 = Log_FormatNodeName((__int64 *)a1);
      Log_Printf("Building NS list for node %s (query %p)\n", v10, (const void *)a2);
      g_pszCurrentLogLevelString = 0i64;
      Log_LeaveLock();
    }
    Mem_Free(v10, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\remote.c", 2230);
    v4 = WPP_GLOBAL_Control;
  }
  if ( a1 != *(_QWORD *)(v6 + 24) )
  {
    v11 = Remote_BuildNsListForNode(a1, v44, *(_DWORD *)(a2 + 568), *(_QWORD *)(a2 + 6280));
    v9 = v11;
    if ( v11 && v11 != -1072573690 )
      goto LABEL_87;
    v12 = *(_DWORD *)(v6 + 4);
    for ( i = 96i64 * (v12 - 1) + v6 + 48; v12; --v12 )
    {
      if ( *(_WORD *)(i + 24) != 2
        || *(_DWORD *)(i + 28) != -1 && (*(_WORD *)(i + 24) != 2 || *(_DWORD *)(i + 28) != 0x7FFFFFFF) )
      {
        break;
      }
      i -= 96i64;
    }
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x8000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
    {
      WPP_SF_D(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x27u,
        (__int64)&WPP_eab7c483710f366eae903c691df4ee49_Traceguids,
        v12);
    }
    *(_DWORD *)(v6 + 12) = v12;
    *(_QWORD *)(v6 + 24) = a1;
    v39 = v12;
    v14 = v12 + 1;
    *(_DWORD *)(v6 + 4) = v14;
    *(_QWORD *)(i + 96) = a1;
    *(_DWORD *)(i + 104) = 0;
    *(_QWORD *)(i + 112) = 0i64;
    *(_BYTE *)(i + 184) = 0;
    DnsAddr_BuildFromIp4((struct in_addr *)(i + 120), (struct in_addr)0x7FFFFFFF, 0);
    ++g_RandomSeed;
    v15 = i + 192;
    v38 = RtlRandom(&g_RandomSeed);
    v16 = (v38 <= 0x68DB8) + 1;
    v40 = v16;
    if ( v14 >= 100 )
      goto LABEL_86;
    v4 = WPP_GLOBAL_Control;
    while ( 2 )
    {
      v17 = 0i64;
      v35 = -1;
      v18 = 0;
      v19 = 0;
      v37 = 0i64;
      v20 = v44[0];
      if ( !v44[0] )
      {
LABEL_86:
        *(_DWORD *)v6 = v14;
LABEL_87:
        v4 = WPP_GLOBAL_Control;
        goto LABEL_88;
      }
      v21 = 0;
      v42 = v47;
      v41 = v46;
      v22 = v45;
      do
      {
        --v20;
        if ( *(_WORD *)v22 != 2 || (v23 = -30584, *((_DWORD *)v22 + 1) != -1) )
          v23 = *((_DWORD *)v22 - 4);
        if ( v23 < v35 )
        {
          v17 = (int *)v22 - 6;
          v35 = v23;
          v37 = (int *)v22 - 6;
        }
        if ( v16 && (*(_WORD *)v22 != 2 || *((_DWORD *)v22 + 1) != -1 && *((_DWORD *)v22 + 1) != 0x7FFFFFFF) )
        {
          if ( *((_DWORD *)v22 - 4) <= 0x64u )
          {
            if ( (unsigned __int64)v19 >= 0x64 )
            {
LABEL_85:
              v9 = 13;
              goto LABEL_88;
            }
            ++v19;
            *v42++ = v21;
          }
          else
          {
            if ( (unsigned __int64)v18 >= 0x64 )
              goto LABEL_85;
            ++v18;
            *v41++ = v21;
          }
        }
        ++v21;
        v22 += 6;
      }
      while ( v20 );
      if ( !v16 )
      {
LABEL_70:
        v25 = *(_OWORD *)(v17 + 6);
        v36 = 0;
        v26 = 1;
        v27 = *(_OWORD *)(v17 + 10);
        v28 = *(_OWORD *)(v17 + 14);
        v29 = *(_OWORD *)(v17 + 18);
        Buf1[0] = v25;
        Buf1[1] = v27;
        Buf1[2] = v28;
        Buf1[3] = v29;
        if ( v39 <= 1 )
        {
LABEL_74:
          *(_QWORD *)v15 = *(_QWORD *)v17;
          v30 = *(_OWORD *)(v17 + 2);
          *(_OWORD *)(v15 + 24) = v25;
          *(_BYTE *)(v15 + 88) = v36;
          *(_OWORD *)(v15 + 40) = v27;
          *(_BYTE *)(v15 + 89) = 0;
          *(_OWORD *)(v15 + 56) = v28;
          *(_OWORD *)(v15 + 8) = v30;
          *(_OWORD *)(v15 + 72) = v29;
          v4 = WPP_GLOBAL_Control;
          v15 += 96i64;
          ++v14;
        }
        else
        {
          while ( !(unsigned int)DnsAddr_IsEqual(Buf1, (_WORD *)(96i64 * v26 + v6 + 72), 3) )
          {
            if ( ++v26 >= v39 )
              goto LABEL_73;
          }
          v31 = 96i64 * v26;
          v36 = *(_BYTE *)(v31 + v6 + 136);
          if ( !v36 || *(unsigned __int8 *)(v31 + v6 + 136) < 2u && !*(_BYTE *)(v31 + v6 + 137) )
          {
LABEL_73:
            v17 = v37;
            goto LABEL_74;
          }
          if ( v4 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)v4 + 17) & 0x8000) != 0
            && *((_BYTE *)v4 + 65) >= 4u )
          {
            v32 = DnsAddr_Ntoa((struct in_addr *)Buf1);
            WPP_SF_sq(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x28u,
              (__int64)&WPP_eab7c483710f366eae903c691df4ee49_Traceguids,
              v32);
            v4 = WPP_GLOBAL_Control;
          }
          v17 = v37;
        }
        v33 = 96i64 * (unsigned int)--v44[0];
        *(_QWORD *)v17 = *(_QWORD *)&v44[v33 / 4 + 12];
        *(_OWORD *)(v17 + 2) = *(_OWORD *)&v44[v33 / 4 + 14];
        *(_OWORD *)(v17 + 6) = v45[v33 / 0x10];
        *(_OWORD *)(v17 + 10) = v45[v33 / 0x10 + 1];
        *(_OWORD *)(v17 + 14) = v45[v33 / 0x10 + 2];
        *(_OWORD *)(v17 + 18) = v45[v33 / 0x10 + 3];
        if ( v14 < 100 )
        {
          v16 = v40;
          continue;
        }
        goto LABEL_86;
      }
      break;
    }
    if ( !v18 )
    {
      if ( !v19 )
        goto LABEL_70;
      if ( v16 == 2 )
        goto LABEL_68;
    }
    if ( !v19 )
    {
      if ( v16 == 2 )
      {
LABEL_66:
        if ( v18 )
        {
          v24 = (unsigned __int8)v46[v38 % v18];
LABEL_69:
          v17 = &v44[24 * v24 + 12];
          v40 = 0;
          v37 = v17;
          goto LABEL_70;
        }
LABEL_68:
        v24 = (unsigned __int8)v47[v38 % v19];
        goto LABEL_69;
      }
      v16 = 2;
    }
    if ( v16 != 2 )
      goto LABEL_68;
    goto LABEL_66;
  }
  if ( v4 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)v4 + 17) & 0x8000) != 0
    && *((_BYTE *)v4 + 65) >= 4u )
  {
    WPP_SF_qq(*((_QWORD *)v4 + 7), 0x26u, (__int64)&WPP_eab7c483710f366eae903c691df4ee49_Traceguids, a1, a2);
    v4 = WPP_GLOBAL_Control;
  }
  v9 = 0;
LABEL_88:
  if ( v4 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)v4 + 17) & 0x8000) != 0
    && *((_BYTE *)v4 + 65) >= 4u )
  {
    WPP_SF_Ddq(*((_QWORD *)v4 + 7), 0x29u, (__int64)&WPP_eab7c483710f366eae903c691df4ee49_Traceguids, v9);
  }
  return v9;
}
// 1401B8F28: using guessed type __int64 g_pszCurrentLogLevelString;
// 1401B9780: using guessed type __int64 qword_1401B9780;
// 1401BA4B8: using guessed type char CurrentTimeoutBin;
// 14007B2FC: using guessed type char var_F0[112];
// 14007B2FC: using guessed type char var_160[112];
