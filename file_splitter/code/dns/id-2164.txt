//----- (0000000140112120) ----------------------------------------------------
__int64 __fastcall Delete_Element_ScopeMap(
        __int64 a1,
        __int64 a2,
        int a3,
        unsigned int a4,
        _QWORD *a5,
        const unsigned __int16 *a6,
        int a7)
{
  unsigned int v7; // ebx
  char v8; // si
  int v12; // edi
  unsigned int v14; // [rsp+58h] [rbp+20h] BYREF

  v14 = a4;
  v7 = 0;
  v8 = 0;
  if ( a3 && (v14 = -1, (unsigned int)acquireWrite(a2, 0x2710u, &v14) == -1) )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x10) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      WPP_SF_S(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x12u,
        (__int64)&WPP_5dd087cb468e333d3a5b59f2603de819_Traceguids,
        a6);
    }
    v7 = a7 != 0 ? 9962 : 9607;
  }
  else
  {
    v12 = a7;
    v8 = 1;
    if ( std::_Tree<std::_Tmap_traits<unsigned short *,_DnsServerScopeInfo_ *,bool (*)(unsigned short *,unsigned short *),std::allocator<std::pair<unsigned short * const,_DnsServerScopeInfo_ *>>,0>>::erase(
           a1,
           &a6) )
    {
      --*a5;
    }
    else
    {
      v7 = v12 != 0 ? 9959 : 9952;
    }
  }
  if ( a3 && v8 )
    Lock_ReleaseWrite(a2);
  return v7;
}
