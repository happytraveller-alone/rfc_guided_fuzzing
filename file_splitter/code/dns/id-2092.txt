//----- (0000000140107610) ----------------------------------------------------
__int64 __fastcall DnsOls_GenerateSigningFiles(__int64 a1)
{
  __int64 v1; // rbx
  unsigned int LastError; // edi
  _QWORD *v4; // r15
  HANDLE v5; // r14
  CDnsClientSubnetRecordsTrie *v6; // rcx
  const char *v7; // r9
  __int64 v8; // r13
  unsigned __int16 *v9; // rax
  CDnsClientSubnetRecordsTrie *v10; // rcx
  unsigned __int16 v11; // dx
  CDnsClientSubnetRecordsTrie *v13; // rcx
  unsigned __int16 v14; // dx
  __int64 v15; // r12
  __int64 v16; // rdi
  char v17; // r15
  __int64 *v18; // r9
  CDnsClientSubnetRecordsTrie *v19; // rcx
  unsigned __int16 v20; // dx
  unsigned __int16 *v21; // rax
  CDnsClientSubnetRecordsTrie *v22; // rcx
  u_long v23; // eax
  DnsSign *v24; // rdi
  struct _Dbase_Record *v25; // rdx
  __int64 v26; // r13
  struct _DnsOlsDsValueArray near **v27; // rcx
  __int64 v28; // r15
  struct _Dbase_Record *DsFromDnskey; // rax
  __int64 v30; // r12
  __int64 *v31; // r9
  _QWORD *v32; // [rsp+48h] [rbp-C0h]
  char v33; // [rsp+50h] [rbp-B8h]
  u_long v34; // [rsp+58h] [rbp-B0h]
  HANDLE v35; // [rsp+60h] [rbp-A8h] BYREF
  __int64 v36; // [rsp+68h] [rbp-A0h]
  _QWORD *v37; // [rsp+70h] [rbp-98h]
  _QWORD *v38; // [rsp+78h] [rbp-90h]
  _QWORD *v39; // [rsp+80h] [rbp-88h]
  __int64 v40; // [rsp+88h] [rbp-80h]
  __int64 *v41; // [rsp+90h] [rbp-78h]
  HANDLE v42; // [rsp+98h] [rbp-70h]
  void *Src[3]; // [rsp+A0h] [rbp-68h] BYREF
  unsigned __int64 v44; // [rsp+B8h] [rbp-50h]
  WCHAR FileName[264]; // [rsp+C8h] [rbp-40h] BYREF

  v1 = 0i64;
  v44 = 7i64;
  Src[2] = 0i64;
  LOWORD(Src[0]) = 0;
  LastError = 0;
  memset_0(&v35, 0, 0x30ui64);
  v4 = 0i64;
  v5 = 0i64;
  v6 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    if ( a1 )
      v7 = *(const char **)(a1 + 16);
    else
      v7 = 0i64;
    WPP_SF_s(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x40u, (__int64)&WPP_41961b29e2683d0b96cfd252d798ca95_Traceguids, v7);
    v6 = WPP_GLOBAL_Control;
  }
  if ( !a1 )
  {
    LastError = 87;
    goto LABEL_28;
  }
  if ( *(_QWORD *)(a1 + 192) )
    goto LABEL_28;
  if ( *(_DWORD *)(a1 + 372) != 1 )
  {
    LastError = 9611;
    goto LABEL_28;
  }
  if ( (*(_BYTE *)(a1 + 1040) & 2) == 0 )
  {
    LastError = 9101;
    goto LABEL_28;
  }
  v8 = *(_QWORD *)(a1 + 40);
  v41 = (__int64 *)v8;
  if ( v8 && *(_QWORD *)(v8 + 64) )
  {
    v32 = Mem_Alloc(0x80000u, 22i64, "ds\\dns\\server\\server\\olssigner.cpp", 2973);
    if ( !v32 )
    {
      LastError = 14;
      v4 = 0i64;
      goto LABEL_28;
    }
    std::wstring::assign((char *)Src, (char *)L"keyset-", 7ui64);
    std::wstring::append((char *)Src, *(char **)(a1 + 24));
    v9 = (unsigned __int16 *)Src;
    if ( v44 >= 8 )
      v9 = (unsigned __int16 *)Src[0];
    if ( !(unsigned int)File_CreateDatabaseFilePathEx(0i64, 0i64, (char *)FileName, 261i64, 0i64, 0i64, v9) )
    {
      LastError = 87;
      v10 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
      {
        goto LABEL_27;
      }
      v11 = 66;
      goto LABEL_26;
    }
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_S(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x43u,
        (__int64)&WPP_41961b29e2683d0b96cfd252d798ca95_Traceguids,
        FileName);
    }
    v5 = OpenWriteFileEx2W(0i64, FileName, 0);
    if ( !v5 )
    {
      LastError = GetLastError();
      v13 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
      {
        goto LABEL_27;
      }
      v14 = 68;
      goto LABEL_46;
    }
    v15 = (__int64)(v32 + 0x10000);
    v37 = v32;
    v39 = v32;
    v16 = *(_QWORD *)(v8 + 64);
    v17 = 0;
    LODWORD(v36) = 0x80000;
    v40 = 0x80000i64;
    v38 = v32 + 0x10000;
    v35 = v5;
    if ( v16 )
    {
      do
      {
        if ( *(_WORD *)(v16 + 12) == 48 && (ntohs(*(_WORD *)(v16 + 56)) & 0x101) == 257 )
        {
          v18 = (__int64 *)v8;
          if ( v17 )
            v18 = 0i64;
          if ( !(unsigned int)RR_WriteToFile(&v35, a1, v16, v18, 1)
            && WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
          {
            WPP_SF_qs(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x45u,
              (__int64)&WPP_41961b29e2683d0b96cfd252d798ca95_Traceguids,
              v16,
              *(_QWORD *)(a1 + 16));
          }
          v17 = 1;
        }
        v16 = *(_QWORD *)v16;
      }
      while ( v16 );
      v15 = (__int64)(v32 + 0x10000);
    }
    LastError = WriteBufferToFile((__int64)&v35);
    if ( LastError )
    {
      v19 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
      {
        goto LABEL_66;
      }
      v20 = 70;
    }
    else
    {
      CloseHandle(v5);
      std::wstring::assign((char *)Src, (char *)L"dsset-", 6ui64);
      std::wstring::append((char *)Src, *(char **)(a1 + 24));
      v21 = (unsigned __int16 *)Src;
      if ( v44 >= 8 )
        v21 = (unsigned __int16 *)Src[0];
      if ( !(unsigned int)File_CreateDatabaseFilePathEx(0i64, 0i64, (char *)FileName, 261i64, 0i64, 0i64, v21) )
      {
        LastError = 87;
        v10 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) == 0
          || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
        {
          goto LABEL_27;
        }
        v11 = 71;
LABEL_26:
        WPP_SF_s(
          *((_QWORD *)v10 + 7),
          v11,
          (__int64)&WPP_41961b29e2683d0b96cfd252d798ca95_Traceguids,
          *(const char **)(a1 + 16));
LABEL_27:
        v4 = v32;
        goto LABEL_28;
      }
      v22 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_S(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x48u,
          (__int64)&WPP_41961b29e2683d0b96cfd252d798ca95_Traceguids,
          FileName);
        v22 = WPP_GLOBAL_Control;
      }
      if ( (*(_DWORD *)(a1 + 1040) & 0xE00) == 0 )
      {
        if ( v22 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)v22 + 17) & 0x200000) != 0
          && *((_BYTE *)v22 + 65) >= 4u )
        {
          WPP_SF_sS(
            *((_QWORD *)v22 + 7),
            0x49u,
            (__int64)&WPP_41961b29e2683d0b96cfd252d798ca95_Traceguids,
            *(const char **)(a1 + 16),
            (__int64)FileName);
        }
        DeleteFileW(FileName);
        goto LABEL_27;
      }
      v42 = OpenWriteFileEx2W(0i64, FileName, 0);
      v5 = v42;
      if ( !v42 )
      {
        LastError = GetLastError();
        v13 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) == 0
          || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
        {
          goto LABEL_27;
        }
        v14 = 74;
LABEL_46:
        WPP_SF_DS(
          *((_QWORD *)v13 + 7),
          v14,
          (__int64)&WPP_41961b29e2683d0b96cfd252d798ca95_Traceguids,
          LastError,
          (__int64)FileName);
        goto LABEL_27;
      }
      LODWORD(v36) = 0x80000;
      v40 = 0x80000i64;
      v23 = *(_DWORD *)(a1 + 1060);
      v37 = v32;
      v39 = v32;
      v38 = (_QWORD *)v15;
      v35 = v42;
      v34 = v23;
      if ( !v23 )
        v34 = ntohl(*(_DWORD *)(a1 + 528));
      v24 = *(DnsSign **)(v8 + 64);
      v33 = 0;
      if ( v24 )
      {
        do
        {
          if ( *((_WORD *)v24 + 6) == 48 && (ntohs(*((_WORD *)v24 + 28)) & 0x101) == 257 )
          {
            v26 = 0i64;
            if ( (_DWORD)g_DnsOlsDsValueArray )
            {
              v27 = &g_DnsOlsDsValueArray;
              v28 = 0i64;
              do
              {
                if ( (*(_BYTE *)v27 & (unsigned __int8)(*(_DWORD *)(a1 + 1040) >> 9) & 7) != 0 )
                {
                  LOBYTE(v25) = *((_BYTE *)&g_DnsOlsDsValueArray + v28 + 4);
                  DsFromDnskey = DnsSign::GenerateDsFromDnskey(
                                   v24,
                                   v25,
                                   *(unsigned __int8 **)(a1 + 32),
                                   (const struct _CountName *)v34);
                  v30 = (__int64)DsFromDnskey;
                  if ( DsFromDnskey )
                  {
                    v31 = v41;
                    if ( v33 )
                      v31 = 0i64;
                    if ( !(unsigned int)RR_WriteToFile(&v35, a1, (__int64)DsFromDnskey, v31, 1)
                      && WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
                      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
                    {
                      WPP_SF_qs(
                        *((_QWORD *)WPP_GLOBAL_Control + 7),
                        0x4Cu,
                        (__int64)&WPP_41961b29e2683d0b96cfd252d798ca95_Traceguids,
                        v24,
                        *(_QWORD *)(a1 + 16));
                    }
                    v33 = 1;
                    RR_Free(v30);
                  }
                  else if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                         && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
                         && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
                  {
                    WPP_SF_Dqs(
                      *((_QWORD *)WPP_GLOBAL_Control + 7),
                      0x4Bu,
                      (__int64)&WPP_41961b29e2683d0b96cfd252d798ca95_Traceguids,
                      *((unsigned __int8 *)&g_DnsOlsDsValueArray + v28 + 4),
                      (char)v24,
                      *(_QWORD *)(a1 + 16));
                  }
                }
                ++v26;
                v28 = 8 * v26;
                v27 = &g_DnsOlsDsValueArray + v26;
              }
              while ( *(_DWORD *)v27 );
            }
          }
          v24 = *(DnsSign **)v24;
        }
        while ( v24 );
        v5 = v42;
      }
      LastError = WriteBufferToFile((__int64)&v35);
      if ( !LastError )
      {
        CloseHandle(v5);
        goto LABEL_27;
      }
      v19 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
      {
        goto LABEL_66;
      }
      v20 = 77;
    }
    WPP_SF_S(*((_QWORD *)v19 + 7), v20, (__int64)&WPP_41961b29e2683d0b96cfd252d798ca95_Traceguids, FileName);
LABEL_66:
    v4 = v32;
    goto LABEL_67;
  }
  LastError = 13;
  if ( v6 == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    || (*((_DWORD *)v6 + 17) & 0x200000) == 0
    || *((_BYTE *)v6 + 65) < 2u )
  {
    goto LABEL_28;
  }
  WPP_SF_qs(
    *((_QWORD *)v6 + 7),
    0x41u,
    (__int64)&WPP_41961b29e2683d0b96cfd252d798ca95_Traceguids,
    v8,
    *(_QWORD *)(a1 + 16));
LABEL_67:
  if ( v5 )
    CloseHandle(v5);
LABEL_28:
  RR_Free(0i64);
  Mem_Free(v4, 0x80000i64, 22i64, (__int64)"ds\\dns\\server\\server\\olssigner.cpp", 3252);
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    if ( a1 )
      v1 = *(_QWORD *)(a1 + 16);
    WPP_SF_Ds(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x4Eu,
      (__int64)&WPP_41961b29e2683d0b96cfd252d798ca95_Traceguids,
      LastError,
      v1);
  }
  if ( v44 >= 8 )
    operator delete(Src[0]);
  return LastError;
}
// 140107CD2: variable 'v25' is possibly undefined
// 140184CA8: using guessed type void __stdcall operator delete(void *);
// 140193358: using guessed type wchar_t aKeyset[8];
// 140193368: using guessed type wchar_t aDsset[7];
// 1401B80D0: using guessed type struct _DnsOlsDsValueArray near *g_DnsOlsDsValueArray;
