//----- (0000000140132A80) ----------------------------------------------------
__int64 *__fastcall CDnsPolicy_QTypeCriteriaTree::GetCriteriaNodes(__int64 a1, __int16 a2)
{
  __int64 *v3; // rax
  __int64 *v4; // rbx
  _QWORD *v5; // rax
  __int64 v6; // rdi
  _QWORD *v7; // rax
  __int64 v8; // rdx
  char pExceptionObject[32]; // [rsp+28h] [rbp-20h] BYREF
  __int16 v11; // [rsp+58h] [rbp+10h] BYREF
  __int64 *v12; // [rsp+60h] [rbp+18h] BYREF

  v11 = a2;
  v3 = (__int64 *)operator new(0x18ui64);
  v4 = v3;
  v12 = v3;
  if ( v3 )
  {
    v3[1] = 0i64;
    v5 = operator new(0x18ui64);
    if ( !v5 )
    {
      std::bad_alloc::bad_alloc((std::bad_alloc *)pExceptionObject, 0i64);
      CxxThrowException_0(pExceptionObject, (_ThrowInfo *)&TI2_AVbad_alloc_std__);
    }
    *v4 = (__int64)v5;
    *v5 = v5;
    *(_QWORD *)(*v4 + 8) = *v4;
  }
  else
  {
    v4 = 0i64;
  }
  std::_Tree<std::_Tmap_traits<unsigned long,CDnsPolicy_CriteriaNode *,bool (*)(unsigned long const &,unsigned long const &),std::allocator<std::pair<unsigned long const,CDnsPolicy_CriteriaNode *>>,0>>::find(
    *(_QWORD *)(a1 + 8),
    &v12,
    (__int64)&v11);
  if ( v12 != *(__int64 **)(*(_QWORD *)(a1 + 8) + 8i64) )
  {
    v12 = (__int64 *)v12[4];
    v6 = *v4;
    v7 = std::_List_val<CDNSPolicyCriteria *>::_Buynode((__int64)v12, *v4, *(_QWORD *)(*v4 + 8), &v12);
    v8 = v4[1];
    if ( v8 == 0x1FFFFFFFFFFFFFFEi64 )
      std::_Xlength_error("list<T> too long");
    v4[1] = v8 + 1;
    *(_QWORD *)(v6 + 8) = v7;
    *(_QWORD *)v7[1] = v7;
  }
  return v4;
}
