//----- (0000000140038C14) ----------------------------------------------------
__int64 __fastcall Ds_WriteNodeToDs(__int64 a1, __int64 a2, unsigned __int16 a3, int a4, __int64 a5, int a6)
{
  CDnsClientSubnetRecordsTrie *v9; // rcx
  char *v10; // rax
  int v12; // eax
  unsigned int v13; // r8d
  BOOL IsMatchingList; // ebx
  char *v15; // rax
  unsigned int inited; // edi
  int v17; // ebx
  CDnsClientSubnetRecordsTrie *v18; // rcx
  unsigned __int16 v19; // dx
  __int64 v20; // rdx
  int *ExtendedLdapErrString; // rbx
  __int16 *v22; // rax
  __int64 *v23; // r9
  __int128 *v24; // rcx
  char *v25; // rax
  __int16 v26; // [rsp+40h] [rbp-C0h] BYREF
  char v27; // [rsp+42h] [rbp-BEh]
  __int16 v28; // [rsp+44h] [rbp-BCh] BYREF
  char v29; // [rsp+46h] [rbp-BAh]
  unsigned __int16 v30; // [rsp+48h] [rbp-B8h]
  _QWORD *v31; // [rsp+50h] [rbp-B0h] BYREF
  __int128 v32; // [rsp+60h] [rbp-A0h] BYREF
  __int128 v33; // [rsp+70h] [rbp-90h] BYREF
  __int64 v34[3]; // [rsp+80h] [rbp-80h] BYREF
  __int64 v35[3]; // [rsp+98h] [rbp-68h] BYREF
  wchar_t Buffer[1288]; // [rsp+B0h] [rbp-50h] BYREF
  _DWORD v37[2048]; // [rsp+AC0h] [rbp+9C0h] BYREF

  v30 = a3;
  memset_0(v37, 0, sizeof(v37));
  v31 = 0i64;
  v9 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    v10 = Dbg_NodeName(a2);
    WPP_SF_ss(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x34u,
      (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
      v10,
      *(_QWORD *)(a5 + 16));
    v9 = WPP_GLOBAL_Control;
  }
  if ( !*(_QWORD *)(a5 + 840) )
    return 9604i64;
  if ( a6 )
  {
    _InterlockedAdd(&dword_1401C7CD4, 1u);
    v12 = *(_DWORD *)(a2 + 72);
    switch ( v12 )
    {
      case 255:
        _InterlockedAdd(&dword_1401C7CDC, 1u);
        break;
      case 34:
        _InterlockedAdd(&dword_1401C7CE0, 1u);
        break;
      case 130:
        _InterlockedAdd(&dword_1401C7CE8, 1u);
        break;
      case 66:
        _InterlockedAdd(&dword_1401C7CE4, 1u);
        break;
    }
    if ( (a6 & 1) != 0 )
    {
      _InterlockedAdd(&dword_1401C7CEC, 1u);
      if ( (a6 & 0x40) != 0 )
        _InterlockedAdd(&dword_1401C7CF0, 1u);
    }
    else if ( (a6 & 0x202) != 0 )
    {
      _InterlockedAdd(&dword_1401C7CF4, 1u);
    }
    else if ( (a6 & 0x10) != 0 )
    {
      _InterlockedAdd(&dword_1401C7CF8, 1u);
    }
    else if ( (a6 & 0x20) != 0 )
    {
      _InterlockedAdd(&dword_1401C7CFC, 1u);
    }
    v9 = WPP_GLOBAL_Control;
  }
  if ( a4 == 1 )
  {
    if ( v9 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)v9 + 17) & 0x400) != 0
      && *((_BYTE *)v9 + 65) >= 4u )
    {
      WPP_SF_s(
        *((_QWORD *)v9 + 7),
        0x35u,
        (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
        (const char *)(a2 + 102));
    }
    if ( !(unsigned int)Ds_ReadNodeRecords((__int64 *)a5, a2, &v31, 0i64) )
    {
      v13 = 3;
      if ( *(_DWORD *)(a5 + 372) == 1 && (*(_BYTE *)(a5 + 1040) & 4) != 0 )
        v13 = 11;
      IsMatchingList = RR_ListIsMatchingList(a2, (__int64)v31, v13);
      RR_ListFree(v31);
      if ( IsMatchingList )
      {
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          v15 = Dbg_NodeName(a2);
          WPP_SF_ss(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x36u,
            (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
            v15,
            *(_QWORD *)(a5 + 16));
        }
        _InterlockedAdd(&dword_1401C7D18, 1u);
        return 0i64;
      }
    }
  }
  inited = buildDsNodeNameFromNode(Buffer, (__int64 *)a5, a2);
  if ( !inited )
  {
    v17 = a6 ? *(_DWORD *)(a5 + 524) : *(_DWORD *)(a5 + 512);
    inited = Ds_InitModBuffer(v37, 0x2000u, 1, 0, v17);
    if ( !inited )
    {
      if ( !*(_QWORD *)(a2 + 64) || (*(_BYTE *)(a2 + 92) & 1) != 0 )
        goto LABEL_69;
      inited = buildDsRecordSet((__int64)v37, a5, a2, v30);
      if ( inited )
      {
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x37u, (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids);
        }
        goto LABEL_92;
      }
      if ( v37[1] )
      {
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          WPP_SF_s(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x3Cu,
            (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
            (const char *)(a2 + 102));
        }
        inited = writeRecordsToDsNode(a1, Buffer, (__int64)v37, a4, a5);
        if ( !inited )
          goto LABEL_92;
        if ( a1 )
        {
          v18 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) == 0
            || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
          {
            goto LABEL_92;
          }
          v19 = 61;
          goto LABEL_64;
        }
        v26 = 771;
        v34[0] = a2 + 102;
        v34[1] = *(_QWORD *)(a5 + 16);
        v27 = 1;
        ExtendedLdapErrString = Ds_GetExtendedLdapErrString(0i64);
        v34[2] = (__int64)ExtendedLdapErrString;
        v22 = &v26;
        v32 = DNS_EVENT_DS_WRITE_FAILED;
        v23 = v34;
        v24 = &v32;
      }
      else
      {
LABEL_69:
        if ( !*(_DWORD *)(a5 + 372) && g_ulDownlevelDCsInDomain && a2 == *(_QWORD *)(a5 + 48) )
        {
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            WPP_SF_D(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x38u,
              (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
              a4);
          }
          goto LABEL_92;
        }
        if ( a4 == 1 )
        {
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            WPP_SF_s(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x39u,
              (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
              (const char *)(a2 + 102));
          }
          goto LABEL_92;
        }
        if ( a6 )
          _InterlockedIncrement(&dword_1401C7CD8);
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          WPP_SF_s(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x3Au,
            (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
            (const char *)(a2 + 102));
        }
        inited = deleteNodeFromDs(a1, a5, Buffer, v17);
        if ( !inited )
          goto LABEL_92;
        if ( a1 )
        {
          v18 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) == 0
            || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
          {
            goto LABEL_92;
          }
          v19 = 59;
LABEL_64:
          WPP_SF_SD(*((_QWORD *)v18 + 7), v19, (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids, Buffer);
          goto LABEL_92;
        }
        v28 = 771;
        v35[0] = a2 + 102;
        v35[1] = *(_QWORD *)(a5 + 16);
        v29 = 1;
        ExtendedLdapErrString = Ds_GetExtendedLdapErrString(0i64);
        v35[2] = (__int64)ExtendedLdapErrString;
        v22 = &v28;
        v33 = DNS_EVENT_DS_WRITE_FAILED;
        v23 = v35;
        v24 = &v33;
      }
      Eventlog_LogEvent((__int64)v24, v20, 3u, (unsigned __int16 **)v23, (unsigned __int8 *)v22, inited, 0, 0i64);
      Ds_FreeExtendedLdapErrString(ExtendedLdapErrString);
    }
  }
LABEL_92:
  Ds_CleanupModBuffer((__int64)v37);
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    v25 = Dbg_NodeName(a2);
    WPP_SF_Dss(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x3Eu,
      (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
      inited,
      (__int64)v25,
      *(_QWORD *)(a5 + 16));
  }
  return inited;
}
// 140039065: variable 'v20' is possibly undefined
// 140186958: using guessed type __int128 DNS_EVENT_DS_WRITE_FAILED;
// 1401B7F04: using guessed type int g_ulDownlevelDCsInDomain;
// 1401C7CD4: using guessed type int dword_1401C7CD4;
// 1401C7CD8: using guessed type int dword_1401C7CD8;
// 1401C7CDC: using guessed type int dword_1401C7CDC;
// 1401C7CE0: using guessed type int dword_1401C7CE0;
// 1401C7CE4: using guessed type int dword_1401C7CE4;
// 1401C7CE8: using guessed type int dword_1401C7CE8;
// 1401C7CEC: using guessed type int dword_1401C7CEC;
// 1401C7CF0: using guessed type int dword_1401C7CF0;
// 1401C7CF4: using guessed type int dword_1401C7CF4;
// 1401C7CF8: using guessed type int dword_1401C7CF8;
// 1401C7CFC: using guessed type int dword_1401C7CFC;
// 1401C7D18: using guessed type int dword_1401C7D18;
