//----- (0000000140093204) ----------------------------------------------------
__int64 __fastcall Wire_WriteAddressRecords(__int64 a1, __int64 a2, __int16 a3)
{
  unsigned int v6; // r12d
  unsigned __int16 v7; // di
  unsigned __int16 v8; // r15
  char v9; // bp
  char *v10; // rax
  __int64 v11; // r14
  __int64 v13; // rsi
  unsigned __int64 v14; // r10
  __int64 v15; // rax
  unsigned __int16 v16; // cx
  __int64 v17; // rax
  __int64 v18; // rdx
  __int64 v19; // rcx
  unsigned __int16 v20; // dx
  unsigned __int64 v21; // r9
  __int64 v22; // rcx
  CDnsClientSubnetRecordsTrie *v23; // r10
  __int64 v24; // rsi
  __int64 v25; // rdi
  const char *v26; // r12
  char v27; // dl
  unsigned int v28; // r8d
  unsigned int v29; // eax
  __int64 v30; // rdx
  const char *v31; // r9
  char v32; // al
  struct in_addr v33; // r8d
  int v34; // edx
  __int64 v35; // rax
  __int64 v36; // rax
  char *v37; // rax
  unsigned int v38; // [rsp+30h] [rbp-1028h]
  u_short v39; // [rsp+34h] [rbp-1024h]
  int v40; // [rsp+38h] [rbp-1020h]
  unsigned int v41; // [rsp+3Ch] [rbp-101Ch] BYREF
  unsigned int v42; // [rsp+40h] [rbp-1018h] BYREF
  __int64 v43; // [rsp+48h] [rbp-1010h]
  unsigned int v44; // [rsp+50h] [rbp-1008h] BYREF
  __int64 v45; // [rsp+58h] [rbp-1000h]
  unsigned __int64 v46; // [rsp+60h] [rbp-FF8h]
  __int64 *v47; // [rsp+68h] [rbp-FF0h]
  int v48[1000]; // [rsp+70h] [rbp-FE8h] BYREF

  v43 = 0i64;
  v41 = -1;
  v6 = 0;
  v38 = 0;
  v7 = 0;
  v8 = 0;
  v40 = 0;
  v42 = 0;
  v9 = 0;
  v45 = 0i64;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
  {
    v10 = Dbg_NodeName(a2);
    WPP_SF_s(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x25u, (__int64)&WPP_a868f83000033e876174d5733703ce9b_Traceguids, v10);
  }
  v11 = *(_QWORD *)(a1 + 32);
  v39 = htons(a3 | 0xC000);
  *(_BYTE *)(a1 + 1455) = dword_1401B970C;
  v44 = -1;
  acquireRead(DbaseLock, 0xFFFFFFFF, &v44);
  if ( (*(_BYTE *)(a2 + 92) & 1) != 0 )
  {
    v42 = -1;
    releaseRead(DbaseLock, &v42, 1);
    return 0i64;
  }
  if ( (*(_BYTE *)(a1 + 592) & 2) == 0 )
  {
    v23 = WPP_GLOBAL_Control;
LABEL_22:
    v24 = *(_QWORD *)(a2 + 64);
    v46 = *(_QWORD *)(a1 + 24);
    v47 = (__int64 *)(a2 + 64);
    if ( v24 )
    {
      v25 = v43;
      v26 = "validated";
      while ( 1 )
      {
        if ( *(_WORD *)(v24 + 12) == 1 )
        {
          if ( (*(_BYTE *)(v24 + 28) & 4) != 0 )
          {
            if ( v23 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              && (*((_DWORD *)v23 + 17) & 0x800) != 0
              && *((_BYTE *)v23 + 65) >= 4u )
            {
              WPP_SF_Dq(*((_QWORD *)v23 + 7), 0x27u, (__int64)&WPP_a868f83000033e876174d5733703ce9b_Traceguids, 1);
              v23 = WPP_GLOBAL_Control;
            }
          }
          else if ( *(char *)(v24 + 10) >= 0 )
          {
            if ( !v25 && (!*(_QWORD *)v24 || *(_WORD *)(*(_QWORD *)v24 + 12i64) != 1) )
            {
              v32 = *(_BYTE *)(v24 + 8);
              if ( v32 == 8 && (*(_BYTE *)(a1 + 1417) || !dword_1401B9834) )
              {
LABEL_97:
                v6 = v38;
                break;
              }
              if ( v11 + 16 > v46 )
              {
                v6 = v38;
                *(_BYTE *)(a1 + 6306) |= 2u;
                break;
              }
              if ( (v32 & 1) != 0 || v32 == 8 )
              {
                v29 = RR_PacketTtlForCachedRecord(v24, *(unsigned int *)(a1 + 568), 1i64);
                if ( v29 == -1 )
                {
LABEL_84:
                  v40 = 1;
                  v6 = v29;
                  break;
                }
              }
              else
              {
                v29 = *(_DWORD *)(v24 + 20);
              }
              *(_DWORD *)(v11 + 6) = v29;
              v7 = 1;
              *(_WORD *)v11 = v39;
              *(_WORD *)(v11 + 10) = 1024;
              *(_DWORD *)(v11 + 2) = 16777472;
              *(_DWORD *)(v11 + 12) = *(_DWORD *)(v24 + 56);
              v11 += 16i64;
              if ( (*(_WORD *)(v24 + 10) & 0x800) != 0 && *(_BYTE *)(a1 + 1415) == 1 && !*(_WORD *)(a1 + 6310) )
                *(_BYTE *)(a1 + 6306) |= 4u;
              if ( (*(_DWORD *)(v24 + 28) & 3) == 2 )
              {
                if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                  && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x100000) != 0
                  && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
                {
                  if ( (*(_BYTE *)(v24 + 28) & 4) != 0 )
                    v26 = "unvalidated";
                  WPP_SF_sqq(
                    *((_QWORD *)WPP_GLOBAL_Control + 7),
                    0x28u,
                    (__int64)&WPP_a868f83000033e876174d5733703ce9b_Traceguids,
                    v26);
                }
                ++*(_DWORD *)(a1 + 1488);
              }
LABEL_124:
              *(_BYTE *)(a1 + 1455) = 0;
              *(_QWORD *)(a1 + 32) = v11;
              if ( v7 > 1u && dword_1401B98A8 && byte_1401B826B && v43 )
                roundRobinShuffle(a2, 0i64, 1u, v47, v43);
              *(_BYTE *)(a1 + 6307) &= ~0x20u;
              goto LABEL_130;
            }
            v27 = *(_BYTE *)(v24 + 8);
            if ( v9 != v27 )
            {
              if ( v9 || v27 == 8 && *(_BYTE *)(a1 + 1417) )
                goto LABEL_97;
              v9 = *(_BYTE *)(v24 + 8);
            }
            if ( v40 && (v27 & 1) != 0 )
            {
              v9 = 0;
            }
            else
            {
              v43 = v24;
              if ( !v42 )
              {
                if ( v8 >= 0x3E8u || !dword_1401B98AC && dword_1401B98B4 && v8 >= (unsigned int)dword_1401B98B4 )
                {
                  if ( !dword_1401B98A8 )
                    goto LABEL_97;
                  v42 = 1;
                }
                else
                {
                  if ( (v27 & 1) != 0 || v27 == 8 )
                  {
                    if ( !v8 )
                    {
                      v29 = RR_PacketTtlForCachedRecord(v24, *(unsigned int *)(a1 + 568), 1i64);
                      v38 = v29;
                      if ( v29 == -1 )
                        goto LABEL_84;
                      v23 = WPP_GLOBAL_Control;
                    }
                  }
                  else
                  {
                    v28 = *(_DWORD *)(v24 + 20);
                    if ( (((v28 & 0xFF00 | (v28 << 16)) << 8) | ((HIWORD(v28) | v28 & 0xFF0000) >> 8)) < v41 )
                    {
                      v41 = ((*(_DWORD *)(v24 + 20) & 0xFF00 | (*(_DWORD *)(v24 + 20) << 16)) << 8) | ((HIWORD(*(_DWORD *)(v24 + 20)) | *(_DWORD *)(v24 + 20) & 0xFF0000u) >> 8);
                      v38 = v28;
                    }
                  }
                  v30 = v8++;
                  v48[v30] = *(_DWORD *)(v24 + 56);
                  if ( (*(_DWORD *)(v24 + 28) & 3) == 2 )
                  {
                    if ( v23 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                      && (*((_DWORD *)v23 + 17) & 0x100000) != 0
                      && *((_BYTE *)v23 + 65) >= 4u )
                    {
                      v31 = "validated";
                      if ( (*(_BYTE *)(v24 + 28) & 4) != 0 )
                        v31 = "unvalidated";
                      WPP_SF_sqq(
                        *((_QWORD *)v23 + 7),
                        0x29u,
                        (__int64)&WPP_a868f83000033e876174d5733703ce9b_Traceguids,
                        v31);
                    }
                    ++*(_DWORD *)(a1 + 1488);
                    v23 = WPP_GLOBAL_Control;
                  }
                }
              }
              v25 = v24;
            }
          }
          else if ( *(_BYTE *)(a1 + 1415) == 1 )
          {
            if ( (*(_BYTE *)(v24 + 8) & 1) == 0
              || (unsigned int)RR_PacketTtlForCachedRecord(v24, *(unsigned int *)(a1 + 568), 1i64) != -1 )
            {
              v7 = processCachedEmptyAuthRR((_BYTE *)a1, a2, v24);
              goto LABEL_131;
            }
            v23 = WPP_GLOBAL_Control;
            v40 = 1;
          }
        }
        else
        {
          if ( *(_WORD *)(v24 + 12) > 1u )
            goto LABEL_97;
          v47 = (__int64 *)v24;
        }
        v24 = *(_QWORD *)v24;
        if ( !v24 )
          goto LABEL_97;
      }
    }
    if ( dword_1401B98AC )
    {
      v33 = *(_WORD *)(a1 + 64) == 2 ? *(struct in_addr *)(a1 + 68) : (struct in_addr)-1;
      if ( v8 >= 2u )
        prioritizeIpAddressArray(v48, v8, v33);
    }
    if ( dword_1401B98B4 && dword_1401B98B4 < (unsigned int)v8 && !*(_BYTE *)(a1 + 1413) )
      v8 = dword_1401B98B4;
    v7 = 0;
    if ( v8 )
    {
      while ( v11 + 16 <= v46 )
      {
        v34 = v48[v7];
        if ( v7 )
        {
          v36 = *(_QWORD *)(a1 + 32);
          *(_QWORD *)v11 = *(_QWORD *)v36;
          *(_DWORD *)(v11 + 8) = *(_DWORD *)(v36 + 8);
          *(_DWORD *)(v11 + 12) = v34;
        }
        else
        {
          v35 = v43;
          *(_WORD *)v11 = v39;
          *(_DWORD *)(v11 + 2) = 16777472;
          *(_DWORD *)(v11 + 6) = v6;
          *(_WORD *)(v11 + 10) = 1024;
          *(_DWORD *)(v11 + 12) = v34;
          if ( v35 && (*(_WORD *)(v35 + 10) & 0x800) != 0 && *(_BYTE *)(a1 + 1415) == 1 && !*(_WORD *)(a1 + 6310) )
            *(_BYTE *)(a1 + 6306) |= 4u;
        }
        v11 += 16i64;
        if ( ++v7 >= v8 )
          goto LABEL_123;
      }
      if ( dword_1401B98B4 && *(_BYTE *)(a1 + 1415) == 1 && v7 )
        goto LABEL_124;
      *(_BYTE *)(a1 + 6306) |= 2u;
LABEL_123:
      if ( !v7 )
        goto LABEL_130;
      goto LABEL_124;
    }
LABEL_130:
    *(_WORD *)(a1 + 2i64 * *(unsigned __int8 *)(a1 + 1415) + 6308) += v7;
LABEL_131:
    v13 = v45;
    goto LABEL_132;
  }
  v13 = *(_QWORD *)(a1 + 24);
  v14 = *(unsigned int *)(a1 + 48) + a1 + 6304;
  v15 = *(_QWORD *)(a1 + 1256);
  v16 = 0;
  v45 = v13;
  if ( v15 )
  {
    v17 = *(_QWORD *)(v15 + 6280);
    if ( v17 )
    {
      v18 = *(_QWORD *)(v17 + 192);
      if ( v18 )
      {
        v19 = -1i64;
        do
          ++v19;
        while ( *(_WORD *)(v18 + 2 * v19) );
        v16 = 2 * v19;
      }
    }
  }
  v20 = *(_WORD *)(a1 + 606);
  if ( !v20 )
  {
    v22 = v13 - v16 - 16;
    goto LABEL_18;
  }
  v21 = v20 + a1 + 6304;
  if ( v14 >= v21 )
  {
    v22 = v13 - (v14 - v21);
LABEL_18:
    *(_QWORD *)(a1 + 24) = v22;
    v23 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
    {
      WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x26u, (__int64)&WPP_a868f83000033e876174d5733703ce9b_Traceguids);
      v23 = WPP_GLOBAL_Control;
    }
    goto LABEL_22;
  }
LABEL_132:
  v41 = -1;
  releaseRead(DbaseLock, &v41, 1);
  if ( v40 )
  {
    Timeout_SetTimeoutOnNodeEx(a2, 0i64, 0x80000000i64);
    RR_ListResetNodeFlags(a2);
  }
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
  {
    v37 = Dbg_NodeName(a2);
    WPP_SF_Dds(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x2Au,
      (__int64)&WPP_a868f83000033e876174d5733703ce9b_Traceguids,
      v7,
      (*(_BYTE *)(a1 + 6306) & 2) != 0,
      (__int64)v37);
  }
  if ( v13 )
    *(_QWORD *)(a1 + 24) = v13;
  if ( v7 && g_pzoneLocalGlobalNames && *(_QWORD *)(a2 + 56) == g_pzoneLocalGlobalNames )
    _InterlockedAdd(&dword_1401C7F24, 1u);
  return v7;
}
// 1400933AC: conditional instruction was optimized away because dx.2!=0
// 1401B826B: using guessed type char byte_1401B826B;
// 1401B8EF8: using guessed type __int64 g_pzoneLocalGlobalNames;
// 1401B970C: using guessed type int dword_1401B970C;
// 1401B9834: using guessed type int dword_1401B9834;
// 1401B98A8: using guessed type int dword_1401B98A8;
// 1401B98AC: using guessed type int dword_1401B98AC;
// 1401B98B4: using guessed type int dword_1401B98B4;
// 1401C7F24: using guessed type int dword_1401C7F24;
// 1401EC5E8: using guessed type __int64 DbaseLock;
// 140093204: using guessed type int var_FE8[1000];
