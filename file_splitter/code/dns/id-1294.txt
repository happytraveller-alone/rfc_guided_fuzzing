//----- (00000001400A5F6C) ----------------------------------------------------
__int64 __fastcall InitializeRRL(struct _DnsRRLParams_ *a1, int a2)
{
  int LastError; // eax
  unsigned int v5; // ebx
  __int64 *v6; // rcx
  unsigned __int16 v7; // dx
  int v8; // r8d
  DWORD v9; // eax
  int v10; // eax
  int RRLParams; // eax
  struct _DnsRRLParams_ *v12; // rdi
  const char *v13; // rax
  const char *v14; // rcx
  __int64 v15; // rdx
  const char *v16; // rax
  int v17; // ecx
  int v18; // eax
  struct _DnsRRLParams_ *v20; // [rsp+90h] [rbp+18h] BYREF

  hDnsInitRRLEvent = CreateEventW(0i64, 1, 0, 0i64);
  if ( !hDnsInitRRLEvent )
  {
    LastError = GetLastError();
    v5 = LastError;
    v6 = (__int64 *)WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      v7 = 95;
LABEL_6:
      WPP_SF_D(v6[7], v7, (__int64)&WPP_44543417c05739f4a9c82c388f6d5836_Traceguids, LastError);
      goto LABEL_28;
    }
    goto LABEL_28;
  }
  v8 = dword_1401B99E8 + 1;
  if ( dword_1401B99E8 == -1 )
    v8 = g_ProcessorCount + 1;
  LastError = DnsRRL_Initialize(a1, a2, v8);
  v5 = LastError;
  if ( LastError )
  {
    v6 = (__int64 *)WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      v7 = 96;
      goto LABEL_6;
    }
LABEL_28:
    if ( v5 )
    {
LABEL_29:
      DisableRRL();
      if ( (Microsoft_Windows_DNS_Server_ServiceEnableBits & 4) != 0 )
        Template_s(Microsoft_Windows_DNS_Server_ServiceHandle, &DNS_EVENT_RRL_PARAMS_LOAD_FAILURE, Str);
      goto LABEL_51;
    }
    goto LABEL_31;
  }
  if ( !Thread_Create("RRL", (__int64 (__fastcall *)(__int64))DnsRRL_Thread, 0i64, 0) )
  {
    LastError = GetLastError();
    v5 = LastError;
    v6 = (__int64 *)WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      v7 = 97;
      goto LABEL_6;
    }
    goto LABEL_28;
  }
  v9 = WaitForSingleObject(hDnsInitRRLEvent, 0xEA60u);
  if ( v9 )
  {
    if ( v9 != 258 )
    {
      v10 = GetLastError();
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        WPP_SF_D(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x62u,
          (__int64)&WPP_44543417c05739f4a9c82c388f6d5836_Traceguids,
          v10);
      }
    }
    v5 = 9911;
    goto LABEL_29;
  }
  if ( !gDnsRRLInitStatus )
  {
    v5 = 9911;
    goto LABEL_28;
  }
LABEL_31:
  if ( a2 == 1 )
  {
    v20 = 0i64;
    RRLParams = CDnsRRLParameters::GetRRLParams((CDnsRRLParameters *)v6, &v20);
    if ( RRLParams )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        WPP_SF_D(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x63u,
          (__int64)&WPP_44543417c05739f4a9c82c388f6d5836_Traceguids,
          RRLParams);
      }
    }
    else
    {
      v12 = v20;
      v13 = "LogOnly";
      v14 = "Enabled";
      v15 = *((unsigned int *)v20 + 8);
      if ( (_DWORD)v15 )
        v13 = 0i64;
      if ( (_DWORD)v15 != 1 )
        v14 = v13;
      v16 = "Disabled";
      if ( (_DWORD)v15 != 2 )
        v16 = v14;
      if ( (dword_1401B9104 & 0x2000) != 0 )
        Template_sqqqqqqqqs(
          (__int64)v14,
          v15,
          Str,
          *(_DWORD *)v20,
          *((_DWORD *)v20 + 1),
          *((_DWORD *)v20 + 2),
          *((_DWORD *)v20 + 3),
          *((_DWORD *)v20 + 5),
          *((_DWORD *)v20 + 4),
          *((_DWORD *)v20 + 6),
          *((_DWORD *)v20 + 7),
          v16);
      if ( g_isRegisteredForUTC == 1 )
      {
        dword_1401B95C8 = *((_DWORD *)v12 + 2);
        dword_1401B95CC = *((_DWORD *)v12 + 3);
        v17 = *((_DWORD *)v12 + 8);
        if ( v17 )
        {
          if ( v17 == 1 )
            qword_1401B95D0 = 0x100000000i64;
        }
        else
        {
          qword_1401B95D0 = 1i64;
        }
      }
      MIDL_user_free(v12);
    }
  }
LABEL_51:
  if ( !CloseHandle(hDnsInitRRLEvent)
    && WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
  {
    v18 = GetLastError();
    WPP_SF_D(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x64u, (__int64)&WPP_44543417c05739f4a9c82c388f6d5836_Traceguids, v18);
  }
  return v5;
}
// 1400A6140: variable 'v6' is possibly undefined
// 140186FA0: using guessed type EVENT_DESCRIPTOR DNS_EVENT_RRL_PARAMS_LOAD_FAILURE;
// 1401B9104: using guessed type int dword_1401B9104;
// 1401B9140: using guessed type int Microsoft_Windows_DNS_Server_ServiceEnableBits;
// 1401B9190: using guessed type int g_isRegisteredForUTC;
// 1401B9254: using guessed type int gDnsRRLInitStatus;
// 1401B95C8: using guessed type int dword_1401B95C8;
// 1401B95CC: using guessed type int dword_1401B95CC;
// 1401B95D0: using guessed type __int64 qword_1401B95D0;
// 1401B99E8: using guessed type int dword_1401B99E8;
