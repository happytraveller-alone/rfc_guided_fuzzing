//----- (0000000140064778) ----------------------------------------------------
__int64 __fastcall Nbstat_MakeRequest(__int64 a1, __int64 a2)
{
  char *v4; // rax
  __int64 v5; // rax
  __int64 v6; // rcx
  unsigned __int16 v7; // dx
  const char *v8; // rax
  int v9; // eax
  __int64 v10; // r9
  __int128 v11; // xmm1
  __int64 v12; // rcx
  __int128 v13; // xmm0
  __int128 v14; // xmm1
  __int64 result; // rax
  __int128 v16[4]; // [rsp+30h] [rbp-58h] BYREF

  if ( !dword_1401B9850 )
    return 0i64;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x10000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    v4 = Dbg_PacketName((unsigned __int8 *)(a1 + 6316), a1 + 6304, 0i64);
    WPP_SF_s(*((_QWORD *)WPP_GLOBAL_Control + 7), 0xAu, (__int64)&WPP_fc3a6397bf853e2fe940ea821e43295b_Traceguids, v4);
  }
  *(_QWORD *)(a1 + 208) = a2;
  v5 = *(_QWORD *)(a2 + 344);
  if ( !v5 )
  {
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x10000) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
    {
      return 0i64;
    }
    v6 = *((_QWORD *)WPP_GLOBAL_Control + 7);
    v7 = 11;
    goto LABEL_11;
  }
  *(_QWORD *)(a1 + 1312) = v5;
  if ( *(_WORD *)(a1 + 6310) )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x10000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 7), 0xCu, (__int64)&WPP_fc3a6397bf853e2fe940ea821e43295b_Traceguids, a1);
    }
    return 0i64;
  }
  if ( !(unsigned int)Name_LookupNameToIpAddress(*(unsigned __int16 **)(a1 + 1400), (struct in_addr *)v16) )
    return 0i64;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x10000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    v8 = DnsAddr_Ntoa((struct in_addr *)v16);
    WPP_SF_s(*((_QWORD *)WPP_GLOBAL_Control + 7), 0xDu, (__int64)&WPP_fc3a6397bf853e2fe940ea821e43295b_Traceguids, v8);
  }
  LOBYTE(v9) = DnsAddr_IsClear(v16);
  if ( v9 )
  {
    if ( (CDnsClientSubnetRecordsTrie **)v10 == &WPP_GLOBAL_Control
      || (*(_DWORD *)(v10 + 68) & 0x10000) == 0
      || *(_BYTE *)(v10 + 65) < 4u )
    {
      return 0i64;
    }
    v6 = *(_QWORD *)(v10 + 56);
    v7 = 14;
LABEL_11:
    WPP_SF_(v6, v7, (__int64)&WPP_fc3a6397bf853e2fe940ea821e43295b_Traceguids);
    return 0i64;
  }
  v11 = v16[1];
  v12 = pNbstatQueue;
  *(_OWORD *)(a1 + 1328) = v16[0];
  v13 = v16[2];
  *(_OWORD *)(a1 + 1344) = v11;
  v14 = v16[3];
  *(_OWORD *)(a1 + 1360) = v13;
  *(_OWORD *)(a1 + 1376) = v14;
  if ( !(unsigned int)PQ_QueuePacketEx(v12, a1) )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x10000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_qq(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x10u,
        (__int64)&WPP_fc3a6397bf853e2fe940ea821e43295b_Traceguids,
        a1,
        *(_QWORD *)(pNbstatQueue + 72));
    }
    return 0i64;
  }
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x10000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_qq(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0xFu,
      (__int64)&WPP_fc3a6397bf853e2fe940ea821e43295b_Traceguids,
      a1,
      *(_QWORD *)(pNbstatQueue + 72));
  }
  result = 1i64;
  _InterlockedAdd(&dword_1401C7C30, 1u);
  _InterlockedAdd((volatile signed __int32 *)pcWinsReverseLookupReceived, 1u);
  return result;
}
// 140064902: variable 'v9' is possibly undefined
// 140064907: variable 'v10' is possibly undefined
// 1401B9850: using guessed type int dword_1401B9850;
// 1401C7C30: using guessed type int dword_1401C7C30;
// 1401C7C38: using guessed type __int64 pcWinsReverseLookupReceived;
// 1401CBE00: using guessed type __int64 pNbstatQueue;
