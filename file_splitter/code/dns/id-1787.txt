//----- (00000001400E1408) ----------------------------------------------------
void __fastcall TrustPoint::StartActiveRefresh(char *pv)
{
  char v2; // bp
  char *v3; // rbx
  wchar_t *v4; // rax
  int v5; // ecx
  const char *v6; // rax
  __int64 v7; // r10
  const char *v8; // r9
  char *v9; // rbx
  char *v10; // rcx
  __int64 v11; // rax
  __int64 v12; // rax
  unsigned int v13; // ecx
  CDnsClientSubnetRecordsTrie *v14; // rcx
  unsigned __int16 v15; // dx
  void *v16; // rcx
  HANDLE EventW; // rax
  void *v18; // rsi
  __int64 v19; // r9
  unsigned int v20; // [rsp+90h] [rbp+8h] BYREF
  unsigned int v21; // [rsp+98h] [rbp+10h] BYREF
  struct _FILETIME v22; // [rsp+A0h] [rbp+18h] BYREF
  __int64 v23; // [rsp+A8h] [rbp+20h] BYREF

  v2 = 0;
  GetSystemTimeAsFileTime(&v22);
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x100000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    v3 = pv + 136;
    if ( *((_QWORD *)pv + 20) >= 0x10ui64 )
      v3 = *(char **)v3;
    v4 = Dbg_FileTime(&v22);
    WPP_SF_sqS(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x2Au,
      (__int64)&WPP_4831604f5a2431d08120905ab66c1365_Traceguids,
      v3,
      (char)pv,
      (__int64)v4);
  }
  v5 = *((_DWORD *)pv + 33);
  *((struct _FILETIME *)pv + 60) = v22;
  if ( (unsigned int)(v5 - 1) > 1 )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x100000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      v6 = DNSSEC_TrustPointStateToString(v5);
      WPP_SF_sqs(
        *(_QWORD *)(v7 + 56),
        0x2Bu,
        (__int64)&WPP_4831604f5a2431d08120905ab66c1365_Traceguids,
        v8,
        (char)pv,
        (__int64)v6);
    }
LABEL_46:
    TrustPoint::ScheduleActiveRefresh((unsigned int *)pv, 0, 0);
    if ( !v2 )
      return;
    goto LABEL_55;
  }
  v9 = pv + 136;
  if ( *((_QWORD *)pv + 20) < 0x10ui64 )
    v10 = pv + 136;
  else
    v10 = *(char **)v9;
  v11 = Lookup_ZoneTreeNodeFromDottedNameEx(v10, *((_DWORD *)pv + 38), 0x2000000, 0i64);
  if ( v11 )
  {
    v12 = *(_QWORD *)(v11 + 56);
    if ( v12 )
    {
      v13 = *(_DWORD *)(v12 + 372);
      if ( v13 - 1 <= 1 || v13 >= 5 )
      {
        v14 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x100000) == 0
          || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
        {
          goto LABEL_46;
        }
        if ( *((_QWORD *)pv + 20) >= 0x10ui64 )
          v9 = *(char **)v9;
        v15 = 44;
        goto LABEL_45;
      }
    }
  }
  EnterCriticalSection((LPCRITICAL_SECTION)pv);
  v2 = 1;
  if ( !pv[536] )
  {
    v16 = (void *)*((_QWORD *)pv + 66);
    if ( v16 && WaitForSingleObjectEx(v16, 0, 0) == 258 )
    {
      v14 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x100000) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
      {
        goto LABEL_46;
      }
      if ( *((_QWORD *)pv + 20) >= 0x10ui64 )
        v9 = *(char **)v9;
      v15 = 45;
      goto LABEL_45;
    }
    if ( !*((_QWORD *)pv + 66) )
    {
      EventW = CreateEventW(0i64, 1, 1, 0i64);
      *((_QWORD *)pv + 66) = EventW;
      if ( !EventW )
        goto LABEL_46;
    }
    ResetEvent(*((HANDLE *)pv + 66));
    v20 = -1;
    acquireUpdate(DbaseLock, 0xFFFFFFFF, &v20, 1);
    v18 = Dnssec_NodeLookup((unsigned __int8 *)pv + 176, 0i64, 0i64, 0x30u, 0, &v23, 0i64);
    if ( !v18 )
      v18 = Lookup_ZoneNode(0i64, (unsigned __int8 *)pv + 178, 0i64, 0i64, 24, 0i64, 0i64, 0i64);
    v21 = -1;
    releaseUpdate(DbaseLock, &v21, 1);
    if ( (unsigned int)Recurse_SendCacheUpdateQuery(
                         (__int64)v18,
                         0i64,
                         v23,
                         v19,
                         0x30u,
                         0i64,
                         1u,
                         0,
                         (__int64)DNSSEC_HandleActiveRefreshResponse,
                         (__int64)pv) )
    {
      v14 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x100000) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
      {
        goto LABEL_46;
      }
      if ( *((_QWORD *)pv + 20) >= 0x10ui64 )
        v9 = *(char **)v9;
      v15 = 46;
LABEL_45:
      WPP_SF_sq(*((_QWORD *)v14 + 7), v15, (__int64)&WPP_4831604f5a2431d08120905ab66c1365_Traceguids, v9);
      goto LABEL_46;
    }
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x100000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      if ( *((_QWORD *)pv + 20) >= 0x10ui64 )
        v9 = *(char **)v9;
      WPP_SF_sq(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x2Fu,
        (__int64)&WPP_4831604f5a2431d08120905ab66c1365_Traceguids,
        v9);
    }
    TrustPoint::HandleActiveRefreshResponse((TrustPoint *)pv, 9002);
    _InterlockedDecrement((volatile signed __int32 *)&g_ConcurrentActiveRefreshes);
  }
LABEL_55:
  LeaveCriticalSection((LPCRITICAL_SECTION)pv);
}
// 1400E14F4: variable 'v7' is possibly undefined
// 1400E150E: variable 'v8' is possibly undefined
// 1400E1725: variable 'v19' is possibly undefined
// 1401B9148: using guessed type volatile unsigned int g_ConcurrentActiveRefreshes;
// 1401EC5E8: using guessed type __int64 DbaseLock;
