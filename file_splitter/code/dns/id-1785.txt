//----- (00000001400E0BA8) ----------------------------------------------------
__int64 ***__fastcall TrustPoint::FindTrustAnchor(__int64 a1, __int64 ***a2, _WORD *a3, char a4)
{
  bool v5; // zf
  __int64 **v8; // rax
  __int64 *v9; // rcx
  __int16 v10; // di
  __int64 **v11; // r10
  __int64 v12; // rdx
  __int16 v13; // ax
  __int64 *v14; // rax
  __int64 *v15; // r8
  __int16 v16; // ax
  __int64 *v17; // rax
  __int64 *v18; // rcx
  __int64 **v19; // rax
  __int64 *v20; // rcx
  __int16 v21; // r15
  __int64 **v22; // r14
  _WORD *v23; // rsi
  __int16 v24; // cx
  const char *v25; // r9
  __int64 *v26; // rdi
  __int16 v27; // ax
  bool v28; // al
  unsigned __int16 v29; // ax
  __int64 *v30; // rax
  __int64 *v31; // rcx
  __int16 v33; // [rsp+60h] [rbp+8h] BYREF
  __int64 *v34; // [rsp+68h] [rbp+10h] BYREF

  *a2 = 0i64;
  v5 = *(_DWORD *)(a1 + 128) == 0;
  v33 = a3[10];
  if ( v5
    || !a4
    || (v8 = std::_Hash<std::_Hmap_traits<unsigned short,TrustAnchor,stdext::hash_compare<unsigned short,std::less<unsigned short>>,std::allocator<std::pair<unsigned short const,TrustAnchor>>,1>>::lower_bound(
               (_QWORD *)(a1 + 40),
               &v34,
               &v33),
        v9 = *v8,
        *a2 = (__int64 **)*v8,
        v9 == *(__int64 **)(a1 + 48)) )
  {
LABEL_24:
    v19 = std::_Hash<std::_Hmap_traits<unsigned short,TrustAnchor,stdext::hash_compare<unsigned short,std::less<unsigned short>>,std::allocator<std::pair<unsigned short const,TrustAnchor>>,1>>::lower_bound(
            (_QWORD *)(a1 + 40),
            &v34,
            &v33);
    v20 = *v19;
    *a2 = (__int64 **)*v19;
    if ( v20 == *(__int64 **)(a1 + 48) )
    {
LABEL_56:
      *a2 = *(__int64 ***)(a1 + 48);
      return a2;
    }
    v21 = v33;
    while ( 1 )
    {
      v22 = *a2;
      if ( *((_WORD *)*a2 + 8) != v21 )
        goto LABEL_56;
      if ( a3[10] != *((_WORD *)v22 + 22) )
        break;
      v23 = *(_WORD **)a3;
      v24 = *(_QWORD *)a3 ? v23[6] : 0;
      v26 = v22[3];
      v27 = v26 ? *((_WORD *)v26 + 6) : 0;
      if ( v24 != v27 )
        break;
      if ( !v23 )
      {
        v28 = v26 == 0i64;
        goto LABEL_54;
      }
      if ( v26 )
      {
        v29 = *((_WORD *)v26 + 7);
        if ( v23[7] == v29 )
        {
          if ( !memcmp_0(v23 + 28, v26 + 7, v29) )
            return a2;
          if ( v23[6] == 48
            && *((_WORD *)v26 + 6) == 48
            && ((ntohs(v23[28]) & 0x80u) != 0 || (v30 = v22[3]) != 0i64 && (ntohs(*((_WORD *)v30 + 28)) & 0x80u) != 0)
            && !memcmp_0(
                  (const void *)(*(_QWORD *)a3 + 58i64),
                  (char *)v22[3] + 58,
                  *((unsigned __int16 *)v22[3] + 7) - 2i64) )
          {
            return a2;
          }
        }
      }
LABEL_55:
      v31 = **a2;
      *a2 = (__int64 **)v31;
      if ( v31 == *(__int64 **)(a1 + 48) )
        goto LABEL_56;
    }
    v28 = 0;
LABEL_54:
    if ( v28 )
      return a2;
    goto LABEL_55;
  }
  v10 = v33;
  while ( 1 )
  {
    v11 = *a2;
    if ( *((_WORD *)*a2 + 8) != v10 )
      goto LABEL_24;
    v12 = *(_QWORD *)a3;
    v13 = *(_QWORD *)a3 ? *(_WORD *)(v12 + 12) : 0;
    if ( v13 != 48 )
      goto LABEL_60;
    v14 = v11[3];
    if ( v14 )
      LOWORD(v14) = *((_WORD *)v14 + 6);
    if ( (_WORD)v14 == 43 )
    {
      v15 = *(__int64 **)a3;
      v12 = (__int64)v11[3];
    }
    else
    {
LABEL_60:
      if ( v12 )
        v16 = *(_WORD *)(v12 + 12);
      else
        v16 = 0;
      if ( v16 != 43 )
        goto LABEL_23;
      v17 = v11[3];
      if ( v17 )
        LOWORD(v17) = *((_WORD *)v17 + 6);
      if ( (_WORD)v17 != 48 )
        goto LABEL_23;
      v15 = v11[3];
    }
    if ( !(unsigned int)Dns_MatchDSToDNSKEY((unsigned __int8 *)(a1 + 176), v12, v15, 1, 0i64, 0i64) )
      break;
LABEL_23:
    v18 = **a2;
    *a2 = (__int64 **)v18;
    if ( v18 == *(__int64 **)(a1 + 48) )
      goto LABEL_24;
  }
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x100000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    v25 = (const char *)(a1 + 136);
    if ( *(_QWORD *)(a1 + 160) >= 0x10ui64 )
      v25 = *(const char **)v25;
    WPP_SF_sqD(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x25u,
      (__int64)&WPP_4831604f5a2431d08120905ab66c1365_Traceguids,
      v25);
  }
  return a2;
}
