//----- (00000001400E83C4) ----------------------------------------------------
_QWORD *__fastcall std::_Tree<std::_Tmap_traits<_CountName,std::unique_ptr<TrustPoint>,CountNameCompare,std::allocator<std::pair<_CountName const,std::unique_ptr<TrustPoint>>>,0>>::_Insert(
        __int64 a1,
        _QWORD *a2,
        char a3,
        _QWORD *a4,
        _QWORD *a5)
{
  __int64 v6; // rax
  __int64 v7; // rax
  _QWORD *v8; // rdx
  __int64 *v9; // rax
  __int64 *v10; // r9
  __int64 *v11; // rcx
  _QWORD *v12; // rcx
  _QWORD *v13; // rax
  _QWORD *v14; // rcx
  _QWORD *v15; // r9
  __int64 v16; // rax
  _QWORD *v17; // rax
  __int64 v18; // rcx
  __int64 v19; // rax
  _QWORD *v20; // rax
  _QWORD *v21; // rax
  __int64 v22; // rax
  __int64 v23; // rcx
  _QWORD *result; // rax
  __int64 v25; // rax
  __int64 v26; // rax
  __int64 v27; // rcx
  __int64 v28; // rcx

  if ( (unsigned __int64)qword_1401B9290 >= 0xF0F0F0F0F0F0EFi64 )
  {
    v25 = std::_Tree_val<std::_Tmap_traits<std::wstring,CDnsPolicy_CriteriaNode *,bool (*)(std::wstring const &,std::wstring const &),std::allocator<std::pair<std::wstring const,CDnsPolicy_CriteriaNode *>>,0>>::_Myval((__int64)a5);
    v26 = std::streambuf::setbuf(v25);
    std::_Dest_val<std::allocator<std::pair<_CountName const,std::unique_ptr<TrustPoint>>>,std::pair<_CountName const,std::unique_ptr<TrustPoint>>>(
      v27,
      v26);
    std::allocator<DnsSign::CDnsKeyPair *>::deallocate(v28, a5);
    std::_Xlength_error("map/set<T> too long");
  }
  ++qword_1401B9290;
  a5[1] = a4;
  if ( a4 == (_QWORD *)qword_1401B9288 )
  {
    *(_QWORD *)(qword_1401B9288 + 8) = a5;
    *(_QWORD *)qword_1401B9288 = a5;
    v6 = qword_1401B9288;
LABEL_8:
    *(_QWORD *)(v6 + 16) = a5;
    goto LABEL_9;
  }
  if ( a3 )
  {
    *a4 = a5;
    if ( a4 == *(_QWORD **)qword_1401B9288 )
      *(_QWORD *)qword_1401B9288 = a5;
    goto LABEL_9;
  }
  a4[2] = a5;
  v6 = qword_1401B9288;
  if ( a4 == *(_QWORD **)(qword_1401B9288 + 16) )
    goto LABEL_8;
LABEL_9:
  v7 = a5[1];
  v8 = a5;
  while ( !*(_BYTE *)(v7 + 296) )
  {
    v9 = (__int64 *)v8[1];
    v10 = (__int64 *)v9[1];
    v11 = (__int64 *)*v10;
    if ( v9 == (__int64 *)*v10 )
    {
      v11 = (__int64 *)v10[2];
      if ( !*((_BYTE *)v11 + 296) )
        goto LABEL_30;
      if ( v8 == (_QWORD *)v9[2] )
      {
        v12 = (_QWORD *)v9[2];
        v8 = (_QWORD *)v8[1];
        v9[2] = *v12;
        if ( !*(_BYTE *)(*v12 + 297i64) )
          *(_QWORD *)(*v12 + 8i64) = v9;
        v12[1] = v9[1];
        if ( v8 == *(_QWORD **)(qword_1401B9288 + 8) )
        {
          *(_QWORD *)(qword_1401B9288 + 8) = v12;
        }
        else
        {
          v13 = (_QWORD *)v8[1];
          if ( v8 == (_QWORD *)*v13 )
            *v13 = v12;
          else
            v13[2] = v12;
        }
        *v12 = v8;
        v8[1] = v12;
      }
      *(_BYTE *)(v8[1] + 296i64) = 1;
      *(_BYTE *)(*(_QWORD *)(v8[1] + 8i64) + 296i64) = 0;
      v14 = *(_QWORD **)(v8[1] + 8i64);
      v15 = (_QWORD *)*v14;
      *v14 = *(_QWORD *)(*v14 + 16i64);
      v16 = v15[2];
      if ( !*(_BYTE *)(v16 + 297) )
        *(_QWORD *)(v16 + 8) = v14;
      v15[1] = v14[1];
      if ( v14 == *(_QWORD **)(qword_1401B9288 + 8) )
      {
        *(_QWORD *)(qword_1401B9288 + 8) = v15;
      }
      else
      {
        v17 = (_QWORD *)v14[1];
        if ( v14 == (_QWORD *)v17[2] )
          v17[2] = v15;
        else
          *v17 = v15;
      }
      v15[2] = v14;
    }
    else
    {
      if ( !*((_BYTE *)v11 + 296) )
      {
LABEL_30:
        *((_BYTE *)v9 + 296) = 1;
        *((_BYTE *)v11 + 296) = 1;
        *(_BYTE *)(*(_QWORD *)(v8[1] + 8i64) + 296i64) = 0;
        v8 = *(_QWORD **)(v8[1] + 8i64);
        goto LABEL_49;
      }
      if ( v8 == (_QWORD *)*v9 )
      {
        v18 = *v9;
        v8 = (_QWORD *)v8[1];
        *v9 = *(_QWORD *)(*v9 + 16);
        v19 = *(_QWORD *)(v18 + 16);
        if ( !*(_BYTE *)(v19 + 297) )
          *(_QWORD *)(v19 + 8) = v8;
        *(_QWORD *)(v18 + 8) = v8[1];
        if ( v8 == *(_QWORD **)(qword_1401B9288 + 8) )
        {
          *(_QWORD *)(qword_1401B9288 + 8) = v18;
        }
        else
        {
          v20 = (_QWORD *)v8[1];
          if ( v8 == (_QWORD *)v20[2] )
            v20[2] = v18;
          else
            *v20 = v18;
        }
        *(_QWORD *)(v18 + 16) = v8;
        v8[1] = v18;
      }
      *(_BYTE *)(v8[1] + 296i64) = 1;
      *(_BYTE *)(*(_QWORD *)(v8[1] + 8i64) + 296i64) = 0;
      v14 = *(_QWORD **)(v8[1] + 8i64);
      v15 = (_QWORD *)v14[2];
      v14[2] = *v15;
      if ( !*(_BYTE *)(*v15 + 297i64) )
        *(_QWORD *)(*v15 + 8i64) = v14;
      v15[1] = v14[1];
      if ( v14 == *(_QWORD **)(qword_1401B9288 + 8) )
      {
        *(_QWORD *)(qword_1401B9288 + 8) = v15;
      }
      else
      {
        v21 = (_QWORD *)v14[1];
        if ( v14 == (_QWORD *)*v21 )
          *v21 = v15;
        else
          v21[2] = v15;
      }
      *v15 = v14;
    }
    v14[1] = v15;
LABEL_49:
    v7 = v8[1];
  }
  v22 = qword_1401B9288;
  *a2 = a5;
  v23 = *(_QWORD *)(v22 + 8);
  result = a2;
  *(_BYTE *)(v23 + 296) = 1;
  return result;
}
// 1400E8684: variable 'v27' is possibly undefined
// 1400E868E: variable 'v28' is possibly undefined
// 1401B9288: using guessed type __int64 qword_1401B9288;
// 1401B9290: using guessed type __int64 qword_1401B9290;
