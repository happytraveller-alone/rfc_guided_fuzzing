//----- (000000014011ADB4) ----------------------------------------------------
__int64 __fastcall OpenAndMapFileForReadW(unsigned __int16 *a1, __int64 a2, int a3)
{
  void *v3; // rbp
  HANDLE FileW; // rax
  void *v8; // rsi
  __int64 v9; // rdx
  unsigned int LastError; // ebx
  __int64 result; // rax
  DWORD FileSize; // r14d
  __int64 v13; // rdx
  CDnsClientSubnetRecordsTrie *v14; // rcx
  unsigned __int16 v15; // dx
  HANDLE FileMappingW; // rax
  LPVOID v17; // rax
  __int128 v18[3]; // [rsp+40h] [rbp-38h] BYREF
  unsigned __int16 *v19; // [rsp+80h] [rbp+8h] BYREF
  DWORD FileSizeHigh; // [rsp+98h] [rbp+20h] BYREF

  v19 = a1;
  v3 = 0i64;
  FileW = CreateFileW(a1, 0x80000000, 1u, 0i64, 3u, 0x80u, 0i64);
  v8 = FileW;
  if ( FileW == (HANDLE)-1i64 )
  {
    LastError = GetLastError();
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 25) >= 4u )
    {
      WPP_SF_S(*((_QWORD *)WPP_GLOBAL_Control + 2), 0xAu, (__int64)&WPP_4b0500bc03db31660036206d91b67085_Traceguids, a1);
    }
    if ( a3 || LastError != 2 )
    {
      v18[0] = DNS_EVENT_FILE_OPEN_ERROR;
      Eventlog_LogEvent((__int64)v18, v9, 1u, &v19, 0i64, 0, 0, 0i64);
    }
    return LastError;
  }
  FileSize = GetFileSize(FileW, &FileSizeHigh);
  if ( FileSize == -1 )
  {
    LastError = GetLastError();
    if ( LastError )
    {
      v14 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 25) < 4u )
      {
        goto LABEL_27;
      }
      v15 = 11;
LABEL_16:
      WPP_SF_SD(*((_QWORD *)v14 + 2), v15, (__int64)&WPP_4b0500bc03db31660036206d91b67085_Traceguids, a1);
LABEL_27:
      v18[0] = DNS_EVENT_FILE_NOT_MAPPED;
      Eventlog_LogEvent((__int64)v18, v13, 1u, &v19, 0i64, LastError, 0, 0i64);
      if ( v3 )
        CloseHandle(v3);
      if ( v8 )
        CloseHandle(v8);
      return LastError;
    }
  }
  FileMappingW = CreateFileMappingW(v8, 0i64, 0x8000002u, 0, 0, 0i64);
  v3 = FileMappingW;
  if ( !FileMappingW )
  {
    LastError = GetLastError();
    v14 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 25) < 4u )
    {
      goto LABEL_27;
    }
    v15 = 12;
    goto LABEL_16;
  }
  v17 = MapViewOfFile(FileMappingW, 4u, 0, 0, 0i64);
  if ( !v17 )
  {
    LastError = GetLastError();
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 25) >= 4u )
    {
      WPP_SF_DS(
        *((_QWORD *)WPP_GLOBAL_Control + 2),
        0xDu,
        (__int64)&WPP_4b0500bc03db31660036206d91b67085_Traceguids,
        LastError,
        (__int64)a1);
    }
    goto LABEL_27;
  }
  *(_QWORD *)(a2 + 16) = v17;
  result = 0i64;
  *(_QWORD *)a2 = v8;
  *(_QWORD *)(a2 + 8) = v3;
  *(_DWORD *)(a2 + 24) = FileSize;
  return result;
}
// 14011AE7F: variable 'v9' is possibly undefined
// 14011AFE8: variable 'v13' is possibly undefined
// 1401860E8: using guessed type __int128 DNS_EVENT_FILE_NOT_MAPPED;
// 140186278: using guessed type __int128 DNS_EVENT_FILE_OPEN_ERROR;
