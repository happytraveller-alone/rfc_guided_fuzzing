//----- (0000000140132E20) ----------------------------------------------------
__int64 *__fastcall CDnsPolicy_ProtocolCriteriaTree::AddCriteriaNode(__int64 a1, unsigned __int16 a2, __int64 a3)
{
  unsigned __int64 v5; // rbx
  __int64 v6; // rax
  BOOL v7; // ebp
  const char *v8; // rax
  const char *v9; // r8
  const char *v10; // r9
  CDnsPolicy_CriteriaNode *v11; // rax
  CDnsPolicy_CriteriaNode *v12; // rdi
  CDnsPolicy_CriteriaNode *v13; // rdi
  __int16 v14; // cx
  __int64 *v15; // rax
  __int64 v16; // rcx
  __int64 *v17; // rbx
  _QWORD *v18; // rax
  int LastError; // eax
  __int64 v21; // rdi
  _QWORD *v22; // rax
  __int64 v23; // rdx
  char pExceptionObject[80]; // [rsp+38h] [rbp-50h] BYREF
  CDnsPolicy_CriteriaNode *v25; // [rsp+90h] [rbp+8h] BYREF
  unsigned int v26; // [rsp+98h] [rbp+10h] BYREF
  __int64 *v27; // [rsp+A8h] [rbp+20h]

  v5 = a2;
  v6 = *(_QWORD *)(a1 + 8);
  if ( a2 >= 2ui64 )
    std::tr1::array<CDnsPolicy_CriteriaNode *,2>::_Xran();
  if ( *(_QWORD *)(v6 + 8i64 * a2) )
  {
    if ( a2 >= 2ui64 )
      std::tr1::array<CDnsPolicy_CriteriaNode *,2>::_Xran();
    v25 = *(CDnsPolicy_CriteriaNode **)(v6 + 8i64 * a2);
  }
  else
  {
    v7 = *(_DWORD *)(a1 + 16) == 1;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      v8 = "UDP";
      if ( !a2 )
        v8 = "TCP";
      v9 = "IPv4";
      if ( !a2 )
        v9 = "IPv6";
      if ( *(_DWORD *)(a1 + 16) == 1 )
        v9 = v8;
      v10 = "Network";
      if ( *(_DWORD *)(a1 + 16) == 1 )
        v10 = "Transport";
      WPP_SF_ssq(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x36u,
        (__int64)&WPP_bbbcc621566c3408fe84d6a85874d543_Traceguids,
        v10,
        (__int64)v9);
    }
    v11 = (CDnsPolicy_CriteriaNode *)operator new(0x38ui64);
    v12 = v11;
    v25 = v11;
    if ( v11 )
    {
      memset_0(v11, 0, 0x38ui64);
      v13 = CDnsPolicy_CriteriaNode::CDnsPolicy_CriteriaNode(v12);
    }
    else
    {
      v13 = 0i64;
    }
    v25 = v13;
    v14 = 2 - v7;
    *((_WORD *)v13 + 24) = v14;
    CDnsPolicy_CriteriaNode::AddNextCriteriaTrees(v13, 6 - v14);
    v26 = -1;
    acquireWrite(a3, 0xFFFFFFFF, &v26);
    if ( v5 >= 2 )
      std::tr1::array<CDnsPolicy_CriteriaNode *,2>::_Xran();
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v5) = v13;
    Lock_ReleaseWrite(a3);
  }
  v15 = (__int64 *)operator new(0x18ui64, (const struct std::nothrow_t *)&std::nothrow);
  v17 = v15;
  v27 = v15;
  if ( v15 )
  {
    v15[1] = 0i64;
    v18 = operator new(0x18ui64);
    if ( !v18 )
    {
      std::bad_alloc::bad_alloc((std::bad_alloc *)pExceptionObject, 0i64);
      CxxThrowException_0(pExceptionObject, (_ThrowInfo *)&TI2_AVbad_alloc_std__);
    }
    *v17 = (__int64)v18;
    *v18 = v18;
    *(_QWORD *)(*v17 + 8) = *v17;
  }
  else
  {
    v17 = 0i64;
  }
  if ( v17 )
  {
    v21 = *v17;
    v22 = std::_List_val<CDNSPolicyCriteria *>::_Buynode(v16, *v17, *(_QWORD *)(*v17 + 8), &v25);
    v23 = v17[1];
    if ( v23 == 0x1FFFFFFFFFFFFFFEi64 )
      std::_Xlength_error("list<T> too long");
    v17[1] = v23 + 1;
    *(_QWORD *)(v21 + 8) = v22;
    *(_QWORD *)v22[1] = v22;
    return v17;
  }
  else
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      LastError = GetLastError();
      WPP_SF_D(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x37u,
        (__int64)&WPP_bbbcc621566c3408fe84d6a85874d543_Traceguids,
        LastError);
    }
    return 0i64;
  }
}
// 140133064: variable 'v16' is possibly undefined
