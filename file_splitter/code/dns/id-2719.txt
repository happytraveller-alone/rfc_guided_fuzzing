//----- (0000000140142C28) ----------------------------------------------------
__int64 __fastcall CDNSClientSubnetRecord::VerifyClientSubnetRecord(
        CDNSClientSubnetRecord *this,
        struct _ClientSubnetRecord *a2,
        int a3)
{
  __int64 v3; // rax
  unsigned int v6; // ebp
  CDnsClientSubnetRecordsTrie *v7; // rdi
  int v8; // r12d
  _QWORD *v9; // rax
  int v10; // ecx
  _QWORD *v11; // rbx
  unsigned __int64 v12; // rbp
  __int64 v13; // r13
  __int64 v14; // r14
  _QWORD *v15; // rax
  int v16; // r9d
  __int64 v17; // rsi
  unsigned int v18; // edi
  _QWORD *v19; // r15
  int v20; // eax
  _QWORD *v21; // rbx
  int v22; // ebp
  unsigned __int64 v23; // r14
  __int64 v24; // r12
  _QWORD *v26; // rax
  __int64 v27; // rcx
  int v28; // [rsp+88h] [rbp+10h]
  int v30; // [rsp+98h] [rbp+20h]

  v3 = *((_QWORD *)a2 + 1);
  if ( v3 && (v6 = 0, v30 = 0, *(_DWORD *)(v3 + 4)) )
  {
    v7 = WPP_GLOBAL_Control;
    v8 = -1;
    while ( 1 )
    {
      v9 = (_QWORD *)*((_QWORD *)this + 6);
      v10 = 0;
      v28 = 0;
      v11 = (_QWORD *)*v9;
      if ( (_QWORD *)*v9 != v9 )
      {
        v12 = (unsigned __int64)v6 << 6;
        do
        {
          v13 = *((_QWORD *)a2 + 1);
          v14 = v11[2];
          if ( (unsigned int)DnsAddr_IsEqual((_WORD *)v14, (_WORD *)(v13 + v12 + 32), 3)
            && *(_DWORD *)(v14 + 36) == *(_DWORD *)(v13 + v12 + 68) )
          {
            v10 = 1;
            v28 = 1;
            if ( v7 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              && (*((_BYTE *)v7 + 68) & 2) != 0
              && *((_BYTE *)v7 + 65) >= 4u )
            {
              v15 = (_QWORD *)((char *)this + 8);
              if ( *((_QWORD *)this + 4) >= 8ui64 )
                v15 = (_QWORD *)*v15;
              if ( *(_WORD *)v14 == 2 )
                v16 = *(_DWORD *)(v14 + 4);
              else
                v16 = -1;
              WPP_SF_DS(
                *((_QWORD *)v7 + 7),
                0x25u,
                (__int64)&WPP_42dbba61d26d3062f1ad4e084cdc81fe_Traceguids,
                v16,
                (__int64)v15);
              v10 = 1;
              v7 = WPP_GLOBAL_Control;
            }
          }
          else
          {
            v10 = v28;
          }
          v11 = (_QWORD *)*v11;
        }
        while ( v11 != *((_QWORD **)this + 6) );
        v6 = v30;
      }
      if ( v10 != a3 )
        break;
      v30 = ++v6;
      if ( v6 >= *(_DWORD *)(*((_QWORD *)a2 + 1) + 4i64) )
        goto LABEL_22;
    }
    if ( v7 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)v7 + 68) & 2) != 0
      && *((_BYTE *)v7 + 65) >= 4u )
    {
      v26 = (_QWORD *)((char *)this + 8);
      if ( *((_QWORD *)this + 4) >= 8ui64 )
        v26 = (_QWORD *)*v26;
      v27 = v11[2];
      if ( *(_WORD *)v27 == 2 )
        v8 = *(_DWORD *)(v27 + 4);
      WPP_SF_DS(*((_QWORD *)v7 + 7), 0x26u, (__int64)&WPP_42dbba61d26d3062f1ad4e084cdc81fe_Traceguids, v8, (__int64)v26);
    }
  }
  else
  {
LABEL_22:
    v17 = *((_QWORD *)a2 + 2);
    if ( !v17 )
      return 1i64;
    v18 = 0;
    if ( !*(_DWORD *)(v17 + 4) )
      return 1i64;
    v19 = (_QWORD *)*((_QWORD *)this + 9);
    v20 = a3;
    while ( 1 )
    {
      v21 = (_QWORD *)*v19;
      v22 = 0;
      if ( (_QWORD *)*v19 != v19 )
      {
        v23 = (unsigned __int64)v18 << 6;
        do
        {
          v24 = v21[2];
          if ( (unsigned int)DnsAddr_IsEqual((_WORD *)v24, (_WORD *)(v23 + v17 + 32), 3) )
          {
            if ( *(_DWORD *)(v24 + 36) == *(_DWORD *)(v23 + v17 + 68) )
              v22 = 1;
          }
          v21 = (_QWORD *)*v21;
        }
        while ( v21 != v19 );
        v20 = a3;
      }
      if ( v22 != v20 )
        break;
      if ( ++v18 >= *(_DWORD *)(v17 + 4) )
        return 1i64;
    }
  }
  return 0i64;
}
