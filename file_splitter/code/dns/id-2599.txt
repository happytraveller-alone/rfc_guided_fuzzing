//----- (00000001401332F0) ----------------------------------------------------
__int64 __fastcall CDnsPolicy_ProtocolCriteriaTree::FindMatchingPolicyForQuery(
        __int64 a1,
        __int64 a2,
        __int64 a3,
        const void ***a4,
        __int64 a5,
        int a6)
{
  char v9; // bl
  unsigned int MatchingPolicyForQuery; // r12d
  unsigned __int16 v11; // ax
  const char *v12; // rcx
  const char *v13; // rdi
  bool v14; // zf
  __int64 v15; // rbp
  __int64 ***v16; // r15
  const void **v17; // rcx
  int v18; // ebp
  __int64 v19; // rax
  const wchar_t *v20; // rdi
  int v21; // eax
  const char *CriteriaTypeString; // rax
  __int64 v23; // r8
  void *v26[5]; // [rsp+70h] [rbp-78h] BYREF

  v9 = 0;
  MatchingPolicyForQuery = 0;
  v14 = (**(unsigned int (__fastcall ***)(__int64))a1)(a1) == 1;
  HIBYTE(v11) = 0;
  if ( v14 )
  {
    LOBYTE(v11) = *(_BYTE *)(a2 + 1413) == 0;
    v12 = "TCP";
    v13 = " UDP";
    v14 = v11 == 0;
  }
  else
  {
    LOBYTE(v11) = *(_WORD *)(a2 + 64) == 2;
    v12 = "IPv4";
    v13 = "IPv6";
    v14 = v11 == 1;
  }
  if ( v14 )
    v13 = v12;
  v15 = v11;
  if ( *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8i64 * v11) )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_sqq(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x39u,
        (__int64)&WPP_bbbcc621566c3408fe84d6a85874d543_Traceguids,
        v13);
    }
    v16 = *(__int64 ****)(*(_QWORD *)(a1 + 8) + 8 * v15);
    MatchingPolicyForQuery = CDnsPolicy_CriteriaNode::FindMatchingPolicyForQuery(v16, a2, a3, a4, a5, a6);
    if ( MatchingPolicyForQuery )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        WPP_SF_qsq(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x3Au,
          (__int64)&WPP_bbbcc621566c3408fe84d6a85874d543_Traceguids,
          v16,
          v13,
          a1);
      }
    }
    else
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
      {
        v17 = *a4;
        if ( *a4 )
          v18 = *((_DWORD *)v17 + 26);
        else
          v18 = -1;
        if ( v17 )
        {
          v19 = CDnsPolicy::Name(v17, (__int64)v26);
          v20 = (const wchar_t *)v19;
          v9 = 1;
          if ( *(_QWORD *)(v19 + 24) >= 8ui64 )
            v20 = *(const wchar_t **)v19;
        }
        else
        {
          v20 = L"NULL";
        }
        v21 = (**(__int64 (__fastcall ***)(__int64))a1)(a1);
        CriteriaTypeString = GetCriteriaTypeString(v21);
        WPP_SF_qsqqSd(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x3Bu, v23, v16, CriteriaTypeString, a2, *a4, v20, v18);
      }
      if ( (v9 & 1) != 0 && v26[3] >= (void *)8 )
        operator delete(v26[0]);
    }
  }
  return MatchingPolicyForQuery;
}
// 140133526: variable 'v23' is possibly undefined
// 140184CA8: using guessed type void __stdcall operator delete(void *);
// 140185140: using guessed type __int64 (__fastcall *_guard_dispatch_icall_fptr)(_QWORD, _QWORD);
