//----- (00000001400A292C) ----------------------------------------------------
__int64 Config_Initialize()
{
  __int64 v0; // rdx
  unsigned int v1; // edi
  int PropertyByIndex; // ebx
  int v4; // eax
  int LastError; // edi
  CDnsClientSubnetRecordsTrie *v6; // rcx
  int inited; // eax
  const char *v8; // rax
  int v9; // [rsp+40h] [rbp-38h] BYREF
  __int64 v10; // [rsp+48h] [rbp-30h]
  __int128 v11; // [rsp+50h] [rbp-28h] BYREF
  char *v12; // [rsp+80h] [rbp+8h] BYREF

  memset_0(&SrvInfo, 0, 0x350ui64);
  dword_1401B9714 = Dns_GetCurrentTimeInSeconds();
  Time = time(0i64) - (unsigned int)dword_1401B9714;
  dword_1401B9740 = Ds_IsDsServer(1);
  v1 = 0;
  g_bRegistryWriteBack = 0;
  if ( ServerPropertyTable )
  {
    while ( 1 )
    {
      PropertyByIndex = loadPropertyByIndex(v1, v0);
      if ( PropertyByIndex )
      {
        if ( !strcmp_0((&ServerPropertyTable)[7 * v1], "LogLevel") )
        {
          v9 = 4;
          v10 = 0i64;
          PropertyByIndex = Config_ResetProperty(0, "LogLevel", (__int64)&v9);
        }
        if ( PropertyByIndex )
          break;
      }
      if ( !(&ServerPropertyTable)[7 * ++v1] )
        goto LABEL_9;
    }
    v11 = DNS_EVENT_INVALID_REGISTRY_VALUE;
    v12 = (&ServerPropertyTable)[7 * v1];
    Eventlog_LogEvent((__int64)&v11, v0, 1u, (unsigned __int16 **)&v12, (unsigned __int8 *)3, PropertyByIndex, 0, 0i64);
LABEL_9:
    if ( PropertyByIndex )
      return 0i64;
  }
  if ( (unsigned int)Dns_InitializeVirtualizationManager() )
    return 13i64;
  if ( lpLibFileName )
  {
    v4 = dword_1401B9934;
    if ( *lpLibFileName )
      v4 = 0;
    dword_1401B9934 = v4;
  }
  g_hServerLevelPolicyLock = (__int64)Lock_Create();
  if ( g_hServerLevelPolicyLock )
  {
    g_hServerLevelNegativePolicyLock = (__int64)Lock_Create();
    if ( g_hServerLevelNegativePolicyLock )
      goto LABEL_26;
    LastError = GetLastError();
    Lock_Destroy(g_hServerLevelPolicyLock);
  }
  else
  {
    LastError = GetLastError();
  }
  if ( LastError )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 1) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      WPP_SF_D(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x17u,
        (__int64)&WPP_44543417c05739f4a9c82c388f6d5836_Traceguids,
        LastError);
    }
    return 0i64;
  }
LABEL_26:
  if ( (unsigned int)InitializePolicyManager() )
  {
    v6 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 1) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x18u, (__int64)&WPP_44543417c05739f4a9c82c388f6d5836_Traceguids);
    }
  }
  if ( dword_1401B991C && (Microsoft_Windows_DNS_Server_ServiceEnableBits & 1) != 0 )
    Template_x((__int64)v6, dword_1401B9920 / 0x3Cu, dword_1401B9920 / 0x3Cu);
  inited = Init_ScopeMap(&gServerScopeMap, &qword_1401C91E8, 1);
  if ( inited )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 1) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      WPP_SF_D(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x19u,
        (__int64)&WPP_44543417c05739f4a9c82c388f6d5836_Traceguids,
        inited);
    }
    return 0i64;
  }
  if ( dword_1401B9728 != 1 )
  {
    Config_ReadForwarders();
    Load_ServerScopeProperties();
  }
  g_bRegistryWriteBack = 1;
  Config_ReadDatabaseDirectory(0i64, 0);
  v8 = (const char *)Reg_GetValueAllocate(0i64, 0i64, (const char *)L"PreviousLocalHostname", -16777215, 0i64);
  qword_1401B9700 = (__int64)v8;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_s(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x1Au, (__int64)&WPP_44543417c05739f4a9c82c388f6d5836_Traceguids, v8);
  }
  return 1i64;
}
// 1400A29A7: variable 'v0' is possibly undefined
// 1400A2B73: variable 'v6' is possibly undefined
// 140186D90: using guessed type __int128 DNS_EVENT_INVALID_REGISTRY_VALUE;
// 140191090: using guessed type wchar_t aPreviouslocalh[22];
// 1401B805C: using guessed type int g_bRegistryWriteBack;
// 1401B9140: using guessed type int Microsoft_Windows_DNS_Server_ServiceEnableBits;
// 1401B91C8: using guessed type __int64 g_hServerLevelNegativePolicyLock;
// 1401B9240: using guessed type __int64 g_hServerLevelPolicyLock;
// 1401B96F0: using guessed type int SrvInfo;
// 1401B9700: using guessed type __int64 qword_1401B9700;
// 1401B9714: using guessed type int dword_1401B9714;
// 1401B9728: using guessed type int dword_1401B9728;
// 1401B9740: using guessed type int dword_1401B9740;
// 1401B991C: using guessed type int dword_1401B991C;
// 1401B9920: using guessed type int dword_1401B9920;
// 1401B9934: using guessed type int dword_1401B9934;
// 1401C91E0: using guessed type __int64 gServerScopeMap;
// 1401C91E8: using guessed type __int64 qword_1401C91E8;
