//----- (0000000140133D10) ----------------------------------------------------
__int64 __fastcall CDnsPolicy_InterfaceCriteriaTree::FindMatchingPolicyForQuery(
        __int64 a1,
        struct in_addr *a2,
        __int64 a3,
        const void ***a4,
        __int64 a5,
        int a6)
{
  int v9; // edi
  unsigned int v10; // esi
  __int64 *v11; // rbx
  const char *v12; // rax
  int v13; // ebx
  CDnsClientSubnetRecordsTrie *v14; // r10
  unsigned int v15; // r13d
  _QWORD *v16; // rax
  bool v17; // zf
  __int64 *v18; // rbx
  const char *v19; // rax
  int v20; // ebx
  __int64 v21; // r8
  _QWORD *v22; // rax
  const char *v23; // rax
  unsigned int MatchingPolicyForQuery; // [rsp+50h] [rbp-59h]
  __int64 *v26; // [rsp+58h] [rbp-51h] BYREF
  __int64 v27; // [rsp+60h] [rbp-49h]
  struct in_addr *v28; // [rsp+68h] [rbp-41h]
  __int64 v29; // [rsp+70h] [rbp-39h]
  void *v30[3]; // [rsp+78h] [rbp-31h] BYREF
  unsigned __int64 v31; // [rsp+90h] [rbp-19h]

  v29 = -2i64;
  v27 = a3;
  v9 = 0;
  LODWORD(v26) = 0;
  v10 = 0;
  v28 = a2 + 32;
  if ( a2[32].S_un.S_un_w.s_w1 == 2 )
  {
    std::_Tree<std::_Tmap_traits<unsigned long,CDnsPolicy_CriteriaNode *,bool (*)(unsigned long const &,unsigned long const &),std::allocator<std::pair<unsigned long const,CDnsPolicy_CriteriaNode *>>,0>>::find(
      *(_QWORD *)(a1 + 8),
      &v26,
      (__int64)&a2[33]);
    v11 = v26;
    if ( v26 != *(__int64 **)(*(_QWORD *)(a1 + 8) + 8i64) )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        v12 = DnsAddr_Ntoa(a2 + 32);
        WPP_SF_sqq(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x41u,
          (__int64)&WPP_bbbcc621566c3408fe84d6a85874d543_Traceguids,
          v12);
      }
      v26 = (__int64 *)v11[4];
      v13 = a6;
      MatchingPolicyForQuery = CDnsPolicy_CriteriaNode::FindMatchingPolicyForQuery(
                                 (__int64 ***)v26,
                                 (__int64)a2,
                                 v27,
                                 a4,
                                 a5,
                                 a6);
      v14 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
      {
        if ( *a4 )
        {
          CDnsPolicy::Name(*a4, (__int64)v30);
          v9 = 1;
          v14 = WPP_GLOBAL_Control;
        }
        WPP_SF_qdqqSd(*((_QWORD *)v14 + 7), 0x42u, *((unsigned __int16 *)v26 + 24));
        v14 = WPP_GLOBAL_Control;
        v13 = a6;
      }
      if ( (v9 & 1) != 0 )
      {
        v9 &= ~1u;
        if ( v31 >= 8 )
        {
          operator delete(v30[0]);
          v14 = WPP_GLOBAL_Control;
        }
      }
      v15 = MatchingPolicyForQuery;
      if ( !MatchingPolicyForQuery )
      {
        if ( v13 == 4 && *a4 )
        {
          if ( v14 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)v14 + 17) & 0x400000) != 0
            && *((_BYTE *)v14 + 65) >= 4u )
          {
            v16 = (_QWORD *)CDnsPolicy::Name(*a4, (__int64)v30);
            v9 |= 2u;
            LODWORD(v26) = v9;
            if ( v16[3] >= 8ui64 )
              v16 = (_QWORD *)*v16;
            WPP_SF_qS(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x43u,
              (__int64)&WPP_bbbcc621566c3408fe84d6a85874d543_Traceguids,
              *a4,
              v16);
          }
          v17 = (v9 & 2) == 0;
LABEL_26:
          if ( !v17 && v31 >= 8 )
            operator delete(v30[0]);
          return MatchingPolicyForQuery;
        }
        return v15;
      }
      goto LABEL_54;
    }
  }
  else if ( a2[32].S_un.S_un_w.s_w1 == 23 )
  {
    std::_Tree<std::_Tmap_traits<IP6_ADDRESS,CDnsPolicy_CriteriaNode *,bool (*)(IP6_ADDRESS const &,IP6_ADDRESS const &),std::allocator<std::pair<IP6_ADDRESS const,CDnsPolicy_CriteriaNode *>>,0>>::find(
      *(_QWORD *)(a1 + 16),
      &v26,
      (__int64)&a2[34]);
    v18 = v26;
    if ( v26 != *(__int64 **)(*(_QWORD *)(a1 + 16) + 8i64) )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        v19 = DnsAddr_Ntoa(a2 + 32);
        WPP_SF_sqq(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x44u,
          (__int64)&WPP_bbbcc621566c3408fe84d6a85874d543_Traceguids,
          v19);
      }
      v26 = (__int64 *)v18[5];
      v20 = a6;
      MatchingPolicyForQuery = CDnsPolicy_CriteriaNode::FindMatchingPolicyForQuery(
                                 (__int64 ***)v26,
                                 (__int64)a2,
                                 v27,
                                 a4,
                                 a5,
                                 a6);
      v14 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
      {
        if ( *a4 )
        {
          CDnsPolicy::Name(*a4, (__int64)v30);
          v9 = 4;
          v14 = WPP_GLOBAL_Control;
        }
        WPP_SF_qdqqSd(*((_QWORD *)v14 + 7), 0x45u, v21);
        v14 = WPP_GLOBAL_Control;
        v20 = a6;
      }
      if ( (v9 & 4) != 0 )
      {
        v9 &= ~4u;
        if ( v31 >= 8 )
        {
          operator delete(v30[0]);
          v14 = WPP_GLOBAL_Control;
        }
      }
      v15 = MatchingPolicyForQuery;
      if ( !MatchingPolicyForQuery )
      {
        if ( v20 == 4 && *a4 )
        {
          if ( v14 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)v14 + 17) & 0x400000) != 0
            && *((_BYTE *)v14 + 65) >= 4u )
          {
            v22 = (_QWORD *)CDnsPolicy::Name(*a4, (__int64)v30);
            v9 |= 8u;
            LODWORD(v26) = v9;
            if ( v22[3] >= 8ui64 )
              v22 = (_QWORD *)*v22;
            WPP_SF_qS(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x46u,
              (__int64)&WPP_bbbcc621566c3408fe84d6a85874d543_Traceguids,
              *a4,
              v22);
          }
          v17 = (v9 & 8) == 0;
          goto LABEL_26;
        }
        return v15;
      }
LABEL_54:
      if ( v14 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)v14 + 17) & 0x400000) != 0
        && *((_BYTE *)v14 + 65) >= 2u )
      {
        v23 = DnsAddr_Ntoa(v28);
        WPP_SF_sqD(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x47u,
          (__int64)&WPP_bbbcc621566c3408fe84d6a85874d543_Traceguids,
          v23);
      }
      return MatchingPolicyForQuery;
    }
  }
  return v10;
}
// 1401340A5: variable 'v21' is possibly undefined
// 140184CA8: using guessed type void __stdcall operator delete(void *);
