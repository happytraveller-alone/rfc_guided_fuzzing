//----- (00000001400E4274) ----------------------------------------------------
void __fastcall DNSSEC_DeleteTrustAnchorsFromRFC5011State(__int64 *a1, __int64 a2)
{
  __int64 *v3; // r14
  char *DottedNameForCountName; // rax
  __int64 v5; // r8
  __int16 v6; // ax
  __int64 v7; // rcx
  __int64 *v8; // rbx
  CDnsClientSubnetRecordsTrie *v9; // rcx
  unsigned __int16 v10; // dx
  struct _RTL_CRITICAL_SECTION *v11; // rdi
  const struct TrustAnchor *v12; // rax
  volatile signed __int32 *v13; // rdi
  struct _RTL_CRITICAL_SECTION *v14; // rcx
  const char *v15; // r9
  __int64 v16; // rcx
  __int64 *v17; // [rsp+20h] [rbp-E0h] BYREF
  __int64 v18; // [rsp+28h] [rbp-D8h] BYREF
  char v19[8]; // [rsp+30h] [rbp-D0h] BYREF
  volatile signed __int32 *v20; // [rsp+38h] [rbp-C8h]
  void *v21[3]; // [rsp+58h] [rbp-A8h] BYREF
  unsigned __int64 v22; // [rsp+70h] [rbp-90h]
  unsigned __int8 v23[272]; // [rsp+80h] [rbp-80h] BYREF

  v3 = a1;
  if ( (unsigned int)Dnssec_NodeToCountName(v23, a1) )
  {
    DottedNameForCountName = Name_GetDottedNameForCountName(v23);
    if ( DottedNameForCountName )
    {
      v22 = 15i64;
      v5 = -1i64;
      v21[2] = 0i64;
      LOBYTE(v21[0]) = 0;
      do
        ++v5;
      while ( DottedNameForCountName[v5] );
      std::string::assign(v21, DottedNameForCountName, (char *)v5);
      if ( !a2 )
        goto LABEL_37;
      v6 = *(_WORD *)(a2 + 12);
      if ( v6 != 48 && v6 != 43 )
        a2 = 0i64;
      if ( !a2 )
        goto LABEL_37;
      EnterCriticalSection(&g_csRFC5011_Trust_Points);
      std::_Tree<std::_Tmap_traits<_CountName,std::unique_ptr<TrustPoint>,CountNameCompare,std::allocator<std::pair<_CountName const,std::unique_ptr<TrustPoint>>>,0>>::find(
        v7,
        (__int64 *)&v17,
        v23);
      v8 = v17;
      if ( v17 == (__int64 *)qword_1401B9288 )
      {
        v9 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x100000) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          v10 = 81;
LABEL_33:
          v15 = (const char *)v21;
          v16 = *((_QWORD *)v9 + 7);
          if ( v22 >= 0x10 )
            v15 = (const char *)v21[0];
          WPP_SF_s(v16, v10, (__int64)&WPP_4831604f5a2431d08120905ab66c1365_Traceguids, v15);
        }
      }
      else
      {
        EnterCriticalSection((LPCRITICAL_SECTION)v17[36]);
        do
        {
          if ( *(_WORD *)(a2 + 12) == 48 || *(_WORD *)(a2 + 12) == 43 )
          {
            v11 = (struct _RTL_CRITICAL_SECTION *)v8[36];
            v12 = (const struct TrustAnchor *)TrustAnchor::TrustAnchor((__int64)v19, a2, 0);
            TrustPoint::DeleteTrustAnchor(v11, v12);
            v13 = v20;
            if ( v20 )
            {
              if ( _InterlockedExchangeAdd(v20 + 2, 0xFFFFFFFF) == 1 )
              {
                (**(void (__fastcall ***)(volatile signed __int32 *))v13)(v13);
                if ( _InterlockedExchangeAdd(v13 + 3, 0xFFFFFFFF) == 1 )
                  (*(void (__fastcall **)(volatile signed __int32 *))(*(_QWORD *)v13 + 8i64))(v13);
              }
            }
            a2 = 0i64;
          }
        }
        while ( a2 );
        v14 = (struct _RTL_CRITICAL_SECTION *)v8[36];
        if ( !v14[1].OwningThread || v14[3].RecursionCount == 4 )
        {
          LeaveCriticalSection(v14);
          if ( (*((_DWORD *)v3 + 21) & 0x88880000) == -2004353024 )
            v3 = (__int64 *)v3[1];
          removeTrustPointFromGlobalList(&v18, v17, v3);
          v9 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x100000) == 0
            || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
          {
            goto LABEL_36;
          }
          v10 = 82;
          goto LABEL_33;
        }
        LeaveCriticalSection(v14);
      }
LABEL_36:
      LeaveCriticalSection(&g_csRFC5011_Trust_Points);
LABEL_37:
      if ( v22 >= 0x10 )
        operator delete(v21[0]);
    }
  }
}
// 1400E4336: variable 'v7' is possibly undefined
// 140184CA8: using guessed type void __stdcall operator delete(void *);
// 140185140: using guessed type __int64 (__fastcall *_guard_dispatch_icall_fptr)(_QWORD, _QWORD);
// 1401B9288: using guessed type __int64 qword_1401B9288;
// 1400E4274: using guessed type char var_190[8];
