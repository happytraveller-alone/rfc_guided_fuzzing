//----- (000000014015997C) ----------------------------------------------------
__int64 __fastcall Dns_ExtractGssTkeyFromMessage(__int64 a1, __int64 a2, __int64 a3, int a4)
{
  unsigned __int16 v5; // bp
  unsigned int v8; // ebx
  void *v9; // rcx
  char **v10; // r14
  __int64 v11; // rax
  __int64 v12; // rdx
  __int64 v13; // rax
  __int64 RecordStructureFromPacket; // rax
  __int64 v15; // rcx
  _WORD *v16; // rax
  __int64 v17; // r8
  _WORD *v18; // rsi
  _WORD *v19; // rcx
  int KeyVersion; // eax
  const char *v21; // r9
  __int64 v22; // r8
  unsigned __int16 v23; // ax
  unsigned int v24; // eax
  __int64 v25; // r8
  unsigned int v26; // r14d
  unsigned int v27; // r9d
  char v28; // cl
  int v30; // [rsp+88h] [rbp+20h] BYREF

  v30 = a4;
  v5 = 0;
  v8 = 13;
  if ( (byte_1401BA001 & 0x20) != 0 )
    WPP_SF_q(84i64, (unsigned __int16)&WPP_9b9f12dbc4273be48aea1d81c92c8dd1_Traceguids, a2);
  v9 = *(void **)(a1 + 64);
  if ( v9 || (v10 = (char **)(a1 + 72), *(_QWORD *)(a1 + 72)) )
  {
    Dns_Free(v9);
    v10 = (char **)(a1 + 72);
    DnsApiFree(*(_QWORD *)(a1 + 72));
    *(_QWORD *)(a1 + 64) = 0i64;
    *(_QWORD *)(a1 + 72) = 0i64;
  }
  *(_QWORD *)(a1 + 40) = a2;
  *(_QWORD *)(a1 + 48) = a3;
  v11 = Dns_SkipToRecord(a2, a3, 1i64);
  if ( !v11 )
    goto LABEL_7;
  *(_QWORD *)(a1 + 80) = v11;
  v13 = Dns_ReadPacketNameAllocate(v10, &v30, 0i64, 0i64, v11, a2, a3);
  if ( !v13 )
  {
    if ( (byte_1401BA001 & 0x20) != 0 )
      WPP_SF_q(85i64, (unsigned __int16)&WPP_9b9f12dbc4273be48aea1d81c92c8dd1_Traceguids, 0i64);
    goto LABEL_7;
  }
  RecordStructureFromPacket = Dns_ReadRecordStructureFromPacket(v13, a3, a1 + 80);
  if ( RecordStructureFromPacket )
  {
    if ( *(_WORD *)(a1 + 112) != 249 )
      goto LABEL_7;
    if ( RecordStructureFromPacket != a3 && !*(_WORD *)(a2 + 10) && (byte_1401BA001 & 0x20) != 0 )
      WPP_SF_Dd(
        87i64,
        (unsigned __int16)&WPP_9b9f12dbc4273be48aea1d81c92c8dd1_Traceguids,
        (unsigned int)(RecordStructureFromPacket - a2),
        a3 - a2);
    v16 = Tkey_RecordRead(0i64, 2i64, 0i64, *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104));
    v18 = v16;
    if ( !v16 )
    {
      if ( (byte_1401BA003 & 0x10) == 0 )
        goto LABEL_7;
      v15 = 88i64;
      goto LABEL_15;
    }
    *(_QWORD *)(a1 + 64) = v16;
    v19 = (_WORD *)*((_QWORD *)v16 + 5);
    if ( *(_QWORD *)v19 == *(_QWORD *)"\bgss-tsig" && v19[4] == *(_WORD *)"g" )
    {
      KeyVersion = Dns_GetKeyVersion(*v10, v12, v17);
      if ( !KeyVersion )
      {
        if ( (byte_1401BA001 & 0x20) != 0 )
          WPP_SF_s(90i64, (unsigned __int16)&WPP_9b9f12dbc4273be48aea1d81c92c8dd1_Traceguids, (__int64)*v10, v21);
        KeyVersion = 7;
      }
    }
    else
    {
      if ( memcmp_0(v19, &unk_1401955C8, 0x13ui64) )
      {
        if ( (byte_1401BA003 & 0x10) != 0 )
          WPP_SF_(89i64, (unsigned __int16)&WPP_9b9f12dbc4273be48aea1d81c92c8dd1_Traceguids, v22);
        v5 = 17;
        goto LABEL_53;
      }
      KeyVersion = 3;
    }
    *(_DWORD *)(a1 + 140) = KeyVersion;
    v23 = v18[36];
    if ( v23 != 3 )
    {
      if ( (byte_1401BA001 & 0x20) != 0 )
        WPP_SF_D(91i64, (unsigned __int16)&WPP_9b9f12dbc4273be48aea1d81c92c8dd1_Traceguids, v23, (int)v21);
      v5 = 17;
      goto LABEL_54;
    }
    v24 = time(0i64);
    v25 = *((unsigned int *)v18 + 16);
    v26 = v24;
    v27 = *((_DWORD *)v18 + 17);
    if ( (unsigned int)v25 > v27 || v27 + 86400 < v24 )
    {
      v28 = byte_1401BA003;
      if ( (byte_1401BA003 & 0x10) != 0 )
      {
        WPP_SF_Ddd(92i64, (unsigned __int16)&WPP_9b9f12dbc4273be48aea1d81c92c8dd1_Traceguids, v25, v27);
        v28 = byte_1401BA003;
      }
      v27 = 86400;
      if ( *((_DWORD *)v18 + 17) + 86400 < v26 )
      {
        ++SecTkeyBadTime;
        v5 = 18;
        goto LABEL_54;
      }
      if ( (v28 & 0x10) != 0 )
        WPP_SF_Dd(
          93i64,
          (unsigned __int16)&WPP_9b9f12dbc4273be48aea1d81c92c8dd1_Traceguids,
          v26 - *((_DWORD *)v18 + 16),
          86400);
      ++SecBigTimeSkewBypass;
    }
    if ( !v18[37] )
    {
      v8 = 0;
      *(_QWORD *)(a1 + 16) = *((_QWORD *)v18 + 6);
      *(_DWORD *)(a1 + 8) = (unsigned __int16)v18[38];
      *(_DWORD *)(a1 + 12) = 2;
      goto LABEL_57;
    }
    if ( (byte_1401BA001 & 0x20) != 0 )
      WPP_SF_D(
        94i64,
        (unsigned __int16)&WPP_9b9f12dbc4273be48aea1d81c92c8dd1_Traceguids,
        (unsigned __int16)v18[37],
        v27);
    v8 = (unsigned __int16)v18[37] + 9000;
LABEL_53:
    if ( !v8 )
      goto LABEL_55;
    goto LABEL_54;
  }
  if ( (byte_1401BA001 & 0x20) != 0 )
  {
    v15 = 86i64;
LABEL_15:
    WPP_SF_q(v15, (unsigned __int16)&WPP_9b9f12dbc4273be48aea1d81c92c8dd1_Traceguids, a2);
  }
LABEL_7:
  v8 = 9001;
LABEL_54:
  ++SecTkeyInvalid;
LABEL_55:
  if ( v5 )
  {
    v8 = v5 + 9000;
    *(_WORD *)(a1 + 138) = v5;
  }
LABEL_57:
  if ( (byte_1401BA001 & 0x20) != 0 )
    WPP_SF_Ddqqd(*(_QWORD *)(a1 + 16), v12, v8, v8);
  return v8;
}
// 140159B32: variable 'v12' is possibly undefined
// 140159B32: variable 'v17' is possibly undefined
// 140159B51: variable 'v21' is possibly undefined
// 140159C62: variable 'v27' is possibly undefined
// 140159CA3: variable 'v22' is possibly undefined
// 140183D60: using guessed type __int64 __fastcall DnsApiFree(_QWORD);
// 140183D88: using guessed type __int64 __fastcall Dns_ReadRecordStructureFromPacket(_QWORD, _QWORD, _QWORD);
// 140183DA8: using guessed type __int64 __fastcall Dns_SkipToRecord(_QWORD, _QWORD, _QWORD);
// 140183DC8: using guessed type __int64 __fastcall Dns_ReadPacketNameAllocate(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
// 1401B9DF4: using guessed type int SecBigTimeSkewBypass;
// 1401B9E14: using guessed type int SecTkeyBadTime;
// 1401B9E18: using guessed type int SecTkeyInvalid;
// 1401BA001: using guessed type char byte_1401BA001;
// 1401BA003: using guessed type char byte_1401BA003;
