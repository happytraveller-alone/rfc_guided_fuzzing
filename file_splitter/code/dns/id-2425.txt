//----- (00000001401272B8) ----------------------------------------------------
_BYTE *__fastcall DnsSign::CreateNsec3Record(__int64 a1, __int64 a2, __int64 a3, u_long a4)
{
  unsigned int v8; // ebx
  _QWORD *v9; // rax
  _QWORD *v10; // r14
  unsigned __int16 v11; // bx
  __int64 v12; // rax
  int v13; // ebx
  size_t v14; // rsi
  unsigned __int16 v15; // ax
  _BYTE *v16; // rax
  _BYTE *v17; // rdi
  int v18; // ebx
  unsigned __int16 v20; // [rsp+30h] [rbp-99h] BYREF
  size_t Size; // [rsp+38h] [rbp-91h] BYREF
  char pExceptionObject[24]; // [rsp+40h] [rbp-89h] BYREF
  __int64 v23; // [rsp+58h] [rbp-71h]
  LPVOID v24; // [rsp+60h] [rbp-69h]
  char v25[56]; // [rsp+68h] [rbp-61h] BYREF
  char v26[56]; // [rsp+A0h] [rbp-29h] BYREF

  v23 = -2i64;
  v8 = *(unsigned __int8 *)(a2 + 2);
  LODWORD(Size) = v8;
  v9 = Mem_Alloc(v8, 0i64, "ds\\dns\\server\\dnssign\\utils.cpp", 739);
  v10 = v9;
  if ( !v9 )
  {
    std::bad_alloc::bad_alloc((std::bad_alloc *)pExceptionObject);
    CxxThrowException_0(pExceptionObject, (_ThrowInfo *)&TI2_AVbad_alloc_std__);
  }
  v24 = v9;
  if ( !(unsigned int)Dns_Base32HexToBinary(a2 + 3, v8, (__int64)v9, &Size) )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 7) & 0x100000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 25) >= 4u )
    {
      WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x13u, (__int64)&WPP_4fe44c5dae9434a57cc4518b160fb14c_Traceguids);
    }
    DnsSign::CRunTimeException::CRunTimeException((DnsSign::CRunTimeException *)v25, 37);
    DnsSign::CException::AppendErrorMessageByID((DnsSign::CException *)v25, 0xD6DEAu);
    DnsSign::CRunTimeException::CRunTimeException(
      (DnsSign::CRunTimeException *)v26,
      (const struct DnsSign::CRunTimeException *)v25);
    CxxThrowException_0(v26, (_ThrowInfo *)&TI2_AVCRunTimeException_DnsSign__);
  }
  v11 = 0;
  v20 = 0;
  v12 = (__int64)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 1;
  if ( v12 )
  {
    v13 = Dns_GenerateNsecTypeBitMaps(*(unsigned __int16 **)a3, v12, 0i64, 0, &v20);
    if ( v13 != 234 )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 7) & 0x100000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 25) >= 4u )
      {
        WPP_SF_D(
          *((_QWORD *)WPP_GLOBAL_Control + 2),
          0x14u,
          (__int64)&WPP_4fe44c5dae9434a57cc4518b160fb14c_Traceguids,
          v13);
      }
      DnsSign::CRunTimeException::CRunTimeException((DnsSign::CRunTimeException *)v25, v13);
      DnsSign::CException::AppendErrorMessageByID((DnsSign::CException *)v25, 0xD6DEAu);
      DnsSign::CRunTimeException::CRunTimeException(
        (DnsSign::CRunTimeException *)v26,
        (const struct DnsSign::CRunTimeException *)v25);
      CxxThrowException_0(v26, (_ThrowInfo *)&TI2_AVCRunTimeException_DnsSign__);
    }
    v11 = v20;
  }
  v14 = (unsigned int)Size;
  if ( (unsigned int)Size > 0xFFFF
    || (v15 = *(unsigned __int8 *)(a1 + 7) + 6, (unsigned __int16)(v15 + v11 + Size) < v15) )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 7) & 0x100000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 25) >= 4u )
    {
      WPP_SF_Dd(
        *((_QWORD *)WPP_GLOBAL_Control + 2),
        0x15u,
        (__int64)&WPP_4fe44c5dae9434a57cc4518b160fb14c_Traceguids,
        Size);
    }
    DnsSign::CRunTimeException::CRunTimeException((DnsSign::CRunTimeException *)v25, 13);
    DnsSign::CException::AppendErrorMessageByID((DnsSign::CException *)v25, 0xD6DB7u);
    DnsSign::CRunTimeException::CRunTimeException(
      (DnsSign::CRunTimeException *)v26,
      (const struct DnsSign::CRunTimeException *)v25);
    CxxThrowException_0(v26, (_ThrowInfo *)&TI2_AVCRunTimeException_DnsSign__);
  }
  v16 = RR_AllocateEx(v15 + v11 + (unsigned __int16)Size, 0, 0);
  v17 = v16;
  if ( !v16 )
  {
    std::bad_alloc::bad_alloc((std::bad_alloc *)pExceptionObject);
    CxxThrowException_0(pExceptionObject, (_ThrowInfo *)&TI2_AVbad_alloc_std__);
  }
  Size = (size_t)v16;
  v16[56] = *(_BYTE *)(a1 + 2);
  v16[57] = *(_BYTE *)(a1 + 3);
  *((_WORD *)v16 + 29) = htons(*(_WORD *)(a1 + 4));
  v17[60] = *(_BYTE *)(a1 + 7);
  v17[61] = v14;
  memcpy_0(v17 + 62, *(const void **)(a1 + 8), *(unsigned __int8 *)(a1 + 7));
  memcpy_0(&v17[*(unsigned __int8 *)(a1 + 7) + 62], v10, v14);
  if ( v11 )
  {
    v18 = Dns_GenerateNsecTypeBitMaps(
            *(unsigned __int16 **)a3,
            (__int64)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 1,
            &v17[v14 + 62 + *(unsigned __int8 *)(a1 + 7)],
            v11,
            &v20);
    if ( v18 )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 7) & 0x100000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 25) >= 4u )
      {
        WPP_SF_D(
          *((_QWORD *)WPP_GLOBAL_Control + 2),
          0x16u,
          (__int64)&WPP_4fe44c5dae9434a57cc4518b160fb14c_Traceguids,
          v18);
      }
      DnsSign::CRunTimeException::CRunTimeException((DnsSign::CRunTimeException *)v25, v18);
      DnsSign::CException::AppendErrorMessageByID((DnsSign::CException *)v25, 0xD6DEAu);
      DnsSign::CRunTimeException::CRunTimeException(
        (DnsSign::CRunTimeException *)v26,
        (const struct DnsSign::CRunTimeException *)v25);
      CxxThrowException_0(v26, (_ThrowInfo *)&TI2_AVCRunTimeException_DnsSign__);
    }
  }
  *((_WORD *)v17 + 6) = 50;
  *((_DWORD *)v17 + 5) = htonl(a4);
  Mem_Free(0i64, 0i64, 0i64, (__int64)"ds\\dns\\server\\dnssign\\zone.cpp", 239);
  Mem_Free(v10, 0i64, 0i64, (__int64)"ds\\dns\\server\\dnssign\\zone.cpp", 239);
  return v17;
}
