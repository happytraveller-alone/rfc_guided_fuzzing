//----- (0000000140140744) ----------------------------------------------------
__int64 *__fastcall std::_Tree<std::_Tmap_traits<std::wstring,CDnsPolicy *,CDnsCompareName,std::allocator<std::pair<std::wstring const,CDnsPolicy *>>,0>>::erase(
        __int64 a1,
        __int64 *a2,
        __int64 a3,
        __int64 a4)
{
  _QWORD *v4; // rax
  __int64 *v7; // rax
  __int64 i; // rcx
  __int64 j; // rdx
  __int64 v11; // [rsp+30h] [rbp+8h] BYREF
  __int64 v12; // [rsp+40h] [rbp+18h]
  __int64 v13; // [rsp+48h] [rbp+20h]

  v13 = a4;
  v12 = a3;
  v4 = *(_QWORD **)(a1 + 8);
  if ( a3 == *v4 && (_QWORD *)a4 == v4 )
  {
    std::_Tree<std::_Tmap_traits<std::wstring,CDnsPolicy *,CDnsCompareName,std::allocator<std::pair<std::wstring const,CDnsPolicy *>>,0>>::clear(a1);
    *a2 = **(_QWORD **)(a1 + 8);
  }
  else
  {
    if ( a3 != a4 )
    {
      do
      {
        v7 = (__int64 *)a3;
        if ( !*(_BYTE *)(a3 + 73) )
        {
          i = *(_QWORD *)(a3 + 16);
          if ( *(_BYTE *)(i + 73) )
          {
            for ( i = *(_QWORD *)(a3 + 8); !*(_BYTE *)(i + 73) && a3 == *(_QWORD *)(i + 16); i = *(_QWORD *)(i + 8) )
            {
              a3 = i;
              v12 = i;
            }
          }
          else
          {
            for ( j = *(_QWORD *)i; !*(_BYTE *)(j + 73); j = *(_QWORD *)j )
              i = j;
          }
          v12 = i;
        }
        std::_Tree<std::_Tmap_traits<std::wstring,CDnsPolicy *,CDnsCompareName,std::allocator<std::pair<std::wstring const,CDnsPolicy *>>,0>>::erase(
          a1,
          &v11,
          v7);
        a3 = v12;
      }
      while ( v12 != v13 );
    }
    *a2 = a3;
  }
  return a2;
}
