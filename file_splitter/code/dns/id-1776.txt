//----- (00000001400DFA1C) ----------------------------------------------------
TrustPoint *__fastcall TrustPoint::TrustPoint(
        TrustPoint *this,
        const void **a2,
        unsigned __int8 *a3,
        const struct TrustAnchor *a4)
{
  const char *v8; // r14
  unsigned __int64 v9; // rbp
  WCHAR *v10; // r8
  __int64 v11; // rcx
  __int64 v12; // rax
  __int64 v13; // r8
  size_t Size[4]; // [rsp+40h] [rbp-278h] BYREF
  _WORD Src[256]; // [rsp+60h] [rbp-258h] BYREF

  Size[1] = -2i64;
  Size[2] = (size_t)this;
  stdext::hash_multimap<unsigned short,TrustAnchor,stdext::hash_compare<unsigned short,std::less<unsigned short>>,std::allocator<std::pair<unsigned short const,TrustAnchor>>>::hash_multimap<unsigned short,TrustAnchor,stdext::hash_compare<unsigned short,std::less<unsigned short>>,std::allocator<std::pair<unsigned short const,TrustAnchor>>>((__int64)this + 40);
  v8 = (char *)this + 136;
  *((_QWORD *)this + 20) = 15i64;
  *((_QWORD *)this + 19) = 0i64;
  *((_BYTE *)this + 136) = 0;
  *((_QWORD *)this + 58) = 7i64;
  *((_QWORD *)this + 57) = 0i64;
  *((_WORD *)this + 220) = 0;
  LODWORD(Size[0]) = 512;
  DnsInitializeCriticalSection((LPCRITICAL_SECTION)this);
  *((_DWORD *)this + 33) = 0;
  v9 = -1i64;
  std::string::assign((const void **)this + 17, a2, 0i64, (char *)0xFFFFFFFFFFFFFFFFi64);
  Name_CopyCountName((char *)this + 176, a3);
  memset_0(Src, 0, LODWORD(Size[0]));
  if ( *((_QWORD *)this + 20) < 0x10ui64 )
    v10 = (WCHAR *)((char *)this + 136);
  else
    v10 = *(WCHAR **)v8;
  if ( (unsigned int)Dns_StringCopy(Src, (unsigned int *)Size, v10, 0, 2, 1) )
  {
    do
      ++v9;
    while ( Src[v9] );
    std::wstring::assign((char *)this + 440, (char *)Src, v9);
  }
  *((_DWORD *)this + 32) = 0;
  *((_QWORD *)this + 60) = 0i64;
  *((_QWORD *)this + 61) = 0i64;
  *((_QWORD *)this + 63) = 0i64;
  *((_QWORD *)this + 62) = 0i64;
  *((_DWORD *)this + 128) = 0;
  *((_QWORD *)this + 65) = 0i64;
  *((_BYTE *)this + 536) = 0;
  TrustPoint::AddTrustAnchor(this, a4, 0, 0);
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x100000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    if ( *(_QWORD *)a4 )
      v11 = *(unsigned __int16 *)(*(_QWORD *)a4 + 12i64);
    else
      v11 = 0i64;
    if ( *((_QWORD *)this + 20) >= 0x10ui64 )
      v8 = *(const char **)v8;
    v12 = DnsRecordStringForWritableType(v11);
    WPP_SF_sqsD(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x16u, v13, v8, (char)this, v12);
  }
  *((_QWORD *)this + 66) = 0i64;
  return this;
}
// 1400DFBEB: variable 'v13' is possibly undefined
// 140183D30: using guessed type __int64 __fastcall DnsRecordStringForWritableType(_QWORD);
