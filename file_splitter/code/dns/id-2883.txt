//----- (000000014014FBB0) ----------------------------------------------------
__int64 __fastcall CDnsRRLThreadLocks::CreateLocks(CDnsRRLThreadLocks *this)
{
  struct CDnsRRLThreadLocks *v1; // r14
  unsigned int v2; // ebx
  void *v3; // rax
  __int64 v4; // rbp
  _QWORD *v5; // rax
  _QWORD *v6; // rdx
  __int64 v7; // r15
  _QWORD *v8; // rax
  int LastError; // eax
  CDnsClientSubnetRecordsTrie *v10; // rcx
  unsigned __int16 v11; // dx

  v1 = g_DnsRRLThreadLock;
  v2 = 0;
  v3 = operator new[](8i64 * *(unsigned int *)g_DnsRRLThreadLock, (const struct std::nothrow_t *)&std::nothrow);
  *((_QWORD *)v1 + 1) = v3;
  if ( !v3 )
  {
    v2 = 14;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x25u, (__int64)&WPP_9d24e83261bb323d145bf67b982c6afc_Traceguids);
    }
    return v2;
  }
  v4 = 0i64;
  if ( !*(_DWORD *)v1 )
    return v2;
  while ( 1 )
  {
    v5 = operator new(0x10ui64, (const struct std::nothrow_t *)&std::nothrow);
    v6 = v5;
    if ( v5 )
    {
      *(_DWORD *)v5 = 0;
      v5[1] = 0i64;
    }
    else
    {
      v6 = 0i64;
    }
    *(_QWORD *)(*((_QWORD *)v1 + 1) + 8 * v4) = v6;
    v7 = *(_QWORD *)(*((_QWORD *)v1 + 1) + 8 * v4);
    if ( !v7 )
      break;
    v2 = 0;
    v8 = Lock_Create();
    *(_QWORD *)(v7 + 8) = v8;
    if ( v8 )
      goto LABEL_16;
    LastError = GetLastError();
    v2 = LastError;
    v10 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      WPP_SF_D(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x24u,
        (__int64)&WPP_9d24e83261bb323d145bf67b982c6afc_Traceguids,
        LastError);
LABEL_16:
      v10 = WPP_GLOBAL_Control;
    }
    if ( v2 == -1 )
    {
      if ( v10 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)v10 + 17) & 0x800000) != 0
        && *((_BYTE *)v10 + 65) >= 2u )
      {
        v11 = 39;
LABEL_28:
        WPP_SF_D(*((_QWORD *)v10 + 7), v11, (__int64)&WPP_9d24e83261bb323d145bf67b982c6afc_Traceguids, v4);
        return v2;
      }
      return v2;
    }
    v4 = (unsigned int)(v4 + 1);
    if ( (unsigned int)v4 >= *(_DWORD *)v1 )
      return v2;
  }
  v2 = 14;
  v10 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
  {
    v11 = 38;
    goto LABEL_28;
  }
  return v2;
}
// 1401B9258: using guessed type struct CDnsRRLThreadLocks *g_DnsRRLThreadLock;
