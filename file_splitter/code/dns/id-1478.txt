//----- (00000001400B86D4) ----------------------------------------------------
__int64 __fastcall checkUpdatePolicy(__int64 a1, __int64 **a2)
{
  unsigned int v4; // ebx
  CDnsClientSubnetRecordsTrie *v5; // r10
  unsigned int v6; // esi
  __int64 *i; // rdx
  _BYTE *v8; // r11
  __int16 v9; // cx
  int v10; // r9d
  __int64 v11; // rax
  __int64 v12; // r8

  v4 = 1;
  v5 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x80000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_qs(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x50u,
      (__int64)&WPP_40fcce62f6f439b0ec75be29cae6130a_Traceguids,
      a2,
      *(_QWORD *)(a1 + 16));
    v5 = WPP_GLOBAL_Control;
  }
  v6 = dword_1401B9840;
  if ( (*(_BYTE *)(a1 + 392) & 3) == 2 )
    v6 = (unsigned int)dword_1401B9840 >> 8;
  if ( v6 )
  {
    for ( i = *a2; i; i = (__int64 *)*i )
    {
      v8 = (_BYTE *)i[1];
      if ( v8[101] == 1 && v8[102] == 42 )
        return 0;
      v9 = *((_WORD *)i + 20);
      if ( v9 != -3342 )
      {
        if ( v8 == *(_BYTE **)(a1 + 40) )
          v10 = 3;
        else
          v10 = 4 * (v8[92] & 2 | 1);
        v11 = i[2];
        if ( v11 || (v11 = i[3]) != 0 )
          v9 = *(_WORD *)(v11 + 12);
        switch ( v9 )
        {
          case 1:
          case 28:
            v12 = 8i64;
            break;
          case 2:
            v12 = 6i64;
            break;
          case 6:
            v12 = 1i64;
            break;
          case 255:
            v12 = 0xFFFFFFFFi64;
            if ( v10 == 4 && (v8[92] & 0x10) == 0 )
              continue;
            break;
          default:
            continue;
        }
        if ( (v10 & (unsigned int)v12 & v6) != 0 )
        {
          if ( v5 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)v5 + 17) & 0x80000) != 0
            && *((_BYTE *)v5 + 65) >= 4u )
          {
            WPP_SF_sdDsDdD(
              *((_QWORD *)v5 + 7),
              *(_BYTE *)(a1 + 392) & 3,
              v12,
              *(const char **)(a1 + 16),
              *(_BYTE *)(a1 + 392) & 3,
              v6,
              (__int64)(v8 + 102));
          }
          return 0;
        }
      }
    }
  }
  return v4;
}
// 1401B9840: using guessed type int dword_1401B9840;
