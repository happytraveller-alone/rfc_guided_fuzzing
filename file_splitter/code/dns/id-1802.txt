//----- (00000001400E44F0) ----------------------------------------------------
void __fastcall DNSSEC_StartActiveRefresh(PTP_CALLBACK_INSTANCE Instance, char *Context, PTP_TIMER Timer)
{
  char v3; // di
  unsigned __int32 v5; // ebp
  DWORD v6; // ecx
  unsigned int v7; // eax
  __int64 TrustPointName; // rax
  const char *v9; // r9
  void *v10[5]; // [rsp+38h] [rbp-50h] BYREF

  v3 = 0;
  v5 = _InterlockedIncrement((volatile signed __int32 *)&g_ConcurrentActiveRefreshes);
  v6 = 32;
  if ( g_ProcessorCount < 0x20 )
    v6 = g_ProcessorCount;
  v7 = 5 * v6;
  if ( dword_1401B99F4 )
    v7 = 750;
  if ( v5 <= v7 || dword_1401B99F4 )
  {
    TrustPoint::StartActiveRefresh(Context);
  }
  else
  {
    _InterlockedDecrement((volatile signed __int32 *)&g_ConcurrentActiveRefreshes);
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x100000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      v3 = 1;
      TrustPointName = TrustPoint::GetTrustPointName((__int64)Context, (__int64)v10);
      v9 = (const char *)TrustPointName;
      if ( *(_QWORD *)(TrustPointName + 24) >= 0x10ui64 )
        v9 = *(const char **)TrustPointName;
      WPP_SF_sdD(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x53u,
        (__int64)&WPP_4831604f5a2431d08120905ab66c1365_Traceguids,
        v9);
    }
    if ( (v3 & 1) != 0 && v10[3] >= (void *)0x10 )
      operator delete(v10[0]);
    TrustPoint::ScheduleActiveRefresh((unsigned int *)Context, 1, 1);
  }
}
// 140184CA8: using guessed type void __stdcall operator delete(void *);
// 1401B9148: using guessed type volatile unsigned int g_ConcurrentActiveRefreshes;
// 1401B99F4: using guessed type int dword_1401B99F4;
