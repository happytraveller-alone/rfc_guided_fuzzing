//----- (0000000140146F80) ----------------------------------------------------
__int64 __fastcall CDnsPolicy::GetPolicy(CDnsPolicy *this, struct _DnssrvRpcPolicy **a2)
{
  __int64 v2; // rbx
  CDnsPolicy *v3; // rdi
  struct _DnssrvRpcPolicyAction *v4; // rbp
  unsigned int PolicyContent; // esi
  _DWORD *zero; // r14
  __int64 v8; // rcx
  _WORD *v9; // rax
  CDnsClientSubnetRecordsTrie *v10; // rcx
  unsigned __int16 v11; // dx
  char *v12; // rcx
  void *v13; // rax
  _QWORD *v14; // rax
  unsigned int v15; // r13d
  _QWORD *v16; // rbx
  _QWORD *v17; // r15
  __int64 v18; // rax
  CDnsPolicyContent *v19; // rcx
  struct _DnssrvRpcPolicyAction *v21; // [rsp+50h] [rbp+8h] BYREF

  v2 = *((unsigned int *)this + 30);
  v3 = this;
  v4 = 0i64;
  PolicyContent = 0;
  v21 = 0i64;
  zero = MIDL_user_allocate_zero(8 * v2 + 72);
  if ( *((_QWORD *)v3 + 3) < 8ui64 )
    v8 = (__int64)v3;
  else
    v8 = *(_QWORD *)v3;
  v9 = MIDL_user_copy_stringW(v8);
  *(_QWORD *)zero = v9;
  if ( v9 )
  {
    v12 = (char *)v3 + 40;
    zero[5] = *((_DWORD *)v3 + 20);
    zero[2] = *((_DWORD *)v3 + 21);
    zero[3] = *((_DWORD *)v3 + 22);
    zero[4] = *((_DWORD *)v3 + 23);
    zero[6] = *((_DWORD *)v3 + 24);
    zero[7] = *((_DWORD *)v3 + 26);
    zero[14] = v2;
    if ( *((_QWORD *)v3 + 8) >= 0x10ui64 )
      v12 = *(char **)v12;
    v13 = Dns_StringCopyAllocate(v12, 0, 2i64, 2);
    *((_QWORD *)zero + 4) = v13;
    if ( v13 )
    {
      v14 = (_QWORD *)*((_QWORD *)v3 + 14);
      v15 = 0;
      v16 = (_QWORD *)*v14;
      if ( (_QWORD *)*v14 == v14 )
      {
LABEL_24:
        v19 = (CDnsPolicyContent *)*((_QWORD *)v3 + 17);
        if ( v19 )
        {
          PolicyContent = CDnsPolicyContent::GetPolicyContent(v19, &v21);
          if ( PolicyContent )
            goto LABEL_26;
          v4 = v21;
        }
        *((_QWORD *)zero + 5) = v4;
        *a2 = (struct _DnssrvRpcPolicy *)zero;
        return PolicyContent;
      }
      while ( 1 )
      {
        v17 = MIDL_user_allocate_zero(0x10ui64);
        if ( !v17 )
          break;
        *(_DWORD *)v17 = (*(__int64 (__fastcall **)(_QWORD))(*(_QWORD *)v16[2] + 40i64))(v16[2]);
        v17[1] = (*(__int64 (__fastcall **)(_QWORD))(*(_QWORD *)v16[2] + 48i64))(v16[2]);
        v18 = v15++;
        *(_QWORD *)&zero[2 * v18 + 16] = v17;
        v16 = (_QWORD *)*v16;
        if ( v16 == *((_QWORD **)v3 + 14) )
          goto LABEL_24;
      }
      PolicyContent = 14;
      v10 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
      {
        goto LABEL_26;
      }
      if ( *((_QWORD *)v3 + 3) >= 8ui64 )
        v3 = *(CDnsPolicy **)v3;
      v11 = 90;
    }
    else
    {
      PolicyContent = 14;
      v10 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
      {
        goto LABEL_26;
      }
      if ( *((_QWORD *)v3 + 3) >= 8ui64 )
        v3 = *(CDnsPolicy **)v3;
      v11 = 89;
    }
  }
  else
  {
    PolicyContent = 14;
    v10 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
    {
      goto LABEL_26;
    }
    if ( *((_QWORD *)v3 + 3) >= 8ui64 )
      v3 = *(CDnsPolicy **)v3;
    v11 = 88;
  }
  WPP_SF_S(
    *((_QWORD *)v10 + 7),
    v11,
    (__int64)&WPP_42dbba61d26d3062f1ad4e084cdc81fe_Traceguids,
    (const unsigned __int16 *)v3);
LABEL_26:
  Free_RpcPolicy(zero);
  return PolicyContent;
}
// 140185140: using guessed type __int64 (__fastcall *_guard_dispatch_icall_fptr)(_QWORD, _QWORD);
