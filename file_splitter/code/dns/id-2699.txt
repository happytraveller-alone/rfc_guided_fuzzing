//----- (0000000140140C4C) ----------------------------------------------------
__int64 __fastcall std::_Tree<std::_Tmap_traits<std::wstring,CDNSClientSubnetRecord *,CDnsCompareName,std::allocator<std::pair<std::wstring const,CDNSClientSubnetRecord *>>,0>>::_Linsert(
        __int64 a1,
        __int64 a2,
        const void **a3)
{
  const void **v5; // r14
  _QWORD *v6; // rax
  __int64 v7; // rbx
  __int64 v8; // rsi
  bool v9; // r12
  __int64 v10; // rcx
  __int64 v11; // rbx
  char v12; // r8
  __int64 v13; // rax
  __int64 i; // rax
  __int64 v15; // rcx
  const void *v17[2]; // [rsp+40h] [rbp-31h] BYREF
  __int64 v18; // [rsp+50h] [rbp-21h]
  __int64 v19; // [rsp+58h] [rbp-19h]
  const void *v20[2]; // [rsp+68h] [rbp-9h] BYREF
  __int64 v21; // [rsp+78h] [rbp+7h]
  __int64 v22; // [rsp+80h] [rbp+Fh]
  const void **v23; // [rsp+D8h] [rbp+67h] BYREF

  v23 = (const void **)a1;
  v5 = a3 + 3;
  v6 = (_QWORD *)qword_1401B93E8;
  v7 = *(_QWORD *)(qword_1401B93E8 + 8);
  v8 = qword_1401B93E8;
  v9 = 1;
  if ( !*(_BYTE *)(v7 + 73) )
  {
    do
    {
      v8 = v7;
      v23 = v17;
      v19 = 7i64;
      v18 = 0i64;
      LOWORD(v17[0]) = 0;
      std::wstring::assign(v17, (const void **)(v7 + 24), 0i64, 0xFFFFFFFFFFFFFFFFui64);
      v22 = 7i64;
      v21 = 0i64;
      LOWORD(v20[0]) = 0;
      std::wstring::assign(v20, v5, 0i64, 0xFFFFFFFFFFFFFFFFui64);
      v9 = CDnsCompareName::operator()(v10, (__int64)v20, (__int64)v17);
      if ( v9 )
        v7 = *(_QWORD *)v7;
      else
        v7 = *(_QWORD *)(v7 + 16);
    }
    while ( !*(_BYTE *)(v7 + 73) );
    v6 = (_QWORD *)qword_1401B93E8;
  }
  v11 = v8;
  if ( v9 )
  {
    if ( v8 == *v6 )
    {
      v12 = 1;
LABEL_10:
      *(_QWORD *)a2 = *std::_Tree<std::_Tmap_traits<std::wstring,CDNSClientSubnetRecord *,CDnsCompareName,std::allocator<std::pair<std::wstring const,CDNSClientSubnetRecord *>>,0>>::_Insert(
                         a1,
                         &v23,
                         v12,
                         (_QWORD *)v8,
                         a3);
      *(_BYTE *)(a2 + 8) = 1;
      return a2;
    }
    if ( *(_BYTE *)(v8 + 73) )
    {
      v11 = *(_QWORD *)(v8 + 16);
    }
    else
    {
      v13 = *(_QWORD *)v8;
      if ( *(_BYTE *)(*(_QWORD *)v8 + 73i64) )
      {
        for ( i = *(_QWORD *)(v8 + 8); !*(_BYTE *)(i + 73) && v11 == *(_QWORD *)i; i = *(_QWORD *)(i + 8) )
          v11 = i;
        if ( !*(_BYTE *)(v11 + 73) )
          v11 = i;
      }
      else
      {
        do
        {
          v11 = v13;
          v13 = *(_QWORD *)(v13 + 16);
        }
        while ( !*(_BYTE *)(v13 + 73) );
      }
    }
  }
  v23 = v20;
  v22 = 7i64;
  v21 = 0i64;
  LOWORD(v20[0]) = 0;
  std::wstring::assign(v20, v5, 0i64, 0xFFFFFFFFFFFFFFFFui64);
  v19 = 7i64;
  v18 = 0i64;
  LOWORD(v17[0]) = 0;
  std::wstring::assign(v17, (const void **)(v11 + 24), 0i64, 0xFFFFFFFFFFFFFFFFui64);
  if ( CDnsCompareName::operator()(v15, (__int64)v17, (__int64)v20) )
  {
    v12 = v9;
    goto LABEL_10;
  }
  if ( (unsigned __int64)v5[3] >= 8 )
    operator delete((void *)*v5);
  v5[3] = (const void *)7;
  v5[2] = 0i64;
  *(_WORD *)v5 = 0;
  operator delete(a3);
  *(_QWORD *)a2 = v11;
  *(_BYTE *)(a2 + 8) = 0;
  return a2;
}
// 140140CFB: variable 'v10' is possibly undefined
// 140140D39: variable 'a1' is possibly undefined
// 140140DEC: variable 'v15' is possibly undefined
// 140184CA8: using guessed type void __stdcall operator delete(void *);
// 1401B93E8: using guessed type __int64 qword_1401B93E8;
