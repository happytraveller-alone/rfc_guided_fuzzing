//----- (0000000140069380) ----------------------------------------------------
DWORD __fastcall calculateZoneNextRollActivityTime(__int64 a1)
{
  int v1; // eax
  __int64 v3; // r13
  unsigned int v4; // r15d
  int v5; // r12d
  __int64 v6; // r14
  FILETIME *v7; // rbx
  unsigned int v8; // ebx
  char *v9; // rax
  bool v10; // zf
  __int128 *v11; // rax
  unsigned int v12; // r13d
  unsigned int v13; // ecx
  unsigned int v14; // r8d
  unsigned int v15; // ebx
  unsigned int v16; // edx
  unsigned int v17; // ebx
  unsigned __int16 *v18; // rbx
  _QWORD *v19; // rdi
  __int64 v20; // r9
  __int64 v21; // rdx
  __int64 v22; // rcx
  u_long v23; // ebx
  unsigned int v24; // edi
  int v25; // ecx
  __int64 v26; // rax
  LONG v27; // eax
  FILETIME v28; // rcx
  u_long v29; // ebx
  int MaxTtlAmongAllZoneScopes; // eax
  FILETIME v31; // rax
  __int64 v32; // rcx
  char *v33; // rax
  unsigned __int16 v34; // dx
  FILETIME FileTime2; // [rsp+48h] [rbp-39h] BYREF
  __int64 v37; // [rsp+50h] [rbp-31h]
  FILETIME FileTime1; // [rsp+58h] [rbp-29h] BYREF
  FILETIME v39; // [rsp+60h] [rbp-21h] BYREF
  FILETIME v40[2]; // [rsp+68h] [rbp-19h] BYREF
  __int16 v41; // [rsp+78h] [rbp-9h] BYREF
  char v42; // [rsp+7Ah] [rbp-7h]
  FILETIME v43; // [rsp+80h] [rbp-1h] BYREF
  __int128 v44; // [rsp+88h] [rbp+7h] BYREF
  unsigned __int16 *v45[3]; // [rsp+98h] [rbp+17h] BYREF

  v1 = *(_DWORD *)(a1 + 1040);
  v39.dwLowDateTime = -1;
  v39.dwHighDateTime = -1;
  FileTime1.dwLowDateTime = -1;
  v3 = 0i64;
  FileTime1.dwHighDateTime = -1;
  v4 = -1;
  v43 = 0i64;
  v5 = 0;
  v37 = 0i64;
  if ( (v1 & 0x20000) != 0 )
  {
    *(_QWORD *)(a1 + 1128) = 0i64;
    *(_DWORD *)(a1 + 1040) = v1 & 0xFFFDFFFF;
  }
  v6 = *(_QWORD *)(a1 + 1136);
  if ( v6 )
  {
    while ( 1 )
    {
      if ( (unsigned int)(*(_DWORD *)(v6 + 96) - 2) > 6 )
      {
        FileTime2 = 0i64;
        v7 = (FILETIME *)(v6 + 84);
        if ( CompareFileTime((const FILETIME *)(v6 + 84), &FileTime2) && *(_DWORD *)(v6 + 96) != 9 )
        {
          if ( !*(_QWORD *)(a1 + 1128) )
          {
            if ( *(_DWORD *)(v6 + 36) )
            {
              if ( CompareFileTime((const FILETIME *)(v6 + 84), &v39) < 0 )
              {
                v39 = *v7;
                v43 = (FILETIME)v6;
                goto LABEL_16;
              }
              if ( *(_DWORD *)(v6 + 36) )
                goto LABEL_16;
            }
            if ( CompareFileTime((const FILETIME *)(v6 + 84), &FileTime1) < 0 )
            {
              FileTime1 = *v7;
              v37 = v6;
            }
          }
LABEL_16:
          v8 = OffsetFromCurrentTime((FILETIME *)(v6 + 84));
          if ( !v8 && *(_DWORD *)(v6 + 96) != 1 )
          {
            if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
              && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
            {
              v9 = Dbg_GuidString((const IID *)(v6 + 8));
              WPP_SF_Ss(
                *((_QWORD *)WPP_GLOBAL_Control + 7),
                0x52u,
                (__int64)&WPP_bdeacb4259f0347d69c055acf1d289ef_Traceguids,
                (const unsigned __int16 *)v9,
                *(_QWORD *)(a1 + 16));
            }
            v10 = *(_DWORD *)(v6 + 36) == 0;
            *(_DWORD *)(v6 + 96) = 1;
            v11 = &DNS_EVENT_NEXT_KSKROLLOVER_STAGE;
            if ( v10 )
              v11 = (__int128 *)&DNS_EVENT_NEXT_ZSKROLLOVER_STAGE;
            *(_OWORD *)&v40[0].dwLowDateTime = *v11;
            LogDnssecKeyRollover(v40, a1, v6, L"DNS_SKD_STATUS_QUEUED");
            v5 = 1;
          }
          if ( *(_DWORD *)(v6 + 36) && !*(_DWORD *)(v6 + 104) && *(_DWORD *)(v6 + 68) != -1 && v8 )
          {
            v12 = 0;
            v13 = 0;
            if ( dword_1401B99F0 )
              v8 *= 10080;
            if ( v8 <= 0x15180 )
            {
              if ( *(_DWORD *)(v6 + 108) < 3u )
              {
                v12 = 7667;
                *(_DWORD *)(v6 + 108) = 3;
                v13 = 1;
                v5 = 1;
              }
              goto LABEL_46;
            }
            v14 = *(_DWORD *)(v6 + 68) / 0x14u;
            if ( v8 <= v14 )
            {
              if ( *(_DWORD *)(v6 + 108) < 2u )
              {
                *(_DWORD *)(v6 + 108) = 2;
                v12 = 7668;
                v5 = 1;
                v13 = (v8 + 43200) / 0x15180;
              }
              v15 = v8 - 86400;
              goto LABEL_42;
            }
            v16 = *(_DWORD *)(v6 + 68) / 0xAu;
            if ( v8 > v16 )
            {
              v17 = v8 - v16;
              if ( v17 < v4 )
                v4 = v17;
            }
            else
            {
              if ( !*(_DWORD *)(v6 + 108) )
              {
                *(_DWORD *)(v6 + 108) = 1;
                v12 = 7668;
                v5 = 1;
                v13 = (v8 + 43200) / 0x15180;
              }
              v15 = v8 - v14;
LABEL_42:
              if ( v15 < v4 )
                v4 = v15;
            }
LABEL_46:
            if ( v12 )
            {
              v45[1] = *(unsigned __int16 **)(a1 + 24);
              v18 = (unsigned __int16 *)&LocaleName;
              v45[2] = (unsigned __int16 *)v13;
              v40[0] = 0i64;
              v41 = 257;
              v42 = 4;
              StringFromGuid((const IID *)(v6 + 8), (void **)v40);
              v19 = (_QWORD *)v40[0];
              if ( v40[0] )
                v18 = (unsigned __int16 *)v40[0];
              v45[0] = v18;
              *(_OWORD *)&v40[0].dwLowDateTime = *GetEventDescriptor(&v44, v12);
              Eventlog_LogEvent((__int64)v40, v21, v20 + 3, v45, (unsigned __int8 *)&v41, v20, v20, v20);
              Mem_Free(v19, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\olskeyrollover.c", 3677);
            }
          }
          if ( v5 && (*(_BYTE *)(a1 + 388) & 1) == 0 )
          {
            DnsOls_WriteSkdToStorage(0, a1, v6, 0);
            v5 = 0;
          }
        }
      }
      else if ( !*(_QWORD *)(a1 + 1128) )
      {
        *(_QWORD *)(a1 + 1128) = v6;
        *(_QWORD *)(a1 + 1116) = *(_QWORD *)(v6 + 84);
      }
      v6 = *(_QWORD *)v6;
      if ( !v6 )
      {
        if ( v5 )
          DnsOls_WriteSkdToStorage(0, a1, 0i64, 0);
        v3 = v37;
        break;
      }
    }
  }
  v22 = *(_QWORD *)(a1 + 1128);
  if ( !v22 )
  {
    v40[0].dwLowDateTime = -1;
    v40[0].dwHighDateTime = -1;
    if ( CompareFileTime(&FileTime1, v40) )
    {
      v40[0].dwLowDateTime = -1;
      v40[0].dwHighDateTime = -1;
      if ( CompareFileTime(&v39, v40) )
      {
        if ( !*(_DWORD *)(v3 + 104) )
        {
          v23 = *(_DWORD *)(a1 + 1056);
          v24 = *(_DWORD *)(a1 + 1072);
          if ( !v23 )
            v23 = ntohl(*(_DWORD *)(a1 + 528));
          if ( dword_1401B99F0 )
          {
            v25 = 60;
            if ( v24 < 0x3C )
              v25 = v24;
            v24 = v25;
          }
          v40[0] = 0i64;
          if ( CompareFileTime((const FILETIME *)(v3 + 116), v40) )
          {
            v26 = *(_QWORD *)(v3 + 116);
            FileTime2 = (FILETIME)(10000000i64 * (v24 + v23) + v26);
            v37 = (__int64)FileTime2;
            v27 = CompareFileTime(&FileTime2, &FileTime1);
            v28 = FileTime2;
            if ( v27 < 0 )
              v28 = FileTime1;
            FileTime2 = v28;
            if ( !(unsigned int)OffsetFromCurrentTime(&FileTime2) )
              GetSystemTimeAsFileTime(&FileTime2);
          }
          else
          {
            v37 = 10000000i64 * (v24 + v23) + *(_QWORD *)&FileTime1;
            FileTime2 = (FILETIME)v37;
          }
          v29 = ntohl(*(_DWORD *)(a1 + 528));
          if ( v29 <= (unsigned int)Zone_GetMaxTtlAmongAllZoneScopes(a1) )
            MaxTtlAmongAllZoneScopes = Zone_GetMaxTtlAmongAllZoneScopes(a1);
          else
            MaxTtlAmongAllZoneScopes = ntohl(*(_DWORD *)(a1 + 528));
          v40[0] = (FILETIME)(10000000i64 * (v24 + MaxTtlAmongAllZoneScopes) + *(_QWORD *)&FileTime2);
          FileTime2.dwLowDateTime += 10000000 * (v24 + MaxTtlAmongAllZoneScopes);
          FileTime2.dwHighDateTime = v40[0].dwHighDateTime;
          if ( CompareFileTime(&FileTime2, &v39) >= 0 )
          {
            FileTime1.dwLowDateTime = -1;
            FileTime1.dwHighDateTime = -1;
          }
          else
          {
            v39.dwLowDateTime = -1;
            v39.dwHighDateTime = -1;
          }
        }
      }
    }
    if ( CompareFileTime(&FileTime1, &v39) >= 0 )
    {
      v40[0].dwLowDateTime = -1;
      v40[0].dwHighDateTime = -1;
      v31.dwLowDateTime = CompareFileTime(&v39, v40);
      if ( !v31.dwLowDateTime )
      {
LABEL_84:
        v32 = *(_QWORD *)(a1 + 1128);
        if ( v32 )
        {
          v31.dwLowDateTime = (unsigned int)WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            v33 = Dbg_GuidString((const IID *)(v32 + 8));
            v34 = 83;
LABEL_93:
            v31.dwLowDateTime = WPP_SF_sS(
                                  *((_QWORD *)WPP_GLOBAL_Control + 7),
                                  v34,
                                  (__int64)&WPP_bdeacb4259f0347d69c055acf1d289ef_Traceguids,
                                  *(const char **)(a1 + 16),
                                  (__int64)v33);
            goto LABEL_94;
          }
        }
        goto LABEL_94;
      }
      *(FILETIME *)(a1 + 1128) = v43;
      v31 = v39;
    }
    else
    {
      v31 = FileTime1;
      *(_QWORD *)(a1 + 1128) = v3;
    }
    *(FILETIME *)(a1 + 1116) = v31;
    goto LABEL_84;
  }
  v31.dwLowDateTime = (unsigned int)WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    v33 = Dbg_GuidString((const IID *)(v22 + 8));
    v34 = 84;
    goto LABEL_93;
  }
LABEL_94:
  if ( v4 != -1 )
  {
    if ( dword_1401B99F0 )
      v4 = v4 / 0x2760 + 1;
    CurrentTimePlusOffset(&v43, v4);
    v31.dwLowDateTime = CompareFileTime(&v43, (const FILETIME *)(a1 + 1116));
    if ( (v31.dwLowDateTime & 0x80000000) != 0 )
    {
      v31.dwLowDateTime = v43.dwLowDateTime;
      *(FILETIME *)(a1 + 1116) = v43;
    }
    *(_DWORD *)(a1 + 1040) |= 0x20000u;
  }
  return v31.dwLowDateTime;
}
// 1400696E0: variable 'v21' is possibly undefined
// 1400696B9: variable 'v20' is possibly undefined
// 140187B50: using guessed type __int128 DNS_EVENT_NEXT_KSKROLLOVER_STAGE;
// 1401B99F0: using guessed type int dword_1401B99F0;
