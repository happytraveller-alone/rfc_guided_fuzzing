//----- (000000014004C510) ----------------------------------------------------
__int64 DsLoad_Thread()
{
  int v0; // esi
  __int64 *i; // rdx
  const unsigned __int16 **NextZone; // rax
  __int64 v3; // rbx
  __int64 v4; // rdx
  __int64 v5; // rdx
  __int64 v6; // rcx
  __int64 j; // rdx
  __int64 NextElement_ScopeMap; // rax
  __int64 v9; // rdi
  __int64 v10; // rdx
  int v11; // eax
  __int64 v12; // rcx
  __int64 k; // rdx
  __int64 v14; // rax
  const char *v15; // rdx
  const char *v16; // rax
  unsigned int v18; // [rsp+40h] [rbp-29h] BYREF
  unsigned int v19; // [rsp+44h] [rbp-25h] BYREF
  unsigned __int16 *v20; // [rsp+48h] [rbp-21h] BYREF
  unsigned __int16 *v21[2]; // [rsp+50h] [rbp-19h] BYREF
  __int128 v22; // [rsp+60h] [rbp-9h] BYREF
  __int128 v23; // [rsp+70h] [rbp+7h] BYREF
  __int128 v24[4]; // [rsp+80h] [rbp+17h] BYREF
  __int16 v25; // [rsp+D8h] [rbp+6Fh] BYREF
  unsigned int v26; // [rsp+E0h] [rbp+77h] BYREF
  unsigned int v27; // [rsp+E8h] [rbp+7Fh] BYREF

  v0 = 0;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0xAu, (__int64)&WPP_d0795120f1a7376c235aa98ef7001c93_Traceguids);
  }
  _InterlockedIncrement(&g_lDsLoadingThreads);
  Sleep(0x1F4u);
  while ( 1 )
  {
    EnterCriticalSection(&g_DsLoadLock);
    for ( i = 0i64; ; i = (__int64 *)NextZone )
    {
      NextZone = Zone_ListGetNextZoneEx(0i64, i, 0);
      v3 = (__int64)NextZone;
      if ( !NextZone )
        break;
      if ( *((int *)NextZone + 108) <= 0 )
      {
        if ( (*((_DWORD *)NextZone + 97) & 6) == 2 )
        {
          *((_DWORD *)NextZone + 97) |= 4u;
          break;
        }
      }
      else
      {
        *((_DWORD *)NextZone + 97) &= 0xFFFFFFF9;
      }
    }
    LeaveCriticalSection(&g_DsLoadLock);
    if ( !v3 )
      break;
    dword_1401B9714 = Dns_GetCurrentTimeInSeconds();
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_sd(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0xCu,
        (__int64)&WPP_d0795120f1a7376c235aa98ef7001c93_Traceguids,
        *(const char **)(v3 + 16));
    }
    v0 = Zone_Load(v3, 0);
    if ( v0 )
    {
      v20 = *(unsigned __int16 **)(v3 + 24);
      v22 = DNS_EVENT_DSBKLOAD_FAILED;
      Eventlog_LogEvent((__int64)&v22, v5, 1u, &v20, (unsigned __int8 *)1, 0, 0, 0i64);
LABEL_52:
      *(_DWORD *)(v3 + 396) |= 0x2000u;
      goto LABEL_53;
    }
    Zone_SetSoaPrimary(v3);
    if ( *(_QWORD *)(v3 + 184) )
    {
      dword_1401B9714 = Dns_GetCurrentTimeInSeconds();
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_Ssd(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0xDu,
          (__int64)&WPP_d0795120f1a7376c235aa98ef7001c93_Traceguids,
          MEMORY[0xC0],
          *(_QWORD *)(v3 + 16));
      }
      v6 = *(_QWORD *)(v3 + 168);
      v26 = -1;
      acquireRead(v6, 0xFFFFFFFF, &v26);
      for ( j = 0i64; ; j = *(_QWORD *)(v9 + 192) )
      {
        NextElement_ScopeMap = Get_NextElement_ScopeMap(*(_QWORD *)(v3 + 160), j, 0i64);
        v9 = NextElement_ScopeMap;
        if ( !NextElement_ScopeMap )
          break;
        if ( (*(_DWORD *)(NextElement_ScopeMap + 388) & 6) == 2 )
        {
          *(_DWORD *)(NextElement_ScopeMap + 388) |= 4u;
          if ( (unsigned int)Zone_Load(NextElement_ScopeMap, 0) )
            *(_DWORD *)(v9 + 396) |= 0x2000u;
          else
            Zone_SetSoaPrimary(v9);
        }
      }
      v27 = -1;
      releaseRead(*(_QWORD *)(v3 + 168), &v27, 1);
    }
    if ( *(_DWORD *)(v3 + 372) == 1 && (*(_BYTE *)(v3 + 1040) & 1) != 0 )
    {
      v0 = Zone_LockForWriteEx(v3, 1, 0x2710u, (__int64)"ds\\dns\\server\\server\\dsbkload.c", 251);
      if ( v0 )
      {
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          WPP_SF_Ds(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0xEu,
            (__int64)&WPP_d0795120f1a7376c235aa98ef7001c93_Traceguids,
            v0,
            *(_QWORD *)(v3 + 16));
        }
      }
      else
      {
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          WPP_SF_s(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0xFu,
            (__int64)&WPP_d0795120f1a7376c235aa98ef7001c93_Traceguids,
            *(const char **)(v3 + 16));
        }
        v11 = DnsOls_CompleteZoneSign((struct _zone_info *)v3, 611);
        *(_DWORD *)(v3 + 1040) |= 0xCu;
        v0 = v11;
        DnsOls_ClearZoneResignSchedule(v3);
        DnsOls_SetZoneSigRefreshTime(v3, 1);
        Zone_UnlockAfterWriteEx(v3, 1, (__int64)"ds\\dns\\server\\server\\dsbkload.c", 39);
      }
      if ( !v0 )
      {
        *(_DWORD *)(v3 + 396) &= ~0x2000u;
        goto LABEL_53;
      }
      v21[0] = *(unsigned __int16 **)(v3 + 24);
      v21[1] = (unsigned __int16 *)v0;
      v25 = 1025;
      v23 = DNS_EVENT_DNSSEC_LOAD_SIGN_FAIL;
      Eventlog_LogEvent((__int64)&v23, v10, 2u, v21, (unsigned __int8 *)&v25, 0, 0, 0i64);
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        WPP_SF_Ds(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x10u,
          (__int64)&WPP_d0795120f1a7376c235aa98ef7001c93_Traceguids,
          v0,
          *(_QWORD *)(v3 + 16));
      }
      goto LABEL_52;
    }
LABEL_53:
    *(_DWORD *)(v3 + 388) &= 0xFFFFFFF9;
    if ( *(_QWORD *)(v3 + 184) )
    {
      v12 = *(_QWORD *)(v3 + 168);
      v18 = -1;
      acquireRead(v12, 0xFFFFFFFF, &v18);
      for ( k = 0i64; ; k = *(_QWORD *)(v14 + 192) )
      {
        v14 = Get_NextElement_ScopeMap(*(_QWORD *)(v3 + 160), k, 0i64);
        if ( !v14 )
          break;
        *(_DWORD *)(v14 + 388) &= 0xFFFFFFF9;
      }
      v19 = -1;
      releaseRead(*(_QWORD *)(v3 + 168), &v19, 1);
    }
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x10) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      v15 = "not paused";
      if ( (*(_DWORD *)(v3 + 396) & 0x1000) != 0 )
        v15 = "paused";
      v16 = "not shutdown";
      if ( (*(_DWORD *)(v3 + 396) & 0x2000) != 0 )
        v16 = "shutdown";
      WPP_SF_sDss(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        (__int64)v15,
        (__int64)"shutdown",
        *(const char **)(v3 + 16),
        v0,
        (__int64)v16,
        (__int64)v15);
    }
  }
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0xBu, (__int64)&WPP_d0795120f1a7376c235aa98ef7001c93_Traceguids);
  }
  if ( _InterlockedExchangeAdd(&g_lDsLoadingThreads, 0xFFFFFFFF) == 1 )
  {
    v24[0] = DNS_EVENT_ZONE_LOAD_COMPLETE;
    Eventlog_LogEvent((__int64)v24, v4, 0, 0i64, 0i64, v0, 0, 0i64);
    DnsBL_AutoconfigureBlocklist();
  }
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x12u, (__int64)&WPP_d0795120f1a7376c235aa98ef7001c93_Traceguids);
  }
  return 0i64;
}
// 14004C666: variable 'v5' is possibly undefined
// 14004C8B3: variable 'v10' is possibly undefined
// 14004CA40: variable 'v4' is possibly undefined
// 140186FB0: using guessed type __int128 DNS_EVENT_ZONE_LOAD_COMPLETE;
// 140187060: using guessed type __int128 DNS_EVENT_DSBKLOAD_FAILED;
// 140187250: using guessed type __int128 DNS_EVENT_DNSSEC_LOAD_SIGN_FAIL;
// 1401B9714: using guessed type int dword_1401B9714;
// 1401EBEE8: using guessed type int g_lDsLoadingThreads;
// 14004C510: using guessed type __int128 var_40[4];
