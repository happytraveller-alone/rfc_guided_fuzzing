//----- (000000014014FF10) ----------------------------------------------------
__int64 __fastcall CDnsRRLStateHashMap::Remove(CDnsRRLStateHashMap *this, struct IDnsRRLStateKey *a2)
{
  _QWORD *v2; // rsi
  unsigned __int64 v3; // rax
  __int64 v4; // r15
  __int64 v5; // r14
  _QWORD *i; // rbx
  __int64 v7; // rcx
  _QWORD *v8; // rax
  _QWORD *v9; // rdi
  __int64 v10; // rcx
  _QWORD *v11; // rax
  __int64 v12; // rbp
  _QWORD *j; // rax
  _QWORD **v14; // rax
  _QWORD *v15; // rcx
  _QWORD *v16; // rbx
  __int64 *v17; // r8
  __int64 v19; // [rsp+50h] [rbp+8h] BYREF
  struct IDnsRRLStateKey *v20; // [rsp+58h] [rbp+10h] BYREF

  v20 = a2;
  v2 = (_QWORD *)*((_QWORD *)this + 1);
  v3 = std::_Hash<std::tr1::_Umap_traits<IDnsRRLStateKey *,IDnsRRLStateInfo *,std::_Hash_compare<IDnsRRLStateKey *,CDnsRRLStateKeyHasher,CDnsRRLStateKeyEqual>,std::allocator<std::pair<IDnsRRLStateKey * const,IDnsRRLStateInfo *>>,0>>::_Hashval(
         (__int64)v2,
         &v20);
  v4 = (__int64)v20;
  v5 = 2 * v3;
  for ( i = *(_QWORD **)(v2[4] + 16 * v3); ; i = (_QWORD *)*i )
  {
    v7 = v2[4];
    v8 = (_QWORD *)v2[1];
    if ( *(_QWORD **)(v7 + 8 * v5) != v8 )
      v8 = **(_QWORD ***)(v7 + 8 * v5 + 8);
    if ( i == v8 )
      goto LABEL_14;
    if ( (*(unsigned __int8 (__fastcall **)(_QWORD, __int64))(*(_QWORD *)i[2] + 80i64))(i[2], v4) )
      break;
  }
  v9 = i;
  while ( 1 )
  {
    v10 = v2[4];
    v11 = (_QWORD *)v2[1];
    if ( *(_QWORD **)(v10 + 8 * v5) != v11 )
      v11 = **(_QWORD ***)(v10 + 8 * v5 + 8);
    if ( i == v11 || !(*(unsigned __int8 (__fastcall **)(__int64, _QWORD))(*(_QWORD *)v4 + 80i64))(v4, i[2]) )
      break;
    i = (_QWORD *)*i;
  }
  if ( v9 == i )
  {
LABEL_14:
    v9 = (_QWORD *)v2[1];
    i = v9;
  }
  v12 = 0i64;
  for ( j = v9; j != i; ++v12 )
    j = (_QWORD *)*j;
  v14 = (_QWORD **)v2[1];
  if ( v9 == *v14 && i == v14 )
  {
    v15 = *v14;
    *v14 = v14;
    *(_QWORD *)(v2[1] + 8i64) = v2[1];
    v2[2] = 0i64;
    if ( v15 != (_QWORD *)v2[1] )
    {
      do
      {
        v16 = (_QWORD *)*v15;
        operator delete(v15);
        v15 = v16;
      }
      while ( v16 != (_QWORD *)v2[1] );
    }
    std::_Hash<std::_Hmap_traits<unsigned short,TrustAnchor,stdext::hash_compare<unsigned short,std::less<unsigned short>>,std::allocator<std::pair<unsigned short const,TrustAnchor>>,1>>::_Init(
      v2,
      8i64);
  }
  else
  {
    while ( v9 != i )
    {
      v17 = v9;
      v9 = (_QWORD *)*v9;
      std::_Hash<std::tr1::_Umap_traits<IDnsRRLStateKey *,IDnsRRLStateInfo *,std::_Hash_compare<IDnsRRLStateKey *,CDnsRRLStateKeyHasher,CDnsRRLStateKeyEqual>,std::allocator<std::pair<IDnsRRLStateKey * const,IDnsRRLStateInfo *>>,0>>::erase(
        v2,
        &v19,
        v17);
    }
  }
  return v12 == 0 ? 0x490 : 0;
}
// 140184CA8: using guessed type void __stdcall operator delete(void *);
// 140185140: using guessed type __int64 (__fastcall *_guard_dispatch_icall_fptr)(_QWORD, _QWORD);
