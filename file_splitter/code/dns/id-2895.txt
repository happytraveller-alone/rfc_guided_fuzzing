//----- (0000000140150860) ----------------------------------------------------
__int64 __fastcall computeHash(
        UCHAR *a1,
        int a2,
        char a3,
        unsigned __int16 a4,
        PUCHAR pbInput,
        ULONG cbInput,
        PUCHAR *a7,
        _DWORD *a8)
{
  _DWORD *v8; // r12
  unsigned int v9; // ebx
  UCHAR *v10; // r15
  PUCHAR *v11; // rdi
  UCHAR *v14; // rax
  CDnsClientSubnetRecordsTrie *v15; // rcx
  unsigned __int16 v16; // dx
  unsigned int v17; // ecx
  int v18; // r9d
  ULONG v19; // r8d
  UCHAR *v20; // rdx
  CDnsClientSubnetRecordsTrie *v21; // rcx
  unsigned __int16 v22; // dx
  BCRYPT_HASH_HANDLE hHash; // [rsp+70h] [rbp+8h] BYREF
  int v25; // [rsp+78h] [rbp+10h]

  v25 = a2;
  v8 = a8;
  v9 = 0;
  hHash = 0i64;
  v10 = 0i64;
  v11 = a7;
  if ( !a1 || !pbInput )
    goto LABEL_50;
  if ( !a7 )
    return v9;
  if ( !a8 )
    goto LABEL_50;
  if ( !g_fNSECCryptoInited && !(unsigned int)initHashProvider(a3) )
    goto LABEL_45;
  v14 = (UCHAR *)Mem_Alloc(g_dwHashSize, 0i64, "ds\\dns\\server\\validator\\validator_hash.c", 373);
  *v11 = v14;
  if ( v14 )
  {
    v17 = g_dwHashObjSize;
    *v8 = g_dwHashSize;
    v10 = (UCHAR *)Mem_Alloc(v17, 0i64, "ds\\dns\\server\\validator\\validator_hash.c", 385);
    if ( v10 )
    {
      while ( 1 )
      {
        if ( hHash )
          BCryptDestroyHash(hHash);
        v18 = BCryptCreateHash(g_hAlg, &hHash, v10, g_dwHashObjSize, 0i64, 0, 0);
        if ( v18 < 0 )
        {
          v21 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 25) >= 2u )
          {
            v22 = 16;
            goto LABEL_43;
          }
          goto LABEL_44;
        }
        if ( v9 )
        {
          v19 = g_dwHashSize;
          v20 = *v11;
        }
        else
        {
          v19 = v25;
          v20 = a1;
        }
        v18 = BCryptHashData(hHash, v20, v19, 0);
        if ( v18 < 0 )
          break;
        if ( cbInput )
          v18 = BCryptHashData(hHash, pbInput, cbInput, 0);
        if ( v18 < 0 )
          break;
        v18 = BCryptFinishHash(hHash, *v11, g_dwHashSize, 0);
        if ( v18 < 0 )
        {
          v21 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 25) >= 2u )
          {
            v22 = 18;
LABEL_43:
            WPP_SF_D(*((_QWORD *)v21 + 2), v22, (__int64)&WPP_947e11a9df68314c5ba2a482e5517539_Traceguids, v18);
            goto LABEL_44;
          }
          goto LABEL_44;
        }
        if ( (int)++v9 > a4 )
          goto LABEL_44;
      }
      v21 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 25) >= 2u )
      {
        v22 = 17;
        goto LABEL_43;
      }
LABEL_44:
      v9 = 1;
    }
    else
    {
      v15 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 25) >= 2u )
      {
        v16 = 15;
        goto LABEL_12;
      }
    }
  }
  else
  {
    v15 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 25) >= 2u )
    {
      v16 = 14;
LABEL_12:
      WPP_SF_(*((_QWORD *)v15 + 2), v16, (__int64)&WPP_947e11a9df68314c5ba2a482e5517539_Traceguids);
    }
  }
LABEL_45:
  if ( hHash )
    BCryptDestroyHash(hHash);
  if ( v10 )
    Mem_Free(v10, 0i64, 0i64, (__int64)"ds\\dns\\server\\validator\\validator_hash.c", 495);
  if ( !v9 )
  {
LABEL_50:
    if ( v11 )
    {
      if ( *v11 )
      {
        Mem_Free(*v11, 0i64, 0i64, (__int64)"ds\\dns\\server\\validator\\validator_hash.c", 500);
        *v11 = 0i64;
        if ( v8 )
          *v8 = 0;
      }
    }
  }
  return v9;
}
// 1401B9DF0: using guessed type int g_fNSECCryptoInited;
