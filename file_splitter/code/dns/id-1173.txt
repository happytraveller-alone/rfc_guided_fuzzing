//----- (0000000140097C10) ----------------------------------------------------
__int64 __fastcall updateWinsRecord(struct _zone_info *a1, __int64 a2, __int64 a3, __int64 a4)
{
  int v4; // r12d
  int v5; // r15d
  struct _zone_info *v8; // rbx
  int v9; // eax
  __int64 v10; // rcx
  unsigned int refreshed; // edi
  __int64 result; // rax
  struct _zone_info *v13; // rcx
  __int64 v14; // rdx
  unsigned int v15; // eax
  __int64 v16; // rsi
  LPVOID AppendUpdate; // rax
  int v18; // eax
  __int64 v19; // rdx
  char v20[64]; // [rsp+40h] [rbp-68h] BYREF
  __int64 v21; // [rsp+C0h] [rbp+18h] BYREF

  v21 = 0i64;
  v4 = 0;
  v5 = 0;
  v8 = a1;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_qqqq(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x3Fu,
      (__int64)&WPP_94ace1326352386894146b7c4d888c88_Traceguids,
      a1,
      a2,
      0i64,
      a4);
  }
  if ( !v8 || !a2 || a2 != *((_QWORD *)v8 + 5) )
    return 87i64;
  v9 = *((_DWORD *)v8 + 93);
  if ( v9 == 1 )
  {
    memset_0(v20, 0, sizeof(v20));
    if ( (*((_BYTE *)v8 + 1040) & 4) != 0 )
    {
      v10 = (__int64)v8;
      if ( *((_QWORD *)v8 + 41) )
        v10 = *((_QWORD *)v8 + 41);
      refreshed = Zone_LockForRPCSeqEx(v10, 0xBB8u);
      if ( refreshed )
      {
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          WPP_SF_Ds(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x40u,
            (__int64)&WPP_94ace1326352386894146b7c4d888c88_Traceguids,
            refreshed,
            *((_QWORD *)v8 + 2));
        }
        return refreshed;
      }
      v5 = 1;
    }
    refreshed = Zone_LockForWriteEx((__int64)v8, 1, 0x2710u, (__int64)"ds\\dns\\server\\server\\rrrpc.c", 118);
    if ( !refreshed )
    {
      if ( *((_DWORD *)v8 + 93) == 1 && (*((_BYTE *)v8 + 1040) & 4) != 0 )
      {
        refreshed = DnsOls_RefreshAllDnsKeyPairObject(v8);
        if ( refreshed )
        {
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            WPP_SF_sd(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x41u,
              (__int64)&WPP_94ace1326352386894146b7c4d888c88_Traceguids,
              *((const char **)v8 + 2));
          }
          goto LABEL_58;
        }
        if ( v5 )
        {
          v13 = v8;
          if ( *((_QWORD *)v8 + 41) )
            v13 = (struct _zone_info *)*((_QWORD *)v8 + 41);
          Lock_ReleaseWrite(*((_QWORD *)v13 + 39));
          v5 = 0;
        }
      }
      Dbase_LockEx(0i64, 2, (__int64)"ds\\dns\\server\\server\\rrrpc.c", 149);
      if ( a4 )
      {
        v15 = Dnssrv_Flat_RecordRead(v8, v14, a4, &v21);
        v16 = v21;
        refreshed = v15;
        if ( v15
          || !v21
          || (AppendUpdate = Up_CreateAppendUpdate((__int64)v20, a2, v21, 0, 0i64),
              (refreshed = RR_UpdateAdd((__int64)v8, a2, v16, (__int64)AppendUpdate, 33562626, 0i64)) != 0) )
        {
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            WPP_SF_D(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x44u,
              (__int64)&WPP_94ace1326352386894146b7c4d888c88_Traceguids,
              refreshed);
          }
          RR_Free(v16);
          Dbase_UnlockEx(0i64, 2, (__int64)"ds\\dns\\server\\server\\rrrpc.c", 74);
          Zone_UnlockAfterWriteEx((__int64)v8, 1, (__int64)"ds\\dns\\server\\server\\rrrpc.c", 75);
          if ( v5 )
          {
            if ( *((_QWORD *)v8 + 41) )
              v8 = (struct _zone_info *)*((_QWORD *)v8 + 41);
            Lock_ReleaseWrite(*((_QWORD *)v8 + 39));
          }
          return refreshed;
        }
      }
      else
      {
        Wins_StopZoneWinsLookup((__int64)v8);
      }
      *((_DWORD *)v8 + 99) |= 0x400u;
      Dbase_UnlockEx(0i64, 2, (__int64)"ds\\dns\\server\\server\\rrrpc.c", 235);
      v18 = Up_ExecuteUpdateEx((const char **)v8, (__int64)v20, 2, 0, (__int64)"ds\\dns\\server\\server\\rrrpc.c", 239);
      refreshed = v18;
      if ( v18
        && WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_D(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x42u,
          (__int64)&WPP_94ace1326352386894146b7c4d888c88_Traceguids,
          v18);
      }
      goto LABEL_58;
    }
    goto LABEL_58;
  }
  if ( (unsigned int)(v9 - 2) > 1 )
    return 87i64;
  result = Zone_LockForWriteEx((__int64)v8, 1, 0x2710u, (__int64)"ds\\dns\\server\\server\\rrrpc.c", 2);
  if ( !(_DWORD)result )
  {
    v4 = 1;
    if ( a4 )
    {
      *(_DWORD *)(a4 + 24) |= 0x10000u;
      refreshed = Dnssrv_Flat_RecordRead(v8, v19, a4, &v21);
      if ( refreshed )
        goto LABEL_58;
      if ( !v21 )
        goto LABEL_58;
      refreshed = Wins_RecordCheck((__int64)v8, a2, v21);
      if ( refreshed != 9753 )
        goto LABEL_58;
      Zone_GetZoneInfoFromResourceRecords((__int64)v8);
    }
    else
    {
      Wins_StopZoneWinsLookup((__int64)v8);
    }
    refreshed = 0;
LABEL_58:
    *((_DWORD *)v8 + 99) |= 0x200u;
    if ( v4 )
      Zone_UnlockAfterWriteEx((__int64)v8, 1, (__int64)"ds\\dns\\server\\server\\rrrpc.c", 62);
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_D(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x43u,
        (__int64)&WPP_94ace1326352386894146b7c4d888c88_Traceguids,
        refreshed);
    }
    return refreshed;
  }
  return result;
}
// 140097E36: variable 'v14' is possibly undefined
// 140098005: variable 'v19' is possibly undefined
