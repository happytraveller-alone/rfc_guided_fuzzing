//----- (000000014013A3A0) ----------------------------------------------------
__int64 __fastcall MatchPolicyRecursion(struct _DNS_MSGINFO *a1, __int64 a2, __int64 *a3, __int64 a4)
{
  char v8; // si
  int v9; // r13d
  __int64 *v10; // r12
  __int64 result; // rax
  char *v12; // rax
  int v13; // r14d
  CDnsClientSubnetRecordsTrie *v14; // rcx
  unsigned __int16 v15; // dx
  unsigned int v16; // r9d
  const void **matched; // rcx
  __int64 v18; // rax
  __int64 v19; // r8
  const unsigned __int16 *v20; // r9
  int v21; // eax
  _QWORD *v22; // rax
  __int64 v23; // rdx
  __int64 v24; // r8
  _QWORD *v25; // rcx
  __int64 v26; // r8
  __int64 v27; // rcx
  bool v28; // dl
  __int64 v29; // rdx
  __int64 v30; // [rsp+20h] [rbp-E0h]
  unsigned int v31; // [rsp+40h] [rbp-C0h] BYREF
  unsigned int v32; // [rsp+44h] [rbp-BCh] BYREF
  const void **v33; // [rsp+48h] [rbp-B8h] BYREF
  __int64 v34; // [rsp+50h] [rbp-B0h] BYREF
  void *v35[3]; // [rsp+58h] [rbp-A8h] BYREF
  unsigned __int64 v36; // [rsp+70h] [rbp-90h]
  __int16 v37[184]; // [rsp+80h] [rbp-80h] BYREF

  v32 = 0;
  v31 = 0;
  v33 = 0i64;
  v8 = 0;
  memset_0(v37, 0, sizeof(v37));
  *(_DWORD *)(a4 + 512) = 1;
  v9 = 0;
  v34 = 0i64;
  v10 = (__int64 *)((char *)a1 + 3664);
  *((_QWORD *)a1 + 458) = 0i64;
  if ( dword_1401B991C )
    *((_BYTE *)a1 + 1417) = 1;
  if ( (*((_DWORD *)a1 + 1572) & 0x100) == 0 )
    *((_QWORD *)a1 + 461) = 0i64;
  wcscpy_s((wchar_t *)a4, 0xFFui64, L".");
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 7), 0xCCu, (__int64)&WPP_bbbcc621566c3408fe84d6a85874d543_Traceguids, a1);
  }
  if ( a2 )
  {
    if ( !(unsigned int)Name_ConvertPacketNameToLookupNameEx(
                          (__int64)a1,
                          (unsigned __int8 *)a1 + 6316,
                          (unsigned __int16 *)v37,
                          1) )
      return 9002i64;
  }
  else
  {
    Name_WriteLookupNameForNode(a3, (unsigned __int16 *)v37);
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      v12 = Dbg_LookupName((unsigned __int16 *)v37);
      WPP_SF_s(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0xCDu,
        (__int64)&WPP_bbbcc621566c3408fe84d6a85874d543_Traceguids,
        v12);
    }
  }
  result = (*(__int64 (__fastcall **)(struct CDnsPolicyManager *, __int64, _QWORD, __int64 *))(*(_QWORD *)g_DnsPolicyManager
                                                                                             + 40i64))(
             g_DnsPolicyManager,
             3i64,
             0i64,
             &v34);
  v31 = result;
  if ( (_DWORD)result )
  {
    v13 = 0;
    goto LABEL_101;
  }
  v13 = 1;
  result = (*(__int64 (__fastcall **)(struct CDnsPolicyManager *, struct _DNS_MSGINFO *, __int16 *, const void ***, int, _QWORD))(*(_QWORD *)g_DnsPolicyManager + 24i64))(
             g_DnsPolicyManager,
             a1,
             v37,
             &v33,
             3,
             0i64);
  v31 = result;
  if ( (_DWORD)result )
  {
    v14 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
    {
      goto LABEL_101;
    }
    v15 = 206;
    goto LABEL_22;
  }
  result = Policy_AcquireReadLock(&g_hServerLevelNegativePolicyLock, 0xFFFFFFFF);
  v31 = result;
  if ( (_DWORD)result )
  {
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
    {
      goto LABEL_101;
    }
    WPP_SF_D(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0xCFu,
      (__int64)&WPP_bbbcc621566c3408fe84d6a85874d543_Traceguids,
      result);
    goto LABEL_23;
  }
  v9 = 1;
  if ( v33 )
    v16 = *((_DWORD *)v33 + 26);
  else
    v16 = -1;
  matched = MatchNegativePolicies(a1, 0i64, 3i64, v16, &v31);
  result = v31;
  if ( matched )
  {
    v33 = matched;
    goto LABEL_40;
  }
  if ( !v31 )
  {
    matched = v33;
LABEL_40:
    if ( matched )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        v8 = 1;
        v18 = CDnsPolicy::Name(matched, (__int64)v35);
        v20 = (const unsigned __int16 *)v18;
        if ( *(_QWORD *)(v18 + 24) >= 8ui64 )
          v20 = *(const unsigned __int16 **)v18;
        WPP_SF_Sqdq(*((_QWORD *)WPP_GLOBAL_Control + 7), 0xD1u, v19, v20);
        matched = v33;
      }
      if ( (v8 & 1) != 0 )
      {
        v8 &= ~1u;
        if ( v36 >= 8 )
        {
          operator delete(v35[0]);
          matched = v33;
        }
      }
      v21 = *((_DWORD *)matched + 23);
      *(_DWORD *)(a4 + 512) = v21;
      if ( v21 == 1 )
      {
        CDnsPolicyContent::GetScope((CDnsPolicyContent *)matched[17], (unsigned __int16 *const)a4);
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          v8 |= 2u;
          v22 = (_QWORD *)CDnsPolicy::Name(v33, (__int64)v35);
          v25 = v22;
          if ( v22[3] >= 8ui64 )
            v25 = (_QWORD *)*v22;
          WPP_SF_qSqS(*((_QWORD *)WPP_GLOBAL_Control + 7), v23, v24, a1, v25, v33, a4);
        }
        if ( (v8 & 2) != 0 && v36 >= 8 )
          operator delete(v35[0]);
        matched = v33;
      }
      UpdatePolicyInMsg(a1, matched);
      v33 = 0i64;
      v32 = -1;
      releaseRead(g_hServerLevelNegativePolicyLock, &v32, 1);
      v9 = 0;
      (*(void (__fastcall **)(struct CDnsPolicyManager *, __int64))(*(_QWORD *)g_DnsPolicyManager + 48i64))(
        g_DnsPolicyManager,
        v34);
      v13 = 0;
      if ( *(_WORD *)a4 && (*(_WORD *)a4 != Source[0] || *(_WORD *)(a4 + 2) != Source[1]) )
      {
        result = LookUp_ServerScopeMap(
                   gServerScopeMap,
                   qword_1401C91E8,
                   v26,
                   0xFFFFFFFF,
                   (const unsigned __int16 *)a4,
                   (_QWORD *)a1 + 458);
        v31 = result;
        if ( (_DWORD)result )
        {
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
          {
            WPP_SF_SD(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0xD7u,
              (__int64)&WPP_bbbcc621566c3408fe84d6a85874d543_Traceguids,
              (const unsigned __int16 *)a4);
          }
          result = 9002i64;
          v31 = 9002;
        }
        else if ( *v10 )
        {
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            WPP_SF_S(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0xD6u,
              (__int64)&WPP_bbbcc621566c3408fe84d6a85874d543_Traceguids,
              (const unsigned __int16 *)a4);
            result = v31;
          }
          v27 = *v10;
          if ( dword_1401B991C )
          {
            v29 = *(_QWORD *)(v27 + 256);
            if ( (!v29 || !*(_DWORD *)(v29 + 4)) && !*(_DWORD *)(v27 + 296) )
              *((_BYTE *)a1 + 1417) = 0;
          }
          else
          {
            v28 = *(_DWORD *)(v27 + 296) && (*((_BYTE *)a1 + 6306) & 1) != 0;
            *((_BYTE *)a1 + 1417) = v28;
          }
          if ( (*((_DWORD *)a1 + 1572) & 0x100) == 0 )
            *((_QWORD *)a1 + 461) = v27;
        }
        else
        {
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
          {
            WPP_SF_S(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0xD5u,
              (__int64)&WPP_bbbcc621566c3408fe84d6a85874d543_Traceguids,
              (const unsigned __int16 *)a4);
          }
          *((_DWORD *)a1 + 1572) |= 0x20u;
          result = 9959i64;
          v31 = 9959;
        }
        goto LABEL_101;
      }
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0xD4u, (__int64)&WPP_bbbcc621566c3408fe84d6a85874d543_Traceguids);
      }
    }
    else
    {
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
      {
        goto LABEL_101;
      }
      LODWORD(v30) = *(_DWORD *)(a4 + 512);
      WPP_SF_qd(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0xD3u,
        (__int64)&WPP_bbbcc621566c3408fe84d6a85874d543_Traceguids,
        a1,
        v30);
    }
    goto LABEL_23;
  }
  v14 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) == 0
    || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
  {
    goto LABEL_101;
  }
  v15 = 208;
LABEL_22:
  WPP_SF_Dq(*((_QWORD *)v14 + 7), v15, (__int64)&WPP_bbbcc621566c3408fe84d6a85874d543_Traceguids, result);
LABEL_23:
  result = v31;
LABEL_101:
  *((_DWORD *)a1 + 1572) |= 0x100u;
  if ( v9 )
  {
    v32 = -1;
    releaseRead(g_hServerLevelNegativePolicyLock, &v32, 1);
    result = v31;
  }
  if ( v13 )
  {
    (*(void (__fastcall **)(struct CDnsPolicyManager *, __int64))(*(_QWORD *)g_DnsPolicyManager + 48i64))(
      g_DnsPolicyManager,
      v34);
    return v31;
  }
  return result;
}
// 14013A706: variable 'v19' is possibly undefined
// 14013A7AD: variable 'v23' is possibly undefined
// 14013A7AD: variable 'v24' is possibly undefined
// 14013A860: variable 'v26' is possibly undefined
// 14013AA1F: variable 'v30' is possibly undefined
// 140184CA8: using guessed type void __stdcall operator delete(void *);
// 140185140: using guessed type __int64 (__fastcall *_guard_dispatch_icall_fptr)(_QWORD, _QWORD);
// 1401B91C0: using guessed type struct CDnsPolicyManager *g_DnsPolicyManager;
// 1401B91C8: using guessed type __int64 g_hServerLevelNegativePolicyLock;
// 1401B991C: using guessed type int dword_1401B991C;
// 1401C91E0: using guessed type __int64 gServerScopeMap;
// 1401C91E8: using guessed type __int64 qword_1401C91E8;
// 14013A3A0: using guessed type unsigned __int16 var_1B0[184];
