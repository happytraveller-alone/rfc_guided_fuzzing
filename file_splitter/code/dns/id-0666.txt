//----- (000000014005EB40) ----------------------------------------------------
ULONG __fastcall Template_cssccsqqqqzzqbz(
        __int64 a1,
        __int64 a2,
        char a3,
        const char *a4,
        const char *a5,
        char a6,
        char a7,
        const char *a8,
        char a9,
        char a10,
        char a11,
        char a12,
        const unsigned __int16 *a13,
        const unsigned __int16 *a14,
        int a15,
        __int64 a16,
        const unsigned __int16 *a17)
{
  __int64 v17; // rdx
  __int64 v18; // rcx
  int v19; // ecx
  const char *v20; // r10
  const char *v21; // rax
  __int64 v22; // rcx
  int v23; // ecx
  const char *v24; // rax
  __int64 v25; // rax
  int v26; // eax
  int v27; // ecx
  __int64 v28; // rax
  int v29; // r8d
  const wchar_t *v30; // r10
  const wchar_t *v31; // rax
  __int64 v32; // rax
  int v33; // r9d
  const wchar_t *v34; // rax
  bool v35; // zf
  struct _EVENT_DATA_DESCRIPTOR UserData; // [rsp+20h] [rbp-E0h] BYREF
  const char *v38; // [rsp+30h] [rbp-D0h]
  int v39; // [rsp+38h] [rbp-C8h]
  int v40; // [rsp+3Ch] [rbp-C4h]
  const char *v41; // [rsp+40h] [rbp-C0h]
  int v42; // [rsp+48h] [rbp-B8h]
  int v43; // [rsp+4Ch] [rbp-B4h]
  char *v44; // [rsp+50h] [rbp-B0h]
  __int64 v45; // [rsp+58h] [rbp-A8h]
  char *v46; // [rsp+60h] [rbp-A0h]
  __int64 v47; // [rsp+68h] [rbp-98h]
  const char *v48; // [rsp+70h] [rbp-90h]
  int v49; // [rsp+78h] [rbp-88h]
  int v50; // [rsp+7Ch] [rbp-84h]
  char *v51; // [rsp+80h] [rbp-80h]
  __int64 v52; // [rsp+88h] [rbp-78h]
  char *v53; // [rsp+90h] [rbp-70h]
  __int64 v54; // [rsp+98h] [rbp-68h]
  char *v55; // [rsp+A0h] [rbp-60h]
  __int64 v56; // [rsp+A8h] [rbp-58h]
  char *v57; // [rsp+B0h] [rbp-50h]
  __int64 v58; // [rsp+B8h] [rbp-48h]
  const wchar_t *v59; // [rsp+C0h] [rbp-40h]
  int v60; // [rsp+C8h] [rbp-38h]
  int v61; // [rsp+CCh] [rbp-34h]
  const wchar_t *v62; // [rsp+D0h] [rbp-30h]
  int v63; // [rsp+D8h] [rbp-28h]
  int v64; // [rsp+DCh] [rbp-24h]
  int *v65; // [rsp+E0h] [rbp-20h]
  __int64 v66; // [rsp+E8h] [rbp-18h]
  __int64 v67; // [rsp+F0h] [rbp-10h]
  int v68; // [rsp+F8h] [rbp-8h]
  int v69; // [rsp+FCh] [rbp-4h]
  const wchar_t *v70; // [rsp+100h] [rbp+0h]
  int v71; // [rsp+108h] [rbp+8h]
  int v72; // [rsp+10Ch] [rbp+Ch]
  char v73; // [rsp+140h] [rbp+40h] BYREF

  v73 = a3;
  v17 = -1i64;
  UserData.Ptr = (ULONGLONG)&v73;
  *(_QWORD *)&UserData.Size = 1i64;
  if ( a4 )
  {
    v18 = -1i64;
    do
      ++v18;
    while ( a4[v18] );
    v19 = v18 + 1;
  }
  else
  {
    v19 = 5;
  }
  v20 = "NULL";
  v39 = v19;
  v21 = "NULL";
  v40 = 0;
  if ( a4 )
    v21 = a4;
  v38 = v21;
  if ( a5 )
  {
    v22 = -1i64;
    do
      ++v22;
    while ( a5[v22] );
    v23 = v22 + 1;
  }
  else
  {
    v23 = 5;
  }
  v42 = v23;
  v24 = "NULL";
  if ( a5 )
    v24 = a5;
  v43 = 0;
  v41 = v24;
  v44 = &a6;
  v46 = &a7;
  v45 = 1i64;
  v47 = 1i64;
  if ( a8 )
  {
    v25 = -1i64;
    do
      ++v25;
    while ( a8[v25] );
    v26 = v25 + 1;
  }
  else
  {
    v26 = 5;
  }
  v49 = v26;
  v51 = &a9;
  if ( a8 )
    v20 = a8;
  v48 = v20;
  v53 = &a10;
  v55 = &a11;
  v57 = &a12;
  v27 = 10;
  v50 = 0;
  v52 = 4i64;
  v54 = 4i64;
  v56 = 4i64;
  v58 = 4i64;
  if ( a13 )
  {
    v28 = -1i64;
    do
      ++v28;
    while ( a13[v28] );
    v29 = 2 * v28 + 2;
  }
  else
  {
    v29 = 10;
  }
  v60 = v29;
  v30 = L"NULL";
  v31 = L"NULL";
  v61 = 0;
  if ( a13 )
    v31 = a13;
  v59 = v31;
  if ( a14 )
  {
    v32 = -1i64;
    do
      ++v32;
    while ( a14[v32] );
    v33 = 2 * v32 + 2;
  }
  else
  {
    v33 = 10;
  }
  v63 = v33;
  v34 = L"NULL";
  v64 = 0;
  if ( a14 )
    v34 = a14;
  v66 = 4i64;
  v62 = v34;
  v65 = &a15;
  v67 = a16;
  v68 = a15;
  v69 = 0;
  v35 = a17 == 0i64;
  if ( a17 )
  {
    do
      ++v17;
    while ( a17[v17] );
    v27 = 2 * v17 + 2;
    v35 = a17 == 0i64;
  }
  if ( !v35 )
    v30 = a17;
  v71 = v27;
  v70 = v30;
  v72 = 0;
  return EventWrite(Microsoft_Windows_DNSServerHandle, &DNS_EVENT_RESPONSE_IN, 0xFu, &UserData);
}
