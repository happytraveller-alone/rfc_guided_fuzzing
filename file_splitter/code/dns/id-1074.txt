//----- (000000014008BC70) ----------------------------------------------------
void __fastcall RR_ListTimeout(__int64 a1)
{
  int v1; // r12d
  unsigned __int16 v2; // r15
  int v3; // ebp
  int v5; // r14d
  bool v6; // zf
  __int64 *v7; // rsi
  __int64 v8; // rdi
  unsigned int v9; // edx
  __int64 v10; // rax
  char *v11; // rax
  __int64 v12; // rcx
  __int64 v13; // [rsp+20h] [rbp-38h]
  int v14; // [rsp+60h] [rbp+8h] BYREF

  v1 = g_dwCacheLimitCurrentTimeAdjustment;
  v2 = 0;
  v3 = 0;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 8) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
  {
    WPP_SF_qd(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x35u,
      (__int64)&WPP_10d39582251c332017bd035d2c946054_Traceguids,
      a1,
      *(unsigned __int8 *)(a1 + 97));
  }
  v14 = -1;
  acquireUpdate(DbaseLock, 0xFFFFFFFF, (unsigned int *)&v14, 1);
  if ( !a1 || (v5 = 1, !*(_QWORD *)(a1 + 64)) )
    v5 = 0;
  v6 = (*(_BYTE *)(a1 + 92) & 1) == 0;
  v14 = v5;
  if ( v6 || !(unsigned int)RR_CheckNameErrorTimeout(a1, 0, 0, 0i64) )
  {
    v7 = (__int64 *)(a1 + 64);
    v8 = *(_QWORD *)(a1 + 64);
    if ( v8 )
    {
      do
      {
        if ( (*(_BYTE *)(v8 + 8) & 1) != 0
          && (!dword_1401B9924 || *(char *)(v8 + 10) >= 0
            ? (!dword_1401B991C
             ? (v9 = *(_DWORD *)(v8 + 20))
             : (v9 = *(_DWORD *)(v8 + 16) + dword_1401B9920))
            : (v9 = *(_DWORD *)(v8 + 16)),
              v1 == -1 || v9 < v1 + dword_1401B9714) )
        {
          if ( !v3 )
          {
            Dbase_LockEx(a1, 2, (__int64)"ds\\dns\\server\\server\\rrlist.c", 176);
            v3 = 1;
          }
          v10 = *(_QWORD *)v8;
          ++g_dwCacheFreeCount;
          *v7 = v10;
          v2 = *(_WORD *)(v8 + 12);
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 8) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            v11 = Dbg_NodeName(a1);
            LODWORD(v13) = v2;
            WPP_SF_qDs(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x36u,
              (__int64)&WPP_10d39582251c332017bd035d2c946054_Traceguids,
              v8,
              v13,
              v11);
          }
          RR_Free(v8);
        }
        else
        {
          v7 = (__int64 *)v8;
        }
        v8 = *v7;
      }
      while ( *v7 );
      v5 = v14;
      if ( v2 )
      {
        RR_ListResetNodeFlags(a1);
        *(_DWORD *)(a1 + 76) = 0;
      }
    }
    NTree_ChangeAncestorCounters((volatile signed __int32 **)a1, v5);
    if ( v3 )
      Dbase_UnlockEx(v12, 2, (__int64)"ds\\dns\\server\\server\\rrlist.c", 233);
  }
  v14 = -1;
  releaseUpdate(DbaseLock, (unsigned int *)&v14, 1);
  insertNodeIntoTimeoutSystem(a1);
}
// 14008BE12: variable 'v13' is possibly undefined
// 14008BE68: variable 'v12' is possibly undefined
// 1401B9074: using guessed type int g_dwCacheFreeCount;
// 1401B9078: using guessed type int g_dwCacheLimitCurrentTimeAdjustment;
// 1401B9714: using guessed type int dword_1401B9714;
// 1401B991C: using guessed type int dword_1401B991C;
// 1401B9920: using guessed type int dword_1401B9920;
// 1401B9924: using guessed type int dword_1401B9924;
// 1401EC5E8: using guessed type __int64 DbaseLock;
