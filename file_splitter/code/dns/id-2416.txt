//----- (00000001401267C8) ----------------------------------------------------
void __fastcall DnsSign::CDnsKeyPair::SetAlgorithm(DnsSign::CDnsKeyPair *this, unsigned __int8 a2)
{
  NCRYPT_HANDLE v4; // rdx
  __int64 v5; // rdx
  wchar_t *v6; // rdi
  __int64 v7; // rdx
  __int64 v8; // rax
  __int64 v9; // r10
  __int64 v10; // rdx
  __int64 v11; // rax
  __int64 v12; // r10
  __int64 v13; // rdx
  __int64 v14; // rax
  __int64 v15; // r10
  wchar_t *String1[2]; // [rsp+38h] [rbp-59h] BYREF
  __int64 v17; // [rsp+48h] [rbp-49h]
  __int64 v18; // [rsp+58h] [rbp-39h]
  char v19[56]; // [rsp+60h] [rbp-31h] BYREF
  char pExceptionObject[56]; // [rsp+98h] [rbp+7h] BYREF

  v18 = -2i64;
  v4 = *((_QWORD *)this + 13);
  if ( !v4 )
    goto LABEL_34;
  *(_OWORD *)String1 = 0i64;
  v17 = 0i64;
  DnsSign::GetNCryptKeyProperty((__int64)this, v4, (__int64 *)String1);
  if ( a2 == 5 )
    goto LABEL_25;
  if ( a2 <= 6u )
    goto LABEL_20;
  if ( a2 <= 8u || a2 == 10 )
  {
LABEL_25:
    v6 = String1[0];
    if ( wcscmp_0(String1[0], L"RSA") && wcscmp_0(v6, L"RSA_SIGN") )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 7) & 0x100000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 25) >= 4u )
      {
        v14 = std::vector<unsigned char>::operator[](String1, 0i64);
        WPP_SF_DS(*(_QWORD *)(v15 + 16), 0x37u, (__int64)&WPP_52544f7432c93905eab44474fa1b3f20_Traceguids, a2, v14);
      }
      DnsSign::CRunTimeException::CRunTimeException((DnsSign::CRunTimeException *)v19, v13, 33);
      DnsSign::CException::AppendErrorMessageByID((DnsSign::CException *)v19, 0xD6DE3u);
      DnsSign::CRunTimeException::CRunTimeException(
        (DnsSign::CRunTimeException *)pExceptionObject,
        (const struct DnsSign::CRunTimeException *)v19);
      CxxThrowException_0(pExceptionObject, (_ThrowInfo *)&TI2_AVCRunTimeException_DnsSign__);
    }
    goto LABEL_32;
  }
  if ( a2 == 13 )
  {
    v6 = String1[0];
    if ( wcscmp_0(String1[0], L"ECDSA_P256") )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 7) & 0x100000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 25) >= 4u )
      {
        v11 = std::vector<unsigned char>::operator[](String1, 0i64);
        WPP_SF_DS(*(_QWORD *)(v12 + 16), 0x38u, (__int64)&WPP_52544f7432c93905eab44474fa1b3f20_Traceguids, 13, v11);
      }
      DnsSign::CRunTimeException::CRunTimeException((DnsSign::CRunTimeException *)v19, v10, 33);
      DnsSign::CException::AppendErrorMessageByID((DnsSign::CException *)v19, 0xD6DE3u);
      DnsSign::CRunTimeException::CRunTimeException(
        (DnsSign::CRunTimeException *)pExceptionObject,
        (const struct DnsSign::CRunTimeException *)v19);
      CxxThrowException_0(pExceptionObject, (_ThrowInfo *)&TI2_AVCRunTimeException_DnsSign__);
    }
    goto LABEL_32;
  }
  if ( a2 != 14 )
  {
LABEL_20:
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 7) & 0x100000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 25) >= 4u )
    {
      WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x3Au, (__int64)&WPP_52544f7432c93905eab44474fa1b3f20_Traceguids);
    }
    DnsSign::CRunTimeException::CRunTimeException((DnsSign::CRunTimeException *)v19, v5, 2);
    DnsSign::CException::AppendErrorMessageByID((DnsSign::CException *)v19, 0xD6D89u);
    DnsSign::CRunTimeException::CRunTimeException(
      (DnsSign::CRunTimeException *)pExceptionObject,
      (const struct DnsSign::CRunTimeException *)v19);
    CxxThrowException_0(pExceptionObject, (_ThrowInfo *)&TI2_AVCRunTimeException_DnsSign__);
  }
  v6 = String1[0];
  if ( wcscmp_0(String1[0], L"ECDSA_P384") )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 7) & 0x100000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 25) >= 4u )
    {
      v8 = std::vector<unsigned char>::operator[](String1, 0i64);
      WPP_SF_DS(*(_QWORD *)(v9 + 16), 0x39u, (__int64)&WPP_52544f7432c93905eab44474fa1b3f20_Traceguids, 14, v8);
    }
    DnsSign::CRunTimeException::CRunTimeException((DnsSign::CRunTimeException *)v19, v7, 33);
    DnsSign::CException::AppendErrorMessageByID((DnsSign::CException *)v19, 0xD6DE3u);
    DnsSign::CRunTimeException::CRunTimeException(
      (DnsSign::CRunTimeException *)pExceptionObject,
      (const struct DnsSign::CRunTimeException *)v19);
    CxxThrowException_0(pExceptionObject, (_ThrowInfo *)&TI2_AVCRunTimeException_DnsSign__);
  }
LABEL_32:
  if ( v6 )
    operator delete(v6);
LABEL_34:
  *((_BYTE *)this + 9) = a2;
  *((_BYTE *)this + 8) = 1;
}
// 1401268B0: variable 'v9' is possibly undefined
// 1401268C3: variable 'v7' is possibly undefined
// 140126954: variable 'v12' is possibly undefined
// 140126967: variable 'v10' is possibly undefined
// 1401269DA: variable 'v5' is possibly undefined
// 140126A82: variable 'v15' is possibly undefined
// 140126A95: variable 'v13' is possibly undefined
// 140184CA8: using guessed type void __stdcall operator delete(void *);
