//----- (00000001400DAF9C) ----------------------------------------------------
void __fastcall processNotify(struct _DNS_MSGINFO *a1)
{
  __int64 v2; // rax
  __int64 v3; // rdi
  char *v4; // rax
  CDnsClientSubnetRecordsTrie *v5; // rcx
  u_long v6; // r14d
  int v7; // r8d
  char *v8; // rax
  __int64 v9; // rax
  int v10; // esi
  const char *v11; // rax
  const char *v12; // rax
  const char *v13; // rax
  int v14; // eax
  __int64 v15; // rcx
  const char *v16; // rax
  char *v17; // rax
  u_long v18; // [rsp+60h] [rbp+8h] BYREF

  v18 = 0;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x40) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x45u, (__int64)&WPP_8f5c62d9956434feed7ea8f9d17b2299_Traceguids, a1);
  }
  _InterlockedAdd(&dword_1401C8088, 1u);
  if ( *((_WORD *)a1 + 240) != 6 )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x40) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_q(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x46u,
        (__int64)&WPP_8f5c62d9956434feed7ea8f9d17b2299_Traceguids,
        a1);
    }
LABEL_10:
    _InterlockedAdd(&dword_1401C808C, 1u);
    return;
  }
  *((_BYTE *)a1 + 6306) |= 0x80u;
  v2 = readZoneFromSoaAnswer(a1, 6i64, &v18, 0i64);
  v3 = v2;
  if ( v2 )
  {
    *((_DWORD *)a1 + 1572) |= 0x280u;
    *((_QWORD *)a1 + 460) = v2;
  }
  Etw_LogIncomingPacket(0x111u, (__int64)a1, 0i64, 1);
  if ( !v3 )
  {
    if ( (*((_BYTE *)a1 + 6288) & 0x40) == 0 )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x40) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        v4 = Dbg_PacketName(*((unsigned __int8 **)a1 + 4), (__int64)a1 + 6304, 0i64);
        WPP_SF_s(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x47u,
          (__int64)&WPP_8f5c62d9956434feed7ea8f9d17b2299_Traceguids,
          v4);
      }
      goto LABEL_10;
    }
    *((_BYTE *)a1 + 1412) = 0;
    Reject_RequestIntact((__int64)a1, 2u, 1);
    return;
  }
  *((_BYTE *)a1 + 6306) &= ~0x80u;
  v5 = WPP_GLOBAL_Control;
  v6 = v18;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x40) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_sdD(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x48u,
      (__int64)&WPP_8f5c62d9956434feed7ea8f9d17b2299_Traceguids,
      *(const char **)(v3 + 16));
    v5 = WPP_GLOBAL_Control;
  }
  v7 = *(_DWORD *)(v3 + 372);
  if ( v7 == 1 )
  {
    if ( (*(_BYTE *)(v3 + 388) & 1) != 0 )
    {
      if ( v5 == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
      {
LABEL_34:
        _InterlockedAdd(&dword_1401C8090, 1u);
        return;
      }
      if ( (*((_BYTE *)v5 + 68) & 0x40) != 0 && *((_BYTE *)v5 + 65) >= 4u )
      {
        WPP_SF_s(
          *((_QWORD *)v5 + 7),
          0x49u,
          (__int64)&WPP_8f5c62d9956434feed7ea8f9d17b2299_Traceguids,
          *(const char **)(v3 + 16));
        v5 = WPP_GLOBAL_Control;
      }
    }
    if ( v5 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)v5 + 68) & 0x40) != 0
      && *((_BYTE *)v5 + 65) >= 4u )
    {
      v8 = Dbg_PacketName(*((unsigned __int8 **)a1 + 4), (__int64)a1 + 6304, 0i64);
      WPP_SF_s(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x4Au,
        (__int64)&WPP_8f5c62d9956434feed7ea8f9d17b2299_Traceguids,
        v8);
    }
    goto LABEL_34;
  }
  if ( (unsigned int)(v7 - 3) > 1 )
  {
    v9 = *((unsigned __int16 *)a1 + 3151);
    *((_BYTE *)a1 + 6306) |= 0x80u;
    *((_QWORD *)a1 + 4) = (char *)a1 + v9 + 6304;
    *((_BYTE *)a1 + 1412) = 0;
    Send_Msg((__int64)a1, 0);
    if ( *(_QWORD *)(v3 + 336) )
    {
      if ( v6 )
      {
        v10 = *(_DWORD *)(v3 + 512);
        if ( v6 == v10 )
        {
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x40) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            v11 = DnsAddr_Ntoa((struct in_addr *)a1 + 16);
            WPP_SF_sd(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x4Du,
              (__int64)&WPP_8f5c62d9956434feed7ea8f9d17b2299_Traceguids,
              v11);
          }
          _InterlockedAdd(&dword_1401C80A0, 1u);
          return;
        }
        if ( (int)(v6 - v10) < 0 )
        {
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x40) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            v12 = DnsAddr_Ntoa((struct in_addr *)a1 + 16);
            WPP_SF_sdD(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x4Eu,
              (__int64)&WPP_8f5c62d9956434feed7ea8f9d17b2299_Traceguids,
              v12);
          }
          _InterlockedAdd(&dword_1401C80A4, 1u);
          return;
        }
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x40) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          v13 = DnsAddr_Ntoa((struct in_addr *)a1 + 16);
          WPP_SF_sdD(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x4Fu,
            (__int64)&WPP_8f5c62d9956434feed7ea8f9d17b2299_Traceguids,
            v13);
        }
        _InterlockedAdd(&dword_1401C809C, 1u);
      }
    }
    else
    {
      _InterlockedAdd(&dword_1401C8098, 1u);
    }
    memset_0((void *)(v3 + 1248), 0, 0x40ui64);
    v14 = *(_DWORD *)(v3 + 1160) | 2;
    *(_DWORD *)(v3 + 1280) = 32;
    *(_DWORD *)(v3 + 1160) = v14;
    if ( *(_DWORD *)(v3 + 372) != 3 && (v14 & 0x40) == 0 || (v15 = *(_QWORD *)(v3 + 1176)) == 0 )
      v15 = *(_QWORD *)(v3 + 1168);
    if ( !(unsigned int)DnsAddrArray_ContainsAddr(v15, (_WORD *)a1 + 32, 3)
      || (*(_OWORD *)(v3 + 1248) = *((_OWORD *)a1 + 4),
          *(_OWORD *)(v3 + 1264) = *((_OWORD *)a1 + 5),
          *(_OWORD *)(v3 + 1280) = *((_OWORD *)a1 + 6),
          *(_OWORD *)(v3 + 1296) = *((_OWORD *)a1 + 7),
          !(unsigned int)Xfr_SendUdpIxfrQuery(v3, (_OWORD *)a1 + 4)) )
    {
      _InterlockedAdd(&dword_1401C80A8, 1u);
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x40) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        v16 = DnsAddr_Ntoa((struct in_addr *)a1 + 16);
        WPP_SF_qss(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x50u,
          (__int64)&WPP_8f5c62d9956434feed7ea8f9d17b2299_Traceguids,
          a1,
          *(_QWORD *)(v3 + 16),
          v16);
      }
      Xfr_SendSoaQuery((struct _zone_info *)v3);
    }
    return;
  }
  if ( v5 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
  {
    if ( (*((_BYTE *)v5 + 68) & 0x40) != 0 && *((_BYTE *)v5 + 65) >= 4u )
    {
      WPP_SF_sd(
        *((_QWORD *)v5 + 7),
        0x4Bu,
        (__int64)&WPP_8f5c62d9956434feed7ea8f9d17b2299_Traceguids,
        *(const char **)(v3 + 16));
      v5 = WPP_GLOBAL_Control;
    }
    if ( v5 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)v5 + 68) & 0x40) != 0
      && *((_BYTE *)v5 + 65) >= 4u )
    {
      v17 = Dbg_PacketName(*((unsigned __int8 **)a1 + 4), (__int64)a1 + 6304, 0i64);
      WPP_SF_s(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x4Cu,
        (__int64)&WPP_8f5c62d9956434feed7ea8f9d17b2299_Traceguids,
        v17);
    }
  }
  _InterlockedAdd(&dword_1401C8094, 1u);
}
// 1401C8088: using guessed type int dword_1401C8088;
// 1401C808C: using guessed type int dword_1401C808C;
// 1401C8090: using guessed type int dword_1401C8090;
// 1401C8094: using guessed type int dword_1401C8094;
// 1401C8098: using guessed type int dword_1401C8098;
// 1401C809C: using guessed type int dword_1401C809C;
// 1401C80A0: using guessed type int dword_1401C80A0;
// 1401C80A4: using guessed type int dword_1401C80A4;
// 1401C80A8: using guessed type int dword_1401C80A8;
