//----- (0000000140127F64) ----------------------------------------------------
_QWORD *__fastcall std::vector<unsigned char>::insert<unsigned char>(_QWORD *a1, _QWORD *a2, __int64 a3, _BYTE *a4)
{
  unsigned __int64 v4; // rax
  __int64 v5; // rsi
  _BYTE *v9; // rdi
  __int64 v10; // rdx
  unsigned __int64 v11; // rax
  unsigned __int64 v12; // rdx
  unsigned __int64 v13; // rax
  size_t v14; // rdx
  _BYTE *v15; // rdx
  __int64 v16; // rdx
  unsigned __int64 v17; // rax
  unsigned __int64 v18; // rdx
  unsigned __int64 v19; // rax
  size_t v20; // rdx
  _BYTE *v21; // rcx
  char *v22; // rcx
  char *v23; // r8
  char *v24; // r10
  __int64 v25; // r10
  __int64 v26; // rdi
  __int64 i; // r11
  __int64 v28; // rax
  char *v29; // rdi
  char *v30; // r9
  char *v31; // r14
  char v32; // dl
  char *v33; // rax
  __int64 v34; // rdx
  _QWORD *result; // rax

  v4 = a1[1];
  v5 = a3 - *a1;
  if ( (unsigned __int64)a4 >= v4 || *a1 > (unsigned __int64)a4 )
  {
    v16 = a1[2];
    if ( v4 == v16 )
    {
      v17 = v4 - *a1;
      if ( v17 == -1i64 )
        std::vector<std::vector<unsigned char> *,std::allocator<std::vector<unsigned char> *>>::_Xlen();
      v18 = v16 - *a1;
      v19 = v17 + 1;
      if ( v19 > v18 )
      {
        if ( -1i64 - (v18 >> 1) >= v18 )
          v20 = (v18 >> 1) + v18;
        else
          v20 = 0i64;
        if ( v20 < v19 )
          v20 = v19;
        std::vector<unsigned char>::reserve((__int64)a1, v20);
      }
    }
    v21 = (_BYTE *)a1[1];
    if ( v21 )
      *v21 = *a4;
  }
  else
  {
    v9 = &a4[-*a1];
    v10 = a1[2];
    if ( v4 == v10 )
    {
      v11 = v4 - *a1;
      if ( v11 == -1i64 )
        std::vector<std::vector<unsigned char> *,std::allocator<std::vector<unsigned char> *>>::_Xlen();
      v12 = v10 - *a1;
      v13 = v11 + 1;
      if ( v13 > v12 )
      {
        if ( -1i64 - (v12 >> 1) >= v12 )
          v14 = (v12 >> 1) + v12;
        else
          v14 = 0i64;
        if ( v14 < v13 )
          v14 = v13;
        std::vector<unsigned char>::reserve((__int64)a1, v14);
      }
    }
    v15 = (_BYTE *)a1[1];
    if ( v15 )
      *v15 = v9[*a1];
  }
  v22 = (char *)++a1[1];
  v23 = (char *)(v5 + *a1);
  v24 = v22 - 1;
  if ( v23 != v22 - 1 && v24 != v22 )
  {
    v25 = v24 - v23;
    v26 = v25;
    for ( i = v22 - v23; v26; v26 = v28 % v26 )
    {
      v28 = i;
      i = v26;
    }
    if ( i < v22 - v23 && i > 0 )
    {
      v29 = &v23[i];
      do
      {
        v30 = &v29[v25];
        v31 = v29;
        if ( &v29[v25] == v22 )
          v30 = v23;
        do
        {
          v32 = *v31;
          *v31 = *v30;
          v31 = v30;
          *v30 = v32;
          v33 = &v30[v25];
          v34 = v22 - v30;
          v30 = &v23[v25 + v30 - v22];
          if ( v25 < v34 )
            v30 = v33;
        }
        while ( v30 != v29 );
        --v29;
        --i;
      }
      while ( i );
    }
  }
  result = a2;
  *a2 = v5 + *a1;
  return result;
}
