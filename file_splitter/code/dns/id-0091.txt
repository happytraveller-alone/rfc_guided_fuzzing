//----- (000000014000AF3C) ----------------------------------------------------
__int64 __fastcall queryForRootServers(_QWORD *a1, const CHAR *a2, WORD a3, int a4, void ***a5)
{
  _QWORD *v5; // rsi
  unsigned int v6; // ebx
  int v7; // edi
  int v8; // eax
  void **v9; // rax
  CDnsClientSubnetRecordsTrie *v10; // rcx
  _QWORD *v11; // r15
  int v12; // r11d
  int v13; // r13d
  _QWORD *v14; // rdx
  _QWORD *v15; // rax
  _QWORD *v16; // r14
  __int64 v17; // rax
  unsigned int v18; // r12d
  unsigned __int64 v19; // rcx
  struct in_addr *v20; // rdi
  int v21; // eax
  int v22; // edx
  void *v23; // rsi
  __int64 v24; // rdx
  __int64 v25; // r8
  int v26; // r9d
  const char *v27; // rax
  unsigned __int16 v28; // dx
  const char *v29; // rax
  unsigned int *v30; // rax
  __int64 v31; // r8
  unsigned int *v32; // rsi
  const CHAR *v33; // rcx
  WORD v34; // dx
  const char *v35; // rax
  __int64 v36; // rdx
  void **v37; // r14
  int v39; // [rsp+38h] [rbp-91h]
  PDNS_RECORD ppQueryResults; // [rsp+40h] [rbp-89h] BYREF
  void **v41; // [rsp+48h] [rbp-81h]
  __int64 v42; // [rsp+50h] [rbp-79h]
  int pExtra[2]; // [rsp+58h] [rbp-71h] BYREF
  __int64 v44; // [rsp+60h] [rbp-69h]
  int v45; // [rsp+68h] [rbp-61h]
  char v46[4]; // [rsp+6Ch] [rbp-5Dh] BYREF
  unsigned int *v47; // [rsp+70h] [rbp-59h]

  v39 = 0;
  v5 = a1;
  v6 = 0;
  v7 = 0;
  v8 = flagDnsServerInAdapterList(a1, 0i64, 0, 1);
  v9 = (void **)Mem_AllocZero((unsigned int)(8 * v8 + 8), 21i64, "ds\\dns\\server\\server\\autoconfigure.c", 1043);
  v10 = WPP_GLOBAL_Control;
  v41 = v9;
  v11 = v5;
  v42 = 0i64;
  v12 = 2;
LABEL_2:
  if ( !v11 )
    goto LABEL_56;
  v13 = 0;
  v14 = v11 + 12;
  v15 = v11 + 3;
  while ( 1 )
  {
    v16 = v15;
    if ( v13 )
      v16 = v14;
    if ( !v16 )
      goto LABEL_25;
    v17 = v16[8];
    if ( v17 )
    {
      v18 = 0;
      if ( *(_DWORD *)(v17 + 4) )
        break;
    }
LABEL_24:
    v15 = v11 + 3;
LABEL_25:
    if ( ++v13 >= v12 )
    {
      v11 = (_QWORD *)*v11;
      goto LABEL_2;
    }
  }
  while ( 1 )
  {
    ppQueryResults = 0i64;
    v44 = 0i64;
    pExtra[0] = -2147483647;
    pExtra[1] = 120;
    v45 = 10;
    memset_0(v46, 0, 0x64ui64);
    dword_1401B9714 = Dns_GetCurrentTimeInSeconds();
    if ( dword_1401B9714 > (unsigned int)dwAutoConfigEndTime )
      break;
    v19 = (unsigned __int64)v18 << 6;
    v20 = (struct in_addr *)(v19 + v16[8] + 32i64);
    if ( v20[10].S_un.S_addr )
      goto LABEL_20;
    flagDnsServerInAdapterList(v5, (_WORD *)(v19 + v16[8] + 32i64), 1, 0);
    LOBYTE(v21) = DnsAddr_IsLoopback(v20, 0);
    if ( v21 )
      goto LABEL_20;
    v23 = g_ServerAddrs;
    if ( (unsigned int)DnsAddrArray_ContainsAddr((__int64)g_ServerAddrs, v20, v22 + 3) )
      goto LABEL_20;
    LOBYTE(v12) = 2;
    if ( v20->S_un.S_un_w.s_w1 == 2 && !(unsigned int)DnsAddrArray_GetFamilyCount((__int64)v23, 2) )
    {
      v10 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || ((unsigned __int8)v12 & *((_BYTE *)WPP_GLOBAL_Control + 68)) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
      {
        goto LABEL_21;
      }
      v27 = DnsAddr_Ntoa(v20);
      v28 = 22;
      goto LABEL_19;
    }
    if ( v20->S_un.S_un_w.s_w1 == 23 && !(unsigned int)DnsAddrArray_GetFamilyCount((__int64)v23, 23) )
    {
      v10 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || ((unsigned __int8)v12 & *((_BYTE *)WPP_GLOBAL_Control + 68)) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
      {
        goto LABEL_21;
      }
      v27 = DnsAddr_Ntoa(v20);
      v28 = 23;
LABEL_19:
      WPP_SF_s(*((_QWORD *)WPP_GLOBAL_Control + 7), v28, (__int64)&WPP_dd5a12aafb1b34b87fc868998e41e2af_Traceguids, v27);
LABEL_20:
      v10 = WPP_GLOBAL_Control;
      v12 = 2;
      goto LABEL_21;
    }
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && ((unsigned __int8)v12 & *((_BYTE *)WPP_GLOBAL_Control + 68)) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      v29 = DnsAddr_Ntoa(v20);
      WPP_SF_s(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x18u,
        (__int64)&WPP_dd5a12aafb1b34b87fc868998e41e2af_Traceguids,
        v29);
    }
    v30 = DnsAddrArray_Create(1u, v24, v25, v26);
    v32 = v30;
    if ( !v30 )
      goto LABEL_20;
    DnsAddrArray_AddAddr(v30, (__int64)v20, v31, 0);
    v33 = ".";
    v47 = v32;
    v34 = 2;
    if ( a3 )
      v34 = a3;
    if ( a2 )
      v33 = a2;
    v6 = DnsQuery_UTF8(v33, v34, a4 | 0x1008, pExtra, &ppQueryResults, 0i64);
    if ( (a4 & 0x4000) != 0 )
      DnsRecordListUnmapV4MappedAAAAInPlace(ppQueryResults);
    Dns_Free(v32);
    v10 = WPP_GLOBAL_Control;
    v12 = 2;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      v35 = DnsAddr_Ntoa(v20);
      WPP_SF_sd(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x19u,
        (__int64)&WPP_dd5a12aafb1b34b87fc868998e41e2af_Traceguids,
        v35);
      v10 = WPP_GLOBAL_Control;
      v12 = 2;
    }
    if ( v6 )
    {
      v6 = 0;
    }
    else if ( ppQueryResults )
    {
      v36 = v42;
      v7 = ++v39;
      v41[v42] = ppQueryResults;
      v10 = WPP_GLOBAL_Control;
      v42 = v36 + 1;
      goto LABEL_22;
    }
LABEL_21:
    v7 = v39;
LABEL_22:
    ++v18;
    v5 = a1;
    if ( v18 >= *(_DWORD *)(v16[8] + 4i64) )
    {
      v14 = v11 + 12;
      goto LABEL_24;
    }
  }
  v6 = 1460;
  v10 = WPP_GLOBAL_Control;
  LOBYTE(v12) = 2;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x15u, (__int64)&WPP_dd5a12aafb1b34b87fc868998e41e2af_Traceguids);
    v10 = WPP_GLOBAL_Control;
    LOBYTE(v12) = 2;
  }
LABEL_56:
  if ( !v7 )
  {
    if ( v10 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && ((unsigned __int8)v12 & *((_BYTE *)v10 + 68)) != 0
      && *((_BYTE *)v10 + 65) >= 4u )
    {
      WPP_SF_D(*((_QWORD *)v10 + 7), 0x1Du, (__int64)&WPP_dd5a12aafb1b34b87fc868998e41e2af_Traceguids, v6);
      v10 = WPP_GLOBAL_Control;
    }
    v6 = 9564;
  }
  if ( v6 )
  {
    freeRecordSetArray(v41);
    v10 = WPP_GLOBAL_Control;
    v37 = 0i64;
  }
  else
  {
    v37 = v41;
  }
  *a5 = v37;
  if ( v10 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)v10 + 68) & 2) != 0
    && *((_BYTE *)v10 + 65) >= 4u )
  {
    WPP_SF_D(*((_QWORD *)v10 + 7), 0x1Eu, (__int64)&WPP_dd5a12aafb1b34b87fc868998e41e2af_Traceguids, v6);
  }
  return v6;
}
// 14000B079: variable 'v21' is possibly undefined
// 14000B086: variable 'v22' is possibly undefined
// 14000B0CD: variable 'v12' is possibly undefined
// 14000B1D9: variable 'v24' is possibly undefined
// 14000B1D9: variable 'v25' is possibly undefined
// 14000B1D9: variable 'v26' is possibly undefined
// 14000B1F3: variable 'v31' is possibly undefined
// 140183DD8: using guessed type __int64 __fastcall DnsRecordListUnmapV4MappedAAAAInPlace(_QWORD);
// 1401B8C24: using guessed type int dwAutoConfigEndTime;
// 1401B9714: using guessed type int dword_1401B9714;
// 14000AF3C: using guessed type char var_AC[4];
