//----- (0000000140058AF4) ----------------------------------------------------
int __fastcall LogUpdateRecord(int a1, int a2, struct in_addr *a3, __int64 a4, __int64 a5, __int64 a6)
{
  unsigned __int64 v6; // rax
  const char *v7; // r12
  const unsigned __int16 *v8; // r15
  const unsigned __int16 *v9; // r14
  int v10; // ecx
  __int64 v11; // rcx
  const char *v12; // rax
  int v13; // esi
  const char *v14; // rbx
  char v15; // al
  __int64 v16; // rcx
  const char *v17; // rax
  const unsigned __int16 **v18; // rbp
  const unsigned __int16 *v19; // rbp
  int v20; // esi
  char v21; // al
  __int64 v22; // rcx

  LODWORD(v6) = a5;
  v7 = (const char *)(a4 + 102);
  if ( a5 && *(_DWORD *)(a5 + 372) )
    v8 = *(const unsigned __int16 **)(a5 + 24);
  else
    v8 = L"..Cache";
  if ( !a5 || (v9 = *(const unsigned __int16 **)(a5 + 192)) == 0i64 )
    v9 = L"Default";
  v10 = a1 - 1;
  if ( v10 )
  {
    if ( v10 == 1 )
    {
      if ( *(_WORD *)(a6 + 12) > 0x33u
        || (v6 = *(unsigned __int16 *)(a6 + 12), v11 = 0xDC80001000000i64, !_bittest64(&v11, v6)) )
      {
        if ( a2 )
        {
          if ( (Microsoft_Windows_DNSServerEnableBits & 0x40000000) != 0 )
          {
            v12 = DnsAddr_Ntoa(a3 + 16);
            v13 = *(unsigned __int16 *)(a6 + 14);
            v14 = v12;
            v15 = ntohl(*(_DWORD *)(a6 + 20));
            LODWORD(v6) = Template_qsqqbzzs(
                            v16,
                            &DNS_EVENT_RECORD_CREATE_DU,
                            *(unsigned __int16 *)(a6 + 12),
                            v7,
                            v15,
                            v13,
                            a6 + 56,
                            v8,
                            v9,
                            v14);
          }
        }
        else if ( (Microsoft_Windows_DNSServerEnableBits & 0x40000000) != 0 )
        {
          v17 = DnsAddr_Ntoa(a3 + 16);
          LODWORD(v6) = Template_qsqqbzzs(
                          a6 + 56,
                          &DNS_EVENT_RECORD_DELETE_DU,
                          *(unsigned __int16 *)(a6 + 12),
                          v7,
                          0,
                          *(unsigned __int16 *)(a6 + 14),
                          a6 + 56,
                          v8,
                          v9,
                          v17);
        }
      }
    }
  }
  else if ( Microsoft_Windows_DNSServerEnableBits < 0 )
  {
    if ( a5 && (v18 = *(const unsigned __int16 ***)(a5 + 200)) != 0i64 )
      v19 = *v18;
    else
      v19 = L".";
    v20 = *(unsigned __int16 *)(a6 + 14);
    v21 = ntohl(*(_DWORD *)(a6 + 20));
    LODWORD(v6) = Template_qsqqbzzz(
                    v22,
                    &DNS_EVENT_RECORD_SCAVENGE,
                    *(unsigned __int16 *)(a6 + 12),
                    v7,
                    v21,
                    v20,
                    a6 + 56,
                    v8,
                    v9,
                    v19);
  }
  return v6;
}
// 140058BDD: variable 'v16' is possibly undefined
// 140058CA1: variable 'v22' is possibly undefined
// 1401872D0: using guessed type EVENT_DESCRIPTOR DNS_EVENT_RECORD_CREATE_DU;
// 1401877C8: using guessed type EVENT_DESCRIPTOR DNS_EVENT_RECORD_SCAVENGE;
// 140187948: using guessed type EVENT_DESCRIPTOR DNS_EVENT_RECORD_DELETE_DU;
// 140188260: using guessed type wchar_t aDefault_1[8];
// 1401B9100: using guessed type int Microsoft_Windows_DNSServerEnableBits;
