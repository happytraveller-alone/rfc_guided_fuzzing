//----- (00000001400E1A08) ----------------------------------------------------
void __fastcall TrustPoint::HandleActiveRefreshResponse(TrustPoint *this, int a2)
{
  u_long v4; // r13d
  unsigned int v5; // r15d
  CDnsClientSubnetRecordsTrie *v6; // rcx
  const char *v7; // r9
  unsigned __int16 v8; // dx
  const char *v9; // r9
  __int64 *v10; // rsi
  time_t v11; // rax
  u_long v12; // ebx
  _QWORD *v13; // rax
  _QWORD *v14; // rcx
  __int64 v15; // r12
  char v16; // si
  const char *v17; // r9
  u_long v18; // eax
  bool v19; // cc
  unsigned int v20; // eax
  u_long v21; // eax
  bool v22; // cc
  const char *v23; // r9
  u_short *v24; // r15
  __int16 v25; // r11
  unsigned __int16 v26; // r13
  unsigned __int16 v27; // dx
  int v28; // eax
  const char *v29; // r9
  __int64 **v30; // rbx
  const char *v31; // r9
  unsigned __int16 **v32; // r14
  __int64 *v33; // rax
  __int64 *v34; // rax
  volatile signed __int32 *v35; // rsi
  __int64 *v36; // rax
  __int64 v37; // rdx
  __int64 v38; // rcx
  const char *v39; // r9
  const char *v40; // r9
  const char *v41; // r9
  __int64 v42; // rdx
  __int64 v43; // rcx
  const char *v44; // r8
  volatile signed __int32 *v45; // rbx
  __int64 *v46; // rax
  __int64 v47; // rcx
  const unsigned __int16 *v48; // r8
  signed __int64 v49; // rsi
  __int64 v50; // rcx
  const char *v51; // rbx
  wchar_t *v52; // rax
  __int64 v53; // rdx
  __int64 v54; // r8
  __int64 v55; // rdx
  __int64 v56; // rcx
  const char *v57; // r9
  const char *v58; // r9
  __int64 v59; // rdx
  __int64 v60; // r8
  int v61; // esi
  CDnsClientSubnetRecordsTrie *v62; // r10
  __int64 *v63; // rax
  __int64 v64; // rbx
  __int64 v65; // rcx
  const char *v66; // r9
  const unsigned __int16 *v67; // r8
  const EVENT_DESCRIPTOR *v68; // rdx
  const char *v69; // r9
  __int64 v70; // rax
  __int16 v71; // ax
  const char *v72; // r9
  const char *v73; // r9
  const char *v74; // r9
  const char *v75; // r9
  const char *v76; // r9
  __int64 v77; // rdx
  __int64 v78; // rcx
  const char *v79; // r8
  __int64 v80; // rcx
  const char *v81; // r9
  double v82; // [rsp+30h] [rbp-D0h]
  int v83; // [rsp+40h] [rbp-C0h]
  u_long v84; // [rsp+44h] [rbp-BCh]
  int v85; // [rsp+48h] [rbp-B8h]
  __int64 **v86; // [rsp+50h] [rbp-B0h] BYREF
  unsigned int v87; // [rsp+58h] [rbp-A8h] BYREF
  int v88; // [rsp+5Ch] [rbp-A4h] BYREF
  int v89; // [rsp+60h] [rbp-A0h] BYREF
  int v90; // [rsp+64h] [rbp-9Ch] BYREF
  unsigned int v91; // [rsp+68h] [rbp-98h] BYREF
  int v92; // [rsp+6Ch] [rbp-94h] BYREF
  int v93; // [rsp+70h] [rbp-90h] BYREF
  unsigned __int16 *v94; // [rsp+78h] [rbp-88h] BYREF
  volatile signed __int32 *v95; // [rsp+80h] [rbp-80h]
  char v96; // [rsp+8Eh] [rbp-72h]
  __int64 v97; // [rsp+90h] [rbp-70h]
  __int64 v98; // [rsp+A0h] [rbp-60h] BYREF
  __int64 *v99; // [rsp+A8h] [rbp-58h]
  struct _FILETIME SystemTimeAsFileTime; // [rsp+B0h] [rbp-50h] BYREF
  time_t v101; // [rsp+B8h] [rbp-48h]
  __int64 v102; // [rsp+C0h] [rbp-40h]
  __int64 v103; // [rsp+C8h] [rbp-38h] BYREF
  __int64 **v104; // [rsp+D0h] [rbp-30h] BYREF
  __int64 v105; // [rsp+D8h] [rbp-28h] BYREF
  char v106[8]; // [rsp+E0h] [rbp-20h] BYREF
  volatile signed __int32 *v107; // [rsp+E8h] [rbp-18h]
  char v108[8]; // [rsp+108h] [rbp+8h] BYREF
  volatile signed __int32 *v109; // [rsp+110h] [rbp+10h]
  char v110; // [rsp+180h] [rbp+80h]
  char v112; // [rsp+190h] [rbp+90h]
  int v113; // [rsp+198h] [rbp+98h]

  v102 = -2i64;
  v83 = 0;
  v85 = 0;
  v4 = -1;
  v84 = -1;
  v5 = -1;
  v113 = -1;
  v112 = 0;
  EnterCriticalSection((LPCRITICAL_SECTION)this);
  if ( a2 )
  {
    if ( a2 == 1460 )
    {
      v6 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x100000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        v7 = (char *)this + 136;
        if ( *((_QWORD *)this + 20) >= 0x10ui64 )
          v7 = *(const char **)v7;
        v8 = 53;
LABEL_21:
        WPP_SF_sq(*((_QWORD *)v6 + 7), v8, (__int64)&WPP_4831604f5a2431d08120905ab66c1365_Traceguids, v7);
      }
    }
    else if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
           && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x100000) != 0
           && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      v9 = (char *)this + 136;
      if ( *((_QWORD *)this + 20) >= 0x10ui64 )
        v9 = *(const char **)v9;
      WPP_SF_sqD(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x36u,
        (__int64)&WPP_4831604f5a2431d08120905ab66c1365_Traceguids,
        v9);
    }
  }
  else
  {
    v6 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x100000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      v7 = (char *)this + 136;
      if ( *((_QWORD *)this + 20) >= 0x10ui64 )
        v7 = *(const char **)v7;
      v8 = 52;
      goto LABEL_21;
    }
  }
  v10 = (__int64 *)Lookup_ZoneNode(g_pCacheZone, (unsigned __int8 *)this + 178, 0i64, 0i64, 33, 0i64, 0i64, 0i64);
  v99 = v10;
  if ( v10 )
  {
    v11 = time(0i64);
    v12 = v11;
    v101 = v11;
    v87 = -1;
    acquireUpdate(DbaseLock, 0xFFFFFFFF, &v87, 1);
    v13 = (_QWORD *)*((_QWORD *)this + 6);
    v14 = (_QWORD *)*v13;
    if ( (_QWORD *)*v13 != v13 )
    {
      do
      {
        *((_BYTE *)v14 + 46) = 0;
        v14 = (_QWORD *)*v14;
      }
      while ( v14 != *((_QWORD **)this + 6) );
    }
    v15 = v10[8];
    while ( v15 )
    {
      v16 = 0;
      v110 = 0;
      if ( *(_WORD *)(v15 + 12) > 0x30u )
        break;
      if ( *(_WORD *)(v15 + 12) != 46 || ntohs(*(_WORD *)(v15 + 56)) != 48 )
      {
        if ( *(_WORD *)(v15 + 12) == 48 )
        {
          v24 = (u_short *)(v15 + 56);
          v26 = RR_CalculateDnsKeyTagEx((unsigned __int8 *)(v15 + 56), *(_WORD *)(v15 + 14));
          if ( v27 > 2u && ((unsigned __int8)v25 & *(_BYTE *)(v15 + 57)) != 0 )
            v26 -= v25;
          v28 = *(_DWORD *)(v15 + 28);
          if ( (v28 & 0x20) == 0 && ((v28 & 3) == 3 || *((_DWORD *)this + 32)) )
          {
            TrustAnchor::TrustAnchor((__int64)&v94, v15, 3);
            ++v83;
            if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x100000) != 0
              && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
            {
              v29 = (char *)this + 136;
              if ( *((_QWORD *)this + 20) >= 0x10ui64 )
                v29 = *(const char **)v29;
              WPP_SF_sqD(
                *((_QWORD *)WPP_GLOBAL_Control + 7),
                0x39u,
                (__int64)&WPP_4831604f5a2431d08120905ab66c1365_Traceguids,
                v29);
            }
            TrustPoint::FindTrustAnchor((__int64)this, &v86, &v94, 1);
            v30 = v86;
            if ( (*(_BYTE *)(v15 + 28) & 3) == 3
              && (ntohs(*v24) & 0x80u) != 0
              && (v30 == *((__int64 ***)this + 6) || *((_DWORD *)v30 + 10) != 6) )
            {
              if ( (unsigned int)Dnssec_ValidateDNSKEYRevocation(v99, v15) )
              {
                if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                  && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x100000) != 0
                  && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 3u )
                {
                  v31 = (char *)this + 136;
                  if ( *((_QWORD *)this + 20) >= 0x10ui64 )
                    v31 = *(const char **)v31;
                  WPP_SF_sqD(
                    *((_QWORD *)WPP_GLOBAL_Control + 7),
                    0x3Au,
                    (__int64)&WPP_4831604f5a2431d08120905ab66c1365_Traceguids,
                    v31);
                }
              }
              else
              {
                v16 = 1;
                v110 = 1;
              }
            }
            if ( v30 == *((__int64 ***)this + 6) )
            {
              if ( (*(_BYTE *)(v15 + 28) & 3) == 3 && ((ntohs(*v24) & 0x80u) == 0 || !v16) && (ntohs(*v24) & 1) != 0 )
              {
                v49 = 10000000i64 * v84;
                if ( v49 < 25920000000000i64 )
                  v49 = 25920000000000i64;
                if ( dword_1401B99F4 )
                  v49 = ((__int64)(v49 + ((unsigned __int128)(v49 * (__int128)(__int64)0x8E991176AAED826Bui64) >> 64)) >> 15)
                      + ((unsigned __int64)(v49
                                          + ((unsigned __int128)(v49 * (__int128)(__int64)0x8E991176AAED826Bui64) >> 64)) >> 63)
                      + 159388039;
                GetSystemTimeAsFileTime(&SystemTimeAsFileTime);
                v50 = v49 + *(_QWORD *)&SystemTimeAsFileTime;
                v98 = v49 + *(_QWORD *)&SystemTimeAsFileTime;
                if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                  && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x100000) != 0
                  && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
                {
                  v51 = (char *)this + 136;
                  if ( *((_QWORD *)this + 20) >= 0x10ui64 )
                    v51 = *(const char **)v51;
                  v52 = Dbg_FileTime((const FILETIME *)&v98);
                  v82 = (double)(int)v49 / 10000000.0;
                  WPP_SF_sqdgS(
                    *((_QWORD *)WPP_GLOBAL_Control + 7),
                    v53,
                    v54,
                    v51,
                    (char)this,
                    v26,
                    SLOBYTE(v82),
                    (__int64)v52);
                  v50 = v98;
                }
                v97 = v50;
                v96 = 1;
                TrustPoint::AddTrustAnchor(this, (const struct TrustAnchor *)&v94, 0, 0);
              }
LABEL_152:
              if ( (*(_BYTE *)(v15 + 28) & 3) == 3 && (ntohs(*v24) & 0x80u) != 0 && v110 )
              {
                v90 = 6;
                TrustAnchor::SetState((TrustAnchor *)&v94, (const enum TRUSTANCHOR_STATE *)&v90, 0);
                TrustPoint::AddTrustAnchor(this, (const struct TrustAnchor *)&v94, 0, 0);
                if ( (dword_1401B9144 & 0x10) != 0 )
                {
                  v57 = (char *)this + 136;
                  if ( *((_QWORD *)this + 20) >= 0x10ui64 )
                    v57 = *(const char **)v57;
                  Template_qsqb(v56, v55, v26, v57);
                }
                TrustPoint::DeleteTrustAnchorFromTAZone(this, &v94);
              }
LABEL_121:
              v45 = v95;
              if ( v95 )
              {
                if ( _InterlockedExchangeAdd(v95 + 2, 0xFFFFFFFF) == 1 )
                {
                  (**(void (__fastcall ***)(volatile signed __int32 *))v45)(v45);
                  if ( _InterlockedExchangeAdd(v45 + 3, 0xFFFFFFFF) == 1 )
                    (*(void (__fastcall **)(volatile signed __int32 *))(*(_QWORD *)v45 + 8i64))(v45);
                }
              }
              goto LABEL_167;
            }
            while ( 2 )
            {
              v32 = (unsigned __int16 **)(v30 + 3);
              *((_BYTE *)v30 + 46) = 1;
              v33 = v30[3];
              if ( v33 )
                LOWORD(v33) = *((_WORD *)v33 + 6);
              if ( (_WORD)v33 != 43 )
              {
                if ( (*(_BYTE *)(v15 + 28) & 3) == 3 )
                {
                  v46 = v30[3];
                  if ( v46 )
                    LOWORD(v46) = *((_WORD *)v46 + 6);
                  if ( (_WORD)v46 == 48 )
                  {
                    if ( (ntohs(*v24) & 1) == 0 )
                      goto LABEL_121;
                    if ( *((_DWORD *)v30 + 10) == 3 )
                    {
                      v89 = 4;
                      if ( TrustAnchor::SetState((TrustAnchor *)(v30 + 3), (const enum TRUSTANCHOR_STATE *)&v89, 0) )
                      {
                        TrustPoint::AddTrustAnchorToTAZone(this, (const void **)v30 + 3);
                        if ( (dword_1401B9144 & 0x10) != 0 )
                        {
                          v48 = (const unsigned __int16 *)((char *)this + 440);
                          if ( *((_QWORD *)this + 58) >= 8ui64 )
                            v48 = *(const unsigned __int16 **)v48;
                          Template_zqqb(v47, &DNS_EVENT_DNSSEC_TRUST_ANCHOR_VALID, v48, *((unsigned __int16 *)v30 + 22));
                        }
                      }
                    }
                  }
                }
                goto LABEL_152;
              }
              if ( (ntohs(*v24) & 1) == 0 )
              {
                if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                  && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x100000) != 0
                  && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 3u )
                {
                  v41 = (char *)this + 136;
                  if ( *((_QWORD *)this + 20) >= 0x10ui64 )
                    v41 = *(const char **)v41;
                  WPP_SF_sqD(
                    *((_QWORD *)WPP_GLOBAL_Control + 7),
                    0x3Bu,
                    (__int64)&WPP_4831604f5a2431d08120905ab66c1365_Traceguids,
                    v41);
                }
                v88 = 2;
                TrustAnchor::SetState((TrustAnchor *)(v30 + 3), (const enum TRUSTANCHOR_STATE *)&v88, 0);
                if ( (Microsoft_Windows_DNS_Server_ServiceEnableBits & 0x8000) != 0 )
                {
                  v44 = (char *)this + 136;
                  if ( *((_QWORD *)this + 20) >= 0x10ui64 )
                    v44 = *(const char **)v44;
                  Template_sqqb(v43, v42, v44, v26);
                }
                goto LABEL_121;
              }
              if ( (ntohs(*v24) & 0x80u) != 0 && v16 )
              {
                v34 = (__int64 *)TrustAnchor::TrustAnchor((__int64)v106, v15, 6);
                TrustAnchor::operator=((__int64)&v94, v34);
                v35 = v107;
                if ( v107 )
                {
                  if ( _InterlockedExchangeAdd(v107 + 2, 0xFFFFFFFF) == 1 )
                    goto LABEL_96;
                  goto LABEL_98;
                }
              }
              else
              {
                v36 = (__int64 *)TrustAnchor::TrustAnchor((__int64)v108, v15, 4);
                TrustAnchor::operator=((__int64)&v94, v36);
                v35 = v109;
                if ( v109 )
                {
                  if ( _InterlockedExchangeAdd(v109 + 2, 0xFFFFFFFF) == 1 )
                  {
LABEL_96:
                    (**(void (__fastcall ***)(volatile signed __int32 *))v35)(v35);
                    if ( _InterlockedExchangeAdd(v35 + 3, 0xFFFFFFFF) == 1 )
                      (*(void (__fastcall **)(volatile signed __int32 *))(*(_QWORD *)v35 + 8i64))(v35);
                  }
LABEL_98:
                  v30 = v86;
                }
              }
              TrustPoint::DeleteTrustAnchorFromTAZone(this, v32);
              std::_Hash<std::_Hmap_traits<unsigned short,TrustAnchor,stdext::hash_compare<unsigned short,std::less<unsigned short>>,std::allocator<std::pair<unsigned short const,TrustAnchor>>,1>>::erase(
                (_QWORD *)this + 5,
                &v103,
                (__int64)v30);
              --*((_DWORD *)this + 32);
              TrustPoint::AddTrustAnchor(this, (const struct TrustAnchor *)&v94, 1, 0);
              v16 = v110;
              if ( (ntohs(*v24) & 0x80u) != 0 && v110 && (dword_1401B9144 & 0x10) != 0 )
              {
                v39 = (char *)this + 136;
                if ( *((_QWORD *)this + 20) >= 0x10ui64 )
                  v39 = *(const char **)v39;
                Template_qsqb(v38, v37, v26, v39);
              }
              TrustPoint::AddTrustAnchorToTAZone(this, (const void **)&v94);
              v112 = 1;
              v30 = *TrustPoint::FindTrustAnchor((__int64)this, &v104, &v94, 1);
              v86 = v30;
              TrustAnchor::operator=((__int64)&v94, (__int64 *)&v94);
              if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x100000) != 0
                && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
              {
                v40 = (char *)this + 136;
                if ( *((_QWORD *)this + 20) >= 0x10ui64 )
                  v40 = *(const char **)v40;
                WPP_SF_sqD(
                  *((_QWORD *)WPP_GLOBAL_Control + 7),
                  0x3Cu,
                  (__int64)&WPP_4831604f5a2431d08120905ab66c1365_Traceguids,
                  v40);
              }
              continue;
            }
          }
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x100000) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 3u )
          {
            v58 = (char *)this + 136;
            if ( *((_QWORD *)this + 20) >= 0x10ui64 )
              v58 = *(const char **)v58;
            WPP_SF_sqD(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x3Eu,
              (__int64)&WPP_4831604f5a2431d08120905ab66c1365_Traceguids,
              v58);
          }
        }
        goto LABEL_167;
      }
      ++v85;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x100000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
      {
        v17 = (char *)this + 136;
        if ( *((_QWORD *)this + 20) >= 0x10ui64 )
          v17 = *(const char **)v17;
        WPP_SF_sqD(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x37u,
          (__int64)&WPP_4831604f5a2431d08120905ab66c1365_Traceguids,
          v17);
      }
      if ( ntohl(*(_DWORD *)(v15 + 60)) < v4 )
        v84 = ntohl(*(_DWORD *)(v15 + 60));
      if ( !DnsVal_IsRRSigPeriodValid(v15, v12) )
      {
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x100000) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 3u )
        {
          v23 = (char *)this + 136;
          if ( *((_QWORD *)this + 20) >= 0x10ui64 )
            v23 = *(const char **)v23;
          WPP_SF_sq(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x38u,
            (__int64)&WPP_4831604f5a2431d08120905ab66c1365_Traceguids,
            v23);
        }
        goto LABEL_167;
      }
      v18 = ntohl(*(_DWORD *)(v15 + 64));
      v19 = v12 <= v18;
      if ( v12 < v18 )
      {
        if ( v18 - v12 <= 0x80000000 )
          goto LABEL_43;
        v19 = v12 <= v18;
      }
      if ( !v19 && v12 - v18 > 0x80000000 )
      {
LABEL_43:
        v20 = v18 - v12;
        goto LABEL_45;
      }
      v20 = 0;
LABEL_45:
      if ( v20 < v5 )
      {
        v21 = ntohl(*(_DWORD *)(v15 + 64));
        v22 = v12 <= v21;
        if ( v12 >= v21 )
          goto LABEL_49;
        if ( v21 - v12 > 0x80000000 )
        {
          v22 = v12 <= v21;
LABEL_49:
          if ( v22 || v12 - v21 <= 0x80000000 )
          {
            v113 = 0;
            goto LABEL_167;
          }
        }
        v113 = v21 - v12;
      }
LABEL_167:
      v15 = *(_QWORD *)v15;
      v12 = v101;
      v5 = v113;
      v4 = v84;
    }
    v91 = -1;
    releaseUpdate(DbaseLock, &v91, 1);
    if ( v85 )
    {
      *((_DWORD *)this + 127) = v5;
      *((_DWORD *)this + 128) = v4;
    }
    v61 = v83;
    v62 = WPP_GLOBAL_Control;
    if ( !v83 )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x100000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 3u )
      {
        v73 = (char *)this + 136;
        if ( *((_QWORD *)this + 20) >= 0x10ui64 )
          v73 = *(const char **)v73;
        WPP_SF_sq(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x43u,
          (__int64)&WPP_4831604f5a2431d08120905ab66c1365_Traceguids,
          v73);
        v62 = WPP_GLOBAL_Control;
      }
      goto LABEL_227;
    }
    v63 = (__int64 *)*((_QWORD *)this + 6);
    v64 = *v63;
    if ( (__int64 *)*v63 != v63 )
    {
      do
      {
        if ( *(_BYTE *)(v64 + 46) )
        {
          if ( *(_DWORD *)(v64 + 40) != 5 )
            goto LABEL_210;
          v93 = 4;
          TrustAnchor::SetState((TrustAnchor *)(v64 + 24), (const enum TRUSTANCHOR_STATE *)&v93, 0);
          v62 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x100000) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 3u )
          {
            v72 = (char *)this + 136;
            if ( *((_QWORD *)this + 20) >= 0x10ui64 )
              v72 = *(const char **)v72;
            WPP_SF_sqD(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x42u,
              (__int64)&WPP_4831604f5a2431d08120905ab66c1365_Traceguids,
              v72);
            v62 = WPP_GLOBAL_Control;
          }
          if ( (dword_1401B9144 & 0x10) == 0 )
            goto LABEL_210;
          v67 = (const unsigned __int16 *)((char *)this + 440);
          if ( *((_QWORD *)this + 58) >= 8ui64 )
            v67 = *(const unsigned __int16 **)v67;
          v68 = &DNS_EVENT_DNSSEC_TRUST_ANCHOR_VALID;
        }
        else
        {
          if ( *(_DWORD *)(v64 + 40) == 3 )
          {
            if ( v62 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              && (*((_DWORD *)v62 + 17) & 0x100000) != 0
              && *((_BYTE *)v62 + 65) >= 4u )
            {
              v69 = (char *)this + 136;
              if ( *((_QWORD *)this + 20) >= 0x10ui64 )
                v69 = *(const char **)v69;
              WPP_SF_sqqD(*((_QWORD *)v62 + 7), v59, v60, v69);
            }
            v70 = *(_QWORD *)(v64 + 24);
            if ( v70 )
              v71 = *(_WORD *)(v70 + 12);
            else
              v71 = 0;
            if ( v71 == 43 )
              --*((_DWORD *)this + 32);
            v64 = *(_QWORD *)(*std::_Hash<std::_Hmap_traits<unsigned short,TrustAnchor,stdext::hash_compare<unsigned short,std::less<unsigned short>>,std::allocator<std::pair<unsigned short const,TrustAnchor>>,1>>::erase(
                                 (_QWORD *)this + 5,
                                 &v105,
                                 v64)
                            + 8i64);
            goto LABEL_198;
          }
          if ( *(_DWORD *)(v64 + 40) != 4 )
            goto LABEL_210;
          v92 = 5;
          TrustAnchor::SetState((TrustAnchor *)(v64 + 24), (const enum TRUSTANCHOR_STATE *)&v92, 0);
          v62 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x100000) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 3u )
          {
            v66 = (char *)this + 136;
            if ( *((_QWORD *)this + 20) >= 0x10ui64 )
              v66 = *(const char **)v66;
            WPP_SF_sqD(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x40u,
              (__int64)&WPP_4831604f5a2431d08120905ab66c1365_Traceguids,
              v66);
            v62 = WPP_GLOBAL_Control;
          }
          if ( (Microsoft_Windows_DNS_Server_ServiceEnableBits & 0x10000) == 0 )
            goto LABEL_210;
          v67 = (const unsigned __int16 *)((char *)this + 440);
          if ( *((_QWORD *)this + 58) >= 8ui64 )
            v67 = *(const unsigned __int16 **)v67;
          v68 = (const EVENT_DESCRIPTOR *)&DNS_EVENT_DNSSEC_TRUST_ANCHOR_MISSING;
        }
        Template_zqqb(v65, v68, v67, *(unsigned __int16 *)(v64 + 44));
LABEL_198:
        v62 = WPP_GLOBAL_Control;
LABEL_210:
        v64 = *(_QWORD *)v64;
      }
      while ( v64 != *((_QWORD *)this + 6) );
    }
  }
  else
  {
    v62 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x100000) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 3u )
    {
      goto LABEL_227;
    }
    v74 = (char *)this + 136;
    if ( *((_QWORD *)this + 20) >= 0x10ui64 )
      v74 = *(const char **)v74;
    WPP_SF_sq(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x3Fu,
      (__int64)&WPP_4831604f5a2431d08120905ab66c1365_Traceguids,
      v74);
    v62 = WPP_GLOBAL_Control;
    v61 = 0;
  }
  if ( v61 )
  {
    *((_QWORD *)this + 61) = *((_QWORD *)this + 60);
    *((_DWORD *)this + 126) = 0;
    TrustPoint::ScheduleActiveRefresh((unsigned int *)this, 0, 0);
    goto LABEL_246;
  }
LABEL_227:
  if ( a2 )
  {
    if ( v62 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)v62 + 17) & 0x100000) != 0
      && *((_BYTE *)v62 + 65) >= 4u )
    {
      v75 = (char *)this + 136;
      if ( *((_QWORD *)this + 20) >= 0x10ui64 )
        v75 = *(const char **)v75;
      WPP_SF_sqD(*((_QWORD *)v62 + 7), 0x44u, (__int64)&WPP_4831604f5a2431d08120905ab66c1365_Traceguids, v75);
    }
    *((_DWORD *)this + 126) = a2;
  }
  else
  {
    if ( v62 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)v62 + 17) & 0x100000) != 0
      && *((_BYTE *)v62 + 65) >= 3u )
    {
      v76 = (char *)this + 136;
      if ( *((_QWORD *)this + 20) >= 0x10ui64 )
        v76 = *(const char **)v76;
      WPP_SF_sq(*((_QWORD *)v62 + 7), 0x45u, (__int64)&WPP_4831604f5a2431d08120905ab66c1365_Traceguids, v76);
    }
    *((_DWORD *)this + 126) = 9002;
  }
  TrustPoint::ScheduleActiveRefresh((unsigned int *)this, 1, 0);
  if ( (Microsoft_Windows_DNS_Server_ServiceEnableBits & 0x8000) != 0 )
  {
    v79 = (char *)this + 136;
    if ( *((_QWORD *)this + 20) >= 0x10ui64 )
      v79 = *(const char **)v79;
    Template_sqxqb(v78, v77, v79, *((_DWORD *)this + 126), *((_QWORD *)this + 62));
  }
LABEL_246:
  TrustPoint::UpdateTrustPointState((struct _RTL_CRITICAL_SECTION *)this);
  g_bRFC5011_Trust_Points_Dirty = 1;
  if ( v112
    && (unsigned int)Dnssec_ClearCacheAtAndBelowTrustPoint(v80, (unsigned __int8 *)this + 176)
    && WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x100000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    v81 = (char *)this + 136;
    if ( *((_QWORD *)this + 20) >= 0x10ui64 )
      v81 = *(const char **)v81;
    WPP_SF_sqD(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x24u,
      (__int64)&WPP_4831604f5a2431d08120905ab66c1365_Traceguids,
      v81);
  }
  LeaveCriticalSection((LPCRITICAL_SECTION)this);
  SetEvent(*((HANDLE *)this + 66));
}
// 1400E1D9E: variable 'v27' is possibly undefined
// 1400E1DA0: variable 'v25' is possibly undefined
// 1400E2057: variable 'v38' is possibly undefined
// 1400E2057: variable 'v37' is possibly undefined
// 1400E2191: variable 'v43' is possibly undefined
// 1400E2191: variable 'v42' is possibly undefined
// 1400E2281: variable 'v47' is possibly undefined
// 1400E2393: variable 'v53' is possibly undefined
// 1400E2393: variable 'v54' is possibly undefined
// 1400E2425: variable 'v56' is possibly undefined
// 1400E2425: variable 'v55' is possibly undefined
// 1400E25D6: variable 'v65' is possibly undefined
// 1400E2628: variable 'v59' is possibly undefined
// 1400E2628: variable 'v60' is possibly undefined
// 1400E28F3: variable 'v78' is possibly undefined
// 1400E28F3: variable 'v77' is possibly undefined
// 1400E2917: variable 'v80' is possibly undefined
// 140185140: using guessed type __int64 (__fastcall *_guard_dispatch_icall_fptr)(_QWORD, _QWORD);
// 1401863C8: using guessed type EVENT_DESCRIPTOR DNS_EVENT_DNSSEC_TRUST_ANCHOR_VALID;
// 1401B9140: using guessed type int Microsoft_Windows_DNS_Server_ServiceEnableBits;
// 1401B9144: using guessed type int dword_1401B9144;
// 1401B9168: using guessed type bool g_bRFC5011_Trust_Points_Dirty;
// 1401B99F4: using guessed type int dword_1401B99F4;
// 1401EC5E8: using guessed type __int64 DbaseLock;
// 1401EC628: using guessed type __int64 g_pCacheZone;
// 1400E1A08: using guessed type char var_90[8];
// 1400E1A08: using guessed type char var_68[8];
