//----- (0000000140124544) ----------------------------------------------------
void __fastcall DnsSign::CHashObject::Start(BCRYPT_HASH_HANDLE *phHash, BCRYPT_ALG_HANDLE hAlgorithm)
{
  int Property; // eax
  int v5; // ebx
  int Hash; // eax
  int v7; // ebx
  UCHAR pbOutput[4]; // [rsp+48h] [rbp-49h] BYREF
  ULONG pcbResult; // [rsp+4Ch] [rbp-45h] BYREF
  __int64 v10; // [rsp+50h] [rbp-41h]
  char v11[56]; // [rsp+58h] [rbp-39h] BYREF
  char pExceptionObject[56]; // [rsp+90h] [rbp-1h] BYREF

  v10 = -2i64;
  pcbResult = 0;
  *(_DWORD *)pbOutput = 0;
  Property = BCryptGetProperty(hAlgorithm, L"ObjectLength", pbOutput, 4u, &pcbResult, 0);
  v5 = Property;
  if ( Property < 0 )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 7) & 0x100000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 25) >= 4u )
    {
      WPP_SF_D(
        *((_QWORD *)WPP_GLOBAL_Control + 2),
        0xAu,
        (__int64)&WPP_52544f7432c93905eab44474fa1b3f20_Traceguids,
        Property);
    }
    DnsSign::CRunTimeException::CRunTimeException((DnsSign::CRunTimeException *)v11, v5);
    DnsSign::CException::AppendErrorMessageByID((DnsSign::CException *)v11, 0xD6DC1u);
    DnsSign::CRunTimeException::CRunTimeException(
      (DnsSign::CRunTimeException *)pExceptionObject,
      (const struct DnsSign::CRunTimeException *)v11);
    CxxThrowException_0(pExceptionObject, (_ThrowInfo *)&TI2_AVCRunTimeException_DnsSign__);
  }
  std::vector<unsigned char>::resize((__int64 *)phHash + 1, *(unsigned int *)pbOutput);
  Hash = BCryptCreateHash(hAlgorithm, phHash, (PUCHAR)phHash[1], *(ULONG *)pbOutput, 0i64, 0, 0);
  v7 = Hash;
  if ( Hash < 0 )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 7) & 0x100000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 25) >= 4u )
    {
      WPP_SF_D(
        *((_QWORD *)WPP_GLOBAL_Control + 2),
        0xBu,
        (__int64)&WPP_52544f7432c93905eab44474fa1b3f20_Traceguids,
        Hash);
    }
    DnsSign::CRunTimeException::CRunTimeException((DnsSign::CRunTimeException *)v11, v7);
    DnsSign::CException::AppendErrorMessageByID((DnsSign::CException *)v11, 0xD6DC1u);
    DnsSign::CRunTimeException::CRunTimeException(
      (DnsSign::CRunTimeException *)pExceptionObject,
      (const struct DnsSign::CRunTimeException *)v11);
    CxxThrowException_0(pExceptionObject, (_ThrowInfo *)&TI2_AVCRunTimeException_DnsSign__);
  }
}
