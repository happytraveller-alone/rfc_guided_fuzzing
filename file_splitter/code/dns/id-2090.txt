//----- (0000000140106314) ----------------------------------------------------
__int64 __fastcall DnsOls_DeleteNsec3(
        struct _zone_info *a1,
        struct _DnsTreeNode *a2,
        __int64 a3,
        struct _Dbase_Record *a4,
        __int64 a5,
        __int64 a6,
        struct _DnsUpdateList *a7)
{
  unsigned int AppendUpdate; // edi
  __int64 v8; // rbx
  struct _DnsUpdateList *v10; // r14
  __int16 v11; // r12
  __int64 *Nsec3Node; // rax
  __int64 v13; // rsi
  __int64 v14; // r8
  struct _DnsTreeNode *v15; // rbp
  struct _DnsTreeNode *NextNsec3Node; // rdi
  struct _Dbase_Record *v17; // rax
  __int64 v18; // r15
  unsigned int v19; // edx
  __int64 v20; // r8
  char *v21; // rax
  unsigned __int16 v22; // dx
  char *v23; // rax
  char *v24; // rax
  int v26; // [rsp+88h] [rbp+10h] BYREF
  int v27; // [rsp+8Ch] [rbp+14h]
  struct _DnsTreeNode *v28; // [rsp+90h] [rbp+18h] BYREF
  struct _Dbase_Record *v29; // [rsp+98h] [rbp+20h]

  v29 = a4;
  v27 = HIDWORD(a2);
  AppendUpdate = 0;
  v8 = a3;
  v26 = 0;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
  {
    WPP_SF_ss(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x25u,
      (__int64)&WPP_41961b29e2683d0b96cfd252d798ca95_Traceguids,
      (const char *)(a3 + 102),
      *((_QWORD *)a1 + 2));
    a4 = v29;
  }
  if ( (*(_DWORD *)(v8 + 84) & 0x88880000) == -2004353024 )
  {
    v8 = *(_QWORD *)(v8 + 8);
    if ( *(_QWORD *)(v8 + 64) )
      *(_DWORD *)(v8 + 92) |= 0x1000000u;
  }
  v10 = a7;
  v11 = a6;
  while ( 1 )
  {
    Nsec3Node = (__int64 *)DnsOls_FindOrCreateNsec3Node(a1, a2, (struct _DnsTreeNode *)v8, a4, 0);
    v13 = (__int64)Nsec3Node;
    if ( !Nsec3Node )
      goto LABEL_19;
    v14 = *Nsec3Node;
    v28 = 0i64;
    NTree_FindBestNSEC3Node((__int64 *)&v28, (__int64)Nsec3Node, v14, 1);
    v15 = v28;
    if ( !v28 )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        v24 = Dbg_NodeName(v8);
        WPP_SF_s(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x26u,
          (__int64)&WPP_41961b29e2683d0b96cfd252d798ca95_Traceguids,
          v24);
      }
      return 13;
    }
    NextNsec3Node = DnsOls_FindNextNsec3Node(a1, (struct _DnsTreeNode *)v13);
    v17 = DnsOls_CurrentNsec3RecordForNode(v15, v10, &v26);
    v18 = (__int64)v17;
    if ( !v17 )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        v23 = Dbg_NodeName((__int64)v15);
        WPP_SF_s(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x28u,
          (__int64)&WPP_41961b29e2683d0b96cfd252d798ca95_Traceguids,
          v23);
      }
      return (unsigned int)v26;
    }
    v19 = *((unsigned __int8 *)NextNsec3Node + 101);
    v20 = (__int64)v17 + *((unsigned __int8 *)v17 + 60) + 62;
    v26 = *((unsigned __int8 *)v17 + 61);
    Dns_Base32HexToBinary((__int64)NextNsec3Node + 102, v19, v20, &v26);
    AppendUpdate = DnsOls_CreateAppendUpdate(v10, v15, v18, 50);
    if ( AppendUpdate )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        v21 = Dbg_NodeName((__int64)v15);
        v22 = 41;
        goto LABEL_42;
      }
      return AppendUpdate;
    }
    AppendUpdate = DnsOls_CreateAppendUpdate(v10, v15, 0i64, 46);
    if ( AppendUpdate )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        v21 = Dbg_NodeName((__int64)v15);
        v22 = 42;
        goto LABEL_42;
      }
      return AppendUpdate;
    }
    AppendUpdate = DnsOls_SignRecordSet(a5, (__int64)a1, (__int64)v15, v18, 1ui64, v11, v10);
    if ( AppendUpdate )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        v21 = Dbg_NodeName((__int64)v15);
        v22 = 43;
        goto LABEL_42;
      }
      return AppendUpdate;
    }
    AppendUpdate = DnsOls_CreateAppendUpdate(v10, (struct _DnsTreeNode *)v13, 0i64, 50);
    if ( AppendUpdate )
      break;
    v26 = DnsOls_CreateAppendUpdate(v10, (struct _DnsTreeNode *)v13, 0i64, 46);
    AppendUpdate = v26;
    if ( v26 )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        v21 = Dbg_NodeName(v13);
        v22 = 45;
LABEL_42:
        WPP_SF_s(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          v22,
          (__int64)&WPP_41961b29e2683d0b96cfd252d798ca95_Traceguids,
          v21);
        return AppendUpdate;
      }
      return AppendUpdate;
    }
    if ( NTree_NodeHasNsecRecords(v13, 0x32u, 0) )
      *(_DWORD *)(v13 + 92) |= 0x1000000u;
LABEL_19:
    v8 = *(_QWORD *)v8;
    if ( (*(_DWORD *)(v8 + 92) & 0x100) != 0 || NTree_NodeOrChildHasRecords(v8, 0) )
      return AppendUpdate;
    a4 = v29;
  }
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
  {
    v21 = Dbg_NodeName(v13);
    v22 = 44;
    goto LABEL_42;
  }
  return AppendUpdate;
}
// 1401063BF: variable 'a2' is possibly undefined
