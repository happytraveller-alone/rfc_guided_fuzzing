//----- (0000000140166A0C) ----------------------------------------------------
__int64 __fastcall Dns_MaintainNtdsDependency(int a1, _DWORD *a2, int *a3)
{
  int v3; // ebx
  struct _QUERY_SERVICE_CONFIGA *v4; // r13
  struct _QUERY_SERVICE_CONFIGA *v5; // rsi
  char *lpDependencies; // r14
  size_t v7; // r12
  SC_HANDLE v8; // rax
  SC_HANDLE v9; // rdi
  unsigned int LastError; // r15d
  unsigned int ServiceConfig; // eax
  int v12; // edi
  LPSTR v13; // rbx
  LPSTR v14; // r14
  bool v15; // zf
  __int64 v16; // rax
  __int64 v17; // rax
  size_t v18; // rbx
  int v19; // edi
  char *v20; // rax
  char *v22; // rax
  LPSTR v23; // rdi
  char *v24; // rbx
  size_t v25; // r8
  __int64 v26; // rax
  char *v27; // rbx
  __int64 v28; // rax
  unsigned int v29; // ebx
  DWORD v30; // [rsp+68h] [rbp-29h] BYREF
  enum _NT_PRODUCT_TYPE ProductType; // [rsp+6Ch] [rbp-25h] BYREF
  SC_HANDLE v32; // [rsp+70h] [rbp-21h]
  int v33; // [rsp+78h] [rbp-19h]
  struct _QUERY_SERVICE_CONFIGA *v34; // [rsp+80h] [rbp-11h] BYREF
  struct _QUERY_SERVICE_CONFIGA *v35; // [rsp+88h] [rbp-9h] BYREF
  SC_HANDLE hSCObject; // [rsp+90h] [rbp-1h] BYREF
  int v40; // [rsp+110h] [rbp+7Fh]

  v3 = 0;
  v40 = 0;
  hSCObject = 0i64;
  v4 = 0i64;
  v35 = 0i64;
  v5 = 0i64;
  v34 = 0i64;
  v30 = 0;
  lpDependencies = 0i64;
  v33 = 0;
  v7 = 0i64;
  v8 = OpenSCManagerA(0i64, 0i64, 0xC0000000);
  v32 = v8;
  v9 = v8;
  if ( !v8 )
  {
    LastError = GetLastError();
    goto LABEL_41;
  }
  LastError = getServiceConfig(v8, "DNS", &hSCObject, &v35, 0i64);
  if ( LastError )
  {
    v4 = v35;
    goto LABEL_41;
  }
  ServiceConfig = getServiceConfig(v9, "NTDS", 0i64, &v34, &v30);
  LastError = ServiceConfig;
  if ( ServiceConfig == 1060 )
  {
    v12 = 0;
  }
  else
  {
    if ( ServiceConfig )
    {
      v4 = v35;
      v3 = 0;
      v5 = v34;
      goto LABEL_41;
    }
    v12 = 1;
  }
  v4 = v35;
  if ( !v35 )
    goto LABEL_25;
  v13 = v35->lpDependencies;
  if ( !v13 || !*v13 )
    goto LABEL_25;
  v14 = 0i64;
  do
  {
    v15 = _stricmp(v13, "NTDS") == 0;
    v16 = -1i64;
    if ( v15 )
      v14 = v13;
    do
      ++v16;
    while ( v13[v16] );
    v7 += v16 + 1;
    v17 = -1i64;
    do
      ++v17;
    while ( v13[v17] );
    v13 += v17 + 1;
  }
  while ( *v13 );
  v15 = v14 == 0i64;
  lpDependencies = 0i64;
  if ( !v15 )
  {
    v5 = v34;
    if ( a1 || !v12 || v34 && v34->dwStartType == 4 )
    {
      v33 = 1;
      v18 = v7;
      goto LABEL_31;
    }
  }
  else
  {
LABEL_25:
    if ( a1 || !v12 )
    {
      v5 = v34;
    }
    else
    {
      v5 = v34;
      if ( v34 && v34->dwStartType != 4 )
      {
        v18 = v7 + 9;
        v19 = 1;
        if ( v30 == 4 )
        {
LABEL_33:
          if ( v18 )
          {
            v20 = pDnsAllocFunction
                ? (char *)pDnsAllocFunction((unsigned int)v18)
                : (char *)LocalAlloc(0x40u, (unsigned int)v18);
            lpDependencies = v20;
            if ( !v20 )
            {
              LastError = 14;
              goto LABEL_39;
            }
          }
          if ( v19 && lpDependencies )
          {
            if ( v7 )
            {
              memcpy_0(lpDependencies, v4->lpDependencies, v7);
              v22 = &lpDependencies[v7];
            }
            else
            {
              v22 = lpDependencies;
            }
            *(_DWORD *)v22 = 1396986958;
            *((_WORD *)v22 + 2) = 0;
          }
          else if ( v33 )
          {
            if ( !lpDependencies )
              goto LABEL_72;
            v23 = v4->lpDependencies;
            v24 = lpDependencies;
            if ( !*v23 )
              goto LABEL_67;
            do
            {
              if ( _stricmp(v23, "NTDS") )
              {
                v25 = -1i64;
                do
                  ++v25;
                while ( v23[v25] );
                memcpy_0(v24, v23, v25);
                v26 = -1i64;
                do
                  ++v26;
                while ( v23[v26] );
                v27 = &v24[v26];
                *v27 = 0;
                v24 = v27 + 1;
              }
              v28 = -1i64;
              do
                ++v28;
              while ( v23[v28] );
              v23 += v28 + 1;
            }
            while ( *v23 );
            if ( v24 == lpDependencies )
LABEL_67:
              *v24++ = 0;
            *v24 = 0;
          }
          if ( lpDependencies
            && !ChangeServiceConfigA(
                  hSCObject,
                  0xFFFFFFFF,
                  0xFFFFFFFF,
                  0xFFFFFFFF,
                  0i64,
                  0i64,
                  0i64,
                  lpDependencies,
                  0i64,
                  0i64,
                  0i64) )
          {
            LastError = GetLastError();
            goto LABEL_39;
          }
LABEL_72:
          v3 = v40;
          v9 = v32;
          if ( !v40 )
            goto LABEL_41;
          v29 = 0;
          while ( 1 )
          {
            if ( a2 && *a2 )
            {
              LastError = 0;
              goto LABEL_40;
            }
            LastError = getServiceConfig(v9, "NTDS", 0i64, 0i64, &v30);
            if ( LastError )
              goto LABEL_79;
            if ( v30 == 4 )
            {
              v3 = 0;
              goto LABEL_41;
            }
            if ( v30 != 2 )
            {
LABEL_79:
              if ( v29 > 0x1E )
                goto LABEL_40;
            }
            Sleep(0x7D0u);
            v29 += 2;
            if ( v29 >= 0xB4 )
              goto LABEL_40;
          }
        }
        ProductType = 0;
        if ( !RtlGetNtProductType(&ProductType) || ProductType == NtProductLanManNt )
        {
          v40 = 1;
          goto LABEL_33;
        }
LABEL_31:
        v19 = 0;
        goto LABEL_33;
      }
    }
  }
LABEL_39:
  v9 = v32;
LABEL_40:
  v3 = v40;
LABEL_41:
  Dns_Free(lpDependencies);
  Dns_Free(v4);
  Dns_Free(v5);
  if ( hSCObject )
    CloseServiceHandle(hSCObject);
  if ( v9 )
    CloseServiceHandle(v9);
  if ( a3 )
    *a3 = v3;
  return LastError;
}
// 140185140: using guessed type __int64 (__fastcall *_guard_dispatch_icall_fptr)(_QWORD, _QWORD);
// 1401B9ED0: using guessed type __int64 (__fastcall *pDnsAllocFunction)(_QWORD);
