//----- (00000001400A6674) ----------------------------------------------------
__int64 __fastcall AddPolicyToRegistry(__int64 a1, __int64 a2, int a3)
{
  unsigned int v5; // ebx
  const WCHAR *v6; // rdx
  HKEY v7; // rax
  HKEY v8; // r10
  CDnsClientSubnetRecordsTrie *v9; // rcx
  unsigned __int16 v10; // dx
  const char *v11; // rax
  HKEY v12; // r13
  int v13; // r12d
  const WCHAR *v14; // r13
  int v15; // eax
  __int64 v16; // r13
  __int64 v17; // rax
  __int64 v18; // rcx
  const wchar_t *v19; // r12
  BYTE *v20; // rcx
  __int64 v21; // rax
  int v22; // eax
  CDnsClientSubnetRecordsTrie *v23; // rcx
  unsigned __int16 v24; // dx
  _DWORD *v25; // rax
  unsigned __int64 v26; // r12
  STRSAFE_LPWSTR *v27; // r9
  unsigned int v28; // ebx
  HRESULT v29; // eax
  wchar_t *v30; // rax
  STRSAFE_LPWSTR *v31; // r9
  STRSAFE_LPWSTR *v32; // r9
  STRSAFE_LPWSTR *v33; // r9
  CDnsClientSubnetRecordsTrie *v35; // rcx
  unsigned __int16 v36; // dx
  size_t *pcchRemaining; // [rsp+20h] [rbp-49h]
  size_t *pcchRemaininga; // [rsp+20h] [rbp-49h]
  size_t *pcchRemainingb; // [rsp+20h] [rbp-49h]
  DWORD dwFlags; // [rsp+28h] [rbp-41h]
  DWORD dwFlagsa; // [rsp+28h] [rbp-41h]
  DWORD dwFlagsb; // [rsp+28h] [rbp-41h]
  int v43; // [rsp+40h] [rbp-29h] BYREF
  HKEY hKey; // [rsp+48h] [rbp-21h]
  STRSAFE_LPWSTR pszDest; // [rsp+50h] [rbp-19h]
  int v46; // [rsp+58h] [rbp-11h]
  wchar_t Buffer[28]; // [rsp+60h] [rbp-9h] BYREF

  v46 = a3;
  pszDest = 0i64;
  v5 = 0;
  if ( a1 )
  {
    if ( *(_DWORD *)(a1 + 372) )
      v6 = *(const WCHAR **)(a1 + 24);
    else
      v6 = L"..Cache";
  }
  else
  {
    v6 = 0i64;
  }
  v7 = Reg_OpenPolicy(0i64, v6, *(const unsigned __int16 **)a2, *(_DWORD *)(a2 + 8));
  hKey = v7;
  v8 = v7;
  if ( !v7 )
  {
    v5 = 1011;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      WPP_SF_S(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x6Eu,
        (__int64)&WPP_44543417c05739f4a9c82c388f6d5836_Traceguids,
        *(const unsigned __int16 **)a2);
    }
    return v5;
  }
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    pcchRemaining = (size_t *)v7;
    WPP_SF_Sq(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x6Fu,
      (__int64)&WPP_44543417c05739f4a9c82c388f6d5836_Traceguids,
      *(const unsigned __int16 **)a2);
    v8 = hKey;
  }
  if ( a3 )
  {
    v12 = hKey;
    if ( (*(_DWORD *)(a2 + 48) & 0x80000) == 0 )
      goto LABEL_33;
    goto LABEL_27;
  }
  v43 = *(_DWORD *)(a2 + 12);
  v5 = Reg_SetValue(0x10000000, v8, 0i64, "AppliesOn", 4u, (BYTE *)&v43, 4u);
  if ( v5 )
  {
    v9 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      v10 = 112;
      v11 = "AppliesOn";
LABEL_121:
      WPP_SF_Ds(*((_QWORD *)v9 + 7), v10, (__int64)&WPP_44543417c05739f4a9c82c388f6d5836_Traceguids, v5, (__int64)v11);
      goto LABEL_122;
    }
    goto LABEL_122;
  }
  v43 = *(_DWORD *)(a2 + 16);
  v12 = hKey;
  v5 = Reg_SetValue(0x10000000, hKey, 0i64, "Action", 4u, (BYTE *)&v43, 4u);
  if ( !v5 )
  {
LABEL_27:
    v43 = *(_DWORD *)(a2 + 24);
    v5 = Reg_SetValue(0x10000000, v12, 0i64, "IsEnabled", 4u, (BYTE *)&v43, 4u);
    if ( v5 )
    {
      v9 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        v10 = 114;
        v11 = "IsEnabled";
        goto LABEL_121;
      }
      goto LABEL_122;
    }
    if ( !a3 )
    {
LABEL_34:
      v43 = *(_DWORD *)(a2 + 28);
      v5 = Reg_SetValue(0x10000000, v12, 0i64, "ProcessingOrder", 4u, (BYTE *)&v43, 4u);
      if ( v5 )
      {
        v9 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          v10 = 115;
          v11 = "ProcessingOrder";
          goto LABEL_121;
        }
        goto LABEL_122;
      }
      if ( !a3 )
      {
LABEL_41:
        v43 = *(_DWORD *)(a2 + 20);
        v5 = Reg_SetValue(0x10000000, v12, 0i64, "Condition", 4u, (BYTE *)&v43, 4u);
        if ( v5 )
        {
          v9 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            v10 = 116;
            v11 = "Condition";
            goto LABEL_121;
          }
          goto LABEL_122;
        }
        if ( !a3 )
        {
LABEL_66:
          v16 = -1i64;
          v17 = 0i64;
          v43 = 0;
          if ( *(_DWORD *)(a2 + 56) )
          {
            while ( 1 )
            {
              v18 = *(_QWORD *)(a2 + 8 * v17 + 64);
              if ( *(_DWORD *)v18 )
              {
                switch ( *(_DWORD *)v18 )
                {
                  case 1:
                    v19 = L"TransportProtocol";
                    break;
                  case 2:
                    v19 = L"NetworkProtocol";
                    break;
                  case 3:
                    v19 = L"InterfaceIP";
                    break;
                  case 4:
                    v19 = L"FQDN";
                    break;
                  case 5:
                    v19 = L"QType";
                    break;
                  default:
                    v19 = L"TimeOfDay";
                    if ( *(_DWORD *)v18 != 6 )
                      v19 = 0i64;
                    break;
                }
              }
              else
              {
                v19 = L"ClientSubnet";
              }
              v20 = *(BYTE **)(v18 + 8);
              v21 = -1i64;
              do
                ++v21;
              while ( *(_WORD *)&v20[2 * v21] );
              v22 = Reg_SetValue(0x10000000, hKey, 0i64, (const CHAR *)v19, 0xF0000001, v20, 2 * (int)v21 + 2);
              v5 = v22;
              if ( v22 )
                break;
              v17 = (unsigned int)(v43 + 1);
              v43 = v17;
              if ( (unsigned int)v17 >= *(_DWORD *)(a2 + 56) )
                goto LABEL_89;
            }
            v23 = WPP_GLOBAL_Control;
            if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
              || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
            {
              goto LABEL_122;
            }
            v24 = 118;
          }
          else
          {
LABEL_89:
            v19 = L"Content";
            if ( !v46 )
              goto LABEL_101;
            if ( (*(_DWORD *)(a2 + 48) & 0x40000) == 0 )
              goto LABEL_122;
            v22 = RegDeleteValueW(hKey, L"Content");
            v5 = v22;
            if ( !v22 )
            {
LABEL_101:
              v25 = *(_DWORD **)(a2 + 40);
              if ( !v25 || !*v25 )
                goto LABEL_122;
              v26 = 520i64 * (unsigned int)*v25;
              if ( v26 <= 0xFFFFFFFF )
              {
                pszDest = (STRSAFE_LPWSTR)Mem_AllocZero(
                                            (unsigned int)v26,
                                            0i64,
                                            "ds\\dns\\server\\server\\srvcfg.c",
                                            6631);
                if ( !pszDest )
                {
                  v5 = 14;
                  goto LABEL_122;
                }
                memset_0(Buffer, 0, 0x32ui64);
                v28 = 0;
                if ( !**(_DWORD **)(a2 + 40) )
                {
                  do
LABEL_115:
                    ++v16;
                  while ( pszDest[v16] );
                  v5 = Reg_SetValue(
                         0x10000000,
                         hKey,
                         0i64,
                         (const CHAR *)L"Content",
                         0xF0000001,
                         (BYTE *)pszDest,
                         2 * (int)v16 + 2);
                  if ( v5 )
                  {
                    v9 = WPP_GLOBAL_Control;
                    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
                      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
                    {
                      v10 = 122;
                      v11 = "Content";
                      goto LABEL_121;
                    }
                  }
                  goto LABEL_122;
                }
                while ( 1 )
                {
                  if ( v28 )
                  {
                    v29 = StringCchCatExW(pszDest, (unsigned int)v26, L";", v27, pcchRemaining, dwFlags);
                    if ( v29 < 0 )
                      break;
                  }
                  v30 = _itow(*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + 8i64 * v28 + 8) + 8i64), Buffer, 10);
                  v29 = StringCchCatExW(pszDest, (unsigned int)v26, v30, v31, pcchRemaining, dwFlags);
                  if ( v29 < 0
                    || (v29 = StringCchCatExW(pszDest, (unsigned int)v26, L",", v32, pcchRemaininga, dwFlagsa), v29 < 0)
                    || (v29 = StringCchCatExW(
                                pszDest,
                                (unsigned int)v26,
                                **(STRSAFE_LPCWSTR **)(*(_QWORD *)(a2 + 40) + 8i64 * v28 + 8),
                                v33,
                                pcchRemainingb,
                                dwFlagsb),
                        v29 < 0) )
                  {
                    v35 = WPP_GLOBAL_Control;
                    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
                      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
                    {
                      v36 = 121;
                      goto LABEL_129;
                    }
                    goto LABEL_104;
                  }
                  if ( ++v28 >= **(_DWORD **)(a2 + 40) )
                  {
                    v16 = -1i64;
                    goto LABEL_115;
                  }
                }
                v35 = WPP_GLOBAL_Control;
                if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                  && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
                  && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
                {
                  v36 = 120;
LABEL_129:
                  WPP_SF_D(
                    *((_QWORD *)v35 + 7),
                    v36,
                    (__int64)&WPP_44543417c05739f4a9c82c388f6d5836_Traceguids,
                    (unsigned __int16)v29);
                }
              }
LABEL_104:
              v5 = 13;
              goto LABEL_122;
            }
            v23 = WPP_GLOBAL_Control;
            if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
              || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
            {
              goto LABEL_122;
            }
            v24 = 119;
          }
          WPP_SF_DS(
            *((_QWORD *)v23 + 7),
            v24,
            (__int64)&WPP_44543417c05739f4a9c82c388f6d5836_Traceguids,
            v22,
            (__int64)v19);
          goto LABEL_122;
        }
LABEL_47:
        v13 = 0;
        while ( 1 )
        {
          if ( v13 )
          {
            switch ( v13 )
            {
              case 1:
                v14 = L"TransportProtocol";
                v15 = *(_DWORD *)(a2 + 48) & 0x20;
                break;
              case 2:
                v14 = L"NetworkProtocol";
                v15 = *(_DWORD *)(a2 + 48) & 0x40;
                break;
              case 3:
                v14 = L"InterfaceIP";
                v15 = *(_DWORD *)(a2 + 48) & 4;
                break;
              case 4:
                v14 = L"FQDN";
                v15 = *(_DWORD *)(a2 + 48) & 1;
                break;
              case 5:
                v14 = L"QType";
                v15 = *(_DWORD *)(a2 + 48) & 8;
                break;
              default:
                v14 = L"TimeOfDay";
                v15 = *(_DWORD *)(a2 + 48) & 0x10;
                break;
            }
          }
          else
          {
            v14 = L"ClientSubnet";
            v15 = *(_DWORD *)(a2 + 48) & 2;
          }
          if ( v15 )
          {
            v5 = RegDeleteValueW(hKey, v14);
            if ( v5 == 2 )
              v5 = 0;
            if ( v5 )
              break;
          }
          if ( (unsigned int)++v13 >= 7 )
            goto LABEL_66;
        }
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          WPP_SF_Ds(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x75u,
            (__int64)&WPP_44543417c05739f4a9c82c388f6d5836_Traceguids,
            v5,
            (__int64)v14);
        }
        goto LABEL_122;
      }
LABEL_40:
      if ( (*(_DWORD *)(a2 + 48) & 0x10000) == 0 )
        goto LABEL_47;
      goto LABEL_41;
    }
LABEL_33:
    if ( (*(_DWORD *)(a2 + 48) & 0x20000) == 0 )
      goto LABEL_40;
    goto LABEL_34;
  }
  v9 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    v10 = 113;
    v11 = "Action";
    goto LABEL_121;
  }
LABEL_122:
  RegCloseKey(hKey);
  if ( pszDest )
    Mem_Free(pszDest, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\srvcfg.c", 6687);
  return v5;
}
// 1400A68F6: conditional instruction was optimized away because r12d.4!=0
// 1400A697A: conditional instruction was optimized away because r12d.4!=0
// 1400A6A79: conditional instruction was optimized away because r12d.4==6
// 1400A6CE5: variable 'v27' is possibly undefined
// 1400A6CE5: variable 'pcchRemaining' is possibly undefined
// 1400A6CE5: variable 'dwFlags' is possibly undefined
// 1400A6D1D: variable 'v31' is possibly undefined
// 1400A6D38: variable 'v32' is possibly undefined
// 1400A6D38: variable 'pcchRemaininga' is possibly undefined
// 1400A6D38: variable 'dwFlagsa' is possibly undefined
// 1400A6D5B: variable 'v33' is possibly undefined
// 1400A6D5B: variable 'pcchRemainingb' is possibly undefined
// 1400A6D5B: variable 'dwFlagsb' is possibly undefined
// 1401882F8: using guessed type wchar_t aTransportproto[18];
// 140188320: using guessed type wchar_t aNetworkprotoco[16];
// 140188340: using guessed type wchar_t aInterfaceip[12];
// 140188358: using guessed type wchar_t aFqdn[5];
// 140188368: using guessed type wchar_t aQtype[6];
// 140188378: using guessed type wchar_t aTimeofday[10];
