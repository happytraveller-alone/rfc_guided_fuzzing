//----- (000000014005F088) ----------------------------------------------------
ULONG __fastcall Template_csssqqqqzzz(
        __int64 a1,
        __int64 a2,
        char a3,
        const char *a4,
        const char *a5,
        const char *a6,
        char a7,
        char a8,
        char a9,
        char a10,
        const unsigned __int16 *a11,
        const unsigned __int16 *a12,
        const unsigned __int16 *a13)
{
  __int64 v13; // rdx
  __int64 v14; // rcx
  int v15; // ecx
  const char *v16; // r10
  const char *v17; // rax
  __int64 v18; // rcx
  int v19; // ecx
  const char *v20; // rax
  __int64 v21; // rax
  int v22; // eax
  int v23; // r8d
  __int64 v24; // rax
  int v25; // ecx
  const wchar_t *v26; // r9
  const wchar_t *v27; // rax
  __int64 v28; // rax
  int v29; // r10d
  const wchar_t *v30; // rax
  bool v31; // zf
  struct _EVENT_DATA_DESCRIPTOR UserData; // [rsp+20h] [rbp-B1h] BYREF
  const char *v34; // [rsp+30h] [rbp-A1h]
  int v35; // [rsp+38h] [rbp-99h]
  int v36; // [rsp+3Ch] [rbp-95h]
  const char *v37; // [rsp+40h] [rbp-91h]
  int v38; // [rsp+48h] [rbp-89h]
  int v39; // [rsp+4Ch] [rbp-85h]
  const char *v40; // [rsp+50h] [rbp-81h]
  int v41; // [rsp+58h] [rbp-79h]
  int v42; // [rsp+5Ch] [rbp-75h]
  char *v43; // [rsp+60h] [rbp-71h]
  __int64 v44; // [rsp+68h] [rbp-69h]
  char *v45; // [rsp+70h] [rbp-61h]
  __int64 v46; // [rsp+78h] [rbp-59h]
  char *v47; // [rsp+80h] [rbp-51h]
  __int64 v48; // [rsp+88h] [rbp-49h]
  char *v49; // [rsp+90h] [rbp-41h]
  __int64 v50; // [rsp+98h] [rbp-39h]
  const wchar_t *v51; // [rsp+A0h] [rbp-31h]
  int v52; // [rsp+A8h] [rbp-29h]
  int v53; // [rsp+ACh] [rbp-25h]
  const wchar_t *v54; // [rsp+B0h] [rbp-21h]
  int v55; // [rsp+B8h] [rbp-19h]
  int v56; // [rsp+BCh] [rbp-15h]
  const wchar_t *v57; // [rsp+C0h] [rbp-11h]
  int v58; // [rsp+C8h] [rbp-9h]
  int v59; // [rsp+CCh] [rbp-5h]
  char v60; // [rsp+100h] [rbp+2Fh] BYREF

  v60 = a3;
  *(_QWORD *)&UserData.Size = 1i64;
  v13 = -1i64;
  UserData.Ptr = (ULONGLONG)&v60;
  if ( a4 )
  {
    v14 = -1i64;
    do
      ++v14;
    while ( a4[v14] );
    v15 = v14 + 1;
  }
  else
  {
    v15 = 5;
  }
  v16 = "NULL";
  v35 = v15;
  v17 = "NULL";
  v36 = 0;
  if ( a4 )
    v17 = a4;
  v34 = v17;
  if ( a5 )
  {
    v18 = -1i64;
    do
      ++v18;
    while ( a5[v18] );
    v19 = v18 + 1;
  }
  else
  {
    v19 = 5;
  }
  v38 = v19;
  v20 = "NULL";
  if ( a5 )
    v20 = a5;
  v39 = 0;
  v37 = v20;
  if ( a6 )
  {
    v21 = -1i64;
    do
      ++v21;
    while ( a6[v21] );
    v22 = v21 + 1;
  }
  else
  {
    v22 = 5;
  }
  v41 = v22;
  v42 = 0;
  v43 = &a7;
  if ( a6 )
    v16 = a6;
  v40 = v16;
  v23 = 10;
  v45 = &a8;
  v47 = &a9;
  v49 = &a10;
  v44 = 4i64;
  v46 = 4i64;
  v48 = 4i64;
  v50 = 4i64;
  if ( a11 )
  {
    v24 = -1i64;
    do
      ++v24;
    while ( a11[v24] );
    v25 = 2 * v24 + 2;
  }
  else
  {
    v25 = 10;
  }
  v52 = v25;
  v26 = L"NULL";
  v27 = L"NULL";
  v53 = 0;
  if ( a11 )
    v27 = a11;
  v51 = v27;
  if ( a12 )
  {
    v28 = -1i64;
    do
      ++v28;
    while ( a12[v28] );
    v29 = 2 * v28 + 2;
  }
  else
  {
    v29 = 10;
  }
  v55 = v29;
  v30 = L"NULL";
  v56 = 0;
  if ( a12 )
    v30 = a12;
  v54 = v30;
  v31 = a13 == 0i64;
  if ( a13 )
  {
    do
      ++v13;
    while ( a13[v13] );
    v23 = 2 * v13 + 2;
    v31 = a13 == 0i64;
  }
  if ( !v31 )
    v26 = a13;
  v58 = v23;
  v57 = v26;
  v59 = 0;
  return EventWrite(Microsoft_Windows_DNSServerHandle, &DNS_EVENT_REC_QUERY_TIMEOUT, 0xBu, &UserData);
}
