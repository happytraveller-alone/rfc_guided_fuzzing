//----- (000000014001B50C) ----------------------------------------------------
__int64 __fastcall Dbg_DnsRecord(const char *a1, const char *a2, __int64 a3, __int64 a4)
{
  unsigned __int8 *v5; // r13
  u_short v8; // ax
  unsigned int v9; // ebx
  unsigned __int16 v10; // ax
  char *v11; // rax
  const char *v12; // rdi
  int v13; // r10d
  int v14; // r15d
  CDnsClientSubnetRecordsTrie *v15; // rcx
  unsigned __int16 v16; // dx
  __int64 v17; // rcx
  unsigned __int16 v18; // dx
  __int64 v19; // rbx
  unsigned __int64 v20; // rdi
  unsigned __int64 v21; // r8
  CDnsClientSubnetRecordsTrie *v22; // r11
  unsigned __int8 *v23; // r13
  int i; // ebx
  __int64 v25; // rax
  __int64 v26; // rax
  __int64 v27; // r14
  char *v28; // rbx
  char *v29; // rax
  __int64 v30; // rdx
  __int64 v31; // r8
  int v32; // ebx
  bool v33; // zf
  __int64 v34; // rax
  unsigned __int64 v35; // r8
  void *v37; // rax
  void *v38; // rax
  unsigned __int8 *v39; // r9
  char *v40; // rbx
  char *v41; // rax
  char *v42; // rbx
  char v43; // al
  int v44; // r15d
  int v45; // r15d
  int v46; // r15d
  int v47; // r15d
  int v48; // r15d
  CHAR *v49; // rax
  CDnsClientSubnetRecordsTrie *v50; // rcx
  unsigned __int16 v51; // dx
  char *v52; // rsi
  char v53; // di
  char v54; // bl
  char v55; // al
  __int64 v56; // rdx
  __int64 v57; // r8
  char v58; // r14
  __int16 v59; // bx
  const char *v60; // rdi
  char v61; // si
  char v62; // al
  __int64 v63; // rdx
  __int64 v64; // r8
  int v65; // r15d
  int v66; // r15d
  int v67; // r15d
  int v68; // r15d
  unsigned __int16 v69; // dx
  unsigned int v70; // r8d
  _BYTE *v71; // rdx
  unsigned int v72; // esi
  unsigned __int8 *v73; // rcx
  char *v74; // rax
  unsigned __int8 v75; // al
  __int64 v76; // rdx
  int v77; // r10d
  int v78; // r13d
  unsigned __int8 *v79; // rdi
  int v80; // r14d
  int v81; // edx
  char *v82; // rax
  __int64 v83; // r11
  const char *v84; // r9
  __int64 v85; // r14
  unsigned __int16 v86; // ax
  char *v87; // rax
  const char *v88; // rcx
  char *v89; // r14
  char v90; // si
  char v91; // di
  char v92; // bl
  char v93; // al
  __int64 v94; // rdx
  unsigned __int64 v95; // rax
  unsigned __int64 v96; // rax
  unsigned __int16 v97; // r8
  _BYTE *v98; // rdx
  char *v99; // rax
  __int64 v100; // rdx
  __int64 v101; // r8
  unsigned __int8 *v102; // r13
  unsigned __int16 v103; // si
  int v104; // r15d
  int v105; // r15d
  int v106; // eax
  char v107; // r14
  __int64 v108; // rdx
  __int64 v109; // r8
  char *v110; // rdi
  char v111; // bl
  char v112; // al
  __int64 v113; // rdx
  __int64 v114; // r8
  int v115; // r14d
  __int64 v116; // rdx
  __int64 v117; // r8
  __int64 v118; // rdx
  __int64 v119; // r8
  u_long *v120; // r13
  u_long v121; // r8d
  unsigned int v122; // ebx
  unsigned int v123; // edi
  unsigned __int8 *v124; // rax
  unsigned __int16 v125; // r8
  unsigned __int8 *v126; // rdx
  char *v127; // rax
  __int64 v128; // rdx
  __int64 v129; // r8
  unsigned __int8 *v130; // r13
  unsigned __int16 v131; // dx
  unsigned __int8 *v132; // rbx
  unsigned __int16 v133; // r13
  _BYTE *v134; // rbx
  u_long v136; // [rsp+38h] [rbp-C8h]
  int v137; // [rsp+40h] [rbp-C0h]
  u_short v138; // [rsp+70h] [rbp-90h]
  unsigned int v139; // [rsp+78h] [rbp-88h]
  unsigned __int8 *v140; // [rsp+78h] [rbp-88h]
  unsigned int v141; // [rsp+78h] [rbp-88h]
  int v142; // [rsp+78h] [rbp-88h]
  unsigned __int8 *v143; // [rsp+78h] [rbp-88h]
  unsigned __int8 v144; // [rsp+80h] [rbp-80h]
  char v145; // [rsp+80h] [rbp-80h]
  unsigned __int16 v146; // [rsp+80h] [rbp-80h]
  int v148; // [rsp+88h] [rbp-78h]
  __int64 v149; // [rsp+88h] [rbp-78h]
  unsigned __int16 v150; // [rsp+88h] [rbp-78h]
  __int64 v152; // [rsp+90h] [rbp-70h]
  unsigned __int64 v153; // [rsp+98h] [rbp-68h]
  u_long *v154; // [rsp+98h] [rbp-68h]
  unsigned __int8 *v155; // [rsp+98h] [rbp-68h]
  struct in6_addr Addr; // [rsp+A0h] [rbp-60h] BYREF
  CHAR S[80]; // [rsp+B0h] [rbp-50h] BYREF
  char v158[512]; // [rsp+100h] [rbp+0h] BYREF

  v5 = (unsigned __int8 *)(a3 + 10);
  v8 = ntohs(*(_WORD *)(a3 + 8));
  v9 = v8;
  v138 = v8;
  memset_0(v158, 0, sizeof(v158));
  v10 = ntohs(*(_WORD *)a3);
  v11 = private_StringForRecordType(v10);
  v139 = v9;
  v12 = "UNKNOWN";
  v14 = v13;
  if ( v11 )
    v12 = v11;
  v137 = ntohs(*(_WORD *)(a3 + 2));
  v136 = ntohl(*(_DWORD *)(a3 + 4));
  if ( !sprintfSafeA(
          v158,
          0x200ui64,
          "%s%s\t%s (%u)\tTTL %-4lu\tCLASS %-4u\tDLEN %-4u ",
          a1,
          a2,
          v12,
          v14,
          v136,
          v137,
          v9) )
  {
    v15 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x1000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      v16 = 14;
      goto LABEL_8;
    }
    return v138 + 10i64;
  }
  v17 = 41i64;
  if ( !v138 && (_WORD)v14 != 41 )
  {
    v17 = (__int64)WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x1000) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
    {
      return v138 + 10i64;
    }
    v18 = 15;
    goto LABEL_354;
  }
  v19 = a4;
  v20 = (unsigned __int64)&v5[v138];
  v153 = v20;
  v21 = *(unsigned __int16 *)(a4 + 6302) + a4 + 6304;
  if ( v21 < v20 )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x1000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      WPP_SF_q(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x10u,
        (__int64)&WPP_8b928f4d7aae3be62a0fe9158b6696cb_Traceguids,
        a3);
    }
    return v138 + 10i64;
  }
  if ( v14 > 249 )
  {
    v104 = v14 - 250;
    if ( v104 )
    {
      v105 = v104 - 65031;
      if ( v105 )
      {
        if ( v105 != 1 )
          goto LABEL_283;
        memset_0(S, 0, sizeof(S));
        if ( v138 >= 0x12u )
        {
          v106 = ntohl(*(_DWORD *)v5);
          v107 = v106;
          Dns_WriteStringsForFlag(S, v108, v109, v106);
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x1000) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            v110 = Dbg_PacketName(v5 + 12, a4 + 6304, *(unsigned __int16 *)(a4 + 6302) + a4 + 6304);
            v111 = ntohl(*((_DWORD *)v5 + 2));
            v112 = ntohl(*((_DWORD *)v5 + 1));
            WPP_SF_ssDdds(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              v113,
              v114,
              v158,
              (__int64)S,
              v107,
              v112,
              v111,
              (__int64)v110);
          }
          return v138 + 10i64;
        }
        v17 = (__int64)WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x1000) == 0
          || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
        {
          return v138 + 10i64;
        }
        v18 = 57;
      }
      else
      {
        memset_0(S, 0, sizeof(S));
        if ( v138 >= 0x14u )
        {
          v115 = ntohl(*(_DWORD *)v5);
          Dns_WriteStringsForFlag(S, v116, v117, v115);
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x1000) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            ntohl(*((_DWORD *)v5 + 2));
            ntohl(*((_DWORD *)v5 + 1));
            WPP_SF_ssDdd(*((_QWORD *)WPP_GLOBAL_Control + 7), v118, v119, v158, (__int64)S);
          }
          v120 = (u_long *)(v5 + 12);
          v121 = ntohl(*v120);
          if ( (unsigned __int64)&v120[v121] <= v20 )
          {
            v122 = 0;
            if ( v121 )
            {
              v123 = v121;
              do
              {
                Addr.u.Byte[0] = 0;
                *(_QWORD *)&Addr.u.Byte[1] = 0i64;
                *(_DWORD *)((char *)&Addr.u.Word[4] + 1) = 0;
                *(USHORT *)((char *)&Addr.u.Word[6] + 1) = 0;
                Addr.u.Byte[15] = 0;
                Dns_Ip4AddressToString_A((char *)&Addr, v120);
                if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                  && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x1000) != 0
                  && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
                {
                  WPP_SF_Ds(
                    *((_QWORD *)WPP_GLOBAL_Control + 7),
                    0x38u,
                    (__int64)&WPP_8b928f4d7aae3be62a0fe9158b6696cb_Traceguids,
                    v122,
                    (__int64)&Addr);
                }
                ++v120;
                ++v122;
              }
              while ( v122 < v123 );
            }
            return v138 + 10i64;
          }
          v17 = (__int64)WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x1000) == 0
            || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
          {
            return v138 + 10i64;
          }
          v18 = 55;
        }
        else
        {
          v17 = (__int64)WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x1000) == 0
            || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
          {
            return v138 + 10i64;
          }
          v18 = 53;
        }
      }
    }
    else if ( v138 >= 0x12u )
    {
      v124 = (unsigned __int8 *)Wire_SkipPacketName(a4, (__int64)v5);
      if ( v124 )
      {
        if ( (unsigned __int64)v124 > v20 || v20 - (unsigned __int64)v124 < 0x10 )
        {
          v17 = (__int64)WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x1000) == 0
            || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
          {
            return v138 + 10i64;
          }
          v18 = 48;
        }
        else
        {
          *(_QWORD *)Addr.u.Byte = v124[5] | ((v124[4] | ((v124[3] | ((v124[2] | ((v124[1] | ((unsigned __int64)*v124 << 8)) << 8)) << 8)) << 8)) << 8);
          v125 = v124[9] + (v124[8] << 8);
          v126 = v124 + 10;
          v150 = v125;
          v143 = v124 + 10;
          v17 = (__int64)WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x1000) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            v127 = Dbg_PacketName(v5, a4 + 6304, *(unsigned __int16 *)(a4 + 6302) + a4 + 6304);
            WPP_SF_ssIdd(*((_QWORD *)WPP_GLOBAL_Control + 7), v128, v129, v158, (__int64)v127);
            v17 = (__int64)WPP_GLOBAL_Control;
            v126 = v143;
            v125 = v150;
          }
          v130 = &v126[v125];
          if ( (unsigned __int64)v130 <= v20 )
          {
            Dbg_DnsPacketRaw(v17, v126, v125);
            if ( (unsigned __int64)(v130 + 2) > v20 )
              return v138 + 10i64;
            v131 = v130[1] + (*v130 << 8);
            v132 = v130 + 4;
            v133 = v130[5] + (v130[4] << 8);
            v134 = v132 + 2;
            v17 = (__int64)WPP_GLOBAL_Control;
            if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x1000) != 0
              && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
            {
              WPP_SF_Ddd(
                *((_QWORD *)WPP_GLOBAL_Control + 7),
                0x33u,
                (__int64)&WPP_8b928f4d7aae3be62a0fe9158b6696cb_Traceguids,
                v131);
              v17 = (__int64)WPP_GLOBAL_Control;
            }
            if ( (unsigned __int64)&v134[v133] <= v20 )
            {
              v70 = v133;
              v71 = v134;
              goto LABEL_275;
            }
            if ( (CDnsClientSubnetRecordsTrie **)v17 == &WPP_GLOBAL_Control
              || (*(_DWORD *)(v17 + 68) & 0x1000) == 0
              || *(_BYTE *)(v17 + 65) < 2u )
            {
              return v138 + 10i64;
            }
            v18 = 52;
          }
          else
          {
            if ( (CDnsClientSubnetRecordsTrie **)v17 == &WPP_GLOBAL_Control
              || (*(_DWORD *)(v17 + 68) & 0x1000) == 0
              || *(_BYTE *)(v17 + 65) < 2u )
            {
              return v138 + 10i64;
            }
            v18 = 50;
          }
        }
      }
      else
      {
        v17 = (__int64)WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x1000) == 0
          || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
        {
          return v138 + 10i64;
        }
        v18 = 47;
      }
    }
    else
    {
      v17 = (__int64)WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x1000) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
      {
        return v138 + 10i64;
      }
      v18 = 46;
    }
    goto LABEL_354;
  }
  if ( v14 == 249 )
  {
    if ( v138 >= 0x12u )
    {
      v96 = Wire_SkipPacketName(a4, (__int64)v5);
      if ( v96 )
      {
        if ( v96 > v20 || v20 - v96 < 0x10 )
        {
          v17 = (__int64)WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x1000) == 0
            || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
          {
            return v138 + 10i64;
          }
          v18 = 41;
        }
        else
        {
          v97 = *(unsigned __int8 *)(v96 + 13) + (*(unsigned __int8 *)(v96 + 12) << 8);
          v98 = (_BYTE *)(v96 + 14);
          v146 = v97;
          *(_QWORD *)Addr.u.Byte = v96 + 14;
          v17 = (__int64)WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x1000) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            v99 = Dbg_PacketName(v5, a4 + 6304, *(unsigned __int16 *)(a4 + 6302) + a4 + 6304);
            WPP_SF_ssddddd(*((_QWORD *)WPP_GLOBAL_Control + 7), v100, v101, v158, (__int64)v99);
            v17 = (__int64)WPP_GLOBAL_Control;
            v98 = *(_BYTE **)Addr.u.Byte;
            v97 = v146;
          }
          v102 = &v98[v97];
          if ( (unsigned __int64)v102 <= v20 )
          {
            Dbg_DnsPacketRaw(v17, v98, v97);
            v71 = v102 + 2;
            *(_QWORD *)Addr.u.Byte = v102 + 2;
            if ( (unsigned __int64)(v102 + 2) > v20 )
              return v138 + 10i64;
            v103 = v102[1] + (*v102 << 8);
            v17 = (__int64)WPP_GLOBAL_Control;
            if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x1000) != 0
              && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
            {
              WPP_SF_D(
                *((_QWORD *)WPP_GLOBAL_Control + 7),
                0x2Cu,
                (__int64)&WPP_8b928f4d7aae3be62a0fe9158b6696cb_Traceguids,
                v103);
              v17 = (__int64)WPP_GLOBAL_Control;
              v71 = *(_BYTE **)Addr.u.Byte;
            }
            if ( (unsigned __int64)&v71[v103] <= v20 )
            {
              v70 = v103;
              goto LABEL_275;
            }
            if ( (CDnsClientSubnetRecordsTrie **)v17 == &WPP_GLOBAL_Control
              || (*(_DWORD *)(v17 + 68) & 0x1000) == 0
              || *(_BYTE *)(v17 + 65) < 2u )
            {
              return v138 + 10i64;
            }
            v18 = 45;
          }
          else
          {
            if ( (CDnsClientSubnetRecordsTrie **)v17 == &WPP_GLOBAL_Control
              || (*(_DWORD *)(v17 + 68) & 0x1000) == 0
              || *(_BYTE *)(v17 + 65) < 2u )
            {
              return v138 + 10i64;
            }
            v18 = 43;
          }
        }
      }
      else
      {
        v17 = (__int64)WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x1000) == 0
          || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
        {
          return v138 + 10i64;
        }
        v18 = 40;
      }
    }
    else
    {
      v17 = (__int64)WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x1000) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
      {
        return v138 + 10i64;
      }
      v18 = 39;
    }
    goto LABEL_354;
  }
  if ( v14 > 21 )
  {
    if ( v14 > 41 )
    {
      v65 = v14 - 43;
      if ( !v65 )
      {
        if ( v138 >= 5u )
        {
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x1000) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            ntohl(*(_DWORD *)(v5 + 3));
            ntohl(*(_DWORD *)(v5 + 2));
            ntohl(*(_DWORD *)v5);
            WPP_SF_sddd(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x44u,
              (__int64)&WPP_8b928f4d7aae3be62a0fe9158b6696cb_Traceguids,
              v158);
          }
          v71 = v5 + 4;
          v70 = v138 - 4;
          goto LABEL_275;
        }
        v17 = (__int64)WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x1000) == 0
          || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
        {
          return v138 + 10i64;
        }
        v18 = 67;
        goto LABEL_354;
      }
      v66 = v65 - 3;
      if ( v66 )
      {
        v67 = v66 - 1;
        if ( !v67 )
        {
          if ( v138 >= 2u )
          {
            v152 = Wire_SkipPacketName(a4, (__int64)v5);
            v73 = (unsigned __int8 *)v152;
            if ( v152 )
            {
              if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x1000) == 0
                || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
              {
                goto LABEL_209;
              }
              v74 = Dbg_PacketName(v5, v19 + 6304, *(unsigned __int16 *)(v19 + 6302) + v19 + 6304);
              WPP_SF_ss(
                *((_QWORD *)WPP_GLOBAL_Control + 7),
                0x41u,
                (__int64)&WPP_8b928f4d7aae3be62a0fe9158b6696cb_Traceguids,
                v158,
                (__int64)v74);
              while ( 1 )
              {
                v73 = (unsigned __int8 *)v152;
                do
                {
LABEL_209:
                  if ( (unsigned __int64)v73 >= v20 )
                    return v138 + 10i64;
                  if ( (unsigned __int64)(v73 + 3) > v20 )
                    return v138 + 10i64;
                  v75 = *v73;
                  v76 = v73[1];
                  v73 += 2;
                  v144 = v75;
                  if ( (unsigned __int64)&v73[v76] > v20 )
                    return v138 + 10i64;
                  v77 = 0;
                  v148 = (unsigned __int8)v76;
                  v78 = 0;
                }
                while ( !(_BYTE)v76 );
                v79 = v73;
                do
                {
                  v80 = v77;
                  v142 = *v79;
                  v152 = (__int64)(v79 + 1);
                  v81 = v142;
                  do
                  {
                    if ( ((128 >> v80) & v81) != 0 )
                    {
                      v82 = private_StringForRecordType(v80 + 8 * (v78 + 32 * v144));
                      v84 = "UNKNOWN";
                      if ( v82 )
                        v84 = v82;
                      if ( (CDnsClientSubnetRecordsTrie **)v83 != &WPP_GLOBAL_Control
                        && (*(_DWORD *)(v83 + 68) & 0x1000) != 0
                        && *(_BYTE *)(v83 + 65) >= 4u )
                      {
                        WPP_SF_sd(
                          *(_QWORD *)(v83 + 56),
                          0x42u,
                          (__int64)&WPP_8b928f4d7aae3be62a0fe9158b6696cb_Traceguids,
                          v84);
                        v77 = 0;
                      }
                      v81 = v142;
                    }
                    ++v80;
                  }
                  while ( v80 <= 7 );
                  ++v79;
                  ++v78;
                }
                while ( v78 < v148 );
                v20 = v153;
              }
            }
          }
          v17 = (__int64)WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x1000) == 0
            || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
          {
            return v138 + 10i64;
          }
          v18 = 64;
          goto LABEL_354;
        }
        v68 = v67 - 1;
        if ( v68 )
        {
          if ( v68 != 1 )
            goto LABEL_283;
          goto LABEL_169;
        }
LABEL_175:
        if ( (unsigned __int64)(v5 + 4) <= v20 )
        {
          v141 = v139 - 4;
          if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x1000) == 0
            || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
          {
            v72 = v141;
          }
          else
          {
            v72 = v141;
            ntohs(*(_WORD *)v5);
            WPP_SF_sdddd(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x3Cu,
              (__int64)&WPP_8b928f4d7aae3be62a0fe9158b6696cb_Traceguids,
              v158);
          }
          v70 = v72;
          v71 = v5 + 4;
          goto LABEL_275;
        }
        v17 = (__int64)WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x1000) == 0
          || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
        {
          return v138 + 10i64;
        }
        v18 = 59;
        goto LABEL_354;
      }
    }
    else
    {
      if ( v14 == 41 )
      {
        v58 = -1;
        if ( a4 != -6304 )
          v58 = 16 * *(_BYTE *)(a3 + 4) + (*(_BYTE *)(a4 + 6307) & 0xF);
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x1000) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          v59 = *(_WORD *)(a3 + 6);
          v60 = "-";
          v61 = *(_BYTE *)(a3 + 5);
          if ( *(char *)(a3 + 6) < 0 )
            v60 = "+";
          v62 = ntohs(*(_WORD *)(a3 + 2));
          WPP_SF_sddDDs(*((_QWORD *)WPP_GLOBAL_Control + 7), v63, v64, v158, v62, v61, v58, v59, (__int64)v60);
        }
        return v138 + 10i64;
      }
      v44 = v14 - 24;
      if ( v44 )
      {
        v45 = v44 - 1;
        if ( v45 )
        {
          v46 = v45 - 3;
          if ( !v46 )
          {
            if ( v138 == 16 )
            {
              Addr = *(struct in6_addr *)v5;
              RtlIpv6AddressToStringA(&Addr, S);
              v50 = WPP_GLOBAL_Control;
              if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x1000) == 0
                || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
              {
                return v138 + 10i64;
              }
              v51 = 20;
              v49 = S;
              goto LABEL_155;
            }
            v17 = (__int64)WPP_GLOBAL_Control;
            if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x1000) == 0
              || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
            {
              return v138 + 10i64;
            }
            v18 = 19;
            goto LABEL_354;
          }
          v47 = v46 - 2;
          if ( v47 )
          {
            v48 = v47 - 3;
            if ( !v48 )
            {
              Wire_SkipPacketName(a4, (__int64)v5);
              if ( v138 >= 8u )
              {
                if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                  && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x1000) != 0
                  && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
                {
                  v52 = Dbg_PacketName(v5 + 6, a4 + 6304, *(unsigned __int16 *)(a4 + 6302) + a4 + 6304);
                  v53 = ntohs(*((_WORD *)v5 + 2));
                  v54 = ntohs(*((_WORD *)v5 + 1));
                  v55 = ntohs(*(_WORD *)v5);
                  WPP_SF_sddds(*((_QWORD *)WPP_GLOBAL_Control + 7), v56, v57, v158, v55, v54, v53, (__int64)v52);
                }
                return v138 + 10i64;
              }
              v17 = (__int64)WPP_GLOBAL_Control;
              if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x1000) == 0
                || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
              {
                return v138 + 10i64;
              }
              v18 = 36;
              goto LABEL_354;
            }
            if ( v48 != 6 )
              goto LABEL_283;
            goto LABEL_128;
          }
LABEL_169:
          v17 = (__int64)WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x1000) == 0
            || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
          {
            goto LABEL_174;
          }
          v69 = 69;
          goto LABEL_173;
        }
        goto LABEL_175;
      }
    }
    v85 = (__int64)(v5 + 18);
    if ( (unsigned __int64)(v5 + 18) <= v20 )
    {
      v86 = ntohs(*(_WORD *)v5);
      v145 = v86;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x1000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        v87 = private_StringForRecordType(v86);
        v88 = "UNKNOWN";
        if ( v87 )
          v88 = v87;
        v149 = (__int64)v88;
        v89 = Dbg_PacketName(v5 + 18, a4 + 6304, *(unsigned __int16 *)(a4 + 6302) + a4 + 6304);
        v90 = ntohs(*((_WORD *)v5 + 8));
        v91 = ntohl(*((_DWORD *)v5 + 3));
        v92 = ntohl(*((_DWORD *)v5 + 2));
        v93 = ntohl(*((_DWORD *)v5 + 1));
        WPP_SF_ssddddddds(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          v94,
          (unsigned int)(char)v5[3],
          v158,
          v149,
          v145,
          v5[2],
          v5[3],
          v93,
          v92,
          v91,
          v90,
          (__int64)v89);
        v19 = a4;
        v85 = (__int64)(v5 + 18);
        v20 = v153;
      }
      v95 = Wire_SkipPacketName(v19, v85);
      if ( v95 && v95 < v20 )
      {
        v71 = (_BYTE *)v95;
        v70 = v139 + (_DWORD)v5 - v95;
        goto LABEL_275;
      }
      v17 = (__int64)WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x1000) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
      {
        return v138 + 10i64;
      }
      v18 = 63;
    }
    else
    {
      v17 = (__int64)WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x1000) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
      {
        return v138 + 10i64;
      }
      v18 = 61;
    }
    goto LABEL_354;
  }
  if ( v14 == 21 )
    goto LABEL_111;
  if ( v14 <= 13 )
  {
    if ( v14 != 13 )
    {
      if ( v14 == 1 )
      {
        if ( v138 == 4 )
        {
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x1000) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            WPP_SF_sdddd(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x12u,
              (__int64)&WPP_8b928f4d7aae3be62a0fe9158b6696cb_Traceguids,
              v158);
          }
          return v138 + 10i64;
        }
        v17 = (__int64)WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x1000) == 0
          || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
        {
          return v138 + 10i64;
        }
        v18 = 17;
        goto LABEL_354;
      }
      if ( v14 <= 1 )
        goto LABEL_283;
      if ( v14 > 5 )
      {
        if ( v14 == 6 )
        {
          v25 = Wire_SkipPacketName(a4, (__int64)v5);
          v140 = (unsigned __int8 *)v25;
          if ( v138 >= 0x18u )
          {
            if ( v25 )
            {
              v26 = Wire_SkipPacketName(a4, v25);
              v154 = (u_long *)v26;
              v27 = v26;
              if ( v26 )
              {
                if ( v26 + 20 <= v20 )
                {
                  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x1000) != 0
                    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
                  {
                    ntohl(*(_DWORD *)(v26 + 16));
                    ntohl(*(_DWORD *)(v27 + 12));
                    ntohl(*(_DWORD *)(v27 + 8));
                    ntohl(v154[1]);
                    ntohl(*v154);
                    v28 = Dbg_PacketName(v140, a4 + 6304, *(unsigned __int16 *)(a4 + 6302) + a4 + 6304);
                    v29 = Dbg_PacketName(
                            (unsigned __int8 *)(a3 + 10),
                            a4 + 6304,
                            *(unsigned __int16 *)(a4 + 6302) + a4 + 6304);
                    WPP_SF_sssddddd(*((_QWORD *)WPP_GLOBAL_Control + 7), v30, v31, v158, (__int64)v29, (__int64)v28);
                  }
                  return v138 + 10i64;
                }
              }
            }
          }
          v17 = (__int64)WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x1000) == 0
            || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
          {
            return v138 + 10i64;
          }
          v18 = 25;
          goto LABEL_354;
        }
        if ( v14 > 9 )
        {
          if ( v14 != 11 )
          {
            if ( v14 != 12 )
            {
LABEL_283:
              v17 = (__int64)WPP_GLOBAL_Control;
              if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x1000) == 0
                || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
              {
                goto LABEL_174;
              }
              v69 = 70;
LABEL_173:
              WPP_SF_s(*(_QWORD *)(v17 + 56), v69, (__int64)&WPP_8b928f4d7aae3be62a0fe9158b6696cb_Traceguids, v158);
LABEL_174:
              v70 = v139;
              v71 = v5;
LABEL_275:
              Dbg_DnsPacketRaw(v17, v71, v70);
              return v138 + 10i64;
            }
            goto LABEL_128;
          }
          if ( v138 >= 5u )
          {
            v22 = WPP_GLOBAL_Control;
            if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x1000) != 0
              && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
            {
              WPP_SF_sddddd(
                *((_QWORD *)WPP_GLOBAL_Control + 7),
                0x22u,
                (__int64)&WPP_8b928f4d7aae3be62a0fe9158b6696cb_Traceguids,
                v158);
              v22 = WPP_GLOBAL_Control;
            }
            v23 = v5 + 5;
            for ( i = 0; i < (int)(v139 - 5); ++v23 )
            {
              if ( v22 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                && (*((_DWORD *)v22 + 17) & 0x1000) != 0
                && *((_BYTE *)v22 + 65) >= 4u )
              {
                WPP_SF_Dd(*((_QWORD *)v22 + 7), 0x23u, (__int64)&WPP_8b928f4d7aae3be62a0fe9158b6696cb_Traceguids, i);
                v22 = WPP_GLOBAL_Control;
              }
              ++i;
            }
            return v138 + 10i64;
          }
          v17 = (__int64)WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x1000) == 0
            || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
          {
            return v138 + 10i64;
          }
          v18 = 33;
LABEL_354:
          WPP_SF_s(*(_QWORD *)(v17 + 56), v18, (__int64)&WPP_8b928f4d7aae3be62a0fe9158b6696cb_Traceguids, v158);
          return v138 + 10i64;
        }
      }
LABEL_128:
      if ( v138 < 2u )
      {
        v17 = (__int64)WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x1000) == 0
          || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
        {
          return v138 + 10i64;
        }
        v18 = 21;
        goto LABEL_354;
      }
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x1000) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
      {
        return v138 + 10i64;
      }
      v49 = Dbg_PacketName(v5, a4 + 6304, v21);
      v50 = WPP_GLOBAL_Control;
      v51 = 22;
LABEL_155:
      WPP_SF_ss(
        *((_QWORD *)v50 + 7),
        v51,
        (__int64)&WPP_8b928f4d7aae3be62a0fe9158b6696cb_Traceguids,
        v158,
        (__int64)v49);
      return v138 + 10i64;
    }
    goto LABEL_77;
  }
  if ( v14 == 14 )
  {
LABEL_101:
    if ( v138 >= 4u )
    {
      v39 = (unsigned __int8 *)Wire_SkipPacketName(a4, (__int64)v5);
      if ( v39 )
      {
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x1000) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          v40 = Dbg_PacketName(v39, a4 + 6304, *(unsigned __int16 *)(a4 + 6302) + a4 + 6304);
          v41 = Dbg_PacketName(v5, a4 + 6304, *(unsigned __int16 *)(a4 + 6302) + a4 + 6304);
          WPP_SF_sss(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x1Cu,
            (__int64)&WPP_8b928f4d7aae3be62a0fe9158b6696cb_Traceguids,
            v158,
            (__int64)v41,
            (__int64)v40);
        }
        return v138 + 10i64;
      }
    }
    v17 = (__int64)WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x1000) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
    {
      return v138 + 10i64;
    }
    v18 = 27;
    goto LABEL_354;
  }
  if ( v14 == 15 )
    goto LABEL_111;
  if ( v14 != 16 )
  {
    if ( v14 != 17 )
    {
      if ( v14 != 18 )
      {
        if ( (unsigned int)(v14 - 19) > 1 )
          goto LABEL_283;
        goto LABEL_77;
      }
LABEL_111:
      if ( v138 >= 4u )
      {
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x1000) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          v42 = Dbg_PacketName(v5 + 2, a4 + 6304, v21);
          v43 = ntohs(*(_WORD *)v5);
          WPP_SF_sds(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x18u,
            (__int64)&WPP_8b928f4d7aae3be62a0fe9158b6696cb_Traceguids,
            v158,
            v43,
            (__int64)v42);
        }
        return v138 + 10i64;
      }
      v17 = (__int64)WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x1000) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
      {
        return v138 + 10i64;
      }
      v18 = 23;
      goto LABEL_354;
    }
    goto LABEL_101;
  }
LABEL_77:
  v15 = WPP_GLOBAL_Control;
  v32 = 0;
  v33 = v5 == (unsigned __int8 *)v20;
  if ( (unsigned __int64)v5 >= v20 )
    goto LABEL_96;
  while ( 1 )
  {
    v34 = *v5++;
    v35 = (unsigned int)v34;
    v155 = &v5[v34];
    if ( (unsigned __int64)&v5[v34] > v20 )
      break;
    if ( v32++ )
    {
      if ( v15 == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_DWORD *)v15 + 17) & 0x1000) == 0
        || *((_BYTE *)v15 + 65) < 4u )
      {
        goto LABEL_89;
      }
      v38 = FormatLabelA(v35, v5);
      WPP_SF_Ds(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x1Eu,
        (__int64)&WPP_8b928f4d7aae3be62a0fe9158b6696cb_Traceguids,
        v32,
        (__int64)v38);
    }
    else
    {
      if ( v15 == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_DWORD *)v15 + 17) & 0x1000) == 0
        || *((_BYTE *)v15 + 65) < 4u )
      {
        goto LABEL_89;
      }
      v37 = FormatLabelA((unsigned int)v35, v5);
      WPP_SF_ss(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x1Du,
        (__int64)&WPP_8b928f4d7aae3be62a0fe9158b6696cb_Traceguids,
        v158,
        (__int64)v37);
    }
    v15 = WPP_GLOBAL_Control;
LABEL_89:
    v5 = v155;
    if ( (unsigned __int64)v155 >= v20 )
      goto LABEL_95;
  }
  if ( v15 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)v15 + 17) & 0x1000) != 0
    && *((_BYTE *)v15 + 65) >= 2u )
  {
    WPP_SF_s(*((_QWORD *)v15 + 7), 0x1Fu, (__int64)&WPP_8b928f4d7aae3be62a0fe9158b6696cb_Traceguids, v158);
    v15 = WPP_GLOBAL_Control;
  }
LABEL_95:
  v33 = v5 == (unsigned __int8 *)v20;
LABEL_96:
  if ( !v33
    && v15 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)v15 + 17) & 0x1000) != 0
    && *((_BYTE *)v15 + 65) >= 2u )
  {
    v16 = 32;
LABEL_8:
    WPP_SF_(*((_QWORD *)v15 + 7), v16, (__int64)&WPP_8b928f4d7aae3be62a0fe9158b6696cb_Traceguids);
  }
  return v138 + 10i64;
}
// 14001B772: conditional instruction was optimized away because r15d.4 is in (7..C)
// 14001B599: variable 'v13' is possibly undefined
// 14001B9EE: variable 'v30' is possibly undefined
// 14001B9EE: variable 'v31' is possibly undefined
// 14001C014: variable 'v56' is possibly undefined
// 14001C014: variable 'v57' is possibly undefined
// 14001C186: variable 'v63' is possibly undefined
// 14001C186: variable 'v64' is possibly undefined
// 14001C3D0: variable 'v77' is possibly undefined
// 14001C41F: variable 'v83' is possibly undefined
// 14001C608: variable 'v94' is possibly undefined
// 14001C924: variable 'v100' is possibly undefined
// 14001C924: variable 'v101' is possibly undefined
// 14001CA18: variable 'v17' is possibly undefined
// 14001CB2B: variable 'v108' is possibly undefined
// 14001CB2B: variable 'v109' is possibly undefined
// 14001CBCA: variable 'v113' is possibly undefined
// 14001CBCA: variable 'v114' is possibly undefined
// 14001CC3E: variable 'v116' is possibly undefined
// 14001CC3E: variable 'v117' is possibly undefined
// 14001CCA8: variable 'v118' is possibly undefined
// 14001CCA8: variable 'v119' is possibly undefined
// 14001CF34: variable 'v128' is possibly undefined
// 14001CF34: variable 'v129' is possibly undefined
