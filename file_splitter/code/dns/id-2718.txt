//----- (0000000140142960) ----------------------------------------------------
__int64 __fastcall CDNSClientSubnetRecord::GetClientSubnetRecord(CDNSClientSubnetRecord *this, void ***a2)
{
  __int64 v2; // r15
  unsigned int v3; // esi
  __int64 v4; // r13
  unsigned int v7; // r14d
  void **zero; // rdi
  _QWORD *v9; // rbp
  char **v10; // rbx
  char **v11; // rcx
  _WORD *v12; // rax
  CDnsClientSubnetRecordsTrie *v13; // rcx
  unsigned __int16 v14; // dx
  void *v15; // rax
  _QWORD *v16; // rcx
  unsigned int v17; // r9d
  _QWORD *v18; // rax
  _OWORD *v19; // rdx
  char *v20; // rcx
  __int64 v21; // r8
  void *v22; // rax
  void *v23; // rcx
  void *v24; // rcx
  _QWORD *v25; // rax
  _QWORD *v26; // rcx
  _OWORD *v27; // rdx
  char *v28; // rax
  __int64 v29; // r8

  v2 = *((unsigned int *)this + 14);
  v3 = 0;
  v4 = *((unsigned int *)this + 20);
  v7 = 0;
  zero = (void **)MIDL_user_allocate_zero(0x18ui64);
  if ( !zero )
  {
    v7 = 14;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      v9 = (_QWORD *)((char *)this + 8);
      if ( v9[3] >= 8ui64 )
        v9 = (_QWORD *)*v9;
      WPP_SF_DS(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x1Eu,
        (__int64)&WPP_42dbba61d26d3062f1ad4e084cdc81fe_Traceguids,
        14,
        (__int64)v9);
    }
    return v7;
  }
  v10 = (char **)((char *)this + 8);
  if ( *((_QWORD *)this + 4) < 8ui64 )
    v11 = (char **)((char *)this + 8);
  else
    v11 = (char **)*v10;
  v12 = MIDL_user_copy_stringW((__int64)v11);
  *zero = v12;
  if ( !v12 )
  {
    v13 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
    {
      goto LABEL_19;
    }
    if ( *((_QWORD *)this + 4) >= 8ui64 )
      v10 = (char **)*v10;
    v14 = 31;
LABEL_18:
    WPP_SF_DS(*((_QWORD *)v13 + 7), v14, (__int64)&WPP_42dbba61d26d3062f1ad4e084cdc81fe_Traceguids, 0, (__int64)v10);
LABEL_19:
    v7 = 14;
LABEL_36:
    if ( *zero )
      MIDL_user_free(*zero);
    v23 = zero[1];
    if ( v23 )
      Dns_Free(v23);
    v24 = zero[2];
    if ( v24 )
      Dns_Free(v24);
    MIDL_user_free(zero);
    return v7;
  }
  v15 = MIDL_user_allocate_zero((v2 << 6) + 96);
  zero[1] = v15;
  if ( !v15 )
  {
    v13 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
    {
      goto LABEL_19;
    }
    if ( *((_QWORD *)this + 4) >= 8ui64 )
      v10 = (char **)*v10;
    v14 = 32;
    goto LABEL_18;
  }
  v16 = (_QWORD *)*((_QWORD *)this + 6);
  v17 = 0;
  v18 = (_QWORD *)*v16;
  if ( (_QWORD *)*v16 != v16 )
  {
    do
    {
      v19 = (_OWORD *)v18[2];
      v20 = (char *)zero[1];
      v21 = v17++;
      v21 <<= 6;
      *(_OWORD *)&v20[v21 + 32] = *v19;
      *(_OWORD *)&v20[v21 + 48] = v19[1];
      *(_OWORD *)&v20[v21 + 64] = v19[2];
      *(_OWORD *)&v20[v21 + 80] = v19[3];
      ++*((_DWORD *)zero[1] + 1);
      v18 = (_QWORD *)*v18;
    }
    while ( v18 != *((_QWORD **)this + 6) );
  }
  v22 = MIDL_user_allocate_zero((v4 << 6) + 96);
  zero[2] = v22;
  if ( !v22 )
  {
    v7 = 14;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      if ( *((_QWORD *)this + 4) >= 8ui64 )
        v10 = (char **)*v10;
      WPP_SF_DS(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x21u,
        (__int64)&WPP_42dbba61d26d3062f1ad4e084cdc81fe_Traceguids,
        14,
        (__int64)v10);
    }
    goto LABEL_36;
  }
  v25 = (_QWORD *)*((_QWORD *)this + 9);
  v26 = (_QWORD *)*v25;
  if ( (_QWORD *)*v25 != v25 )
  {
    do
    {
      v27 = (_OWORD *)v26[2];
      v28 = (char *)zero[2];
      v29 = v3++;
      v29 <<= 6;
      *(_OWORD *)&v28[v29 + 32] = *v27;
      *(_OWORD *)&v28[v29 + 48] = v27[1];
      *(_OWORD *)&v28[v29 + 64] = v27[2];
      *(_OWORD *)&v28[v29 + 80] = v27[3];
      ++*((_DWORD *)zero[2] + 1);
      v26 = (_QWORD *)*v26;
    }
    while ( v26 != *((_QWORD **)this + 9) );
  }
  *a2 = zero;
  return v7;
}
