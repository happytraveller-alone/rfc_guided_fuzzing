//----- (0000000140124418) ----------------------------------------------------
void **__fastcall std::vector<unsigned short>::resize(__int64 *a1, unsigned __int64 a2)
{
  void **result; // rax
  const void *v5; // rdx
  __int64 v6; // r9
  unsigned __int64 v7; // rdi
  void *v8; // rdi
  unsigned __int64 v9; // rdx
  unsigned __int64 v10; // rdx
  _WORD *v11; // rdi
  __int64 v12; // rax
  unsigned __int64 v13; // rcx
  void *retaddr; // [rsp+38h] [rbp+0h] BYREF

  result = &retaddr;
  v5 = (const void *)a1[1];
  v6 = *a1;
  v7 = ((__int64)v5 - *a1) >> 1;
  if ( v7 > a2 )
  {
    v8 = (void *)(v6 + 2 * a2);
    if ( v8 == v5 )
      return result;
    memmove(v8, v5, 0i64);
    result = (void **)v8;
    goto LABEL_4;
  }
  if ( v7 < a2 )
  {
    if ( 0x7FFFFFFFFFFFFFFFi64 - (a2 - v7) < v7 )
      std::vector<std::vector<unsigned char> *,std::allocator<std::vector<unsigned char> *>>::_Xlen();
    v9 = (a1[2] - v6) >> 1;
    if ( a2 > v9 )
    {
      if ( 0x7FFFFFFFFFFFFFFFi64 - (v9 >> 1) >= v9 )
        v10 = (v9 >> 1) + v9;
      else
        v10 = 0i64;
      if ( v10 < a2 )
        v10 = a2;
      std::vector<unsigned short>::reserve((__int64)a1, v10);
    }
    v11 = (_WORD *)a1[1];
    v12 = ((__int64)v11 - *a1) >> 1;
    v13 = a2 - v12;
    if ( a2 != v12 )
    {
      while ( v13 )
      {
        *v11++ = 0;
        --v13;
      }
    }
    result = (void **)(a1[1] + 2 * (a2 - ((a1[1] - *a1) >> 1)));
LABEL_4:
    a1[1] = (__int64)result;
  }
  return result;
}
