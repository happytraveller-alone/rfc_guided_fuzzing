//----- (000000014016033C) ----------------------------------------------------
int __fastcall DnsPrint_RawBinary(
        void (*a1)(__int64, const char *, ...),
        __int64 a2,
        __int64 a3,
        const char *a4,
        __int64 a5,
        unsigned int a6,
        int a7)
{
  unsigned int v10; // r14d
  int result; // eax
  const char *v12; // r9
  char *v13; // r10
  unsigned __int64 v14; // rsi
  unsigned int v15; // ebx
  char *v16; // rdx
  STRSAFE_LPSTR v17; // rax
  unsigned int *v18; // rcx
  STRSAFE_LPSTR v19; // rax
  const char *v20; // [rsp+20h] [rbp-828h]
  char v21[2000]; // [rsp+30h] [rbp-818h] BYREF
  __int64 v22[9]; // [rsp+800h] [rbp-48h] BYREF

  v20 = a4;
  v10 = 0;
  result = DnsPrint_Lock();
  if ( result )
  {
    if ( a3 )
    {
      if ( a1 )
        a1(a2, "%s", a3);
      if ( (byte_1401BA001 & 4) != 0 )
        WPP_SF_s(112i64, (unsigned __int16)&WPP_7f900513327334733b8f3a4951ec5607_Traceguids, a3, v12);
    }
    v13 = v21;
    v14 = a5 + a6;
    v21[0] = 0;
    v15 = 0;
    if ( a6 )
    {
      while ( 1 )
      {
        if ( (v15 & 0xF) == 0 || (v15 & 0xF) > 16 - a7 || !v13 )
        {
          if ( v10 > 0xA || !v13 )
          {
            if ( a1 )
              a1(a2, v21);
            v10 = 0;
            v13 = v21;
          }
          v16 = (char *)((char *)v22 - v13);
          if ( v20 )
            v17 = Dns_SprintfPointerA(v13, (signed __int64)v16, "\n%s", v20);
          else
            v17 = Dns_SprintfPointerA(v13, (signed __int64)v16, "\n\t%3d> ", v15);
          v13 = v17;
          if ( !v17 )
            goto LABEL_36;
          ++v10;
        }
        v18 = (unsigned int *)(a5 + v15);
        if ( !a7 )
          break;
        if ( a7 == 4 )
        {
          if ( ((unsigned __int8)v18 & 3) != 0 || (unsigned __int64)(v18 + 1) > v14 )
            break;
          v15 += 4;
          v19 = Dns_SprintfPointerA(v13, (char *)v22 - v13, "%08x ", *v18);
        }
        else if ( a7 == 2 )
        {
          if ( ((unsigned __int8)v18 & 1) != 0 || (unsigned __int64)v18 + 2 > v14 )
            break;
          v15 += 2;
          v19 = Dns_SprintfPointerA(v13, (char *)v22 - v13, "%04x ", *(unsigned __int16 *)v18);
        }
        else
        {
          if ( a7 != 8 || ((unsigned __int8)v18 & 7) != 0 || (unsigned __int64)(v18 + 2) > v14 )
            break;
          v15 += 8;
          v19 = Dns_SprintfPointerA(v13, (char *)v22 - v13, "%I64x ", *(_QWORD *)v18);
        }
LABEL_35:
        v13 = v19;
LABEL_36:
        if ( v15 >= a6 )
          goto LABEL_37;
      }
      ++v15;
      v19 = Dns_SprintfPointerA(v13, (char *)v22 - v13, "%02x ", *(unsigned __int8 *)v18);
      goto LABEL_35;
    }
LABEL_37:
    if ( a1 )
      a1(a2, "%s\r\n", v21);
    if ( (byte_1401BA001 & 4) != 0 )
      WPP_SF_s(113i64, (unsigned __int16)&WPP_7f900513327334733b8f3a4951ec5607_Traceguids, (__int64)v21, v12);
    return DnsPrint_Unlock();
  }
  return result;
}
// 1401603BD: variable 'v12' is possibly undefined
// 140160440: variable 'v20' is possibly undefined
// 140185140: using guessed type __int64 (__fastcall *_guard_dispatch_icall_fptr)(_QWORD, _QWORD);
// 1401BA001: using guessed type char byte_1401BA001;
