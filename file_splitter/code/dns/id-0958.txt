//----- (0000000140081170) ----------------------------------------------------
__int64 __fastcall DotNetRpc_GetServerInfo(__int64 a1, __int64 a2, _DWORD *a3, void ***a4)
{
  void **zero; // rax
  __int64 v7; // r8
  void **v8; // rbx
  int v9; // ecx
  CDnsClientSubnetRecordsTrie *v10; // rcx
  unsigned __int16 v11; // dx
  __int64 result; // rax
  void *v13; // rax
  void *v14; // rax
  void *v15; // rax
  void *v16; // rax
  void *v17; // rax
  void *v18; // rax
  CHAR MultiByteStr[256]; // [rsp+20h] [rbp-128h] BYREF

  zero = (void **)MIDL_user_allocate_zero(0x118ui64);
  v8 = zero;
  if ( !zero )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0xAu, (__int64)&WPP_21ab4c8ef415362ee12b8a2b34f36684_Traceguids);
    }
    return 14i64;
  }
  v9 = g_LastScavengeTime;
  *((_DWORD *)zero + 2) = SrvInfo;
  *((_DWORD *)zero + 41) = dword_1401B9754;
  *((_DWORD *)zero + 38) = dword_1401B9770;
  *((_DWORD *)zero + 39) = dword_1401B9798;
  *((_DWORD *)zero + 53) = dword_1401B9790;
  *((_DWORD *)zero + 54) = dword_1401B9788;
  *((_DWORD *)zero + 55) = g_ulDsForestVersion;
  *((_DWORD *)zero + 56) = g_ulDsDomainVersion;
  *((_DWORD *)zero + 57) = g_ulDsDsaVersion;
  *((_DWORD *)zero + 42) = dword_1401B9854;
  *((_DWORD *)zero + 43) = dword_1401B98B4;
  *((_DWORD *)zero + 44) = dword_1401B97FC;
  *((_DWORD *)zero + 45) = dword_1401B9800;
  *((_DWORD *)zero + 40) = dword_1401B97E0;
  *((_DWORD *)zero + 46) = dword_1401B9808;
  *((_DWORD *)zero + 47) = dword_1401B9858;
  *((_DWORD *)zero + 49) = dword_1401B9904;
  *((_DWORD *)zero + 50) = dword_1401B990C;
  *((_DWORD *)zero + 51) = dword_1401B9910;
  if ( v9 )
    *((_DWORD *)zero + 52) = Time + v9;
  *((_BYTE *)zero + 12) = dword_1401B9728;
  *((_BYTE *)zero + 13) = dword_1401B9724;
  *((_BYTE *)zero + 14) = dword_1401B9838;
  *((_BYTE *)zero + 248) = dword_1401B989C == 0;
  *((_BYTE *)zero + 249) = dword_1401B98A0;
  *((_BYTE *)zero + 250) = dword_1401B97E4;
  *((_BYTE *)zero + 251) = dword_1401B9818;
  *((_BYTE *)zero + 252) = dword_1401B97EC;
  *((_BYTE *)zero + 253) = dword_1401B9814;
  *((_BYTE *)zero + 254) = dword_1401B98A8;
  *((_BYTE *)zero + 255) = dword_1401B98AC;
  *((_BYTE *)zero + 256) = byte_1401B98B8;
  *((_BYTE *)zero + 257) = dword_1401B98BC;
  *((_BYTE *)zero + 258) = dword_1401B98C0;
  *((_BYTE *)zero + 259) = byte_1401B98C8;
  *((_BYTE *)zero + 260) = dword_1401B9908;
  *((_BYTE *)zero + 15) = dword_1401B9740;
  if ( !(unsigned int)RpcUtil_CopyStringToRpcBuffer(zero + 2, Str, v7) )
  {
    v10 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
    {
      goto LABEL_14;
    }
    v11 = 11;
LABEL_13:
    WPP_SF_(*((_QWORD *)v10 + 7), v11, (__int64)&WPP_21ab4c8ef415362ee12b8a2b34f36684_Traceguids);
LABEL_14:
    freeRpcServerInfo(v8);
    return 14i64;
  }
  if ( g_pwszDnsContainerDN )
  {
    v13 = Dns_StringCopyAllocate((char *)g_pwszDnsContainerDN, 0, 1i64, 1);
    v8[3] = v13;
    if ( !v13 )
    {
      v10 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
      {
        goto LABEL_14;
      }
      v11 = 12;
      goto LABEL_13;
    }
  }
  if ( !(unsigned int)RpcUtil_CopyIpArrayToRpcBuffer(v8 + 4, (__int64)g_ServerAddrs) )
    goto LABEL_14;
  if ( !(unsigned int)RpcUtil_CopyIpArrayToRpcBuffer(v8 + 5, qword_1401B97A0) )
    goto LABEL_14;
  if ( !(unsigned int)RpcUtil_CopyIpArrayToRpcBuffer(v8 + 6, qword_1401B97D0) )
    goto LABEL_14;
  if ( !(unsigned int)RpcUtil_CopyIpArrayToRpcBuffer(v8 + 7, qword_1401B9768) )
    goto LABEL_14;
  if ( qword_1401B9760 )
  {
    v14 = Dns_StringCopyAllocate((char *)qword_1401B9760, 0, 1i64, 1);
    v8[8] = v14;
    if ( !v14 )
      goto LABEL_14;
  }
  if ( g_pszForestDefaultDpFqdn )
  {
    v15 = Dns_StringCopyAllocate((char *)g_pszDomainDefaultDpFqdn, 0, 2i64, 2);
    v8[11] = v15;
    if ( !v15 )
      goto LABEL_14;
    if ( g_pszForestDefaultDpFqdn )
    {
      v16 = Dns_StringCopyAllocate((char *)g_pszForestDefaultDpFqdn, 0, 2i64, 2);
      v8[12] = v16;
      if ( !v16 )
        goto LABEL_14;
    }
  }
  if ( DistinguishedName )
  {
    Ds_ConvertDnToFqdn(DistinguishedName, MultiByteStr);
    v17 = Dns_StringCopyAllocate(MultiByteStr, 0, 2i64, 2);
    v8[9] = v17;
    if ( !v17 )
      goto LABEL_14;
  }
  if ( qword_1401B6B88 )
  {
    Ds_ConvertDnToFqdn((const wchar_t *)qword_1401B6B88, MultiByteStr);
    v18 = Dns_StringCopyAllocate(MultiByteStr, 0, 2i64, 2);
    v8[10] = v18;
    if ( !v18 )
      goto LABEL_14;
  }
  *(_DWORD *)v8 = 1;
  result = 0i64;
  *a4 = v8;
  *a3 = 19;
  return result;
}
// 1400813B8: variable 'v7' is possibly undefined
// 1401B6B88: using guessed type __int64 qword_1401B6B88;
// 1401B7F3C: using guessed type int g_ulDsForestVersion;
// 1401B7F68: using guessed type int g_ulDsDomainVersion;
// 1401B7F74: using guessed type int g_ulDsDsaVersion;
// 1401B8C18: using guessed type int g_LastScavengeTime;
// 1401B96F0: using guessed type int SrvInfo;
// 1401B9724: using guessed type int dword_1401B9724;
// 1401B9728: using guessed type int dword_1401B9728;
// 1401B9740: using guessed type int dword_1401B9740;
// 1401B9754: using guessed type int dword_1401B9754;
// 1401B9768: using guessed type __int64 qword_1401B9768;
// 1401B9770: using guessed type int dword_1401B9770;
// 1401B9788: using guessed type int dword_1401B9788;
// 1401B9790: using guessed type int dword_1401B9790;
// 1401B9798: using guessed type int dword_1401B9798;
// 1401B97A0: using guessed type __int64 qword_1401B97A0;
// 1401B97D0: using guessed type __int64 qword_1401B97D0;
// 1401B97E0: using guessed type int dword_1401B97E0;
// 1401B97E4: using guessed type int dword_1401B97E4;
// 1401B97EC: using guessed type int dword_1401B97EC;
// 1401B97FC: using guessed type int dword_1401B97FC;
// 1401B9800: using guessed type int dword_1401B9800;
// 1401B9808: using guessed type int dword_1401B9808;
// 1401B9814: using guessed type int dword_1401B9814;
// 1401B9818: using guessed type int dword_1401B9818;
// 1401B9838: using guessed type int dword_1401B9838;
// 1401B9854: using guessed type int dword_1401B9854;
// 1401B9858: using guessed type int dword_1401B9858;
// 1401B989C: using guessed type int dword_1401B989C;
// 1401B98A0: using guessed type int dword_1401B98A0;
// 1401B98A8: using guessed type int dword_1401B98A8;
// 1401B98AC: using guessed type int dword_1401B98AC;
// 1401B98B4: using guessed type int dword_1401B98B4;
// 1401B98B8: using guessed type char byte_1401B98B8;
// 1401B98BC: using guessed type int dword_1401B98BC;
// 1401B98C0: using guessed type int dword_1401B98C0;
// 1401B98C8: using guessed type char byte_1401B98C8;
// 1401B9904: using guessed type int dword_1401B9904;
// 1401B9908: using guessed type int dword_1401B9908;
// 1401B990C: using guessed type int dword_1401B990C;
// 1401B9910: using guessed type int dword_1401B9910;
