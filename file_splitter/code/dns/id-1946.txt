//----- (00000001400EDC8C) ----------------------------------------------------
__int64 __fastcall DnsOls_CreateNsec3Hashes(__int64 a1, __int64 a2, __int128 *a3, __int64 a4, __int64 a5, __int64 a6)
{
  __int128 *v7; // rbx
  __int64 v8; // rbp
  CDnsClientSubnetRecordsTrie *v9; // rcx
  const char *v10; // rbx
  char *v11; // rax
  __int64 result; // rax
  __int64 v13; // rdx
  unsigned __int8 *v14; // rbx
  unsigned __int16 *v15; // rax
  unsigned __int16 *v16; // rbp
  __int64 v17; // rcx
  __int64 *v18; // rdi
  __int64 *v19; // rbx
  __int64 Child; // rbx
  unsigned int v21; // esi
  __int128 v22; // [rsp+40h] [rbp-38h] BYREF
  char v23[40]; // [rsp+50h] [rbp-28h] BYREF

  v7 = a3;
  v8 = a1;
  v9 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    if ( v8 )
      v10 = *(const char **)(v8 + 16);
    else
      v10 = 0i64;
    v11 = Dbg_NodeName(a2);
    WPP_SF_ss(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x57u,
      (__int64)&WPP_4a0a7bf065bf32df4bbeec8f9c7ea0c3_Traceguids,
      v10,
      (__int64)v11);
    v9 = WPP_GLOBAL_Control;
    v7 = a3;
  }
  if ( g_fDnsServiceExit == 1 )
  {
    if ( v9 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)v9 + 17) & 0x200000) != 0
      && *((_BYTE *)v9 + 65) >= 4u )
    {
      WPP_SF_(*((_QWORD *)v9 + 7), 0x58u, (__int64)&WPP_4a0a7bf065bf32df4bbeec8f9c7ea0c3_Traceguids);
    }
    return 1167617i64;
  }
  else
  {
    if ( *(_BYTE *)(a4 + 96) != 35 && NTree_NodeOrChildHasRecords(a4, 0) )
    {
      if ( *((_BYTE *)v7 + 3) == 1 && (*(_DWORD *)(a4 + 92) & 0x100) == 0 )
      {
        if ( RR_FindNextRecordEx(a4, 0, 2u, 0i64, 0, 0) )
        {
          result = RR_FindNextRecordEx(a4, 0, 0x2Bu, 0i64, 0, 0);
          if ( !result )
            return result;
        }
      }
      v14 = BuildNsec3Name(v8, v13, a4, a5);
      if ( !v14 )
        return 14i64;
      v15 = (unsigned __int16 *)operator new(0x178ui64);
      v16 = v15;
      if ( !v15 )
        return 14i64;
      *((_QWORD *)v15 + 46) = v14;
      Name_ConvertRawNameToLookupName(v14 + 2, v15);
      v18 = *(__int64 **)(a6 + 8);
      v19 = (__int64 *)v18[1];
      while ( !*((_BYTE *)v19 + 41) )
      {
        if ( DnsSign::CLookupNameCompare::operator()(v17, (unsigned __int16 *)v19[3], v16) )
        {
          v19 = (__int64 *)v19[2];
        }
        else
        {
          v18 = v19;
          v19 = (__int64 *)*v19;
        }
      }
      if ( v18 == *(__int64 **)(a6 + 8) || DnsSign::CLookupNameCompare::operator()(v17, v16, (unsigned __int16 *)v18[3]) )
        v18 = *(__int64 **)(a6 + 8);
      if ( v18 != *(__int64 **)(a6 + 8) && v18[4] != a4 )
        return 9129i64;
      *(_QWORD *)&v22 = v16;
      *((_QWORD *)&v22 + 1) = a4;
      std::_Tree<std::_Tmap_traits<_lookup_name *,_DnsTreeNode *,DnsSign::CLookupNameCompare,std::allocator<std::pair<_lookup_name * const,_DnsTreeNode *>>,0>>::insert<std::pair<_lookup_name *,_DnsTreeNode *>>(
        a6,
        (__int64)v23,
        &v22);
      v8 = a1;
    }
    Child = NTree_FirstChild(a4);
    if ( Child )
    {
      while ( 1 )
      {
        v22 = *a3;
        v21 = DnsOls_CreateNsec3Hashes(v8, a2, &v22, Child, a5, a6);
        if ( v21 )
          break;
        Child = NTree_NextSiblingWithLocking(Child);
        if ( !Child )
          return v21;
      }
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        WPP_SF_Dss(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x59u,
          (__int64)&WPP_4a0a7bf065bf32df4bbeec8f9c7ea0c3_Traceguids,
          v21,
          Child + 102,
          *(_QWORD *)(v8 + 16));
      }
    }
    else
    {
      return 0;
    }
    return v21;
  }
}
// 1400EDDDF: variable 'v13' is possibly undefined
// 1400EDE34: variable 'v17' is possibly undefined
// 1401B9A40: using guessed type int g_fDnsServiceExit;
// 1400EDC8C: using guessed type char var_28[40];
