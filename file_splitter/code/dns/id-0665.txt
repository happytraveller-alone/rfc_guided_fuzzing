//----- (000000014005E9D0) ----------------------------------------------------
ULONG __fastcall Template_csssqqqcqb(
        __int64 a1,
        __int64 a2,
        char a3,
        const char *a4,
        const char *a5,
        const char *a6,
        char a7,
        char a8,
        char a9,
        char a10,
        int a11,
        __int64 a12)
{
  __int64 v12; // rcx
  __int64 v13; // rdx
  int v14; // edx
  const char *v15; // r10
  const char *v16; // rax
  __int64 v17; // rdx
  int v18; // edx
  const char *v19; // rax
  int v20; // ecx
  struct _EVENT_DATA_DESCRIPTOR UserData; // [rsp+20h] [rbp-99h] BYREF
  const char *v23; // [rsp+30h] [rbp-89h]
  int v24; // [rsp+38h] [rbp-81h]
  int v25; // [rsp+3Ch] [rbp-7Dh]
  const char *v26; // [rsp+40h] [rbp-79h]
  int v27; // [rsp+48h] [rbp-71h]
  int v28; // [rsp+4Ch] [rbp-6Dh]
  const char *v29; // [rsp+50h] [rbp-69h]
  int v30; // [rsp+58h] [rbp-61h]
  int v31; // [rsp+5Ch] [rbp-5Dh]
  char *v32; // [rsp+60h] [rbp-59h]
  __int64 v33; // [rsp+68h] [rbp-51h]
  char *v34; // [rsp+70h] [rbp-49h]
  __int64 v35; // [rsp+78h] [rbp-41h]
  char *v36; // [rsp+80h] [rbp-39h]
  __int64 v37; // [rsp+88h] [rbp-31h]
  char *v38; // [rsp+90h] [rbp-29h]
  __int64 v39; // [rsp+98h] [rbp-21h]
  int *v40; // [rsp+A0h] [rbp-19h]
  __int64 v41; // [rsp+A8h] [rbp-11h]
  __int64 v42; // [rsp+B0h] [rbp-9h]
  int v43; // [rsp+B8h] [rbp-1h]
  int v44; // [rsp+BCh] [rbp+3h]
  char v45; // [rsp+F0h] [rbp+37h] BYREF

  v45 = a3;
  *(_QWORD *)&UserData.Size = 1i64;
  v12 = -1i64;
  UserData.Ptr = (ULONGLONG)&v45;
  if ( a4 )
  {
    v13 = -1i64;
    do
      ++v13;
    while ( a4[v13] );
    v14 = v13 + 1;
  }
  else
  {
    v14 = 5;
  }
  v15 = "NULL";
  v24 = v14;
  v16 = "NULL";
  v25 = 0;
  if ( a4 )
    v16 = a4;
  v23 = v16;
  if ( a5 )
  {
    v17 = -1i64;
    do
      ++v17;
    while ( a5[v17] );
    v18 = v17 + 1;
  }
  else
  {
    v18 = 5;
  }
  v27 = v18;
  v19 = "NULL";
  v28 = 0;
  if ( a5 )
    v19 = a5;
  v26 = v19;
  if ( a6 )
  {
    do
      ++v12;
    while ( a6[v12] );
    v20 = v12 + 1;
  }
  else
  {
    v20 = 5;
  }
  v30 = v20;
  if ( a6 )
    v15 = a6;
  v31 = 0;
  v29 = v15;
  v32 = &a7;
  v33 = 4i64;
  v34 = &a8;
  v35 = 4i64;
  v36 = &a9;
  v38 = &a10;
  v40 = &a11;
  v42 = a12;
  v43 = a11;
  v37 = 4i64;
  v39 = 1i64;
  v41 = 4i64;
  v44 = 0;
  return EventWrite(Microsoft_Windows_DNSServerHandle, &DNS_EVENT_UPDATE_IN, 0xAu, &UserData);
}
