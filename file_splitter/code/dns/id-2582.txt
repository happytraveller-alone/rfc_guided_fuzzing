//----- (0000000140131750) ----------------------------------------------------
__int64 __fastcall CDnsPolicy_FQDNCriteriaTree::FindMatchingPolicyForQuery(
        _QWORD *a1,
        __int64 a2,
        unsigned __int16 *a3,
        const void ***a4,
        __int64 a5,
        int a6)
{
  __int64 v8; // r15
  __int64 v10; // rbp
  int v11; // ebx
  CDnsClientSubnetRecordsTrie *v12; // rax
  char *v13; // rax
  __int64 *v14; // rax
  void **v15; // rdi
  __int64 v16; // rsi
  unsigned int MatchingPolicyForQuery; // ebp
  CDnsClientSubnetRecordsTrie *v18; // r10
  const void **v19; // rcx
  int v20; // r15d
  const char *CriteriaTypeString; // rax
  __int64 v22; // r10
  __int64 v23; // r8
  _QWORD **v24; // rcx
  _QWORD *v25; // rax
  const char *v26; // rax
  __int64 v27; // r10
  char *v28; // rax
  _QWORD *v29; // rcx
  _QWORD *v30; // rbx
  __int64 v32; // [rsp+40h] [rbp-A8h]
  void *v34[3]; // [rsp+70h] [rbp-78h] BYREF
  unsigned __int64 v35; // [rsp+88h] [rbp-60h]

  v8 = a2;
  v10 = a5;
  v11 = 0;
  v12 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
  {
    if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0 && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
    {
      WPP_SF_q(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x20u,
        (__int64)&WPP_bbbcc621566c3408fe84d6a85874d543_Traceguids,
        a2);
      v12 = WPP_GLOBAL_Control;
    }
    if ( v12 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)v12 + 17) & 0x400000) != 0
      && *((_BYTE *)v12 + 65) >= 4u )
    {
      v13 = Dbg_LookupName(a3);
      WPP_SF_s(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x21u,
        (__int64)&WPP_bbbcc621566c3408fe84d6a85874d543_Traceguids,
        v13);
    }
  }
  v14 = CDnsPolicy_FQDNCriteriaTree::LookupFQDNCriteriaNodes(a1, a3, a5);
  v15 = (void **)v14;
  if ( v14 && v14[1] )
  {
    while ( 1 )
    {
      v16 = *(_QWORD *)(*(_QWORD *)*v15 + 16i64);
      MatchingPolicyForQuery = CDnsPolicy_CriteriaNode::FindMatchingPolicyForQuery(
                                 (__int64 ***)v16,
                                 v8,
                                 (__int64)a3,
                                 a4,
                                 v10,
                                 a6);
      if ( MatchingPolicyForQuery )
        break;
      v18 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
      {
        v19 = *a4;
        if ( *a4 )
          v20 = *((_DWORD *)v19 + 26);
        else
          v20 = -1;
        if ( v19 )
        {
          CDnsPolicy::Name(v19, (__int64)v34);
          v11 |= 1u;
        }
        CriteriaTypeString = GetCriteriaTypeString(*(unsigned __int16 *)(v16 + 48));
        LODWORD(v32) = v20;
        v8 = a2;
        WPP_SF_qsqqSd(*(_QWORD *)(v22 + 56), 0x24u, (__int64)*a4, v16, CriteriaTypeString, a2, *a4, v23, v32);
        v18 = WPP_GLOBAL_Control;
      }
      if ( (v11 & 1) != 0 )
      {
        v11 &= ~1u;
        if ( v35 >= 8 )
        {
          operator delete(v34[0]);
          v18 = WPP_GLOBAL_Control;
        }
      }
      v24 = *(_QWORD ***)*v15;
      if ( v24 != *v15 )
      {
        *v24[1] = *v24;
        (*v24)[1] = v24[1];
        operator delete(v24);
        v15[1] = (char *)v15[1] - 1;
        v18 = WPP_GLOBAL_Control;
      }
      if ( a6 == 4 && *a4 )
      {
        if ( v18 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)v18 + 17) & 0x400000) != 0
          && *((_BYTE *)v18 + 65) >= 4u )
        {
          v25 = (_QWORD *)CDnsPolicy::Name(*a4, (__int64)v34);
          LOBYTE(v11) = v11 | 2;
          if ( v25[3] >= 8ui64 )
            v25 = (_QWORD *)*v25;
          WPP_SF_qS(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x25u,
            (__int64)&WPP_bbbcc621566c3408fe84d6a85874d543_Traceguids,
            *a4,
            v25);
        }
        if ( (v11 & 2) != 0 && v35 >= 8 )
          operator delete(v34[0]);
        goto LABEL_48;
      }
      if ( !v15[1] )
        goto LABEL_48;
      v10 = a5;
    }
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      v26 = GetCriteriaTypeString(*(unsigned __int16 *)(v16 + 48));
      WPP_SF_dqsq(
        *(_QWORD *)(v27 + 56),
        0x23u,
        (__int64)&WPP_bbbcc621566c3408fe84d6a85874d543_Traceguids,
        MatchingPolicyForQuery,
        v16,
        (__int64)v26);
    }
  }
  else
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
    {
      v28 = Dbg_LookupName(a3);
      WPP_SF_sq(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x22u,
        (__int64)&WPP_bbbcc621566c3408fe84d6a85874d543_Traceguids,
        v28);
    }
    MatchingPolicyForQuery = 0;
  }
LABEL_48:
  if ( v15 )
  {
    v29 = *(_QWORD **)*v15;
    *(_QWORD *)*v15 = *v15;
    *((_QWORD *)*v15 + 1) = *v15;
    v15[1] = 0i64;
    if ( v29 != *v15 )
    {
      do
      {
        v30 = (_QWORD *)*v29;
        operator delete(v29);
        v29 = v30;
      }
      while ( v30 != *v15 );
    }
    operator delete(*v15);
    operator delete(v15);
  }
  return MatchingPolicyForQuery;
}
// 14013191B: variable 'v22' is possibly undefined
// 14013191F: variable 'v23' is possibly undefined
// 14013191F: variable 'v32' is possibly undefined
// 140131A7E: variable 'v27' is possibly undefined
// 140184CA8: using guessed type void __stdcall operator delete(void *);
