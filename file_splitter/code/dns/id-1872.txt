//----- (00000001400E73C8) ----------------------------------------------------
const void **__fastcall std::string::assign(_QWORD *a1, char *Src, char *Size)
{
  _QWORD *v5; // rbx
  char *v6; // rax
  _BYTE *v7; // rax
  _BYTE *v9; // rax
  void *v10; // rcx
  bool v11; // cf
  const void *v12; // rax

  v5 = a1;
  if ( !Src )
    goto LABEL_13;
  v6 = a1[3] < 0x10ui64 ? (char *)a1 : (char *)*a1;
  if ( Src < v6 )
    goto LABEL_13;
  if ( a1[3] >= 0x10ui64 )
    a1 = (_QWORD *)*a1;
  if ( (char *)a1 + v5[2] > Src )
  {
    if ( v5[3] < 0x10ui64 )
      v7 = v5;
    else
      v7 = (_BYTE *)*v5;
    return std::string::assign((const void **)v5, (const void **)v5, Src - v7, Size);
  }
  else
  {
LABEL_13:
    if ( Size == (char *)-1i64 )
      std::wstring::_Xlen();
    if ( v5[3] >= (unsigned __int64)Size )
    {
      if ( !Size )
      {
        v5[2] = 0i64;
        if ( v5[3] < 0x10ui64 )
          v9 = v5;
        else
          v9 = (_BYTE *)*v5;
        *v9 = 0;
      }
    }
    else
    {
      std::string::_Copy((const void **)v5, (unsigned __int64)Size, v5[2]);
    }
    if ( Size )
    {
      if ( v5[3] < 0x10ui64 )
        v10 = v5;
      else
        v10 = (void *)*v5;
      memcpy_0(v10, Src, (size_t)Size);
      v11 = v5[3] < 0x10ui64;
      v5[2] = Size;
      if ( v11 )
        v12 = v5;
      else
        v12 = (const void *)*v5;
      Size[(_QWORD)v12] = 0;
    }
    return (const void **)v5;
  }
}
