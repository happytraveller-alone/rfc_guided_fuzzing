//----- (00000001400AA130) ----------------------------------------------------
__int64 __fastcall Rpc_GetPolicy(
        __int64 a1,
        __int64 a2,
        __int64 a3,
        __int64 a4,
        int a5,
        wchar_t *Str,
        _DWORD *a7,
        _QWORD *a8)
{
  unsigned int DNSPolicy; // edi
  int Lock; // eax
  _QWORD *v12; // rdx
  struct _DnssrvRpcPolicy *v13; // [rsp+30h] [rbp-18h] BYREF

  v13 = 0i64;
  if ( !(unsigned int)IsValidFileName(Str) )
    return 9982i64;
  if ( !a3 )
  {
    Lock = Policy_AcquireReadLock(&g_hServerLevelPolicyLock, 0x2710u);
    DNSPolicy = Lock;
    if ( Lock )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        WPP_SF_D(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x4Cu,
          (__int64)&WPP_8dcaf0ee02573174dfb45ec0cfad4f2e_Traceguids,
          Lock);
      }
      return DNSPolicy;
    }
    goto LABEL_14;
  }
  DNSPolicy = Zone_LockForReadEx(a3, 0, 0x2710u);
  if ( !DNSPolicy )
  {
LABEL_14:
    DNSPolicy = Get_DNSPolicy((char *)Str, a3, &v13);
    if ( !DNSPolicy )
    {
      v12 = a8;
      *a7 = 58;
      *v12 = v13;
    }
    if ( a3 )
    {
      Zone_UnlockAfterReadEx(a3, 0);
    }
    else
    {
      LODWORD(Str) = -1;
      releaseRead(g_hServerLevelPolicyLock, (unsigned int *)&Str, 1);
    }
    return DNSPolicy;
  }
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
  {
    WPP_SF_SD(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x4Bu,
      (__int64)&WPP_8dcaf0ee02573174dfb45ec0cfad4f2e_Traceguids,
      *(const unsigned __int16 **)(a3 + 24));
  }
  return DNSPolicy;
}
// 1401B9240: using guessed type __int64 g_hServerLevelPolicyLock;
