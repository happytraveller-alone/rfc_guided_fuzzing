//----- (00000001400A9FE0) ----------------------------------------------------
__int64 __fastcall Rpc_EnumeratePolicy(
        __int64 a1,
        __int64 a2,
        __int64 a3,
        __int64 a4,
        int a5,
        int a6,
        _DWORD *a7,
        _QWORD *a8)
{
  unsigned int v9; // edi
  int Lock; // eax
  struct _DnsRpcEnumPolicyList *v12; // [rsp+50h] [rbp+18h] BYREF

  v12 = 0i64;
  if ( a3 )
  {
    v9 = Zone_LockForReadEx(a3, 0, 0x2710u);
    if ( v9 )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        WPP_SF_SD(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x49u,
          (__int64)&WPP_8dcaf0ee02573174dfb45ec0cfad4f2e_Traceguids,
          *(const unsigned __int16 **)(a3 + 24));
      }
      return v9;
    }
    goto LABEL_12;
  }
  Lock = Policy_AcquireReadLock(&g_hServerLevelPolicyLock, 0x2710u);
  v9 = Lock;
  if ( !Lock )
  {
LABEL_12:
    v9 = Enumerate_Policy(a3, a6, &v12);
    if ( !v9 )
    {
      *a8 = v12;
      *a7 = 60;
    }
    if ( a3 )
    {
      Zone_UnlockAfterReadEx(a3, 0);
    }
    else
    {
      a6 = -1;
      releaseRead(g_hServerLevelPolicyLock, (unsigned int *)&a6, 1);
    }
    return v9;
  }
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
  {
    WPP_SF_D(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x4Au,
      (__int64)&WPP_8dcaf0ee02573174dfb45ec0cfad4f2e_Traceguids,
      Lock);
  }
  return v9;
}
// 1401B9240: using guessed type __int64 g_hServerLevelPolicyLock;
