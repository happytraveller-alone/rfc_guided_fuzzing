//----- (00000001400E7F84) ----------------------------------------------------
_QWORD *__fastcall std::_Tree<std::_Tmap_traits<_CountName,std::unique_ptr<TrustPoint>,CountNameCompare,std::allocator<std::pair<_CountName const,std::unique_ptr<TrustPoint>>>,0>>::_Insert(
        __int64 a1,
        _QWORD *a2,
        __int64 *a3,
        __int64 a4)
{
  unsigned __int8 *v4; // rbp
  _QWORD *v6; // rdi
  __int64 *v7; // r9
  char v8; // r8
  __int64 *v9; // r9
  char v10; // r8
  __int64 *v11; // rax
  __int64 v12; // rbx
  __int64 j; // rax
  __int64 i; // rcx
  __int64 *v15; // rbx
  __int64 v16; // rax
  __int64 k; // rax
  _QWORD *v19; // [rsp+20h] [rbp-38h]
  char v20[40]; // [rsp+30h] [rbp-28h] BYREF

  v4 = (unsigned __int8 *)(a4 + 24);
  v6 = a2;
  if ( !qword_1401B9290 )
  {
    v19 = (_QWORD *)a4;
    v7 = (__int64 *)qword_1401B9288;
LABEL_3:
    v8 = 1;
LABEL_4:
    std::_Tree<std::_Tmap_traits<_CountName,std::unique_ptr<TrustPoint>,CountNameCompare,std::allocator<std::pair<_CountName const,std::unique_ptr<TrustPoint>>>,0>>::_Insert(
      a1,
      a2,
      v8,
      v7,
      v19);
    return v6;
  }
  if ( a3 != *(__int64 **)qword_1401B9288 )
  {
    if ( a3 != (__int64 *)qword_1401B9288 )
    {
      if ( (int)Name_CaseInsensitiveCompareCountNames((unsigned __int8 *)(a4 + 24), (unsigned __int8 *)a3 + 24, 0i64) >= 0 )
        goto LABEL_32;
      v11 = a3;
      if ( *((_BYTE *)a3 + 297) )
      {
        v12 = a3[2];
      }
      else
      {
        v12 = *a3;
        if ( *(_BYTE *)(*a3 + 297) )
        {
          for ( i = a3[1]; !*(_BYTE *)(i + 297) && v11 == *(__int64 **)i; i = *(_QWORD *)(i + 8) )
            v11 = (__int64 *)i;
          v12 = (__int64)v11;
          if ( !*((_BYTE *)v11 + 297) )
            v12 = i;
        }
        else
        {
          for ( j = *(_QWORD *)(v12 + 16); !*(_BYTE *)(j + 297); j = *(_QWORD *)(j + 16) )
            v12 = j;
        }
      }
      if ( (int)Name_CaseInsensitiveCompareCountNames((unsigned __int8 *)(v12 + 24), v4, 0i64) >= 0 )
      {
LABEL_32:
        if ( (int)Name_CaseInsensitiveCompareCountNames((unsigned __int8 *)a3 + 24, v4, 0i64) >= 0 )
          goto LABEL_47;
        v7 = a3;
        v15 = a3;
        if ( !*((_BYTE *)a3 + 297) )
        {
          v16 = a3[2];
          if ( *(_BYTE *)(v16 + 297) )
          {
            for ( k = a3[1]; !*(_BYTE *)(k + 297) && v15 == *(__int64 **)(k + 16); k = *(_QWORD *)(k + 8) )
              v15 = (__int64 *)k;
            v15 = (__int64 *)k;
          }
          else
          {
            do
            {
              v15 = (__int64 *)v16;
              v16 = *(_QWORD *)v16;
            }
            while ( !*(_BYTE *)(v16 + 297) );
          }
        }
        if ( v15 != (__int64 *)qword_1401B9288 )
        {
          if ( (int)Name_CaseInsensitiveCompareCountNames(v4, (unsigned __int8 *)v15 + 24, 0i64) >= 0 )
            goto LABEL_47;
          v7 = a3;
        }
        a2 = v6;
        v19 = (_QWORD *)a4;
        if ( !*(_BYTE *)(v7[2] + 297) )
        {
          v7 = v15;
          goto LABEL_3;
        }
      }
      else
      {
        a2 = v6;
        v19 = (_QWORD *)a4;
        if ( !*(_BYTE *)(*(_QWORD *)(v12 + 16) + 297i64) )
        {
          v7 = a3;
          goto LABEL_3;
        }
        v7 = (__int64 *)v12;
      }
      v8 = 0;
      goto LABEL_4;
    }
    if ( (int)Name_CaseInsensitiveCompareCountNames(
                (unsigned __int8 *)(*(_QWORD *)(qword_1401B9288 + 16) + 24i64),
                (unsigned __int8 *)(a4 + 24),
                0i64) < 0 )
    {
      v10 = 0;
      v9 = *(__int64 **)(qword_1401B9288 + 16);
      goto LABEL_9;
    }
LABEL_47:
    *v6 = *(_QWORD *)std::_Tree<std::_Tmap_traits<_CountName,std::unique_ptr<TrustPoint>,CountNameCompare,std::allocator<std::pair<_CountName const,std::unique_ptr<TrustPoint>>>,0>>::_Linsert(
                       a1,
                       (__int64)v20,
                       a4);
    return v6;
  }
  if ( (int)Name_CaseInsensitiveCompareCountNames((unsigned __int8 *)(a4 + 24), (unsigned __int8 *)a3 + 24, 0i64) >= 0 )
    goto LABEL_47;
  v9 = a3;
  v10 = 1;
LABEL_9:
  std::_Tree<std::_Tmap_traits<_CountName,std::unique_ptr<TrustPoint>,CountNameCompare,std::allocator<std::pair<_CountName const,std::unique_ptr<TrustPoint>>>,0>>::_Insert(
    a1,
    v6,
    v10,
    v9,
    (_QWORD *)a4);
  return v6;
}
// 1400E7FBF: variable 'a1' is possibly undefined
// 1401B9288: using guessed type __int64 qword_1401B9288;
// 1401B9290: using guessed type __int64 qword_1401B9290;
// 1400E7F84: using guessed type char var_28[40];
