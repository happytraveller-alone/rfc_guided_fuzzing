//----- (00000001400E5E10) ----------------------------------------------------
__int64 __fastcall std::filebuf::overflow(__int64 a1, unsigned int a2)
{
  unsigned int v4; // ebx
  _QWORD *v6; // rax
  int *v7; // rdx
  _QWORD *v8; // rdx
  _BYTE *v9; // r8
  _QWORD *v10; // rdx
  __int64 v11; // rcx
  void *p_Buffer; // r8
  void *v13; // r9
  int v14; // eax
  _BYTE *v15; // rax
  signed __int64 v16; // r14
  const void *v17; // rcx
  char v18; // [rsp+58h] [rbp-19h] BYREF
  char v19[7]; // [rsp+59h] [rbp-18h] BYREF
  _BYTE *v20; // [rsp+60h] [rbp-11h] BYREF
  __int64 v21[2]; // [rsp+68h] [rbp-9h] BYREF
  void *Buffer; // [rsp+78h] [rbp+7h] BYREF
  char v23; // [rsp+80h] [rbp+Fh]
  unsigned __int64 v24; // [rsp+88h] [rbp+17h]
  unsigned __int64 v25; // [rsp+90h] [rbp+1Fh]

  v21[1] = -2i64;
  v4 = -1;
  if ( a2 == -1 )
    return 0i64;
  v6 = *(_QWORD **)(a1 + 72);
  if ( *v6 && (v7 = *(int **)(a1 + 96), *v6 < (unsigned __int64)(*v6 + *v7)) )
  {
    --*v7;
    v8 = *(_QWORD **)(a1 + 72);
    v9 = (_BYTE *)(*v8)++;
    *v9 = a2;
    return a2;
  }
  else
  {
    if ( *(_QWORD *)(a1 + 152) )
    {
      v10 = *(_QWORD **)(a1 + 32);
      if ( *v10 == a1 + 136 )
      {
        v11 = *(_QWORD *)(a1 + 120);
        *v10 = *(_QWORD *)(a1 + 112);
        **(_QWORD **)(a1 + 64) = v11;
        **(_DWORD **)(a1 + 88) = 0;
      }
      if ( *(_QWORD *)(a1 + 128) )
      {
        v18 = a2;
        v25 = 15i64;
        Buffer = 0i64;
        v24 = 8i64;
        v23 = 0;
        while ( 1 )
        {
          p_Buffer = &Buffer;
          if ( v25 >= 0x10 )
            p_Buffer = Buffer;
          v13 = &Buffer;
          if ( v25 >= 0x10 )
            v13 = Buffer;
          v14 = (*(__int64 (__fastcall **)(_QWORD, __int64, char *, char *, __int64 *, void *, unsigned __int64, _BYTE **))(**(_QWORD **)(a1 + 128) + 40i64))(
                  *(_QWORD *)(a1 + 128),
                  a1 + 140,
                  &v18,
                  v19,
                  v21,
                  v13,
                  (unsigned __int64)p_Buffer + v24,
                  &v20);
          if ( v14 < 0 )
            break;
          if ( v14 > 1 )
          {
            if ( v14 == 3 && fputc(v18, *(FILE **)(a1 + 152)) != -1 )
              v4 = a2;
            break;
          }
          v15 = &Buffer;
          if ( v25 >= 0x10 )
            v15 = Buffer;
          v16 = v20 - v15;
          if ( v20 != v15 )
          {
            v17 = &Buffer;
            if ( v25 >= 0x10 )
              v17 = Buffer;
            if ( v16 != fwrite(v17, 1ui64, v20 - v15, *(FILE **)(a1 + 152)) )
              break;
          }
          *(_BYTE *)(a1 + 137) = 1;
          if ( (char *)v21[0] != &v18 )
          {
            v4 = a2;
            break;
          }
          if ( !v16 )
          {
            if ( v24 >= 0x20 )
              break;
            std::string::append((size_t *)&Buffer, 8ui64, 0);
          }
        }
        if ( v25 >= 0x10 )
          operator delete(Buffer);
      }
      else if ( fputc((char)a2, *(FILE **)(a1 + 152)) != -1 )
      {
        return a2;
      }
    }
    return v4;
  }
}
// 140184CA8: using guessed type void __stdcall operator delete(void *);
// 140185140: using guessed type __int64 (__fastcall *_guard_dispatch_icall_fptr)(_QWORD, _QWORD);
// 1400E5E10: using guessed type char var_6F[7];
