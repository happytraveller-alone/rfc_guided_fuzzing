//----- (0000000140118F3C) ----------------------------------------------------
LPVOID __fastcall Mem_Alloc(unsigned int a1, __int64 a2, const char *a3, int a4)
{
  unsigned int v6; // ebp
  unsigned int v8; // edi
  LPVOID v9; // rcx
  __int64 v10; // r9
  unsigned int v11; // r8d
  int v12; // edx
  char *v13; // rbx
  __int64 v14; // r8
  __int64 v15; // rsi
  __int64 v16; // r15
  unsigned int v17; // r14d
  _DWORD *v18; // rbp
  _DWORD *v19; // rdx
  int v20; // ecx
  unsigned int v21; // eax
  __int64 v22; // rbp
  __int64 v23; // rax
  const char *v24; // r8
  unsigned int v25; // edx
  CDnsClientSubnetRecordsTrie *v26; // rcx
  int v27; // r14d
  __int64 v29; // [rsp+28h] [rbp-40h]
  __int64 v30; // [rsp+38h] [rbp-30h]
  unsigned int v31; // [rsp+78h] [rbp+10h]

  v31 = a2;
  v6 = a2;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && *((char *)WPP_GLOBAL_Control + 28) < 0
    && *((_BYTE *)WPP_GLOBAL_Control + 25) >= 5u )
  {
    WPP_SF_ddsd(*((_QWORD *)WPP_GLOBAL_Control + 2), a2, (__int64)a3, a1, a2, a3, a4);
  }
  v8 = a1 + 16;
  if ( a1 + 16 >= a1 )
  {
    if ( v8 > 0xA0 )
    {
      v9 = allocMemory(v8, a3, a4);
      if ( !v9 )
        return v9;
      if ( v8 <= 0xFFFC )
      {
        if ( (v8 & 3) != 0 )
          v8 = (v8 & 0xFFFC) + 4;
      }
      else
      {
        v8 = 65532;
      }
      _InterlockedIncrement(&dword_1401B9AA4);
      _InterlockedExchangeAdd(&dword_1401B9AB0, v8);
      v10 = v6;
      v11 = v8;
      v12 = 0;
      return (LPVOID)setAllocHeader((__int64)v9, v12, v11, v10);
    }
    v13 = (char *)&StandardAllocLists;
    if ( v8 > dword_1401B810C )
    {
      do
        v13 += 88;
      while ( v8 > *((_DWORD *)v13 + 3) );
    }
    EnterCriticalSection((LPCRITICAL_SECTION)(v13 + 48));
    v15 = 0i64;
    if ( !*(_QWORD *)v13 )
    {
      v16 = *((unsigned int *)v13 + 3);
      v17 = v16 * *((_DWORD *)v13 + 4);
      if ( v17 < (unsigned int)v16 || (unsigned int)v16 >= 0x7FFFFFFFu / *((_DWORD *)v13 + 4) )
      {
        v18 = 0i64;
      }
      else
      {
        v18 = allocMemory(v17, a3, a4);
        v19 = v18;
        if ( v18 )
        {
          v20 = *((_DWORD *)v13 + 4);
          v21 = 0;
          *((_DWORD *)v13 + 7) += v20;
          *((_DWORD *)v13 + 5) += v20;
          *((_DWORD *)v13 + 10) += v17;
          ++*((_DWORD *)v13 + 6);
          if ( v20 )
          {
            v14 = 0i64;
            do
            {
              if ( v21 )
                v18 = (_DWORD *)v14;
              ++v21;
              v14 = (__int64)v18 + v16;
              v18[1] = 238;
              *((_QWORD *)v18 + 1) = (char *)v18 + v16;
              *((_QWORD *)v18 + 2) = 0xFE0B0BEFFE0B0BEFui64;
            }
            while ( v21 < *((_DWORD *)v13 + 4) );
          }
          *((_QWORD *)v18 + 1) = *(_QWORD *)v13;
          *(_QWORD *)v13 = v19;
          goto LABEL_25;
        }
      }
LABEL_45:
      LeaveCriticalSection((LPCRITICAL_SECTION)(v13 + 48));
      v10 = v31;
      v9 = v18;
      v11 = *((_DWORD *)v13 + 3);
      v12 = *((_DWORD *)v13 + 2);
      return (LPVOID)setAllocHeader((__int64)v9, v12, v11, v10);
    }
LABEL_25:
    v22 = *(_QWORD *)v13;
    if ( dword_1401B99C0 )
    {
      if ( *(_QWORD *)(v22 + 16) != 0xFE0B0BEFFE0B0BEFui64 )
        Dbg_HardAssert("ds\\dns\\server\\dnscore\\memory.c", 0x42Bu, "pfreeListHead->FreeTag == FREE_BLOCK_TAG");
      v23 = *(_QWORD *)(v22 + 8);
      if ( !v23 || *(_QWORD *)(v23 + 16) == 0xFE0B0BEFFE0B0BEFui64 )
        goto LABEL_42;
      v24 = "pfreeListHead->MemHead.pNextFree->FreeTag == FREE_BLOCK_TAG";
      v25 = 1071;
    }
    else
    {
      v26 = WPP_GLOBAL_Control;
      v27 = 9;
      do
      {
        if ( *(_QWORD *)(v22 + 16) == 0xFE0B0BEFFE0B0BEFui64 )
          break;
        if ( v26 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && *((char *)v26 + 28) < 0
          && *((_BYTE *)v26 + 25) >= 5u )
        {
          LODWORD(v30) = a4;
          LODWORD(v29) = v8;
          WPP_SF_qqdsd(*((_QWORD *)v26 + 2), 0xFE0B0BEFFE0B0BEFui64, v14, v22, v22 + 16, v29, a3, v30);
          v26 = WPP_GLOBAL_Control;
        }
        v22 = *(_QWORD *)(v22 + 8);
        --*((_DWORD *)v13 + 5);
        --v27;
      }
      while ( v27 );
      v15 = 0i64;
      if ( v27 )
        goto LABEL_42;
      v24 = "!\"free list corruption detected\"";
      v25 = 1106;
    }
    Dbg_HardAssert("ds\\dns\\server\\dnscore\\memory.c", v25, v24);
LABEL_42:
    v18 = *(_DWORD **)v13;
    if ( *(_QWORD *)v13 )
      v15 = *((_QWORD *)v18 + 1);
    --*((_DWORD *)v13 + 5);
    ++*((_DWORD *)v13 + 8);
    *(_QWORD *)v13 = v15;
    goto LABEL_45;
  }
  return 0i64;
}
// 140119181: variable 'v14' is possibly undefined
// 140119181: variable 'v29' is possibly undefined
// 140119181: variable 'v30' is possibly undefined
// 1401B810C: using guessed type int dword_1401B810C;
// 1401B99C0: using guessed type int dword_1401B99C0;
// 1401B9AA4: using guessed type int dword_1401B9AA4;
// 1401B9AB0: using guessed type int dword_1401B9AB0;
