//----- (0000000140034A90) ----------------------------------------------------
__int64 __fastcall Rpc_EnumDirectoryPartitions(
        __int64 a1,
        __int64 a2,
        __int64 a3,
        __int64 a4,
        int a5,
        char a6,
        _DWORD *a7,
        _QWORD *a8)
{
  char v8; // r14
  __int64 v9; // rsi
  _DWORD *zero; // rbx
  __int64 *Next; // rdi
  _QWORD *v13; // rbp
  void *v14; // rax
  __int64 v15; // rdi
  _QWORD *v16; // rsi
  void *v17; // rcx

  v8 = 0;
  v9 = 0i64;
  if ( a5 == 1 )
    v8 = a6;
  if ( g_liDpInitialized <= 0 || !(unsigned int)Ds_IsDsServer(2) )
    return 50i64;
  zero = MIDL_user_allocate_zero(0x80018ui64);
  if ( !zero )
    return 14i64;
  Next = Dp_GetNext(0i64);
  if ( Next )
  {
    while ( (unsigned int)v9 < 0x10000 )
    {
      if ( (v8 & 1) == 0 || (*((_BYTE *)Next + 100) & 1) == 0 )
      {
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
        {
          WPP_SF_s(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0xBu,
            (__int64)&WPP_39ff0bf6ca68380ebeab46e886ed7e1c_Traceguids,
            (const char *)Next[3]);
        }
        v13 = MIDL_user_allocate_zero(0x18ui64);
        if ( !v13 )
          goto LABEL_21;
        v14 = Dns_StringCopyAllocate((char *)Next[3], 0, 2i64, 2);
        v13[1] = v14;
        if ( !v14 )
        {
          MIDL_user_free(v13);
LABEL_21:
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            WPP_SF_D(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0xCu,
              (__int64)&WPP_39ff0bf6ca68380ebeab46e886ed7e1c_Traceguids,
              14);
          }
          v15 = 0i64;
          for ( zero[2] = v9; (unsigned int)v15 < zero[2]; v15 = (unsigned int)(v15 + 1) )
          {
            v16 = *(_QWORD **)&zero[2 * v15 + 4];
            if ( v16 )
            {
              v17 = (void *)v16[1];
              if ( v17 )
                MIDL_user_free(v17);
              MIDL_user_free(v16);
            }
          }
          MIDL_user_free(zero);
          return 14i64;
        }
        *((_DWORD *)v13 + 4) = *((_DWORD *)Next + 25);
        *((_DWORD *)v13 + 5) = *((_DWORD *)Next + 27);
        *(_QWORD *)&zero[2 * v9 + 4] = v13;
        v9 = (unsigned int)(v9 + 1);
      }
      Next = Dp_GetNext(Next);
      if ( !Next )
        break;
    }
  }
  zero[2] = v9;
  *a8 = zero;
  *a7 = 30;
  return 0i64;
}
// 1401B8D30: using guessed type int g_liDpInitialized;
