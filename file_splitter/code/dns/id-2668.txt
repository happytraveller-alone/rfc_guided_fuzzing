//----- (000000014013DF24) ----------------------------------------------------
__int64 __fastcall Remove_ClientSubnetRecord(char *lpSubKey)
{
  unsigned __int64 v2; // r8
  __int64 v3; // rcx
  __int64 *v4; // rax
  __int64 *v5; // rbx
  unsigned int v6; // ebx
  __int64 v7; // rsi
  CDnsClientSubnetRecordsTrie *v8; // rcx
  _QWORD *v9; // rax
  unsigned __int16 v10; // dx
  CDnsClientSubnetRecordsTrie *v11; // rcx
  __int64 v13; // [rsp+30h] [rbp-58h] BYREF
  const void *v14[3]; // [rsp+38h] [rbp-50h] BYREF
  unsigned __int64 v15; // [rsp+50h] [rbp-38h]

  v15 = 7i64;
  v14[2] = 0i64;
  LOWORD(v14[0]) = 0;
  v2 = -1i64;
  do
    ++v2;
  while ( *(_WORD *)&lpSubKey[2 * v2] );
  std::wstring::assign((char *)v14, lpSubKey, v2);
  v4 = std::_Tree<std::_Tmap_traits<std::wstring,CDNSClientSubnetRecord *,CDnsCompareName,std::allocator<std::pair<std::wstring const,CDNSClientSubnetRecord *>>,0>>::find(
         v3,
         &v13,
         v14);
  v5 = (__int64 *)*v4;
  if ( *v4 == qword_1401B93E8 )
  {
    v6 = 9976;
    goto LABEL_27;
  }
  v7 = v5[8];
  v8 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    v9 = (_QWORD *)(v7 + 8);
    if ( *(_QWORD *)(v7 + 32) >= 8ui64 )
      v9 = (_QWORD *)*v9;
    WPP_SF_DS(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x24u,
      (__int64)&WPP_42dbba61d26d3062f1ad4e084cdc81fe_Traceguids,
      *(_DWORD *)v7,
      (__int64)v9);
    v8 = WPP_GLOBAL_Control;
  }
  if ( *(_DWORD *)v7 )
  {
    v6 = 9975;
    if ( v8 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)v8 + 68) & 4) != 0
      && *((_BYTE *)v8 + 65) >= 2u )
    {
      v10 = 51;
LABEL_26:
      WPP_SF_SD(
        *((_QWORD *)v8 + 7),
        v10,
        (__int64)&WPP_7bc0de5581043365e853c04d44d2eaeb_Traceguids,
        (const unsigned __int16 *)lpSubKey);
    }
  }
  else
  {
    if ( (unsigned int)RemoveClientSubnetRecordFromPersistence((LPCWSTR)lpSubKey) )
    {
      v11 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        WPP_SF_SD(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x34u,
          (__int64)&WPP_7bc0de5581043365e853c04d44d2eaeb_Traceguids,
          (const unsigned __int16 *)lpSubKey);
      }
    }
    std::_Tree<std::_Tmap_traits<std::wstring,CDNSClientSubnetRecord *,CDnsCompareName,std::allocator<std::pair<std::wstring const,CDNSClientSubnetRecord *>>,0>>::erase(
      (__int64)v11,
      &v13,
      v5);
    v6 = CDNSClientSubnetRecord::DeleteClientSubnetRecord((CDNSClientSubnetRecord *)v7, 0i64, 1);
    if ( v6 )
    {
      v8 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        v10 = 53;
        goto LABEL_26;
      }
    }
  }
LABEL_27:
  if ( v15 >= 8 )
    operator delete((void *)v14[0]);
  return v6;
}
// 14013DF81: variable 'v3' is possibly undefined
// 14013E06D: variable 'v11' is possibly undefined
// 140184CA8: using guessed type void __stdcall operator delete(void *);
// 1401B93E8: using guessed type __int64 qword_1401B93E8;
