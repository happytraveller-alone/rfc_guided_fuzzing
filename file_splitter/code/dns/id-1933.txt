//----- (00000001400EADFC) ----------------------------------------------------
__int64 __fastcall DnsOls_OpenKey(
        struct _zone_info *a1,
        struct _dnsskd *a2,
        const unsigned __int16 **a3,
        struct DnsSign::CDnsKeyPair **a4)
{
  char v8; // bl
  char *v9; // rax
  __int64 v10; // rdx
  __int64 v11; // r8
  const unsigned __int16 *v12; // rdi
  int v13; // eax
  unsigned int v14; // edi
  CDnsClientSubnetRecordsTrie *v15; // rcx
  int v16; // r9d
  int v17; // r14d
  char *v18; // rax
  __int64 v19; // r8
  DnsSign::CDnsKeyPair *v20; // rax
  char *v21; // rax
  unsigned __int16 *v22; // rdx
  unsigned __int64 v23; // r8
  __int64 *KeyName; // rax
  __int64 v25; // rsi
  char *v26; // rax
  __int64 v27; // rdx
  __int64 v28; // r8
  NCRYPT_KEY_HANDLE phKey; // [rsp+50h] [rbp-59h] BYREF
  NCRYPT_PROV_HANDLE phProvider; // [rsp+58h] [rbp-51h] BYREF
  int v32; // [rsp+60h] [rbp-49h]
  __int64 v33; // [rsp+68h] [rbp-41h]
  DnsSign::CDnsKeyPair *v34; // [rsp+70h] [rbp-39h]
  void *v35[5]; // [rsp+78h] [rbp-31h] BYREF
  GUID pclsid; // [rsp+A0h] [rbp-9h] BYREF

  v33 = -2i64;
  v8 = 0;
  v32 = 0;
  phProvider = 0i64;
  phKey = 0i64;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    v9 = Dbg_GuidString((const IID *)((char *)a2 + 8));
    WPP_SF_SSSs(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      v10,
      v11,
      *a3,
      *((_QWORD *)a2 + 3),
      (__int64)v9,
      *((_QWORD *)a1 + 2));
  }
  *a4 = 0i64;
  v12 = *a3;
  v13 = CLSIDFromString(*a3, &pclsid);
  if ( v13 )
    v14 = GuidFromString((__int64)v12, v13);
  else
    v14 = 0;
  if ( v14 )
  {
    v15 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      WPP_SF_DS(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x14u,
        (__int64)&WPP_4a0a7bf065bf32df4bbeec8f9c7ea0c3_Traceguids,
        v14,
        (__int64)*a3);
      v15 = WPP_GLOBAL_Control;
    }
    v14 = 9107;
  }
  else
  {
    v16 = NCryptOpenStorageProvider(&phProvider, *((LPCWSTR *)a2 + 3), 0);
    if ( v16 )
    {
      v15 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        WPP_SF_DS(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x15u,
          (__int64)&WPP_4a0a7bf065bf32df4bbeec8f9c7ea0c3_Traceguids,
          v16,
          *((_QWORD *)a2 + 3));
        v15 = WPP_GLOBAL_Control;
      }
      v14 = 9112;
    }
    else
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_S(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x16u,
          (__int64)&WPP_4a0a7bf065bf32df4bbeec8f9c7ea0c3_Traceguids,
          *a3);
      }
      v17 = NCryptOpenKey(phProvider, &phKey, *a3, 0, 0x60u);
      if ( v17 )
      {
        v15 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
        {
          v18 = Dbg_GuidString((const IID *)((char *)a2 + 8));
          WPP_SF_DSSSs(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x17u,
            v19,
            v17,
            (__int64)*a3,
            *((_QWORD *)a2 + 3),
            (__int64)v18,
            *((_QWORD *)a1 + 2));
          v15 = WPP_GLOBAL_Control;
        }
        v14 = 9107;
      }
      else
      {
        v20 = (DnsSign::CDnsKeyPair *)operator new(0xB8ui64);
        v34 = v20;
        if ( v20 )
          v21 = (char *)DnsSign::CDnsKeyPair::CDnsKeyPair(v20, phKey);
        else
          v21 = 0i64;
        *a4 = (struct DnsSign::CDnsKeyPair *)v21;
        v22 = (unsigned __int16 *)*a3;
        v23 = -1i64;
        do
          ++v23;
        while ( v22[v23] );
        std::wstring::assign(v21 + 120, (char *)v22, v23);
        phKey = 0i64;
        v15 = WPP_GLOBAL_Control;
      }
    }
  }
  if ( phKey )
  {
    NCryptFreeObject(phKey);
    v15 = WPP_GLOBAL_Control;
  }
  if ( phProvider )
  {
    NCryptFreeObject(phProvider);
    v15 = WPP_GLOBAL_Control;
  }
  if ( v15 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)v15 + 17) & 0x200000) != 0
    && *((_BYTE *)v15 + 65) >= 4u )
  {
    if ( *a4 )
    {
      KeyName = (__int64 *)DnsSign::CDnsKeyPair::GetKeyName((__int64)*a4, (__int64)v35);
      v25 = (__int64)KeyName;
      v8 = 1;
      v32 = 1;
      if ( (unsigned __int64)KeyName[3] >= 8 )
        v25 = *KeyName;
    }
    else
    {
      v25 = 0i64;
    }
    v26 = Dbg_GuidString((const IID *)((char *)a2 + 8));
    WPP_SF_DqSSSs(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      v27,
      v28,
      v14,
      (char)*a4,
      v25,
      *((_QWORD *)a2 + 3),
      (__int64)v26,
      *((_QWORD *)a1 + 2));
  }
  if ( (v8 & 1) != 0 && v35[3] >= (void *)8 )
    operator delete(v35[0]);
  return v14;
}
// 1400EAE97: variable 'v10' is possibly undefined
// 1400EAE97: variable 'v11' is possibly undefined
// 1400EB035: variable 'v19' is possibly undefined
// 1400EB14A: variable 'v27' is possibly undefined
// 1400EB14A: variable 'v28' is possibly undefined
// 140184CA8: using guessed type void __stdcall operator delete(void *);
