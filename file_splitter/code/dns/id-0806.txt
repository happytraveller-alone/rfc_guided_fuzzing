//----- (000000014006FB88) ----------------------------------------------------
__int64 __fastcall Recurse_WriteReferral(struct _DNS_MSGINFO *a1, _BYTE *a2)
{
  char *v4; // rax
  char v5; // r13
  _BYTE *v6; // r14
  const char *v7; // rax
  __int64 v8; // rax
  unsigned int v9; // r12d
  _QWORD *v10; // rbx
  __int64 NextRecord; // rax
  void *v12; // rax
  __int64 v13; // rdi
  void *v14; // rbx
  void *v15; // rax
  __int64 v16; // rdx
  __int64 v17; // r8
  CDnsClientSubnetRecordsTrie *v18; // rcx
  __int64 v19; // rax
  unsigned __int16 v20; // dx
  int v22[6]; // [rsp+40h] [rbp-18h] BYREF
  unsigned int v23; // [rsp+A0h] [rbp+48h] BYREF
  unsigned int v24; // [rsp+A8h] [rbp+50h] BYREF
  unsigned int v25; // [rsp+B0h] [rbp+58h] BYREF
  unsigned int v26; // [rsp+B8h] [rbp+60h] BYREF

  v23 = 1;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x4000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    v4 = Dbg_NodeName((__int64)a2);
    WPP_SF_qs(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0xCu,
      (__int64)&WPP_045d5c95c5db3fcad9ea35acf5eb75d8_Traceguids,
      a1,
      v4);
  }
  _InterlockedIncrement(&dword_1401C7E48);
  v5 = *((_BYTE *)a1 + 1415);
  *((_BYTE *)a1 + 1415) = 2;
  v24 = -1;
  acquireRead(DbaseLock, 0xFFFFFFFF, &v24);
  if ( a2 )
    a2[98] = CurrentTimeoutBin;
  v6 = a2;
  if ( a2 )
  {
    while ( 1 )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x4000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        v7 = (const char *)FormatLabelA((unsigned __int8)v6[101], v6 + 102);
        WPP_SF_sq(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0xDu,
          (__int64)&WPP_045d5c95c5db3fcad9ea35acf5eb75d8_Traceguids,
          v7);
      }
      v8 = Recurse_CheckForDelegation((__int64)a1, (__int64)v6, &v23);
      v9 = v23;
      v10 = (_QWORD *)v8;
      if ( !v23 )
      {
        v26 = -1;
        releaseRead(DbaseLock, &v26, 1);
        goto LABEL_54;
      }
      if ( !v8 )
        goto LABEL_26;
      NextRecord = RR_FindNextRecordEx(v8, 0, 2u, 0i64, *((_DWORD *)a1 + 142), 0);
      if ( NextRecord && (*(_BYTE *)(NextRecord + 8) != 8 || !*((_BYTE *)a1 + 1417) && dword_1401B9834) )
      {
        v25 = -1;
        releaseRead(DbaseLock, &v25, 1);
        *((_BYTE *)a1 + 1417) = 0;
        Answer_QuestionFromDatabase(a1, (__int64)v10, 0i64, 0i64, 2u);
        goto LABEL_53;
      }
      v6 = (_BYTE *)*v10;
      if ( !*v10 )
        break;
      if ( v6[96] == 0xF2 )
      {
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x4000) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
        {
          v12 = FormatLabelA((unsigned __int8)a2[101], a2 + 102);
          v13 = *((_QWORD *)v6 + 7);
          v14 = v12;
          v15 = FormatLabelA((unsigned __int8)v6[101], v6 + 102);
          WPP_SF_qsssq(*((_QWORD *)WPP_GLOBAL_Control + 7), v16, v17, a1, v15, *(_QWORD *)(v13 + 16), v14, a2);
        }
        goto LABEL_26;
      }
    }
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x4000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 7), 0xEu, (__int64)&WPP_045d5c95c5db3fcad9ea35acf5eb75d8_Traceguids, a1);
    }
  }
  else
  {
    v9 = v23;
  }
LABEL_26:
  v22[0] = -1;
  releaseRead(DbaseLock, (unsigned int *)v22, 1);
  v18 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x10u, (__int64)&WPP_045d5c95c5db3fcad9ea35acf5eb75d8_Traceguids);
    v18 = WPP_GLOBAL_Control;
  }
  if ( !*((_WORD *)a1 + 3155) )
  {
    v19 = *((_QWORD *)a1 + 458);
    if ( v19 )
    {
      if ( *(_DWORD *)(v19 + 284) )
      {
LABEL_46:
        if ( v18 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)v18 + 17) & 0x4000) != 0
          && *((_BYTE *)v18 + 65) >= 2u )
        {
          WPP_SF_q(*((_QWORD *)v18 + 7), 0x12u, (__int64)&WPP_045d5c95c5db3fcad9ea35acf5eb75d8_Traceguids, a1);
        }
        v20 = 2;
LABEL_51:
        Reject_Request((__int64)a1, v20, 0);
        goto LABEL_53;
      }
    }
    else if ( dword_1401B97F8 )
    {
      goto LABEL_46;
    }
    if ( v18 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)v18 + 17) & 0x4000) != 0
      && *((_BYTE *)v18 + 65) >= 2u )
    {
      WPP_SF_q(*((_QWORD *)v18 + 7), 0x11u, (__int64)&WPP_045d5c95c5db3fcad9ea35acf5eb75d8_Traceguids, a1);
    }
    v20 = 5;
    goto LABEL_51;
  }
  Send_QueryResponse(a1, 0);
LABEL_53:
  if ( !v9 )
LABEL_54:
    *((_BYTE *)a1 + 1415) = v5;
  return v9;
}
// 14006FE54: conditional instruction was optimized away because rax.8!=0
// 14006FDC5: variable 'v16' is possibly undefined
// 14006FDC5: variable 'v17' is possibly undefined
// 1401B97F8: using guessed type int dword_1401B97F8;
// 1401B9834: using guessed type int dword_1401B9834;
// 1401BA4B8: using guessed type char CurrentTimeoutBin;
// 1401C7E48: using guessed type int dword_1401C7E48;
// 1401EC5E8: using guessed type __int64 DbaseLock;
// 14006FB88: using guessed type unsigned int var_18[6];
