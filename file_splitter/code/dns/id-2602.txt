//----- (0000000140133A10) ----------------------------------------------------
__int64 __fastcall CDnsPolicy_InterfaceCriteriaTree::RemoveCriteriaNode(
        CDnsPolicy_InterfaceCriteriaTree *this,
        struct _DnsAddr *a2,
        struct CDnsPolicy_CriteriaNode *a3,
        __int64 a4)
{
  unsigned int v4; // edi
  __int64 *v8; // rbx
  int v9; // ebx
  DWORD LastError; // eax
  unsigned __int16 v11; // dx
  CDnsPolicy_CriteriaNode *v12; // rbp
  __int64 *v13; // rbx
  int v15; // [rsp+20h] [rbp-28h]
  DWORD v16; // [rsp+28h] [rbp-20h]
  __int64 *v17; // [rsp+58h] [rbp+10h] BYREF

  v4 = 0;
  if ( *(_WORD *)a2->MaxSa == 2 )
  {
    std::_Tree<std::_Tmap_traits<unsigned long,CDnsPolicy_CriteriaNode *,bool (*)(unsigned long const &,unsigned long const &),std::allocator<std::pair<unsigned long const,CDnsPolicy_CriteriaNode *>>,0>>::find(
      *((_QWORD *)this + 1),
      &v17,
      (__int64)&a2->MaxSa[4]);
    v8 = v17;
    if ( v17 == *(__int64 **)(*((_QWORD *)this + 1) + 8i64) )
      return v4;
    LODWORD(v17) = -1;
    if ( (unsigned int)acquireWrite(a4, 0x2710u, (unsigned int *)&v17) == -1 )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        v9 = *((unsigned __int16 *)a3 + 24);
        LastError = GetLastError();
        v11 = 63;
LABEL_8:
        v16 = LastError;
        v15 = v9;
        WPP_SF_qdD(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          v11,
          (__int64)&WPP_bbbcc621566c3408fe84d6a85874d543_Traceguids,
          a3,
          v15,
          v16);
        return v4;
      }
      return v4;
    }
    v12 = (CDnsPolicy_CriteriaNode *)v8[4];
    std::_Tree<std::_Tmap_traits<unsigned long,CDnsPolicy_CriteriaNode *,bool (*)(unsigned long const &,unsigned long const &),std::allocator<std::pair<unsigned long const,CDnsPolicy_CriteriaNode *>>,0>>::erase(
      *((_QWORD *)this + 1),
      (__int64 *)&v17,
      v8);
LABEL_17:
    if ( v12 )
      CDnsPolicy_CriteriaNode::`scalar deleting destructor'(v12);
    v4 = 1;
    Lock_ReleaseWrite(a4);
    return v4;
  }
  std::_Tree<std::_Tmap_traits<IP6_ADDRESS,CDnsPolicy_CriteriaNode *,bool (*)(IP6_ADDRESS const &,IP6_ADDRESS const &),std::allocator<std::pair<IP6_ADDRESS const,CDnsPolicy_CriteriaNode *>>,0>>::find(
    *((_QWORD *)this + 2),
    &v17,
    (__int64)&a2->MaxSa[8]);
  v13 = v17;
  if ( v17 == *(__int64 **)(*((_QWORD *)this + 2) + 8i64) )
    return v4;
  LODWORD(v17) = -1;
  if ( (unsigned int)acquireWrite(a4, 0x2710u, (unsigned int *)&v17) != -1 )
  {
    v12 = (CDnsPolicy_CriteriaNode *)v13[5];
    std::_Tree<std::_Tmap_traits<IP6_ADDRESS,CDnsPolicy_CriteriaNode *,bool (*)(IP6_ADDRESS const &,IP6_ADDRESS const &),std::allocator<std::pair<IP6_ADDRESS const,CDnsPolicy_CriteriaNode *>>,0>>::erase(
      *((_QWORD *)this + 2),
      (__int64 *)&v17,
      v13);
    goto LABEL_17;
  }
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
  {
    v9 = *((unsigned __int16 *)a3 + 24);
    LastError = GetLastError();
    v11 = 64;
    goto LABEL_8;
  }
  return v4;
}
