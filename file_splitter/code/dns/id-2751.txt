//----- (0000000140144D90) ----------------------------------------------------
__int64 __fastcall CDNSPolicyCriteriaQueryType::AddCriteria(
        CDNSPolicyCriteriaQueryType *this,
        struct _PolicyCriteriaList *a2,
        char *a3)
{
  unsigned int v7; // esi
  __int64 v8; // rax
  __int64 v9; // rdi
  __int64 v10; // rdx
  unsigned int i; // r14d
  unsigned int j; // r14d
  unsigned __int64 v13; // r8
  unsigned __int16 v14; // [rsp+58h] [rbp+10h] BYREF

  if ( *((_DWORD *)a2 + 1) != 5 )
    return 87i64;
  v7 = 0;
  if ( *(_DWORD *)a2 )
  {
    v8 = *((_QWORD *)a2 + 1);
    do
    {
      v9 = 16i64 * v7;
      v10 = v8 + v9;
      if ( *(_DWORD *)(v8 + v9) == 1 )
      {
        for ( i = 0; i < *(_DWORD *)(v10 + 4); v10 = v9 + *((_QWORD *)a2 + 1) )
        {
          v14 = **(_WORD **)(*(_QWORD *)(v10 + 8) + 8i64 * i);
          std::vector<unsigned short>::push_back((unsigned __int64 *)this + 9, &v14);
          ++i;
        }
      }
      v8 = *((_QWORD *)a2 + 1);
      if ( *(_DWORD *)(v8 + 16i64 * v7) == 2 )
      {
        for ( j = 0; j < *(_DWORD *)(v8 + v9 + 4); ++j )
        {
          v14 = **(_WORD **)(*(_QWORD *)(v8 + v9 + 8) + 8i64 * j);
          std::vector<unsigned short>::push_back((unsigned __int64 *)this + 13, &v14);
          v8 = *((_QWORD *)a2 + 1);
        }
      }
      ++v7;
    }
    while ( v7 < *(_DWORD *)a2 );
  }
  CDNSPolicyCriteriaQueryType::AddCriteria(this);
  v13 = -1i64;
  do
    ++v13;
  while ( *(_WORD *)&a3[2 * v13] );
  std::wstring::assign((char *)this + 24, a3, v13);
  return 0i64;
}
