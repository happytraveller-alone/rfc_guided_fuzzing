//----- (0000000140132684) ----------------------------------------------------
CDnsPolicy_QTypeCriteriaTree *__fastcall CDnsPolicy_QTypeCriteriaTree::CDnsPolicy_QTypeCriteriaTree(
        CDnsPolicy_QTypeCriteriaTree *this)
{
  _QWORD *v2; // rbx
  __int64 v3; // rdi
  _QWORD *v4; // rax
  char pExceptionObject[32]; // [rsp+28h] [rbp-20h] BYREF

  *(_QWORD *)this = &CDnsPolicy_QTypeCriteriaTree::`vftable';
  v2 = operator new(0x20ui64);
  v3 = 0i64;
  if ( v2 )
  {
    *v2 = Is_Less_ThanWord;
    v2[2] = 0i64;
    v4 = operator new(0x30ui64);
    if ( !v4 )
    {
      std::bad_alloc::bad_alloc((std::bad_alloc *)pExceptionObject, 0i64);
      CxxThrowException_0(pExceptionObject, (_ThrowInfo *)&TI2_AVbad_alloc_std__);
    }
    v2[1] = v4;
    *v4 = v4;
    *(_QWORD *)(v2[1] + 8i64) = v2[1];
    *(_QWORD *)(v2[1] + 16i64) = v2[1];
    do
      *(_BYTE *)(v2[1] + v3++ + 40) = 1;
    while ( v3 < 2 );
  }
  else
  {
    v2 = 0i64;
  }
  *((_QWORD *)this + 1) = v2;
  return this;
}
// 140171C20: using guessed type void *CDnsPolicy_QTypeCriteriaTree::`vftable';
