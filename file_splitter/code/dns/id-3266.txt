//----- (000000014016FCA8) ----------------------------------------------------
__int64 WPP_SF_sqqqqdddd(__int64 a1, __int64 a2, const char *a3, ...)
{
  __int64 v4; // r9
  __int64 v5; // r9
  const char *v6; // r8
  __int64 v8; // [rsp+D8h] [rbp+20h] BYREF
  va_list va; // [rsp+D8h] [rbp+20h]
  __int64 v10; // [rsp+E0h] [rbp+28h] BYREF
  va_list va1; // [rsp+E0h] [rbp+28h]
  __int64 v12; // [rsp+E8h] [rbp+30h] BYREF
  va_list va2; // [rsp+E8h] [rbp+30h]
  __int64 v14; // [rsp+F0h] [rbp+38h] BYREF
  va_list va3; // [rsp+F0h] [rbp+38h]
  __int64 v16; // [rsp+F8h] [rbp+40h] BYREF
  va_list va4; // [rsp+F8h] [rbp+40h]
  __int64 v18; // [rsp+100h] [rbp+48h] BYREF
  va_list va5; // [rsp+100h] [rbp+48h]
  __int64 v20; // [rsp+108h] [rbp+50h] BYREF
  va_list va6; // [rsp+108h] [rbp+50h]
  va_list va7; // [rsp+110h] [rbp+58h] BYREF

  va_start(va7, a3);
  va_start(va6, a3);
  va_start(va5, a3);
  va_start(va4, a3);
  va_start(va3, a3);
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v12 = va_arg(va3, _QWORD);
  va_copy(va4, va3);
  v14 = va_arg(va4, _QWORD);
  va_copy(va5, va4);
  v16 = va_arg(va5, _QWORD);
  va_copy(va6, va5);
  v18 = va_arg(va6, _QWORD);
  va_copy(va7, va6);
  v20 = va_arg(va7, _QWORD);
  if ( a3 )
  {
    v4 = -1i64;
    do
      ++v4;
    while ( a3[v4] );
    v5 = v4 + 1;
  }
  else
  {
    v5 = 5i64;
  }
  v6 = "NULL";
  if ( a3 )
    v6 = a3;
  return FastWppTraceMessage(
           (__int64)&WPP_7f900513327334733b8f3a4951ec5607_Traceguids,
           0xB8u,
           v6,
           v5,
           va,
           8i64,
           va1,
           8i64,
           va2,
           8i64,
           va3,
           8i64,
           va4,
           4i64,
           va5,
           4i64,
           va6,
           4i64,
           va7,
           4i64,
           0i64);
}
