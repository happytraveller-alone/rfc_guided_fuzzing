//----- (000000014012C8AC) ----------------------------------------------------
__int64 __fastcall std::operator<<<unsigned short>(__int64 a1, _QWORD *a2)
{
  _QWORD *v2; // r15
  int v4; // esi
  unsigned __int64 v5; // r12
  __int64 v6; // r14
  unsigned __int64 v7; // r14
  __int64 v8; // rcx
  unsigned __int16 v9; // r8
  __int64 v10; // rcx
  int v11; // edx
  _WORD **v12; // rcx
  unsigned __int16 *v13; // rdx
  __int64 v14; // rcx
  __int64 v15; // rcx
  unsigned __int16 v16; // r8
  __int64 v17; // rcx
  int v18; // edx
  _WORD **v19; // rcx
  unsigned __int16 *v20; // rdx
  __int64 v21; // rcx
  int v22; // edx
  __int64 v23; // rcx
  __int64 v25; // [rsp+28h] [rbp-40h] BYREF
  char v26; // [rsp+30h] [rbp-38h]

  v2 = a2;
  v4 = 0;
  v5 = a2[2];
  v6 = *(_QWORD *)(*(int *)(*(_QWORD *)a1 + 4i64) + a1 + 40);
  if ( v6 <= 0 || v6 <= v5 )
    v7 = 0i64;
  else
    v7 = v6 - v5;
  std::basic_ostream<unsigned short>::sentry::sentry((__int64)&v25, a1);
  if ( v26 )
  {
    if ( (*(_DWORD *)(*(int *)(*(_QWORD *)a1 + 4i64) + a1 + 24) & 0x1C0) != 64 )
    {
      while ( v7 )
      {
        v8 = *(int *)(*(_QWORD *)a1 + 4i64);
        v9 = *(_WORD *)(v8 + a1 + 88);
        v10 = *(_QWORD *)(v8 + a1 + 72);
        if ( **(_QWORD **)(v10 + 72) )
          v11 = **(_DWORD **)(v10 + 96);
        else
          v11 = 0;
        if ( v11 <= 0 )
        {
          v9 = (*(__int64 (__fastcall **)(__int64, _QWORD))(*(_QWORD *)v10 + 24i64))(v10, v9);
        }
        else
        {
          --**(_DWORD **)(v10 + 96);
          v12 = *(_WORD ***)(v10 + 72);
          v13 = (*v12)++;
          *v13 = v9;
        }
        if ( v9 == 0xFFFF )
        {
          v4 = 4;
          break;
        }
        --v7;
      }
      if ( v4 )
        goto LABEL_23;
    }
    if ( v2[3] >= 8ui64 )
      v2 = (_QWORD *)*v2;
    v14 = *(_QWORD *)(*(int *)(*(_QWORD *)a1 + 4i64) + a1 + 72);
    if ( (*(__int64 (__fastcall **)(__int64, _QWORD *, unsigned __int64))(*(_QWORD *)v14 + 72i64))(v14, v2, v5) == v5 )
    {
LABEL_23:
      while ( v7 )
      {
        v15 = *(int *)(*(_QWORD *)a1 + 4i64);
        v16 = *(_WORD *)(v15 + a1 + 88);
        v17 = *(_QWORD *)(v15 + a1 + 72);
        if ( **(_QWORD **)(v17 + 72) )
          v18 = **(_DWORD **)(v17 + 96);
        else
          v18 = 0;
        if ( v18 <= 0 )
        {
          v16 = (*(__int64 (__fastcall **)(__int64, _QWORD))(*(_QWORD *)v17 + 24i64))(v17, v16);
        }
        else
        {
          --**(_DWORD **)(v17 + 96);
          v19 = *(_WORD ***)(v17 + 72);
          v20 = (*v19)++;
          *v20 = v16;
        }
        if ( v16 == 0xFFFF )
        {
          v4 |= 4u;
          break;
        }
        --v7;
      }
    }
    else
    {
      v4 = 4;
    }
    *(_QWORD *)(*(int *)(*(_QWORD *)a1 + 4i64) + a1 + 40) = 0i64;
  }
  else
  {
    v4 = 4;
  }
  v21 = a1 + *(int *)(*(_QWORD *)a1 + 4i64);
  if ( v4 )
  {
    v22 = v4 | *(_DWORD *)(v21 + 16);
    if ( !*(_QWORD *)(v21 + 72) )
      LOBYTE(v22) = v22 | 4;
    std::ios_base::clear((std::ios_base *)v21, v22, 0);
  }
  if ( !std::uncaught_exception() )
    std::basic_ostream<unsigned short>::_Osfx(v25);
  v23 = *(_QWORD *)(*(int *)(*(_QWORD *)v25 + 4i64) + v25 + 72);
  if ( v23 )
    (*(void (__fastcall **)(__int64))(*(_QWORD *)v23 + 16i64))(v23);
  return a1;
}
// 14012C8AC: could not find valid save-restore pair for rbp
// 140185140: using guessed type __int64 (__fastcall *_guard_dispatch_icall_fptr)(_QWORD, _QWORD);
