//----- (000000014014BF2C) ----------------------------------------------------
__int64 __fastcall CDnsClientSubnetRecordsTrie::findNode(__int64 a1, __int64 a2, __int64 a3, int a4)
{
  __int64 v4; // rbp
  struct CDnsClientSubnetRecordsTrie *v7; // r15
  unsigned int Node; // r12d
  __int64 *v9; // rdi
  __int64 v10; // rcx
  __int64 *v11; // rax
  _QWORD *v12; // rax
  CDnsClientSubnetRecordsTrie *v13; // r10
  _QWORD *v14; // rbx
  struct trie_node *v15; // r15
  void **v16; // r11
  void **v17; // rbx
  unsigned __int64 v18; // rsi
  _QWORD *v19; // rcx
  _WORD *v20; // rdx
  void *v21; // r9
  char *v22; // r8
  int v23; // eax
  int v24; // eax
  const unsigned __int16 *v25; // r9
  void ***v26; // rsi
  const unsigned __int16 *v27; // r9
  void ***v28; // rbx
  __int64 v29; // rsi
  _QWORD *v30; // rax
  void **v31; // rdx
  _QWORD **v32; // rdx
  _QWORD **v33; // rdx
  _QWORD *v34; // rcx
  _QWORD *v35; // rbx
  char pExceptionObject[24]; // [rsp+38h] [rbp-40h] BYREF
  __int64 *v38; // [rsp+80h] [rbp+8h] BYREF
  int v39; // [rsp+98h] [rbp+20h]

  v39 = a4;
  v38 = (__int64 *)a1;
  v4 = a4;
  v7 = g_DnsClientSubnetTrie;
  Node = 0;
  v9 = 0i64;
  if ( !*(_QWORD *)(a2 + 8) )
    return 87;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_s(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x12u,
      (__int64)&WPP_9cf6ed10bac538b49a60dec21a66994d_Traceguids,
      off_14017ADE0[a4]);
  }
  LODWORD(v38) = -1;
  if ( (v4 & 0xFFFFFFFD) != 0 )
  {
    acquireRead((__int64)hClientSubnetRecordsLock, 0xFFFFFFFF, (unsigned int *)&v38);
    goto LABEL_26;
  }
  if ( (unsigned int)acquireWrite((__int64)hClientSubnetRecordsLock, 0x2710u, (unsigned int *)&v38) != -1 )
  {
    v11 = (__int64 *)operator new(0x18ui64, (const struct std::nothrow_t *)&std::nothrow);
    v9 = v11;
    v38 = v11;
    if ( v11 )
    {
      v11[1] = 0i64;
      v12 = operator new(0x18ui64);
      if ( !v12 )
      {
        std::bad_alloc::bad_alloc((std::bad_alloc *)pExceptionObject, 0i64);
        CxxThrowException_0(pExceptionObject, (_ThrowInfo *)&TI2_AVbad_alloc_std__);
      }
      *v9 = (__int64)v12;
      *v12 = v12;
      *(_QWORD *)(*v9 + 8) = *v9;
    }
    else
    {
      v9 = 0i64;
    }
    if ( !v9 )
    {
      v10 = (__int64)WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        WPP_SF_s(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x14u,
          (__int64)&WPP_9cf6ed10bac538b49a60dec21a66994d_Traceguids,
          off_14017ADE0[v4]);
      }
      Node = 14;
      goto LABEL_85;
    }
LABEL_26:
    v13 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_sd(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x15u,
        (__int64)&WPP_9cf6ed10bac538b49a60dec21a66994d_Traceguids,
        off_14017ADE0[v4]);
      v13 = WPP_GLOBAL_Control;
    }
    v14 = **(_QWORD ***)a2;
    if ( v14 == *(_QWORD **)a2 )
    {
LABEL_34:
      if ( !v9 )
      {
LABEL_94:
        if ( (v4 & 0xFFFFFFFD) != 0 )
        {
          LODWORD(v38) = -1;
          releaseRead((__int64)hClientSubnetRecordsLock, (unsigned int *)&v38, 1);
        }
        else
        {
          Lock_ReleaseWrite((__int64)hClientSubnetRecordsLock);
        }
        return Node;
      }
      while ( v9[1] )
      {
        v10 = *(_QWORD *)*v9;
        v15 = *(struct trie_node **)(v10 + 16);
        v16 = **(void ****)v15;
        v17 = (void **)*v16;
        if ( *v16 != v16 )
        {
          v18 = *(_QWORD *)(a3 + 16);
          while ( 1 )
          {
            v19 = v17 + 2;
            if ( *(_QWORD *)(a3 + 24) < 8ui64 )
              v20 = (_WORD *)a3;
            else
              v20 = *(_WORD **)a3;
            v21 = v17[4];
            if ( (unsigned __int64)v17[5] >= 8 )
              v19 = (_QWORD *)*v19;
            v22 = *(char **)(a3 + 16);
            if ( (unsigned __int64)v21 < v18 )
              v22 = (char *)v17[4];
            if ( v22 )
            {
              while ( *(_WORD *)v19 == *v20 )
              {
                v19 = (_QWORD *)((char *)v19 + 2);
                ++v20;
                if ( !--v22 )
                  goto LABEL_50;
              }
              v23 = *(_WORD *)v19 < *v20 ? -1 : 1;
            }
            else
            {
LABEL_50:
              v23 = 0;
            }
            v10 = v23;
            v24 = v21 != *(void **)(a3 + 16);
            if ( (unsigned __int64)v21 < v18 )
              v24 = -1;
            if ( v10 )
              v24 = v10;
            if ( !v24 )
              break;
            v17 = (void **)*v17;
            if ( v17 == v16 )
              goto LABEL_71;
          }
          if ( (_DWORD)v4 == 2 )
          {
            if ( v13 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              && (*((_DWORD *)v13 + 17) & 0x400000) != 0
              && *((_BYTE *)v13 + 65) >= 4u )
            {
              if ( *(_QWORD *)(a3 + 24) < 8ui64 )
                v25 = (const unsigned __int16 *)a3;
              else
                v25 = *(const unsigned __int16 **)a3;
              WPP_SF_Sqs(
                *((_QWORD *)v13 + 7),
                0x16u,
                (__int64)&WPP_9cf6ed10bac538b49a60dec21a66994d_Traceguids,
                v25,
                (char)v15,
                (__int64)"Remove");
            }
            v26 = *(void ****)v15;
            if ( v17 != **(void ****)v15 )
            {
              *(_QWORD *)v17[1] = *v17;
              *((_QWORD *)*v17 + 1) = v17[1];
              if ( (unsigned __int64)v17[5] >= 8 )
                operator delete(v17[2]);
              v17[5] = (void *)7;
              v17[4] = 0i64;
              *((_WORD *)v17 + 8) = 0;
              operator delete(v17);
              v26[1] = (void **)((char *)v26[1] - 1);
            }
            CDnsClientSubnetRecordsTrie::freeBranch((CDnsClientSubnetRecordsTrie *)v10, v15);
            v13 = WPP_GLOBAL_Control;
          }
        }
LABEL_71:
        if ( !(_DWORD)v4 && v17 == **(void ****)v15 )
        {
          if ( v13 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)v13 + 17) & 0x400000) != 0
            && *((_BYTE *)v13 + 65) >= 4u )
          {
            if ( *(_QWORD *)(a3 + 24) < 8ui64 )
              v27 = (const unsigned __int16 *)a3;
            else
              v27 = *(const unsigned __int16 **)a3;
            WPP_SF_Sqs(
              *((_QWORD *)v13 + 7),
              0x17u,
              (__int64)&WPP_9cf6ed10bac538b49a60dec21a66994d_Traceguids,
              v27,
              (char)v15,
              (__int64)"Add");
          }
          v28 = *(void ****)v15;
          v29 = **(_QWORD **)v15;
          v30 = std::_List_val<std::wstring>::_Buynode(v10, v29, *(_QWORD *)(v29 + 8), (const void **)a3);
          v31 = v28[1];
          if ( v31 == (void **)0x666666666666665i64 )
            std::_Xlength_error("list<T> too long");
          v28[1] = (void **)((char *)v31 + 1);
          *(_QWORD *)(v29 + 8) = v30;
          v10 = v30[1];
          *(_QWORD *)v10 = v30;
          v13 = WPP_GLOBAL_Control;
        }
        v32 = *(_QWORD ***)*v9;
        if ( v32 != (_QWORD **)*v9 )
        {
          *v32[1] = *v32;
          (*v32)[1] = v32[1];
          operator delete(v32);
          --v9[1];
          v13 = WPP_GLOBAL_Control;
        }
      }
    }
    else
    {
      while ( 1 )
      {
        Node = CDnsClientSubnetRecordsTrie::findNode((__int64)v7, v14[2], v9, v4, 0i64);
        if ( Node )
          break;
        v14 = (_QWORD *)*v14;
        if ( v14 == *(_QWORD **)a2 )
        {
          v13 = WPP_GLOBAL_Control;
          goto LABEL_34;
        }
      }
    }
LABEL_85:
    if ( v9 )
    {
      if ( v9[1] )
      {
        do
        {
          CDnsClientSubnetRecordsTrie::freeBranch(
            (CDnsClientSubnetRecordsTrie *)v10,
            *(struct trie_node **)(*(_QWORD *)*v9 + 16i64));
          v33 = *(_QWORD ***)*v9;
          if ( v33 != (_QWORD **)*v9 )
          {
            *v33[1] = *v33;
            (*v33)[1] = v33[1];
            operator delete(v33);
            --v9[1];
          }
        }
        while ( v9[1] );
        LODWORD(v4) = v39;
      }
      v34 = *(_QWORD **)*v9;
      *(_QWORD *)*v9 = *v9;
      *(_QWORD *)(*v9 + 8) = *v9;
      v9[1] = 0i64;
      if ( v34 != (_QWORD *)*v9 )
      {
        do
        {
          v35 = (_QWORD *)*v34;
          operator delete(v34);
          v34 = v35;
        }
        while ( v35 != (_QWORD *)*v9 );
      }
      operator delete((void *)*v9);
      operator delete(v9);
    }
    goto LABEL_94;
  }
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
  {
    WPP_SF_s(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x13u,
      (__int64)&WPP_9cf6ed10bac538b49a60dec21a66994d_Traceguids,
      off_14017ADE0[v4]);
  }
  return 9980;
}
// 14014C2F5: variable 'v10' is possibly undefined
// 14017ADE0: using guessed type char *off_14017ADE0[3];
// 140184CA8: using guessed type void __stdcall operator delete(void *);
// 1401B9248: using guessed type struct CDnsClientSubnetRecordsTrie *g_DnsClientSubnetTrie;
// 1401B9DB8: using guessed type void *hClientSubnetRecordsLock;
