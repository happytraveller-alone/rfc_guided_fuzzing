//----- (00000001400A3A50) ----------------------------------------------------
__int64 __fastcall Rpc_QueryServerStringListProperty(
        __int64 a1,
        char *a2,
        __int64 a3,
        __int64 a4,
        _DWORD *a5,
        _QWORD *a6)
{
  unsigned int v7; // ebx
  unsigned int IndexForPropertyName; // eax
  char **v9; // r15
  int v10; // eax
  char *v11; // rax
  _QWORD *v12; // rax
  unsigned int v13; // edi
  unsigned __int64 v14; // rax
  size_t v15; // rcx
  _DWORD *zero; // rsi
  unsigned int v17; // ebp
  __int64 v18; // r14
  void *v19; // rax

  v7 = 0;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_s(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x35u, (__int64)&WPP_44543417c05739f4a9c82c388f6d5836_Traceguids, a2);
  }
  *a6 = 0i64;
  IndexForPropertyName = findIndexForPropertyName(a2);
  if ( IndexForPropertyName == -1 )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_s(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x36u,
        (__int64)&WPP_44543417c05739f4a9c82c388f6d5836_Traceguids,
        a2);
    }
    return 9553;
  }
  v9 = &(&ServerPropertyTable)[7 * IndexForPropertyName];
  v10 = *((_DWORD *)v9 + 2);
  if ( v10 == -268435449 )
    return 9553;
  if ( v10 != -16777209 )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_sd(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x37u,
        (__int64)&WPP_44543417c05739f4a9c82c388f6d5836_Traceguids,
        a2);
    }
    return 9553;
  }
  *a5 = 43;
  v11 = v9[6];
  if ( v11 )
  {
    v12 = *(_QWORD **)v11;
    v13 = 0;
    if ( v12 )
    {
      while ( *v12 )
      {
        ++v13;
        ++v12;
      }
    }
    v14 = 8i64 * v13;
    if ( v14 > 0xFFFFFFFF )
      return 13;
    v15 = (unsigned int)(v14 + 16);
    if ( (unsigned int)v15 < (unsigned int)v14 )
    {
      return 13;
    }
    else
    {
      zero = MIDL_user_allocate_zero(v15);
      if ( zero )
      {
        v17 = 0;
        if ( v13 )
        {
          v18 = 0i64;
          do
          {
            v19 = Dns_StringCopyAllocate(*(char **)(*(_QWORD *)v9[6] + v18 * 4), 0, 2i64, 2);
            *(_QWORD *)&zero[v18 + 2] = v19;
            if ( !v19 )
              break;
            ++*zero;
            ++v17;
            v18 += 2i64;
          }
          while ( v17 < v13 );
        }
        *a6 = zero;
      }
      else
      {
        return 14;
      }
    }
  }
  return v7;
}
