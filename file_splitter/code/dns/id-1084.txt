//----- (000000014008CB8C) ----------------------------------------------------
__int64 *__fastcall RR_UpdateDeleteMatchingRecord(__int64 a1, unsigned __int16 *a2)
{
  unsigned __int16 v2; // r13
  __int64 v3; // rdi
  char *v4; // rax
  __int64 v5; // r15
  __int64 *v6; // r12
  __int64 *v7; // rbx
  CDnsClientSubnetRecordsTrie *v8; // rcx
  BOOL v9; // esi
  __int64 v10; // r14
  unsigned __int16 v11; // ax
  unsigned __int8 *v12; // r8
  _BYTE *i; // r9
  unsigned __int8 v14; // al
  int v15; // r11d
  unsigned __int8 *v16; // rcx
  unsigned __int8 *v17; // rdx
  __int64 v18; // r10
  __int64 v19; // r10
  int v20; // ecx
  __int64 v22; // rcx
  __int64 v23; // [rsp+30h] [rbp-28h] BYREF
  __int64 v24; // [rsp+38h] [rbp-20h] BYREF
  unsigned __int8 *v25; // [rsp+40h] [rbp-18h] BYREF
  _BYTE *v26; // [rsp+48h] [rbp-10h] BYREF
  unsigned __int16 *v28; // [rsp+A8h] [rbp+50h] BYREF
  unsigned __int16 v29; // [rsp+B0h] [rbp+58h]
  int v30; // [rsp+B8h] [rbp+60h] BYREF

  v28 = a2;
  v2 = a2[6];
  v3 = a1;
  v29 = v2;
  if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x80000) != 0
    && WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    v4 = Dbg_NodeName(a1);
    WPP_SF_s(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x43u, (__int64)&WPP_10d39582251c332017bd035d2c946054_Traceguids, v4);
  }
  v30 = -1;
  acquireUpdate(DbaseLock, 0xFFFFFFFF, (unsigned int *)&v30, 1);
  v5 = 0i64;
  if ( !v3 || (v30 = 1, !*(_QWORD *)(v3 + 64)) )
    v30 = 0;
  *(_DWORD *)(v3 + 76) = 0;
  deleteCachedRecordsForUpdate(v3);
  v6 = (__int64 *)(v3 + 64);
  if ( !*(_QWORD *)(v3 + 64) )
    goto LABEL_10;
  v7 = (__int64 *)*v6;
  v8 = WPP_GLOBAL_Control;
  while ( 1 )
  {
    if ( !v7 || v2 < *((_WORD *)v7 + 6) )
      goto LABEL_49;
    if ( v2 <= *((_WORD *)v7 + 6) )
      break;
LABEL_42:
    v6 = v7;
    v7 = (__int64 *)*v7;
  }
  v9 = 0;
  v25 = 0i64;
  v10 = 0i64;
  v26 = 0i64;
  v24 = 0i64;
  v11 = v28[7];
  v23 = 0i64;
  if ( v11 == *((_WORD *)v7 + 7) )
  {
    if ( !memcmp_0(v28 + 28, v7 + 7, v11) )
    {
      v9 = 1;
    }
    else
    {
      GetRRDataCopyWithDbName(v28, &v24, &v25);
      GetRRDataCopyWithDbName((unsigned __int16 *)v7, &v23, &v26);
      v10 = v24;
      v5 = v23;
      if ( v24 )
      {
        v12 = v25;
        for ( i = v26; v5; i += (unsigned __int8)*i + 2 )
        {
          if ( !v12 )
            break;
          if ( !i )
            break;
          v14 = *v12;
          if ( *v12 != *i )
            break;
          v15 = v14;
          v16 = v12 + 2;
          v17 = i + 2;
          if ( v14 )
          {
            do
            {
              v18 = *v16;
              --v15;
              ++v16;
              if ( (DnsCharPropertyTable[4 * v18] & 4) != 0 )
                *(v16 - 1) = v18 + 32;
              v19 = *v17++;
              if ( (DnsCharPropertyTable[4 * v19] & 4) != 0 )
                *(v17 - 1) = v19 + 32;
            }
            while ( v15 );
            v3 = a1;
            v2 = v29;
          }
          if ( v9 || v28[6] > 0x11u || (v20 = 147520, !_bittest(&v20, v28[6])) )
          {
            v9 = memcmp_0((const void *)(v10 + 56), (const void *)(v5 + 56), *(unsigned __int16 *)(v10 + 14)) == 0;
            goto LABEL_37;
          }
          v9 = 1;
          v12 += *v12 + 2;
        }
      }
      v9 = 0;
    }
  }
LABEL_37:
  RR_Free(v10);
  RR_Free(v5);
  v5 = 0i64;
  if ( !v9 )
  {
    v8 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x80000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x44u, (__int64)&WPP_10d39582251c332017bd035d2c946054_Traceguids);
      v8 = WPP_GLOBAL_Control;
    }
    goto LABEL_42;
  }
  if ( v2 == 6 && (*(_DWORD *)(v3 + 92) & 0x100) != 0 )
  {
    v8 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
    {
      if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x80000) != 0 && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x45u, (__int64)&WPP_10d39582251c332017bd035d2c946054_Traceguids);
        v8 = WPP_GLOBAL_Control;
      }
LABEL_49:
      if ( v8 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)v8 + 17) & 0x80000) != 0
        && *((_BYTE *)v8 + 65) >= 4u )
      {
        WPP_SF_Ds(*((_QWORD *)v8 + 7), 0x47u, (__int64)&WPP_10d39582251c332017bd035d2c946054_Traceguids, v2, v3 + 102);
      }
    }
    LODWORD(v28) = -1;
    releaseUpdate(DbaseLock, (unsigned int *)&v28, 1);
    return 0i64;
  }
  if ( (*((_BYTE *)v7 + 10) & 0x20) == 0 || *(_QWORD *)(v3 + 56) )
  {
    Dbase_LockEx(v3, 2, (__int64)"ds\\dns\\server\\server\\rrlist.c", 78);
    *v6 = *v7;
    *v7 = 0i64;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x80000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_qDs(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x46u,
        (__int64)&WPP_10d39582251c332017bd035d2c946054_Traceguids,
        v7,
        v2,
        v3 + 102);
    }
    RR_ListResetNodeFlags(v3);
    NTree_ChangeAncestorCounters((volatile signed __int32 **)v3, v30);
    Dbase_UnlockEx(v22, 2, (__int64)"ds\\dns\\server\\server\\rrlist.c", 105);
    goto LABEL_61;
  }
LABEL_10:
  v7 = 0i64;
LABEL_61:
  LODWORD(v28) = -1;
  releaseUpdate(DbaseLock, (unsigned int *)&v28, 1);
  return v7;
}
// 14008CF8F: variable 'v22' is possibly undefined
// 140195830: using guessed type _BYTE DnsCharPropertyTable[1024];
// 1401EC5E8: using guessed type __int64 DbaseLock;
