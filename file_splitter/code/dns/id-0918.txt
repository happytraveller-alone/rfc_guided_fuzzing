//----- (000000014007D210) ----------------------------------------------------
_QWORD *__fastcall DnsRq_FindQueryByXid(__int64 a1)
{
  __int64 v1; // rbx
  int v3; // edi
  int XidHashIndex; // r12d
  unsigned __int16 v5; // r14
  BOOL v6; // esi
  CDnsClientSubnetRecordsTrie *v7; // rcx
  char v8; // dl
  __int64 *v9; // r14
  CDnsClientSubnetRecordsTrie *v10; // rcx
  __int64 v11; // r8
  __int64 v12; // rdx
  __int64 *v13; // rax
  __int64 v14; // rsi
  __int64 v15; // rdx
  int v16; // r9d
  unsigned __int16 v17; // dx
  __int64 v18; // rdx
  __int64 *v19; // rax
  __int64 *v20; // rdi
  _WORD *v21; // rax
  __int64 v22; // rcx
  unsigned __int16 *v23; // rax
  __int64 v24; // r8
  int v25; // ecx
  int v26; // edx
  __int64 v28; // rdx
  _QWORD *v29; // rcx
  _QWORD *v30; // rax
  __int64 v31; // rax
  __int64 v32; // rdx
  _QWORD *v33; // rcx
  __int64 v34; // rcx
  __int64 v35; // [rsp+28h] [rbp-E0h]
  __int64 v36; // [rsp+30h] [rbp-D8h]
  unsigned __int16 v37; // [rsp+38h] [rbp-D0h]
  _QWORD *Buffer; // [rsp+40h] [rbp-C8h] BYREF
  __int64 *v39; // [rsp+48h] [rbp-C0h]
  __int64 v40; // [rsp+50h] [rbp-B8h]
  unsigned int v41; // [rsp+58h] [rbp-B0h] BYREF
  int v42; // [rsp+5Ch] [rbp-ACh]
  __int64 v43; // [rsp+60h] [rbp-A8h]
  _WORD *v44; // [rsp+68h] [rbp-A0h]
  __int64 *v45; // [rsp+70h] [rbp-98h]
  __int64 *v46; // [rsp+78h] [rbp-90h]
  __int64 *v47; // [rsp+80h] [rbp-88h]
  __int64 v48; // [rsp+88h] [rbp-80h]
  __int16 v49[184]; // [rsp+98h] [rbp-70h] BYREF

  v1 = 0i64;
  Buffer = 0i64;
  v41 = -1;
  LODWORD(v43) = 0;
  v3 = 0;
  v44 = 0i64;
  v47 = 0i64;
  v42 = 0;
  v46 = 0i64;
  if ( !a1 )
  {
    XidHashIndex = 87;
    goto LABEL_87;
  }
  EnterCriticalSection((LPCRITICAL_SECTION)(g_pRemoteQueryQueue + 16));
  v5 = *(_WORD *)(a1 + 6304);
  v37 = v5;
  v6 = *(_WORD *)(a1 + 64) != 23;
  v7 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x4000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
  {
    WPP_SF_qdD(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x17u,
      (__int64)&WPP_48eb941880a8399baad621a189a68abc_Traceguids,
      a1,
      v5,
      *(_DWORD *)(a1 + 56));
    v7 = WPP_GLOBAL_Control;
  }
  if ( !*(_WORD *)(a1 + 6308) )
  {
    v8 = *(_BYTE *)(a1 + 6307) & 0xF;
    if ( ((v8 - 1) & 0xFC) == 0 && v8 != 3 )
    {
      if ( v7 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)v7 + 17) & 0x4000) != 0
        && *((_BYTE *)v7 + 65) >= 4u )
      {
        LODWORD(v35) = v5;
        WPP_SF_qd(*((_QWORD *)v7 + 7), 0x18u, (__int64)&WPP_48eb941880a8399baad621a189a68abc_Traceguids, a1, v35);
      }
      v3 = 1;
    }
  }
  XidHashIndex = generateXidHashIndex(v5, (int *)&v41);
  if ( XidHashIndex )
    goto LABEL_86;
  v39 = (__int64 *)((char *)&g_RemoteXidHashArray + 16 * v41);
  v45 = (__int64 *)*v39;
  v9 = v45;
  v10 = WPP_GLOBAL_Control;
  if ( v45 == v39 )
    goto LABEL_107;
  v11 = v37;
  v12 = v6;
  v48 = v3;
  v13 = v39;
  v40 = v6;
  while ( 1 )
  {
    v14 = (__int64)(v9 - 64);
    if ( *((_WORD *)v9 + 26) == (_WORD)v11 )
      break;
LABEL_79:
    v9 = (__int64 *)*v9;
    v45 = v9;
    if ( v9 == v13 )
      goto LABEL_102;
  }
  if ( !*(_BYTE *)(a1 + 1413) && !g_SendBindingPort )
  {
    if ( v12 )
    {
      v15 = *(_QWORD *)(v14 + 544);
      if ( (unsigned __int64)(v15 - 1) <= 0xFFFFFFFFFFFFFFFDui64 && v15 != *(_QWORD *)(a1 + 56) )
      {
        if ( v10 == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          || (*((_DWORD *)v10 + 17) & 0x4000) == 0
          || *((_BYTE *)v10 + 65) < 4u )
        {
          goto LABEL_78;
        }
        v16 = *(_DWORD *)(v14 + 544);
        v17 = 25;
        goto LABEL_28;
      }
    }
    else
    {
      v18 = *(_QWORD *)(v14 + 552);
      if ( (unsigned __int64)(v18 - 1) <= 0xFFFFFFFFFFFFFFFDui64 && v18 != *(_QWORD *)(a1 + 56) )
      {
        if ( v10 == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          || (*((_DWORD *)v10 + 17) & 0x4000) == 0
          || *((_BYTE *)v10 + 65) < 4u )
        {
          goto LABEL_78;
        }
        v16 = *(_DWORD *)(v14 + 552);
        v17 = 26;
LABEL_28:
        WPP_SF_Dd(*((_QWORD *)v10 + 7), v17, (__int64)&WPP_48eb941880a8399baad621a189a68abc_Traceguids, v16);
        v10 = WPP_GLOBAL_Control;
LABEL_77:
        v11 = v37;
LABEL_78:
        v13 = v39;
        v12 = v40;
        goto LABEL_79;
      }
    }
  }
  if ( v10 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)v10 + 17) & 0x4000) != 0
    && *((_BYTE *)v10 + 65) >= 4u )
  {
    WPP_SF_Dqd(*((_QWORD *)v10 + 7), (__int64)&WPP_GLOBAL_Control, v11, (unsigned __int16)v11);
    v10 = WPP_GLOBAL_Control;
  }
  if ( *(_WORD *)(v14 + 496) != 3 )
  {
    v19 = *(__int64 **)(v14 + 1256);
    if ( v19 && v19[59] )
    {
      if ( v10 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)v10 + 17) & 0x4000) != 0
        && *((_BYTE *)v10 + 65) >= 4u )
      {
        WPP_SF_qq(*((_QWORD *)v10 + 7), 0x1Cu, (__int64)&WPP_48eb941880a8399baad621a189a68abc_Traceguids, v19, v9 - 64);
        v10 = WPP_GLOBAL_Control;
      }
      v19 = *(__int64 **)(v14 + 1256);
      v20 = v19;
    }
    else
    {
      v20 = v9 - 64;
    }
    if ( v48 )
    {
      if ( v42 )
      {
        if ( v10 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)v10 + 17) & 0x4000) != 0
          && *((_BYTE *)v10 + 65) >= 4u )
        {
          WPP_SF_q(*((_QWORD *)v10 + 7), 0x1Du, (__int64)&WPP_48eb941880a8399baad621a189a68abc_Traceguids, a1);
        }
LABEL_85:
        XidHashIndex = 9502;
        goto LABEL_86;
      }
      v42 = 1;
      if ( v19 )
        v20 = v19;
      if ( *((_WORD *)v20 + 301) )
      {
        v46 = v9 - 64;
        goto LABEL_77;
      }
      if ( v10 == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_DWORD *)v10 + 17) & 0x4000) == 0
        || *((_BYTE *)v10 + 65) < 4u )
      {
        goto LABEL_77;
      }
      WPP_SF_qq(*((_QWORD *)v10 + 7), 0x1Eu, (__int64)&WPP_48eb941880a8399baad621a189a68abc_Traceguids, v9 - 64, a1);
    }
    else
    {
      if ( (_DWORD)v43 )
      {
        v21 = v44;
      }
      else
      {
        if ( !(unsigned int)Name_ConvertPacketNameToLookupNameEx(
                              a1,
                              (unsigned __int8 *)(a1 + 6316),
                              (unsigned __int16 *)v49,
                              1) )
        {
          XidHashIndex = 123;
          goto LABEL_86;
        }
        v21 = (_WORD *)Wire_SkipPacketName(a1, a1 + 6316);
        v44 = v21;
        if ( !v21 )
          goto LABEL_85;
        v10 = WPP_GLOBAL_Control;
        v9 = v45;
        LODWORD(v43) = 1;
      }
      if ( *(_WORD *)v20[59] != *v21 )
        goto LABEL_77;
      if ( !(unsigned int)Name_CompareLookupNames((_WORD *)v20[175], v49) )
      {
        if ( !*(_WORD *)(a1 + 608) )
          goto LABEL_93;
        if ( (v22 = *(_QWORD *)(v14 + 6280)) != 0 && *(_QWORD *)(v22 + 192) || (*(_BYTE *)(a1 + 592) & 4) != 0 )
        {
          if ( !v22 || (v23 = *(unsigned __int16 **)(v22 + 192)) == 0i64 )
            v23 = *(unsigned __int16 **)(v22 + 24);
          v24 = a1 + 608 - (_QWORD)v23;
          do
          {
            v25 = *(unsigned __int16 *)((char *)v23 + v24);
            v26 = *v23 - v25;
            if ( v26 )
              break;
            ++v23;
          }
          while ( v25 );
          if ( !v26 )
          {
LABEL_93:
            v10 = WPP_GLOBAL_Control;
            goto LABEL_95;
          }
        }
      }
    }
    v10 = WPP_GLOBAL_Control;
    goto LABEL_77;
  }
  v47 = v9 - 64;
LABEL_95:
  if ( *(_WORD *)(v14 + 496) != 2 || (*(_BYTE *)(a1 + 6306) & 4) != 0 )
  {
    Buffer = (_QWORD *)v14;
  }
  else if ( v10 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
         && (*((_DWORD *)v10 + 17) & 0x4000) != 0
         && *((_BYTE *)v10 + 65) >= 5u )
  {
    WPP_SF_(*((_QWORD *)v10 + 7), 0x1Fu, (__int64)&WPP_48eb941880a8399baad621a189a68abc_Traceguids);
    v10 = WPP_GLOBAL_Control;
  }
LABEL_102:
  if ( v46 )
  {
    Buffer = v46;
    if ( v10 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)v10 + 17) & 0x4000) != 0
      && *((_BYTE *)v10 + 65) >= 4u )
    {
      WPP_SF_q(*((_QWORD *)v10 + 7), 0x20u, (__int64)&WPP_48eb941880a8399baad621a189a68abc_Traceguids, v46);
      v10 = WPP_GLOBAL_Control;
    }
  }
LABEL_107:
  if ( Buffer )
  {
LABEL_113:
    v28 = Buffer[64];
    v29 = (_QWORD *)Buffer[65];
    if ( *(_QWORD **)(v28 + 8) != Buffer + 64 || (_QWORD *)*v29 != Buffer + 64 )
      __fastfail(3u);
    *v29 = v28;
    *(_QWORD *)(v28 + 8) = v29;
    v30 = Buffer + 64;
    Buffer[65] = Buffer + 64;
    *v30 = v30;
    _InterlockedDecrement(&g_RemoteXidHashCount);
    v10 = WPP_GLOBAL_Control;
  }
  else if ( v47 )
  {
    Buffer = v47;
    if ( v10 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)v10 + 17) & 0x4000) != 0
      && *((_BYTE *)v10 + 65) >= 4u )
    {
      WPP_SF_q(*((_QWORD *)v10 + 7), 0x21u, (__int64)&WPP_48eb941880a8399baad621a189a68abc_Traceguids, v47);
    }
    goto LABEL_113;
  }
  if ( v10 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)v10 + 17) & 0x4000) != 0
    && *((_BYTE *)v10 + 65) >= 5u )
  {
    HIDWORD(v36) = HIDWORD(Buffer);
    WPP_SF_Ddq(*((_QWORD *)v10 + 7), 0x22u, (__int64)&WPP_48eb941880a8399baad621a189a68abc_Traceguids, v37);
  }
  if ( Buffer )
  {
    v31 = g_pRemoteQueryQueue;
    --*(_DWORD *)(g_pRemoteQueryQueue + 96);
    --*(_DWORD *)(v31 + 100);
    *((_DWORD *)Buffer + 4) = 0;
    v32 = *Buffer;
    v33 = (_QWORD *)Buffer[1];
    if ( *(_QWORD **)(*Buffer + 8i64) != Buffer || (_QWORD *)*v33 != Buffer )
      __fastfail(3u);
    *v33 = v32;
    *(_QWORD *)(v32 + 8) = v33;
    v34 = *((unsigned int *)Buffer + 125);
    if ( (_DWORD)v34 != -1 && RtlDeleteElementGenericTableAvl((PRTL_AVL_TABLE)g_RemoteNameHashArray[v34], &Buffer) )
    {
      *((_DWORD *)Buffer + 125) = -1;
      _InterlockedDecrement(&g_RemoteNameHashCount);
    }
    g_TotalQueuedRecursiveQueries += -1 - *((_DWORD *)Buffer + 140);
  }
LABEL_86:
  LeaveCriticalSection((LPCRITICAL_SECTION)(g_pRemoteQueryQueue + 16));
  v1 = (__int64)Buffer;
LABEL_87:
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x4000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    LODWORD(v36) = XidHashIndex;
    WPP_SF_qqd(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x23u,
      (__int64)&WPP_48eb941880a8399baad621a189a68abc_Traceguids,
      v1,
      a1,
      v36);
    return Buffer;
  }
  return (_QWORD *)v1;
}
// 14007D8DA: conditional instruction was optimized away because %Buffer.8!=0
// 14007D35F: variable 'v35' is possibly undefined
// 14007D78E: variable 'v36' is possibly undefined
// 1401C86A8: using guessed type __int16 g_SendBindingPort;
// 1401C9538: using guessed type __int64 g_pRemoteQueryQueue;
// 1401CA540: using guessed type int g_RemoteXidHashCount;
// 1401CA560: using guessed type __int64 g_RemoteNameHashArray[256];
// 1401CAD60: using guessed type int g_RemoteNameHashCount;
// 1401CAD64: using guessed type int g_TotalQueuedRecursiveQueries;
// 14007D210: using guessed type unsigned __int16 var_1A0[184];
