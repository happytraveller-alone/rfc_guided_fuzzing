//----- (0000000140121140) ----------------------------------------------------
__int64 __fastcall RrsigFileRead(__int64 a1, unsigned int a2, __int64 a3, __int64 a4, int a5)
{
  unsigned int v8; // edi
  u_short v9; // r15
  unsigned int v10; // edi
  char v11; // r13
  unsigned int v12; // edi
  bool v13; // zf
  u_long v14; // eax
  u_long v15; // eax
  unsigned __int16 v16; // cx
  _BYTE *v17; // rax
  _BYTE *v18; // r14
  u_short v19; // ax
  u_long v20; // ecx
  u_long v21; // eax
  u_long v22; // ecx
  u_long v23; // eax
  u_long v24; // ecx
  u_long v25; // eax
  u_short v26; // cx
  u_short v27; // ax
  size_t v28; // r8
  void *v29; // rdx
  _BYTE *v30; // rcx
  u_long v32; // [rsp+30h] [rbp-D0h] BYREF
  unsigned int Size; // [rsp+34h] [rbp-CCh] BYREF
  u_long Size_4; // [rsp+38h] [rbp-C8h]
  u_long v35; // [rsp+3Ch] [rbp-C4h]
  u_long v36; // [rsp+40h] [rbp-C0h]
  u_long hostlong; // [rsp+44h] [rbp-BCh]
  void *Src; // [rsp+48h] [rbp-B8h] BYREF
  unsigned __int8 v39[272]; // [rsp+50h] [rbp-B0h] BYREF

  Src = 0i64;
  if ( a2 < 8 )
  {
    v8 = -1072573181;
    goto LABEL_33;
  }
  v9 = Dns_RecordTypeForNameA(*(_BYTE **)a3, *(_DWORD *)(a3 + 8));
  if ( !v9 )
  {
    v9 = DnsRecordTypeForUnknownRecords(*(const char **)a3, *(_DWORD *)(a3 + 8));
    if ( !v9 )
      goto LABEL_32;
  }
  v10 = a2 - 1;
  v11 = Dns_ValueForString((__int64)&DnssecAlgorithmTable, 1, *(_QWORD *)(a3 + 16), *(_DWORD *)(a3 + 24));
  if ( v11 == -1 )
  {
    if ( !(unsigned int)File_ParseDwordToken(&v32, a3 + 16, a4) || v32 > 0xFF )
      goto LABEL_32;
    v11 = v32;
  }
  if ( !(unsigned int)File_ParseDwordToken(&v32, a3 + 32, a4) )
    goto LABEL_32;
  v36 = v32;
  if ( v32 > 0x7F || !(unsigned int)File_ParseDwordToken(&v32, a3 + 48, a4) )
    goto LABEL_32;
  v12 = v10 - 3;
  v13 = *(_DWORD *)(a3 + 72) == 14;
  hostlong = v32;
  if ( v13 )
  {
    v14 = Dns_ParseSigTime(*(_QWORD *)(a3 + 64), 14);
  }
  else
  {
    if ( !(unsigned int)File_ParseDwordToken(&v32, a3 + 64, a4) )
      goto LABEL_32;
    v14 = v32;
  }
  v13 = *(_DWORD *)(a3 + 88) == 14;
  Size_4 = v14;
  if ( !v13 )
  {
    if ( (unsigned int)File_ParseDwordToken(&v32, a3 + 80, a4) )
    {
      v15 = v32;
      goto LABEL_20;
    }
LABEL_32:
    v8 = -1072573183;
    goto LABEL_33;
  }
  v15 = Dns_ParseSigTime(*(_QWORD *)(a3 + 80), 14);
LABEL_20:
  v35 = v15;
  if ( !(unsigned int)File_ParseDwordToken(&v32, a3 + 96, a4)
    || v32 > 0xFFFF
    || (unsigned int)File_ReadCountNameFromToken(v39, 0i64, a4, (const void **)(a3 + 112), a5) )
  {
    goto LABEL_32;
  }
  v8 = buildKeyOrSignatureFromTokens(&Src, &Size, v12 - 4, a3 + 128);
  if ( !v8 )
  {
    if ( Size > 0xFFFF
      || (unsigned int)v39[0] + 2 > 0xFFFF
      || (v16 = v39[0] + 20, v16 < 0x12u)
      || (unsigned __int16)(v16 + Size) < v16 )
    {
      v8 = 13;
    }
    else
    {
      v17 = RR_AllocateEx(v16 + (unsigned __int16)Size, 0, 0);
      v18 = v17;
      if ( v17 )
      {
        *(_QWORD *)(a4 + 800) = v17;
        Name_CopyCountName(v17 + 74, v39);
        v19 = htons(v9);
        v20 = hostlong;
        *((_WORD *)v18 + 28) = v19;
        v18[59] = v36;
        v18[58] = v11;
        v21 = htonl(v20);
        v22 = Size_4;
        *((_DWORD *)v18 + 15) = v21;
        v23 = htonl(v22);
        v24 = v35;
        *((_DWORD *)v18 + 16) = v23;
        v25 = htonl(v24);
        v26 = v32;
        *((_DWORD *)v18 + 17) = v25;
        v27 = htons(v26);
        v28 = Size;
        v29 = Src;
        v30 = &v18[(unsigned __int8)v18[74] + 76];
        *((_WORD *)v18 + 36) = v27;
        memcpy_0(v30, v29, v28);
      }
      else
      {
        v8 = 14;
      }
    }
  }
LABEL_33:
  Mem_Free(Src, 0i64, 0i64, (__int64)"ds\\dns\\server\\dnscore\\rrfile.c", 3106);
  if ( v8 == -1072573183 )
    *(_DWORD *)(a4 + 1596) = -1072573180;
  return v8;
}
