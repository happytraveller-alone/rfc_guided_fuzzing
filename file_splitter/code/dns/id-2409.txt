//----- (0000000140125644) ----------------------------------------------------
NCRYPT_KEY_HANDLE __fastcall DnsSign::GenerateNCryptKey(
        wchar_t *String1,
        const unsigned __int16 *a2,
        int a3,
        char a4,
        char a5,
        char a6,
        char *a7,
        char a8)
{
  char *v10; // rax
  const WCHAR *v11; // rbx
  UINT v12; // esi
  DnsSign *v13; // rcx
  unsigned __int16 *KeyName; // r15
  const WCHAR *v15; // r9
  int v16; // eax
  int v17; // r14d
  int v18; // eax
  int v19; // r14d
  int Property; // eax
  unsigned __int64 v21; // rsi
  BYTE *v22; // r14
  __int64 v23; // rax
  int v24; // r12d
  BYTE pbInput[4]; // [rsp+30h] [rbp-D0h] BYREF
  NCRYPT_KEY_HANDLE phKey; // [rsp+38h] [rbp-C8h] BYREF
  DWORD pcbResult; // [rsp+40h] [rbp-C0h] BYREF
  wchar_t *String1a; // [rsp+48h] [rbp-B8h]
  NCRYPT_KEY_HANDLE v30; // [rsp+50h] [rbp-B0h]
  NCRYPT_PROV_HANDLE hProvider; // [rsp+58h] [rbp-A8h]
  char v32; // [rsp+60h] [rbp-A0h]
  NCRYPT_KEY_HANDLE v33; // [rsp+68h] [rbp-98h]
  char v34; // [rsp+70h] [rbp-90h]
  __int64 v35; // [rsp+78h] [rbp-88h]
  unsigned __int16 *v36; // [rsp+80h] [rbp-80h]
  void **v37; // [rsp+88h] [rbp-78h] BYREF
  int v38; // [rsp+90h] [rbp-70h]
  int v39; // [rsp+94h] [rbp-6Ch]
  __int64 v40; // [rsp+98h] [rbp-68h]
  __int64 v41; // [rsp+A8h] [rbp-58h]
  __int64 v42; // [rsp+B0h] [rbp-50h]
  char pExceptionObject[56]; // [rsp+C0h] [rbp-40h] BYREF

  v35 = -2i64;
  String1a = String1;
  *(_DWORD *)pbInput = a3;
  *((_QWORD *)a7 + 2) = 0i64;
  if ( *((_QWORD *)a7 + 3) < 8ui64 )
    v10 = a7;
  else
    v10 = *(char **)a7;
  *(_WORD *)v10 = 0;
  if ( (_BYTE)a2 == 5 )
    goto LABEL_29;
  if ( (unsigned __int8)a2 <= 6u )
    goto LABEL_24;
  if ( (unsigned __int8)a2 <= 8u || (_BYTE)a2 == 10 )
  {
LABEL_29:
    if ( (unsigned int)(*(_DWORD *)pbInput - 1024) > 0xC00 )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 7) & 0x100000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 25) >= 4u )
      {
        WPP_SF_D(
          *((_QWORD *)WPP_GLOBAL_Control + 2),
          0x2Au,
          (__int64)&WPP_52544f7432c93905eab44474fa1b3f20_Traceguids,
          *(int *)pbInput);
      }
      DnsSign::CRunTimeException::CRunTimeException((DnsSign::CRunTimeException *)&v37, (__int64)a2, 9);
      DnsSign::CException::AppendErrorMessageByID((DnsSign::CException *)&v37, 0xD6D88u);
      DnsSign::CException::AppendErrorMessage((DnsSign::CException *)&v37, L"  ");
      DnsSign::CException::AppendErrorMessageByID((DnsSign::CException *)&v37, 0xD6DC7u);
      DnsSign::CRunTimeException::CRunTimeException(
        (DnsSign::CRunTimeException *)pExceptionObject,
        (const struct DnsSign::CRunTimeException *)&v37);
      CxxThrowException_0(pExceptionObject, (_ThrowInfo *)&TI2_AVCRunTimeException_DnsSign__);
    }
    v11 = L"RSA";
    v12 = 880071;
  }
  else
  {
    if ( (_BYTE)a2 != 13 )
    {
      if ( (_BYTE)a2 == 14 )
      {
        if ( *(_DWORD *)pbInput != 384 )
        {
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 7) & 0x100000) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 25) >= 4u )
          {
            WPP_SF_Dd(
              *((_QWORD *)WPP_GLOBAL_Control + 2),
              0x2Cu,
              (__int64)&WPP_52544f7432c93905eab44474fa1b3f20_Traceguids,
              *(int *)pbInput);
          }
          DnsSign::CRunTimeException::CRunTimeException((DnsSign::CRunTimeException *)&v37, (__int64)a2, 9);
          DnsSign::CException::AppendErrorMessageByID((DnsSign::CException *)&v37, 0xD6D88u);
          DnsSign::CException::AppendErrorMessage((DnsSign::CException *)&v37, L"  ");
          DnsSign::CException::AppendErrorMessageByID((DnsSign::CException *)&v37, 0xD6DEEu);
          DnsSign::CRunTimeException::CRunTimeException(
            (DnsSign::CRunTimeException *)pExceptionObject,
            (const struct DnsSign::CRunTimeException *)&v37);
          CxxThrowException_0(pExceptionObject, (_ThrowInfo *)&TI2_AVCRunTimeException_DnsSign__);
        }
        v11 = L"ECDSA_P384";
        v12 = 880110;
        goto LABEL_31;
      }
LABEL_24:
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 7) & 0x100000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 25) >= 4u )
      {
        WPP_SF_D(
          *((_QWORD *)WPP_GLOBAL_Control + 2),
          0x2Du,
          (__int64)&WPP_52544f7432c93905eab44474fa1b3f20_Traceguids,
          (unsigned __int8)a2);
      }
      DnsSign::CRunTimeException::CRunTimeException((DnsSign::CRunTimeException *)&v37, (__int64)a2, 2);
      DnsSign::CException::AppendErrorMessageByID((DnsSign::CException *)&v37, 0xD6D89u);
      DnsSign::CRunTimeException::CRunTimeException(
        (DnsSign::CRunTimeException *)pExceptionObject,
        (const struct DnsSign::CRunTimeException *)&v37);
      CxxThrowException_0(pExceptionObject, (_ThrowInfo *)&TI2_AVCRunTimeException_DnsSign__);
    }
    if ( *(_DWORD *)pbInput != 256 )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 7) & 0x100000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 25) >= 4u )
      {
        WPP_SF_Dd(
          *((_QWORD *)WPP_GLOBAL_Control + 2),
          0x2Bu,
          (__int64)&WPP_52544f7432c93905eab44474fa1b3f20_Traceguids,
          *(int *)pbInput);
      }
      DnsSign::CRunTimeException::CRunTimeException((DnsSign::CRunTimeException *)&v37, (__int64)a2, 9);
      DnsSign::CException::AppendErrorMessageByID((DnsSign::CException *)&v37, 0xD6D88u);
      DnsSign::CException::AppendErrorMessage((DnsSign::CException *)&v37, L"  ");
      DnsSign::CException::AppendErrorMessageByID((DnsSign::CException *)&v37, 0xD6DEDu);
      DnsSign::CRunTimeException::CRunTimeException(
        (DnsSign::CRunTimeException *)pExceptionObject,
        (const struct DnsSign::CRunTimeException *)&v37);
      CxxThrowException_0(pExceptionObject, (_ThrowInfo *)&TI2_AVCRunTimeException_DnsSign__);
    }
    v11 = L"ECDSA_P256";
    v12 = 880109;
  }
LABEL_31:
  hProvider = DnsSign::OpenKeyStorageProvider(String1, a2);
  v32 = 0;
  KeyName = DnsSign::GenerateKeyName(v13);
  v36 = KeyName;
  phKey = 0i64;
  v15 = KeyName;
  if ( a5 )
    v15 = 0i64;
  v16 = NCryptCreatePersistedKey(hProvider, &phKey, v11, v15, 0, a4 != 0 ? 0x20 : 0);
  v17 = v16;
  if ( v16 < 0 )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 7) & 0x100000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 25) >= 4u )
    {
      WPP_SF_D(
        *((_QWORD *)WPP_GLOBAL_Control + 2),
        0x2Eu,
        (__int64)&WPP_52544f7432c93905eab44474fa1b3f20_Traceguids,
        v16);
    }
    DnsSign::CRunTimeException::CRunTimeException((DnsSign::CRunTimeException *)&v37, v17);
    DnsSign::CException::AppendErrorMessageByID((DnsSign::CException *)&v37, 0xD6D8Cu);
    DnsSign::CRunTimeException::CRunTimeException(
      (DnsSign::CRunTimeException *)pExceptionObject,
      (const struct DnsSign::CRunTimeException *)&v37);
    CxxThrowException_0(pExceptionObject, (_ThrowInfo *)&TI2_AVCRunTimeException_DnsSign__);
  }
  v30 = phKey;
  v33 = phKey;
  v34 = 0;
  if ( !_wcsicmp(String1, L"Microsoft Software Key Storage Provider") || a8 )
  {
    v18 = NCryptSetProperty(phKey, L"Length", pbInput, 4u, 0x80000000);
    v19 = v18;
    if ( v18 < 0 )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 7) & 0x100000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 25) >= 4u )
      {
        WPP_SF_D(
          *((_QWORD *)WPP_GLOBAL_Control + 2),
          0x2Fu,
          (__int64)&WPP_52544f7432c93905eab44474fa1b3f20_Traceguids,
          v18);
      }
      v38 = v19;
      v39 = 0;
      v42 = 7i64;
      v41 = 0i64;
      LOWORD(v40) = 0;
      v37 = &DnsSign::CRunTimeException::`vftable';
      DnsSign::CException::AppendErrorMessageByID((DnsSign::CException *)&v37, 0xD6D8Du, *(unsigned int *)pbInput);
      if ( a8 )
      {
        v34 = 1;
        v39 = 9106;
      }
      DnsSign::CException::AppendErrorMessage((DnsSign::CException *)&v37, L"  ");
      DnsSign::CException::AppendErrorMessageByID((DnsSign::CException *)&v37, v12);
      DnsSign::CRunTimeException::CRunTimeException(
        (DnsSign::CRunTimeException *)pExceptionObject,
        (const struct DnsSign::CRunTimeException *)&v37);
      CxxThrowException_0(pExceptionObject, (_ThrowInfo *)&TI2_AVCRunTimeException_DnsSign__);
    }
  }
  if ( !_wcsicmp(String1a, L"Microsoft Software Key Storage Provider") )
    DnsSign::MarkKeyExportable((DnsSign *)phKey);
  pcbResult = 0;
  Property = NCryptGetProperty(phKey, L"MSDNS_KEY_TYPE", 0i64, 0, &pcbResult, 0);
  v21 = -1i64;
  if ( Property == -2146893783 )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 7) & 0x100000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 25) >= 4u )
    {
      WPP_SF_SS(
        *((_QWORD *)WPP_GLOBAL_Control + 2),
        0x30u,
        (__int64)&WPP_52544f7432c93905eab44474fa1b3f20_Traceguids,
        L"MSDNS_KEY_TYPE",
        (__int64)KeyName);
    }
  }
  else if ( Property >= 0 )
  {
    v22 = (BYTE *)L"KSK";
    if ( !a6 )
      v22 = (BYTE *)L"ZSK";
    v23 = -1i64;
    do
      ++v23;
    while ( *(_WORD *)&v22[2 * v23] );
    v24 = NCryptSetProperty(phKey, L"MSDNS_KEY_TYPE", v22, 2 * v23 + 2, 0x80000000);
    if ( v24 < 0 )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 7) & 0x100000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 25) >= 4u )
      {
        WPP_SF_SSD(
          *((_QWORD *)WPP_GLOBAL_Control + 2),
          0x32u,
          (__int64)&WPP_52544f7432c93905eab44474fa1b3f20_Traceguids,
          KeyName,
          (__int64)L"MSDNS_KEY_TYPE");
      }
      DnsSign::CRunTimeException::CRunTimeException((DnsSign::CRunTimeException *)&v37, v24);
      DnsSign::CException::AppendErrorMessageByID((DnsSign::CException *)&v37, 0xD6DEFu, v22);
      DnsSign::CRunTimeException::CRunTimeException(
        (DnsSign::CRunTimeException *)pExceptionObject,
        (const struct DnsSign::CRunTimeException *)&v37);
      CxxThrowException_0(pExceptionObject, (_ThrowInfo *)&TI2_AVCRunTimeException_DnsSign__);
    }
  }
  else if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
         && (*((_DWORD *)WPP_GLOBAL_Control + 7) & 0x100000) != 0
         && *((_BYTE *)WPP_GLOBAL_Control + 25) >= 4u )
  {
    WPP_SF_DS(
      *((_QWORD *)WPP_GLOBAL_Control + 2),
      0x31u,
      (__int64)&WPP_52544f7432c93905eab44474fa1b3f20_Traceguids,
      Property,
      (__int64)KeyName);
  }
  DnsSign::FinalizeNCryptKey((DnsSign *)phKey);
  do
    ++v21;
  while ( KeyName[v21] );
  std::wstring::assign(a7, (char *)KeyName, v21);
  Mem_Free(KeyName, 0i64, 0i64, (__int64)"ds\\dns\\server\\dnssign\\zone.cpp", 239);
  if ( hProvider )
    NCryptFreeObject(hProvider);
  return v30;
}
// 140125AAC: conditional instruction was optimized away because esi.4 is in (==D6DC7|D6DED..D6DEE)
// 140125739: variable 'a2' is possibly undefined
// 1401258FE: variable 'v13' is possibly undefined
// 1401716E8: using guessed type void *DnsSign::CRunTimeException::`vftable';
// 140184CA8: using guessed type void __stdcall operator delete(void *);
// 140192C68: using guessed type wchar_t aKsk_0[4];
