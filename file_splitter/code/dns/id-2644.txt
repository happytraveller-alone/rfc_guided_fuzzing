//----- (000000014013B810) ----------------------------------------------------
__int64 __fastcall std::_Tree<std::_Tmap_traits<std::wstring,CDnsPolicy_CriteriaNode *,bool (*)(std::wstring const &,std::wstring const &),std::allocator<std::pair<std::wstring const,CDnsPolicy_CriteriaNode *>>,0>>::insert<std::pair<std::wstring,CDnsPolicy_CriteriaNode *>>(
        __int64 a1,
        __int64 a2,
        __int64 a3)
{
  _QWORD *v5; // rax
  __int64 *v6; // rdi
  _QWORD *v7; // r13
  char v8; // bp
  char *v9; // rsi
  __int64 *v10; // rbx
  __int64 *v11; // rbx
  char v12; // r8
  _QWORD *v13; // rax
  __int64 *v14; // rax
  __int64 *i; // rax
  __int64 v17; // [rsp+60h] [rbp+8h] BYREF

  v5 = std::_Tree_val<std::_Tmap_traits<std::wstring,CDnsPolicy_CriteriaNode *,bool (*)(std::wstring const &,std::wstring const &),std::allocator<std::pair<std::wstring const,CDnsPolicy_CriteriaNode *>>,0>>::_Buynode<std::pair<std::wstring,CDnsPolicy_CriteriaNode *>>(
         a1,
         a3);
  v6 = *(__int64 **)(a1 + 8);
  v7 = v5;
  v8 = 1;
  v9 = (char *)(v5 + 3);
  v10 = (__int64 *)v6[1];
  while ( !*((_BYTE *)v10 + 73) )
  {
    v6 = v10;
    v8 = (*(__int64 (__fastcall **)(char *, __int64 *))a1)(v9, v10 + 3);
    if ( v8 )
      v10 = (__int64 *)*v10;
    else
      v10 = (__int64 *)v10[2];
  }
  v11 = v6;
  if ( v8 )
  {
    if ( v6 == **(__int64 ***)(a1 + 8) )
    {
      v12 = 1;
LABEL_9:
      v13 = std::_Tree<std::_Tmap_traits<std::wstring,CDnsPolicy *,CDnsCompareName,std::allocator<std::pair<std::wstring const,CDnsPolicy *>>,0>>::_Insert(
              a1,
              &v17,
              v12,
              v6,
              v7);
      *(_BYTE *)(a2 + 8) = 1;
      *(_QWORD *)a2 = *v13;
      return a2;
    }
    if ( *((_BYTE *)v6 + 73) )
    {
      v11 = (__int64 *)v6[2];
    }
    else
    {
      v14 = (__int64 *)*v6;
      if ( *(_BYTE *)(*v6 + 73) )
      {
        for ( i = (__int64 *)v6[1]; !*((_BYTE *)i + 73) && v11 == (__int64 *)*i; i = (__int64 *)i[1] )
          v11 = i;
        if ( !*((_BYTE *)v11 + 73) )
          v11 = i;
      }
      else
      {
        do
        {
          v11 = v14;
          v14 = (__int64 *)v14[2];
        }
        while ( !*((_BYTE *)v14 + 73) );
      }
    }
  }
  if ( (*(unsigned __int8 (__fastcall **)(__int64 *, char *))a1)(v11 + 3, v9) )
  {
    v12 = v8;
    goto LABEL_9;
  }
  if ( *((_QWORD *)v9 + 3) >= 8ui64 )
    operator delete(*(void **)v9);
  *((_QWORD *)v9 + 3) = 7i64;
  *((_QWORD *)v9 + 2) = 0i64;
  *(_WORD *)v9 = 0;
  operator delete(v7);
  *(_QWORD *)a2 = v11;
  *(_BYTE *)(a2 + 8) = 0;
  return a2;
}
// 140184CA8: using guessed type void __stdcall operator delete(void *);
// 140185140: using guessed type __int64 (__fastcall *_guard_dispatch_icall_fptr)(_QWORD, _QWORD);
