//----- (0000000140086E80) ----------------------------------------------------
__int64 __fastcall WksFlatRead(unsigned __int16 *a1, __int64 a2)
{
  u_short v4; // bp
  struct protoent *v5; // r15
  char *v7; // rcx
  __int64 v8; // r8
  unsigned __int16 *v9; // rsi
  unsigned __int16 *v10; // r14
  const char *v11; // rax
  char *i; // rbx
  char v13; // al
  struct servent *v14; // rax
  u_short v15; // ax
  unsigned __int16 v16; // bp
  _BYTE *v17; // rax
  char Src[128]; // [rsp+30h] [rbp-1C8h] BYREF
  char name[259]; // [rsp+B0h] [rbp-148h] BYREF
  char v20; // [rsp+1B3h] [rbp-45h] BYREF

  v4 = 0;
  if ( *a1 < 5u )
    return 9702i64;
  v5 = getprotobynumber(*((unsigned __int8 *)a1 + 28));
  if ( !v5 )
    return 13i64;
  v7 = (char *)a1 + *a1 + 24;
  if ( v7 < (char *)a1 + 31 )
    return 9702i64;
  v8 = *((unsigned __int8 *)a1 + 29);
  if ( v7 < (char *)a1 + v8 + 30 )
    return 9702i64;
  v9 = a1 + 15;
  v10 = (unsigned __int16 *)((char *)a1 + v8 + 30);
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
  {
    v11 = (const char *)FormatLabelA(*((unsigned __int8 *)a1 + 29), a1 + 15);
    WPP_SF_sd(*((_QWORD *)WPP_GLOBAL_Control + 7), 0xEu, (__int64)&WPP_383afeabe81e3a0b0d234d71fa57327a_Traceguids, v11);
  }
  memset_0(Src, 0, sizeof(Src));
  if ( v9 >= v10 )
    return 13i64;
  do
  {
    if ( *(_BYTE *)v9 == 32 )
    {
      v9 = (unsigned __int16 *)((char *)v9 + 1);
    }
    else
    {
      if ( !*(_BYTE *)v9 )
        break;
      for ( i = name; v9 < v10; ++i )
      {
        if ( i >= &v20 )
          break;
        v13 = *(_BYTE *)v9;
        v9 = (unsigned __int16 *)((char *)v9 + 1);
        if ( (v13 & 0xDF) == 0 )
          break;
        *i = v13;
      }
      *i = 0;
      v14 = getservbyname(name, v5->p_name);
      if ( !v14 )
      {
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          WPP_SF_s(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0xFu,
            (__int64)&WPP_383afeabe81e3a0b0d234d71fa57327a_Traceguids,
            name);
        }
        return 13i64;
      }
      v15 = ntohs(v14->s_port);
      if ( v15 > 0x400u )
      {
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          WPP_SF_sdD(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x10u,
            (__int64)&WPP_383afeabe81e3a0b0d234d71fa57327a_Traceguids,
            i);
        }
        return 13i64;
      }
      if ( v15 > v4 )
        v4 = v15;
      if ( (unsigned __int16)(v15 >> 3) >= 0x80u )
        return 13i64;
      Src[v15 >> 3] |= 1 << (7 - (v15 & 7));
    }
  }
  while ( v9 < v10 );
  if ( !v4 )
    return 13i64;
  v16 = (v4 >> 3) + 1;
  v17 = RR_AllocateEx(v16 + 5, 0, 0);
  if ( !v17 )
    return 14i64;
  *(_QWORD *)(a2 + 800) = v17;
  *((_WORD *)v17 + 6) = 11;
  *((_DWORD *)v17 + 14) = *((_DWORD *)a1 + 6);
  v17[60] = v5->p_proto;
  memcpy_0(v17 + 61, Src, v16);
  return 0i64;
}
// 140086E80: using guessed type char Src[128];
