//----- (0000000140115EF4) ----------------------------------------------------
__int64 __fastcall CSecurityDescriptor::AddAccessAllowedACEToACL(struct _ACL **a1, void *a2, DWORD a3, DWORD a4)
{
  struct _ACL *v4; // rsi
  signed int v9; // ebx
  struct _ACL *v10; // rdi
  DWORD LengthSid; // eax
  DWORD v12; // ebx
  struct _ACL *v13; // rax
  signed int LastError; // eax
  char pAclInformation[4]; // [rsp+30h] [rbp-58h] BYREF
  int v17; // [rsp+34h] [rbp-54h]

  v4 = 0i64;
  if ( !a2 )
  {
    v9 = -2147024809;
LABEL_12:
    operator delete(v4);
    return (unsigned int)v9;
  }
  v10 = *a1;
  v17 = 0;
  if ( v10 && !GetAclInformation(v10, pAclInformation, 0xCu, AclSizeInformation) )
    goto LABEL_10;
  LengthSid = GetLengthSid(a2);
  v12 = LengthSid + v17;
  v13 = (struct _ACL *)Dns_MemNew<unsigned char>(LengthSid + v17 + 16);
  v4 = v13;
  if ( !v13 )
  {
    v9 = -2147024882;
    goto LABEL_12;
  }
  if ( !InitializeAcl(v13, v12 + 16, 2u) )
    goto LABEL_10;
  v9 = CSecurityDescriptor::CopyACL(v4, v10);
  if ( v9 < 0 )
    goto LABEL_12;
  if ( !AddAccessAllowedAceEx(v4, 2u, a4, a3, a2) )
  {
LABEL_10:
    LastError = GetLastError();
    v9 = (unsigned __int16)LastError | 0x80070000;
    if ( LastError <= 0 )
      v9 = LastError;
    goto LABEL_12;
  }
  *a1 = v4;
  if ( v10 )
    operator delete(v10);
  return 0i64;
}
// 140184CA8: using guessed type void __stdcall operator delete(void *);
// 140115EF4: using guessed type char pAclInformation[4];
