//----- (0000000140119264) ----------------------------------------------------
void __fastcall Mem_Free(_QWORD *a1, __int64 a2, __int64 a3, __int64 a4, int a5)
{
  unsigned int v5; // r14d
  _QWORD *v7; // rsi
  __int64 v8; // rdi
  unsigned int v9; // ebp
  char *v10; // rdi
  __int64 v11; // [rsp+20h] [rbp-38h]
  int v12; // [rsp+20h] [rbp-38h]
  __int64 v13; // [rsp+28h] [rbp-30h]
  int v14; // [rsp+28h] [rbp-30h]

  if ( a1 )
  {
    v5 = a2;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && *((char *)WPP_GLOBAL_Control + 28) < 0
      && *((_BYTE *)WPP_GLOBAL_Control + 25) >= 5u )
    {
      v14 = a3;
      v12 = a2;
      WPP_SF_qddsd(*((_QWORD *)WPP_GLOBAL_Control + 2), a2, a3, a1, v12, v14, a4, a5);
    }
    v7 = a1 - 2;
    if ( *((_BYTE *)a1 - 12) == 0xBB )
    {
      v8 = *((unsigned __int8 *)v7 + 5);
      v9 = *((_WORD *)v7 + 3) & 0xFFFC;
      *((_BYTE *)v7 + 4) = -18;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && *((char *)WPP_GLOBAL_Control + 28) < 0
        && *((_BYTE *)WPP_GLOBAL_Control + 25) >= 5u )
      {
        LODWORD(v13) = v9;
        LODWORD(v11) = v8;
        WPP_SF_qdD(
          *((_QWORD *)WPP_GLOBAL_Control + 2),
          0x16u,
          (__int64)&WPP_772ae84e4aa83dd2ec494ba833f0aab1_Traceguids,
          a1,
          v11,
          v13);
      }
      if ( (unsigned int)v8 > 0x35 )
        Dbg_HardAssert("ds\\dns\\server\\dnscore\\memory.c", 0x55Du, "tag <= MEMTAG_MAX");
      if ( (unsigned int)v8 < 0x36 )
      {
        _InterlockedAdd((volatile signed __int32 *)&MemoryStats + 3 * v8 + 21, 1u);
        _InterlockedExchangeAdd((volatile signed __int32 *)&MemoryStats + 3 * v8 + 22, -v9);
      }
      _InterlockedAdd(&dword_1401B9A90, 1u);
      _InterlockedExchangeAdd(&dword_1401B9A88, -v9);
      if ( v9 <= 0xA0 )
      {
        if ( v9 < v5 )
          Dbg_HardAssert("ds\\dns\\server\\dnscore\\memory.c", 0x58Du, "size >= Length");
        v10 = (char *)&StandardAllocLists + 88 * (*((_WORD *)v7 + 3) & 3);
        if ( v9 != *((_DWORD *)v10 + 3) )
          Dbg_HardAssert("ds\\dns\\server\\dnscore\\memory.c", 0x595u, "size == plist->Size");
        EnterCriticalSection((LPCRITICAL_SECTION)(v10 + 48));
        v7[1] = *(_QWORD *)v10;
        *a1 = 0xFE0B0BEFFE0B0BEFui64;
        ++*((_DWORD *)v10 + 9);
        ++*((_DWORD *)v10 + 5);
        *(_QWORD *)v10 = v7;
        LeaveCriticalSection((LPCRITICAL_SECTION)(v10 + 48));
      }
      else
      {
        if ( (*((_BYTE *)v7 + 6) & 3) != 0 )
          Dbg_HardAssert(
            "ds\\dns\\server\\dnscore\\memory.c",
            0x57Fu,
            "RECOVER_MEM_INDEX( &pfreeblock->MemHead ) == HEAP_INDEX");
        HeapFree(hDnsHeap, 0, v7);
        _InterlockedAdd(&dword_1401B9A90, 1u);
        _InterlockedAdd(&dword_1401B9AA8, 1u);
        _InterlockedExchangeAdd(&dword_1401B9AB0, -v9);
      }
    }
    else
    {
      Dbg_HardAssert("ds\\dns\\server\\dnscore\\memory.c", 0x54Du, "pfreeblock->MemHead.Boundary == BOUNDARY_ACTIVE");
    }
  }
}
// 140119366: conditional instruction was optimized away because edi.4<100u
// 140119339: variable 'v11' is possibly undefined
// 140119339: variable 'v13' is possibly undefined
// 1401B9A88: using guessed type int dword_1401B9A88;
// 1401B9A90: using guessed type int dword_1401B9A90;
// 1401B9AA8: using guessed type int dword_1401B9AA8;
// 1401B9AB0: using guessed type int dword_1401B9AB0;
