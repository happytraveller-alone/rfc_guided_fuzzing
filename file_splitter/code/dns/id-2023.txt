//----- (00000001400F9A40) ----------------------------------------------------
__int64 __fastcall DnsOls_WriteZoneSkdToRegistry(int a1, __int64 a2, __int64 a3, char a4)
{
  __int64 v4; // rbx
  HKEY v6; // r12
  WCHAR *v7; // r13
  CDnsClientSubnetRecordsTrie *v11; // rcx
  char *v12; // rax
  __int64 v13; // rdx
  __int64 v14; // r8
  const char *v15; // r9
  unsigned int v16; // ebx
  HKEY v17; // rax
  CDnsClientSubnetRecordsTrie *v18; // rcx
  unsigned __int16 v19; // dx
  int v20; // r9d
  LSTATUS v21; // eax
  int v22; // eax
  CDnsClientSubnetRecordsTrie *v23; // rcx
  unsigned __int16 v24; // dx
  BYTE *v25; // rax
  const char *v26; // r15
  unsigned int v27; // eax
  CDnsClientSubnetRecordsTrie *v28; // rcx
  unsigned __int16 v29; // dx
  const char *v30; // r15
  int v31; // eax
  CDnsClientSubnetRecordsTrie *v32; // rcx
  unsigned __int16 v33; // dx
  int v34; // eax
  const char *v35; // rax
  BYTE *v36; // rax
  unsigned int v37; // eax
  __int64 *v38; // r8
  DWORD v39; // ebx
  int *v40; // rax
  BYTE *v41; // r12
  int v42; // r9d
  CDnsClientSubnetRecordsTrie *v43; // rcx
  unsigned __int16 v44; // dx
  const char *v45; // r15
  __int64 *v46; // r8
  DWORD v47; // ebx
  int *v48; // rax
  BYTE *v49; // r12
  const char *v50; // r15
  int v51; // eax
  CDnsClientSubnetRecordsTrie *v52; // rcx
  unsigned __int16 v53; // dx
  BYTE *v54; // rax
  unsigned int v55; // eax
  BYTE *v56; // rax
  unsigned int v57; // eax
  __int64 dwOptions; // [rsp+20h] [rbp-50h]
  HKEY v60; // [rsp+50h] [rbp-20h]
  HKEY phkResult; // [rsp+58h] [rbp-18h] BYREF
  HKEY hKey; // [rsp+60h] [rbp-10h] BYREF
  LPCWSTR lpSubKey; // [rsp+A8h] [rbp+38h] BYREF

  v4 = 0i64;
  v6 = 0i64;
  hKey = 0i64;
  phkResult = 0i64;
  v7 = 0i64;
  lpSubKey = 0i64;
  v11 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    if ( a2 )
      v4 = *(_QWORD *)(a2 + 16);
    v12 = Dbg_GuidString((const IID *)(a3 + 8));
    v15 = "Writing";
    if ( (a4 & 1) != 0 )
      v15 = "Deleting";
    WPP_SF_sSsD(*((_QWORD *)WPP_GLOBAL_Control + 7), v13, v14, v15, (__int64)v12, v4);
    v11 = WPP_GLOBAL_Control;
  }
  if ( !a2 || !a3 )
    goto LABEL_16;
  if ( (*(_BYTE *)(a2 + 388) & 1) != 0 )
  {
    if ( v11 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)v11 + 68) & 2) != 0
      && *((_BYTE *)v11 + 65) >= 4u )
    {
      WPP_SF_s(
        *((_QWORD *)v11 + 7),
        0x1Fu,
        (__int64)&WPP_bc8d8ed5e1cd3d5e5de49867d4cbf732_Traceguids,
        *(const char **)(a2 + 16));
    }
LABEL_16:
    v16 = 87;
    goto LABEL_219;
  }
  if ( *(_DWORD *)(a3 + 32) )
  {
    if ( v11 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)v11 + 68) & 2) != 0
      && *((_BYTE *)v11 + 65) >= 4u )
    {
      WPP_SF_qs(
        *((_QWORD *)v11 + 7),
        0x20u,
        (__int64)&WPP_bc8d8ed5e1cd3d5e5de49867d4cbf732_Traceguids,
        a3,
        *(_QWORD *)(a2 + 16));
    }
    v16 = 9611;
    goto LABEL_219;
  }
  v17 = Reg_OpenZone(0i64, *(const WCHAR **)(a2 + 24), 0i64);
  v60 = v17;
  v6 = v17;
  if ( !v17 )
  {
    v16 = 110;
    v18 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
    {
      goto LABEL_219;
    }
    v19 = 33;
    v20 = 110;
    goto LABEL_28;
  }
  v21 = RegCreateKeyExW(v17, L"SigningKeyDescriptors", 0, (LPWSTR)L"DnsRegistryClass", 0, 0x2001Fu, 0i64, &hKey, 0i64);
  v16 = v21;
  if ( v21 )
  {
    v18 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
    {
      goto LABEL_219;
    }
    v19 = 34;
    v20 = v21;
LABEL_28:
    WPP_SF_D(*((_QWORD *)v18 + 7), v19, (__int64)&WPP_bc8d8ed5e1cd3d5e5de49867d4cbf732_Traceguids, v20);
    goto LABEL_219;
  }
  v22 = StringFromGuid((const IID *)(a3 + 8), (void **)&lpSubKey);
  v16 = v22;
  if ( v22 )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_D(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x23u,
        (__int64)&WPP_bc8d8ed5e1cd3d5e5de49867d4cbf732_Traceguids,
        v22);
    }
    v7 = (WCHAR *)lpSubKey;
    goto LABEL_219;
  }
  v7 = (WCHAR *)lpSubKey;
  if ( (a4 & 1) != 0 )
  {
    v16 = RegDeleteKeyW(hKey, lpSubKey);
    if ( !v16 )
      goto LABEL_219;
    v23 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
    {
      goto LABEL_219;
    }
    v24 = 36;
    goto LABEL_46;
  }
  v16 = RegCreateKeyExW(hKey, lpSubKey, 0, (LPWSTR)L"DnsRegistryClass", 0, 0x2001Fu, 0i64, &phkResult, 0i64);
  if ( v16 )
  {
    v23 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
    {
      goto LABEL_219;
    }
    v24 = 37;
LABEL_46:
    WPP_SF_DSs(
      *((_QWORD *)v23 + 7),
      v24,
      (__int64)&WPP_bc8d8ed5e1cd3d5e5de49867d4cbf732_Traceguids,
      v16,
      (__int64)v7,
      *(_QWORD *)(a2 + 16));
    goto LABEL_219;
  }
  v25 = *(BYTE **)(a3 + 24);
  v26 = "KeyStorageProvider";
  if ( v25 )
    v27 = Reg_SetValue(a1, phkResult, 0i64, (const CHAR *)L"KeyStorageProvider", 0xF0000001, v25, 0);
  else
    v27 = Reg_DeleteValue(a1, phkResult, 0i64, "KeyStorageProvider");
  v16 = v27;
  if ( v27 )
  {
    v28 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
    {
      goto LABEL_219;
    }
    v29 = 38;
LABEL_60:
    dwOptions = (__int64)v26;
LABEL_61:
    WPP_SF_Ds(*((_QWORD *)v28 + 7), v29, (__int64)&WPP_bc8d8ed5e1cd3d5e5de49867d4cbf732_Traceguids, v16, dwOptions);
    goto LABEL_219;
  }
  v30 = "IsKsk";
  LODWORD(lpSubKey) = *(_DWORD *)(a3 + 36);
  v31 = Reg_SetValue(a1, phkResult, a2, "IsKsk", 4u, (BYTE *)&lpSubKey, 4u);
  v16 = v31;
  if ( v31 )
  {
    v32 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
    {
      goto LABEL_219;
    }
    v33 = 39;
    goto LABEL_68;
  }
  v30 = "SigningAlgorithm";
  LODWORD(lpSubKey) = *(unsigned __int8 *)(a3 + 40);
  v31 = Reg_SetValue(a1, phkResult, a2, "SigningAlgorithm", 4u, (BYTE *)&lpSubKey, 4u);
  v16 = v31;
  if ( v31 )
  {
    v32 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
    {
      goto LABEL_219;
    }
    v33 = 40;
    goto LABEL_68;
  }
  v30 = "KeyLength";
  LODWORD(lpSubKey) = *(_DWORD *)(a3 + 44);
  v31 = Reg_SetValue(a1, phkResult, a2, "KeyLength", 4u, (BYTE *)&lpSubKey, 4u);
  v16 = v31;
  if ( v31 )
  {
    v32 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
    {
      goto LABEL_219;
    }
    v33 = 41;
    goto LABEL_68;
  }
  v30 = "InitialRolloverOffset";
  LODWORD(lpSubKey) = *(_DWORD *)(a3 + 48);
  v31 = Reg_SetValue(a1, phkResult, a2, "InitialRolloverOffset", 4u, (BYTE *)&lpSubKey, 4u);
  v16 = v31;
  if ( v31 )
  {
    v32 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
    {
      goto LABEL_219;
    }
    v33 = 42;
    goto LABEL_68;
  }
  v30 = "DNSKEYSignatureValidityPeriod";
  LODWORD(lpSubKey) = *(_DWORD *)(a3 + 52);
  v31 = Reg_SetValue(a1, phkResult, a2, "DNSKEYSignatureValidityPeriod", 4u, (BYTE *)&lpSubKey, 4u);
  v16 = v31;
  if ( v31 )
  {
    v32 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
    {
      goto LABEL_219;
    }
    v33 = 43;
    goto LABEL_68;
  }
  v30 = "DSSignatureValidityPeriod";
  LODWORD(lpSubKey) = *(_DWORD *)(a3 + 56);
  v31 = Reg_SetValue(a1, phkResult, a2, "DSSignatureValidityPeriod", 4u, (BYTE *)&lpSubKey, 4u);
  v16 = v31;
  if ( v31 )
  {
    v32 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
    {
      goto LABEL_219;
    }
    v33 = 44;
    goto LABEL_68;
  }
  v30 = "StandardSignatureValidityPeriod";
  LODWORD(lpSubKey) = *(_DWORD *)(a3 + 60);
  v31 = Reg_SetValue(a1, phkResult, a2, "StandardSignatureValidityPeriod", 4u, (BYTE *)&lpSubKey, 4u);
  v16 = v31;
  if ( v31 )
  {
    v32 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
    {
      goto LABEL_219;
    }
    v33 = 45;
    goto LABEL_68;
  }
  v30 = "RolloverType";
  LODWORD(lpSubKey) = *(_DWORD *)(a3 + 64);
  v31 = Reg_SetValue(a1, phkResult, a2, "RolloverType", 4u, (BYTE *)&lpSubKey, 4u);
  v16 = v31;
  if ( v31 )
  {
    v32 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
    {
      goto LABEL_219;
    }
    v33 = 46;
    goto LABEL_68;
  }
  v30 = "RolloverPeriod";
  LODWORD(lpSubKey) = *(_DWORD *)(a3 + 68);
  v31 = Reg_SetValue(a1, phkResult, a2, "RolloverPeriod", 4u, (BYTE *)&lpSubKey, 4u);
  v16 = v31;
  if ( v31 )
  {
    v32 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
    {
      goto LABEL_219;
    }
    v33 = 47;
    goto LABEL_68;
  }
  v30 = "NextRolloverAction";
  LODWORD(lpSubKey) = *(_DWORD *)(a3 + 72);
  v31 = Reg_SetValue(a1, phkResult, a2, "NextRolloverAction", 4u, (BYTE *)&lpSubKey, 4u);
  v16 = v31;
  if ( v31 )
  {
    v32 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
    {
      goto LABEL_219;
    }
    v33 = 48;
    goto LABEL_68;
  }
  v30 = "CurrentState";
  LODWORD(lpSubKey) = *(_DWORD *)(a3 + 92);
  v31 = Reg_SetValue(a1, phkResult, a2, "CurrentState", 4u, (BYTE *)&lpSubKey, 4u);
  v16 = v31;
  if ( v31 )
  {
    v32 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
    {
      goto LABEL_219;
    }
    v33 = 49;
    goto LABEL_68;
  }
  v30 = "CurrentRolloverStatus";
  LODWORD(lpSubKey) = *(_DWORD *)(a3 + 96);
  v31 = Reg_SetValue(a1, phkResult, a2, "CurrentRolloverStatus", 4u, (BYTE *)&lpSubKey, 4u);
  v16 = v31;
  if ( v31 )
  {
    v32 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
    {
      goto LABEL_219;
    }
    v33 = 50;
    goto LABEL_68;
  }
  LODWORD(lpSubKey) = *(_DWORD *)(a3 + 100);
  v34 = Reg_SetValue(a1, phkResult, a2, "CurrentRollState", 4u, (BYTE *)&lpSubKey, 4u);
  v16 = v34;
  if ( !v34 )
  {
    v30 = "ManualTrigger";
    LODWORD(lpSubKey) = *(_DWORD *)(a3 + 104);
    v31 = Reg_SetValue(a1, phkResult, a2, "ManualTrigger", 4u, (BYTE *)&lpSubKey, 4u);
    v16 = v31;
    if ( v31 )
    {
      v32 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
      {
        goto LABEL_219;
      }
      v33 = 52;
      goto LABEL_68;
    }
    v30 = "PrerollEvent";
    LODWORD(lpSubKey) = *(_DWORD *)(a3 + 108);
    v31 = Reg_SetValue(a1, phkResult, a2, "PrerollEvent", 4u, (BYTE *)&lpSubKey, 4u);
    v16 = v31;
    if ( v31 )
    {
      v32 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
      {
        goto LABEL_219;
      }
      v33 = 53;
      goto LABEL_68;
    }
    v16 = Reg_SetValue(a1, phkResult, a2, "LastRolloverTime", 0xBu, (BYTE *)(a3 + 76), 8u);
    if ( v16 )
    {
      v28 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
      {
        goto LABEL_219;
      }
      v29 = 54;
      v35 = "LastRolloverTime";
LABEL_144:
      dwOptions = (__int64)v35;
      goto LABEL_61;
    }
    v16 = Reg_SetValue(a1, phkResult, a2, "NextRolloverTime", 0xBu, (BYTE *)(a3 + 84), 8u);
    if ( v16 )
    {
      v28 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
      {
        goto LABEL_219;
      }
      v29 = 55;
      v35 = "NextRolloverTime";
      goto LABEL_144;
    }
    v30 = "NextKeyGenerationTime";
    v31 = Reg_SetValue(a1, phkResult, a2, "NextKeyGenerationTime", 0xBu, (BYTE *)(a3 + 116), 8u);
    v16 = v31;
    if ( v31 )
    {
      v32 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
      {
        goto LABEL_219;
      }
      v33 = 56;
LABEL_68:
      WPP_SF_Ds(*((_QWORD *)v32 + 7), v33, (__int64)&WPP_bc8d8ed5e1cd3d5e5de49867d4cbf732_Traceguids, v31, (__int64)v30);
      goto LABEL_219;
    }
    v36 = *(BYTE **)(a3 + 144);
    v26 = "ActiveKey";
    if ( v36 )
      v37 = Reg_SetValue(a1, phkResult, 0i64, (const CHAR *)L"ActiveKey", 0xF0000001, v36, 0);
    else
      v37 = Reg_DeleteValue(a1, phkResult, 0i64, "ActiveKey");
    v16 = v37;
    if ( v37 )
    {
      v28 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
      {
        goto LABEL_219;
      }
      v29 = 57;
      goto LABEL_60;
    }
    v38 = *(__int64 **)(a3 + 128);
    LODWORD(lpSubKey) = -1;
    v39 = (unsigned int)DnsOls_WriteRRListToBuffer(0i64, 0i64, v38, (int *)&lpSubKey);
    v40 = (int *)Mem_AllocZero(v39, 4i64, "ds\\dns\\server\\server\\olsparams.cpp", 2008);
    v41 = (BYTE *)v40;
    if ( !v40 )
    {
      v42 = 14;
      v16 = 14;
      v43 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
      {
        goto LABEL_169;
      }
      v44 = 58;
      v45 = "SavedRevokedKeyset";
      goto LABEL_168;
    }
    DnsOls_WriteRRListToBuffer(v40, (unsigned __int64)v40 + v39, *(__int64 **)(a3 + 128), (int *)&lpSubKey);
    v45 = "SavedRevokedKeyset";
    v16 = Reg_SetValue(a1, phkResult, 0i64, "SavedRevokedKeyset", 3u, v41, v39);
    Mem_Free(v41, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\olsparams.cpp", 2038);
    if ( v16 )
    {
      v43 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
      {
        goto LABEL_169;
      }
      v44 = 59;
      goto LABEL_175;
    }
    v46 = *(__int64 **)(a3 + 136);
    LODWORD(lpSubKey) = -1;
    v47 = (unsigned int)DnsOls_WriteRRListToBuffer(0i64, 0i64, v46, (int *)&lpSubKey);
    v48 = (int *)Mem_AllocZero(v47, 4i64, "ds\\dns\\server\\server\\olsparams.cpp", 2061);
    v49 = (BYTE *)v48;
    if ( !v48 )
    {
      v42 = 14;
      v16 = 14;
      v43 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
      {
        goto LABEL_169;
      }
      v44 = 60;
      v45 = "SavedFinalKeyset";
      goto LABEL_168;
    }
    DnsOls_WriteRRListToBuffer(v48, (unsigned __int64)v48 + v47, *(__int64 **)(a3 + 136), (int *)&lpSubKey);
    v45 = "SavedFinalKeyset";
    v16 = Reg_SetValue(a1, phkResult, 0i64, "SavedFinalKeyset", 3u, v49, v47);
    Mem_Free(v49, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\olsparams.cpp", 2086);
    if ( v16 )
    {
      v43 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
      {
        goto LABEL_169;
      }
      v44 = 61;
      goto LABEL_175;
    }
    v50 = "ActiveKeySignScope";
    LODWORD(lpSubKey) = *(_DWORD *)(a3 + 160);
    v51 = Reg_SetValue(a1, phkResult, a2, "ActiveKeySignScope", 4u, (BYTE *)&lpSubKey, 4u);
    v16 = v51;
    if ( v51 )
    {
      v52 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
      {
        goto LABEL_169;
      }
      v53 = 62;
      goto LABEL_191;
    }
    v54 = *(BYTE **)(a3 + 168);
    v45 = "StandbyKey";
    if ( v54 )
      v55 = Reg_SetValue(a1, phkResult, 0i64, (const CHAR *)L"StandbyKey", 0xF0000001, v54, 0);
    else
      v55 = Reg_DeleteValue(a1, phkResult, 0i64, "StandbyKey");
    v16 = v55;
    if ( v55 )
    {
      v43 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
      {
        goto LABEL_169;
      }
      v44 = 63;
      goto LABEL_175;
    }
    v50 = "StandbyKeySignScope";
    LODWORD(lpSubKey) = *(_DWORD *)(a3 + 184);
    v51 = Reg_SetValue(a1, phkResult, a2, "StandbyKeySignScope", 4u, (BYTE *)&lpSubKey, 4u);
    v16 = v51;
    if ( v51 )
    {
      v52 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
      {
        goto LABEL_169;
      }
      v53 = 64;
    }
    else
    {
      v56 = *(BYTE **)(a3 + 192);
      v45 = "NextKey";
      if ( v56 )
        v57 = Reg_SetValue(a1, phkResult, 0i64, (const CHAR *)L"NextKey", 0xF0000001, v56, 0);
      else
        v57 = Reg_DeleteValue(a1, phkResult, 0i64, "NextKey");
      v16 = v57;
      if ( v57 )
      {
        v43 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
          || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
        {
          goto LABEL_169;
        }
        v44 = 65;
LABEL_175:
        v42 = v16;
LABEL_168:
        WPP_SF_Ds(
          *((_QWORD *)v43 + 7),
          v44,
          (__int64)&WPP_bc8d8ed5e1cd3d5e5de49867d4cbf732_Traceguids,
          v42,
          (__int64)v45);
        goto LABEL_169;
      }
      v50 = "NextKeySignScope";
      LODWORD(lpSubKey) = *(_DWORD *)(a3 + 208);
      v51 = Reg_SetValue(a1, phkResult, a2, "NextKeySignScope", 4u, (BYTE *)&lpSubKey, 4u);
      v16 = v51;
      if ( !v51 )
      {
        v6 = v60;
        goto LABEL_219;
      }
      v52 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
      {
LABEL_169:
        v6 = v60;
        goto LABEL_219;
      }
      v53 = 66;
    }
LABEL_191:
    WPP_SF_Ds(*((_QWORD *)v52 + 7), v53, (__int64)&WPP_bc8d8ed5e1cd3d5e5de49867d4cbf732_Traceguids, v51, (__int64)v50);
    goto LABEL_169;
  }
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_Ds(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x33u,
      (__int64)&WPP_bc8d8ed5e1cd3d5e5de49867d4cbf732_Traceguids,
      v34,
      (__int64)"CurrentRollState");
  }
LABEL_219:
  Mem_Free(v7, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\olsparams.cpp", 2178);
  if ( phkResult )
    RegCloseKey(phkResult);
  if ( hKey )
    RegCloseKey(hKey);
  if ( v6 )
    RegCloseKey(v6);
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_D(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x43u, (__int64)&WPP_bc8d8ed5e1cd3d5e5de49867d4cbf732_Traceguids, v16);
  }
  return v16;
}
// 1400F9ADE: variable 'v13' is possibly undefined
// 1400F9ADE: variable 'v14' is possibly undefined
// 140192F80: using guessed type wchar_t aKeystorageprov_0[19];
// 140193150: using guessed type wchar_t aActivekey[10];
// 140193168: using guessed type wchar_t aStandbykey[11];
// 140193180: using guessed type wchar_t aNextkey_0[8];
