//----- (000000014000EEE4) ----------------------------------------------------
__int64 __fastcall DnsBL_TestNodeAgainstBlockList(__int64 a1)
{
  const char **v1; // rdi
  unsigned int v3; // r14d
  __int64 v4; // rax
  unsigned int v5; // ecx
  const char *v6; // rsi
  __int64 v7; // rcx
  void *v8; // rax
  char *v9; // rax
  __int64 v10; // rdx
  char *v11; // rbx
  const char **v12; // rdi
  __int128 v14; // [rsp+40h] [rbp-38h] BYREF
  EVENT_DESCRIPTOR v15; // [rsp+50h] [rbp-28h] BYREF
  __int16 v16; // [rsp+80h] [rbp+8h] BYREF

  v1 = (const char **)qword_1401B99D0;
  v3 = 0;
  if ( a1 )
    v4 = *(_QWORD *)(a1 + 56);
  else
    v4 = 0i64;
  if ( a1 )
  {
    if ( dword_1401B99C8 )
    {
      if ( qword_1401B99D0 )
      {
        if ( v4 )
        {
          v5 = *(_DWORD *)(v4 + 372);
          if ( v5 - 1 <= 1 || v5 >= 5 )
          {
            while ( *v1 )
            {
              v6 = *v1;
              if ( !_strnicmp(*v1, (const char *)(a1 + 102), *(unsigned __int8 *)(a1 + 101)) )
              {
                v7 = -1i64;
                do
                  ++v7;
                while ( v6[v7] );
                if ( v7 == *(unsigned __int8 *)(a1 + 101) )
                {
                  v3 = 1;
                  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
                    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
                  {
                    v8 = FormatLabelA(*(unsigned __int8 *)(a1 + 101), (const void *)(a1 + 102));
                    WPP_SF_qs(
                      *((_QWORD *)WPP_GLOBAL_Control + 7),
                      0xFu,
                      (__int64)&WPP_6d98d6afaca73fdcffe2f9d2c94dcc9e_Traceguids,
                      a1,
                      v8);
                  }
                  v16 = 771;
                  v14 = 0i64;
                  if ( g_fBlockListEventLogged <= 0 && _InterlockedIncrement(&g_fBlockListEventLogged) == 1 )
                  {
                    *(_QWORD *)&v14 = Log_FormatNodeName((__int64 *)a1);
                    if ( (_QWORD)v14 )
                    {
                      v9 = (char *)Mem_AllocZero(0x3E8ui64, 0i64, "ds\\dns\\server\\server\\blocklist.c", 103);
                      v11 = v9;
                      if ( v9 )
                      {
                        v12 = (const char **)qword_1401B99D0;
                        *((_QWORD *)&v14 + 1) = v9;
                        while ( *v12
                             && (!*v11 || (int)StringCchCatA(v11, 1000i64, "\n") >= 0)
                             && (int)StringCchCatA(v11, 1000i64, *v12) >= 0 )
                          ++v12;
                        if ( *v11 )
                        {
                          v15 = DNS_EVENT_GLOBAL_QUERY_BLACKLIST;
                          Eventlog_LogEvent(
                            (__int64)&v15,
                            v10,
                            2u,
                            (unsigned __int16 **)&v14,
                            (unsigned __int8 *)&v16,
                            0,
                            0,
                            0i64);
                        }
                      }
                    }
                  }
                  Mem_Free((_QWORD *)v14, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\blocklist.c", 155);
                  Mem_Free(*((_QWORD **)&v14 + 1), 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\blocklist.c", 156);
                  return v3;
                }
              }
              ++v1;
            }
          }
        }
      }
    }
  }
  return v3;
}
// 14000F0E7: variable 'v10' is possibly undefined
// 1401B8C28: using guessed type int g_fBlockListEventLogged;
// 1401B99C8: using guessed type int dword_1401B99C8;
// 1401B99D0: using guessed type __int64 qword_1401B99D0;
