//----- (0000000140141454) ----------------------------------------------------
CDNSPolicyCriteriaFqdn *__fastcall CDNSPolicyCriteriaFqdn::CDNSPolicyCriteriaFqdn(
        CDNSPolicyCriteriaFqdn *this,
        struct CDnsPolicy *a2)
{
  char *v4; // rdi
  _QWORD *v5; // rax
  char *v6; // rdi
  _QWORD *v7; // rax
  char pExceptionObject[24]; // [rsp+28h] [rbp-50h] BYREF
  char v10[56]; // [rsp+40h] [rbp-38h] BYREF

  *((_WORD *)this + 4) = 0;
  *((_QWORD *)this + 6) = 7i64;
  *((_QWORD *)this + 5) = 0i64;
  *((_WORD *)this + 12) = 0;
  *(_QWORD *)this = &CDNSPolicyCriteriaFqdn::`vftable';
  v4 = (char *)this + 64;
  *((_QWORD *)this + 9) = 0i64;
  v5 = operator new(0x38ui64);
  if ( !v5 )
  {
    std::bad_alloc::bad_alloc((std::bad_alloc *)v10, 0i64);
    CxxThrowException_0(v10, (_ThrowInfo *)&TI2_AVbad_alloc_std__);
  }
  *(_QWORD *)v4 = v5;
  *v5 = v5;
  *(_QWORD *)(*(_QWORD *)v4 + 8i64) = *(_QWORD *)v4;
  v6 = (char *)this + 88;
  *((_QWORD *)this + 12) = 0i64;
  v7 = operator new(0x38ui64);
  if ( !v7 )
  {
    std::bad_alloc::bad_alloc((std::bad_alloc *)pExceptionObject, 0i64);
    CxxThrowException_0(pExceptionObject, (_ThrowInfo *)&TI2_AVbad_alloc_std__);
  }
  *(_QWORD *)v6 = v7;
  *v7 = v7;
  *(_QWORD *)(*(_QWORD *)v6 + 8i64) = *(_QWORD *)v6;
  *((_QWORD *)this + 14) = 0i64;
  *((_QWORD *)this + 2) = a2;
  return this;
}
// 140172008: using guessed type void *CDNSPolicyCriteriaFqdn::`vftable';
