//----- (000000014012948C) ----------------------------------------------------
void __fastcall DnsSign::CCertificateStore::OpenStore(
        void **this,
        const struct DnsSign::CertificateStoreSpec *a2,
        int a3)
{
  void *v6; // rcx
  HCERTSTORE v7; // rax
  int LastError; // edi
  const char *v9; // r9
  char v10[56]; // [rsp+38h] [rbp-90h] BYREF
  char pExceptionObject[56]; // [rsp+70h] [rbp-58h] BYREF

  v6 = *this;
  if ( v6 )
    CertCloseStore(v6, 0);
  v7 = CertOpenStore((LPCSTR)0xA, 0, 0i64, a3 | (*((_BYTE *)a2 + 8) != 0 ? 0x20000 : 0x10000), *(const void **)a2);
  *this = v7;
  if ( !v7 )
  {
    LastError = GetLastError();
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 7) & 0x100000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 25) >= 4u )
    {
      v9 = "user";
      if ( *((_BYTE *)a2 + 8) )
        v9 = "machine";
      WPP_SF_sSD(
        *((_QWORD *)WPP_GLOBAL_Control + 2),
        0x18u,
        (__int64)&WPP_53898a8021d033fe120236609d33d737_Traceguids,
        v9,
        *(_QWORD *)a2);
    }
    DnsSign::CRunTimeException::CRunTimeException((DnsSign::CRunTimeException *)v10, LastError);
    DnsSign::CException::AppendErrorMessageByID((DnsSign::CException *)v10, 0xD6D84u, *(_QWORD *)a2);
    DnsSign::CRunTimeException::CRunTimeException(
      (DnsSign::CRunTimeException *)pExceptionObject,
      (const struct DnsSign::CRunTimeException *)v10);
    CxxThrowException_0(pExceptionObject, (_ThrowInfo *)&TI2_AVCRunTimeException_DnsSign__);
  }
}
