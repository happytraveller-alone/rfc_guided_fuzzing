//----- (0000000140135330) ----------------------------------------------------
__int64 __fastcall CDnsPolicyManager::RemovePolicy(CDnsPolicyManager *this, const void **a2, struct _zone_info *a3)
{
  char v5; // bl
  const wchar_t *v6; // rsi
  __int64 v7; // rax
  unsigned int PolicyCriteriaInOrder; // esi
  CDnsPolicyManager *v9; // rcx
  __int64 PolicyLock; // rax
  __int64 v11; // r12
  __int64 v12; // rcx
  unsigned __int16 i; // r15
  CDnsClientSubnetRecordsTrie *v14; // rax
  __int64 *v15; // rsi
  type_info *v16; // rax
  const char *v17; // rax
  __int64 *v18; // rax
  __int64 v19; // rax
  unsigned int v21; // [rsp+9Ch] [rbp-E4h] BYREF
  unsigned int v22; // [rsp+A0h] [rbp-E0h] BYREF
  __int64 v23; // [rsp+A8h] [rbp-D8h] BYREF
  __int64 *v24; // [rsp+B0h] [rbp-D0h]
  __int64 PolicySearchCriteriaRoots; // [rsp+B8h] [rbp-C8h]
  CDnsPolicyManager *v26; // [rsp+C0h] [rbp-C0h]
  struct _zone_info *v27; // [rsp+C8h] [rbp-B8h]
  const void **v28; // [rsp+D0h] [rbp-B0h]
  __int128 v29; // [rsp+E0h] [rbp-A0h] BYREF
  __int64 v30; // [rsp+F0h] [rbp-90h]
  __int64 v31; // [rsp+100h] [rbp-80h]
  void *v32[3]; // [rsp+108h] [rbp-78h] BYREF
  unsigned __int64 v33; // [rsp+120h] [rbp-60h]

  v31 = -2i64;
  v26 = this;
  v28 = a2;
  v27 = a3;
  v5 = 0;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
  {
    if ( a3 )
      v6 = (const wchar_t *)*((_QWORD *)a3 + 3);
    else
      v6 = L"Not Applicable";
    v7 = CDnsPolicy::Name(a2, (__int64)v32);
    v5 = 1;
    if ( *(_QWORD *)(v7 + 24) >= 8ui64 )
      v7 = *(_QWORD *)v7;
    WPP_SF_SdS(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x54u,
      (__int64)&WPP_bbbcc621566c3408fe84d6a85874d543_Traceguids,
      (const unsigned __int16 *)v7,
      *((_DWORD *)a2 + 21),
      (__int64)v6);
  }
  if ( (v5 & 1) != 0 )
  {
    v5 &= ~1u;
    if ( v33 >= 8 )
      operator delete(v32[0]);
  }
  PolicyCriteriaInOrder = 0;
  v23 = 0i64;
  v29 = 0i64;
  v30 = 0i64;
  std::vector<CDNSPolicyCriteria *>::_Construct_n(&v29, (__int64)a2, &v23);
  PolicyLock = CDnsPolicyManager::GetPolicyLock(v9, (struct CDnsPolicy *)a2, a3);
  v11 = PolicyLock;
  v23 = PolicyLock;
  if ( !PolicyLock )
    goto LABEL_44;
  v21 = -1;
  if ( (unsigned int)acquireUpdate(PolicyLock, 0x2710u, &v21, 1) == -1 )
  {
    PolicyCriteriaInOrder = 9980;
    goto LABEL_44;
  }
  v22 = 1;
  PolicySearchCriteriaRoots = CDnsPolicyManager::GetPolicySearchCriteriaRoots(v12, (__int64)a2, (__int64)a3);
  if ( !PolicySearchCriteriaRoots )
  {
    PolicyCriteriaInOrder = 9972;
    goto LABEL_43;
  }
  PolicyCriteriaInOrder = CDnsPolicyUtil::GetPolicyCriteriaInOrder((__int64)a2, &v29);
  if ( PolicyCriteriaInOrder )
  {
LABEL_43:
    v22 = -1;
    releaseUpdate(v11, &v22, 1);
    goto LABEL_44;
  }
  for ( i = 0; ; ++i )
  {
    if ( i >= 7u )
    {
LABEL_32:
      v14 = WPP_GLOBAL_Control;
      goto LABEL_33;
    }
    if ( *(_QWORD *)(v29 + 8i64 * i) )
      break;
LABEL_31:
    ;
  }
  v24 = *(__int64 **)(PolicySearchCriteriaRoots + 8i64 * i);
  CDnsPolicyManager::RemoveCriteriaFromPolicyTree((__int64)v26, v24, &v29, i, (__int64)a2, v11);
  if ( !(*(unsigned int (__fastcall **)(__int64 *))(*v24 + 16))(v24) )
  {
LABEL_30:
    if ( !*((_DWORD *)a2 + 20) )
      goto LABEL_32;
    goto LABEL_31;
  }
  v21 = -1;
  if ( (unsigned int)acquireWrite(v11, 0x2710u, &v21) != -1 )
  {
    *(_QWORD *)(PolicySearchCriteriaRoots + 8i64 * i) = 0i64;
    v18 = v24;
    *v24 = (__int64)&CDnsPolicy_CriteriaTree::`vftable';
    operator delete(v18);
    Lock_ReleaseWrite(v11);
    goto LABEL_30;
  }
  v14 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
  {
    v15 = v24;
    v16 = (type_info *)__RTtypeid(v24);
    v17 = type_info::name(v16);
    WPP_SF_qs(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x56u,
      (__int64)&WPP_bbbcc621566c3408fe84d6a85874d543_Traceguids,
      v15,
      v17);
    v14 = WPP_GLOBAL_Control;
  }
  PolicyCriteriaInOrder = 9980;
LABEL_33:
  if ( v14 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)v14 + 17) & 0x400000) != 0
    && *((_BYTE *)v14 + 65) >= 4u )
  {
    v19 = CDnsPolicy::Name(a2, (__int64)v32);
    v5 |= 4u;
    if ( *(_QWORD *)(v19 + 24) >= 8ui64 )
      v19 = *(_QWORD *)v19;
    WPP_SF_S(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x57u,
      (__int64)&WPP_bbbcc621566c3408fe84d6a85874d543_Traceguids,
      (const unsigned __int16 *)v19);
  }
  if ( (v5 & 4) != 0 && v33 >= 8 )
    operator delete(v32[0]);
  if ( v22 )
    goto LABEL_43;
LABEL_44:
  if ( (_QWORD)v29 )
    operator delete((void *)v29);
  return PolicyCriteriaInOrder;
}
// 140135330: could not find valid save-restore pair for rbp
// 140135458: variable 'a2' is possibly undefined
// 140135464: variable 'v9' is possibly undefined
// 1401354AF: variable 'v12' is possibly undefined
// 1401719A0: using guessed type void *CDnsPolicy_CriteriaTree::`vftable';
// 140184CA8: using guessed type void __stdcall operator delete(void *);
// 140184DA8: using guessed type const char *type_info::name(type_info *__hidden this);
// 140184DB8: using guessed type __int64 __fastcall __RTtypeid(_QWORD);
// 140185140: using guessed type __int64 (__fastcall *_guard_dispatch_icall_fptr)(_QWORD, _QWORD);
// 140194918: using guessed type wchar_t aNotApplicable[15];
