//----- (0000000140044034) ----------------------------------------------------
__int64 __fastcall Ds_LoadZoneScopeProperties(__int64 a1, LDAPMessage *a2)
{
  PWCHAR *valuesW; // rbx
  LDAPMessage *entry; // r15
  struct berval **v5; // rsi
  BOOL v6; // r12d
  ULONG v7; // ebp
  int v8; // r13d
  const IID *v9; // r14
  DWORD TickCount; // ebx
  PWCHAR v11; // rax
  CDnsClientSubnetRecordsTrie **v13; // rdx
  PWCHAR v14; // rax
  PWCHAR v15; // rax
  __int64 v16; // rdx
  WCHAR v17; // cx
  int v18; // eax
  struct berval **values_lenW; // rax
  struct berval *v20; // rax
  IID *v21; // rax
  __int64 v22; // rcx
  char *v23; // rax
  char *v24; // rax
  __int64 v25; // rcx
  __int64 v26; // rax
  __int64 v27; // rax
  bool v28; // zf
  char v29; // al
  void *ServerControls[2]; // [rsp+60h] [rbp-38h] BYREF
  PLDAPMessage res; // [rsp+A8h] [rbp+10h] BYREF

  valuesW = 0i64;
  ServerControls[0] = &SecurityDescriptorControl_DGO;
  entry = a2;
  res = 0i64;
  ServerControls[1] = 0i64;
  v5 = 0i64;
  v6 = 1;
  v7 = 0;
  v8 = 0;
  v9 = 0i64;
  if ( a2 )
    goto LABEL_72;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_S(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x168u,
      (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
      *(const unsigned __int16 **)(a1 + 840));
  }
  TickCount = GetTickCount();
  v7 = ldap_search_ext_sW(
         pServerLdap,
         *(const PWSTR *)(a1 + 840),
         0,
         g_szDnsZoneScopeFilter,
         &DsTypeAttributeTable,
         0,
         (PLDAPControlW *)ServerControls,
         0i64,
         &g_LdapTimeout,
         0,
         &res);
  _InterlockedExchangeAdd(&dword_1401C7D48, GetTickCount() - TickCount);
  valuesW = 0i64;
  if ( v7 )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      v11 = ldap_err2stringW(v7);
      WPP_SF_DS(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x169u,
        (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
        v7,
        (__int64)v11);
    }
    if ( res )
      ldap_msgfree(res);
    return Ds_ErrorHandler(v7, *(_QWORD *)(a1 + 840), pServerLdap, 0);
  }
  v8 = 1;
  entry = ldap_first_entry(pServerLdap, res);
  if ( entry )
  {
LABEL_72:
    if ( *(_WORD *)(a1 + 894) )
    {
      valuesW = ldap_get_valuesW(pServerLdap, entry, off_1401B6C60);
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        if ( valuesW )
          v14 = *valuesW;
        else
          v14 = 0i64;
        WPP_SF_SS(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x16Bu,
          (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
          (const unsigned __int16 *)(a1 + 894),
          (__int64)v14);
      }
      if ( valuesW )
      {
        v15 = *valuesW;
        if ( *valuesW )
        {
          v16 = a1 + 894 - (_QWORD)v15;
          while ( 1 )
          {
            v17 = *v15;
            if ( *v15 != *(PWCHAR)((char *)v15 + v16) )
              break;
            ++v15;
            if ( !v17 )
            {
              v18 = 0;
              goto LABEL_35;
            }
          }
          v18 = v17 < *(PWCHAR)((char *)v15 + v16) ? -1 : 1;
LABEL_35:
          v6 = v18 != 0;
        }
        ldap_value_freeW(valuesW);
        valuesW = 0i64;
        if ( !v6 )
        {
          v7 = 0;
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            WPP_SF_Ss(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x16Cu,
              (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
              (const unsigned __int16 *)(a1 + 894),
              *(_QWORD *)(a1 + 16));
          }
          goto LABEL_67;
        }
      }
    }
    values_lenW = ldap_get_values_lenW(pServerLdap, entry, (const PWSTR)L"objectGUID");
    v5 = values_lenW;
    if ( !values_lenW )
      goto LABEL_52;
    v20 = *values_lenW;
    if ( v20 )
    {
      if ( v20->bv_len == 16 )
      {
        v21 = (IID *)Mem_Alloc(0x10u, 12i64, "ds\\dns\\server\\server\\ds.c", 14248);
        v9 = v21;
        if ( v21 )
          memcpy_0(v21, (*v5)->bv_val, (*v5)->bv_len);
      }
    }
    ldap_value_free_len(v5);
    v5 = (struct berval **)valuesW;
    if ( v9 )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        v23 = Dbg_GuidString(v9);
        WPP_SF_Ss(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x16Du,
          (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
          (const unsigned __int16 *)v23,
          *(_QWORD *)(a1 + 16));
      }
      Timeout_FreeAndReplaceZoneDataEx(
        v22,
        (__int64 *)(a1 + 856),
        (__int64)v9,
        0i64,
        (__int64)"ds\\dns\\server\\server\\ds.c",
        14283);
    }
    else
    {
LABEL_52:
      v13 = &WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        v24 = Dbg_GuidString(*(const IID **)(a1 + 856));
        WPP_SF_Ss(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x16Eu,
          (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
          (const unsigned __int16 *)v24,
          *(_QWORD *)(a1 + 16));
      }
    }
    v25 = *(_QWORD *)(a1 + 328);
    v26 = a1;
    if ( v25 )
      v26 = *(_QWORD *)(a1 + 328);
    if ( *(_DWORD *)(v26 + 372) != 1 )
      goto LABEL_62;
    v27 = a1;
    if ( v25 )
      v27 = *(_QWORD *)(a1 + 328);
    v28 = (*(_BYTE *)(v27 + 1040) & 8) == 0;
    v29 = 1;
    if ( v28 )
LABEL_62:
      v29 = (char)valuesW;
    *(_DWORD *)(a1 + 1040) &= ~8u;
    *(_DWORD *)(a1 + 1040) |= 8 * (v29 & 1);
  }
  else
  {
    v13 = &WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x16Au, (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids);
    }
    v7 = 32;
  }
  saveZoneObjectUsn(a1, (__int64)v13, entry);
  if ( v5 )
    ldap_value_free_len(v5);
LABEL_67:
  if ( v8 )
    ldap_msgfree(res);
  return v7;
}
// 1400444C0: conditional instruction was optimized away because r12d.4==1
// 140044419: variable 'v22' is possibly undefined
// 1400444C8: variable 'v13' is possibly undefined
// 1401C7D48: using guessed type int dword_1401C7D48;
// 1401EC440: using guessed type __int64 SecurityDescriptorControl_DGO;
// 140044034: using guessed type PLDAPControlW var_38[2];
