//----- (000000014003F1E4) ----------------------------------------------------
__int64 __fastcall Ds_AddZone(PLDAP a1, __int64 a2, char a3)
{
  ULONG v3; // ebx
  int v4; // r13d
  const unsigned __int16 *v8; // r9
  __int64 v9; // r15
  __int64 v10; // rdx
  const wchar_t *v11; // rcx
  const CHAR *v12; // r8
  __int64 v13; // r14
  int LastError; // eax
  __int64 v15; // rax
  signed int v16; // ebx
  wchar_t *v17; // rax
  WCHAR *v18; // r14
  ULONG v19; // eax
  CDnsClientSubnetRecordsTrie *v20; // rcx
  unsigned __int16 v21; // dx
  const unsigned __int16 *v22; // r9
  const unsigned __int16 *v23; // rax
  WCHAR *v24; // rdx
  ULONG v25; // eax
  ULONG v26; // r14d
  int v27; // r9d
  int v28; // r9d
  CDnsClientSubnetRecordsTrie *v29; // rcx
  void *v30; // rdx
  __int64 v31; // r8
  int v32; // r9d
  int lpWideCharStr; // [rsp+20h] [rbp-E0h]
  int cchWideChar; // [rsp+28h] [rbp-D8h]
  int cchWideChara; // [rsp+28h] [rbp-D8h]
  int v37; // [rsp+40h] [rbp-C0h] BYREF
  const WCHAR *v38; // [rsp+48h] [rbp-B8h]
  const wchar_t **v39; // [rsp+50h] [rbp-B0h]
  const wchar_t *v40; // [rsp+78h] [rbp-88h] BYREF
  __int64 v41; // [rsp+80h] [rbp-80h]
  int v42; // [rsp+90h] [rbp-70h] BYREF
  const wchar_t *v43; // [rsp+98h] [rbp-68h]
  const wchar_t **v44; // [rsp+A0h] [rbp-60h]
  const wchar_t *v45; // [rsp+C8h] [rbp-38h] BYREF
  __int64 v46; // [rsp+D0h] [rbp-30h]
  PLDAPControlW ServerControls[2]; // [rsp+E0h] [rbp-20h] BYREF
  int v48; // [rsp+F0h] [rbp-10h] BYREF
  void *v49; // [rsp+F8h] [rbp-8h]
  __int64 v50[2]; // [rsp+100h] [rbp+0h] BYREF
  LDAPModW *mods[2]; // [rsp+110h] [rbp+10h] BYREF
  int v52; // [rsp+120h] [rbp+20h] BYREF
  PWSTR v53; // [rsp+128h] [rbp+28h]
  __int64 *v54; // [rsp+130h] [rbp+30h]
  LDAPModW *attrs[2]; // [rsp+138h] [rbp+38h] BYREF
  __int64 v56; // [rsp+148h] [rbp+48h]
  WCHAR WideCharStr; // [rsp+150h] [rbp+50h] BYREF
  char v58[510]; // [rsp+152h] [rbp+52h] BYREF

  v3 = 0;
  v56 = 0i64;
  *(_OWORD *)attrs = 0i64;
  v4 = 0;
  ServerControls[0] = (PLDAPControlW)Ds_LazyCommitControlPtr();
  ServerControls[1] = 0i64;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    if ( !a2 || (v8 = *(const unsigned __int16 **)(a2 + 192)) == 0i64 )
      v8 = L"Default";
    WPP_SF_SS(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0xDDu,
      (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
      v8,
      *(_QWORD *)(a2 + 24));
  }
  v9 = g_pLegacyDp;
  if ( !a1 )
    a1 = pServerLdap;
  if ( *(_QWORD *)(a2 + 848) )
    v9 = *(_QWORD *)(a2 + 848);
  DS_CreateZoneDsName(a2);
  if ( !*(_QWORD *)(a2 + 840) )
    return 14;
  v10 = *(_QWORD *)(a2 + 848);
  if ( v10 && (*(_BYTE *)(v10 + 100) & 2) == 0 )
    Dp_LoadOrCreateMicrosoftDnsObject(a1, v10, 1);
  v11 = L"cn";
  if ( !*(_QWORD *)(a2 + 192) )
  {
LABEL_39:
    v41 = 0i64;
    attrs[0] = (LDAPModW *)&v37;
    attrs[1] = (LDAPModW *)&v42;
    v23 = *(const unsigned __int16 **)(a2 + 192);
    v37 = 0;
    v38 = L"objectClass";
    v46 = 0i64;
    v42 = 0;
    v39 = &v40;
    if ( v23 )
    {
      v40 = L"dnsZoneScope";
      v44 = &v45;
      v11 = L"dc";
    }
    else
    {
      v40 = L"dnsZone";
      v44 = &v45;
      v23 = L"Zone";
    }
    v24 = *(WCHAR **)(a2 + 840);
    v43 = v11;
    v45 = v23;
    v25 = Dns_LdapAddExt(a1, v24, attrs, 0i64, 0i64, cchWideChar, 0);
    v26 = v25;
    if ( v25 == 68 )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0xE1u, (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids);
      }
    }
    else
    {
      if ( v25 )
      {
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          WPP_SF_sd(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0xE2u,
            (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
            *(const char **)(a2 + 16));
        }
        v3 = v26;
        goto LABEL_116;
      }
      v4 = 1;
    }
    v3 = Ds_WriteZoneProperties(a1, a2);
    if ( !v3 )
    {
      v4 = 0;
      if ( *(_QWORD *)(a2 + 360) || *(_DWORD *)(a2 + 368) )
        goto LABEL_88;
      if ( (a3 & 2) != 0 )
      {
        if ( g_pReadOnlyDomainControllersSid )
        {
          v27 = Ds_AddPrincipalAccess(
                  a1,
                  *(PWSTR *)(a2 + 840),
                  g_pReadOnlyDomainControllersSid,
                  0i64,
                  0x20034u,
                  0xAu,
                  1,
                  0);
          if ( v27 )
          {
            if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
              && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
            {
              WPP_SF_DS(
                *((_QWORD *)WPP_GLOBAL_Control + 7),
                0xE4u,
                (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
                v27,
                *(_QWORD *)(a2 + 840));
            }
          }
        }
      }
      if ( (a3 & 4) != 0 )
      {
        if ( g_pEnterpriseReadOnlyDomainControllersSid )
        {
          v28 = Ds_AddPrincipalAccess(
                  a1,
                  *(PWSTR *)(a2 + 840),
                  g_pEnterpriseReadOnlyDomainControllersSid,
                  0i64,
                  0x20034u,
                  0xAu,
                  1,
                  0);
          if ( v28 )
          {
            if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
              && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
            {
              WPP_SF_DS(
                *((_QWORD *)WPP_GLOBAL_Control + 7),
                0xE5u,
                (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
                v28,
                *(_QWORD *)(a2 + 840));
            }
          }
        }
      }
      v3 = Ds_AddPrincipalAccess(a1, *(PWSTR *)(a2 + 840), g_pEnterpriseDomainControllersSid, 0i64, 0xF017Fu, 2u, 1, 0);
      if ( v3 )
      {
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          WPP_SF_DS(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0xE6u,
            (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
            v3,
            *(_QWORD *)(a2 + 840));
        }
        v3 = 0;
      }
      if ( _stricmp(*(const char **)(a2 + 16), "TrustAnchors") )
        goto LABEL_88;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_S(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0xE7u,
          (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
          *(const unsigned __int16 **)(a2 + 840));
      }
      v3 = Ds_AddPrincipalAccess(a1, *(PWSTR *)(a2 + 840), g_pAuthenticatedUserSid, 0i64, 0, 2u, 1, 0);
      if ( !v3 )
      {
LABEL_88:
        v29 = WPP_GLOBAL_Control;
      }
      else
      {
        v29 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          WPP_SF_DS(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0xE8u,
            (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
            v3,
            *(_QWORD *)(a2 + 840));
          v29 = WPP_GLOBAL_Control;
        }
        v3 = 0;
      }
      v30 = *(void **)(a2 + 360);
      v31 = *(unsigned int *)(a2 + 368);
      v50[0] = (__int64)&v48;
      v53 = off_1401B6C40;
      v54 = v50;
      mods[0] = (LDAPModW *)&v52;
      v48 = v31;
      v49 = v30;
      v50[1] = 0i64;
      v52 = 130;
      mods[1] = 0i64;
      if ( (a3 & 1) == 0 || !v30 || !(_DWORD)v31 )
        goto LABEL_104;
      if ( !IsValidSecurityDescriptor(v30) )
      {
        v29 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0xE9u, (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids);
          v29 = WPP_GLOBAL_Control;
        }
        goto LABEL_104;
      }
      v32 = Dns_LdapModifyExt(a1, *(PWSTR *)(a2 + 840), mods, 0i64, lpWideCharStr, cchWideChara, 0);
      if ( v32 )
      {
        v29 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) == 0
          || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
        {
          goto LABEL_103;
        }
        WPP_SF_DS(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0xEAu,
          (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
          v32,
          *(_QWORD *)(a2 + 840));
      }
      v29 = WPP_GLOBAL_Control;
LABEL_103:
      v3 = 0;
LABEL_104:
      if ( (a3 & 8) == 0 )
      {
        Ds_ReadZoneProperties(a2, 0i64);
        v3 = Ds_OpenZone(a2);
        Ds_ErrorHandler(v3, *(_QWORD *)(a2 + 840), a1, 0);
        v29 = WPP_GLOBAL_Control;
        if ( v26 )
          v3 = v26;
      }
      if ( v29 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)v29 + 17) & 0x400) != 0
        && *((_BYTE *)v29 + 65) >= 4u )
      {
        WPP_SF_sDS(*((_QWORD *)v29 + 7), (__int64)v30, v31, *(const char **)(a2 + 16), v3, *(_QWORD *)(a2 + 840));
      }
      goto LABEL_116;
    }
    v20 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      v22 = *(const unsigned __int16 **)(a2 + 840);
      v21 = 227;
      goto LABEL_115;
    }
    goto LABEL_116;
  }
  v38 = L"objectClass";
  attrs[0] = (LDAPModW *)&v37;
  v43 = L"cn";
  attrs[1] = (LDAPModW *)&v42;
  v41 = 0i64;
  v39 = &v40;
  v37 = 0;
  v40 = L"dnsZoneScopeContainer";
  v44 = &v45;
  v45 = L"ZoneScopeContainer";
  v46 = 0i64;
  v42 = 0;
  memset_0(v58, 0, sizeof(v58));
  v12 = *(const CHAR **)(a2 + 16);
  WideCharStr = 0;
  v13 = -1i64;
  MultiByteToWideChar(0xFDE9u, 0, v12, -1, &WideCharStr, 256);
  if ( !WideCharStr )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      LastError = GetLastError();
      WPP_SF_D(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0xDEu,
        (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
        LastError);
    }
    return v3;
  }
  v15 = -1i64;
  do
    ++v15;
  while ( *(_WORD *)(*(_QWORD *)(v9 + 40) + 2 * v15) );
  do
    ++v13;
  while ( *(_WORD *)&v58[2 * v13 - 2] );
  v16 = 2 * (v13 + v15) + 176;
  v17 = (wchar_t *)Mem_Alloc(v16, 9i64, "ds\\dns\\server\\server\\ds.c", 9382);
  v18 = v17;
  if ( !v17 )
    return 14;
  StringCbPrintfW(v17, v16, L"%sDC=%s,%s%s", L"cn=ZoneScopeContainer,", &WideCharStr);
  v19 = Dns_LdapAddExt(a1, v18, attrs, ServerControls, 0i64, (ULONG)L"cn=MicrosoftDNS,", 0);
  v3 = v19;
  if ( v19 == 68 )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_S(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0xDFu,
        (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
        v18);
    }
    goto LABEL_38;
  }
  if ( !v19 )
  {
LABEL_38:
    v11 = L"cn";
    goto LABEL_39;
  }
  v20 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    v21 = 224;
    v22 = v18;
LABEL_115:
    WPP_SF_SD(*((_QWORD *)v20 + 7), v21, (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids, v22);
  }
LABEL_116:
  if ( v3 && v4 )
    Ds_DeleteDn(pServerLdap, *(PWSTR *)(a2 + 840), 1);
  return v3;
}
// 14003F5ED: variable 'cchWideChar' is possibly undefined
// 14003FA05: variable 'lpWideCharStr' is possibly undefined
// 14003FA05: variable 'cchWideChara' is possibly undefined
// 14003FACD: variable 'v30' is possibly undefined
// 14003FACD: variable 'v31' is possibly undefined
// 140188260: using guessed type wchar_t aDefault_1[8];
// 14018BA40: using guessed type wchar_t aCnZonescopecon[23];
// 14018BF90: using guessed type wchar_t aCn_0[3];
// 14018C558: using guessed type wchar_t aDnszonescopeco[22];
// 14018C588: using guessed type wchar_t aZonescopeconta[19];
// 14018C5D0: using guessed type wchar_t aDnszonescope[13];
// 14018C5EC: using guessed type wchar_t aDc[3];
// 14018C5F8: using guessed type wchar_t aDnszone[8];
// 1401B8D10: using guessed type __int64 g_pLegacyDp;
// 14003F1E4: using guessed type char var_23E[510];
