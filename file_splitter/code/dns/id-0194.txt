//----- (00000001400175EC) ----------------------------------------------------
__int64 __fastcall Lookup_ZoneTreeNodeEx(unsigned __int16 *a1, int a2, __int64 a3)
{
  const wchar_t *v6; // rsi
  const wchar_t *v7; // rdi
  char *v8; // rax
  __int64 v9; // rdx
  __int64 v10; // r8
  int v11; // edi
  __int64 v12; // rbx
  __int64 v13; // r15
  __int64 v14; // rsi
  CDnsClientSubnetRecordsTrie *v15; // rax
  char *v16; // rcx
  unsigned __int16 *v17; // rdx
  const void **v18; // rdx
  char *v19; // rcx
  void *v20; // r13
  unsigned __int64 v21; // r12
  void *v22; // rax
  __int64 *ChildNode; // rax
  __int64 v24; // rbp
  __int64 v25; // rax
  const char *v26; // rax
  const char *v27; // rax
  const char *v28; // rax
  char *v30; // [rsp+90h] [rbp+8h]
  unsigned int v31; // [rsp+98h] [rbp+10h] BYREF
  unsigned __int16 *v32; // [rsp+A0h] [rbp+18h]

  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
  {
    if ( a3 )
      v6 = *(const wchar_t **)(a3 + 8);
    else
      v6 = L"Default";
    if ( a3 )
      v7 = *(const wchar_t **)a3;
    else
      v7 = L".";
    v8 = Dbg_LookupName(a1);
    WPP_SF_DsSS(*((_QWORD *)WPP_GLOBAL_Control + 7), v9, v10, a2, (__int64)v8, (__int64)v7, (__int64)v6);
  }
  v11 = a2 & 0x4000000;
  if ( a3 )
    v12 = **(_QWORD **)(a3 + 24);
  else
    v12 = g_Database;
  v13 = *a1;
  v14 = 0i64;
  if ( *(_QWORD *)(v12 + 56) )
    v14 = v12;
  if ( v11 )
  {
    Dbase_LockEx(0i64, 2, (__int64)"ds\\dns\\server\\server\\dblook.c", 251);
  }
  else
  {
    v31 = -1;
    acquireRead(DbaseLock, 0xFFFFFFFF, &v31);
  }
  if ( (_DWORD)v13 )
  {
    v15 = WPP_GLOBAL_Control;
    v16 = (char *)a1 + v13 + 328;
    v17 = &a1[4 * v13 + 4];
    do
    {
      v18 = (const void **)(v17 - 4);
      LODWORD(v13) = v13 - 1;
      v19 = v16 - 1;
      v32 = (unsigned __int16 *)v18;
      v30 = v19;
      v20 = (void *)*v18;
      v21 = (unsigned __int8)*v19;
      if ( v15 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)v15 + 17) & 0x40000) != 0
        && *((_BYTE *)v15 + 65) >= 5u )
      {
        v22 = FormatLabelA((unsigned __int8)*v19, *v18);
        WPP_SF_Ds(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x26u,
          (__int64)&WPP_3afa02460cfc3c89a49f4b71a68cfa7c_Traceguids,
          v21,
          (__int64)v22);
      }
      ChildNode = (__int64 *)NTree_FindOrCreateChildNodeEx(v12, v20, v21, v11, 0i64, 0, 0i64, 0, 0i64);
      v12 = (__int64)ChildNode;
      if ( !ChildNode )
      {
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 8) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          v28 = (const char *)FormatLabelA(v21, v20);
          WPP_SF_s(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x27u,
            (__int64)&WPP_3afa02460cfc3c89a49f4b71a68cfa7c_Traceguids,
            v28);
        }
        break;
      }
      v24 = ChildNode[7];
      if ( !v24 )
      {
        v15 = WPP_GLOBAL_Control;
        if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u
          && WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
        {
          v27 = (const char *)FormatLabelA(v21, v20);
          WPP_SF_s(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x29u,
            (__int64)&WPP_3afa02460cfc3c89a49f4b71a68cfa7c_Traceguids,
            v27);
          v15 = WPP_GLOBAL_Control;
        }
        goto LABEL_33;
      }
      if ( ((a2 & 0x8000000) == 0 || *(_DWORD *)(v24 + 372) != 4)
        && ((a2 & 0x10000000) == 0
         || (unsigned int)(*(_DWORD *)(v24 + 372) - 3) > 1
         || (*(_DWORD *)(v24 + 396) & 0x3000) == 0) )
      {
        if ( v11 && (v25 = *ChildNode, *(_QWORD *)v12) && *(_QWORD *)(v25 + 56) == v24 )
        {
          *(_QWORD *)(v12 + 56) = 0i64;
        }
        else
        {
          v14 = v12;
          v15 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 8) == 0
            || *((_BYTE *)WPP_GLOBAL_Control + 65) < 5u )
          {
            goto LABEL_33;
          }
          v26 = (const char *)FormatLabelA(v21, v20);
          WPP_SF_sqD(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x28u,
            (__int64)&WPP_3afa02460cfc3c89a49f4b71a68cfa7c_Traceguids,
            v26);
        }
      }
      v15 = WPP_GLOBAL_Control;
LABEL_33:
      v16 = v30;
      v17 = v32;
    }
    while ( (_DWORD)v13 );
  }
  if ( a2 )
  {
    if ( v11 )
    {
      v14 = v12;
      if ( v12 )
        *(_DWORD *)(v12 + 92) |= 0x200u;
    }
    else
    {
      if ( (a2 & 0x2000000) == 0 || v12 && *(_QWORD *)(v12 + 56) )
        goto LABEL_61;
      v14 = 0i64;
    }
  }
  if ( !v11 )
  {
LABEL_61:
    v31 = -1;
    releaseRead(DbaseLock, &v31, 1);
    return v14;
  }
  Dbase_UnlockEx(0i64, 2, (__int64)"ds\\dns\\server\\server\\dblook.c", 135);
  return v14;
}
// 140017673: variable 'v9' is possibly undefined
// 140017673: variable 'v10' is possibly undefined
// 140188260: using guessed type wchar_t aDefault_1[8];
// 1401EC5E8: using guessed type __int64 DbaseLock;
// 1401EC600: using guessed type __int64 g_Database;
