//----- (000000014004184C) ----------------------------------------------------
__int64 __fastcall Ds_ZonePollAndUpdate(__int64 a1, int a2)
{
  CDnsClientSubnetRecordsTrie *v4; // rcx
  const char *v5; // rax
  int v6; // eax
  unsigned int SnapShot_ScopeMap; // ebx
  unsigned int CurrentTimeInSeconds; // eax
  unsigned int v10; // r9d
  __int64 v11; // r8
  const char *v12; // rdx
  const wchar_t *v13; // rax
  const wchar_t *v14; // rdx
  __int64 v15; // r8
  __int64 *v16; // rsi
  int ZoneProperties; // eax
  unsigned int v18; // r9d
  ULONG OnlyZone; // esi
  const char *v20; // rdx
  CDnsClientSubnetRecordsTrie *v21; // rcx
  int v22; // eax
  int started; // eax
  int NextNodeInDsZoneSearch; // eax
  __int64 v25; // rsi
  unsigned int v26; // r8d
  _BYTE *Ptr; // rax
  __int64 v28; // rbx
  _DWORD *AppendUpdate; // rax
  __int64 v30; // rax
  __int64 v31; // rcx
  __int64 v32; // rbx
  _DWORD *DsUpdateForNode; // rax
  __int64 i; // rbx
  __int64 v35; // rdx
  __int64 v36; // rsi
  CHAR *v37; // rdx
  CHAR v38; // al
  unsigned __int8 v39; // al
  _DWORD *Soa; // rax
  __int64 v42; // r8
  int v43; // eax
  __int64 v44; // rdx
  int *ExtendedLdapErrString; // rbx
  __int64 v46; // rdx
  __int64 v47; // r8
  __int64 v48; // rbx
  int v49; // eax
  CDnsClientSubnetRecordsTrie *v50; // rcx
  __int64 v51; // rbx
  int v52; // r9d
  DWORD TickCount; // [rsp+54h] [rbp-ACh]
  BOOL v54; // [rsp+58h] [rbp-A8h]
  __int64 *v55; // [rsp+60h] [rbp-A0h] BYREF
  __int64 v56; // [rsp+68h] [rbp-98h]
  int v57; // [rsp+70h] [rbp-90h] BYREF
  int v58; // [rsp+74h] [rbp-8Ch]
  int v59; // [rsp+78h] [rbp-88h]
  int v60; // [rsp+7Ch] [rbp-84h]
  __int64 v61; // [rsp+80h] [rbp-80h] BYREF
  _QWORD *v62; // [rsp+88h] [rbp-78h]
  __int64 v63; // [rsp+90h] [rbp-70h]
  unsigned __int16 *v64[3]; // [rsp+98h] [rbp-68h] BYREF
  char v65[40]; // [rsp+B0h] [rbp-50h] BYREF
  int v66; // [rsp+D8h] [rbp-28h]
  int v67; // [rsp+DCh] [rbp-24h]
  __int128 v68; // [rsp+F0h] [rbp-10h] BYREF
  CHAR v69[48]; // [rsp+100h] [rbp+0h] BYREF
  int v70; // [rsp+130h] [rbp+30h]
  unsigned int v71; // [rsp+140h] [rbp+40h]
  char v72; // [rsp+150h] [rbp+50h]
  __int64 *v73; // [rsp+178h] [rbp+78h] BYREF
  unsigned int v74; // [rsp+180h] [rbp+80h]
  int v75; // [rsp+184h] [rbp+84h]
  __int16 v76; // [rsp+290h] [rbp+190h] BYREF
  char Buf2[270]; // [rsp+292h] [rbp+192h] BYREF

  LODWORD(v61) = a2;
  memset_0(v69, 0, 0x190ui64);
  TickCount = 0;
  v60 = 0;
  v63 = 0i64;
  v56 = 0i64;
  v58 = 0;
  v59 = 0;
  v54 = 0;
  v57 = 0;
  v55 = 0i64;
  v4 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    v5 = "FALSE";
    if ( a2 )
      v5 = "TRUE";
    WPP_SF_ss(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x11Eu,
      (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
      *(const char **)(a1 + 16),
      (__int64)v5);
    v4 = WPP_GLOBAL_Control;
  }
  v6 = *(_DWORD *)(a1 + 388);
  if ( (v6 & 1) == 0 && (*(_BYTE *)(a1 + 1160) & 0x40) == 0 )
  {
    if ( v4 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)v4 + 17) & 0x400) != 0
      && *((_BYTE *)v4 + 65) >= 2u )
    {
      WPP_SF_s(
        *((_QWORD *)v4 + 7),
        0x11Fu,
        (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
        *(const char **)(a1 + 16));
    }
    return 9611i64;
  }
  if ( (v6 & 2) != 0 )
  {
    if ( v4 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)v4 + 17) & 0x400) != 0
      && *((_BYTE *)v4 + 65) >= 2u )
    {
      WPP_SF_s(
        *((_QWORD *)v4 + 7),
        0x120u,
        (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
        *(const char **)(a1 + 16));
    }
    return 0i64;
  }
  if ( (*(_BYTE *)(a1 + 398) & 1) != 0 )
  {
    if ( v4 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)v4 + 17) & 0x400) != 0
      && *((_BYTE *)v4 + 65) >= 4u )
    {
      WPP_SF_s(
        *((_QWORD *)v4 + 7),
        0x121u,
        (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
        *(const char **)(a1 + 16));
    }
    SnapShot_ScopeMap = Zone_Load(a1, 0);
    if ( SnapShot_ScopeMap == 32 )
    {
      Ds_CheckZoneForDeletion(a1);
      return 0i64;
    }
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      WPP_SF_Ds(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x122u,
        (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
        SnapShot_ScopeMap,
        *(_QWORD *)(a1 + 16));
    }
    return SnapShot_ScopeMap;
  }
  DS_CreateZoneDsName(a1);
  if ( !*(_QWORD *)(a1 + 840) )
    return 14i64;
  CurrentTimeInSeconds = Dns_GetCurrentTimeInSeconds();
  dword_1401B9714 = CurrentTimeInSeconds;
  if ( !a2 && *(_DWORD *)(a1 + 864) > CurrentTimeInSeconds )
  {
    if ( (qword_1401B9780 & 0x2000) != 0 && (unsigned int)Log_EnterLock() )
    {
      v11 = (unsigned int)(*(_DWORD *)(a1 + 864) - dword_1401B9714);
      v12 = *(const char **)(a1 + 16);
      g_pszCurrentLogLevelString = (__int64)"DSPOLL";
      Log_Printf("Zone %s will not be polled for another %u seconds\n", v12, v11);
      g_pszCurrentLogLevelString = 0i64;
      Log_LeaveLock();
    }
    return 0i64;
  }
  if ( (qword_1401B9780 & 0x2000) != 0 && (unsigned int)Log_EnterLock() )
  {
    v13 = *(const wchar_t **)(a1 + 192);
    v14 = L"Default";
    v15 = *(_QWORD *)(a1 + 16);
    g_pszCurrentLogLevelString = (__int64)"DSPOLL";
    if ( v13 )
      v14 = v13;
    Log_Printf("Polling zonescope %ws of zone %s\n", v14, v15);
    g_pszCurrentLogLevelString = 0i64;
    Log_LeaveLock();
  }
  if ( *(_QWORD *)(a1 + 192) )
    goto LABEL_55;
  if ( *(_QWORD *)(a1 + 184) )
  {
    SnapShot_ScopeMap = Get_SnapShot_ScopeMap(*(_QWORD *)(a1 + 160), *(_QWORD *)(a1 + 168), 1, v10, &v57, &v55);
    if ( SnapShot_ScopeMap || !v57 )
    {
      Free_ScopeList(v55);
      return SnapShot_ScopeMap;
    }
    v16 = v55;
    if ( v55 )
    {
      while ( 1 )
      {
        SnapShot_ScopeMap = Ds_ZonePollAndUpdate(*v16, v61);
        if ( SnapShot_ScopeMap == 1167617 )
          break;
        v16 = (__int64 *)v16[1];
        SnapShot_ScopeMap = 0;
        if ( !v16 )
          goto LABEL_53;
      }
      Free_ScopeList(v55);
    }
LABEL_53:
    Free_ScopeList(v55);
    if ( SnapShot_ScopeMap )
      return SnapShot_ScopeMap;
  }
  if ( *(_QWORD *)(a1 + 192) )
  {
LABEL_55:
    if ( !*(_DWORD *)(a1 + 372) )
      return 0i64;
  }
  SnapShot_ScopeMap = Zone_LockForWriteEx(a1, 1, 0x4E20u, (__int64)"ds\\dns\\server\\server\\ds.c", 37);
  if ( SnapShot_ScopeMap )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      WPP_SF_Ds(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x123u,
        (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
        SnapShot_ScopeMap,
        *(_QWORD *)(a1 + 16));
    }
    return SnapShot_ScopeMap;
  }
  memset_0(v65, 0, 0x40ui64);
  v66 |= 4u;
  ZoneProperties = Ds_ReadZoneProperties(a1, 0i64);
  OnlyZone = ZoneProperties;
  if ( ZoneProperties )
  {
    if ( ZoneProperties == 32 )
    {
      if ( (qword_1401B9780 & 0x2000) != 0 && (unsigned int)Log_EnterLock() )
      {
        v20 = *(const char **)(a1 + 16);
        g_pszCurrentLogLevelString = (__int64)"DSPOLL";
        Log_Printf("Zone %s is missing from the DS, may have been deleted\n", v20);
        g_pszCurrentLogLevelString = 0i64;
        Log_LeaveLock();
      }
      if ( !(unsigned int)Ds_CheckZoneForDeletion(a1) )
        Zone_UnlockAfterWriteEx(a1, 1, (__int64)"ds\\dns\\server\\server\\ds.c", 75);
      return 0i64;
    }
    v21 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
    {
      goto LABEL_74;
    }
    WPP_SF_D(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x124u,
      (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
      ZoneProperties);
  }
  v21 = WPP_GLOBAL_Control;
LABEL_74:
  if ( (*(_BYTE *)(a1 + 1160) & 0x40) != 0 )
  {
    OnlyZone = 0;
    goto LABEL_194;
  }
  v18 = *(_DWORD *)(a1 + 372);
  if ( v18 == 2 || v18 >= 5 )
  {
    if ( v21 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)v21 + 17) & 0x400) != 0
      && *((_BYTE *)v21 + 65) >= 2u )
    {
      WPP_SF_Ds(
        *((_QWORD *)v21 + 7),
        0x125u,
        (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
        v18,
        *(_QWORD *)(a1 + 16));
    }
    OnlyZone = 9611;
    goto LABEL_194;
  }
  if ( !*(_QWORD *)(a1 + 192) )
  {
    OnlyZone = DnsOls_ConvertReadOnlyZone(a1);
    if ( OnlyZone )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        WPP_SF_Ds(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x126u,
          (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
          OnlyZone,
          *(_QWORD *)(a1 + 16));
      }
      *(_DWORD *)(a1 + 396) |= 0x12000u;
      v22 = 0;
LABEL_195:
      *(_DWORD *)(a1 + 436) = 0;
      if ( OnlyZone )
      {
        if ( OnlyZone == 1168897 )
        {
          OnlyZone = 0;
        }
        else if ( v22 )
        {
          v44 = *(_QWORD *)(a1 + 840);
          v64[0] = *(unsigned __int16 **)(a1 + 24);
          OnlyZone = Ds_ErrorHandler(OnlyZone, v44, 0i64, 0);
          ExtendedLdapErrString = Ds_GetExtendedLdapErrString(0i64);
          v64[1] = (unsigned __int16 *)ExtendedLdapErrString;
          v68 = DNS_EVENT_DS_ZONE_ENUM_FAILED;
          Eventlog_LogEvent((__int64)&v68, v46, 2u, v64, 0i64, OnlyZone, 0, 0i64);
          Ds_FreeExtendedLdapErrString(ExtendedLdapErrString);
        }
      }
      else if ( *(_DWORD *)(a1 + 372) && (*(_BYTE *)(a1 + 1160) & 0x40) == 0 )
      {
        if ( v54 )
          Zone_UpdateVersionAfterDsRead(a1, v71, 0, 0);
        Up_CompleteZoneUpdate(a1, (__int64)v65, v59 & 0x4000000 | 0xA0000u, v18);
LABEL_206:
        *(_DWORD *)(a1 + 864) = dword_1401B9714 + Ds_GetPollingInterval();
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          WPP_SF_sDdDDD(*((_QWORD *)WPP_GLOBAL_Control + 7), TickCount, v47, *(const char **)(a1 + 16));
        }
        Zone_UnlockAfterWriteEx(a1, 1, (__int64)"ds\\dns\\server\\server\\ds.c", 161);
        if ( v60 )
          Ds_CleanupSearchBlob((__int64)v69);
        v48 = v63;
        if ( v63 )
        {
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 3u )
          {
            WPP_SF_qs(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x130u,
              (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
              v63,
              v63 + 102);
          }
          v49 = Ds_WriteNodeToDs(0i64, v48, 0xFFu, 2, a1, 0);
          if ( v49 )
          {
            v50 = WPP_GLOBAL_Control;
            if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) == 0
              || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
            {
              goto LABEL_223;
            }
            WPP_SF_D(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x131u,
              (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
              v49);
          }
        }
        v50 = WPP_GLOBAL_Control;
LABEL_223:
        v51 = v56;
        if ( v56 )
        {
          if ( v50 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)v50 + 17) & 0x400) != 0
            && *((_BYTE *)v50 + 65) >= 4u )
          {
            WPP_SF_Sq(
              *((_QWORD *)v50 + 7),
              0x132u,
              (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
              *(const unsigned __int16 **)(a1 + 24));
          }
          v52 = Ds_WriteNodeToDs(0i64, v51, 0xFFu, 2, a1, 0);
          if ( v52
            && WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            WPP_SF_DS(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x133u,
              (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
              v52,
              *(_QWORD *)(a1 + 24));
          }
        }
        return OnlyZone;
      }
      Up_FreeUpdatesInUpdateList((__int64)v65);
      goto LABEL_206;
    }
  }
  if ( (*(_BYTE *)(a1 + 1160) & 0x40) != 0 )
  {
LABEL_194:
    v22 = 1;
    goto LABEL_195;
  }
  TickCount = GetTickCount();
  started = Ds_StartDsZoneSearch(v69, a1, 1i64, 0i64);
  OnlyZone = started;
  if ( started )
  {
    if ( started == 1168897 )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_s(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x127u,
          (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
          *(const char **)(a1 + 16));
      }
    }
    else if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
           && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
           && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      WPP_SF_Dss(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x128u,
        (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
        started,
        *(_QWORD *)(a1 + 16),
        a1 + 868);
    }
    goto LABEL_194;
  }
  v60 = 1;
LABEL_97:
  while ( g_fDnsServiceExit != 1 && (unsigned int)Thread_ServiceCheck(1) )
  {
    NextNodeInDsZoneSearch = Ds_GetNextNodeInDsZoneSearch((__int64)v69, &v61);
    if ( NextNodeInDsZoneSearch )
    {
      if ( NextNodeInDsZoneSearch == 1168897 )
        goto LABEL_164;
      if ( v70 )
      {
        v58 = 1;
LABEL_164:
        TickCount = GetTickCount() - TickCount;
        OnlyZone = Up_PrepareUpdateListForExecution(a1, 0i64, (__int64)v65, 1);
        if ( OnlyZone )
        {
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
          {
            WPP_SF_Ds(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x12Eu,
              (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
              OnlyZone,
              *(_QWORD *)(a1 + 16));
          }
          v43 = 1;
        }
        else
        {
          v42 = 4i64;
          if ( a1 == g_pTrustAnchorsZone )
            v42 = 67108868i64;
          v59 = v42;
          v18 = Up_ApplyUpdatesToDatabase((__int64)v65, a1, v42, v18);
          if ( v18 )
          {
            if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
              && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
            {
              WPP_SF_Ds(
                *((_QWORD *)WPP_GLOBAL_Control + 7),
                0x12Du,
                (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
                v18,
                *(_QWORD *)(a1 + 16));
            }
            v43 = 1;
          }
          else
          {
            v54 = v67 != 0;
            Up_ApplyTempUpdatesToDatabase(a1, (__int64)v65);
            v43 = v58;
          }
          OnlyZone = 0;
        }
        if ( v43 )
        {
          _InterlockedAdd(&dword_1401C7D5C, 1u);
        }
        else if ( v72 )
        {
          saveStartUsnToZone(a1, (__int64)v69);
        }
        goto LABEL_194;
      }
    }
    else
    {
      v25 = v61;
      if ( v61 )
      {
        ++dword_1401C7CC0;
        if ( (*(_BYTE *)(a1 + 388) & 1) != 0 && (dword_1401B9750 || g_fDsReadOnlyDcMode)
          || (*(_BYTE *)(a1 + 1160) & 0x40) != 0 )
        {
          goto LABEL_137;
        }
        if ( (*(_BYTE *)(v61 + 92) & 2) != 0 )
        {
          if ( *(_DWORD *)(a1 + 372) == 1 && (*(_BYTE *)(a1 + 1040) & 4) != 0 )
            v26 = 8;
          else
            v26 = 0;
          if ( RR_ListIsMatchingList(v61, (__int64)v73, v26) )
            goto LABEL_137;
          v63 = v25;
          RR_ListFree(v73);
        }
        else
        {
          if ( (*(_DWORD *)(v61 + 92) & 0x100) != 0 )
          {
            Ptr = RR_CreatePtr(0i64, Str, 2u, *(_DWORD *)(a1 + 528), 0x21u);
            v28 = (__int64)Ptr;
            if ( Ptr )
            {
              if ( !(unsigned int)RR_IsRecordInRRList(*(_QWORD *)(v25 + 64), (__int64)Ptr) )
              {
                if ( (*(_BYTE *)(a1 + 396) & 0x40) != 0 )
                {
                  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
                    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 3u )
                  {
                    WPP_SF_Sq(
                      *((_QWORD *)WPP_GLOBAL_Control + 7),
                      0x12Cu,
                      (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
                      *(const unsigned __int16 **)(a1 + 24));
                  }
                }
                else
                {
                  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
                    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
                  {
                    WPP_SF_Sq(
                      *((_QWORD *)WPP_GLOBAL_Control + 7),
                      0x12Bu,
                      (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
                      *(const unsigned __int16 **)(a1 + 24));
                  }
                  *(_BYTE *)(v28 + 8) = -16;
                  v73 = RR_ListInsertInOrder(v25, v73, v28, 0);
                  v56 = v25;
                }
                goto LABEL_137;
              }
              if ( (*(_BYTE *)(a1 + 396) & 0x40) != 0 )
              {
                if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                  && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
                  && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
                {
                  WPP_SF_Sq(
                    *((_QWORD *)WPP_GLOBAL_Control + 7),
                    0x12Au,
                    (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
                    *(const unsigned __int16 **)(a1 + 24));
                }
                AppendUpdate = Up_CreateAppendUpdate((__int64)v65, v25, 0i64, 2, v28);
                AppendUpdate[8] = v75;
                v30 = RR_RemoveRecordFromRRList((__int64 *)&v73, v28);
                if ( !v30 )
                  goto LABEL_137;
                v31 = v30;
              }
              else
              {
                v31 = v28;
              }
              RR_Free(v31);
            }
          }
LABEL_137:
          _InterlockedExchangeAdd(&dword_1401C7CC4, v74);
          v32 = v61;
          DsUpdateForNode = createDsUpdateForNode(a1, v61, (__int64)v65, v73, v75);
          if ( (*(_DWORD *)(v32 + 92) & 0x100) != 0
            && DsUpdateForNode
            && dword_1401B9714 < (unsigned int)g_protectSoaReversionUntil )
          {
            v62 = DsUpdateForNode + 4;
            for ( i = *((_QWORD *)DsUpdateForNode + 2); i && *(_WORD *)(i + 12) != 6; i = *(_QWORD *)i )
              v62 = (_QWORD *)i;
            v35 = *(_QWORD *)(a1 + 336);
            if ( v35 )
            {
              if ( i )
              {
                if ( !(unsigned int)RR_Compare(i, v35, 4i64)
                  && *(_DWORD *)(i + 60) == htonl(0x384u)
                  && *(_DWORD *)(i + 64) == htonl(0x258u)
                  && *(_DWORD *)(i + 68) == htonl(0x15180u)
                  && *(_DWORD *)(i + 72) == htonl(0xE10u) )
                {
                  v36 = *(unsigned __int8 *)(i + 76);
                  v76 = 1;
                  Buf2[0] = 0;
                  if ( !(unsigned int)Name_AppendDottedNameToCountName((unsigned __int8 *)&v76, "hostmaster") )
                  {
                    v37 = (CHAR *)Str;
                    do
                    {
                      v38 = *v37;
                      if ( !*v37 )
                      {
                        v37 = 0i64;
                        goto LABEL_156;
                      }
                      ++v37;
                    }
                    while ( v38 != 46 );
                    if ( !*v37 )
                      goto LABEL_158;
LABEL_156:
                    if ( v37 && (unsigned int)Name_AppendDottedNameToCountName((unsigned __int8 *)&v76, v37) )
                      goto LABEL_97;
LABEL_158:
                    v39 = *(_BYTE *)(v36 + i + 78);
                    if ( v39 == (_BYTE)v76 && !memcmp_0((const void *)(v36 + i + 80), Buf2, v39) )
                    {
                      Soa = RR_CreateSoa(*(_QWORD *)(a1 + 336), 1i64, 0i64, 0i64);
                      *v62 = Soa;
                      *(_QWORD *)Soa = *(_QWORD *)i;
                      RR_Free(i);
                      v56 = v61;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x129u, (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids);
  }
  Up_FreeUpdatesInUpdateList((__int64)v65);
  Zone_UnlockAfterWriteEx(a1, 1, (__int64)"ds\\dns\\server\\server\\ds.c", 200);
  Ds_CleanupSearchBlob((__int64)v69);
  return 1167617i64;
}
// 140041B66: variable 'v10' is possibly undefined
// 140042361: variable 'v18' is possibly undefined
// 1400425AB: variable 'v46' is possibly undefined
// 14004261A: variable 'v47' is possibly undefined
// 140186DE0: using guessed type __int128 DNS_EVENT_DS_ZONE_ENUM_FAILED;
// 140188260: using guessed type wchar_t aDefault_1[8];
// 1401B8C48: using guessed type __int64 g_pTrustAnchorsZone;
// 1401B8C94: using guessed type int g_fDsReadOnlyDcMode;
// 1401B8F28: using guessed type __int64 g_pszCurrentLogLevelString;
// 1401B90C8: using guessed type int g_protectSoaReversionUntil;
// 1401B9714: using guessed type int dword_1401B9714;
// 1401B9750: using guessed type int dword_1401B9750;
// 1401B9780: using guessed type __int64 qword_1401B9780;
// 1401B9A40: using guessed type int g_fDnsServiceExit;
// 1401C7CC0: using guessed type int dword_1401C7CC0;
// 1401C7CC4: using guessed type int dword_1401C7CC4;
// 1401C7D5C: using guessed type int dword_1401C7D5C;
// 14004184C: using guessed type char Buf2[270];
