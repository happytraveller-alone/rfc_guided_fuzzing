//----- (00000001400AD6F8) ----------------------------------------------------
void __fastcall Tcp_AcceptRequest(SOCKET s)
{
  SOCKET v2; // rdi
  int LastError; // eax
  __int64 v4; // rdx
  _BYTE *TcpMessage; // rax
  __int64 v6; // rbx
  const char *v7; // rax
  __int64 v8; // rax
  __int128 v9; // [rsp+40h] [rbp-58h] BYREF
  struct sockaddr addr; // [rsp+50h] [rbp-48h] BYREF
  __int128 v11; // [rsp+60h] [rbp-38h]
  int addrlen[4]; // [rsp+70h] [rbp-28h] BYREF
  __int128 v13; // [rsp+80h] [rbp-18h]

  memset_0(&addr, 0, 0x40ui64);
  addrlen[0] = 32;
  v2 = accept(s, &addr, addrlen);
  if ( v2 == -1i64 )
  {
    LastError = GetLastError();
    if ( g_fDnsServiceExit == 1 )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x2000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x16u, (__int64)&WPP_f9fc202ba18b3dea1e527425a0953a6a_Traceguids);
      }
    }
    else if ( LastError == 10035 )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x2000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_D(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x17u,
          (__int64)&WPP_f9fc202ba18b3dea1e527425a0953a6a_Traceguids,
          s);
      }
    }
    else
    {
      v9 = DNS_EVENT_ACCEPT_CALL_FAILED;
      Eventlog_LogEvent((__int64)&v9, v4, 0, 0i64, 0i64, LastError, 0, 0i64);
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x2000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_Dd(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x18u,
          (__int64)&WPP_f9fc202ba18b3dea1e527425a0953a6a_Traceguids,
          s);
      }
    }
  }
  else
  {
    _InterlockedIncrement(&dword_1401C8678);
    TcpMessage = Packet_AllocateTcpMessage(0);
    v6 = (__int64)TcpMessage;
    if ( TcpMessage )
    {
      *((struct sockaddr *)TcpMessage + 4) = addr;
      *((_OWORD *)TcpMessage + 5) = v11;
      *((_OWORD *)TcpMessage + 6) = *(_OWORD *)addrlen;
      *((_OWORD *)TcpMessage + 7) = v13;
      *((_QWORD *)TcpMessage + 7) = v2;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x2000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        v7 = DnsAddr_Ntoa((struct in_addr *)TcpMessage + 16);
        WPP_SF_Ds(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x1Au,
          (__int64)&WPP_f9fc202ba18b3dea1e527425a0953a6a_Traceguids,
          v2,
          (__int64)v7);
      }
      Tcp_ConnectionCreate(v2, 0i64, 60, v6);
      v8 = Tcp_ReceiveMessage(v6);
      if ( v8 && *(_BYTE *)(v8 + 1414) )
      {
        if ( *(char *)(v8 + 6306) >= 0 )
        {
          _InterlockedIncrement(&dword_1401C867C);
          _InterlockedIncrement((volatile signed __int32 *)pcTcpQueryReceived);
          _InterlockedIncrement((volatile signed __int32 *)pcTotalQueryReceived);
        }
        else
        {
          _InterlockedIncrement(&dword_1401C8688);
        }
        Answer_ProcessMessage(v8, 0);
      }
    }
    else
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x2000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x19u, (__int64)&WPP_f9fc202ba18b3dea1e527425a0953a6a_Traceguids);
      }
      closesocket(v2);
    }
  }
}
// 1400AD819: variable 'v4' is possibly undefined
// 140187A08: using guessed type __int128 DNS_EVENT_ACCEPT_CALL_FAILED;
// 1401B9A40: using guessed type int g_fDnsServiceExit;
// 1401C8538: using guessed type __int64 pcTotalQueryReceived;
// 1401C8548: using guessed type __int64 pcTcpQueryReceived;
// 1401C8678: using guessed type int dword_1401C8678;
// 1401C867C: using guessed type int dword_1401C867C;
// 1401C8688: using guessed type int dword_1401C8688;
