//----- (00000001400CFE28) ----------------------------------------------------
__int64 __fastcall validateRPCZoneName(__int64 a1, __int64 a2, int a3)
{
  char *v6; // r13
  unsigned int v7; // eax
  CDnsClientSubnetRecordsTrie *v8; // rcx
  unsigned __int16 v9; // dx
  unsigned __int64 v11; // rax
  unsigned __int16 v12; // r14
  int *v13; // rsi
  unsigned int v14; // ebx
  int v15; // eax
  const char *v16; // r8
  unsigned int v17; // [rsp+30h] [rbp-D0h]
  int v18; // [rsp+34h] [rbp-CCh]
  char *String2; // [rsp+38h] [rbp-C8h]
  size_t MaxCount; // [rsp+40h] [rbp-C0h]
  unsigned __int16 v22[184]; // [rsp+60h] [rbp-A0h] BYREF
  _QWORD v23[8]; // [rsp+1D0h] [rbp+D0h] BYREF
  int v24; // [rsp+210h] [rbp+110h]
  int v25; // [rsp+214h] [rbp+114h] BYREF
  char v26[64]; // [rsp+218h] [rbp+118h] BYREF
  int v27; // [rsp+258h] [rbp+158h]
  int v28; // [rsp+25Ch] [rbp+15Ch]
  char v29[64]; // [rsp+260h] [rbp+160h] BYREF
  __int64 v30; // [rsp+2A0h] [rbp+1A0h]
  __int64 v31; // [rsp+2A8h] [rbp+1A8h]
  char v32[56]; // [rsp+2B0h] [rbp+1B0h] BYREF
  __int64 v33; // [rsp+2E8h] [rbp+1E8h]
  __int64 v34; // [rsp+2F0h] [rbp+1F0h]
  char v35[56]; // [rsp+2F8h] [rbp+1F8h] BYREF
  __int64 v36; // [rsp+330h] [rbp+230h]
  char v37[64]; // [rsp+338h] [rbp+238h] BYREF
  __int64 v38; // [rsp+378h] [rbp+278h]

  strcpy((char *)v23, "GlobalNames");
  memset_0((char *)&v23[1] + 4, 0, 0x34ui64);
  v24 = 1;
  v25 = 6;
  strcpy(v26, "TrustAnchors");
  memset_0(&v26[13], 0, 0x33ui64);
  v27 = 1;
  strcpy(v29, "GlobalNamesCache");
  v28 = 2;
  memset_0(&v29[17], 0, 0x2Fui64);
  v30 = 1i64;
  v31 = 0x656C706D617865i64;
  memset_0(v32, 0, sizeof(v32));
  v33 = 0i64;
  v34 = 0x64696C61766E69i64;
  memset_0(v35, 0, sizeof(v35));
  strcpy(v37, "localhost");
  v36 = 0i64;
  memset_0(&v37[10], 0, 0x36ui64);
  v6 = *(char **)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  v38 = 0i64;
  v17 = v7;
  if ( !*v6 )
  {
    v8 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
    {
      return 123i64;
    }
    v9 = 11;
    goto LABEL_6;
  }
  v11 = -1i64;
  do
    ++v11;
  while ( v6[v11] );
  if ( v11 > 0x100 )
  {
    v8 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
    {
      return 123i64;
    }
    v9 = 12;
    goto LABEL_6;
  }
  if ( !(unsigned int)Name_ConvertDottedNameToLookupName(v6, v11, v22) )
  {
    v8 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
    {
      return 123i64;
    }
    v9 = 13;
LABEL_6:
    WPP_SF_(*((_QWORD *)v8 + 7), v9, (__int64)&WPP_5efa35e0870730ffd13051b9da022308_Traceguids);
    return 123i64;
  }
  v12 = v22[0];
  if ( !v22[0] )
    goto LABEL_60;
  v13 = &v25;
  v14 = 0;
  String2 = *(char **)&v22[4 * v22[0]];
  v18 = *((unsigned __int8 *)&v22[163] + v22[0] + 1);
  MaxCount = *((unsigned __int8 *)&v22[163] + v22[0] + 1);
  while ( MaxCount != strnlen((const char *)&v23[9 * v14], 0x40ui64)
       || _strnicmp((const char *)&v23[9 * v14], String2, MaxCount) )
  {
LABEL_27:
    ++v14;
    v13 += 18;
    if ( v14 >= 6 )
    {
      if ( v18 == 12 && !_strnicmp("TrustAnchors", String2, 0xCui64) )
      {
        if ( *(_DWORD *)(a1 + 20) )
        {
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            WPP_SF_(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x10u,
              (__int64)&WPP_5efa35e0870730ffd13051b9da022308_Traceguids);
          }
          return 9611i64;
        }
        if ( dword_1401B9740 )
        {
          if ( !a3 || v17 != 1 || !a2 || (*(_BYTE *)(a2 + 100) & 8) == 0 )
          {
            if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
              && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
            {
              WPP_SF_Ddd(
                *((_QWORD *)WPP_GLOBAL_Control + 7),
                0x11u,
                (__int64)&WPP_5efa35e0870730ffd13051b9da022308_Traceguids,
                a3);
            }
            return 9611i64;
          }
        }
        else if ( a3 )
        {
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            WPP_SF_D(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x12u,
              (__int64)&WPP_5efa35e0870730ffd13051b9da022308_Traceguids,
              a3);
          }
          return 9611i64;
        }
      }
LABEL_60:
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
      {
        WPP_SF_s(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x13u,
          (__int64)&WPP_5efa35e0870730ffd13051b9da022308_Traceguids,
          v6);
      }
      return 0i64;
    }
  }
  if ( v12 <= 1u && *(v13 - 1) )
  {
    v15 = *v13;
    if ( !_bittest(&v15, v17) )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_ss(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0xFu,
          (__int64)&WPP_5efa35e0870730ffd13051b9da022308_Traceguids,
          "\"*.",
          (__int64)&v23[9 * v14]);
      }
      return 9611i64;
    }
    goto LABEL_27;
  }
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    v16 = "\"";
    if ( *(&v24 + 18 * v14) )
      v16 = "\"*.";
    WPP_SF_sss(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0xEu,
      (__int64)&WPP_5efa35e0870730ffd13051b9da022308_Traceguids,
      v6,
      (__int64)v16,
      (__int64)&v23[9 * v14]);
  }
  return 123i64;
}
// 1400D01DC: conditional instruction was optimized away because r10d.4!=0
// 1401B9740: using guessed type int dword_1401B9740;
// 1400CFE28: using guessed type char var_110[56];
// 1400CFE28: using guessed type char var_C8[56];
