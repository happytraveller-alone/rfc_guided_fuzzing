//----- (00000001400D7A20) ----------------------------------------------------
__int64 __fastcall Rpc_EnumerateTrustAnchors(
        __int64 a1,
        __int64 a2,
        __int64 a3,
        __int64 a4,
        int a5,
        _BYTE *a6,
        _DWORD *a7,
        struct _DnssrvRpcTrustAnchorList **a8)
{
  struct _DnssrvRpcTrustAnchorList *v8; // rsi
  unsigned __int8 *CountNameFromDottedName; // rax
  __int64 v10; // rcx
  __int64 v11; // rbx
  unsigned int v12; // edi
  struct _DnssrvRpcTrustAnchorList *v14; // [rsp+20h] [rbp-18h] BYREF
  __int64 v15; // [rsp+28h] [rbp-10h] BYREF

  v8 = 0i64;
  v14 = 0i64;
  EnterCriticalSection(&g_csRFC5011_Trust_Points);
  CountNameFromDottedName = Name_CreateCountNameFromDottedName(a6, 0);
  if ( !CountNameFromDottedName
    || (std::_Tree<std::_Tmap_traits<_CountName,std::unique_ptr<TrustPoint>,CountNameCompare,std::allocator<std::pair<_CountName const,std::unique_ptr<TrustPoint>>>,0>>::find(
          v10,
          &v15,
          CountNameFromDottedName),
        v11 = v15,
        v15 == qword_1401B9288) )
  {
    v12 = 9714;
  }
  else
  {
    EnterCriticalSection(*(LPCRITICAL_SECTION *)(v15 + 288));
    v12 = TrustPoint::EnumerateTrustAnchors(*(LPCRITICAL_SECTION *)(v11 + 288), &v14);
    LeaveCriticalSection(*(LPCRITICAL_SECTION *)(v11 + 288));
    v8 = v14;
  }
  LeaveCriticalSection(&g_csRFC5011_Trust_Points);
  if ( !v12 )
  {
    *a7 = 50;
    *a8 = v8;
  }
  return v12;
}
// 1400D7A5C: variable 'v10' is possibly undefined
// 1401B9288: using guessed type __int64 qword_1401B9288;
