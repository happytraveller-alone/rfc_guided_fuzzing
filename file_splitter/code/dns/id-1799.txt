//----- (00000001400E3B34) ----------------------------------------------------
void __fastcall DNSSEC_ActiveRefreshAllTrustPoints(int a1)
{
  int v2; // edi
  __int64 *v3; // rbx
  __int64 TrustPointName; // rax
  const char *v5; // r9
  __int64 *v6; // rax
  __int64 *i; // rax
  void *v8[5]; // [rsp+38h] [rbp-40h] BYREF

  v2 = 0;
  EnterCriticalSection(&g_csRFC5011_Trust_Points);
  g_ImmediateActiveRefreshTime = 0i64;
  v3 = *(__int64 **)qword_1401B9288;
  while ( v3 != (__int64 *)qword_1401B9288 )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x100000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      v2 |= 1u;
      TrustPointName = TrustPoint::GetTrustPointName(v3[36], (__int64)v8);
      v5 = (const char *)TrustPointName;
      if ( *(_QWORD *)(TrustPointName + 24) >= 0x10ui64 )
        v5 = *(const char **)TrustPointName;
      WPP_SF_ssq(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x4Bu,
        (__int64)&WPP_4831604f5a2431d08120905ab66c1365_Traceguids,
        v5,
        (__int64)v3 + 26);
    }
    if ( (v2 & 1) != 0 )
    {
      v2 &= ~1u;
      if ( v8[3] >= (void *)0x10 )
        operator delete(v8[0]);
    }
    TrustPoint::ScheduleActiveRefresh((unsigned int *)v3[36], 0, a1 != 0);
    if ( !*((_BYTE *)v3 + 297) )
    {
      v6 = (__int64 *)v3[2];
      if ( *((_BYTE *)v6 + 297) )
      {
        for ( i = (__int64 *)v3[1]; !*((_BYTE *)i + 297) && v3 == (__int64 *)i[2]; i = (__int64 *)i[1] )
          v3 = i;
        v3 = i;
      }
      else
      {
        do
        {
          v3 = v6;
          v6 = (__int64 *)*v6;
        }
        while ( !*((_BYTE *)v6 + 297) );
      }
    }
  }
  LeaveCriticalSection(&g_csRFC5011_Trust_Points);
}
// 140184CA8: using guessed type void __stdcall operator delete(void *);
// 1401B9160: using guessed type volatile __int64 g_ImmediateActiveRefreshTime;
// 1401B9288: using guessed type __int64 qword_1401B9288;
