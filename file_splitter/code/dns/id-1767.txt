//----- (00000001400DED00) ----------------------------------------------------
__int64 *__fastcall removeTrustPointFromGlobalList(__int64 *a1, __int64 *a2, _BYTE *a3)
{
  _BYTE *v3; // rax
  int v5; // ebx
  __int64 v6; // rcx
  CDnsClientSubnetRecordsTrie *v7; // rax
  __int64 TrustPointName; // rax
  __int64 v9; // rax
  __int64 v10; // rax
  __int64 v11; // rax
  int v12; // ecx
  __int64 v14; // [rsp+40h] [rbp-19h] BYREF
  __int64 v15[2]; // [rsp+48h] [rbp-11h] BYREF
  void *v16[3]; // [rsp+58h] [rbp-1h] BYREF
  unsigned __int64 v17; // [rsp+70h] [rbp+17h]

  v15[1] = -2i64;
  v3 = a3;
  v5 = 0;
  LODWORD(v14) = 0;
  v15[0] = 0i64;
  if ( a2 == (__int64 *)qword_1401B9288 )
  {
    *a1 = (__int64)a2;
    return a1;
  }
  if ( a3 )
    goto LABEL_24;
  if ( (unsigned int)Zone_FindOrCreateTrustAnchorsZone(v15) )
  {
    v7 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x100000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 3u )
    {
      TrustPointName = TrustPoint::GetTrustPointName(a2[36], (__int64)v16);
      v5 = 1;
      LODWORD(v14) = 1;
      if ( *(_QWORD *)(TrustPointName + 24) >= 0x10ui64 )
        TrustPointName = *(_QWORD *)TrustPointName;
      WPP_SF_s(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0xDu,
        (__int64)&WPP_4831604f5a2431d08120905ab66c1365_Traceguids,
        (const char *)TrustPointName);
      v7 = WPP_GLOBAL_Control;
    }
    if ( (v5 & 1) == 0 )
      goto LABEL_26;
    v5 &= ~1u;
    goto LABEL_13;
  }
  v3 = Lookup_ZoneNode(v15[0], (unsigned __int8 *)(a2[36] + 178), 0i64, 0i64, 33, 0i64, 0i64, 0i64);
  if ( v3 )
  {
LABEL_24:
    *((_DWORD *)v3 + 23) &= 0xFF7F7FFF;
    Timeout_SetTimeoutOnNodeEx((__int64)v3, 1i64, 2i64);
    goto LABEL_25;
  }
  v7 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x100000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 3u )
  {
    v9 = TrustPoint::GetTrustPointName(a2[36], (__int64)v16);
    v5 = 2;
    LODWORD(v14) = 2;
    if ( *(_QWORD *)(v9 + 24) >= 0x10ui64 )
      v9 = *(_QWORD *)v9;
    WPP_SF_s(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0xEu,
      (__int64)&WPP_4831604f5a2431d08120905ab66c1365_Traceguids,
      (const char *)v9);
    v7 = WPP_GLOBAL_Control;
  }
  if ( (v5 & 2) == 0 )
    goto LABEL_26;
  v5 &= ~2u;
LABEL_13:
  if ( v17 < 0x10 )
    goto LABEL_26;
  operator delete(v16[0]);
LABEL_25:
  v7 = WPP_GLOBAL_Control;
LABEL_26:
  if ( v7 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)v7 + 17) & 0x100000) != 0
    && *((_BYTE *)v7 + 65) >= 4u )
  {
    v10 = TrustPoint::GetTrustPointName(a2[36], (__int64)v16);
    v5 |= 4u;
    LODWORD(v14) = v5;
    if ( *(_QWORD *)(v10 + 24) >= 0x10ui64 )
      v10 = *(_QWORD *)v10;
    WPP_SF_s(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0xFu,
      (__int64)&WPP_4831604f5a2431d08120905ab66c1365_Traceguids,
      (const char *)v10);
  }
  if ( (v5 & 4) != 0 && v17 >= 0x10 )
    operator delete(v16[0]);
  v11 = *std::_Tree<std::_Tmap_traits<_CountName,std::unique_ptr<TrustPoint>,CountNameCompare,std::allocator<std::pair<_CountName const,std::unique_ptr<TrustPoint>>>,0>>::erase(
           v6,
           &v14,
           a2);
  v12 = dword_1401B960C;
  if ( g_isRegisteredForUTC == 1 )
    v12 = qword_1401B9290;
  dword_1401B960C = v12;
  if ( !qword_1401B9290 )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x100000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x10u, (__int64)&WPP_4831604f5a2431d08120905ab66c1365_Traceguids);
    }
    v11 = qword_1401B9288;
  }
  *a1 = v11;
  return a1;
}
// 1400DEF42: variable 'v6' is possibly undefined
// 140184CA8: using guessed type void __stdcall operator delete(void *);
// 1401B9190: using guessed type int g_isRegisteredForUTC;
// 1401B9288: using guessed type __int64 qword_1401B9288;
// 1401B9290: using guessed type __int64 qword_1401B9290;
// 1401B960C: using guessed type int dword_1401B960C;
