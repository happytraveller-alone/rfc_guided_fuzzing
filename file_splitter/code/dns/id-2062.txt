//----- (0000000140101F10) ----------------------------------------------------
__int64 __fastcall Rpc_PerformZoneKeyRollover(__int64 a1, __int64 a2, __int64 a3, __int64 a4, int a5, LPCOLESTR lpsz)
{
  __int64 v6; // rbx
  CDnsClientSubnetRecordsTrie *v8; // r10
  const char *v9; // r9
  unsigned int v10; // edi
  __int64 v11; // rcx
  __int64 v12; // rdx
  int v13; // eax
  int v14; // eax
  _QWORD *ZoneSkdByGuid; // rax
  __int64 v16; // rbp
  int v17; // eax
  __int64 v18; // rax
  char *v19; // rax
  const EVENT_DESCRIPTOR *v20; // rdx
  __int128 v22; // [rsp+50h] [rbp-48h] BYREF
  GUID pclsid; // [rsp+60h] [rbp-38h] BYREF

  v6 = 0i64;
  pclsid.Data1 = 0;
  *(_QWORD *)&pclsid.Data2 = 0i64;
  *(_DWORD *)&pclsid.Data4[4] = 0;
  v8 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    if ( a3 )
      v9 = *(const char **)(a3 + 16);
    else
      v9 = 0i64;
    WPP_SF_sS(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x68u,
      (__int64)&WPP_fcf90f505e41335ad1a88e0d5ede2d0c_Traceguids,
      v9,
      (__int64)lpsz);
    v8 = WPP_GLOBAL_Control;
  }
  if ( a3 )
  {
    v11 = a3;
    if ( *(_QWORD *)(a3 + 328) )
      v11 = *(_QWORD *)(a3 + 328);
    if ( *(_QWORD *)(v11 + 200) )
    {
      v10 = 9553;
      goto LABEL_48;
    }
    v10 = Zone_LockForRPCSeqEx(a3, 0x2710u);
    if ( v10 )
    {
LABEL_47:
      v8 = WPP_GLOBAL_Control;
      goto LABEL_48;
    }
    v10 = Zone_LockForWriteEx(a3, 1, 0x2710u, (__int64)"ds\\dns\\server\\server\\olsrpc.cpp", 238);
    if ( v10 )
    {
LABEL_46:
      Lock_ReleaseWrite(*(_QWORD *)(a3 + 312));
      goto LABEL_47;
    }
    if ( *(_DWORD *)(a3 + 372) != 1 )
    {
      v10 = 9611;
LABEL_45:
      Zone_UnlockAfterWriteEx(a3, 1, (__int64)"ds\\dns\\server\\server\\olsrpc.cpp", 111);
      goto LABEL_46;
    }
    DnsOls_ResetZoneKeymasterFlagForZone(a3, v12, 1, 0, 0i64, 0i64, 0i64, 0i64, 0i64);
    v13 = *(_DWORD *)(a3 + 1040);
    if ( (v13 & 2) == 0 )
    {
      v10 = 9101;
      goto LABEL_45;
    }
    if ( (v13 & 4) == 0 )
    {
      v10 = 9121;
      goto LABEL_45;
    }
    if ( a5 != 3 || !lpsz )
    {
      v10 = 87;
      goto LABEL_45;
    }
    v14 = CLSIDFromString(lpsz, &pclsid);
    if ( v14 )
      v10 = GuidFromString((__int64)lpsz, v14);
    else
      v10 = 0;
    if ( v10 )
      goto LABEL_45;
    ZoneSkdByGuid = DnsOls_FindZoneSkdByGuid(a3, &pclsid);
    v16 = (__int64)ZoneSkdByGuid;
    if ( !ZoneSkdByGuid )
    {
      v10 = 1168;
      goto LABEL_45;
    }
    v17 = *((_DWORD *)ZoneSkdByGuid + 24);
    if ( v17 == 1 )
    {
      v10 = 9120;
      goto LABEL_45;
    }
    if ( (unsigned int)(v17 - 2) <= 6 )
    {
      v10 = 9116;
      goto LABEL_45;
    }
    v18 = *(_QWORD *)(a3 + 1128);
    if ( !v18 || *(_DWORD *)(v18 + 96) < 2u )
    {
      *(_QWORD *)(a3 + 1128) = 0i64;
      *(_QWORD *)(a3 + 1116) = 0i64;
    }
    *(_DWORD *)(v16 + 96) = 1;
    if ( *(_DWORD *)(v16 + 36) )
    {
      if ( (dword_1401B9144 & 0x40) != 0 )
      {
        v19 = Dbg_GuidString((const IID *)(v16 + 8));
        v20 = (const EVENT_DESCRIPTOR *)&DNS_EVENT_NEXT_KSKROLLOVER_STAGE;
LABEL_42:
        Template_zzz(
          Microsoft_Windows_DNS_Server_ServiceHandle,
          v20,
          (const unsigned __int16 *)v19,
          *(const unsigned __int16 **)(a3 + 24),
          L"DNS_SKD_STATUS_QUEUED");
      }
    }
    else if ( (dword_1401B9144 & 0x40) != 0 )
    {
      v19 = Dbg_GuidString((const IID *)(v16 + 8));
      v20 = &DNS_EVENT_NEXT_ZSKROLLOVER_STAGE;
      goto LABEL_42;
    }
    GetSystemTimeAsFileTime((LPFILETIME)(v16 + 84));
    *(_DWORD *)(v16 + 104) = 1;
    DnsOls_WriteSkdToStorage(0x10000000, a3, v16, 0);
    v22 = DNS_EVENT_KEY_ROLLOVER_TRIGGERED;
    LogDnssecKeyRollover(&v22, a3, v16, 0i64);
    SetEvent(g_hOlsKeyRolloverEvent);
    goto LABEL_45;
  }
  v10 = 87;
LABEL_48:
  if ( v8 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)v8 + 68) & 4) != 0
    && *((_BYTE *)v8 + 65) >= 4u )
  {
    if ( a3 )
      v6 = *(_QWORD *)(a3 + 16);
    WPP_SF_Ds(*((_QWORD *)v8 + 7), 0x69u, (__int64)&WPP_fcf90f505e41335ad1a88e0d5ede2d0c_Traceguids, v10, v6);
  }
  return v10;
}
// 140102051: variable 'v12' is possibly undefined
// 140187070: using guessed type __int128 DNS_EVENT_KEY_ROLLOVER_TRIGGERED;
// 140187B50: using guessed type __int128 DNS_EVENT_NEXT_KSKROLLOVER_STAGE;
// 1401B9144: using guessed type int dword_1401B9144;
