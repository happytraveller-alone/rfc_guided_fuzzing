//----- (0000000140109A70) ----------------------------------------------------
const void ****__fastcall ____Unguarded_partition_PEAPEAV__vector_EV__allocator_E_std___std__VCCompareCanonicalizedData__1__DnsOls_GetSortedCanonicalizedRdata__YAJPEAU_Dbase_Record___KAEAV__vector_PEAV__vector_EV__allocator_E_std___std__V__allocator_PEAV__vector_EV__allocator_E_std___std___2__2__Z__std__YA_AU__pair_PEAPEAV__vector_EV__allocator_E_std___std__PEAPEAV12__0_PEAPEAV__vector_EV__allocator_E_std___0_0VCCompareCanonicalizedData__1__DnsOls_GetSortedCanonicalizedRdata__YAJPEAU_Dbase_Record___KAEAV__vector_PEAV__vector_EV__allocator_E_std___std__V__allocator_PEAV__vector_EV__allocator_E_std___std___2__0__Z__Z(
        const void ****a1,
        const void ***a2,
        const void ***a3)
{
  const void ***v4; // rdi
  const void ***v6; // rcx
  const void ***v7; // r15
  __int64 v8; // rax
  __int64 v9; // rax
  __int64 v10; // rsi
  unsigned __int64 v11; // r14
  const void ***v12; // rbp
  const void ***v13; // rbx
  const void **v14; // rbp
  __int64 v15; // r14
  size_t v16; // rdi
  size_t v17; // r8
  size_t v18; // rsi
  int v19; // eax
  bool v20; // al
  unsigned __int64 v21; // rsi
  size_t v22; // rdi
  size_t v23; // r8
  int v24; // eax
  bool v25; // al
  const void **v26; // r14
  size_t v27; // rdi
  const void **v28; // rbp
  size_t v29; // r8
  unsigned __int64 v30; // rsi
  int v31; // eax
  bool v32; // al
  size_t v33; // rsi
  size_t v34; // r8
  unsigned __int64 v35; // rbp
  int v36; // eax
  bool v37; // al
  const void ***v38; // rdi
  const void ***v39; // rsi
  unsigned __int64 v40; // r14
  size_t v41; // rbp
  size_t v42; // r8
  int v43; // eax
  bool v44; // al
  size_t v45; // rbp
  unsigned __int64 v46; // r14
  size_t v47; // r8
  int v48; // eax
  bool v49; // al
  const void **v50; // rax
  __int64 v51; // rax
  size_t v52; // rbp
  size_t v53; // r8
  size_t v54; // r14
  int v55; // eax
  bool v56; // al
  unsigned __int64 v57; // r14
  size_t v58; // rbp
  size_t v59; // r8
  int v60; // eax
  bool v61; // al
  const void **v62; // rax
  const void **v63; // rcx
  const void ***v64; // rdx
  const void **v65; // rcx
  const void **v66; // rcx
  const void **v67; // rcx
  const void **v68; // rcx
  const void ****result; // rax
  const void **v71; // [rsp+68h] [rbp+10h]
  const void ***v72; // [rsp+68h] [rbp+10h]
  __int64 v73; // [rsp+70h] [rbp+18h]

  v4 = a3 - 1;
  v6 = a2;
  v7 = &a2[(a3 - a2) / 2];
  v8 = a3 - 1 - a2;
  if ( v8 > 40 )
  {
    v9 = (v8 + 1) / 8;
    v10 = 8 * v9;
    v11 = 16 * v9;
    v12 = &a2[v9];
    ____Med3_PEAPEAV__vector_EV__allocator_E_std___std__VCCompareCanonicalizedData__1__DnsOls_GetSortedCanonicalizedRdata__YAJPEAU_Dbase_Record___KAEAV__vector_PEAV__vector_EV__allocator_E_std___std__V__allocator_PEAV__vector_EV__allocator_E_std___std___2__2__Z__std__YAXPEAPEAV__vector_EV__allocator_E_std___0_00VCCompareCanonicalizedData__1__DnsOls_GetSortedCanonicalizedRdata__YAJPEAU_Dbase_Record___KAEAV__vector_PEAV__vector_EV__allocator_E_std___std__V__allocator_PEAV__vector_EV__allocator_E_std___std___2__0__Z__Z(
      a2,
      v12,
      &a2[2 * v9]);
    ____Med3_PEAPEAV__vector_EV__allocator_E_std___std__VCCompareCanonicalizedData__1__DnsOls_GetSortedCanonicalizedRdata__YAJPEAU_Dbase_Record___KAEAV__vector_PEAV__vector_EV__allocator_E_std___std__V__allocator_PEAV__vector_EV__allocator_E_std___std___2__2__Z__std__YAXPEAPEAV__vector_EV__allocator_E_std___0_00VCCompareCanonicalizedData__1__DnsOls_GetSortedCanonicalizedRdata__YAJPEAU_Dbase_Record___KAEAV__vector_PEAV__vector_EV__allocator_E_std___std__V__allocator_PEAV__vector_EV__allocator_E_std___std___2__0__Z__Z(
      &v7[v10 / 0xFFFFFFFFFFFFFFF8ui64],
      v7,
      &v7[(unsigned __int64)v10 / 8]);
    v4 = (const void ***)((char *)v4 - v10);
    ____Med3_PEAPEAV__vector_EV__allocator_E_std___std__VCCompareCanonicalizedData__1__DnsOls_GetSortedCanonicalizedRdata__YAJPEAU_Dbase_Record___KAEAV__vector_PEAV__vector_EV__allocator_E_std___std__V__allocator_PEAV__vector_EV__allocator_E_std___std___2__2__Z__std__YAXPEAPEAV__vector_EV__allocator_E_std___0_00VCCompareCanonicalizedData__1__DnsOls_GetSortedCanonicalizedRdata__YAJPEAU_Dbase_Record___KAEAV__vector_PEAV__vector_EV__allocator_E_std___std__V__allocator_PEAV__vector_EV__allocator_E_std___std___2__0__Z__Z(
      &a3[v11 / 0xFFFFFFFFFFFFFFF8ui64 - 1],
      v4,
      a3 - 1);
    v6 = v12;
  }
  ____Med3_PEAPEAV__vector_EV__allocator_E_std___std__VCCompareCanonicalizedData__1__DnsOls_GetSortedCanonicalizedRdata__YAJPEAU_Dbase_Record___KAEAV__vector_PEAV__vector_EV__allocator_E_std___std__V__allocator_PEAV__vector_EV__allocator_E_std___std___2__2__Z__std__YAXPEAPEAV__vector_EV__allocator_E_std___0_00VCCompareCanonicalizedData__1__DnsOls_GetSortedCanonicalizedRdata__YAJPEAU_Dbase_Record___KAEAV__vector_PEAV__vector_EV__allocator_E_std___std__V__allocator_PEAV__vector_EV__allocator_E_std___std___2__0__Z__Z(
    v6,
    v7,
    v4);
  v13 = v7 + 1;
  while ( a2 < v7 )
  {
    v14 = *v7;
    v15 = (__int64)*(v7 - 1);
    v16 = (_BYTE *)v14[1] - (_BYTE *)*v14;
    v17 = v16;
    v18 = *(_QWORD *)(v15 + 8) - *(_QWORD *)v15;
    if ( v18 < v16 )
      v17 = *(_QWORD *)(v15 + 8) - *(_QWORD *)v15;
    v19 = memcmp_0(*(const void **)v15, **v7, v17);
    if ( v19 )
    {
      v20 = v19 < 0;
    }
    else
    {
      if ( v18 < v16 )
        break;
      v20 = 0;
    }
    if ( v20 )
      break;
    v21 = (_BYTE *)v14[1] - (_BYTE *)*v14;
    v22 = *(_QWORD *)(v15 + 8) - *(_QWORD *)v15;
    v23 = v22;
    if ( v21 < v22 )
      v23 = (_BYTE *)v14[1] - (_BYTE *)*v14;
    v24 = memcmp_0(*v14, *(const void **)v15, v23);
    if ( v24 )
    {
      v25 = v24 < 0;
    }
    else
    {
      if ( v21 < v22 )
        break;
      v25 = 0;
    }
    if ( v25 )
      break;
    --v7;
  }
  if ( v13 < a3 )
  {
    v26 = *v7;
    v27 = (_BYTE *)(*v7)[1] - (_BYTE *)**v7;
    do
    {
      v28 = *v13;
      v29 = v27;
      v30 = (_BYTE *)(*v13)[1] - (_BYTE *)**v13;
      if ( v30 < v27 )
        v29 = (_BYTE *)(*v13)[1] - (_BYTE *)**v13;
      v31 = memcmp_0(**v13, *v26, v29);
      if ( v31 )
      {
        v32 = v31 < 0;
      }
      else
      {
        if ( v30 < v27 )
          break;
        v32 = 0;
      }
      if ( v32 )
        break;
      v33 = (_BYTE *)v28[1] - (_BYTE *)*v28;
      v34 = v33;
      v35 = (_BYTE *)v26[1] - (_BYTE *)*v26;
      if ( v35 < v33 )
        v34 = (_BYTE *)v26[1] - (_BYTE *)*v26;
      v36 = memcmp_0(*v26, **v13, v34);
      if ( v36 )
      {
        v37 = v36 < 0;
      }
      else
      {
        if ( v35 < v33 )
          break;
        v37 = 0;
      }
      if ( v37 )
        break;
      ++v13;
    }
    while ( v13 < a3 );
  }
  v38 = v13;
  v39 = v7;
  while ( 1 )
  {
LABEL_55:
    if ( v38 >= a3 )
      goto LABEL_73;
    v71 = *v38;
    v40 = (_BYTE *)(*v7)[1] - (_BYTE *)**v7;
    v41 = (_BYTE *)v71[1] - (_BYTE *)*v71;
    v42 = v41;
    if ( v40 < v41 )
      v42 = (_BYTE *)(*v7)[1] - (_BYTE *)**v7;
    v43 = memcmp_0(**v7, **v38, v42);
    if ( v43 )
    {
      v44 = v43 < 0;
    }
    else
    {
      if ( v40 < v41 )
        goto LABEL_54;
      v44 = 0;
    }
    if ( !v44 )
      break;
LABEL_54:
    ++v38;
  }
  v45 = (_BYTE *)(*v7)[1] - (_BYTE *)**v7;
  v46 = (_BYTE *)v71[1] - (_BYTE *)*v71;
  v47 = v45;
  if ( v46 < v45 )
    v47 = (_BYTE *)v71[1] - (_BYTE *)*v71;
  v48 = memcmp_0(*v71, **v7, v47);
  if ( v48 )
  {
    v49 = v48 < 0;
  }
  else
  {
    if ( v46 < v45 )
      goto LABEL_73;
    v49 = 0;
  }
  if ( !v49 )
  {
    v50 = *v13;
    *v13 = v71;
    *v38 = v50;
LABEL_53:
    ++v13;
    goto LABEL_54;
  }
LABEL_73:
  while ( a2 < v39 )
  {
    v72 = v39 - 1;
    v51 = (__int64)*(v39 - 1);
    v73 = v51;
    v52 = (_BYTE *)(*v7)[1] - (_BYTE *)**v7;
    v53 = v52;
    v54 = *(_QWORD *)(v51 + 8) - *(_QWORD *)v51;
    if ( v54 < v52 )
      v53 = *(_QWORD *)(v51 + 8) - *(_QWORD *)v51;
    v55 = memcmp_0(*(const void **)v51, **v7, v53);
    if ( v55 )
    {
      v56 = v55 < 0;
    }
    else
    {
      if ( v54 < v52 )
        goto LABEL_72;
      v56 = 0;
    }
    if ( v56 )
    {
LABEL_72:
      --v39;
    }
    else
    {
      v57 = (_BYTE *)(*v7)[1] - (_BYTE *)**v7;
      v58 = *(_QWORD *)(v73 + 8) - *(_QWORD *)v73;
      v59 = v58;
      if ( v57 < v58 )
        v59 = (_BYTE *)(*v7)[1] - (_BYTE *)**v7;
      v60 = memcmp_0(**v7, *(const void **)v73, v59);
      if ( v60 )
      {
        v61 = v60 < 0;
      }
      else
      {
        if ( v57 < v58 )
          break;
        v61 = 0;
      }
      if ( v61 )
        break;
      --v39;
      v62 = *--v7;
      *v7 = (const void **)v73;
      *v72 = v62;
    }
  }
  if ( v39 != a2 )
  {
    --v39;
    if ( v38 != a3 )
    {
      v68 = *v38;
      *v38 = *v39;
      *v39 = v68;
      goto LABEL_54;
    }
    if ( v39 != --v7 )
    {
      v66 = *v39;
      *v39 = *v7;
      *v7 = v66;
    }
    v67 = *v7;
    *v7 = *--v13;
    *v13 = v67;
    goto LABEL_55;
  }
  if ( v38 != a3 )
  {
    if ( v13 != v38 )
    {
      v63 = *v7;
      *v7 = *v13;
      *v13 = v63;
    }
    v64 = v7++;
    v65 = *v64;
    *v64 = *v38;
    *v38 = v65;
    goto LABEL_53;
  }
  result = a1;
  a1[1] = v13;
  *a1 = v7;
  return result;
}
