//----- (000000014000D8D0) ----------------------------------------------------
__int64 __fastcall Dnssrv_AutoConfigure(int a1, __int16 a2, const CHAR *a3)
{
  int v6; // r15d
  int v7; // r12d
  __int64 **v8; // r13
  int v9; // ebx
  int v10; // eax
  int v11; // eax
  __int64 v12; // r8
  int v13; // r9d
  unsigned int *v14; // r14
  CDnsClientSubnetRecordsTrie *v15; // rcx
  CDnsClientSubnetRecordsTrie *v16; // rcx
  unsigned __int16 v17; // dx
  int v18; // eax
  int v19; // edi
  __int64 v20; // rax
  __int64 v21; // rcx
  int v22; // edi
  __int64 v23; // rax
  __int64 v24; // rcx
  int ZonesForDomain; // edi
  __int64 v26; // rax
  __int64 v27; // rcx
  __int64 v28; // rdx
  unsigned __int16 *v29; // rdx
  unsigned __int16 *v30; // rcx
  unsigned __int16 *v31; // rcx
  unsigned __int16 *v32; // rcx
  unsigned int *v34; // [rsp+40h] [rbp-69h] BYREF
  void **v35; // [rsp+48h] [rbp-61h] BYREF
  int v36; // [rsp+50h] [rbp-59h]
  __int64 **v37; // [rsp+58h] [rbp-51h] BYREF
  __int128 v38; // [rsp+60h] [rbp-49h] BYREF
  __int128 v39; // [rsp+70h] [rbp-39h] BYREF
  unsigned __int16 *MessageString; // [rsp+80h] [rbp-29h]
  unsigned __int16 *v41; // [rsp+88h] [rbp-21h]
  unsigned __int16 *v42; // [rsp+90h] [rbp-19h]
  unsigned __int16 *v43; // [rsp+98h] [rbp-11h]
  unsigned __int16 *v44[4]; // [rsp+A0h] [rbp-9h] BYREF

  v36 = a1;
  v37 = 0i64;
  v41 = 0i64;
  v42 = 0i64;
  v43 = 0i64;
  v35 = 0i64;
  v6 = 0;
  v34 = 0i64;
  v7 = 0;
  MessageString = 0i64;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_D(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x62u, (__int64)&WPP_dd5a12aafb1b34b87fc868998e41e2af_Traceguids, a2);
  }
  if ( _InterlockedIncrement(&dword_1401B8C20) != 1 )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x63u, (__int64)&WPP_dd5a12aafb1b34b87fc868998e41e2af_Traceguids);
    }
    v8 = v37;
    v9 = 9005;
LABEL_97:
    v14 = v34;
    goto LABEL_98;
  }
  dword_1401B9714 = Dns_GetCurrentTimeInSeconds();
  dwAutoConfigEndTime = dword_1401B9714 + 300;
  v10 = allocateAdapterList(&v37);
  v8 = v37;
  if ( v10 || !v37 )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_D(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x64u,
        (__int64)&WPP_dd5a12aafb1b34b87fc868998e41e2af_Traceguids,
        (unsigned __int16)v10);
    }
    v9 = 87;
    goto LABEL_97;
  }
  if ( (a2 & 4) != 0 && g_ulDCsInForest == 1 && !dword_1401B9724 )
    v7 = 1;
  v11 = buildForwarderArrayFromPeer(a3, &v34);
  v9 = v11;
  if ( v11
    && WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_D(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x65u,
      (__int64)&WPP_dd5a12aafb1b34b87fc868998e41e2af_Traceguids,
      (unsigned __int16)v11);
  }
  v14 = v34;
  if ( v34 )
    goto LABEL_34;
  v9 = buildForwarderArrayFromDnsClient(v8, &v34, v12, v13);
  if ( !v9 )
    goto LABEL_28;
  v15 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_D(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x66u,
      (__int64)&WPP_dd5a12aafb1b34b87fc868998e41e2af_Traceguids,
      (unsigned __int16)v9);
LABEL_28:
    v15 = WPP_GLOBAL_Control;
  }
  v14 = v34;
  if ( !v34 )
  {
    if ( v15 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)v15 + 68) & 2) != 0
      && *((_BYTE *)v15 + 65) >= 4u )
    {
      WPP_SF_D(
        *((_QWORD *)v15 + 7),
        (_WORD)v34 + 103,
        (__int64)&WPP_dd5a12aafb1b34b87fc868998e41e2af_Traceguids,
        (unsigned __int16)v9);
    }
    goto LABEL_98;
  }
LABEL_34:
  if ( (a2 & 1) == 0 )
    goto LABEL_57;
  v9 = queryForRootServers(v8, 0i64, 0, 0, &v35);
  if ( v9 )
  {
    v16 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
    {
      goto LABEL_57;
    }
    v17 = 104;
    goto LABEL_56;
  }
  v18 = selectRootHints((__int64 **)v35);
  if ( v18 < 0 )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x69u, (__int64)&WPP_dd5a12aafb1b34b87fc868998e41e2af_Traceguids);
    }
    v9 = 9565;
    goto LABEL_57;
  }
  v9 = buildServerRootHints(v8, (__int64)v35[v18]);
  if ( !v9 )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x6Au, (__int64)&WPP_dd5a12aafb1b34b87fc868998e41e2af_Traceguids);
    }
    MessageString = (unsigned __int16 *)allocateMessageString(0x4000277Du);
    v6 = 1;
    goto LABEL_57;
  }
  v16 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    v17 = 107;
LABEL_56:
    WPP_SF_D(*((_QWORD *)v16 + 7), v17, (__int64)&WPP_dd5a12aafb1b34b87fc868998e41e2af_Traceguids, (unsigned __int16)v9);
  }
LABEL_57:
  if ( (a2 & 2) != 0 && !qword_1401B97D0 )
  {
    v19 = Config_SetupForwarders(a1, v14, 3, 0);
    if ( v19 )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_D(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x6Du,
          (__int64)&WPP_dd5a12aafb1b34b87fc868998e41e2af_Traceguids,
          (unsigned __int16)v19);
      }
      if ( v19 > v9 )
        v9 = v19;
    }
    else
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x6Cu, (__int64)&WPP_dd5a12aafb1b34b87fc868998e41e2af_Traceguids);
      }
      v20 = allocateMessageString(0x4000277Eu);
      v21 = v6++;
      (&MessageString)[v21] = (unsigned __int16 *)v20;
    }
  }
  if ( (a2 & 0x70) != 0 || v7 )
  {
    v22 = selfPointDnsClient((__int64)v8, a2);
    if ( v22 )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_D(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x6Fu,
          (__int64)&WPP_dd5a12aafb1b34b87fc868998e41e2af_Traceguids,
          (unsigned __int16)v9);
      }
      v9 = v22;
    }
    else
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x6Eu, (__int64)&WPP_dd5a12aafb1b34b87fc868998e41e2af_Traceguids);
      }
      v23 = allocateMessageString(0x4000277Fu);
      v24 = v6++;
      (&MessageString)[v24] = (unsigned __int16 *)v23;
    }
    if ( v7 )
    {
      ZonesForDomain = createZonesForDomain(v36);
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_D(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x70u,
          (__int64)&WPP_dd5a12aafb1b34b87fc868998e41e2af_Traceguids,
          (unsigned __int16)ZonesForDomain);
      }
      if ( ZonesForDomain )
      {
        v9 = ZonesForDomain;
      }
      else
      {
        v26 = allocateMessageString(0x40002780u);
        v27 = v6++;
        (&MessageString)[v27] = (unsigned __int16 *)v26;
      }
    }
  }
LABEL_98:
  freeAdapterList(v8);
  freeRecordSetArray(v35);
  Dns_Free(v14);
  _InterlockedDecrement(&dword_1401B8C20);
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_D(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x71u,
      (__int64)&WPP_dd5a12aafb1b34b87fc868998e41e2af_Traceguids,
      (unsigned __int16)v9);
  }
  if ( v6 )
  {
    v29 = (unsigned __int16 *)&LocaleName;
    v30 = (unsigned __int16 *)&LocaleName;
    if ( MessageString )
      v30 = MessageString;
    v44[0] = v30;
    v31 = (unsigned __int16 *)&LocaleName;
    if ( v41 )
      v31 = v41;
    v44[1] = v31;
    v32 = (unsigned __int16 *)&LocaleName;
    if ( v42 )
      v32 = v42;
    v44[2] = v32;
    v38 = DNS_EVENT_AUTOCONFIG_SUCCEEDED;
    if ( v43 )
      v29 = v43;
    v44[3] = v29;
    Eventlog_LogEvent((__int64)&v38, (__int64)v29, 4u, v44, (unsigned __int8 *)1, v9, 0, 0i64);
  }
  else if ( v9 )
  {
    v39 = DNS_EVENT_AUTOCONFIG_FAILED;
    Eventlog_LogEvent((__int64)&v39, v28, 0, 0i64, 0i64, v9, 0, 0i64);
  }
  return v9 & (unsigned int)-((a2 & 0x8000) != 0);
}
// 14000DA66: variable 'v12' is possibly undefined
// 14000DA66: variable 'v13' is possibly undefined
// 14000DF42: variable 'v28' is possibly undefined
// 1401872F0: using guessed type __int128 DNS_EVENT_AUTOCONFIG_SUCCEEDED;
// 1401875E8: using guessed type __int128 DNS_EVENT_AUTOCONFIG_FAILED;
// 1401B7EF4: using guessed type int g_ulDCsInForest;
// 1401B8C20: using guessed type int dword_1401B8C20;
// 1401B8C24: using guessed type int dwAutoConfigEndTime;
// 1401B9714: using guessed type int dword_1401B9714;
// 1401B9724: using guessed type int dword_1401B9724;
// 1401B97D0: using guessed type __int64 qword_1401B97D0;
