//----- (00000001401585B0) ----------------------------------------------------
void __fastcall DnsPrint_SecurityContext(__int64 a1, __int64 a2, const char *a3, __int64 a4)
{
  const unsigned __int8 *v6; // r8
  char v7; // al
  const char *v8; // rax
  const char *v9; // r8

  if ( a4 )
  {
    DnsPrint_Lock();
    v7 = byte_1401BA001;
    if ( (byte_1401BA001 & 0x20) != 0 )
    {
      v8 = DnsAddr_Ntoa((struct in_addr *)(a4 + 24));
      v9 = "Security context:";
      if ( a3 )
        v9 = a3;
      WPP_SF_sqqsssdqqqqddddddd(
        *(unsigned int *)(a4 + 160),
        (__int64)v8,
        (__int64)v9,
        a4,
        *(_QWORD *)a4,
        (__int64)v8,
        *(_QWORD *)(a4 + 88),
        *(_QWORD *)(a4 + 96));
      v7 = byte_1401BA001;
    }
    if ( !*(_DWORD *)(a4 + 140) && (v7 & 0x20) != 0 )
      WPP_SF_qq(
        20i64,
        (unsigned __int16)&WPP_9b9f12dbc4273be48aea1d81c92c8dd1_Traceguids,
        qword_1401BA078,
        g_hSspiCredentials);
    DnsPrint_Unlock();
  }
  else if ( (byte_1401BA001 & 0x20) != 0 )
  {
    v6 = &Annotation;
    if ( a3 )
      v6 = (const unsigned __int8 *)a3;
    WPP_SF_s(18i64, (unsigned __int16)&WPP_9b9f12dbc4273be48aea1d81c92c8dd1_Traceguids, (__int64)v6, 0i64);
  }
}
// 1401BA001: using guessed type char byte_1401BA001;
// 1401BA070: using guessed type __int64 g_hSspiCredentials;
// 1401BA078: using guessed type __int64 qword_1401BA078;
