//----- (0000000140128F70) ----------------------------------------------------
void __fastcall DnsSign::CCertificate::DeleteCertificateAndPrivateKey(PCCERT_CONTEXT *this)
{
  int LastError; // eax
  int v3; // ebx
  int v4; // ebx
  int v5; // eax
  int v6; // ebx
  BOOL pfCallerFreeProvOrNCryptKey; // [rsp+38h] [rbp-39h] BYREF
  DWORD pdwKeySpec; // [rsp+3Ch] [rbp-35h] BYREF
  HCRYPTPROV_OR_NCRYPT_KEY_HANDLE phCryptProvOrNCryptKey[2]; // [rsp+40h] [rbp-31h] BYREF
  char v10[56]; // [rsp+50h] [rbp-21h] BYREF
  char pExceptionObject[56]; // [rsp+88h] [rbp+17h] BYREF

  phCryptProvOrNCryptKey[1] = -2i64;
  phCryptProvOrNCryptKey[0] = 0i64;
  pdwKeySpec = 0;
  pfCallerFreeProvOrNCryptKey = 0;
  if ( !CryptAcquireCertificatePrivateKey(
          *this,
          0x40000u,
          0i64,
          phCryptProvOrNCryptKey,
          &pdwKeySpec,
          &pfCallerFreeProvOrNCryptKey) )
  {
    LastError = GetLastError();
    v3 = LastError;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 7) & 0x100000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 25) >= 4u )
    {
      WPP_SF_D(
        *((_QWORD *)WPP_GLOBAL_Control + 2),
        0x14u,
        (__int64)&WPP_53898a8021d033fe120236609d33d737_Traceguids,
        LastError);
    }
    DnsSign::CRunTimeException::CRunTimeException((DnsSign::CRunTimeException *)v10, v3);
    DnsSign::CException::AppendErrorMessageByID((DnsSign::CException *)v10, 0xD6D9Bu);
    DnsSign::CRunTimeException::CRunTimeException(
      (DnsSign::CRunTimeException *)pExceptionObject,
      (const struct DnsSign::CRunTimeException *)v10);
    CxxThrowException_0(pExceptionObject, (_ThrowInfo *)&TI2_AVCRunTimeException_DnsSign__);
  }
  v4 = NCryptDeleteKey(phCryptProvOrNCryptKey[0], 0);
  if ( v4 < 0 )
  {
    NCryptFreeObject(phCryptProvOrNCryptKey[0]);
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 7) & 0x100000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 25) >= 4u )
    {
      WPP_SF_D(
        *((_QWORD *)WPP_GLOBAL_Control + 2),
        0x15u,
        (__int64)&WPP_53898a8021d033fe120236609d33d737_Traceguids,
        v4);
    }
    DnsSign::CRunTimeException::CRunTimeException((DnsSign::CRunTimeException *)v10, v4);
    DnsSign::CException::AppendErrorMessageByID((DnsSign::CException *)v10, 0xD6D9Cu);
    DnsSign::CRunTimeException::CRunTimeException(
      (DnsSign::CRunTimeException *)pExceptionObject,
      (const struct DnsSign::CRunTimeException *)v10);
    CxxThrowException_0(pExceptionObject, (_ThrowInfo *)&TI2_AVCRunTimeException_DnsSign__);
  }
  if ( !CertDeleteCertificateFromStore(*this) )
  {
    v5 = GetLastError();
    v6 = v5;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 7) & 0x100000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 25) >= 4u )
    {
      WPP_SF_D(
        *((_QWORD *)WPP_GLOBAL_Control + 2),
        0x16u,
        (__int64)&WPP_53898a8021d033fe120236609d33d737_Traceguids,
        v5);
    }
    DnsSign::CRunTimeException::CRunTimeException((DnsSign::CRunTimeException *)v10, v6);
    DnsSign::CException::AppendErrorMessageByID((DnsSign::CException *)v10, 0xD6D9Au);
    *this = 0i64;
    DnsSign::CRunTimeException::CRunTimeException(
      (DnsSign::CRunTimeException *)pExceptionObject,
      (const struct DnsSign::CRunTimeException *)v10);
    CxxThrowException_0(pExceptionObject, (_ThrowInfo *)&TI2_AVCRunTimeException_DnsSign__);
  }
  *this = 0i64;
}
