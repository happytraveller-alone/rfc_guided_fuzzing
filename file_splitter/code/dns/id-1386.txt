//----- (00000001400AF134) ----------------------------------------------------
void **enforceCacheLimit()
{
  void **result; // rax
  int v1; // ebx
  __int64 v2; // rdx
  unsigned __int64 v3; // rbp
  unsigned __int64 v4; // r14
  CDnsClientSubnetRecordsTrie *v5; // r10
  __int128 *v6; // rax
  __int64 v7; // rsi
  _DWORD *v8; // r8
  unsigned __int8 v9; // di
  __int128 v10; // [rsp+60h] [rbp-38h] BYREF
  __int128 v11; // [rsp+70h] [rbp-28h] BYREF
  void *retaddr; // [rsp+98h] [rbp+0h] BYREF

  result = &retaddr;
  v1 = -1;
  if ( !dword_1401B9914 )
    return result;
  v2 = 1000 * dword_1401B9914 / 0xAu;
  v3 = 8 * (1000 * dword_1401B9914 / 0xAu);
  v4 = (unsigned int)(9 * v2);
  v5 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x100) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
  {
    WPP_SF_dLIIIidd(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      (unsigned __int8)CheckTimeoutBin,
      (unsigned int)qword_1401B9D18
    + (unsigned int)qword_1401B9D0C
    + (unsigned int)dword_1401B9C7C
    + (unsigned __int64)(unsigned int)qword_1401B9C70
    - v3,
      dword_1401B9714);
    v5 = WPP_GLOBAL_Control;
  }
  result = (void **)(unsigned int)qword_1401B9D18;
  if ( (unsigned int)qword_1401B9D18
     + (unsigned int)qword_1401B9D0C
     + (unsigned int)dword_1401B9C7C
     + (unsigned __int64)(unsigned int)qword_1401B9C70 < v3 )
    return result;
  if ( dword_1401B9A20 )
  {
    v6 = (__int128 *)&DNS_EVENT_CACHE_LIMIT_HIT_BY_RECURSION;
    if ( !bFastCachePurgeHappening )
      v6 = (__int128 *)&DNS_EVENT_CACHE_LIMIT_HIT_BY_TIMEOUT;
    v10 = *v6;
    Eventlog_LogEvent((__int64)&v10, v2, 1u, (unsigned __int16 **)&dword_1401B9914, (unsigned __int8 *)4, 0, 0, 0i64);
    v5 = WPP_GLOBAL_Control;
  }
  g_dwCacheFreeCount = 0;
  v7 = -1i64;
LABEL_12:
  v8 = dword_140191490;
  do
  {
    ++v1;
    ++v7;
    if ( v1 >= 4 )
      goto LABEL_44;
    v9 = CheckTimeoutBin;
    v2 = (__int64)&WPP_GLOBAL_Control;
    if ( v5 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)v5 + 17) & 0x100) != 0
      && *((_BYTE *)v5 + 65) >= 4u )
    {
      WPP_SF_Dd(*((_QWORD *)v5 + 7), 0x11u, (__int64)&WPP_fcef9ab22f0836151509c33d06164dff_Traceguids, v1);
      v5 = WPP_GLOBAL_Control;
      v2 = (__int64)&WPP_GLOBAL_Control;
      v8 = dword_140191490;
    }
    if ( v1 == 1 )
    {
      _InterlockedIncrement(&dword_1401C8518);
      v5 = WPP_GLOBAL_Control;
    }
    if ( (unsigned int)qword_1401B9D18
       + (unsigned int)qword_1401B9D0C
       + (unsigned int)dword_1401B9C7C
       + (unsigned __int64)(unsigned int)qword_1401B9C70 > v4 )
    {
      g_dwCacheLimitCurrentTimeAdjustment = -1;
      if ( v5 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)v5 + 17) & 0x100) != 0
        && *((_BYTE *)v5 + 65) >= 4u )
      {
        WPP_SF_ILd(*((_QWORD *)v5 + 7), 0x12u, (__int64)dword_140191490);
        v5 = WPP_GLOBAL_Control;
      }
      v1 = 4;
      v7 = 4i64;
      goto LABEL_30;
    }
    g_dwCacheLimitCurrentTimeAdjustment = dword_140191490[v7];
    if ( v5 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)v5 + 17) & 0x100) != 0
      && *((_BYTE *)v5 + 65) >= 4u )
    {
      WPP_SF_ILd(*((_QWORD *)v5 + 7), 0x13u, (__int64)dword_140191490);
      v5 = WPP_GLOBAL_Control;
LABEL_30:
      v8 = dword_140191490;
    }
  }
  while ( v9 == CurrentTimeoutBin );
  while ( 1 )
  {
    if ( *((_UNKNOWN **)&TimeoutBinArray + 2 * v9) == (_UNKNOWN *)((char *)&TimeoutBinArray + 16 * v9) )
      goto LABEL_40;
    if ( (unsigned int)qword_1401B9D18
       + (unsigned int)qword_1401B9D0C
       + (unsigned int)dword_1401B9C7C
       + (unsigned __int64)(unsigned int)qword_1401B9C70 < v3 )
      break;
    if ( g_fDnsServiceExit == 1 )
      goto LABEL_44;
    if ( v5 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)v5 + 17) & 0x100) != 0
      && *((_BYTE *)v5 + 65) >= 4u )
    {
      WPP_SF_Ddd(*((_QWORD *)v5 + 7), 0x14u, (__int64)&WPP_fcef9ab22f0836151509c33d06164dff_Traceguids, v9);
    }
    checkNodesInTimeoutBin(v9, 1);
    v5 = WPP_GLOBAL_Control;
LABEL_40:
    if ( --v9 == CurrentTimeoutBin )
      goto LABEL_12;
  }
  if ( dword_1401B9A20 )
  {
    v11 = DNS_EVENT_CACHE_LIMIT_REACHED;
    Eventlog_LogEvent((__int64)&v11, v2, 1u, (unsigned __int16 **)&dword_1401B9914, (unsigned __int8 *)4, 0, 0, 0i64);
    v5 = WPP_GLOBAL_Control;
  }
LABEL_44:
  if ( !g_dwCacheFreeCount )
  {
    _InterlockedIncrement(&dword_1401C8514);
    v5 = WPP_GLOBAL_Control;
  }
  g_dwCacheLimitCurrentTimeAdjustment = 0;
  if ( v5 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)v5 + 17) & 0x100) != 0
    && *((_BYTE *)v5 + 65) >= 4u )
  {
    WPP_SF_dIIil(*((_QWORD *)v5 + 7), v2, (__int64)v8, dword_1401B9714);
  }
  result = (void **)(unsigned int)qword_1401B9D18;
  if ( (unsigned int)qword_1401B9D18
     + (unsigned int)qword_1401B9D0C
     + (unsigned int)dword_1401B9C7C
     + (unsigned __int64)(unsigned int)qword_1401B9C70 <= v4 )
    _InterlockedIncrement(&dword_1401C850C);
  else
    _InterlockedIncrement(&dword_1401C8510);
  return result;
}
// 1400AF298: variable 'v2' is possibly undefined
// 1400AF571: variable 'v8' is possibly undefined
// 140186408: using guessed type __int128 DNS_EVENT_CACHE_LIMIT_REACHED;
// 140191490: using guessed type _DWORD dword_140191490[4];
// 1401B9074: using guessed type int g_dwCacheFreeCount;
// 1401B9078: using guessed type int g_dwCacheLimitCurrentTimeAdjustment;
// 1401B907C: using guessed type int bFastCachePurgeHappening;
// 1401B9714: using guessed type int dword_1401B9714;
// 1401B9914: using guessed type int dword_1401B9914;
// 1401B9A20: using guessed type int dword_1401B9A20;
// 1401B9A40: using guessed type int g_fDnsServiceExit;
// 1401B9C70: using guessed type __int64 qword_1401B9C70;
// 1401B9C7C: using guessed type int dword_1401B9C7C;
// 1401B9D0C: using guessed type __int64 qword_1401B9D0C;
// 1401B9D18: using guessed type __int64 qword_1401B9D18;
// 1401BA4B8: using guessed type char CurrentTimeoutBin;
// 1401BB4C0: using guessed type char CheckTimeoutBin;
// 1401C850C: using guessed type int dword_1401C850C;
// 1401C8510: using guessed type int dword_1401C8510;
// 1401C8514: using guessed type int dword_1401C8514;
// 1401C8518: using guessed type int dword_1401C8518;
