//----- (00000001401330D0) ----------------------------------------------------
__int64 __fastcall CDnsPolicy_ProtocolCriteriaTree::RemoveCriteriaNode(
        CDnsPolicy_ProtocolCriteriaTree *this,
        unsigned __int16 a2,
        struct CDnsPolicy_CriteriaNode *a3,
        __int64 a4)
{
  unsigned int v4; // edi
  unsigned __int64 v5; // rbx
  int v9; // ebx
  __int64 v10; // rax
  CDnsPolicy_CriteriaNode *v11; // rcx
  int v13; // [rsp+20h] [rbp-28h]
  DWORD LastError; // [rsp+28h] [rbp-20h]
  unsigned int v15; // [rsp+58h] [rbp+10h] BYREF

  v4 = 0;
  v5 = a2;
  if ( a2 >= 2ui64 )
    std::tr1::array<CDnsPolicy_CriteriaNode *,2>::_Xran();
  if ( *(_QWORD *)(*((_QWORD *)this + 1) + 8i64 * a2) )
  {
    v15 = -1;
    if ( (unsigned int)acquireWrite(a4, 0x2710u, &v15) == -1 )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        v9 = *((unsigned __int16 *)a3 + 24);
        LastError = GetLastError();
        v13 = v9;
        WPP_SF_qdD(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x38u,
          (__int64)&WPP_bbbcc621566c3408fe84d6a85874d543_Traceguids,
          a3,
          v13,
          LastError);
      }
    }
    else
    {
      v10 = *((_QWORD *)this + 1);
      if ( v5 >= 2 )
        std::tr1::array<CDnsPolicy_CriteriaNode *,2>::_Xran();
      v11 = *(CDnsPolicy_CriteriaNode **)(v10 + 8 * v5);
      *(_QWORD *)(v10 + 8 * v5) = 0i64;
      if ( v11 )
        CDnsPolicy_CriteriaNode::`scalar deleting destructor'(v11);
      v4 = 1;
      Lock_ReleaseWrite(a4);
    }
  }
  return v4;
}
