//----- (0000000140133574) ----------------------------------------------------
CDnsPolicy_InterfaceCriteriaTree *__fastcall CDnsPolicy_InterfaceCriteriaTree::CDnsPolicy_InterfaceCriteriaTree(
        CDnsPolicy_InterfaceCriteriaTree *this)
{
  _QWORD *v2; // rdi
  __int64 v3; // rbx
  _QWORD *v4; // rax
  __int64 i; // rcx
  _QWORD *v6; // rdi
  _QWORD *v7; // rax
  char pExceptionObject[32]; // [rsp+28h] [rbp-20h] BYREF

  *(_QWORD *)this = &CDnsPolicy_InterfaceCriteriaTree::`vftable';
  v2 = operator new(0x20ui64);
  v3 = 0i64;
  if ( v2 )
  {
    *v2 = Is_Less_ThanIP4;
    v2[2] = 0i64;
    v4 = operator new(0x30ui64);
    if ( !v4 )
    {
      std::bad_alloc::bad_alloc((std::bad_alloc *)pExceptionObject, 0i64);
      CxxThrowException_0(pExceptionObject, (_ThrowInfo *)&TI2_AVbad_alloc_std__);
    }
    v2[1] = v4;
    *v4 = v4;
    *(_QWORD *)(v2[1] + 8i64) = v2[1];
    *(_QWORD *)(v2[1] + 16i64) = v2[1];
    for ( i = 0i64; i < 2; ++i )
      *(_BYTE *)(v2[1] + i + 40) = 1;
  }
  else
  {
    v2 = 0i64;
  }
  *((_QWORD *)this + 1) = v2;
  v6 = operator new(0x20ui64);
  if ( v6 )
  {
    *v6 = Is_Less_ThanIP6;
    v6[2] = 0i64;
    v7 = operator new(0x38ui64);
    if ( !v7 )
    {
      std::bad_alloc::bad_alloc((std::bad_alloc *)pExceptionObject, 0i64);
      CxxThrowException_0(pExceptionObject, (_ThrowInfo *)&TI2_AVbad_alloc_std__);
    }
    v6[1] = v7;
    *v7 = v7;
    *(_QWORD *)(v6[1] + 8i64) = v6[1];
    *(_QWORD *)(v6[1] + 16i64) = v6[1];
    do
      *(_BYTE *)(v6[1] + v3++ + 48) = 1;
    while ( v3 < 2 );
  }
  else
  {
    v6 = 0i64;
  }
  *((_QWORD *)this + 2) = v6;
  return this;
}
// 140171D30: using guessed type void *CDnsPolicy_InterfaceCriteriaTree::`vftable';
