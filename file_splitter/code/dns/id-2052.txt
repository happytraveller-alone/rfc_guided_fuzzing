//----- (00000001400FE89C) ----------------------------------------------------
struct _DnssrvRpcZoneDnssecSettings *__fastcall Rpc_AllocateZoneSigningInfo(struct _zone_info *a1, int a2)
{
  __int64 *v2; // rax
  void *v3; // rbp
  int v5; // esi
  _DWORD *zero; // rax
  _DWORD *v7; // rbx
  int v8; // eax
  __int64 LastElement_ScopeMap; // rax
  char *v10; // rcx
  unsigned int v11; // eax
  void *v12; // rax
  bool v13; // zf

  v2 = (__int64 *)*((_QWORD *)a1 + 142);
  v3 = 0i64;
  v5 = 0;
  while ( v2 )
  {
    if ( a2 || !*((_DWORD *)v2 + 9) )
      ++v5;
    v2 = (__int64 *)*v2;
  }
  zero = MIDL_user_allocate_zero(8i64 * v5 + 128);
  v7 = zero;
  if ( zero )
  {
    zero[28] = v5;
    *zero = 1;
    v8 = (*((_DWORD *)a1 + 260) >> 2) & 1;
    v7[2] = v8;
    if ( *((_QWORD *)a1 + 23) )
    {
      if ( v8 )
      {
        LastElement_ScopeMap = Get_LastElement_ScopeMap((__int64)a1);
        if ( LastElement_ScopeMap )
          v7[2] = (*(_DWORD *)(LastElement_ScopeMap + 1040) >> 2) & 1;
      }
    }
    v7[3] = (*((_DWORD *)a1 + 260) >> 4) & 1;
    v7[4] = (*((_DWORD *)a1 + 260) >> 5) & 1;
    v7[5] = (*((_DWORD *)a1 + 260) >> 6) & 7;
    v7[6] = (*((_DWORD *)a1 + 260) >> 13) & 1;
    v7[7] = (*((_DWORD *)a1 + 260) >> 9) & 7;
    v7[8] = (*((_DWORD *)a1 + 260) >> 12) & 1;
    *((_BYTE *)v7 + 36) = *((_BYTE *)a1 + 1044);
    *((_BYTE *)v7 + 37) = *((_BYTE *)a1 + 1045);
    *((_WORD *)v7 + 19) = *((_WORD *)a1 + 523);
    v10 = (char *)*((_QWORD *)a1 + 131);
    if ( v10 )
      *((_QWORD *)v7 + 5) = Dns_StringCopyAllocate(v10, 0, 1i64, 1);
    v7[12] = *((_DWORD *)a1 + 264);
    v7[13] = *((_DWORD *)a1 + 265);
    v7[14] = *((_DWORD *)a1 + 266);
    v7[15] = *((_DWORD *)a1 + 267);
    v7[16] = *((_DWORD *)a1 + 268);
    v11 = *((_DWORD *)a1 + 274);
    if ( v11 )
    {
      v12 = MIDL_user_allocate_zero(v11);
      v3 = v12;
      if ( !v12 )
      {
LABEL_19:
        DnssrvFreeZoneSigningInfo((void **)v7);
        return 0i64;
      }
      memcpy_0(v12, *((const void **)a1 + 136), *((unsigned int *)a1 + 274));
    }
    v13 = v7[2] == 0;
    *((_QWORD *)v7 + 9) = v3;
    v7[17] = *((_DWORD *)a1 + 274);
    if ( v13 )
    {
      v7[24] = 0;
      *((_QWORD *)v7 + 13) = 0i64;
    }
    else if ( (unsigned int)Rpc_AllocateRR(a1, 0i64, v7 + 24, (unsigned __int8 **)v7 + 13) )
    {
      goto LABEL_19;
    }
  }
  return (struct _DnssrvRpcZoneDnssecSettings *)v7;
}
