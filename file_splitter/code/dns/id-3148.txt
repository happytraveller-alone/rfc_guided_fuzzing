//----- (00000001401678A0) ----------------------------------------------------
__int64 __fastcall NetpCreateSecurityDescriptor(__int64 a1, __int64 a2, void *a3, void *a4, struct _ACL **a5)
{
  SIZE_T v5; // r12
  char *v6; // r14
  NTSTATUS Acl; // ebx
  unsigned int v9; // ebp
  __int64 v10; // rsi
  ULONG v11; // edi
  ULONG v12; // r15d
  ULONG v13; // eax
  unsigned int v14; // ecx
  unsigned int v15; // eax
  struct _ACL *v16; // rax
  struct _ACL *v17; // rsi
  struct _ACL *v18; // rbp
  struct _ACL *v19; // rdi
  unsigned int v20; // r12d
  PSID **v21; // r15
  struct _ACL *v22; // r13
  ULONG v23; // eax
  ULONG AceListLength; // ebp
  PSID v25; // rdi
  ULONG v26; // eax
  struct _ACL *Dacl; // [rsp+30h] [rbp-48h]
  struct _ACL *Sacl; // [rsp+38h] [rbp-40h]

  Dacl = 0i64;
  LODWORD(v5) = 0;
  Sacl = 0i64;
  v6 = 0i64;
  Acl = -1073741811;
  v9 = 0;
  v10 = a1;
  v11 = 8;
  v12 = 8;
  do
  {
    v13 = RtlLengthSid(**(PSID **)(v10 + 8));
    if ( !*(_BYTE *)v10 || *(_BYTE *)v10 == 1 )
    {
      v14 = v13 + 8;
      v11 += v13 + 8;
    }
    else
    {
      if ( *(_BYTE *)v10 != 2 )
        return (unsigned int)Acl;
      v14 = v13 + 8;
      v12 += v13 + 8;
    }
    if ( (unsigned int)v5 > v14 )
      v14 = v5;
    ++v9;
    v10 += 16i64;
    v5 = v14;
  }
  while ( v9 < 2 );
  v15 = 40;
  if ( v11 != 8 )
    v15 = v11 + 40;
  if ( v12 != 8 )
    v15 += v12;
  if ( !v15 )
    return (unsigned int)-1073741801;
  v16 = (struct _ACL *)LocalAlloc(0, v15);
  if ( (v17 = v16) == 0i64 )
    return (unsigned int)-1073741801;
  v18 = v16 + 5;
  if ( v11 != 8 )
  {
    Dacl = v16 + 5;
    v18 = (struct _ACL *)((char *)v18 + v11);
    Acl = RtlCreateAcl(v16 + 5, v11, 2u);
    if ( Acl < 0 )
      goto LABEL_20;
  }
  if ( v12 == 8 )
  {
    v19 = 0i64;
  }
  else
  {
    Sacl = v18;
    v19 = v18;
    Acl = RtlCreateAcl(v18, v12, 2u);
    if ( Acl < 0 )
      goto LABEL_20;
  }
  if ( !(_DWORD)v5 || (v6 = (char *)LocalAlloc(0, v5)) == 0i64 )
  {
    Acl = -1073741801;
    goto LABEL_20;
  }
  v20 = 0;
  v21 = (PSID **)(a1 + 8);
  do
  {
    v22 = 0i64;
    v23 = RtlLengthSid(**v21);
    AceListLength = v23;
    switch ( *((_BYTE *)v21 - 8) )
    {
      case 0:
        v25 = **v21;
        *v6 = 0;
        goto LABEL_34;
      case 1:
        v25 = **v21;
        *v6 = 1;
LABEL_34:
        v22 = Dacl;
        goto LABEL_35;
      case 2:
        v22 = v19;
        v25 = **v21;
        *v6 = 2;
LABEL_35:
        AceListLength = v23 + 8;
        v6[1] = *((_BYTE *)v21 - 6) | *((_BYTE *)v21 - 7);
        *((_DWORD *)v6 + 1) = *((_DWORD *)v21 - 1);
        *((_WORD *)v6 + 1) = v23 + 8;
        v26 = RtlLengthSid(v25);
        Acl = RtlCopySid(v26, v6 + 8, v25);
        break;
    }
    if ( Acl < 0 )
      goto LABEL_20;
    Acl = RtlAddAce(v22, 2u, 0xFFFFFFFF, v6, AceListLength);
    if ( Acl < 0 )
      goto LABEL_20;
    v19 = Sacl;
    ++v20;
    v21 += 2;
  }
  while ( v20 < 2 );
  Acl = RtlCreateSecurityDescriptor(v17, 1u);
  if ( Acl >= 0 )
  {
    Acl = RtlSetOwnerSecurityDescriptor(v17, a3, 0);
    if ( Acl >= 0 )
    {
      Acl = RtlSetGroupSecurityDescriptor(v17, a4, 0);
      if ( Acl >= 0 )
      {
        Acl = RtlSetDaclSecurityDescriptor(v17, 1u, Dacl, 0);
        if ( Acl >= 0 )
        {
          Acl = RtlSetSaclSecurityDescriptor(v17, 0, Sacl, 0);
          if ( Acl >= 0 )
          {
            Acl = 0;
            *a5 = v17;
            goto LABEL_21;
          }
        }
      }
    }
  }
LABEL_20:
  LocalFree(v17);
LABEL_21:
  if ( v6 )
    LocalFree(v6);
  return (unsigned int)Acl;
}
