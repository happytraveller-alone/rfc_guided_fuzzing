//----- (00000001400E86A8) ----------------------------------------------------
__int64 __fastcall std::_Tree<std::_Tmap_traits<_CountName,std::unique_ptr<TrustPoint>,CountNameCompare,std::allocator<std::pair<_CountName const,std::unique_ptr<TrustPoint>>>,0>>::_Linsert(
        __int64 a1,
        __int64 a2,
        __int64 a3)
{
  _QWORD *v3; // rax
  __int64 v6; // rsi
  bool v7; // r14
  __int64 v8; // rbx
  int v9; // eax
  __int64 v10; // rbx
  char v11; // r8
  _QWORD *v12; // rax
  __int64 v13; // rax
  __int64 i; // rax
  struct _RTL_CRITICAL_SECTION *v15; // rcx
  __int64 v17; // [rsp+50h] [rbp+8h] BYREF

  v17 = a1;
  v3 = (_QWORD *)qword_1401B9288;
  v6 = qword_1401B9288;
  v7 = 1;
  v8 = *(_QWORD *)(qword_1401B9288 + 8);
  if ( !*(_BYTE *)(v8 + 297) )
  {
    do
    {
      v6 = v8;
      v9 = Name_CaseInsensitiveCompareCountNames((unsigned __int8 *)(a3 + 24), (unsigned __int8 *)(v8 + 24), 0i64);
      v7 = v9 < 0;
      if ( v9 >= 0 )
        v8 = *(_QWORD *)(v8 + 16);
      else
        v8 = *(_QWORD *)v8;
    }
    while ( !*(_BYTE *)(v8 + 297) );
    v3 = (_QWORD *)qword_1401B9288;
  }
  v10 = v6;
  if ( v7 )
  {
    if ( v6 == *v3 )
    {
      v11 = 1;
LABEL_10:
      v12 = std::_Tree<std::_Tmap_traits<_CountName,std::unique_ptr<TrustPoint>,CountNameCompare,std::allocator<std::pair<_CountName const,std::unique_ptr<TrustPoint>>>,0>>::_Insert(
              a1,
              &v17,
              v11,
              (_QWORD *)v6,
              (_QWORD *)a3);
      *(_BYTE *)(a2 + 8) = 1;
      *(_QWORD *)a2 = *v12;
      return a2;
    }
    if ( *(_BYTE *)(v6 + 297) )
    {
      v10 = *(_QWORD *)(v6 + 16);
    }
    else
    {
      v13 = *(_QWORD *)v6;
      if ( *(_BYTE *)(*(_QWORD *)v6 + 297i64) )
      {
        for ( i = *(_QWORD *)(v6 + 8); !*(_BYTE *)(i + 297) && v10 == *(_QWORD *)i; i = *(_QWORD *)(i + 8) )
          v10 = i;
        if ( !*(_BYTE *)(v10 + 297) )
          v10 = i;
      }
      else
      {
        do
        {
          v10 = v13;
          v13 = *(_QWORD *)(v13 + 16);
        }
        while ( !*(_BYTE *)(v13 + 297) );
      }
    }
  }
  if ( (int)Name_CaseInsensitiveCompareCountNames((unsigned __int8 *)(v10 + 24), (unsigned __int8 *)(a3 + 24), 0i64) < 0 )
  {
    v11 = v7;
    goto LABEL_10;
  }
  v15 = *(struct _RTL_CRITICAL_SECTION **)(a3 + 288);
  if ( v15 )
    TrustPoint::`scalar deleting destructor'(v15);
  operator delete((void *)a3);
  *(_QWORD *)a2 = v10;
  *(_BYTE *)(a2 + 8) = 0;
  return a2;
}
// 1400E8738: variable 'a1' is possibly undefined
// 140184CA8: using guessed type void __stdcall operator delete(void *);
// 1401B9288: using guessed type __int64 qword_1401B9288;
