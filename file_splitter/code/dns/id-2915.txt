//----- (0000000140152D98) ----------------------------------------------------
__int64 __fastcall DnsVal_GetAlgorithm(unsigned __int8 a1, char a2, LPCWSTR **a3)
{
  __int64 result; // rax
  __int64 v6; // rax
  _BYTE *v7; // rcx
  _BYTE *v8; // rcx
  __int64 v9; // rcx
  int v10; // eax
  const char *v11; // r9
  LPCWSTR *v12; // rbx
  int v13[8]; // [rsp+0h] [rbp-48h] BYREF
  __int64 v14; // [rsp+20h] [rbp-28h]
  BCRYPT_ALG_HANDLE hAlgorithm; // [rsp+30h] [rbp-18h] BYREF
  BCRYPT_ALG_HANDLE v16; // [rsp+38h] [rbp-10h] BYREF
  __int64 v17; // [rsp+58h] [rbp+10h] BYREF
  __int64 v18; // [rsp+68h] [rbp+20h] BYREF

  if ( a2 )
  {
    if ( !a1 )
      return 3221226021i64;
    v6 = 0i64;
    v7 = &DnsVal_Alg_Table;
    do
    {
      if ( *v7 == a1 )
        break;
      v6 = (unsigned int)(v6 + 1);
      v7 += 72;
    }
    while ( (unsigned int)v6 < 6 );
  }
  else
  {
    if ( !a1 )
      return 3221226021i64;
    v6 = 0i64;
    v8 = &unk_1401B6821;
    do
    {
      if ( *v8 == a1 )
        break;
      v6 = (unsigned int)(v6 + 1);
      v8 += 72;
    }
    while ( (unsigned int)v6 < 6 );
  }
  if ( (unsigned int)v6 >= 6 )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 25) >= 4u )
    {
      v9 = *((_QWORD *)WPP_GLOBAL_Control + 2);
      v10 = a1;
      v11 = "Digest";
      LODWORD(v14) = v10;
      if ( a2 )
        v11 = "Signature";
      WPP_SF_sd(v9, 0x41u, (__int64)&WPP_c53e2308f6cf3329db3757b8a77c9921_Traceguids, v11);
    }
    return 3221226021i64;
  }
  if ( a3 )
  {
    v12 = (LPCWSTR *)((char *)&DnsVal_Alg_Table + 72 * v6);
    if ( !*((_BYTE *)v12 + 40) )
    {
      result = DnsVal_InitAlgorithm(v12[1], v12[3], &hAlgorithm, &v16, &v17, &v18);
      if ( (int)result < 0 )
        return result;
      EnterCriticalSection(&DnsVal_Lock);
      if ( *((_BYTE *)v12 + 40) )
      {
        LeaveCriticalSection(&DnsVal_Lock);
        if ( hAlgorithm )
          BCryptCloseAlgorithmProvider(hAlgorithm, 0);
        if ( v16 )
          BCryptCloseAlgorithmProvider(v16, 0);
      }
      else
      {
        v12[7] = (LPCWSTR)hAlgorithm;
        v12[6] = (LPCWSTR)v16;
        *((_DWORD *)v12 + 16) = v17;
        *((_DWORD *)v12 + 17) = v18;
        _InterlockedOr(v13, 0);
        *((_BYTE *)v12 + 40) = 1;
        LeaveCriticalSection(&DnsVal_Lock);
      }
    }
    *a3 = v12;
  }
  return 0i64;
}
// 140152D98: using guessed type signed __int32 var_48[8];
