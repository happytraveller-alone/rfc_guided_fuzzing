//----- (00000001401336C0) ----------------------------------------------------
__int64 *__fastcall CDnsPolicy_InterfaceCriteriaTree::AddCriteriaNode(__int64 a1, struct in_addr *a2, __int64 a3)
{
  struct in_addr *v6; // r14
  const char *v7; // rax
  __int64 *v8; // rax
  CDnsPolicy_CriteriaNode *v9; // rsi
  CDnsPolicy_CriteriaNode *v10; // rbx
  __int64 v11; // rcx
  __int128 *v12; // r14
  const char *v13; // rax
  __int64 *v14; // rax
  CDnsPolicy_CriteriaNode *v15; // rsi
  CDnsPolicy_CriteriaNode *v16; // rbx
  __int64 *v17; // rax
  __int64 v18; // rcx
  __int64 *v19; // rbx
  _QWORD *v20; // rax
  int LastError; // eax
  __int64 v23; // rdi
  _QWORD *v24; // rax
  __int64 v25; // rdx
  __int128 v26; // [rsp+38h] [rbp-38h] BYREF
  CDnsPolicy_CriteriaNode *v27; // [rsp+48h] [rbp-28h]
  char pExceptionObject[32]; // [rsp+50h] [rbp-20h] BYREF
  __int64 *v29; // [rsp+A8h] [rbp+38h] BYREF
  __int64 v30; // [rsp+B8h] [rbp+48h] BYREF

  if ( a2->S_un.S_un_w.s_w1 == 2 )
  {
    v6 = a2 + 1;
    std::_Tree<std::_Tmap_traits<unsigned long,CDnsPolicy_CriteriaNode *,bool (*)(unsigned long const &,unsigned long const &),std::allocator<std::pair<unsigned long const,CDnsPolicy_CriteriaNode *>>,0>>::find(
      *(_QWORD *)(a1 + 8),
      &v29,
      (__int64)&a2[1]);
    if ( v29 == *(__int64 **)(*(_QWORD *)(a1 + 8) + 8i64) )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
      {
        v7 = DnsAddr_Ntoa(a2);
        WPP_SF_ssq(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x3Cu,
          (__int64)&WPP_bbbcc621566c3408fe84d6a85874d543_Traceguids,
          "IPv4",
          (__int64)v7);
      }
      v8 = (__int64 *)operator new(0x38ui64);
      v9 = (CDnsPolicy_CriteriaNode *)v8;
      v29 = v8;
      if ( v8 )
      {
        memset_0(v8, 0, 0x38ui64);
        v10 = CDnsPolicy_CriteriaNode::CDnsPolicy_CriteriaNode(v9);
      }
      else
      {
        v10 = 0i64;
      }
      v30 = (__int64)v10;
      *((_WORD *)v10 + 24) = 3;
      CDnsPolicy_CriteriaNode::AddNextCriteriaTrees(v10, 3u);
      LODWORD(v29) = -1;
      acquireWrite(a3, 0xFFFFFFFF, (unsigned int *)&v29);
      LODWORD(v26) = *v6;
      *((_QWORD *)&v26 + 1) = v10;
      std::_Tree<std::_Tmap_traits<unsigned long,CDnsPolicy_CriteriaNode *,bool (*)(unsigned long const &,unsigned long const &),std::allocator<std::pair<unsigned long const,CDnsPolicy_CriteriaNode *>>,0>>::insert<std::pair<unsigned long,CDnsPolicy_CriteriaNode *>>(
        *(_QWORD *)(a1 + 8),
        (__int64)pExceptionObject,
        (__int64)&v26);
LABEL_21:
      Lock_ReleaseWrite(a3);
      goto LABEL_24;
    }
    v11 = v29[4];
  }
  else
  {
    v12 = (__int128 *)&a2[2];
    std::_Tree<std::_Tmap_traits<IP6_ADDRESS,CDnsPolicy_CriteriaNode *,bool (*)(IP6_ADDRESS const &,IP6_ADDRESS const &),std::allocator<std::pair<IP6_ADDRESS const,CDnsPolicy_CriteriaNode *>>,0>>::find(
      *(_QWORD *)(a1 + 16),
      &v29,
      (__int64)&a2[2]);
    if ( v29 == *(__int64 **)(*(_QWORD *)(a1 + 16) + 8i64) )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
      {
        v13 = DnsAddr_Ntoa(a2);
        WPP_SF_ssq(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x3Du,
          (__int64)&WPP_bbbcc621566c3408fe84d6a85874d543_Traceguids,
          "IPv6",
          (__int64)v13);
      }
      v14 = (__int64 *)operator new(0x38ui64);
      v15 = (CDnsPolicy_CriteriaNode *)v14;
      v29 = v14;
      if ( v14 )
      {
        memset_0(v14, 0, 0x38ui64);
        v16 = CDnsPolicy_CriteriaNode::CDnsPolicy_CriteriaNode(v15);
      }
      else
      {
        v16 = 0i64;
      }
      v30 = (__int64)v16;
      *((_WORD *)v16 + 24) = 3;
      CDnsPolicy_CriteriaNode::AddNextCriteriaTrees(v16, 3u);
      LODWORD(v29) = -1;
      acquireWrite(a3, 0xFFFFFFFF, (unsigned int *)&v29);
      v26 = *v12;
      v27 = v16;
      std::_Tree<std::_Tmap_traits<IP6_ADDRESS,CDnsPolicy_CriteriaNode *,bool (*)(IP6_ADDRESS const &,IP6_ADDRESS const &),std::allocator<std::pair<IP6_ADDRESS const,CDnsPolicy_CriteriaNode *>>,0>>::insert<std::pair<IP6_ADDRESS,CDnsPolicy_CriteriaNode *>>(
        *(_QWORD *)(a1 + 16),
        (__int64)pExceptionObject,
        (__int64)&v26);
      goto LABEL_21;
    }
    v11 = v29[5];
  }
  v30 = v11;
LABEL_24:
  v17 = (__int64 *)operator new(0x18ui64, (const struct std::nothrow_t *)&std::nothrow);
  v19 = v17;
  v29 = v17;
  if ( v17 )
  {
    v17[1] = 0i64;
    v20 = operator new(0x18ui64);
    if ( !v20 )
    {
      std::bad_alloc::bad_alloc((std::bad_alloc *)pExceptionObject, 0i64);
      CxxThrowException_0(pExceptionObject, (_ThrowInfo *)&TI2_AVbad_alloc_std__);
    }
    *v19 = (__int64)v20;
    *v20 = v20;
    *(_QWORD *)(*v19 + 8) = *v19;
  }
  else
  {
    v19 = 0i64;
  }
  if ( v19 )
  {
    v23 = *v19;
    v24 = std::_List_val<CDNSPolicyCriteria *>::_Buynode(v18, *v19, *(_QWORD *)(*v19 + 8), &v30);
    v25 = v19[1];
    if ( v25 == 0x1FFFFFFFFFFFFFFEi64 )
      std::_Xlength_error("list<T> too long");
    v19[1] = v25 + 1;
    *(_QWORD *)(v23 + 8) = v24;
    *(_QWORD *)v24[1] = v24;
    return v19;
  }
  else
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      LastError = GetLastError();
      WPP_SF_D(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x3Eu,
        (__int64)&WPP_bbbcc621566c3408fe84d6a85874d543_Traceguids,
        LastError);
    }
    return 0i64;
  }
}
// 1401339A9: variable 'v18' is possibly undefined
