//----- (000000014015C1F0) ----------------------------------------------------
struct in_addr *__fastcall Wks_RecordBuildW(unsigned int a1, __int64 a2)
{
  __int64 v4; // rdi
  unsigned int v5; // r12d
  int Error; // ecx
  _QWORD *v7; // rcx
  __int64 v8; // rdx
  __int64 v9; // rax
  _WORD *Record; // rbx
  int v11; // eax
  const char *v12; // rax
  char *v13; // rsi
  struct protoent *v14; // rbp
  const WCHAR *v15; // rcx
  _BYTE *v16; // rsi
  void *v17; // rax
  void *v18; // r10
  __int64 v19; // rbp
  __int64 v20; // r9
  __int64 v21; // rdx
  _BYTE *v22; // rcx
  char v23; // al
  char **v24; // rdi
  const char *v25; // rax
  char *v26; // r15
  LPCWSTR Terminator; // [rsp+20h] [rbp-1E8h] BYREF
  struct WSAData WSAData; // [rsp+30h] [rbp-1D8h] BYREF

  LODWORD(v4) = 0;
  v5 = 3;
  if ( a1 < 3 )
    goto LABEL_2;
  v7 = (_QWORD *)(a2 + 16);
  v8 = a1 - 2;
  do
  {
    v9 = -1i64;
    do
      ++v9;
    while ( *(_WORD *)(*v7 + 2 * v9) );
    ++v7;
    v4 = (unsigned int)(v9 + v4 + 1);
    --v8;
  }
  while ( v8 );
  Record = Dns_AllocateRecordEx((unsigned __int16)(v4 + 6));
  if ( !Record )
    return 0i64;
  v11 = WSAStartup(0x202u, &WSAData);
  if ( !v11 )
  {
    v12 = (const char *)Dns_StringCopyAllocate(*(char **)a2, 0, 1i64, 2);
    v13 = (char *)v12;
    if ( v12 )
    {
      v14 = getprotobyname(v12);
      Dns_Free(v13);
      if ( !v14 || v14->p_proto >= 255 )
      {
        Dns_RecordFree((void **)Record);
        Error = WSAGetLastError();
        goto LABEL_35;
      }
      *((_BYTE *)Record + 36) = v14->p_proto;
      v15 = *(const WCHAR **)(a2 + 8);
      Terminator = 0i64;
      if ( RtlIpv4StringToAddressW(v15, 1u, &Terminator, (struct in_addr *)Record + 8) < 0 || Terminator && *Terminator )
      {
        Dns_RecordFree((void **)Record);
LABEL_2:
        Error = 13;
LABEL_35:
        SetLastError(Error);
        return 0i64;
      }
      *((_BYTE *)Record + 37) = v4;
      v16 = Record + 19;
      v17 = Dns_StringCopyAllocate(*(char **)(a2 + 16), 0, 1i64, 2);
      v18 = v17;
      if ( v17 )
      {
        v19 = v4;
        if ( (unsigned __int64)(v4 - 1) > 0x7FFFFFFE )
        {
          if ( (_DWORD)v4 )
            *v16 = 0;
        }
        else
        {
          v20 = (_BYTE *)v17 - v16;
          v21 = v4;
          v22 = Record + 19;
          do
          {
            if ( !(2147483646 - v4 + v21) )
              break;
            v23 = v22[v20];
            if ( !v23 )
              break;
            *v22++ = v23;
            --v21;
          }
          while ( v21 );
          if ( !v21 )
            --v22;
          *v22 = 0;
        }
        Dns_Free(v18);
        if ( a1 <= 3 )
        {
LABEL_32:
          WSACleanup();
          return (struct in_addr *)Record;
        }
        v24 = (char **)(a2 + 24);
        while ( 1 )
        {
          StringCchCatA((char *)Record + 38, v19, " ");
          v25 = (const char *)Dns_StringCopyAllocate(*v24, 0, 1i64, 2);
          v26 = (char *)v25;
          if ( !v25 )
            break;
          StringCchCatA((char *)Record + 38, v19, v25);
          Dns_Free(v26);
          ++v5;
          ++v24;
          if ( v5 >= a1 )
            goto LABEL_32;
        }
      }
    }
    Dns_RecordFree((void **)Record);
    Error = 14;
    goto LABEL_35;
  }
  SetLastError(v11);
  Dns_RecordFree((void **)Record);
  return 0i64;
}
// 14015C243: conditional instruction was optimized away because ecx.4>=3u
