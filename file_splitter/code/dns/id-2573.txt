//----- (00000001401301D8) ----------------------------------------------------
struct CDnsPolicy_CriteriaTree *__fastcall CDnsPolicy_CriteriaNode::GetNextCriteriaTree(
        CDnsPolicy_CriteriaNode *this,
        unsigned __int16 a2,
        int a3,
        __int64 a4)
{
  unsigned __int16 v5; // r10
  _QWORD *v6; // rax
  _QWORD *v7; // rbx
  int v8; // esi
  int v9; // edx
  CDnsPolicy_QTypeCriteriaTree *v10; // rdi
  int v11; // esi
  int v12; // esi
  int v13; // esi
  int v14; // esi
  int v15; // esi
  CDnsPolicy_TimeofDayCriteriaTree *v16; // rax
  CDnsPolicy_QTypeCriteriaTree *v17; // rax
  CDnsPolicy_TimeofDayCriteriaTree *v18; // rax
  CDnsPolicy_InterfaceCriteriaTree *v19; // rax
  CDnsPolicy_TimeofDayCriteriaTree *v20; // rax
  CDnsPolicy_TimeofDayCriteriaTree *v21; // rax
  CDnsPolicy_SubnetRecordCriteriaTree *v22; // rax
  CDnsPolicy_TimeofDayCriteriaTree *v24; // [rsp+50h] [rbp+8h] BYREF

  v5 = 1;
  v6 = (_QWORD *)*((_QWORD *)this + 3);
  v7 = (_QWORD *)*v6;
  if ( (_QWORD *)*v6 != v6 )
  {
    v8 = a2;
    v9 = a2 - *((unsigned __int16 *)this + 24);
    while ( v5 != v9 )
    {
      ++v5;
      v7 = (_QWORD *)*v7;
      if ( v7 == v6 )
        return (struct CDnsPolicy_CriteriaTree *)v7[2];
    }
    v10 = 0i64;
    if ( !v7[2] )
    {
      if ( a3 )
      {
        LODWORD(v24) = -1;
        acquireWrite(a4, 0x2710u, (unsigned int *)&v24);
        if ( v8 )
        {
          v11 = v8 - 1;
          if ( v11 )
          {
            v12 = v11 - 1;
            if ( v12 )
            {
              v13 = v12 - 1;
              if ( v13 )
              {
                v14 = v13 - 1;
                if ( !v14 )
                {
                  v18 = (CDnsPolicy_TimeofDayCriteriaTree *)operator new(0x10ui64);
                  v24 = v18;
                  if ( v18 )
                  {
                    *(_QWORD *)v18 = &CDnsPolicy_FQDNCriteriaTree::`vftable';
                    *((_QWORD *)v18 + 1) = 0i64;
                  }
                  else
                  {
                    v18 = 0i64;
                  }
                  v7[2] = v18;
                  goto LABEL_37;
                }
                v15 = v14 - 1;
                if ( v15 )
                {
                  if ( v15 != 1 )
                  {
LABEL_37:
                    Lock_ReleaseWrite(a4);
                    return (struct CDnsPolicy_CriteriaTree *)v7[2];
                  }
                  v16 = (CDnsPolicy_TimeofDayCriteriaTree *)operator new(0x10ui64);
                  v24 = v16;
                  if ( v16 )
                    v10 = CDnsPolicy_TimeofDayCriteriaTree::CDnsPolicy_TimeofDayCriteriaTree(v16);
                }
                else
                {
                  v17 = (CDnsPolicy_QTypeCriteriaTree *)operator new(0x10ui64);
                  v24 = v17;
                  if ( v17 )
                    v10 = CDnsPolicy_QTypeCriteriaTree::CDnsPolicy_QTypeCriteriaTree(v17);
                }
              }
              else
              {
                v19 = (CDnsPolicy_InterfaceCriteriaTree *)operator new(0x18ui64);
                v24 = v19;
                if ( v19 )
                  v10 = CDnsPolicy_InterfaceCriteriaTree::CDnsPolicy_InterfaceCriteriaTree(v19);
              }
            }
            else
            {
              v20 = (CDnsPolicy_TimeofDayCriteriaTree *)operator new(0x18ui64);
              v24 = v20;
              if ( v20 )
                v10 = (CDnsPolicy_QTypeCriteriaTree *)CDnsPolicy_ProtocolCriteriaTree::CDnsPolicy_ProtocolCriteriaTree(
                                                        (__int64)v20,
                                                        2);
            }
          }
          else
          {
            v21 = (CDnsPolicy_TimeofDayCriteriaTree *)operator new(0x18ui64);
            v24 = v21;
            if ( v21 )
              v10 = (CDnsPolicy_QTypeCriteriaTree *)CDnsPolicy_ProtocolCriteriaTree::CDnsPolicy_ProtocolCriteriaTree(
                                                      (__int64)v21,
                                                      1);
          }
        }
        else
        {
          v22 = (CDnsPolicy_SubnetRecordCriteriaTree *)operator new(0x10ui64);
          v24 = v22;
          if ( v22 )
            v10 = CDnsPolicy_SubnetRecordCriteriaTree::CDnsPolicy_SubnetRecordCriteriaTree(v22);
        }
        v7[2] = v10;
        goto LABEL_37;
      }
    }
  }
  return (struct CDnsPolicy_CriteriaTree *)v7[2];
}
// 140171AD0: using guessed type void *CDnsPolicy_FQDNCriteriaTree::`vftable';
