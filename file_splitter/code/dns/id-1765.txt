//----- (00000001400DE924) ----------------------------------------------------
void __fastcall addTrustPointToGlobalList(struct _RTL_CRITICAL_SECTION **a1, struct _DnsTreeNode *a2)
{
  struct _DnsTreeNode *v2; // r15
  int v4; // edi
  __int64 TrustPointName; // rax
  _QWORD *v6; // rax
  struct _RTL_CRITICAL_SECTION *v7; // rbx
  __int64 *v8; // r13
  __int64 v9; // rax
  struct _RTL_CRITICAL_SECTION *v10; // rcx
  __int64 v11; // rax
  struct _RTL_CRITICAL_SECTION *v12; // [rsp+48h] [rbp-19h] BYREF
  struct _RTL_CRITICAL_SECTION *v13; // [rsp+50h] [rbp-11h]
  __int64 v14; // [rsp+58h] [rbp-9h]
  void *v15[3]; // [rsp+60h] [rbp-1h] BYREF
  unsigned __int64 v16; // [rsp+78h] [rbp+17h]

  v14 = -2i64;
  v2 = a2;
  v4 = 0;
  LODWORD(v12) = 0;
  if ( a2 )
    goto LABEL_27;
  v12 = 0i64;
  if ( !(unsigned int)Zone_FindOrCreateTrustAnchorsZone((__int64 *)&v12) )
  {
    v2 = (struct _DnsTreeNode *)Lookup_ZoneNode(
                                  (__int64)v12,
                                  (unsigned __int8 *)&(*a1)[4].OwningThread + 2,
                                  0i64,
                                  0i64,
                                  32,
                                  0i64,
                                  0i64,
                                  0i64);
    if ( !v2 )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x100000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 3u )
      {
        TrustPointName = TrustPoint::GetTrustPointName((__int64)*a1, (__int64)v15);
        LOBYTE(v4) = 1;
        LODWORD(v12) = 1;
        if ( *(_QWORD *)(TrustPointName + 24) >= 0x10ui64 )
          TrustPointName = *(_QWORD *)TrustPointName;
        WPP_SF_s(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0xAu,
          (__int64)&WPP_4831604f5a2431d08120905ab66c1365_Traceguids,
          (const char *)TrustPointName);
      }
      if ( (v4 & 1) != 0 && v16 >= 0x10 )
        operator delete(v15[0]);
      if ( *a1 )
        TrustPoint::`scalar deleting destructor'(*a1);
LABEL_45:
      *a1 = 0i64;
      return;
    }
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x100000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      v6 = (_QWORD *)TrustPoint::GetTrustPointName((__int64)*a1, (__int64)v15);
      v4 = 2;
      LODWORD(v12) = 2;
      if ( v6[3] >= 0x10ui64 )
        v6 = (_QWORD *)*v6;
      WPP_SF_qs(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0xBu,
        (__int64)&WPP_4831604f5a2431d08120905ab66c1365_Traceguids,
        v2,
        v6);
    }
    if ( (v4 & 2) != 0 )
    {
      v4 &= ~2u;
      if ( v16 >= 0x10 )
        operator delete(v15[0]);
    }
LABEL_27:
    v12 = *a1;
    v7 = v12;
    v8 = (__int64 *)std::map<_CountName,std::unique_ptr<TrustPoint>,CountNameCompare,std::allocator<std::pair<_CountName const,std::unique_ptr<TrustPoint>>>>::operator[](
                      (__int64)a1,
                      (__int64)&v12[4].OwningThread);
    if ( v8 != (__int64 *)&v12 )
    {
      v9 = (__int64)v7;
      v13 = v7;
      v7 = 0i64;
      v12 = 0i64;
      v10 = (struct _RTL_CRITICAL_SECTION *)*v8;
      if ( v9 != *v8 )
      {
        if ( v10 )
        {
          TrustPoint::`scalar deleting destructor'(v10);
          v9 = (__int64)v13;
        }
        *v8 = v9;
      }
    }
    if ( v7 )
      TrustPoint::`scalar deleting destructor'(v7);
    *((_DWORD *)v2 + 23) |= 0x808000u;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x100000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      v11 = TrustPoint::GetTrustPointName((__int64)*a1, (__int64)v15);
      v4 |= 4u;
      LODWORD(v12) = v4;
      if ( *(_QWORD *)(v11 + 24) >= 0x10ui64 )
        v11 = *(_QWORD *)v11;
      WPP_SF_sq(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0xCu,
        (__int64)&WPP_4831604f5a2431d08120905ab66c1365_Traceguids,
        (const char *)v11);
    }
    if ( (v4 & 4) != 0 && v16 >= 0x10 )
      operator delete(v15[0]);
    if ( g_isRegisteredForUTC == 1 )
      dword_1401B960C = qword_1401B9290;
    goto LABEL_45;
  }
  if ( *a1 )
    TrustPoint::`scalar deleting destructor'(*a1);
  *a1 = 0i64;
}
// 1400DEAE9: variable 'a1' is possibly undefined
// 140184CA8: using guessed type void __stdcall operator delete(void *);
// 1401B9190: using guessed type int g_isRegisteredForUTC;
// 1401B9290: using guessed type __int64 qword_1401B9290;
// 1401B960C: using guessed type int dword_1401B960C;
