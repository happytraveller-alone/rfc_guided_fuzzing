//----- (000000014008AAE0) ----------------------------------------------------
void __fastcall RR_CacheWildcardNoExistData(__int64 a1, __int64 a2, unsigned __int16 a3, int a4, int a5, _DWORD *a6)
{
  _DWORD *v6; // rdi
  __int64 v7; // r14
  __int64 v12; // rbx
  __int64 v13; // r15
  _QWORD *TrustAnchorNode; // rax
  char *v15; // rax
  __int64 v16; // rbp
  int v17; // ecx
  _QWORD *v18; // rcx
  _QWORD **v19; // rbx

  v6 = a6;
  v7 = 0i64;
  if ( a6 && *a6 && a6[1] )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
    {
      WPP_SF_qsddd(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x21u,
        (__int64)&WPP_10d39582251c332017bd035d2c946054_Traceguids,
        a2,
        a2 + 102,
        a3,
        a4,
        a5);
    }
    LODWORD(a6) = -1;
    acquireUpdate(DbaseLock, 0xFFFFFFFF, (unsigned int *)&a6, 1);
    v12 = *(_QWORD *)(a2 + 64);
    v13 = 3i64;
    if ( !v12 )
      goto LABEL_33;
    do
    {
      if ( *(_WORD *)(v12 + 12) == a3 )
        break;
      v12 = *(_QWORD *)v12;
    }
    while ( v12 );
    if ( v12 )
    {
      Dbase_LockEx(a2, 2, (__int64)"ds\\dns\\server\\server\\rrlist.c", 247);
      if ( a1 )
      {
        TrustAnchorNode = findTrustAnchorNode(0i64, a2, 0);
        v7 = (__int64)TrustAnchorNode;
        if ( TrustAnchorNode )
        {
          if ( (unsigned int)Dnssec_IsNodeInsecure(*(_DWORD *)(a1 + 568), (__int64)TrustAnchorNode, a2, 0i64, 0i64) )
          {
            if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800) != 0
              && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
            {
              v15 = Dbg_NodeName(a2);
              WPP_SF_qs(
                *((_QWORD *)WPP_GLOBAL_Control + 7),
                0x23u,
                (__int64)&WPP_10d39582251c332017bd035d2c946054_Traceguids,
                v12,
                v15);
            }
            v7 = 0i64;
          }
        }
      }
      v16 = 0i64;
      *(_OWORD *)(v12 + 32) = *(_OWORD *)(v6 + 6);
      *(_QWORD *)(v12 + 48) = *((_QWORD *)v6 + 5);
      *((_QWORD *)v6 + 3) = 0i64;
      *((_QWORD *)v6 + 4) = 0i64;
      *((_QWORD *)v6 + 5) = 0i64;
      do
      {
        if ( v16 )
        {
          if ( v16 == 1 )
          {
            v17 = 64;
          }
          else
          {
            v17 = 0;
            if ( v16 == 2 )
              v17 = 128;
          }
        }
        else
        {
          v17 = 32;
        }
        processNonExistenceRecordList(a1, v7, a2, v12, v17, a4, *(_QWORD *)(v12 + 8 * v16++ + 32));
      }
      while ( v16 < 3 );
      if ( (*(_BYTE *)(v12 + 28) & 4) != 0 )
        Dnssec_MsgAddValidatorRecordSet(a1, a2, *(_WORD *)(v12 + 12), 0xFFF0u, 0);
      Dbase_UnlockEx(a2, 2, (__int64)"ds\\dns\\server\\server\\rrlist.c", 83);
    }
    else
    {
LABEL_33:
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_Dq(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x22u,
          (__int64)&WPP_10d39582251c332017bd035d2c946054_Traceguids,
          a3);
      }
    }
    v18 = (_QWORD *)*((_QWORD *)v6 + 2);
    if ( v18 )
    {
      RR_ListFree(v18);
      *((_QWORD *)v6 + 2) = 0i64;
    }
    v19 = (_QWORD **)(v6 + 6);
    do
    {
      if ( *v19 )
      {
        RR_ListFree(*v19);
        *v19 = 0i64;
      }
      ++v19;
      --v13;
    }
    while ( v13 );
    LODWORD(a6) = -1;
    releaseUpdate(DbaseLock, (unsigned int *)&a6, 1);
  }
}
// 1401EC5E8: using guessed type __int64 DbaseLock;
