//----- (00000001400E5220) ----------------------------------------------------
__int64 __fastcall std::map<_CountName,std::unique_ptr<TrustPoint>,CountNameCompare,std::allocator<std::pair<_CountName const,std::unique_ptr<TrustPoint>>>>::operator[](
        __int64 a1,
        __int64 a2)
{
  __int64 v3; // rax
  __int64 v4; // rdi
  __int64 v5; // rbx
  __int128 *v6; // rcx
  __int64 v7; // rax
  char *v8; // rax
  __int64 v9; // rcx
  __int64 v11[4]; // [rsp+20h] [rbp-148h] BYREF
  __int128 v12[16]; // [rsp+40h] [rbp-128h] BYREF
  TrustPoint *v13; // [rsp+148h] [rbp-20h]

  v11[1] = -2i64;
  v3 = qword_1401B9288;
  v4 = *(_QWORD *)(qword_1401B9288 + 8);
  v5 = qword_1401B9288;
  if ( !*(_BYTE *)(v4 + 297) )
  {
    do
    {
      if ( (int)Name_CaseInsensitiveCompareCountNames((unsigned __int8 *)(v4 + 24), (unsigned __int8 *)a2, 0i64) >= 0 )
      {
        v5 = v4;
        v4 = *(_QWORD *)v4;
      }
      else
      {
        v4 = *(_QWORD *)(v4 + 16);
      }
    }
    while ( !*(_BYTE *)(v4 + 297) );
    v3 = qword_1401B9288;
  }
  if ( v5 == v3
    || (int)Name_CaseInsensitiveCompareCountNames((unsigned __int8 *)a2, (unsigned __int8 *)(v5 + 24), 0i64) < 0 )
  {
    v6 = v12;
    v7 = 2i64;
    do
    {
      *v6 = *(_OWORD *)a2;
      v6[1] = *(_OWORD *)(a2 + 16);
      v6[2] = *(_OWORD *)(a2 + 32);
      v6[3] = *(_OWORD *)(a2 + 48);
      v6[4] = *(_OWORD *)(a2 + 64);
      v6[5] = *(_OWORD *)(a2 + 80);
      v6[6] = *(_OWORD *)(a2 + 96);
      v6 += 8;
      *(v6 - 1) = *(_OWORD *)(a2 + 112);
      a2 += 128i64;
      --v7;
    }
    while ( v7 );
    *(_WORD *)v6 = *(_WORD *)a2;
    v11[2] = 0i64;
    v13 = 0i64;
    v8 = std::_Tree_val<std::_Tmap_traits<_CountName,std::unique_ptr<TrustPoint>,CountNameCompare,std::allocator<std::pair<_CountName const,std::unique_ptr<TrustPoint>>>,0>>::_Buynode<std::pair<_CountName const,std::unique_ptr<TrustPoint>>>(
           (__int64)v6,
           v12);
    std::_Tree<std::_Tmap_traits<_CountName,std::unique_ptr<TrustPoint>,CountNameCompare,std::allocator<std::pair<_CountName const,std::unique_ptr<TrustPoint>>>,0>>::_Insert(
      v9,
      v11,
      (__int64 *)v5,
      (__int64)v8);
    v5 = v11[0];
    if ( v13 )
      TrustPoint::`scalar deleting destructor'((struct _RTL_CRITICAL_SECTION *)v13);
  }
  return v5 + 288;
}
// 1400E5334: variable 'v9' is possibly undefined
// 1401B9288: using guessed type __int64 qword_1401B9288;
// 1400E5220: using guessed type _OWORD var_128[16];
