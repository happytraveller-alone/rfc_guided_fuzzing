//----- (000000014014F4CC) ----------------------------------------------------
__int64 __fastcall CDnsRRLManager::ApplyLazyLRUOnHashTable(CDnsRRLManager *this)
{
  CDnsRRLManager *v1; // rbp
  unsigned int v2; // r14d
  struct _RTL_CRITICAL_SECTION *v3; // rdi
  struct IDnsRRLStateInfo *v4; // rbx
  ULONGLONG TickCount64; // rsi
  unsigned __int64 v6; // rax
  __int64 v7; // rax
  __int64 v8; // rax
  __int64 v9; // rdx
  __int64 v10; // r8
  __int64 v12; // [rsp+20h] [rbp-28h]
  __int64 v13; // [rsp+28h] [rbp-20h]

  v1 = g_DnsRRLManager;
  v2 = 0;
  v3 = (struct _RTL_CRITICAL_SECTION *)((char *)g_DnsRRLManager + 48);
  EnterCriticalSection((LPCRITICAL_SECTION)((char *)g_DnsRRLManager + 48));
  v4 = (struct IDnsRRLStateInfo *)(*(__int64 (__fastcall **)(_QWORD, __int64))(**((_QWORD **)v1 + 4) + 24i64))(
                                    *((_QWORD *)v1 + 4),
                                    1i64);
  if ( v4 )
  {
    while ( !(*(unsigned int (__fastcall **)(struct IDnsRRLStateInfo *))(*(_QWORD *)v4 + 80i64))(v4) )
    {
      TickCount64 = GetTickCount64();
      v6 = (*(__int64 (__fastcall **)(struct IDnsRRLStateInfo *))(*(_QWORD *)v4 + 48i64))(v4);
      if ( TickCount64 < v6 )
      {
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800000) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
        {
          v8 = (*(__int64 (__fastcall **)(struct IDnsRRLStateInfo *))(*(_QWORD *)v4 + 48i64))(v4);
          LODWORD(v13) = 534;
          WPP_SF_iid(*((_QWORD *)WPP_GLOBAL_Control + 7), v9, v10, TickCount64, v8, v13);
        }
        LeaveCriticalSection(v3);
      }
      else
      {
        if ( TickCount64 - v6 <= (unsigned int)(1000 * *((_DWORD *)g_DnsRRLConfigParams + 5)) )
          goto LABEL_17;
        v7 = (*(__int64 (__fastcall **)(struct IDnsRRLStateInfo *))(*(_QWORD *)v4 + 8i64))(v4);
        (*(void (__fastcall **)(_QWORD, __int64))(**((_QWORD **)v1 + 5) + 8i64))(*((_QWORD *)v1 + 5), v7);
        (*(void (__fastcall **)(_QWORD, struct IDnsRRLStateInfo *))(**((_QWORD **)v1 + 4) + 32i64))(
          *((_QWORD *)v1 + 4),
          v4);
        LeaveCriticalSection(v3);
        CDnsRRLManager::AddNodeToFreeList(v1, v4);
        ++v2;
      }
      EnterCriticalSection(v3);
      v4 = (struct IDnsRRLStateInfo *)(*(__int64 (__fastcall **)(_QWORD, __int64))(**((_QWORD **)v1 + 4) + 24i64))(
                                        *((_QWORD *)v1 + 4),
                                        1i64);
      if ( !v4 )
        goto LABEL_17;
    }
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      LODWORD(v12) = (*(__int64 (__fastcall **)(struct IDnsRRLStateInfo *))(*(_QWORD *)v4 + 80i64))(v4);
      WPP_SF_qd(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x1Fu,
        (__int64)&WPP_9d24e83261bb323d145bf67b982c6afc_Traceguids,
        v4,
        v12);
    }
  }
LABEL_17:
  LeaveCriticalSection(v3);
  return v2;
}
// 14014F60A: variable 'v9' is possibly undefined
// 14014F60A: variable 'v10' is possibly undefined
// 14014F60A: variable 'v13' is possibly undefined
// 14014F68D: variable 'v12' is possibly undefined
// 140185140: using guessed type __int64 (__fastcall *_guard_dispatch_icall_fptr)(_QWORD, _QWORD);
