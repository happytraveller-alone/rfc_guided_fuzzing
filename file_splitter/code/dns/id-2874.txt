//----- (000000014014F6C0) ----------------------------------------------------
__int64 __fastcall CDnsRRLManager::ApplyAggressiveLRUOnHashTable(CDnsRRLManager *this)
{
  CDnsRRLManager *v1; // rbp
  int FreeListSize; // ebx
  int v3; // eax
  unsigned int v4; // r15d
  int v5; // r8d
  unsigned int v6; // eax
  unsigned int v7; // edi
  int v8; // r14d
  __int64 v9; // rax
  struct IDnsRRLStateInfo *v10; // rbx
  __int64 v11; // rax
  int v13; // [rsp+20h] [rbp-28h]

  v1 = g_DnsRRLManager;
  FreeListSize = CDnsRRLManager::GetFreeListSize(g_DnsRRLManager);
  v3 = (***((__int64 (__fastcall ****)(_QWORD))v1 + 4))(*((_QWORD *)v1 + 4));
  v4 = 0;
  v5 = v3 + FreeListSize;
  v6 = 100 * v3 / (unsigned int)(v3 + FreeListSize);
  if ( v6 < 0x55 )
    return 0i64;
  v7 = v5 * (v6 - 75) / 0x64;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_D(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x21u, (__int64)&WPP_9d24e83261bb323d145bf67b982c6afc_Traceguids, v7);
  }
  v8 = 0;
  if ( v7 )
  {
    while ( 1 )
    {
      EnterCriticalSection((LPCRITICAL_SECTION)((char *)v1 + 48));
      v9 = (*(__int64 (__fastcall **)(_QWORD, __int64))(**((_QWORD **)v1 + 4) + 24i64))(*((_QWORD *)v1 + 4), 1i64);
      v10 = (struct IDnsRRLStateInfo *)v9;
      if ( !v9 )
        break;
      if ( (*(unsigned int (__fastcall **)(__int64))(*(_QWORD *)v9 + 80i64))(v9) )
      {
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800000) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          v13 = (*(__int64 (__fastcall **)(struct IDnsRRLStateInfo *))(*(_QWORD *)v10 + 80i64))(v10);
          WPP_SF_qd(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x23u,
            (__int64)&WPP_9d24e83261bb323d145bf67b982c6afc_Traceguids,
            v10,
            v13);
        }
        goto LABEL_19;
      }
      (*(void (__fastcall **)(_QWORD, struct IDnsRRLStateInfo *))(**((_QWORD **)v1 + 4) + 32i64))(
        *((_QWORD *)v1 + 4),
        v10);
      v11 = (*(__int64 (__fastcall **)(struct IDnsRRLStateInfo *))(*(_QWORD *)v10 + 8i64))(v10);
      (*(void (__fastcall **)(_QWORD, __int64))(**((_QWORD **)v1 + 5) + 8i64))(*((_QWORD *)v1 + 5), v11);
      LeaveCriticalSection((LPCRITICAL_SECTION)((char *)v1 + 48));
      CDnsRRLManager::AddNodeToFreeList(v1, v10);
      ++v4;
      if ( ++v8 >= v7 )
        return v4;
    }
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      WPP_SF_D(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x22u,
        (__int64)&WPP_9d24e83261bb323d145bf67b982c6afc_Traceguids,
        v8);
    }
LABEL_19:
    LeaveCriticalSection((LPCRITICAL_SECTION)((char *)v1 + 48));
  }
  return v4;
}
// 140185140: using guessed type __int64 (__fastcall *_guard_dispatch_icall_fptr)(_QWORD, _QWORD);
