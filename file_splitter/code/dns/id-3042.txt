//----- (000000014015CE4C) ----------------------------------------------------
__int64 __fastcall Dns_DowncaseNameLabel(CHAR *a1, unsigned __int8 *a2, unsigned int a3, const char *a4)
{
  int v4; // r14d
  unsigned __int8 *v5; // rbx
  CHAR *v6; // rsi
  unsigned int v7; // edi
  unsigned __int8 *v8; // r12
  int v9; // ecx
  unsigned int v10; // edx
  int v11; // r15d
  __int64 v12; // r13
  GUID *v13; // rcx
  __int64 v14; // rdx
  char v15; // al
  __int64 v16; // rbx
  _BYTE *v17; // r8
  int v18; // edi
  GUID *v19; // rcx
  __int64 v20; // rdx
  char v21; // al
  CHAR *v22; // rsi
  unsigned int v23; // eax
  const char *v24; // r9
  unsigned __int64 v25; // rbx
  __int64 v26; // rdx
  __int16 *v27; // rcx
  __int16 v28; // ax
  __int64 v29; // rdx
  __int16 *v30; // rcx
  __int16 v31; // ax
  unsigned int v32; // eax
  const unsigned __int16 *v33; // r9
  __int64 v34; // rbx
  GUID *v35; // rcx
  __int64 v36; // rdx
  char v37; // al
  char v38; // cl
  char *v39; // rcx
  __int64 v40; // rdx
  char v41; // al
  GUID *v42; // rcx
  __int64 v43; // rdx
  char v44; // al
  __int64 v46; // rdx
  signed __int64 v47; // rsi
  GUID *v48; // rcx
  char v49; // al
  signed __int64 v50; // rbx
  GUID *v51; // rcx
  char v52; // al
  LPWSTR lpWideCharStr; // [rsp+20h] [rbp-E0h]
  DWORD LastError; // [rsp+30h] [rbp-D0h]
  int v56; // [rsp+44h] [rbp-BCh]
  unsigned int v57; // [rsp+48h] [rbp-B8h]
  int v59; // [rsp+58h] [rbp-A8h] BYREF
  LPCCH lpMultiByteStr; // [rsp+60h] [rbp-A0h]
  GUID v61[4]; // [rsp+70h] [rbp-90h] BYREF
  char v62[64]; // [rsp+B0h] [rbp-50h] BYREF
  __int16 v63[64]; // [rsp+F0h] [rbp-10h] BYREF
  WCHAR WideCharStr[64]; // [rsp+170h] [rbp+70h] BYREF

  v4 = 0;
  v5 = a2;
  lpMultiByteStr = a1;
  v6 = a1;
  v7 = a3;
  v8 = a2;
  v9 = 0;
  v59 = 0;
  v10 = a3;
  v56 = 0;
  v11 = (int)a4;
  v57 = a3;
  v12 = 64i64;
  if ( (byte_1401BA001 & 4) != 0 )
  {
    if ( a3 <= 0x7FFFFFFEui64 )
    {
      v13 = v61;
      v14 = 64i64;
      do
      {
        if ( !(v14 + a3 - 64i64) )
          break;
        v15 = *((_BYTE *)&v13->Data1 + v5 - (unsigned __int8 *)v61);
        if ( !v15 )
          break;
        LOBYTE(v13->Data1) = v15;
        v13 = (GUID *)((char *)v13 + 1);
        --v14;
      }
      while ( v14 );
      if ( !v14 )
        v13 = (GUID *)((char *)v13 - 1);
      LOBYTE(v13->Data1) = 0;
    }
    else
    {
      LOBYTE(v61[0].Data1) = 0;
    }
    WPP_SF_sd(
      26i64,
      (unsigned __int16)&WPP_4a022543b8ef3aed3b38f7eb0a9b5a9a_Traceguids,
      (__int64)v61,
      (const char *)(unsigned int)a4);
    v9 = 0;
    v10 = v7;
  }
  if ( v7 - 1 > 0x3E )
  {
LABEL_49:
    if ( (g_rgFastWppEnabledFlagsPerLevel & 0x20) != 0 )
    {
      if ( v7 <= 0x7FFFFFFEui64 )
      {
        v50 = v5 - (unsigned __int8 *)v61;
        v51 = v61;
        do
        {
          if ( !(v7 + v12 - 64) )
            break;
          v52 = *((_BYTE *)&v51->Data1 + v50);
          if ( !v52 )
            break;
          LOBYTE(v51->Data1) = v52;
          v51 = (GUID *)((char *)v51 + 1);
          --v12;
        }
        while ( v12 );
        if ( !v12 )
          v51 = (GUID *)((char *)v51 - 1);
        LOBYTE(v51->Data1) = 0;
      }
      else
      {
        LOBYTE(v61[0].Data1) = 0;
      }
      WPP_SF_sdD(
        37i64,
        (unsigned __int16)&WPP_4a022543b8ef3aed3b38f7eb0a9b5a9a_Traceguids,
        (__int64)v61,
        (const char *)v57);
    }
    return 0xFFFFFFFFi64;
  }
  while ( 1 )
  {
    v16 = *v8;
    v17 = DnsCharPropertyTable;
    --v10;
    *v6++ = v16;
    v57 = v10;
    ++v8;
    v18 = *(_DWORD *)&DnsCharPropertyTable[4 * v16];
    if ( v4 )
    {
      if ( (v18 & 0x10) != 0 )
      {
        v59 = --v4;
        goto LABEL_37;
      }
      if ( (g_rgFastWppEnabledFlagsPerLevel & 0x20) != 0 )
      {
        WPP_SF_c(0x1Bu, (__int64)&WPP_4a022543b8ef3aed3b38f7eb0a9b5a9a_Traceguids, v16);
        v9 = v56;
        v10 = v57;
      }
      v9 |= 0x20000u;
      v56 = v9;
    }
    if ( (v18 & 1) != 0 )
    {
      if ( (v18 & 4) != 0 )
        *(v6 - 1) = v16 + 32;
      goto LABEL_37;
    }
    if ( (unsigned __int8)v16 >= 0x80u )
    {
      if ( (unsigned int)Dns_ValidateUtf8Byte(v16, &v59, (__int64)v17) )
      {
        if ( (g_rgFastWppEnabledFlagsPerLevel & 0x20) != 0 )
          WPP_SF_c(0x1Cu, (__int64)&WPP_4a022543b8ef3aed3b38f7eb0a9b5a9a_Traceguids, v16);
        v7 = a3;
        v5 = a2;
        goto LABEL_49;
      }
      v4 = v59;
      v9 = v56 | 0x10000;
      v56 |= 0x10000u;
      goto LABEL_36;
    }
    if ( (_BYTE)v16 == 95 )
    {
      if ( v10 != a3 - 1 )
      {
        v9 |= 0x1000u;
        v56 = v9;
      }
      goto LABEL_37;
    }
    if ( (_BYTE)v16 != 47 )
      break;
    if ( v10 && v10 != a3 - 1 )
      goto LABEL_37;
LABEL_34:
    v9 |= 0x20000u;
    v56 = v9;
    if ( (g_rgFastWppEnabledFlagsPerLevel & 0x20) != 0 )
    {
      WPP_SF_c(0x1Du, (__int64)&WPP_4a022543b8ef3aed3b38f7eb0a9b5a9a_Traceguids, v16);
      v9 = v56;
LABEL_36:
      v10 = v57;
    }
LABEL_37:
    if ( !v10 )
      goto LABEL_38;
  }
  if ( (_BYTE)v16 != 42 || v10 )
    goto LABEL_34;
LABEL_38:
  v57 = v10 - 1;
  if ( v9 )
  {
    if ( (v9 & 0x20000) != 0 && v11 != 3 )
      goto LABEL_135;
    if ( (v9 & 0x10000) != 0 )
    {
      if ( (unsigned int)(v11 - 2) <= 1 )
      {
        if ( (g_rgFastWppEnabledFlagsPerLevel & 0x20) != 0 )
        {
          v7 = a3;
          if ( a3 <= 0x7FFFFFFEui64 )
          {
            v19 = v61;
            v20 = 64i64;
            do
            {
              if ( !(v20 + a3 - 64i64) )
                break;
              v21 = *((_BYTE *)&v19->Data1 + a2 - (unsigned __int8 *)v61);
              if ( !v21 )
                break;
              LOBYTE(v19->Data1) = v21;
              v19 = (GUID *)((char *)v19 + 1);
              --v20;
            }
            while ( v20 );
            if ( !v20 )
              v19 = (GUID *)((char *)v19 - 1);
            LOBYTE(v19->Data1) = 0;
          }
          else
          {
            LOBYTE(v61[0].Data1) = 0;
          }
          WPP_SF_s(30i64, (unsigned __int16)&WPP_4a022543b8ef3aed3b38f7eb0a9b5a9a_Traceguids, (__int64)v61, a4);
        }
        else
        {
          v7 = a3;
        }
        v22 = (CHAR *)lpMultiByteStr;
        v23 = MultiByteToWideChar(0xFDE9u, 8u, lpMultiByteStr, v7, WideCharStr, 64);
        v25 = v23;
        if ( v23 - 1 > 0x3F )
        {
          if ( (g_rgFastWppEnabledFlagsPerLevel & 0x20) != 0 )
          {
            if ( v7 <= 0x7FFFFFFEui64 )
            {
              v46 = 64i64;
              v47 = v22 - (CHAR *)v61;
              v48 = v61;
              do
              {
                if ( !(v7 + v46 - 64) )
                  break;
                v49 = *((_BYTE *)&v48->Data1 + v47);
                if ( !v49 )
                  break;
                LOBYTE(v48->Data1) = v49;
                v48 = (GUID *)((char *)v48 + 1);
                --v46;
              }
              while ( v46 );
              if ( !v46 )
                v48 = (GUID *)((char *)v48 - 1);
              LOBYTE(v48->Data1) = 0;
            }
            else
            {
              LOBYTE(v61[0].Data1) = 0;
            }
            WPP_SF_s(31i64, (unsigned __int16)&WPP_4a022543b8ef3aed3b38f7eb0a9b5a9a_Traceguids, (__int64)v61, v24);
          }
        }
        else
        {
          if ( (g_rgFastWppEnabledFlagsPerLevel & 0x20) != 0 )
          {
            if ( v23 <= 0x7FFFFFFEui64 )
            {
              v26 = 64i64;
              v27 = v63;
              do
              {
                if ( !(v25 + v26 - 64) )
                  break;
                v28 = v27[64];
                if ( !v28 )
                  break;
                *v27++ = v28;
                --v26;
              }
              while ( v26 );
              if ( !v26 )
                --v27;
              *v27 = 0;
            }
            else
            {
              v63[0] = 0;
            }
            GetLastError();
            WPP_SF_Sdd(
              32i64,
              (unsigned __int16)&WPP_4a022543b8ef3aed3b38f7eb0a9b5a9a_Traceguids,
              (__int64)v63,
              (const unsigned __int16 *)(unsigned int)v25);
          }
          Dns_MakeCanonicalNameInPlaceW(WideCharStr, v25);
          if ( (g_rgFastWppEnabledFlagsPerLevel & 0x20) != 0 )
          {
            if ( v25 <= 0x7FFFFFFE )
            {
              v29 = 64i64;
              v30 = v63;
              do
              {
                if ( !(v25 + v29 - 64) )
                  break;
                v31 = v30[64];
                if ( !v31 )
                  break;
                *v30++ = v31;
                --v29;
              }
              while ( v29 );
              if ( !v29 )
                --v30;
              *v30 = 0;
            }
            else
            {
              v63[0] = 0;
            }
            WPP_SF_SD(
              33i64,
              (unsigned __int16)&WPP_4a022543b8ef3aed3b38f7eb0a9b5a9a_Traceguids,
              (__int64)v63,
              (const unsigned __int16 *)(unsigned int)v25);
          }
          v32 = Dns_UnicodeToUtf8(WideCharStr, v25, v22, (const unsigned __int16 *)0x40);
          v34 = v32;
          if ( (g_rgFastWppEnabledFlagsPerLevel & 0x20) != 0 )
          {
            if ( v32 <= 0x7FFFFFFEui64 )
            {
              v35 = v61;
              v36 = 64i64;
              do
              {
                if ( !(v36 + v34 - 64) )
                  break;
                v37 = *((_BYTE *)&v35->Data1 + v22 - (CHAR *)v61);
                if ( !v37 )
                  break;
                LOBYTE(v35->Data1) = v37;
                v35 = (GUID *)((char *)v35 + 1);
                --v36;
              }
              while ( v36 );
              if ( !v36 )
                v35 = (GUID *)((char *)v35 - 1);
              LOBYTE(v35->Data1) = 0;
            }
            else
            {
              LOBYTE(v61[0].Data1) = 0;
            }
            WPP_SF_sd(
              34i64,
              (unsigned __int16)&WPP_4a022543b8ef3aed3b38f7eb0a9b5a9a_Traceguids,
              (__int64)v61,
              (const char *)(unsigned int)v34);
          }
          if ( (_DWORD)v34 == v7 )
            goto LABEL_119;
          v38 = byte_1401BA003;
          if ( (byte_1401BA003 & 0x10) != 0 )
          {
            if ( v7 <= 0x7FFFFFFEui64 )
            {
              v39 = v62;
              v40 = 64i64;
              do
              {
                if ( !(v7 + v40 - 64) )
                  break;
                v41 = v39[v22 - v62];
                if ( !v41 )
                  break;
                *v39++ = v41;
                --v40;
              }
              while ( v40 );
              if ( !v40 )
                --v39;
              *v39 = 0;
            }
            else
            {
              v62[0] = 0;
            }
            if ( v7 <= 0x7FFFFFFEui64 )
            {
              v42 = v61;
              v43 = 64i64;
              do
              {
                if ( !(v7 + v43 - 64) )
                  break;
                v44 = *((_BYTE *)&v42->Data1 + a2 - (unsigned __int8 *)v61);
                if ( !v44 )
                  break;
                LOBYTE(v42->Data1) = v44;
                v42 = (GUID *)((char *)v42 + 1);
                --v43;
              }
              while ( v43 );
              if ( !v43 )
                v42 = (GUID *)((char *)v42 - 1);
              LOBYTE(v42->Data1) = 0;
            }
            else
            {
              LOBYTE(v61[0].Data1) = 0;
            }
            LastError = GetLastError();
            LODWORD(lpWideCharStr) = v34;
            WPP_SF_sddsd(
              0x23ui64,
              (USHORT)&WPP_4a022543b8ef3aed3b38f7eb0a9b5a9a_Traceguids,
              v61,
              (const char *)v7,
              lpWideCharStr,
              v62,
              LastError);
            v38 = byte_1401BA003;
          }
          if ( (unsigned int)(v34 - 1) <= 0x3E )
          {
LABEL_119:
            v22[v34] = 0;
            return (unsigned int)v34;
          }
          if ( (v38 & 0x10) != 0 )
            WPP_SF_S(
              36i64,
              (unsigned __int16)&WPP_4a022543b8ef3aed3b38f7eb0a9b5a9a_Traceguids,
              (__int64)WideCharStr,
              v33);
        }
        goto LABEL_131;
      }
LABEL_135:
      v7 = a3;
LABEL_131:
      v5 = a2;
      goto LABEL_49;
    }
    if ( (v9 & 0x1000) != 0 && !v11 )
      goto LABEL_135;
  }
  *v6 = 0;
  return 0i64;
}
// 14015CFB5: variable 'v17' is possibly undefined
// 14015D13E: variable 'a4' is possibly undefined
// 14015D3B6: variable 'lpWideCharStr' is possibly undefined
// 14015D3E2: variable 'v33' is possibly undefined
// 14015D453: variable 'v24' is possibly undefined
// 140195830: using guessed type _BYTE DnsCharPropertyTable[1024];
// 1401BA000: using guessed type char g_rgFastWppEnabledFlagsPerLevel;
// 1401BA001: using guessed type char byte_1401BA001;
// 1401BA003: using guessed type char byte_1401BA003;
