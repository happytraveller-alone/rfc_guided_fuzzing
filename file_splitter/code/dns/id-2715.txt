//----- (0000000140141B30) ----------------------------------------------------
__int64 __fastcall CDNSClientSubnetRecord::AddClientSubnetRecord(
        CDNSClientSubnetRecord *this,
        struct _ClientSubnetRecord *a2)
{
  unsigned int v4; // edi
  __int64 v5; // rcx
  __int64 v7; // rax
  __int64 *v8; // r13
  __int64 v9; // rcx
  __int64 v10; // rax
  __int64 v11; // rcx
  __int64 v12; // rcx
  _QWORD *v13; // rax
  __int64 v14; // rdx
  int v15; // r9d
  __int64 v16; // rax
  __int64 v17; // rax
  unsigned int v18; // r13d
  __int64 v19; // rcx
  __int64 v20; // rax
  __int64 *v21; // rcx
  _OWORD *v22; // rdx
  __int64 v23; // rcx
  _QWORD *v24; // rax
  __int64 v25; // rdx
  unsigned int Node; // eax
  CDnsClientSubnetRecordsTrie *v27; // rcx
  unsigned __int16 v28; // dx
  int v29; // r9d
  ULONG AddressStringLength; // [rsp+30h] [rbp-99h] BYREF
  _OWORD *v31; // [rsp+38h] [rbp-91h] BYREF
  __int64 *v32; // [rsp+40h] [rbp-89h] BYREF
  __int64 v33; // [rsp+48h] [rbp-81h]
  WCHAR AddressString[72]; // [rsp+50h] [rbp-79h] BYREF

  v4 = 0;
  memset_0(AddressString, 0, 0x82ui64);
  AddressStringLength = 0;
  if ( (unsigned int)CDNSClientSubnetRecord::VerifyClientSubnetRecord(this, a2, 0) )
  {
    v7 = *((_QWORD *)a2 + 1);
    if ( v7 )
    {
      LODWORD(v31) = 0;
      if ( *(_DWORD *)(v7 + 4) )
      {
        while ( 1 )
        {
          v32 = (__int64 *)operator new(0x40ui64, (const struct std::nothrow_t *)&std::nothrow);
          v8 = v32;
          if ( !v32 )
            break;
          v9 = *((_QWORD *)a2 + 1);
          v33 = (unsigned __int64)(unsigned int)v31 << 6;
          AddressStringLength = 65;
          v4 = RtlIpv4AddressToStringExW(
                 (const struct in_addr *)(v33 + 36 + v9),
                 0,
                 AddressString,
                 &AddressStringLength);
          if ( v4 || (v10 = *((_QWORD *)a2 + 1), v11 = v33, *(_DWORD *)(v33 + v10 + 68) > 0x20u) )
          {
            if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
              && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
            {
              WPP_SF_Ddd(
                *((_QWORD *)WPP_GLOBAL_Control + 7),
                0xCu,
                (__int64)&WPP_42dbba61d26d3062f1ad4e084cdc81fe_Traceguids,
                v4);
            }
            return 9552;
          }
          *(_OWORD *)v8 = *(_OWORD *)(v33 + v10 + 32);
          *((_OWORD *)v8 + 1) = *(_OWORD *)(v11 + v10 + 48);
          *((_OWORD *)v8 + 2) = *(_OWORD *)(v11 + v10 + 64);
          *((_OWORD *)v8 + 3) = *(_OWORD *)(v11 + v10 + 80);
          v12 = *(unsigned int *)(v11 + *((_QWORD *)a2 + 1) + 68);
          *((_DWORD *)v8 + 9) = v12;
          v33 = *((_QWORD *)this + 6);
          v13 = std::_List_val<CDNSPolicyCriteria *>::_Buynode(v12, v33, *(_QWORD *)(v33 + 8), &v32);
          v14 = *((_QWORD *)this + 7);
          if ( v14 == 0x1FFFFFFFFFFFFFFEi64 )
            std::_Xlength_error("list<T> too long");
          *((_QWORD *)this + 7) = v14 + 1;
          *(_QWORD *)(v33 + 8) = v13;
          *(_QWORD *)v13[1] = v13;
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            if ( *(_WORD *)v8 == 2 )
              v15 = *((_DWORD *)v8 + 1);
            else
              v15 = -1;
            WPP_SF_DS(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0xDu,
              (__int64)&WPP_42dbba61d26d3062f1ad4e084cdc81fe_Traceguids,
              v15,
              *(_QWORD *)a2);
          }
          v16 = *((_QWORD *)a2 + 1);
          v5 = (unsigned int)((_DWORD)v31 + 1);
          LODWORD(v31) = v5;
          if ( (unsigned int)v5 >= *(_DWORD *)(v16 + 4) )
            goto LABEL_21;
        }
        v29 = 14;
        v4 = 14;
        v27 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
        {
          v28 = 11;
          goto LABEL_58;
        }
        return v4;
      }
    }
LABEL_21:
    v17 = *((_QWORD *)a2 + 2);
    if ( v17 )
    {
      v18 = 0;
      if ( *(_DWORD *)(v17 + 4) )
      {
        while ( 1 )
        {
          v31 = operator new(0x40ui64, (const struct std::nothrow_t *)&std::nothrow);
          if ( !v31 )
            break;
          v19 = *((_QWORD *)a2 + 2) + 40i64;
          v32 = (__int64 *)((unsigned __int64)v18 << 6);
          AddressStringLength = 65;
          v4 = RtlIpv6AddressToStringExW(
                 (const struct in6_addr *)((char *)v32 + v19),
                 0,
                 0,
                 AddressString,
                 &AddressStringLength);
          if ( v4 || (v20 = *((_QWORD *)a2 + 2), v21 = v32, *(_DWORD *)((char *)v32 + v20 + 68) > 0x80u) )
          {
            if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
              && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
            {
              WPP_SF_Dd(
                *((_QWORD *)WPP_GLOBAL_Control + 7),
                0xFu,
                (__int64)&WPP_42dbba61d26d3062f1ad4e084cdc81fe_Traceguids,
                v4);
            }
            return 9552;
          }
          v22 = v31;
          *v31 = *(_OWORD *)((char *)v32 + v20 + 32);
          v22[1] = *(_OWORD *)((char *)v21 + v20 + 48);
          v22[2] = *(_OWORD *)((char *)v21 + v20 + 64);
          v22[3] = *(_OWORD *)((char *)v21 + v20 + 80);
          v23 = *(unsigned int *)((char *)v21 + *((_QWORD *)a2 + 2) + 68);
          *((_DWORD *)v22 + 9) = v23;
          v32 = (__int64 *)*((_QWORD *)this + 9);
          v24 = std::_List_val<CDNSPolicyCriteria *>::_Buynode(v23, (__int64)v32, v32[1], &v31);
          v25 = *((_QWORD *)this + 10);
          if ( v25 == 0x1FFFFFFFFFFFFFFEi64 )
            std::_Xlength_error("list<T> too long");
          ++v18;
          *((_QWORD *)this + 10) = v25 + 1;
          v32[1] = (__int64)v24;
          v5 = v24[1];
          *(_QWORD *)v5 = v24;
          if ( v18 >= *(_DWORD *)(*((_QWORD *)a2 + 2) + 4i64) )
            goto LABEL_28;
        }
        v29 = 14;
        v4 = 14;
        v27 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
        {
          v28 = 14;
          goto LABEL_58;
        }
        return v4;
      }
    }
LABEL_28:
    if ( *((_QWORD *)this + 7)
      && (Node = CDnsClientSubnetRecordsTrie::findNode(v5, (__int64)this + 48, (__int64)this + 8, 0), (v4 = Node) != 0) )
    {
      v27 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        v28 = 16;
        goto LABEL_57;
      }
    }
    else if ( *((_QWORD *)this + 10) )
    {
      Node = CDnsClientSubnetRecordsTrie::findNode(v5, (__int64)this + 72, (__int64)this + 8, 0);
      v4 = Node;
      if ( Node )
      {
        v27 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
        {
          v28 = 17;
LABEL_57:
          v29 = Node;
LABEL_58:
          WPP_SF_D(*((_QWORD *)v27 + 7), v28, (__int64)&WPP_42dbba61d26d3062f1ad4e084cdc81fe_Traceguids, v29);
        }
      }
    }
    return v4;
  }
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
  {
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0xAu, (__int64)&WPP_42dbba61d26d3062f1ad4e084cdc81fe_Traceguids);
  }
  return 9979i64;
}
// 140141E76: variable 'v5' is possibly undefined
