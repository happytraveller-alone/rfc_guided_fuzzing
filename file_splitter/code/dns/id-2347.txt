//----- (0000000140120AE0) ----------------------------------------------------
__int64 __fastcall SigFileRead(__int64 a1, unsigned int a2, __int64 a3, __int64 a4, int a5)
{
  unsigned int v8; // edi
  u_short v9; // r14
  char v10; // r13
  int v11; // eax
  int v12; // edx
  __int64 v13; // rcx
  u_long v14; // eax
  int v15; // edx
  __int64 v16; // rcx
  size_t v17; // r12
  unsigned __int16 v18; // ax
  _BYTE *v19; // rax
  _BYTE *v20; // r15
  u_short v21; // ax
  u_long v22; // ecx
  u_long v23; // eax
  u_long v24; // ecx
  u_long v25; // eax
  u_long v26; // ecx
  u_long v27; // eax
  u_short v28; // cx
  u_short v29; // ax
  void *v30; // rdx
  _BYTE *v31; // rcx
  u_long v33; // [rsp+30h] [rbp-D0h] BYREF
  unsigned int Size; // [rsp+34h] [rbp-CCh] BYREF
  int Size_4; // [rsp+38h] [rbp-C8h]
  u_long hostlong; // [rsp+3Ch] [rbp-C4h]
  u_long v37; // [rsp+40h] [rbp-C0h]
  u_long v38; // [rsp+44h] [rbp-BCh]
  void *Src; // [rsp+48h] [rbp-B8h] BYREF
  unsigned __int8 v40[272]; // [rsp+50h] [rbp-B0h] BYREF

  Src = 0i64;
  if ( a2 < 8 )
  {
    v8 = -1072573181;
    goto LABEL_29;
  }
  v9 = Dns_RecordTypeForNameA(*(_BYTE **)a3, *(_DWORD *)(a3 + 8));
  if ( !v9 )
    v9 = DnsRecordTypeForUnknownRecords(*(const char **)a3, *(_DWORD *)(a3 + 8));
  if ( v9 == 0xFFFF )
  {
    if ( !(unsigned int)File_ParseDwordToken(&v33, a3, a4) )
      goto LABEL_28;
    v9 = v33;
    if ( v33 > 0xFFFF )
      goto LABEL_28;
  }
  v10 = Dns_ValueForString((__int64)&DnssecAlgorithmTable, 1, *(_QWORD *)(a3 + 16), *(_DWORD *)(a3 + 24));
  if ( v10 == -1 )
  {
    if ( !(unsigned int)File_ParseDwordToken(&v33, a3 + 16, a4) || v33 > 0xFF )
    {
LABEL_28:
      v8 = -1072573183;
      goto LABEL_29;
    }
    v10 = v33;
  }
  if ( !(unsigned int)File_ParseDwordToken(&v33, a3 + 32, a4) )
    goto LABEL_28;
  v11 = (unsigned __int8)v33;
  if ( (unsigned __int8)v33 > 0x7Fu )
    v11 = 127;
  Size_4 = v11;
  if ( !(unsigned int)File_ParseDwordToken(&v33, a3 + 48, a4) )
    goto LABEL_28;
  v12 = *(_DWORD *)(a3 + 72);
  v13 = *(_QWORD *)(a3 + 64);
  hostlong = v33;
  v14 = Dns_ParseSigTime(v13, v12);
  v15 = *(_DWORD *)(a3 + 88);
  v16 = *(_QWORD *)(a3 + 80);
  v37 = v14;
  v38 = Dns_ParseSigTime(v16, v15);
  if ( !(unsigned int)File_ParseDwordToken(&v33, a3 + 96, a4)
    || v33 > 0xFFFF
    || (unsigned int)File_ReadCountNameFromToken(v40, 0i64, a4, (const void **)(a3 + 112), a5) )
  {
    goto LABEL_28;
  }
  v8 = buildKeyOrSignatureFromTokens(&Src, &Size, a2 - 8, a3 + 128);
  if ( !v8 )
  {
    v17 = Size;
    if ( Size > 0xFFFF
      || (unsigned int)v40[0] + 2 > 0xFFFF
      || (v18 = v40[0] + 20, v18 < 0x12u)
      || (unsigned __int16)(v18 + Size) < v18 )
    {
      v8 = 13;
    }
    else
    {
      v19 = RR_AllocateEx(v18 + (unsigned __int16)Size, 0, 0);
      v20 = v19;
      if ( v19 )
      {
        *(_QWORD *)(a4 + 800) = v19;
        Name_CopyCountName(v19 + 74, v40);
        v21 = htons(v9);
        v22 = hostlong;
        *((_WORD *)v20 + 28) = v21;
        v20[59] = Size_4;
        v20[58] = v10;
        v23 = htonl(v22);
        v24 = v37;
        *((_DWORD *)v20 + 15) = v23;
        v25 = htonl(v24);
        v26 = v38;
        *((_DWORD *)v20 + 16) = v25;
        v27 = htonl(v26);
        v28 = v33;
        *((_DWORD *)v20 + 17) = v27;
        v29 = htons(v28);
        v30 = Src;
        v31 = &v20[(unsigned __int8)v20[74] + 76];
        *((_WORD *)v20 + 36) = v29;
        memcpy_0(v31, v30, v17);
      }
      else
      {
        v8 = 14;
      }
    }
  }
LABEL_29:
  Mem_Free(Src, 0i64, 0i64, (__int64)"ds\\dns\\server\\dnscore\\rrfile.c", 2481);
  if ( v8 == -1072573183 )
    *(_DWORD *)(a4 + 1596) = -1072573180;
  return v8;
}
