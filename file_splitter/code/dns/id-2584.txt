//----- (0000000140131B60) ----------------------------------------------------
CDnsPolicy_SubnetRecordCriteriaTree *__fastcall CDnsPolicy_SubnetRecordCriteriaTree::CDnsPolicy_SubnetRecordCriteriaTree(
        CDnsPolicy_SubnetRecordCriteriaTree *this)
{
  bool (__fastcall **v2)(const wchar_t *, const wchar_t *); // rbx
  __int64 v3; // rdi
  bool (__fastcall *v4)(const wchar_t *, const wchar_t *); // rax
  char pExceptionObject[32]; // [rsp+28h] [rbp-20h] BYREF

  *(_QWORD *)this = &CDnsPolicy_SubnetRecordCriteriaTree::`vftable';
  v2 = (bool (__fastcall **)(const wchar_t *, const wchar_t *))operator new(0x20ui64);
  v3 = 0i64;
  if ( v2 )
  {
    *v2 = Is_Less_ThanWstr;
    v2[2] = 0i64;
    v4 = (bool (__fastcall *)(const wchar_t *, const wchar_t *))operator new(0x50ui64);
    if ( !v4 )
    {
      std::bad_alloc::bad_alloc((std::bad_alloc *)pExceptionObject, 0i64);
      CxxThrowException_0(pExceptionObject, (_ThrowInfo *)&TI2_AVbad_alloc_std__);
    }
    v2[1] = v4;
    *(_QWORD *)v4 = v4;
    *((_QWORD *)v2[1] + 1) = v2[1];
    *((_QWORD *)v2[1] + 2) = v2[1];
    do
      *((_BYTE *)v2[1] + v3++ + 72) = 1;
    while ( v3 < 2 );
  }
  else
  {
    v2 = 0i64;
  }
  *((_QWORD *)this + 1) = v2;
  return this;
}
// 140171A28: using guessed type void *CDnsPolicy_SubnetRecordCriteriaTree::`vftable';
