//----- (00000001400E8F94) ----------------------------------------------------
void __fastcall DF_InitializeDynamicForwarderList(int a1, __int64 a2, __int64 a3, int a4)
{
  unsigned int v6; // edi
  _DWORD *v8; // rcx
  _DWORD *v9; // rdi
  __int64 v10; // r8
  __int64 v11; // r14
  const wchar_t *v12; // rbp
  const wchar_t *v13; // rax
  const char *v14; // r9
  int CurrentTimeInSeconds; // eax
  int *v16; // r8
  unsigned int v17; // edx
  unsigned int *v18; // rax
  int v19; // r9d
  int v20; // eax

  if ( a1 )
    goto LABEL_9;
  v6 = g_dwTimeNextPeriodicReset;
  if ( !(a2 ? *(_DWORD *)(a2 + 8) : g_dwTimeNextPeriodicReset) )
    goto LABEL_9;
  if ( a2 )
    v6 = *(_DWORD *)(a2 + 8);
  dword_1401B9714 = Dns_GetCurrentTimeInSeconds();
  if ( dword_1401B9714 >= v6 )
  {
LABEL_9:
    v8 = (_DWORD *)qword_1401B97D0;
    v9 = 0i64;
    if ( a2 )
      v8 = *(_DWORD **)(a2 + 256);
    if ( v8 )
      v9 = DnsAddrArray_CopyAndExpand(v8, 0i64, 0i64, a4);
    DF_LockWrite((void **)((a2 + 16) & -(__int64)(a2 != 0)));
    v11 = qword_1401B97D8;
    if ( a2 )
      v11 = *(_QWORD *)(a2 + 264);
    v12 = L"default";
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x4000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      if ( a2 )
        v13 = *(const wchar_t **)a2;
      else
        v13 = L"default";
      v14 = "Periodic reset";
      if ( a1 == 1 )
        v14 = "Forwarders reset";
      WPP_SF_sqqS(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        (__int64)"Forwarders reset",
        v10,
        v14,
        v11,
        (char)v9,
        (__int64)v13);
    }
    if ( a2 )
      *(_QWORD *)(a2 + 264) = v9;
    else
      qword_1401B97D8 = (__int64)v9;
    Timeout_FreeWithFunctionEx(
      v11,
      (__int64)DnsAddrArray_Free,
      (__int64)"ds\\dns\\server\\server\\dynamicforwarders.cpp",
      299);
    CurrentTimeInSeconds = Dns_GetCurrentTimeInSeconds();
    v16 = (int *)(a2 + 8);
    dword_1401B9714 = CurrentTimeInSeconds;
    v17 = CurrentTimeInSeconds + (dword_1401B9A14 != 0 ? 180 : 900);
    v18 = &g_dwTimeNextPeriodicReset;
    if ( a2 )
      v18 = (unsigned int *)(a2 + 8);
    *v18 = v17;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x4000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      if ( a2 )
        v12 = *(const wchar_t **)a2;
      v19 = g_dwTimeNextPeriodicReset;
      if ( a2 )
        v20 = *v16;
      else
        LOBYTE(v20) = g_dwTimeNextPeriodicReset;
      if ( a2 )
        v19 = *v16;
      WPP_SF_DDS(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x12u,
        (__int64)&WPP_66b23b5e6a3832dd7e122b01e64c7d31_Traceguids,
        v19,
        v20 - dword_1401B9714,
        (__int64)v12);
    }
    DF_UnlockWrite((void **)((a2 + 16) & -(__int64)(a2 != 0)));
  }
}
// 1400E900B: variable 'a4' is possibly undefined
// 1400E909D: variable 'v10' is possibly undefined
// 1401560E0: using guessed type __int64 __fastcall DnsAddrArray_Free();
// 140192AB0: using guessed type wchar_t aDefault_0[8];
// 1401B9178: using guessed type unsigned int g_dwTimeNextPeriodicReset;
// 1401B9714: using guessed type int dword_1401B9714;
// 1401B97D0: using guessed type __int64 qword_1401B97D0;
// 1401B97D8: using guessed type __int64 qword_1401B97D8;
// 1401B9A14: using guessed type int dword_1401B9A14;
