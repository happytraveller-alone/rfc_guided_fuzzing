//----- (0000000140144594) ----------------------------------------------------
__int64 __fastcall CDNSPolicyCriteriaTime::AddCriteria(CDNSPolicyCriteriaTime *this)
{
  int v2; // r14d
  unsigned int v3; // ecx
  unsigned int v4; // r13d
  _QWORD *v5; // r12
  unsigned __int16 v6; // r15
  CDNSPolicyCriteriaTime *v7; // rcx
  __int64 **v8; // rdi
  __int64 *i; // rbx
  __int64 *v10; // rax
  __int64 v11; // r8
  __int64 **v12; // rdi
  __int64 *j; // rbx
  __int64 *v14; // rax
  __int64 v15; // r8
  int v17[4]; // [rsp+38h] [rbp-39h] BYREF
  struct _SYSTEMTIME v18; // [rsp+48h] [rbp-29h] BYREF
  struct _SYSTEMTIME v19; // [rsp+58h] [rbp-19h] BYREF
  __int64 v20; // [rsp+68h] [rbp-9h]
  void *v21[5]; // [rsp+70h] [rbp-1h] BYREF

  v20 = -2i64;
  v2 = 0;
  v17[0] = 0;
  if ( *((_QWORD *)this + 9) || *((_QWORD *)this + 12) )
  {
    v3 = 15;
    if ( dword_1401B9A3C )
      v3 = dword_1401B9A3C;
    v4 = 0x5A0 / v3;
    v5 = (_QWORD *)((char *)this + 112);
    std::vector<unsigned short>::reserve((__int64)this + 112, 0x5A0 / v3);
    v6 = 0;
    if ( v4 )
    {
      while ( 1 )
      {
        LOWORD(v17[0]) = 0;
        std::vector<unsigned short>::push_back((unsigned __int64 *)this + 14, (unsigned __int16 *)v17);
        if ( !*((_QWORD *)this + 9) )
          goto LABEL_25;
        v8 = (__int64 **)*((_QWORD *)this + 8);
        for ( i = *v8; i != (__int64 *)v8; i = (__int64 *)*i )
        {
          v18 = (struct _SYSTEMTIME)*((_OWORD *)i + 2);
          v19 = (struct _SYSTEMTIME)*((_OWORD *)i + 1);
          if ( (unsigned int)CDNSPolicyCriteriaTime::MinuteIsInInterval(v7, v6, &v19, &v18) )
            break;
        }
        if ( i != (__int64 *)v8 )
          break;
        if ( *((_QWORD *)this + 12) && *(_DWORD *)(*((_QWORD *)this + 2) + 80i64) )
          goto LABEL_25;
LABEL_42:
        if ( ++v6 >= v4 )
          return 0i64;
      }
      if ( *((_QWORD *)this + 12) && *(_DWORD *)(*((_QWORD *)this + 2) + 80i64) != 1 )
      {
LABEL_25:
        if ( !*((_QWORD *)this + 12) )
          goto LABEL_42;
        v12 = (__int64 **)*((_QWORD *)this + 11);
        for ( j = *v12; j != (__int64 *)v12; j = (__int64 *)*j )
        {
          v19 = (struct _SYSTEMTIME)*((_OWORD *)j + 2);
          v18 = (struct _SYSTEMTIME)*((_OWORD *)j + 1);
          if ( (unsigned int)CDNSPolicyCriteriaTime::MinuteIsInInterval(v7, v6, &v18, &v19) )
            break;
        }
        if ( j != (__int64 *)v12 )
          goto LABEL_42;
        if ( (__int64)(*((_QWORD *)this + 15) - *((_QWORD *)this + 14)) >> 1 <= (unsigned __int64)v6 )
          std::vector<unsigned short>::_Xran();
        *(_WORD *)(*v5 + 2i64 * v6) = 1;
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          v14 = (__int64 *)CDnsPolicy::Name(*((const void ***)this + 2), (__int64)v21);
          v15 = (__int64)v14;
          v2 |= 2u;
          v17[0] = v2;
          if ( (unsigned __int64)v14[3] >= 8 )
            v15 = *v14;
          WPP_SF_DDS(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x3Cu,
            (__int64)&WPP_42dbba61d26d3062f1ad4e084cdc81fe_Traceguids,
            v6,
            *(_WORD *)(*v5 + 2i64 * v6),
            v15);
        }
        if ( (v2 & 2) == 0 )
          goto LABEL_42;
        v2 &= ~2u;
      }
      else
      {
        if ( (__int64)(*((_QWORD *)this + 15) - *((_QWORD *)this + 14)) >> 1 <= (unsigned __int64)v6 )
          std::vector<unsigned short>::_Xran();
        *(_WORD *)(*v5 + 2i64 * v6) = 1;
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          v10 = (__int64 *)CDnsPolicy::Name(*((const void ***)this + 2), (__int64)v21);
          v11 = (__int64)v10;
          v2 |= 1u;
          v17[0] = v2;
          if ( (unsigned __int64)v10[3] >= 8 )
            v11 = *v10;
          WPP_SF_DDS(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x3Bu,
            (__int64)&WPP_42dbba61d26d3062f1ad4e084cdc81fe_Traceguids,
            v6,
            *(_WORD *)(*v5 + 2i64 * v6),
            v11);
        }
        if ( (v2 & 1) == 0 )
          goto LABEL_42;
        v2 &= ~1u;
      }
      if ( v21[3] >= (void *)8 )
        operator delete(v21[0]);
      goto LABEL_42;
    }
  }
  return 0i64;
}
// 140144665: variable 'v7' is possibly undefined
// 140184CA8: using guessed type void __stdcall operator delete(void *);
// 1401B9A3C: using guessed type int dword_1401B9A3C;
// 140144594: using guessed type int var_90[4];
