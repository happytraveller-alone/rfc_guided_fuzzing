//----- (0000000140124E0C) ----------------------------------------------------
void __fastcall DnsSign::WriteRsaDnskeyRdata(
        NCRYPT_KEY_HANDLE hKey,
        u_short a2,
        __int64 a3,
        char a4,
        unsigned int a5,
        __int64 a6,
        unsigned __int8 *a7)
{
  int v10; // eax
  int v11; // ebx
  __int64 v12; // rdi
  int v13; // eax
  __int64 v14; // rdx
  int v15; // ebx
  unsigned int v16; // r9d
  __int16 v17; // ax
  unsigned __int16 v18; // ax
  _BYTE *v19; // rbx
  char *v20; // rbx
  DWORD pcbResult[2]; // [rsp+48h] [rbp-B1h] BYREF
  __int64 v22; // [rsp+50h] [rbp-A9h]
  char v23[56]; // [rsp+58h] [rbp-A1h] BYREF
  __int128 pExceptionObject; // [rsp+90h] [rbp-69h] BYREF
  __int64 v25; // [rsp+A0h] [rbp-59h]
  char v26[56]; // [rsp+C8h] [rbp-31h] BYREF

  v22 = -2i64;
  pcbResult[0] = 0;
  v10 = NCryptExportKey(hKey, 0i64, L"RSAPUBLICBLOB", 0i64, 0i64, 0, pcbResult, 0);
  v11 = v10;
  if ( v10 < 0 )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 7) & 0x100000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 25) >= 4u )
    {
      WPP_SF_D(
        *((_QWORD *)WPP_GLOBAL_Control + 2),
        0x15u,
        (__int64)&WPP_52544f7432c93905eab44474fa1b3f20_Traceguids,
        v10);
    }
    DnsSign::CRunTimeException::CRunTimeException((DnsSign::CRunTimeException *)v23, v11);
    DnsSign::CException::AppendErrorMessageByID((DnsSign::CException *)v23, 0xD6D87u);
    DnsSign::CRunTimeException::CRunTimeException(
      (DnsSign::CRunTimeException *)&pExceptionObject,
      (const struct DnsSign::CRunTimeException *)v23);
    CxxThrowException_0(&pExceptionObject, (_ThrowInfo *)&TI2_AVCRunTimeException_DnsSign__);
  }
  pExceptionObject = 0i64;
  v25 = 0i64;
  std::vector<unsigned char>::resize((__int64 *)&pExceptionObject, pcbResult[0]);
  v12 = pExceptionObject;
  v13 = NCryptExportKey(hKey, 0i64, L"RSAPUBLICBLOB", 0i64, (PBYTE)pExceptionObject, pcbResult[0], pcbResult, 0);
  v15 = v13;
  if ( v13 < 0 )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 7) & 0x100000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 25) >= 4u )
    {
      WPP_SF_D(
        *((_QWORD *)WPP_GLOBAL_Control + 2),
        0x16u,
        (__int64)&WPP_52544f7432c93905eab44474fa1b3f20_Traceguids,
        v13);
    }
    DnsSign::CRunTimeException::CRunTimeException((DnsSign::CRunTimeException *)v23, v15);
    DnsSign::CException::AppendErrorMessageByID((DnsSign::CException *)v23, 0xD6D87u);
    DnsSign::CRunTimeException::CRunTimeException(
      (DnsSign::CRunTimeException *)v26,
      (const struct DnsSign::CRunTimeException *)v23);
    CxxThrowException_0(v26, (_ThrowInfo *)&TI2_AVCRunTimeException_DnsSign__);
  }
  v16 = *(_DWORD *)(v12 + 8);
  if ( v16 > 0x200 || (unsigned int)(*(_DWORD *)(v12 + 4) - 1024) > 0xC00 )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 7) & 0x100000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 25) >= 4u )
    {
      WPP_SF_Dd(
        *((_QWORD *)WPP_GLOBAL_Control + 2),
        0x17u,
        (__int64)&WPP_52544f7432c93905eab44474fa1b3f20_Traceguids,
        v16);
    }
    DnsSign::CRunTimeException::CRunTimeException((DnsSign::CRunTimeException *)v23, v14, 9);
    DnsSign::CException::AppendErrorMessageByID((DnsSign::CException *)v23, 0xD6D88u);
    DnsSign::CException::AppendErrorMessage((DnsSign::CException *)v23, L"  ");
    DnsSign::CException::AppendErrorMessageByID((DnsSign::CException *)v23, 0xD6DC7u);
    DnsSign::CRunTimeException::CRunTimeException(
      (DnsSign::CRunTimeException *)v26,
      (const struct DnsSign::CRunTimeException *)v23);
    CxxThrowException_0(v26, (_ThrowInfo *)&TI2_AVCRunTimeException_DnsSign__);
  }
  v17 = v16 + *(_WORD *)(v12 + 12) + 4;
  if ( v16 <= 0x100 )
    v18 = v17 + 1;
  else
    v18 = v17 + 3;
  *(_WORD *)a7 = v18;
  if ( a5 >= v18 )
  {
    *(_WORD *)a6 = htons(a2);
    *(_BYTE *)(a6 + 2) = 3;
    *(_BYTE *)(a6 + 3) = a4;
    v19 = (_BYTE *)(a6 + 4);
    if ( *(_DWORD *)(v12 + 8) <= 0x100u )
    {
      *v19 = *(_BYTE *)(v12 + 8);
      v20 = (char *)(a6 + 5);
    }
    else
    {
      *v19 = 0;
      *(_WORD *)(a6 + 5) = htons(*(_WORD *)(v12 + 8));
      v20 = (char *)(a6 + 7);
    }
    memcpy_0(v20, (const void *)(v12 + 24), *(unsigned int *)(v12 + 8));
    memcpy_0(
      &v20[*(unsigned int *)(v12 + 8)],
      (const void *)(*(unsigned int *)(v12 + 8) + v12 + 24),
      *(unsigned int *)(v12 + 12));
  }
  operator delete((void *)v12);
}
// 1401250E5: variable 'v14' is possibly undefined
// 140184CA8: using guessed type void __stdcall operator delete(void *);
// 140124E0C: using guessed type _QWORD arg_28;
