//----- (00000001400669C0) ----------------------------------------------------
__int64 __fastcall swapZSKActiveWithRollover(struct _zone_info *a1, _DWORD *a2)
{
  __int64 v2; // rsi
  unsigned int v5; // r14d
  const unsigned __int16 *v6; // rbp
  __int64 v7; // r15
  __int64 v8; // rax
  int v9; // eax
  unsigned int v10; // ebp
  int v11; // eax
  u_long v12; // ebx
  int MaxTtlAmongAllZoneScopes; // eax
  int v14; // eax
  EVENT_DESCRIPTOR v16; // [rsp+30h] [rbp-28h] BYREF

  v2 = *((_QWORD *)a1 + 141);
  v5 = 1;
  v6 = *(const unsigned __int16 **)(v2 + 144);
  v7 = *(_QWORD *)(v2 + 152);
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_S(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x10u,
      (__int64)&WPP_bdeacb4259f0347d69c055acf1d289ef_Traceguids,
      *(const unsigned __int16 **)(v2 + 168));
  }
  v8 = *(_QWORD *)(v2 + 168);
  *(_DWORD *)(v2 + 160) = 0;
  *(_QWORD *)(v2 + 144) = v8;
  *(_QWORD *)(v2 + 152) = *(_QWORD *)(v2 + 176);
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_S(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x11u, (__int64)&WPP_bdeacb4259f0347d69c055acf1d289ef_Traceguids, v6);
  }
  *(_QWORD *)(v2 + 168) = v6;
  *(_QWORD *)(v2 + 176) = v7;
  *(_DWORD *)(v2 + 184) = 3;
  if ( a2 )
  {
    ZoneScopes_UnLockAll((__int64)a1, (unsigned int)a2, 0i64);
    *a2 = 0;
  }
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x12u, (__int64)&WPP_bdeacb4259f0347d69c055acf1d289ef_Traceguids);
  }
  v9 = DnsOls_PublishDnskeyRRListAndSignScopes(a1, *(unsigned __int16 **)(v2 + 128), 1, 0);
  *(_QWORD *)(v2 + 128) = 0i64;
  if ( v9 )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      WPP_SF_Ds(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x13u,
        (__int64)&WPP_bdeacb4259f0347d69c055acf1d289ef_Traceguids,
        v9,
        *((_QWORD *)a1 + 2));
    }
    return 0;
  }
  else
  {
    v10 = *((_DWORD *)a1 + 268);
    if ( dword_1401B99F0 && !dword_1401B9A24 )
    {
      v11 = 60;
      if ( v10 < 0x3C )
        v11 = *((_DWORD *)a1 + 268);
      v10 = v11;
    }
    v12 = ntohl(*((_DWORD *)a1 + 132));
    if ( v12 <= (unsigned int)Zone_GetMaxTtlAmongAllZoneScopes((__int64)a1) )
      MaxTtlAmongAllZoneScopes = Zone_GetMaxTtlAmongAllZoneScopes((__int64)a1);
    else
      MaxTtlAmongAllZoneScopes = ntohl(*((_DWORD *)a1 + 132));
    CurrentTimePlusOffset((struct _FILETIME *)(v2 + 84), MaxTtlAmongAllZoneScopes + v10);
    *(_DWORD *)(v2 + 100) = 2;
    *(_DWORD *)(v2 + 96) = 4;
    v16 = DNS_EVENT_NEXT_ZSKROLLOVER_STAGE;
    LogDnssecKeyRollover(&v16, (__int64)a1, v2, L"DNS_SKD_STATUS_ZSK_WAITING_FOR_MAXZONE_TTL");
    v14 = DnsOls_WriteSkdToStorage(0, (__int64)a1, v2, 0);
    if ( v14
      && WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      WPP_SF_Ds(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x14u,
        (__int64)&WPP_bdeacb4259f0347d69c055acf1d289ef_Traceguids,
        v14,
        *((_QWORD *)a1 + 2));
    }
    *(_QWORD *)((char *)a1 + 1116) = *(_QWORD *)(v2 + 84);
  }
  return v5;
}
// 140066ABB: variable 'a2' is possibly undefined
// 14018E280: using guessed type wchar_t aDnsSkdStatusZs_0[43];
// 1401B99F0: using guessed type int dword_1401B99F0;
// 1401B9A24: using guessed type int dword_1401B9A24;
