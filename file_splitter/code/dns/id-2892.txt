//----- (0000000140150474) ----------------------------------------------------
__int64 *__fastcall std::_Hash<std::tr1::_Umap_traits<IDnsRRLStateKey *,IDnsRRLStateInfo *,std::_Hash_compare<IDnsRRLStateKey *,CDnsRRLStateKeyHasher,CDnsRRLStateKeyEqual>,std::allocator<std::pair<IDnsRRLStateKey * const,IDnsRRLStateInfo *>>,0>>::erase(
        _QWORD *a1,
        __int64 *a2,
        __int64 *a3)
{
  unsigned __int64 v5; // rax
  __int64 v6; // r9
  __int64 *v7; // rcx
  __int64 v8; // rbx

  v5 = std::_Hash<std::tr1::_Umap_traits<IDnsRRLStateKey *,IDnsRRLStateInfo *,std::_Hash_compare<IDnsRRLStateKey *,CDnsRRLStateKeyHasher,CDnsRRLStateKeyEqual>,std::allocator<std::pair<IDnsRRLStateKey * const,IDnsRRLStateInfo *>>,0>>::_Hashval(
         (__int64)a1,
         a3 + 2);
  v6 = a1[4];
  v7 = a3;
  if ( *(__int64 **)(v6 + 16 * v5 + 8) == a3 )
  {
    if ( *(__int64 **)(v6 + 16 * v5) == a3 )
    {
      *(_QWORD *)(v6 + 16 * v5) = a1[1];
      *(_QWORD *)(a1[4] + 16 * v5 + 8) = a1[1];
    }
    else
    {
      *(_QWORD *)(v6 + 16 * v5 + 8) = a3[1];
    }
  }
  else
  {
    if ( *(__int64 **)(v6 + 16 * v5) != a3 )
      goto LABEL_8;
    *(_QWORD *)(v6 + 16 * v5) = *a3;
  }
  v7 = a3;
LABEL_8:
  v8 = *v7;
  if ( v7 != (__int64 *)a1[1] )
  {
    *(_QWORD *)v7[1] = v8;
    *(_QWORD *)(*v7 + 8) = v7[1];
    operator delete(v7);
    --a1[2];
  }
  *a2 = v8;
  return a2;
}
// 140184CA8: using guessed type void __stdcall operator delete(void *);
