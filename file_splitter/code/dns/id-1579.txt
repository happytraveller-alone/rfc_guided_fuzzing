//----- (00000001400C80A0) ----------------------------------------------------
__int64 __fastcall Zone_LockForWriteEx(__int64 a1, __int16 a2, unsigned int a3, __int64 a4, char a5)
{
  char v9; // bl
  char CurrentThreadId; // al
  __int64 v11; // rdx
  __int64 v12; // r8
  __int64 v13; // rcx
  __int64 result; // rax
  unsigned int v15; // [rsp+70h] [rbp+8h] BYREF

  if ( !a1 )
    return 0i64;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x10) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
  {
    v9 = *(_BYTE *)(a1 + 428);
    CurrentThreadId = GetCurrentThreadId();
    WPP_SF_sDDdls(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      v11,
      v12,
      *(const char **)(a1 + 16),
      CurrentThreadId,
      a3,
      v9,
      a5,
      a4);
  }
  _InterlockedAdd((volatile signed __int32 *)(a1 + 424), 1u);
  v13 = *(_QWORD *)(a1 + 416);
  v15 = -1;
  if ( (unsigned int)acquireWrite(v13, a3, &v15) != -1 )
  {
    _InterlockedDecrement((volatile signed __int32 *)(a1 + 424));
    --*(_BYTE *)(a1 + 428);
    *(_DWORD *)(a1 + 404) = GetCurrentThreadId();
    if ( (a2 & 1) != 0 )
      ++*(_BYTE *)(a1 + 400);
    if ( (a2 & 0x100) != 0 )
      ++*(_BYTE *)(a1 + 401);
    SetEvent(*(HANDLE *)(a1 + 408));
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x10) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
    {
      WPP_SF_sd(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0xC1u,
        (__int64)&WPP_e9a0d5dea449334d7c383477da81f939_Traceguids,
        *(const char **)(a1 + 16));
    }
    return 0i64;
  }
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x10) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_s(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0xC0u,
      (__int64)&WPP_e9a0d5dea449334d7c383477da81f939_Traceguids,
      *(const char **)(a1 + 16));
  }
  _InterlockedDecrement((volatile signed __int32 *)(a1 + 424));
  if ( *(_DWORD *)(a1 + 372) != 1 )
    return 9607i64;
  result = 9622i64;
  if ( (*(_BYTE *)(a1 + 1040) & 1) == 0 )
    return 9607i64;
  return result;
}
// 1400C8123: variable 'v11' is possibly undefined
// 1400C8123: variable 'v12' is possibly undefined
