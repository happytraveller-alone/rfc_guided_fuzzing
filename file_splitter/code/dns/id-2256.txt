//----- (000000014011A1AC) ----------------------------------------------------
__int64 __fastcall Name_CaseInsensitiveLabelCompare(unsigned __int8 *Src, signed int a2, unsigned __int8 *a3, int a4)
{
  size_t v4; // rsi
  size_t v6; // rdi
  unsigned int v9; // ebx
  int v10; // eax
  int v11; // eax
  char *v12; // rax
  signed __int64 v13; // rdx
  char v14; // cl
  char v15[64]; // [rsp+20h] [rbp-B8h] BYREF
  char v16[64]; // [rsp+60h] [rbp-78h] BYREF

  v4 = a2;
  v6 = a4;
  if ( a2 > 63 || a4 > 63 )
    return 0xFFFFFFFFi64;
  if ( Src == a3 )
    return 0i64;
  v9 = 0;
  if ( !Src )
    return 0xFFFFFFFFi64;
  if ( !a3 )
    return 1i64;
  v10 = Dns_DowncaseNameLabel(v15, Src, a2, (const char *)3);
  if ( v10 == -1 )
  {
    memcpy_0(v15, Src, v4);
  }
  else if ( v10 )
  {
    LODWORD(v4) = v10;
  }
  if ( (unsigned __int64)(int)v4 >= 0x40 )
    _report_rangecheckfailure();
  v15[(int)v4] = 0;
  v11 = Dns_DowncaseNameLabel(v16, a3, v6, (const char *)3);
  if ( v11 == -1 )
  {
    memcpy_0(v16, a3, v6);
  }
  else if ( v11 )
  {
    LODWORD(v6) = v11;
  }
  if ( (unsigned __int64)(int)v6 >= 0x40 )
    _report_rangecheckfailure();
  v16[(int)v6] = 0;
  v12 = v15;
  v13 = v16 - v15;
  while ( 1 )
  {
    v14 = *v12;
    if ( *v12 != v12[v13] )
      break;
    ++v12;
    if ( !v14 )
      return v9;
  }
  return (unsigned __int8)*v12 < (unsigned __int8)v12[v13] ? -1 : 1;
}
// 14011A1AC: using guessed type CHAR var_B8[64];
// 14011A1AC: using guessed type CHAR var_78[64];
