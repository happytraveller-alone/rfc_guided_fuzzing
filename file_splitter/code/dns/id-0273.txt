//----- (0000000140023B64) ----------------------------------------------------
__int64 __fastcall validateAddressesForNS(unsigned __int8 *a1)
{
  unsigned int v1; // esi
  int v2; // r14d
  unsigned int v4; // edi
  CDnsClientSubnetRecordsTrie *v5; // rcx
  __int64 v6; // r15
  char *v7; // rax
  unsigned __int16 v9; // bp
  __int64 i; // r9
  struct in_addr *NextRecord; // rbx
  __int64 v12; // r8
  struct in_addr v14[16]; // [rsp+50h] [rbp-58h] BYREF

  v1 = 0;
  v2 = 0;
  v4 = 9852;
  if ( !a1 )
  {
    v4 = 87;
    goto LABEL_3;
  }
  v6 = Lookup_NsHostNode((__int64)a1, 0x80000000, 0i64, 0i64, 0i64, dword_1401B9714, 0i64, 0i64);
  if ( !v6 )
  {
    v5 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
      return v4;
    if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) == 0 || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
      goto LABEL_37;
    v7 = Dbg_CountName(a1);
    WPP_SF_s(*((_QWORD *)WPP_GLOBAL_Control + 7), 0xAu, (__int64)&WPP_b8af702b29a73bf6c1982cc5eed21171_Traceguids, v7);
LABEL_3:
    v5 = WPP_GLOBAL_Control;
    goto LABEL_37;
  }
  v5 = WPP_GLOBAL_Control;
  do
  {
    if ( v2 )
      break;
    if ( v1++ )
      v9 = 28;
    else
      v9 = 1;
    for ( i = 0i64; ; i = (__int64)NextRecord )
    {
      NextRecord = (struct in_addr *)RR_FindNextRecordEx(v6, 0, v9, i, 0, 0);
      if ( !NextRecord )
        goto LABEL_35;
      memset_0(v14, 0, sizeof(v14));
      if ( NextRecord[3].S_un.S_un_w.s_w1 == 1 )
      {
        DnsAddr_BuildFromIp4(v14, NextRecord[14], 0);
        goto LABEL_20;
      }
      if ( NextRecord[3].S_un.S_un_w.s_w1 == 28 )
        break;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0xBu, (__int64)&WPP_b8af702b29a73bf6c1982cc5eed21171_Traceguids);
      }
LABEL_30:
      ;
    }
    DnsAddr_BuildFromIp6((char *)v14, (__int128 *)&NextRecord[14], v12, 0);
LABEL_20:
    if ( (unsigned int)DnsAddrArray_ContainsAddr((__int64)g_ServerAddrs, v14, 3) )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0xCu, (__int64)&WPP_b8af702b29a73bf6c1982cc5eed21171_Traceguids);
      }
      v2 = 1;
      goto LABEL_30;
    }
    v4 = 0;
    v5 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0xDu, (__int64)&WPP_b8af702b29a73bf6c1982cc5eed21171_Traceguids);
LABEL_35:
      v5 = WPP_GLOBAL_Control;
    }
  }
  while ( v1 < 2 );
LABEL_37:
  if ( v5 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)v5 + 17) & 0x400) != 0
    && *((_BYTE *)v5 + 65) >= 4u )
  {
    WPP_SF_D(*((_QWORD *)v5 + 7), 0xEu, (__int64)&WPP_b8af702b29a73bf6c1982cc5eed21171_Traceguids, v4);
  }
  return v4;
}
// 140023CC5: variable 'v12' is possibly undefined
// 1401B9714: using guessed type int dword_1401B9714;
