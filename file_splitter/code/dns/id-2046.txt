//----- (00000001400FE01C) ----------------------------------------------------
ULONG __fastcall Template_zzzzzzz(
        __int64 a1,
        __int64 a2,
        const unsigned __int16 *a3,
        const unsigned __int16 *a4,
        const unsigned __int16 *a5,
        const unsigned __int16 *a6,
        const unsigned __int16 *a7,
        const unsigned __int16 *a8,
        const unsigned __int16 *a9)
{
  __int64 v9; // rcx
  int v11; // edx
  __int64 v12; // rax
  ULONG v13; // r9d
  const wchar_t *v14; // r11
  const wchar_t *v15; // rax
  __int64 v16; // rax
  int v17; // r8d
  const wchar_t *v18; // rax
  __int64 v19; // rax
  int v20; // r9d
  const wchar_t *v21; // rax
  __int64 v22; // rax
  int v23; // r9d
  const wchar_t *v24; // rax
  __int64 v25; // rax
  int v26; // r9d
  const wchar_t *v27; // rax
  __int64 v28; // rax
  int v29; // r9d
  const wchar_t *v30; // rax
  bool v31; // zf
  struct _EVENT_DATA_DESCRIPTOR UserData; // [rsp+20h] [rbp-51h] BYREF
  const wchar_t *v34; // [rsp+30h] [rbp-41h]
  int v35; // [rsp+38h] [rbp-39h]
  int v36; // [rsp+3Ch] [rbp-35h]
  const wchar_t *v37; // [rsp+40h] [rbp-31h]
  int v38; // [rsp+48h] [rbp-29h]
  int v39; // [rsp+4Ch] [rbp-25h]
  const wchar_t *v40; // [rsp+50h] [rbp-21h]
  int v41; // [rsp+58h] [rbp-19h]
  int v42; // [rsp+5Ch] [rbp-15h]
  const wchar_t *v43; // [rsp+60h] [rbp-11h]
  int v44; // [rsp+68h] [rbp-9h]
  int v45; // [rsp+6Ch] [rbp-5h]
  const wchar_t *v46; // [rsp+70h] [rbp-1h]
  int v47; // [rsp+78h] [rbp+7h]
  int v48; // [rsp+7Ch] [rbp+Bh]
  const wchar_t *v49; // [rsp+80h] [rbp+Fh]
  int v50; // [rsp+88h] [rbp+17h]
  int v51; // [rsp+8Ch] [rbp+1Bh]

  v9 = -1i64;
  v11 = 10;
  if ( a3 )
  {
    v12 = -1i64;
    do
      ++v12;
    while ( a3[v12] );
    v13 = 2 * v12 + 2;
  }
  else
  {
    v13 = 10;
  }
  UserData.Size = v13;
  v14 = L"NULL";
  UserData.Reserved = 0;
  v15 = L"NULL";
  if ( a3 )
    v15 = a3;
  UserData.Ptr = (ULONGLONG)v15;
  if ( a4 )
  {
    v16 = -1i64;
    do
      ++v16;
    while ( a4[v16] );
    v17 = 2 * v16 + 2;
  }
  else
  {
    v17 = 10;
  }
  v35 = v17;
  v18 = L"NULL";
  if ( a4 )
    v18 = a4;
  v36 = 0;
  v34 = v18;
  if ( a5 )
  {
    v19 = -1i64;
    do
      ++v19;
    while ( a5[v19] );
    v20 = 2 * v19 + 2;
  }
  else
  {
    v20 = 10;
  }
  v38 = v20;
  v21 = L"NULL";
  v39 = 0;
  if ( a5 )
    v21 = a5;
  v37 = v21;
  if ( a6 )
  {
    v22 = -1i64;
    do
      ++v22;
    while ( a6[v22] );
    v23 = 2 * v22 + 2;
  }
  else
  {
    v23 = 10;
  }
  v41 = v23;
  v24 = L"NULL";
  v42 = 0;
  if ( a6 )
    v24 = a6;
  v40 = v24;
  if ( a7 )
  {
    v25 = -1i64;
    do
      ++v25;
    while ( a7[v25] );
    v26 = 2 * v25 + 2;
  }
  else
  {
    v26 = 10;
  }
  v44 = v26;
  v27 = L"NULL";
  v45 = 0;
  if ( a7 )
    v27 = a7;
  v43 = v27;
  if ( a8 )
  {
    v28 = -1i64;
    do
      ++v28;
    while ( a8[v28] );
    v29 = 2 * v28 + 2;
  }
  else
  {
    v29 = 10;
  }
  v47 = v29;
  v30 = L"NULL";
  v48 = 0;
  if ( a8 )
    v30 = a8;
  v46 = v30;
  v31 = a9 == 0i64;
  if ( a9 )
  {
    do
      ++v9;
    while ( a9[v9] );
    v11 = 2 * v9 + 2;
    v31 = a9 == 0i64;
  }
  if ( !v31 )
    v14 = a9;
  v50 = v11;
  v49 = v14;
  v51 = 0;
  return EventWrite(Microsoft_Windows_DNSServerHandle, &DNS_EVENT_MODIFY_SKD_STATE, 7u, &UserData);
}
