//----- (000000014008A138) ----------------------------------------------------
__int64 __fastcall RR_CacheNonExistence(
        __int64 a1,
        __int64 a2,
        __int64 a3,
        unsigned __int16 a4,
        unsigned int a5,
        int a6,
        int a7,
        __int64 a8)
{
  __int64 v9; // r8
  unsigned int v10; // esi
  CDnsClientSubnetRecordsTrie *v12; // rcx
  __int64 v13; // r8
  const char *v14; // rax
  const char *v15; // r9
  const char *v16; // rax
  __int64 v17; // r15
  __int64 *v18; // r14
  u_long v19; // ebx
  u_long v20; // ecx
  u_long v21; // r12d
  char *v22; // rax
  __int64 v23; // rcx
  _BYTE *v24; // rax
  _QWORD *v25; // rbx
  CDnsClientSubnetRecordsTrie *v26; // rcx
  char *v27; // rax
  _QWORD *v28; // rax
  char *v29; // rax
  unsigned __int16 v30; // bp
  __int64 v31; // r8
  __int64 NextRecord; // rbx
  int v33; // r15d
  __int64 v34; // rdx
  int v35; // r8d
  _BYTE *v36; // rax
  __int64 v37; // rbx
  int v38; // eax
  __int64 v39; // rbp
  __int64 v40; // r8
  __int16 v41; // ax
  __int16 v42; // ax
  _QWORD *TrustAnchorNode; // rax
  char *v44; // rax
  int v45; // r8d
  int v46; // r12d
  __int64 i; // rbp
  unsigned int v48; // edx
  __int64 v49; // rdx
  __int64 v50; // [rsp+20h] [rbp-228h]
  __int64 v51; // [rsp+28h] [rbp-220h]
  char *v52; // [rsp+28h] [rbp-220h]
  __int64 v53; // [rsp+30h] [rbp-218h]
  __int64 v54; // [rsp+38h] [rbp-210h]
  int v56; // [rsp+50h] [rbp-1F8h]
  __int64 v58; // [rsp+68h] [rbp-1E0h]
  __int16 v60[184]; // [rsp+80h] [rbp-1C8h] BYREF

  v9 = a2;
  v10 = 1;
  v58 = 0i64;
  v56 = 0;
  if ( !a8 )
  {
LABEL_2:
    v10 = 0;
    goto LABEL_3;
  }
  if ( !a3 )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x18u, (__int64)&WPP_10d39582251c332017bd035d2c946054_Traceguids);
    }
    goto LABEL_2;
  }
  if ( !a6 && !dword_1401B9918 )
    goto LABEL_3;
  v12 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
  {
    if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800) != 0 && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
    {
      LODWORD(v54) = a5;
      LODWORD(v53) = a4;
      v52 = Dbg_NodeName(a3);
      v14 = "EMPTYAUTH";
      if ( a6 )
        v14 = "NXDOMAIN";
      v15 = "non-authoritative";
      if ( a7 )
        v15 = "authoritative";
      WPP_SF_sssDD(*((_QWORD *)WPP_GLOBAL_Control + 7), (__int64)"authoritative", v13, v15, (__int64)v14, (__int64)v52);
      v12 = WPP_GLOBAL_Control;
      v9 = a2;
    }
    if ( v12 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)v12 + 17) & 0x40000) != 0
      && *((_BYTE *)v12 + 65) >= 5u )
    {
      if ( !v9 || *(_WORD *)(v9 + 496) != 1 || (v16 = "is", *(_WORD *)(v9 + 498) != 0x8000) )
        v16 = "is not";
      WPP_SF_qs(*((_QWORD *)v12 + 7), 0x1Au, (__int64)&WPP_10d39582251c332017bd035d2c946054_Traceguids, v9, v16);
    }
  }
  v17 = 0i64;
  v18 = *(__int64 **)(a8 + 16);
  if ( !v18 )
    goto LABEL_72;
  do
  {
    if ( *((_WORD *)v18 + 6) == 6 )
      break;
    v18 = (__int64 *)*v18;
  }
  while ( v18 );
  if ( !v18 )
  {
LABEL_72:
    v30 = a4;
LABEL_73:
    v21 = 60;
    goto LABEL_74;
  }
  if ( (*((_BYTE *)v18 + 28) & 0x10) != 0 )
    v17 = (__int64)v18 + *((unsigned __int16 *)v18 + 7) + 56;
  memset_0(v60, 0, sizeof(v60));
  v19 = ntohl(*((_DWORD *)v18 + 18));
  if ( ntohl(*((_DWORD *)v18 + 5)) >= v19 )
    v20 = *((_DWORD *)v18 + 18);
  else
    v20 = *((_DWORD *)v18 + 5);
  v21 = ntohl(v20);
  if ( v17 )
  {
    if ( !(unsigned int)Name_ConvertRawNameToLookupName((unsigned __int8 *)(v17 + 2), (unsigned __int16 *)v60) )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        v22 = Dbg_PacketName((unsigned __int8 *)(v17 + 2), 0i64, 0i64);
        WPP_SF_s(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x1Bu,
          (__int64)&WPP_10d39582251c332017bd035d2c946054_Traceguids,
          v22);
      }
      goto LABEL_44;
    }
    if ( !a2 || (v23 = *(_QWORD *)(a2 + 6280)) == 0 || !*(_QWORD *)(v23 + 192) )
      v23 = 0i64;
    v24 = Lookup_ZoneNode(v23, 0i64, a1, (unsigned __int16 *)v60, 16, (__int64 *)0xFFFFFFFFFFFFFFFFi64, 0i64, 0i64);
    v25 = v24;
    v26 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      v27 = Dbg_NodeName((__int64)v24);
      WPP_SF_qs(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x1Cu,
        (__int64)&WPP_10d39582251c332017bd035d2c946054_Traceguids,
        v18,
        v27);
      v26 = WPP_GLOBAL_Control;
    }
    if ( v25 )
    {
      v28 = (_QWORD *)a3;
      while ( v28 != v25 )
      {
        v28 = (_QWORD *)*v28;
        if ( !v28 )
        {
          if ( v26 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)v26 + 17) & 0x40000) != 0
            && *((_BYTE *)v26 + 65) >= 2u )
          {
            v29 = Dbg_NodeName(a3);
            WPP_SF_s(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x1Du,
              (__int64)&WPP_10d39582251c332017bd035d2c946054_Traceguids,
              v29);
          }
          goto LABEL_44;
        }
      }
    }
  }
  else if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
         && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
         && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x1Eu, (__int64)&WPP_10d39582251c332017bd035d2c946054_Traceguids, v18);
  }
  if ( dword_1401B991C && a7 )
    *((_WORD *)v18 + 5) |= 0x800u;
  v30 = a4;
  if ( !v21 || a4 == 6 )
    goto LABEL_73;
  if ( v21 > dword_1401B980C )
    v21 = dword_1401B980C;
LABEL_74:
  if ( v21 > dword_1401B9808 )
    v21 = dword_1401B9808;
  Dbase_LockEx(a3, 2, (__int64)"ds\\dns\\server\\server\\rrlist.c", 240);
  NextRecord = *(_QWORD *)(a3 + 64);
  v56 = 1;
  if ( !NextRecord )
    goto LABEL_119;
  if ( !a6 )
  {
    if ( (*(_BYTE *)(a3 + 92) & 1) != 0 )
    {
      RR_ListFree((_QWORD *)NextRecord);
      *(_QWORD *)(a3 + 64) = 0i64;
      goto LABEL_96;
    }
    if ( *(_QWORD *)(a3 + 56) )
    {
      RR_ListTimeout(a3);
      if ( *(_QWORD *)(a3 + 64) )
        goto LABEL_3;
      goto LABEL_96;
    }
    v33 = a5;
    NextRecord = RR_FindNextRecordEx(a3, 0, v30, 0i64, a5, 1);
    if ( !NextRecord
      || (*(_WORD *)(NextRecord + 10) & 0x1000) != 0
      || !(unsigned int)isRRLockedInCache(NextRecord, a5, v40) )
    {
      RR_ListDeleteTypeNotInList(a3, v30, 0, 0i64, 0);
      goto LABEL_119;
    }
    _InterlockedAdd(&dword_1401C7F38, 1u);
    v35 = 0;
LABEL_92:
    v34 = NextRecord;
    goto LABEL_82;
  }
  if ( (*(_BYTE *)(a3 + 92) & 1) != 0 )
  {
    v33 = a5;
    if ( !(unsigned int)isRRLockedInCache(NextRecord, a5, v31) )
    {
      RR_ListFree(*(_QWORD **)(a3 + 64));
      *(_QWORD *)(a3 + 64) = 0i64;
      RR_ListTimeout(a3);
      goto LABEL_119;
    }
    _InterlockedAdd(&dword_1401C7F38, 1u);
    v34 = *(_QWORD *)(a3 + 64);
    v35 = 1;
LABEL_82:
    Log_CacheLocking(a3, v34, v35, v33);
    goto LABEL_3;
  }
  if ( !*(_QWORD *)(a3 + 56) )
  {
    if ( !dword_1401B99B8 )
      goto LABEL_93;
    v33 = a5;
    do
    {
      if ( (unsigned int)isRRLockedInCache(NextRecord, a5, v31) )
        break;
      NextRecord = *(_QWORD *)NextRecord;
    }
    while ( NextRecord );
    v30 = a4;
    if ( !NextRecord )
    {
LABEL_93:
      RR_ListDelete(a3);
      goto LABEL_119;
    }
    _InterlockedAdd(&dword_1401C7F38, 1u);
    v35 = 1;
    goto LABEL_92;
  }
  RR_ListTimeout(a3);
  if ( *(_QWORD *)(a3 + 64) )
    goto LABEL_3;
LABEL_119:
  if ( a6 )
  {
    *(_DWORD *)(a3 + 92) |= 1u;
    goto LABEL_97;
  }
LABEL_96:
  *(_DWORD *)(a3 + 92) &= ~1u;
LABEL_97:
  v36 = RR_AllocateEx(8u, 0, 0x23u);
  v37 = (__int64)v36;
  if ( !v36 )
  {
LABEL_44:
    v10 = 0;
    goto LABEL_3;
  }
  *((_DWORD *)v36 + 4) = a5;
  v38 = a5 + v21;
  *(_DWORD *)(v37 + 20) = a5 + v21;
  if ( v18 && (*((_WORD *)v18 + 5) & 0x800) != 0 )
    *(_WORD *)(v37 + 10) |= 0x800u;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x80000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    if ( dword_1401B991C )
      v21 = dword_1401B9920;
    if ( dword_1401B9924 )
      v21 = 0;
    LODWORD(v51) = v21;
    LODWORD(v50) = v38;
    WPP_SF_qdD(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x1Fu,
      (__int64)&WPP_10d39582251c332017bd035d2c946054_Traceguids,
      v37,
      v50,
      v51,
      v53,
      v54);
  }
  if ( a6 )
  {
    v39 = a8;
    *(_WORD *)(v37 + 12) = -3856;
  }
  else
  {
    v41 = *(_WORD *)(v37 + 10);
    *(_WORD *)(v37 + 12) = v30;
    v42 = v41 | 0x80;
    v39 = a8;
    *(_WORD *)(v37 + 10) = v42;
    if ( *(_DWORD *)(a8 + 8) )
      *(_WORD *)(v37 + 10) = v42 | 0x1000;
  }
  *(_BYTE *)(v37 + 8) = a7 != 0 ? -63 : 97;
  if ( !a2 )
    goto LABEL_133;
  TrustAnchorNode = findTrustAnchorNode(0i64, a3, 0);
  v58 = (__int64)TrustAnchorNode;
  if ( TrustAnchorNode
    && (unsigned int)Dnssec_IsNodeInsecure(*(_DWORD *)(a2 + 568), (__int64)TrustAnchorNode, a3, 0i64, 0i64) )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      v44 = Dbg_NodeName(a3);
      WPP_SF_qs(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x20u,
        (__int64)&WPP_10d39582251c332017bd035d2c946054_Traceguids,
        v37,
        v44);
    }
    v58 = 0i64;
  }
  if ( *(_WORD *)(a2 + 496) != 1 || (v45 = 1, *(_WORD *)(a2 + 498) != 0x8000) )
LABEL_133:
    v45 = 0;
  Dnssec_SetInitialRecordStatus(v37, v58, v45);
  if ( *(_DWORD *)v39 )
  {
    *(_OWORD *)(v37 + 32) = *(_OWORD *)(v39 + 24);
    *(_QWORD *)(v37 + 48) = *(_QWORD *)(v39 + 40);
    *(_QWORD *)(v37 + 56) = *(_QWORD *)(v39 + 16);
    *(_QWORD *)(v39 + 24) = 0i64;
    *(_QWORD *)(v39 + 32) = 0i64;
    *(_QWORD *)(v39 + 40) = 0i64;
    *(_QWORD *)(v39 + 16) = 0i64;
    v46 = 16;
    processNonExistenceRecordList(a2, v58, a3, v37, 16, a5, *(_QWORD *)(v37 + 56));
    for ( i = 0i64; i < 3; ++i )
    {
      if ( i )
      {
        if ( i == 1 )
        {
          v46 = 64;
        }
        else if ( i == 2 )
        {
          v46 = 128;
        }
      }
      else
      {
        v46 = 32;
      }
      processNonExistenceRecordList(a2, v58, a3, v37, v46, a5, *(_QWORD *)(v37 + 8 * i + 32));
    }
    if ( (*(_BYTE *)(v37 + 28) & 4) != 0 )
      Dnssec_MsgAddValidatorRecordSet(a2, a3, *(_WORD *)(v37 + 12), 0xFFF0u, 0);
  }
  else
  {
    *(_QWORD *)(v37 + 32) = 0i64;
    *(_QWORD *)(v37 + 40) = 0i64;
    *(_QWORD *)(v37 + 48) = 0i64;
    *(_QWORD *)(v37 + 56) = 0i64;
  }
  if ( a6 )
    *(_QWORD *)(a3 + 64) = v37;
  else
    *(_QWORD *)(a3 + 64) = RR_ListInsertInOrder(a3, *(__int64 **)(a3 + 64), v37, 1);
  v48 = *(_DWORD *)(v37 + 20);
  if ( v48 <= a5 )
    v49 = 0i64;
  else
    v49 = v48 - a5;
  if ( dword_1401B9924 )
  {
    v49 = 0i64;
  }
  else if ( dword_1401B991C )
  {
    v49 = (unsigned int)dword_1401B9920;
  }
  Timeout_SetTimeoutOnNodeEx(a3, v49, 0x80000000i64);
LABEL_3:
  RR_CleanupNoExist(a8);
  if ( v56 )
    Dbase_UnlockEx(a3, 2, (__int64)"ds\\dns\\server\\server\\rrlist.c", 92);
  return v10;
}
// 14008A2F2: variable 'v13' is possibly undefined
// 14008A61C: variable 'v31' is possibly undefined
// 14008A777: variable 'v50' is possibly undefined
// 14008A777: variable 'v51' is possibly undefined
// 14008A777: variable 'v53' is possibly undefined
// 14008A777: variable 'v54' is possibly undefined
// 14008A7F4: variable 'v40' is possibly undefined
// 1401B9808: using guessed type int dword_1401B9808;
// 1401B980C: using guessed type int dword_1401B980C;
// 1401B9918: using guessed type int dword_1401B9918;
// 1401B991C: using guessed type int dword_1401B991C;
// 1401B9920: using guessed type int dword_1401B9920;
// 1401B9924: using guessed type int dword_1401B9924;
// 1401B99B8: using guessed type int dword_1401B99B8;
// 1401C7F38: using guessed type int dword_1401C7F38;
// 14008A138: using guessed type unsigned __int16 var_1C8[184];
