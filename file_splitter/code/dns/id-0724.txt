//----- (0000000140064A24) ----------------------------------------------------
__int64 __fastcall makeNbstatRequestThroughNbt(__int64 a1)
{
  CDnsClientSubnetRecordsTrie *v2; // rcx
  char *v3; // rdi
  int v4; // eax
  CDnsClientSubnetRecordsTrie *v5; // rcx
  unsigned __int16 v6; // dx
  bool v7; // zf
  unsigned int v8; // esi
  char *v9; // rdi
  u_long v10; // ecx
  u_long v11; // eax
  __int64 v12; // rdx
  __int64 v13; // rcx
  int v14; // eax
  char *v15; // rax
  __int64 result; // rax
  _QWORD *v17; // rcx

  v2 = WPP_GLOBAL_Control;
  if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x10000) != 0
    && WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x11u, (__int64)&WPP_fc3a6397bf853e2fe940ea821e43295b_Traceguids, a1);
    v2 = WPP_GLOBAL_Control;
  }
  v3 = (char *)pNbstatFreeListHead;
  if ( pNbstatFreeListHead )
  {
    pNbstatFreeListHead = *(_QWORD *)pNbstatFreeListHead;
    v4 = --cNbstatFreeListCount;
  }
  else
  {
    v3 = (char *)Mem_Alloc(dwNbtBufferLength, 14i64, "ds\\dns\\server\\server\\nbstat.c", 2140);
    if ( !v3 )
    {
      v3 = 0i64;
      goto LABEL_14;
    }
    ++dword_1401C7C68;
    v2 = WPP_GLOBAL_Control;
    v4 = cNbstatFreeListCount;
  }
  ++dword_1401C7C78;
  if ( (*((_DWORD *)v2 + 17) & 0x10000) != 0
    && v2 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && *((_BYTE *)v2 + 65) >= 4u )
  {
    WPP_SF_qd(*((_QWORD *)v2 + 7), 0x3Du, (__int64)&WPP_fc3a6397bf853e2fe940ea821e43295b_Traceguids, v3, v4);
  }
LABEL_14:
  *(_QWORD *)(a1 + 1320) = v3;
  if ( !v3 )
  {
    v5 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
    {
      if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x10000) != 0 && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        v6 = 18;
LABEL_48:
        WPP_SF_(*((_QWORD *)v5 + 7), v6, (__int64)&WPP_fc3a6397bf853e2fe940ea821e43295b_Traceguids);
LABEL_49:
        v5 = WPP_GLOBAL_Control;
        goto LABEL_50;
      }
      goto LABEL_50;
    }
    goto LABEL_54;
  }
  if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x10000) != 0
    && WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_qq(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x13u,
      (__int64)&WPP_fc3a6397bf853e2fe940ea821e43295b_Traceguids,
      a1,
      v3);
  }
  v7 = cNbtInterfaceCount == 0;
  v8 = 0;
  *(_BYTE *)(a1 + 1412) = 0;
  *(_BYTE *)(a1 + 1396) = 0;
  *(_DWORD *)(a1 + 1392) = 0;
  if ( !v7 )
  {
    v9 = v3 + 20;
    do
    {
      if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x10000) != 0
        && WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_qq(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x14u,
          (__int64)&WPP_fc3a6397bf853e2fe940ea821e43295b_Traceguids,
          a1,
          v9 - 20);
      }
      memset_0(v9 - 4, 0, 0x20ui64);
      v10 = *(_WORD *)(a1 + 1328) == 2 ? *(_DWORD *)(a1 + 1332) : -1;
      v11 = ntohl(v10);
      v12 = phNbstatEventArray;
      v13 = pahNbtHandles;
      *((_DWORD *)v9 - 1) = v11;
      v9[10] = 42;
      *(_DWORD *)v9 = 1;
      *((_DWORD *)v9 + 1) = 1114130;
      *((_WORD *)v9 + 4) = 0;
      *((_DWORD *)v9 - 5) = -572662307;
      v14 = NtDeviceIoControlFile(
              *(HANDLE *)(v13 + 8i64 * v8),
              *(HANDLE *)(v12 + 8i64 * v8),
              0i64,
              0i64,
              (PIO_STATUS_BLOCK)(v9 - 20),
              0x2100AEu,
              v9 - 4,
              0x20u,
              v9 + 28,
              0x800u);
      if ( v14 != 259 )
      {
        *((_DWORD *)v9 - 5) = v14;
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x10000) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          WPP_SF_D(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x15u,
            (__int64)&WPP_fc3a6397bf853e2fe940ea821e43295b_Traceguids,
            v14);
        }
        *(_DWORD *)(a1 + 1392) |= 1 << v8;
        if ( *(_DWORD *)(a1 + 1392) == dwInterfaceBitmask )
          goto LABEL_49;
      }
      v9 += 2096;
    }
    while ( ++v8 < cNbtInterfaceCount );
  }
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x10000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    v15 = inet_ntoa(*(struct in_addr *)(a1 + 1328));
    WPP_SF_sq(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x16u,
      (__int64)&WPP_fc3a6397bf853e2fe940ea821e43295b_Traceguids,
      v15);
  }
  *(_DWORD *)(a1 + 588) = *(_DWORD *)(*(_QWORD *)(a1 + 1312) + 60i64);
  result = PQ_QueuePacketWithXid(pNbstatPrivateQueue, a1);
  if ( !(_WORD)result )
  {
    v5 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
    {
      if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x10000) != 0 && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        v6 = 23;
        goto LABEL_48;
      }
LABEL_50:
      if ( v5 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)v5 + 17) & 0x10000) != 0
        && *((_BYTE *)v5 + 65) >= 4u )
      {
        WPP_SF_q(*((_QWORD *)v5 + 7), 0x18u, (__int64)&WPP_fc3a6397bf853e2fe940ea821e43295b_Traceguids, a1);
      }
    }
LABEL_54:
    v17 = *(_QWORD **)(a1 + 1320);
    if ( v17 )
    {
      freeNbstatBuffer(v17);
      *(_QWORD *)(a1 + 1320) = 0i64;
    }
    *(_BYTE *)(a1 + 1412) = 1;
    return Reject_Request(a1, 2u, 0);
  }
  return result;
}
// 1401B8FB0: using guessed type int cNbstatFreeListCount;
// 1401B8FB8: using guessed type __int64 pNbstatFreeListHead;
// 1401C7C68: using guessed type int dword_1401C7C68;
// 1401C7C78: using guessed type int dword_1401C7C78;
// 1401CBDC8: using guessed type int cNbtInterfaceCount;
// 1401CBDD0: using guessed type __int64 pahNbtHandles;
// 1401CBDD8: using guessed type int dwInterfaceBitmask;
// 1401CBDDC: using guessed type int dwNbtBufferLength;
// 1401CBDF0: using guessed type __int64 phNbstatEventArray;
// 1401CBE08: using guessed type __int64 pNbstatPrivateQueue;
