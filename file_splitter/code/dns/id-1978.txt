//----- (00000001400F3000) ----------------------------------------------------
__int64 __fastcall std::wstring::find(char *a1, _WORD *a2, __int64 a3, unsigned __int64 a4)
{
  char *v6; // r8
  unsigned __int64 v8; // r9
  unsigned __int64 v9; // r9
  char *v10; // rdi
  unsigned __int64 v11; // rax
  char *v12; // rdx
  unsigned __int64 v13; // rbx
  _WORD *v14; // rcx
  char *v15; // r11
  int v16; // eax
  __int64 v17; // rcx

  v6 = a1;
  if ( !a4 )
    return 0i64;
  v8 = *((_QWORD *)a1 + 2);
  if ( v8 && a4 <= v8 )
  {
    v9 = 1 - a4 + v8;
    if ( *((_QWORD *)a1 + 3) < 8ui64 )
      v10 = a1;
    else
      v10 = *(char **)a1;
    while ( 1 )
    {
      v11 = v9;
      v12 = v10;
      if ( v9 )
      {
        while ( *(_WORD *)v12 != *a2 )
        {
          v12 += 2;
          if ( !--v11 )
            goto LABEL_11;
        }
      }
      else
      {
LABEL_11:
        v12 = 0i64;
      }
      if ( !v12 )
        break;
      v13 = a4;
      v14 = a2;
      v15 = v12;
      if ( a4 )
      {
        while ( *(_WORD *)v15 == *v14 )
        {
          v15 += 2;
          ++v14;
          if ( !--v13 )
            goto LABEL_16;
        }
        v16 = *(_WORD *)v15 < *v14 ? -1 : 1;
      }
      else
      {
LABEL_16:
        v16 = 0;
      }
      if ( !v16 )
      {
        if ( *((_QWORD *)v6 + 3) >= 8ui64 )
          v6 = *(char **)v6;
        return (v12 - v6) >> 1;
      }
      v17 = v12 - v10;
      v10 = v12 + 2;
      v9 += -1 - (v17 >> 1);
    }
  }
  return -1i64;
}
