//----- (00000001400617D4) ----------------------------------------------------
ULONG __fastcall Template_zzzqzqzzsqqzqzzqqq(
        __int64 a1,
        const EVENT_DESCRIPTOR *a2,
        const unsigned __int16 *a3,
        const unsigned __int16 *a4,
        const unsigned __int16 *a5,
        char a6,
        const unsigned __int16 *a7,
        char a8,
        const unsigned __int16 *a9,
        const unsigned __int16 *a10,
        const char *a11,
        char a12,
        char a13,
        const unsigned __int16 *a14,
        char a15,
        const unsigned __int16 *a16,
        const unsigned __int16 *a17,
        char a18,
        char a19,
        char a20)
{
  __int64 v20; // rcx
  int v22; // r10d
  __int64 v23; // rax
  ULONG v24; // edx
  const wchar_t *v25; // r11
  const wchar_t *v26; // rax
  __int64 v27; // rax
  int v28; // edx
  const wchar_t *v29; // rax
  __int64 v30; // rax
  int v31; // r8d
  const wchar_t *v32; // rax
  __int64 v33; // rax
  int v34; // r8d
  const wchar_t *v35; // rax
  __int64 v36; // rax
  int v37; // r8d
  const wchar_t *v38; // rax
  __int64 v39; // rax
  int v40; // r8d
  const wchar_t *v41; // rax
  __int64 v42; // rdx
  int v43; // edx
  const char *v44; // rax
  __int64 v45; // rax
  int v46; // r8d
  const wchar_t *v47; // rax
  __int64 v48; // rax
  int v49; // r8d
  const wchar_t *v50; // rax
  bool v51; // zf
  struct _EVENT_DATA_DESCRIPTOR UserData; // [rsp+20h] [rbp-E0h] BYREF
  const wchar_t *v54; // [rsp+30h] [rbp-D0h]
  int v55; // [rsp+38h] [rbp-C8h]
  int v56; // [rsp+3Ch] [rbp-C4h]
  const wchar_t *v57; // [rsp+40h] [rbp-C0h]
  int v58; // [rsp+48h] [rbp-B8h]
  int v59; // [rsp+4Ch] [rbp-B4h]
  char *v60; // [rsp+50h] [rbp-B0h]
  __int64 v61; // [rsp+58h] [rbp-A8h]
  const wchar_t *v62; // [rsp+60h] [rbp-A0h]
  int v63; // [rsp+68h] [rbp-98h]
  int v64; // [rsp+6Ch] [rbp-94h]
  char *v65; // [rsp+70h] [rbp-90h]
  __int64 v66; // [rsp+78h] [rbp-88h]
  const wchar_t *v67; // [rsp+80h] [rbp-80h]
  int v68; // [rsp+88h] [rbp-78h]
  int v69; // [rsp+8Ch] [rbp-74h]
  const wchar_t *v70; // [rsp+90h] [rbp-70h]
  int v71; // [rsp+98h] [rbp-68h]
  int v72; // [rsp+9Ch] [rbp-64h]
  const char *v73; // [rsp+A0h] [rbp-60h]
  int v74; // [rsp+A8h] [rbp-58h]
  int v75; // [rsp+ACh] [rbp-54h]
  char *v76; // [rsp+B0h] [rbp-50h]
  __int64 v77; // [rsp+B8h] [rbp-48h]
  char *v78; // [rsp+C0h] [rbp-40h]
  __int64 v79; // [rsp+C8h] [rbp-38h]
  const wchar_t *v80; // [rsp+D0h] [rbp-30h]
  int v81; // [rsp+D8h] [rbp-28h]
  int v82; // [rsp+DCh] [rbp-24h]
  char *v83; // [rsp+E0h] [rbp-20h]
  __int64 v84; // [rsp+E8h] [rbp-18h]
  const wchar_t *v85; // [rsp+F0h] [rbp-10h]
  int v86; // [rsp+F8h] [rbp-8h]
  int v87; // [rsp+FCh] [rbp-4h]
  const wchar_t *v88; // [rsp+100h] [rbp+0h]
  int v89; // [rsp+108h] [rbp+8h]
  int v90; // [rsp+10Ch] [rbp+Ch]
  char *v91; // [rsp+110h] [rbp+10h]
  __int64 v92; // [rsp+118h] [rbp+18h]
  char *v93; // [rsp+120h] [rbp+20h]
  __int64 v94; // [rsp+128h] [rbp+28h]
  char *v95; // [rsp+130h] [rbp+30h]
  __int64 v96; // [rsp+138h] [rbp+38h]

  v20 = -1i64;
  v22 = 10;
  if ( a3 )
  {
    v23 = -1i64;
    do
      ++v23;
    while ( a3[v23] );
    v24 = 2 * v23 + 2;
  }
  else
  {
    v24 = 10;
  }
  UserData.Size = v24;
  v25 = L"NULL";
  UserData.Reserved = 0;
  v26 = L"NULL";
  if ( a3 )
    v26 = a3;
  UserData.Ptr = (ULONGLONG)v26;
  if ( a4 )
  {
    v27 = -1i64;
    do
      ++v27;
    while ( a4[v27] );
    v28 = 2 * v27 + 2;
  }
  else
  {
    v28 = 10;
  }
  v55 = v28;
  v29 = L"NULL";
  if ( a4 )
    v29 = a4;
  v56 = 0;
  v54 = v29;
  if ( a5 )
  {
    v30 = -1i64;
    do
      ++v30;
    while ( a5[v30] );
    v31 = 2 * v30 + 2;
  }
  else
  {
    v31 = 10;
  }
  v58 = v31;
  v32 = L"NULL";
  v59 = 0;
  if ( a5 )
    v32 = a5;
  v61 = 4i64;
  v57 = v32;
  v60 = &a6;
  if ( a7 )
  {
    v33 = -1i64;
    do
      ++v33;
    while ( a7[v33] );
    v34 = 2 * v33 + 2;
  }
  else
  {
    v34 = 10;
  }
  v63 = v34;
  v35 = L"NULL";
  v64 = 0;
  if ( a7 )
    v35 = a7;
  v66 = 4i64;
  v62 = v35;
  v65 = &a8;
  if ( a9 )
  {
    v36 = -1i64;
    do
      ++v36;
    while ( a9[v36] );
    v37 = 2 * v36 + 2;
  }
  else
  {
    v37 = 10;
  }
  v68 = v37;
  v38 = L"NULL";
  v69 = 0;
  if ( a9 )
    v38 = a9;
  v67 = v38;
  if ( a10 )
  {
    v39 = -1i64;
    do
      ++v39;
    while ( a10[v39] );
    v40 = 2 * v39 + 2;
  }
  else
  {
    v40 = 10;
  }
  v71 = v40;
  v41 = L"NULL";
  if ( a10 )
    v41 = a10;
  v72 = 0;
  v70 = v41;
  if ( a11 )
  {
    v42 = -1i64;
    do
      ++v42;
    while ( a11[v42] );
    v43 = v42 + 1;
  }
  else
  {
    v43 = 5;
  }
  v74 = v43;
  v44 = "NULL";
  if ( a11 )
    v44 = a11;
  v75 = 0;
  v73 = v44;
  v76 = &a12;
  v78 = &a13;
  v77 = 4i64;
  v79 = 4i64;
  if ( a14 )
  {
    v45 = -1i64;
    do
      ++v45;
    while ( a14[v45] );
    v46 = 2 * v45 + 2;
  }
  else
  {
    v46 = 10;
  }
  v81 = v46;
  v47 = L"NULL";
  v82 = 0;
  if ( a14 )
    v47 = a14;
  v84 = 4i64;
  v80 = v47;
  v83 = &a15;
  if ( a16 )
  {
    v48 = -1i64;
    do
      ++v48;
    while ( a16[v48] );
    v49 = 2 * v48 + 2;
  }
  else
  {
    v49 = 10;
  }
  v86 = v49;
  v50 = L"NULL";
  v87 = 0;
  if ( a16 )
    v50 = a16;
  v85 = v50;
  v51 = a17 == 0i64;
  if ( a17 )
  {
    do
      ++v20;
    while ( a17[v20] );
    v22 = 2 * v20 + 2;
    v51 = a17 == 0i64;
  }
  if ( !v51 )
    v25 = a17;
  v89 = v22;
  v88 = v25;
  v91 = &a18;
  v90 = 0;
  v93 = &a19;
  v92 = 4i64;
  v95 = &a20;
  v94 = 4i64;
  v96 = 4i64;
  return EventWrite(Microsoft_Windows_DNSServerHandle, a2, 0x12u, &UserData);
}
