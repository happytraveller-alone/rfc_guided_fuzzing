//----- (0000000140061128) ----------------------------------------------------
ULONG __fastcall Template_zzzzzzztzqqqqqqzzmmzzzz(
        __int64 a1,
        __int64 a2,
        const unsigned __int16 *a3,
        const unsigned __int16 *a4,
        const unsigned __int16 *a5,
        const unsigned __int16 *a6,
        const unsigned __int16 *a7,
        const unsigned __int16 *a8,
        const unsigned __int16 *a9,
        char a10,
        const unsigned __int16 *a11,
        char a12,
        char a13,
        char a14,
        char a15,
        char a16,
        char a17,
        const unsigned __int16 *a18,
        const unsigned __int16 *a19,
        __int64 a20,
        __int64 a21,
        const unsigned __int16 *a22,
        const unsigned __int16 *a23,
        const unsigned __int16 *a24,
        const unsigned __int16 *a25)
{
  __int64 v25; // rcx
  int v27; // edx
  __int64 v28; // rax
  ULONG v29; // r11d
  const wchar_t *v30; // r8
  const wchar_t *v31; // rax
  __int64 v32; // rax
  int v33; // r10d
  const wchar_t *v34; // rax
  __int64 v35; // rax
  int v36; // r10d
  const wchar_t *v37; // rax
  __int64 v38; // rax
  int v39; // r10d
  const wchar_t *v40; // rax
  __int64 v41; // rax
  int v42; // r10d
  const wchar_t *v43; // rax
  __int64 v44; // rax
  int v45; // r10d
  const wchar_t *v46; // rax
  __int64 v47; // rax
  int v48; // r10d
  const wchar_t *v49; // rax
  __int64 v50; // rax
  int v51; // r10d
  const wchar_t *v52; // rax
  __int64 v53; // rax
  int v54; // r9d
  const wchar_t *v55; // rax
  __int64 v56; // rax
  int v57; // r10d
  const wchar_t *v58; // rax
  __int64 v59; // rax
  int v60; // r10d
  const wchar_t *v61; // rax
  __int64 v62; // rax
  int v63; // r10d
  const wchar_t *v64; // rax
  __int64 v65; // rax
  int v66; // r10d
  const wchar_t *v67; // rax
  bool v68; // zf
  struct _EVENT_DATA_DESCRIPTOR UserData; // [rsp+20h] [rbp-E0h] BYREF
  const wchar_t *v71; // [rsp+30h] [rbp-D0h]
  int v72; // [rsp+38h] [rbp-C8h]
  int v73; // [rsp+3Ch] [rbp-C4h]
  const wchar_t *v74; // [rsp+40h] [rbp-C0h]
  int v75; // [rsp+48h] [rbp-B8h]
  int v76; // [rsp+4Ch] [rbp-B4h]
  const wchar_t *v77; // [rsp+50h] [rbp-B0h]
  int v78; // [rsp+58h] [rbp-A8h]
  int v79; // [rsp+5Ch] [rbp-A4h]
  const wchar_t *v80; // [rsp+60h] [rbp-A0h]
  int v81; // [rsp+68h] [rbp-98h]
  int v82; // [rsp+6Ch] [rbp-94h]
  const wchar_t *v83; // [rsp+70h] [rbp-90h]
  int v84; // [rsp+78h] [rbp-88h]
  int v85; // [rsp+7Ch] [rbp-84h]
  const wchar_t *v86; // [rsp+80h] [rbp-80h]
  int v87; // [rsp+88h] [rbp-78h]
  int v88; // [rsp+8Ch] [rbp-74h]
  char *v89; // [rsp+90h] [rbp-70h]
  __int64 v90; // [rsp+98h] [rbp-68h]
  const wchar_t *v91; // [rsp+A0h] [rbp-60h]
  int v92; // [rsp+A8h] [rbp-58h]
  int v93; // [rsp+ACh] [rbp-54h]
  char *v94; // [rsp+B0h] [rbp-50h]
  __int64 v95; // [rsp+B8h] [rbp-48h]
  char *v96; // [rsp+C0h] [rbp-40h]
  __int64 v97; // [rsp+C8h] [rbp-38h]
  char *v98; // [rsp+D0h] [rbp-30h]
  __int64 v99; // [rsp+D8h] [rbp-28h]
  char *v100; // [rsp+E0h] [rbp-20h]
  __int64 v101; // [rsp+E8h] [rbp-18h]
  char *v102; // [rsp+F0h] [rbp-10h]
  __int64 v103; // [rsp+F8h] [rbp-8h]
  char *v104; // [rsp+100h] [rbp+0h]
  __int64 v105; // [rsp+108h] [rbp+8h]
  const wchar_t *v106; // [rsp+110h] [rbp+10h]
  int v107; // [rsp+118h] [rbp+18h]
  int v108; // [rsp+11Ch] [rbp+1Ch]
  const wchar_t *v109; // [rsp+120h] [rbp+20h]
  int v110; // [rsp+128h] [rbp+28h]
  int v111; // [rsp+12Ch] [rbp+2Ch]
  __int64 v112; // [rsp+130h] [rbp+30h]
  __int64 v113; // [rsp+138h] [rbp+38h]
  __int64 v114; // [rsp+140h] [rbp+40h]
  __int64 v115; // [rsp+148h] [rbp+48h]
  const wchar_t *v116; // [rsp+150h] [rbp+50h]
  int v117; // [rsp+158h] [rbp+58h]
  int v118; // [rsp+15Ch] [rbp+5Ch]
  const wchar_t *v119; // [rsp+160h] [rbp+60h]
  int v120; // [rsp+168h] [rbp+68h]
  int v121; // [rsp+16Ch] [rbp+6Ch]
  const wchar_t *v122; // [rsp+170h] [rbp+70h]
  int v123; // [rsp+178h] [rbp+78h]
  int v124; // [rsp+17Ch] [rbp+7Ch]
  const wchar_t *v125; // [rsp+180h] [rbp+80h]
  int v126; // [rsp+188h] [rbp+88h]
  int v127; // [rsp+18Ch] [rbp+8Ch]

  v25 = -1i64;
  v27 = 10;
  if ( a3 )
  {
    v28 = -1i64;
    do
      ++v28;
    while ( a3[v28] );
    v29 = 2 * v28 + 2;
  }
  else
  {
    v29 = 10;
  }
  UserData.Size = v29;
  v30 = L"NULL";
  UserData.Reserved = 0;
  v31 = L"NULL";
  if ( a3 )
    v31 = a3;
  UserData.Ptr = (ULONGLONG)v31;
  if ( a4 )
  {
    v32 = -1i64;
    do
      ++v32;
    while ( a4[v32] );
    v33 = 2 * v32 + 2;
  }
  else
  {
    v33 = 10;
  }
  v72 = v33;
  v34 = L"NULL";
  v73 = 0;
  if ( a4 )
    v34 = a4;
  v71 = v34;
  if ( a5 )
  {
    v35 = -1i64;
    do
      ++v35;
    while ( a5[v35] );
    v36 = 2 * v35 + 2;
  }
  else
  {
    v36 = 10;
  }
  v75 = v36;
  v37 = L"NULL";
  v76 = 0;
  if ( a5 )
    v37 = a5;
  v74 = v37;
  if ( a6 )
  {
    v38 = -1i64;
    do
      ++v38;
    while ( a6[v38] );
    v39 = 2 * v38 + 2;
  }
  else
  {
    v39 = 10;
  }
  v78 = v39;
  v40 = L"NULL";
  v79 = 0;
  if ( a6 )
    v40 = a6;
  v77 = v40;
  if ( a7 )
  {
    v41 = -1i64;
    do
      ++v41;
    while ( a7[v41] );
    v42 = 2 * v41 + 2;
  }
  else
  {
    v42 = 10;
  }
  v81 = v42;
  v43 = L"NULL";
  v82 = 0;
  if ( a7 )
    v43 = a7;
  v80 = v43;
  if ( a8 )
  {
    v44 = -1i64;
    do
      ++v44;
    while ( a8[v44] );
    v45 = 2 * v44 + 2;
  }
  else
  {
    v45 = 10;
  }
  v84 = v45;
  v46 = L"NULL";
  v85 = 0;
  if ( a8 )
    v46 = a8;
  v83 = v46;
  if ( a9 )
  {
    v47 = -1i64;
    do
      ++v47;
    while ( a9[v47] );
    v48 = 2 * v47 + 2;
  }
  else
  {
    v48 = 10;
  }
  v87 = v48;
  v49 = L"NULL";
  v88 = 0;
  if ( a9 )
    v49 = a9;
  v90 = 4i64;
  v86 = v49;
  v89 = &a10;
  if ( a11 )
  {
    v50 = -1i64;
    do
      ++v50;
    while ( a11[v50] );
    v51 = 2 * v50 + 2;
  }
  else
  {
    v51 = 10;
  }
  v92 = v51;
  v52 = L"NULL";
  if ( a11 )
    v52 = a11;
  v93 = 0;
  v91 = v52;
  v94 = &a12;
  v96 = &a13;
  v98 = &a14;
  v100 = &a15;
  v102 = &a16;
  v104 = &a17;
  v95 = 4i64;
  v97 = 4i64;
  v99 = 4i64;
  v101 = 4i64;
  v103 = 4i64;
  v105 = 4i64;
  if ( a18 )
  {
    v53 = -1i64;
    do
      ++v53;
    while ( a18[v53] );
    v54 = 2 * v53 + 2;
  }
  else
  {
    v54 = 10;
  }
  v107 = v54;
  v55 = L"NULL";
  if ( a18 )
    v55 = a18;
  v108 = 0;
  v106 = v55;
  if ( a19 )
  {
    v56 = -1i64;
    do
      ++v56;
    while ( a19[v56] );
    v57 = 2 * v56 + 2;
  }
  else
  {
    v57 = 10;
  }
  v110 = v57;
  v58 = L"NULL";
  v111 = 0;
  if ( a19 )
    v58 = a19;
  v113 = 8i64;
  v109 = v58;
  v112 = a20;
  v114 = a21;
  v115 = 8i64;
  if ( a22 )
  {
    v59 = -1i64;
    do
      ++v59;
    while ( a22[v59] );
    v60 = 2 * v59 + 2;
  }
  else
  {
    v60 = 10;
  }
  v117 = v60;
  v61 = L"NULL";
  v118 = 0;
  if ( a22 )
    v61 = a22;
  v116 = v61;
  if ( a23 )
  {
    v62 = -1i64;
    do
      ++v62;
    while ( a23[v62] );
    v63 = 2 * v62 + 2;
  }
  else
  {
    v63 = 10;
  }
  v120 = v63;
  v64 = L"NULL";
  v121 = 0;
  if ( a23 )
    v64 = a23;
  v119 = v64;
  if ( a24 )
  {
    v65 = -1i64;
    do
      ++v65;
    while ( a24[v65] );
    v66 = 2 * v65 + 2;
  }
  else
  {
    v66 = 10;
  }
  v123 = v66;
  v67 = L"NULL";
  v124 = 0;
  if ( a24 )
    v67 = a24;
  v122 = v67;
  v68 = a25 == 0i64;
  if ( a25 )
  {
    do
      ++v25;
    while ( a25[v25] );
    v27 = 2 * v25 + 2;
    v68 = a25 == 0i64;
  }
  if ( !v68 )
    v30 = a25;
  v126 = v27;
  v125 = v30;
  v127 = 0;
  return EventWrite(Microsoft_Windows_DNSServerHandle, &DNS_EVENT_ADD_SKD, 0x17u, &UserData);
}
