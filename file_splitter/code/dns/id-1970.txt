//----- (00000001400F2C50) ----------------------------------------------------
unsigned __int64 __fastcall std::vector<unsigned short>::push_back(unsigned __int64 *a1, unsigned __int16 *a2)
{
  unsigned __int64 result; // rax
  unsigned __int64 v5; // rdx
  __int64 v6; // rdi
  unsigned __int64 v7; // rax
  unsigned __int64 v8; // rdx
  unsigned __int64 v9; // rdx
  _WORD *v10; // rdx
  unsigned __int64 v11; // rdx
  unsigned __int64 v12; // rax
  unsigned __int64 v13; // rdx
  unsigned __int64 v14; // rdx
  _WORD *v15; // rcx

  result = a1[1];
  if ( (unsigned __int64)a2 >= result || *a1 > (unsigned __int64)a2 )
  {
    v11 = a1[2];
    if ( result == v11 )
    {
      v12 = (__int64)(result - *a1) >> 1;
      if ( v12 > 0x7FFFFFFFFFFFFFFEi64 )
        std::vector<std::vector<unsigned char> *,std::allocator<std::vector<unsigned char> *>>::_Xlen();
      result = v12 + 1;
      v13 = (__int64)(v11 - *a1) >> 1;
      if ( result > v13 )
      {
        if ( 0x7FFFFFFFFFFFFFFFi64 - (v13 >> 1) >= v13 )
          v14 = (v13 >> 1) + v13;
        else
          v14 = 0i64;
        if ( v14 < result )
          v14 = result;
        result = std::vector<unsigned short>::reserve((__int64)a1, v14);
      }
    }
    v15 = (_WORD *)a1[1];
    if ( v15 )
    {
      result = *a2;
      *v15 = result;
    }
  }
  else
  {
    v5 = a1[2];
    v6 = (__int64)((__int64)a2 - *a1) >> 1;
    if ( result == v5 )
    {
      v7 = (__int64)(result - *a1) >> 1;
      if ( v7 > 0x7FFFFFFFFFFFFFFEi64 )
        std::vector<std::vector<unsigned char> *,std::allocator<std::vector<unsigned char> *>>::_Xlen();
      result = v7 + 1;
      v8 = (__int64)(v5 - *a1) >> 1;
      if ( result > v8 )
      {
        if ( 0x7FFFFFFFFFFFFFFFi64 - (v8 >> 1) >= v8 )
          v9 = (v8 >> 1) + v8;
        else
          v9 = 0i64;
        if ( v9 < result )
          v9 = result;
        result = std::vector<unsigned short>::reserve((__int64)a1, v9);
      }
    }
    v10 = (_WORD *)a1[1];
    if ( v10 )
    {
      result = *a1;
      *v10 = *(_WORD *)(*a1 + 2 * v6);
    }
  }
  a1[1] += 2i64;
  return result;
}
