//----- (0000000140158DC4) ----------------------------------------------------
__int64 __fastcall Dns_WriteGssTkeyToMessage(__int64 a1, __int64 a2, unsigned __int64 a3, _QWORD *a4)
{
  unsigned int v8; // esi
  char v9; // al
  __int64 v10; // rbx
  __int64 v12; // rax
  __int64 v13; // r8
  __int64 v14; // r8
  __int64 v15; // r10
  const char *v16; // r12
  unsigned __int16 v17; // bx
  unsigned __int16 v18; // r15
  char *v19; // rsi
  unsigned int *v20; // rsi
  unsigned int v21; // eax
  _WORD *v22; // rsi
  _WORD *v23; // rax
  int v24; // [rsp+20h] [rbp-38h]

  v8 = 13;
  v9 = byte_1401BA001;
  if ( (byte_1401BA001 & 0x20) != 0 )
  {
    WPP_SF_q(59i64, (unsigned __int16)&WPP_9b9f12dbc4273be48aea1d81c92c8dd1_Traceguids, a1);
    v9 = byte_1401BA001;
  }
  v10 = *(_QWORD *)a1;
  if ( *(_QWORD *)a1 )
  {
    *(_DWORD *)(a2 + 6) = 0;
    *(_WORD *)(a2 + 10) = 0;
    v12 = Dns_SkipToRecord(a2, a3, 0i64);
    if ( v12 )
    {
      *(_WORD *)(a2 + 6) = 1;
      if ( !*(_DWORD *)(v10 + 128) )
        *(_DWORD *)(v10 + 128) = *(_DWORD *)(a1 + 140);
      v15 = Dns_WriteDottedNameToPacket(v12, a3, *(_QWORD *)(v10 + 88), 0i64, 0, 0);
      if ( v15 )
      {
        if ( *(_DWORD *)(v10 + 128) == 3 )
        {
          v16 = (const char *)&unk_1401955C8;
          v17 = 19;
        }
        else
        {
          v16 = "\bgss-tsig";
          v17 = 10;
        }
        v18 = *(_WORD *)(a1 + 24);
        if ( (unsigned __int64)(unsigned __int16)(v17 + v18 + 16) + v15 + 10 <= a3 )
        {
          LOWORD(v24) = v17 + v18 + 16;
          v19 = (char *)Dns_WriteRecordStructureToPacketEx(v15, 249i64, 255i64, 0i64, v24);
          memcpy_0(v19, v16, v17);
          v20 = (unsigned int *)&v19[v17];
          v21 = time(0i64);
          *v20 = (((v21 << 16) | v21 & 0xFF00) << 8) | ((HIWORD(v21) | v21 & 0xFF0000) >> 8);
          v20[1] = (((v21 + 86400) & 0xFF00 | ((v21 + 86400) << 16)) << 8) | ((((v21 + 86400) >> 16) | (v21 + 86400) & 0xFF0000) >> 8);
          *((_WORD *)v20 + 4) = 768;
          *((_WORD *)v20 + 5) = __ROL2__(*(_WORD *)(a1 + 138), 8);
          *((_WORD *)v20 + 6) = __ROL2__(v18, 8);
          v20 = (unsigned int *)((char *)v20 + 14);
          memcpy_0(v20, *(const void **)(a1 + 32), v18);
          v22 = (_WORD *)((char *)v20 + v18);
          if ( (byte_1401BA001 & 0x20) != 0 )
            WPP_SF_qdq(63i64, (unsigned __int16)&WPP_9b9f12dbc4273be48aea1d81c92c8dd1_Traceguids, a2, v18, v22);
          v23 = v22 + 1;
          *v22 = 0;
          v8 = 0;
          *a4 = v23;
        }
        else
        {
          if ( (byte_1401BA001 & 4) != 0 )
            WPP_SF_(62i64, (unsigned __int16)&WPP_9b9f12dbc4273be48aea1d81c92c8dd1_Traceguids, v14);
          return 87;
        }
      }
    }
    else if ( (byte_1401BA001 & 4) != 0 )
    {
      WPP_SF_(61i64, (unsigned __int16)&WPP_9b9f12dbc4273be48aea1d81c92c8dd1_Traceguids, v13);
    }
    return v8;
  }
  else
  {
    if ( (v9 & 4) != 0 )
      WPP_SF_(60i64, (unsigned __int16)&WPP_9b9f12dbc4273be48aea1d81c92c8dd1_Traceguids, a3);
    return 9017i64;
  }
}
// 140158E2B: variable 'a3' is possibly undefined
// 140158E6D: variable 'v13' is possibly undefined
// 140158F12: variable 'v14' is possibly undefined
// 140158F36: variable 'v24' is possibly undefined
// 140183D80: using guessed type __int64 __fastcall Dns_WriteDottedNameToPacket(_QWORD, _QWORD, _QWORD, _QWORD, _DWORD, _DWORD);
// 140183DA8: using guessed type __int64 __fastcall Dns_SkipToRecord(_QWORD, _QWORD, _QWORD);
// 140183DB0: using guessed type __int64 __fastcall Dns_WriteRecordStructureToPacketEx(_QWORD, _QWORD, _QWORD, _QWORD, _DWORD);
// 1401BA001: using guessed type char byte_1401BA001;
