//----- (000000014011D720) ----------------------------------------------------
STRSAFE_LPSTR __fastcall WksFileWrite(__int64 a1, char *a2, __int64 a3)
{
  struct servent *v5; // r12
  char *v6; // rbx
  struct protoent *v7; // rax
  __int64 v8; // rdx
  const char **p_p_name; // r13
  __int64 v10; // rdx
  int v11; // r14d
  u_short v12; // bp
  int v13; // r15d
  u_short v14; // ax
  STRSAFE_LPSTR v15; // rax
  __int64 v17; // [rsp+20h] [rbp-58h]
  __int64 v18; // [rsp+20h] [rbp-58h]
  int v19; // [rsp+28h] [rbp-50h]
  __int64 v20; // [rsp+28h] [rbp-50h]
  __int128 v21; // [rsp+40h] [rbp-38h] BYREF
  struct servent *v22; // [rsp+80h] [rbp+8h]

  v22 = 0i64;
  v5 = 0i64;
  v6 = sprintfSafeA(
         a2,
         a3 - (_QWORD)a2,
         "%d.%d.%d.%d\t",
         *(unsigned __int8 *)(a1 + 56),
         *(unsigned __int8 *)(a1 + 57),
         *(unsigned __int8 *)(a1 + 58),
         *(unsigned __int8 *)(a1 + 59));
  if ( !v6 )
    return v6;
  v7 = getprotobynumber(*(unsigned __int8 *)(a1 + 60));
  p_p_name = (const char **)&v7->p_name;
  if ( v7 )
  {
    v6 = sprintfSafeA(v6, a3 - (_QWORD)v6, "%s (", v7->p_name);
    if ( !v6 )
      return v6;
  }
  else
  {
    v19 = *(unsigned __int8 *)(a1 + 60);
    v21 = DNS_EVENT_UNKNOWN_PROTOCOL_NUMBER;
    Eventlog_LogEvent((__int64)&v21, v8, 0, 0i64, 0i64, v19, 0, 0i64);
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 0x20) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 25) >= 4u )
    {
      WPP_SF_D(
        *((_QWORD *)WPP_GLOBAL_Control + 2),
        0xAu,
        (__int64)&WPP_ab615269c76f3f4d2c78c36a7027be85_Traceguids,
        *(unsigned __int8 *)(a1 + 60));
    }
    LODWORD(v17) = *(unsigned __int8 *)(a1 + 60);
    v6 = sprintfSafeA(
           v6,
           a3 - (_QWORD)v6,
           "%u (\t; ERROR:  unknown protocol %u\r\n",
           *(unsigned __int8 *)(a1 + 60),
           v17);
    if ( !v6 )
      return v6;
    v22 = 0i64;
  }
  v11 = 0;
  if ( *(unsigned __int16 *)(a1 + 14) - 5 <= 0 )
    return sprintfSafeA(v6, a3 - (_QWORD)v6, " )\r\n");
  while ( 1 )
  {
    v12 = 8 * v11;
    v13 = *(unsigned __int8 *)(v11 + a1 + 61);
    if ( *(_BYTE *)(v11 + a1 + 61) )
      break;
LABEL_25:
    v5 = v22;
    if ( ++v11 >= *(unsigned __int16 *)(a1 + 14) - 5 )
      return sprintfSafeA(v6, a3 - (_QWORD)v6, " )\r\n");
  }
  while ( 1 )
  {
    if ( (v13 & 0x80u) != 0 )
    {
      if ( p_p_name )
      {
        v14 = htons(v12);
        v5 = getservbyport(v14, *p_p_name);
        v22 = v5;
      }
      if ( v5 )
      {
        v15 = sprintfSafeA(v6, a3 - (_QWORD)v6, "\r\n%s\t\t%s", "                        ", v5->s_name);
      }
      else
      {
        v21 = DNS_EVENT_UNKNOWN_SERVICE_PORT;
        Eventlog_LogEvent((__int64)&v21, v10, 0, 0i64, 0i64, v12, 0, 0i64);
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 0x20) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 25) >= 4u )
        {
          WPP_SF_D(
            *((_QWORD *)WPP_GLOBAL_Control + 2),
            0xBu,
            (__int64)&WPP_ab615269c76f3f4d2c78c36a7027be85_Traceguids,
            v12);
        }
        LODWORD(v20) = v12;
        LODWORD(v18) = v12;
        v15 = sprintfSafeA(
                v6,
                a3 - (_QWORD)v6,
                "\r\n%s\t\t%u\t; ERROR:  unknown service for port %u\r\n",
                "                        ",
                v18,
                v20);
      }
      v6 = v15;
      if ( !v15 )
        return v6;
    }
    v5 = v22;
    ++v12;
    v13 *= 2;
    if ( !v13 )
      goto LABEL_25;
  }
}
// 14011D804: variable 'v8' is possibly undefined
// 14011D855: variable 'v17' is possibly undefined
// 14011D92D: variable 'v10' is possibly undefined
// 14011D98A: variable 'v18' is possibly undefined
// 14011D98A: variable 'v20' is possibly undefined
// 1401869C8: using guessed type __int128 DNS_EVENT_UNKNOWN_PROTOCOL_NUMBER;
// 140187080: using guessed type __int128 DNS_EVENT_UNKNOWN_SERVICE_PORT;
