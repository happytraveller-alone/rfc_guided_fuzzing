//----- (00000001400E81C0) ----------------------------------------------------
__int64 __fastcall std::_Hash<std::_Hmap_traits<unsigned short,TrustAnchor,stdext::hash_compare<unsigned short,std::less<unsigned short>>,std::allocator<std::pair<unsigned short const,TrustAnchor>>,1>>::_Insert(
        __int64 a1,
        __int64 a2,
        _WORD *a3,
        __int64 *a4)
{
  __int64 v4; // rbx
  unsigned __int64 v6; // rdx
  unsigned __int64 v7; // rcx
  __int64 **v8; // rsi
  __int64 *v9; // rax
  __int64 v10; // r10
  __int64 v11; // rdx
  __int64 v12; // rcx
  __int64 *v13; // rcx
  __int64 v14; // rdx
  __int64 v15; // r9
  __int64 v16; // r8
  __int64 *v17; // rdx
  __int64 **v18; // rax
  __int64 *v19; // rdx
  __int64 v20; // rax
  __int64 v21; // rdx
  float v22; // xmm0_4
  float v23; // xmm2_4
  int i; // eax
  __int64 *v25; // rax
  __int64 v26; // rbx
  __int64 v27; // r9
  __int64 v29[7]; // [rsp+20h] [rbp-38h] BYREF
  bool v32; // [rsp+70h] [rbp+18h]

  v29[2] = -2i64;
  v4 = a2;
  v29[0] = (__int64)ldiv(((unsigned __int16)*a3 ^ 0xDEADBEEF) & 0x7FFFFFFF, 127773);
  v6 = *(_QWORD *)(a1 + 64);
  v7 = v6 & (16807 * HIDWORD(v29[0])
           - 2836 * LODWORD(v29[0])
           + (16807 * HIDWORD(v29[0]) - 2836 * LODWORD(v29[0]) < 0 ? 0x7FFFFFFF : 0));
  if ( *(_QWORD *)(a1 + 72) <= v7 )
    v7 += -1i64 - (v6 >> 1);
  v8 = (__int64 **)(a1 + 8);
  v9 = *(__int64 **)(a1 + 8);
  v10 = 2 * v7;
  v11 = *(_QWORD *)(a1 + 32);
  if ( v9 != *(__int64 **)(v11 + 16 * v7) )
  {
    v9 = **(__int64 ***)(v11 + 16 * v7 + 8);
    if ( v9 != *(__int64 **)(v11 + 16 * v7) )
    {
      v12 = 2 * v7;
      while ( 1 )
      {
        v9 = (__int64 *)v9[1];
        if ( *a3 >= *((_WORD *)v9 + 8) )
          break;
        if ( v9 == *(__int64 **)(v11 + 8 * v12) )
          goto LABEL_10;
      }
      v9 = (__int64 *)*v9;
    }
  }
LABEL_10:
  v13 = a4;
  v14 = *a4;
  if ( v9 != (__int64 *)*a4 )
  {
    *(_QWORD *)a4[1] = v14;
    **(_QWORD **)(v14 + 8) = v9;
    *(_QWORD *)v9[1] = a4;
    v15 = v9[1];
    v9[1] = *(_QWORD *)(v14 + 8);
    *(_QWORD *)(v14 + 8) = a4[1];
    a4[1] = v15;
    v13 = a4;
  }
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(__int64 **)(v16 + 8 * v10);
  if ( v17 == *v8 )
  {
    *(_QWORD *)(v16 + 8 * v10) = v13;
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v10 + 8) = v13;
  }
  else if ( v17 == v9 )
  {
    *(_QWORD *)(v16 + 8 * v10) = v13;
  }
  else
  {
    v18 = *(__int64 ***)(v16 + 8 * v10 + 8);
    v19 = *v18;
    *(_QWORD *)(v16 + 8 * v10 + 8) = *v18;
    if ( v19 != v13 )
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v10 + 8) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v10 + 8)
                                                                  + 8i64);
  }
  v20 = *(_QWORD *)(a1 + 16);
  v21 = *(_QWORD *)(a1 + 72);
  v22 = (float)(int)v20;
  if ( v20 < 0 )
    v22 = v22 + 1.8446744e19;
  v23 = (float)(int)v21;
  if ( v21 < 0 )
    v23 = v23 + 1.8446744e19;
  if ( (float)(v22 / v23) > *(float *)(a1 + 80) )
  {
    for ( i = 0; i < 3; ++i )
    {
      if ( (unsigned __int64)v21 >= 0xFFFFFFFFFFFFFFFi64 )
        break;
      v21 *= 2i64;
    }
    std::_Hash<std::_Hmap_traits<unsigned short,TrustAnchor,stdext::hash_compare<unsigned short,std::less<unsigned short>>,std::allocator<std::pair<unsigned short const,TrustAnchor>>,1>>::_Init(
      (_QWORD *)a1,
      v21);
    v25 = *v8;
    if ( (__int64 *)*v25 != v25 )
    {
      v26 = v25[1];
      do
      {
        v27 = **v8;
        v32 = v27 == v26;
        std::_Hash<std::_Hmap_traits<unsigned short,TrustAnchor,stdext::hash_compare<unsigned short,std::less<unsigned short>>,std::allocator<std::pair<unsigned short const,TrustAnchor>>,1>>::_Insert(
          a1,
          (__int64)v29,
          (_WORD *)(v27 + 16),
          (__int64 *)v27);
      }
      while ( !v32 );
      v4 = a2;
    }
  }
  *(_QWORD *)v4 = a4;
  *(_BYTE *)(v4 + 8) = 1;
  return v4;
}
