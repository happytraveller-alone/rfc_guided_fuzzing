//----- (000000014013E0F8) ----------------------------------------------------
__int64 __fastcall Delete_ClientSubnetRecord(char **a1, int a2)
{
  char *v3; // rdx
  unsigned __int64 v5; // r8
  __int64 v6; // rcx
  __int64 v7; // rax
  unsigned int v8; // ebx
  __int64 v9; // rdx
  __int64 v11; // [rsp+30h] [rbp-48h] BYREF
  const void *v12[3]; // [rsp+38h] [rbp-40h] BYREF
  unsigned __int64 v13; // [rsp+50h] [rbp-28h]

  v13 = 7i64;
  v12[2] = 0i64;
  v3 = *a1;
  LOWORD(v12[0]) = 0;
  v5 = -1i64;
  do
    ++v5;
  while ( *(_WORD *)&v3[2 * v5] );
  std::wstring::assign((char *)v12, v3, v5);
  v7 = *std::_Tree<std::_Tmap_traits<std::wstring,CDNSClientSubnetRecord *,CDnsCompareName,std::allocator<std::pair<std::wstring const,CDNSClientSubnetRecord *>>,0>>::find(
          v6,
          &v11,
          v12);
  if ( v7 == qword_1401B93E8 )
  {
    v8 = 9976;
  }
  else
  {
    v8 = CDNSClientSubnetRecord::DeleteClientSubnetRecord(
           *(CDNSClientSubnetRecord **)(v7 + 64),
           (struct _ClientSubnetRecord *)a1,
           a2);
    if ( !v8 )
    {
      v8 = AddClientSubnetRecordToRegistry((__int64)a1, v9, a2 != 0 ? 4 : 2);
      if ( v8 )
      {
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
        {
          WPP_SF_SD(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x36u,
            (__int64)&WPP_7bc0de5581043365e853c04d44d2eaeb_Traceguids,
            (const unsigned __int16 *)*a1);
        }
      }
    }
  }
  if ( v13 >= 8 )
    operator delete((void *)v12[0]);
  return v8;
}
// 14013E158: variable 'v6' is possibly undefined
// 14013E195: variable 'v9' is possibly undefined
// 140184CA8: using guessed type void __stdcall operator delete(void *);
// 1401B93E8: using guessed type __int64 qword_1401B93E8;
