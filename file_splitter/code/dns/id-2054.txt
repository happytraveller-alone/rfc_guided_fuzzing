//----- (00000001400FF890) ----------------------------------------------------
__int64 __fastcall Rpc_EnumZoneSKDs(
        __int64 a1,
        __int64 a2,
        __int64 a3,
        __int64 a4,
        int a5,
        int a6,
        _DWORD *a7,
        _QWORD *a8)
{
  __int64 v8; // rbx
  unsigned int v10; // edi
  int v11; // r13d
  CDnsClientSubnetRecordsTrie *v12; // r10
  const char *v13; // r9
  __int64 v14; // rcx
  _DWORD *zero; // rax
  _DWORD *v16; // r14
  struct _dnsskd *v17; // r15
  void ***v18; // r12
  struct _DnssrvRpcSigningKeyDescriptor **v19; // rbp
  struct _DnssrvRpcSigningKeyDescriptor *Skd; // rax
  void **v22; // rbp

  v8 = 0i64;
  v10 = 0;
  v11 = 1000;
  v12 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    if ( a3 )
      v13 = *(const char **)(a3 + 16);
    else
      v13 = 0i64;
    WPP_SF_s(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x2Cu, (__int64)&WPP_fcf90f505e41335ad1a88e0d5ede2d0c_Traceguids, v13);
    v12 = WPP_GLOBAL_Control;
  }
  if ( !a3 )
  {
    v10 = 87;
    goto LABEL_30;
  }
  v14 = a3;
  if ( *(_QWORD *)(a3 + 328) )
    v14 = *(_QWORD *)(a3 + 328);
  if ( *(_QWORD *)(v14 + 200) )
  {
    v10 = 9553;
    goto LABEL_30;
  }
  if ( *(_DWORD *)(a3 + 372) != 1 )
  {
    v10 = 9611;
    goto LABEL_30;
  }
  if ( (*(_BYTE *)(a3 + 388) & 1) != 0 && (dword_1401B9750 || g_fDsReadOnlyDcMode)
    || (*(_BYTE *)(a3 + 1160) & 0x40) != 0 )
  {
    v10 = 9569;
    goto LABEL_30;
  }
  zero = MIDL_user_allocate_zero(0x1F58ui64);
  v16 = zero;
  if ( !zero )
  {
    v10 = 14;
LABEL_29:
    v12 = WPP_GLOBAL_Control;
    goto LABEL_30;
  }
  *zero = 1;
  v17 = *(struct _dnsskd **)(a3 + 1136);
  if ( !v17 )
  {
LABEL_28:
    *a7 = 46;
    *a8 = v16;
    goto LABEL_29;
  }
  v18 = (void ***)(zero + 4);
  v19 = (struct _DnssrvRpcSigningKeyDescriptor **)(zero + 4);
  while ( v11 )
  {
    Skd = Rpc_AllocateSkd(v17);
    if ( !Skd )
    {
      v10 = 14;
      goto LABEL_44;
    }
    *v19 = Skd;
    --v11;
    ++v16[2];
    ++v19;
    v17 = *(struct _dnsskd **)v17;
    if ( !v17 )
      goto LABEL_28;
  }
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
  {
    WPP_SF_s(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x2Du,
      (__int64)&WPP_fcf90f505e41335ad1a88e0d5ede2d0c_Traceguids,
      *(const char **)(a3 + 16));
  }
  v10 = 13;
LABEL_44:
  while ( 1 )
  {
    v22 = *v18;
    if ( !*v18 )
      break;
    MIDL_user_free(v22[3]);
    MIDL_user_free(v22);
    ++v18;
  }
  MIDL_user_free(v16);
  v12 = WPP_GLOBAL_Control;
LABEL_30:
  if ( v12 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)v12 + 68) & 4) != 0
    && *((_BYTE *)v12 + 65) >= 4u )
  {
    if ( a3 )
      v8 = *(_QWORD *)(a3 + 16);
    WPP_SF_Ds(*((_QWORD *)v12 + 7), 0x2Eu, (__int64)&WPP_fcf90f505e41335ad1a88e0d5ede2d0c_Traceguids, v10, v8);
  }
  return v10;
}
// 1401B8C94: using guessed type int g_fDsReadOnlyDcMode;
// 1401B9750: using guessed type int dword_1401B9750;
