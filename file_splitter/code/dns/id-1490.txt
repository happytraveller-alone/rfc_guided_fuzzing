//----- (00000001400BB53C) ----------------------------------------------------
__int64 __fastcall checkTempNodesForUpdateEffect(__int64 a1, __int64 a2)
{
  unsigned int v4; // r14d
  unsigned int v5; // r15d
  CDnsClientSubnetRecordsTrie *v6; // rax
  __int64 v7; // rbp
  const char *v8; // rcx
  __int64 v10; // r13
  unsigned int v11; // ebx
  __int64 v12; // rdi
  int v13; // eax
  int v14; // edi
  int v15; // ebx
  const char *v16; // rax
  __int64 v17; // rdx
  __int64 v18; // r8
  int v19; // eax
  int v20; // [rsp+30h] [rbp-48h]
  BOOL v21; // [rsp+38h] [rbp-40h]
  int v22; // [rsp+80h] [rbp+8h]
  unsigned int v23; // [rsp+88h] [rbp+10h] BYREF

  v22 = 0;
  v4 = 0;
  v5 = 1;
  v6 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
  {
    if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x80000) == 0 )
      goto LABEL_8;
    if ( *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_s(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0xA9u,
        (__int64)&WPP_40fcce62f6f439b0ec75be29cae6130a_Traceguids,
        *(const char **)(a1 + 16));
      v6 = WPP_GLOBAL_Control;
    }
  }
  if ( (*((_DWORD *)v6 + 17) & 0x80000) != 0 && *((_BYTE *)v6 + 65) >= 5u )
  {
    Dbg_UpdateList("Update list before checkTempNodesForUpdateEffect", a2);
    v6 = WPP_GLOBAL_Control;
  }
LABEL_8:
  if ( (*(_BYTE *)(a1 + 388) & 1) != 0 && *(_DWORD *)(a1 + 372) == 1 && (*(_BYTE *)(a1 + 1040) & 4) != 0 )
    v5 = 9;
  v7 = *(_QWORD *)(a2 + 16);
  if ( !v7 )
    goto LABEL_13;
  while ( g_fDnsServiceExit != 1 )
  {
    v10 = *(_QWORD *)(v7 + 8);
    v11 = *(_DWORD *)(a1 + 988);
    v12 = *(_QWORD *)(v7 + 64);
    deleteCachedRecordsForUpdate(v10);
    v23 = -1;
    acquireRead(DbaseLock, 0xFFFFFFFF, &v23);
    v13 = RR_ListCompare(v10, *(_QWORD *)(v10 + 64), 0i64, v12, v5, v11);
    v23 = -1;
    v14 = 1;
    v15 = v13;
    releaseRead(DbaseLock, &v23, 1);
    *(_DWORD *)(v7 + 72) = v15;
    if ( v15 )
    {
      if ( v15 == 255 )
      {
        *(_DWORD *)(v7 + 84) = -2004353023;
        v4 = 1;
        v22 = 1;
        if ( (*(_BYTE *)(v10 + 92) & 2) != 0 )
          checkDnsServerHostUpdate(a1, a2, v10, v7);
        goto LABEL_29;
      }
      if ( (*(_BYTE *)(a1 + 396) & 1) != 0 || v15 == 130 )
      {
        v4 = 1;
        *(_DWORD *)(v7 + 84) = -2004353023;
      }
    }
    v14 = v22;
LABEL_29:
    v6 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x80000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      v16 = (const char *)FormatLabelA(*(unsigned __int8 *)(v7 + 101), (const void *)(v7 + 102));
      v21 = *(_DWORD *)(v7 + 84) == -2004353023;
      v20 = v15;
      WPP_SF_sqqDd(*((_QWORD *)WPP_GLOBAL_Control + 7), v17, v18, v16);
      v6 = WPP_GLOBAL_Control;
    }
    v7 = *(_QWORD *)(v7 + 24);
    if ( !v7 )
    {
      if ( !v4 )
        goto LABEL_13;
      v19 = *(_DWORD *)(a1 + 512);
      if ( v14 )
      {
        if ( !++v19 )
          v19 = 1;
      }
      *(_DWORD *)(a1 + 524) = v19;
      goto LABEL_39;
    }
  }
  if ( v6 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
  {
    if ( (*((_DWORD *)v6 + 17) & 0x80000) != 0 && *((_BYTE *)v6 + 65) >= 4u )
    {
      WPP_SF_(*((_QWORD *)v6 + 7), 0xAAu, (__int64)&WPP_40fcce62f6f439b0ec75be29cae6130a_Traceguids);
LABEL_39:
      v6 = WPP_GLOBAL_Control;
    }
LABEL_13:
    if ( v6 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)v6 + 17) & 0x80000) != 0
      && *((_BYTE *)v6 + 65) >= 4u )
    {
      v8 = "does not require";
      if ( v4 )
        v8 = "requires";
      WPP_SF_qss(
        *((_QWORD *)v6 + 7),
        0xACu,
        (__int64)&WPP_40fcce62f6f439b0ec75be29cae6130a_Traceguids,
        a2,
        *(_QWORD *)(a1 + 16),
        v8,
        v20,
        v21);
    }
  }
  return v4;
}
// 1400BB64A: variable 'v20' is possibly undefined
// 1400BB64A: variable 'v21' is possibly undefined
// 1400BB7A9: variable 'v17' is possibly undefined
// 1400BB7A9: variable 'v18' is possibly undefined
// 1401B9A40: using guessed type int g_fDnsServiceExit;
// 1401EC5E8: using guessed type __int64 DbaseLock;
