//----- (0000000140112A14) ----------------------------------------------------
__int64 *__fastcall std::_Tree<std::_Tmap_traits<unsigned short *,_virtualization_info_ *,bool (*)(unsigned short *,unsigned short *),std::allocator<std::pair<unsigned short * const,_virtualization_info_ *>>,0>>::erase(
        __int64 a1,
        __int64 *a2,
        __int64 a3,
        __int64 a4)
{
  _QWORD *v4; // rsi
  _QWORD *v7; // rsi
  _QWORD *i; // r14
  __int64 *v9; // rax
  __int64 *v10; // rax
  __int64 j; // rcx
  __int64 k; // rdx
  __int64 v14; // [rsp+40h] [rbp+8h] BYREF
  __int64 v15; // [rsp+50h] [rbp+18h]
  __int64 v16; // [rsp+58h] [rbp+20h]

  v16 = a4;
  v15 = a3;
  v4 = *(_QWORD **)(a1 + 8);
  if ( a3 == *v4 && (_QWORD *)a4 == v4 )
  {
    v7 = (_QWORD *)v4[1];
    for ( i = v7; !*((_BYTE *)i + 41); v7 = i )
    {
      std::_Tree<std::_Tmap_traits<_lookup_name *,_DnsTreeNode *,DnsSign::CLookupNameCompare,std::allocator<std::pair<_lookup_name * const,_DnsTreeNode *>>,0>>::_Erase(
        a1,
        (void **)i[2]);
      i = (_QWORD *)*i;
      operator delete(v7);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8i64) = *(_QWORD *)(a1 + 8);
    **(_QWORD **)(a1 + 8) = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16i64) = *(_QWORD *)(a1 + 8);
    v9 = *(__int64 **)(a1 + 8);
    *(_QWORD *)(a1 + 16) = 0i64;
    *a2 = *v9;
  }
  else
  {
    if ( a3 != a4 )
    {
      do
      {
        v10 = (__int64 *)a3;
        if ( !*(_BYTE *)(a3 + 41) )
        {
          j = *(_QWORD *)(a3 + 16);
          if ( *(_BYTE *)(j + 41) )
          {
            for ( j = *(_QWORD *)(a3 + 8); !*(_BYTE *)(j + 41) && a3 == *(_QWORD *)(j + 16); j = *(_QWORD *)(j + 8) )
            {
              a3 = j;
              v15 = j;
            }
          }
          else
          {
            for ( k = *(_QWORD *)j; !*(_BYTE *)(k + 41); k = *(_QWORD *)k )
              j = k;
          }
          v15 = j;
        }
        std::_Tree<std::_Tmap_traits<unsigned long,CDnsPolicy_CriteriaNode *,bool (*)(unsigned long const &,unsigned long const &),std::allocator<std::pair<unsigned long const,CDnsPolicy_CriteriaNode *>>,0>>::erase(
          a1,
          &v14,
          v10);
        a3 = v15;
      }
      while ( v15 != v16 );
    }
    *a2 = a3;
  }
  return a2;
}
// 140184CA8: using guessed type void __stdcall operator delete(void *);
