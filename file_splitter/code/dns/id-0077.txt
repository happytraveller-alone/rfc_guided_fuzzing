//----- (00000001400094E8) ----------------------------------------------------
__int64 __fastcall answerIQuery(__int64 a1)
{
  unsigned __int16 v2; // si
  __int64 v4; // rax
  __int64 RecordStructureFromPacket; // rax
  unsigned __int16 v6; // r12
  char *v7; // rdi
  LONG v8; // eax
  int v9; // r15d
  char *v10; // rdi
  __int64 v11; // rdi
  unsigned __int16 v12; // di
  __int64 v13; // rax
  unsigned __int16 v14; // di
  unsigned __int16 v15; // di
  _DWORD *v16; // rax
  __int64 v17; // r8
  _DWORD *v18; // r14
  int v19; // [rsp+28h] [rbp-A9h]
  ULONG AddressStringLength[4]; // [rsp+48h] [rbp-89h] BYREF
  struct in_addr v21; // [rsp+58h] [rbp-79h] BYREF
  struct in_addr Address; // [rsp+5Ch] [rbp-75h] BYREF
  struct in6_addr v23; // [rsp+60h] [rbp-71h] BYREF
  ULONG ScopeId; // [rsp+70h] [rbp-61h]
  char v25[16]; // [rsp+98h] [rbp-39h] BYREF
  struct in_addr *v26; // [rsp+A8h] [rbp-29h]
  __int16 v27; // [rsp+B8h] [rbp-19h]
  __int16 v28; // [rsp+BAh] [rbp-17h]
  __int16 v29; // [rsp+C0h] [rbp-11h]
  char AddressString[24]; // [rsp+C8h] [rbp-9h] BYREF
  char v31; // [rsp+E0h] [rbp+Fh] BYREF
  char v32[23]; // [rsp+E1h] [rbp+10h] BYREF

  AddressStringLength[0] = 17;
  v2 = 1;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
  {
    WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 7), 0xA1u, (__int64)&WPP_a00dfa190cfc31699b498ea413aa2a5c_Traceguids, a1);
  }
  if ( !dword_1401B99BC )
  {
    v2 = 4;
    return Reject_RequestIntact(a1, v2, 0);
  }
  if ( *(_WORD *)(a1 + 6308) && *(_WORD *)(a1 + 6310) != 1 )
    return Reject_RequestIntact(a1, v2, 0);
  v4 = Wire_SkipPacketName(a1, a1 + 6316);
  if ( !v4 )
    return Reject_RequestIntact(a1, v2, 0);
  RecordStructureFromPacket = Dns_ReadRecordStructureFromPacket(v4, *(unsigned __int16 *)(a1 + 6302) + a1 + 6304, v25);
  if ( !RecordStructureFromPacket || v27 != 1 || v28 != 1 || v29 != 4 )
    return Reject_RequestIntact(a1, v2, 0);
  v6 = RecordStructureFromPacket - a1 - 6316;
  DnsAddr_BuildFromIp4(&v21, *v26, 0);
  AddressString[0] = 0;
  v7 = AddressString;
  if ( v21.S_un.S_un_w.s_w1 == 2 )
  {
    v8 = RtlIpv4AddressToStringExA(&Address, v21.S_un.S_un_w.s_w2, AddressString, AddressStringLength);
  }
  else
  {
    if ( v21.S_un.S_un_w.s_w1 != 23 )
    {
      v9 = 87;
      v7 = 0i64;
      goto LABEL_21;
    }
    v8 = RtlIpv6AddressToStringExA(&v23, ScopeId, v21.S_un.S_un_w.s_w2, AddressString, AddressStringLength);
  }
  v9 = v8;
LABEL_21:
  if ( v9 )
    v10 = 0i64;
  else
    v10 = &v7[AddressStringLength[0]];
  if ( !v10 )
    return Reject_RequestIntact(a1, v2, 0);
  v11 = -1i64;
  do
    ++v11;
  while ( AddressString[v11] );
  if ( (unsigned __int16)v11 > 0x10u )
    return Reject_RequestIntact(a1, v2, 0);
  v31 = 91;
  memcpy_0(v32, AddressString, (unsigned __int16)v11);
  v12 = v11 + 1;
  v13 = v12;
  v14 = v12 + 1;
  v32[v13 - 1] = 93;
  if ( v14 >= 0x13ui64 )
    _report_rangecheckfailure();
  v32[v14 - 1] = 0;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_s(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0xA2u,
      (__int64)&WPP_a00dfa190cfc31699b498ea413aa2a5c_Traceguids,
      &v31);
  }
  v15 = v14 + 6;
  memmove((void *)(v15 + a1 + 6316), (const void *)(a1 + 6316), v6);
  LOWORD(v19) = 0;
  v16 = (_DWORD *)Dns_WriteDottedNameToPacket(a1 + 6316, *(_QWORD *)(a1 + 24), &v31, 0i64, v19, 0);
  if ( !v16 )
    return Reject_RequestIntact(a1, v2, 0);
  *v16 = 16777472;
  v18 = v16 + 1;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
  {
    WPP_SF_qqqDD(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      (__int64)WPP_GLOBAL_Control,
      v17,
      a1 + 6304,
      a1 + 6316,
      v18,
      v6,
      v15);
  }
  *(_BYTE *)(a1 + 6306) |= 0x80u;
  *(_QWORD *)(a1 + 32) = (char *)v18 + v6;
  *(_WORD *)(a1 + 6308) = 1;
  *(_BYTE *)(a1 + 1412) = 1;
  return Send_Msg(a1, 0);
}
// 1400096A8: conditional instruction was optimized away because %AddressStringLength.4==11
// 1400097A1: variable 'v19' is possibly undefined
// 140009803: variable 'v17' is possibly undefined
// 140183D80: using guessed type __int64 __fastcall Dns_WriteDottedNameToPacket(_QWORD, _QWORD, _QWORD, _QWORD, _DWORD, _DWORD);
// 140183D88: using guessed type __int64 __fastcall Dns_ReadRecordStructureFromPacket(_QWORD, _QWORD, _QWORD);
// 1401B99BC: using guessed type int dword_1401B99BC;
// 1400094E8: using guessed type char var_90[16];
// 1400094E8: using guessed type CHAR AddressString[24];
// 1400094E8: using guessed type char var_47[23];
