//----- (000000014009D0A4) ----------------------------------------------------
__int64 __fastcall Send_RecursiveResponseToClient(__int64 a1, __int64 a2)
{
  unsigned int v4; // edi
  char v5; // cl
  char v6; // bp
  unsigned __int16 v7; // cx
  unsigned __int16 v8; // ax
  __int16 v9; // cx
  __int64 v10; // rcx
  __int128 v11; // xmm1
  __int64 v12; // rax
  __int64 *v13; // rdx
  __int64 *v14; // rcx
  __int64 v15; // r8
  __int64 **v16; // r8

  v4 = 0;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x4000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
  {
    WPP_SF_qq(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x45u,
      (__int64)&WPP_398a615c07233f5235cf23860937c5e7_Traceguids,
      a1,
      a2);
  }
  if ( a1 && a2 )
  {
    if ( (*(_BYTE *)(a1 + 592) & 1) != 0 || (*(_BYTE *)(a2 + 592) & 1) != 0 || *(_DWORD *)(a2 + 1484) )
    {
      v5 = *(_BYTE *)(a2 + 6307);
      if ( (v5 & 0xF) != 0 || *(_WORD *)(a2 + 6310) || *(_WORD *)(a2 + 6312) || *(_DWORD *)(a2 + 1484) )
        return v4;
      *(_WORD *)(a2 + 598) = *(_WORD *)(a1 + 598);
      *(_BYTE *)(a2 + 6307) = v5 ^ (v5 ^ *(_BYTE *)(a1 + 6307)) & 0x10;
      *(_DWORD *)(a2 + 592) ^= (*(_DWORD *)(a2 + 592) ^ *(_DWORD *)(a1 + 592)) & 1;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x4000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
      {
        WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x46u, (__int64)&WPP_398a615c07233f5235cf23860937c5e7_Traceguids);
      }
    }
    v6 = *(_BYTE *)(a2 + 1413);
    if ( v6 != *(_BYTE *)(a1 + 1413) )
    {
      if ( v6 )
      {
        if ( *(_WORD *)(a2 + 6302) > 0x200u )
          return v4;
        *(_BYTE *)(a2 + 6306) |= 2u;
      }
      else
      {
        *(_BYTE *)(a2 + 6306) &= ~2u;
      }
      *(_BYTE *)(a2 + 1413) = v6 == 0;
    }
    if ( *(_BYTE *)(a1 + 1413)
      || (v7 = *(_WORD *)(a2 + 6302), v7 <= 0x200u)
      || (v8 = *(_WORD *)(a1 + 604)) != 0 && v7 + 12 <= v8 )
    {
      v9 = *(_WORD *)(a1 + 604);
      *(_DWORD *)(a2 + 592) &= ~2u;
      *(_WORD *)(a2 + 604) = v9;
      *(_WORD *)(a2 + 600) = v9;
      *(_DWORD *)(a2 + 592) |= 2 * (v9 != 0);
      *(_WORD *)(a2 + 6304) = *(_WORD *)(a1 + 6304);
      *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
      v10 = *(unsigned __int16 *)(a2 + 6302) + a2 + 6304;
      *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 64);
      *(_OWORD *)(a2 + 80) = *(_OWORD *)(a1 + 80);
      *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 96);
      v11 = *(_OWORD *)(a1 + 112);
      *(_BYTE *)(a2 + 1412) = 0;
      *(_QWORD *)(a2 + 32) = v10;
      *(_OWORD *)(a2 + 112) = v11;
      if ( a2 != a1 )
      {
        v12 = a2 + 528;
        *(_QWORD *)(a2 + 536) = a2 + 528;
        v13 = (__int64 *)(a1 + 528);
        *(_QWORD *)(a2 + 528) = a2 + 528;
        while ( *v13 )
        {
          v14 = (__int64 *)*v13;
          v15 = *(_QWORD *)*v13;
          if ( *(__int64 **)(*v13 + 8) != v13 || *(__int64 **)(v15 + 8) != v14 )
            __fastfail(3u);
          *v13 = v15;
          *(_QWORD *)(v15 + 8) = v13;
          if ( v14 == v13 )
            break;
          v16 = *(__int64 ***)(a2 + 536);
          if ( *v16 != (__int64 *)v12 )
            __fastfail(3u);
          *v14 = v12;
          v14[1] = (__int64)v16;
          *v16 = v14;
          *(_QWORD *)(a2 + 536) = v14;
          _InterlockedIncrement((volatile signed __int32 *)(a2 + 560));
        }
        if ( *(_QWORD *)(a1 + 1432) )
        {
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x4000) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
          {
            WPP_SF_qq(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x48u,
              (__int64)&WPP_398a615c07233f5235cf23860937c5e7_Traceguids,
              a1,
              a2);
          }
          *(_QWORD *)(a2 + 1432) = *(_QWORD *)(a1 + 1432);
          *(_QWORD *)(a2 + 1440) = *(_QWORD *)(a1 + 1440);
        }
      }
      Send_Msg(a2, 0);
      v4 = 1;
      *(_BYTE *)(a2 + 1413) = v6;
      _InterlockedIncrement(&dword_1401C7EA4);
      Packet_Free(a1);
    }
  }
  return v4;
}
// 1401C7EA4: using guessed type int dword_1401C7EA4;
