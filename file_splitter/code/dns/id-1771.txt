//----- (00000001400DF4BC) ----------------------------------------------------
char __fastcall TrustAnchor::SetState(TrustAnchor *this, const enum TRUSTANCHOR_STATE *a2, char a3)
{
  bool v3; // cc
  __int64 v7; // rdx
  __int64 v8; // r8
  __int64 v9; // rax
  __int16 v10; // cx
  __int16 v11; // cx
  CDnsClientSubnetRecordsTrie *v12; // rcx
  unsigned __int16 v13; // dx
  struct _FILETIME v14; // r8
  int v15; // edx
  const char *v16; // rax
  __int64 v17; // r10
  __int64 v18; // r8
  int v20; // edx
  const char *v21; // rax
  __int64 v22; // r10
  __int64 v23; // r8
  struct _FILETIME SystemTimeAsFileTime; // [rsp+40h] [rbp-29h] BYREF
  int v25[2]; // [rsp+48h] [rbp-21h]
  int v26[4]; // [rsp+50h] [rbp-19h]
  int v27[7]; // [rsp+60h] [rbp-9h]
  __int64 v28; // [rsp+7Ch] [rbp+13h]
  __int64 v29; // [rsp+84h] [rbp+1Bh]
  __int64 v30; // [rsp+8Ch] [rbp+23h]
  __int64 v31; // [rsp+94h] [rbp+2Bh]
  int v32; // [rsp+9Ch] [rbp+33h]

  v27[0] = 16843008;
  v3 = *(_DWORD *)a2 <= 7u;
  v27[1] = 16843009;
  v27[2] = 65792;
  v27[3] = 0x1000000;
  v27[4] = 0x10000;
  v27[5] = 0x1000000;
  v27[6] = 0x1000000;
  v28 = 16842753i64;
  v29 = 16843009i64;
  v30 = 16843009i64;
  v31 = 16842752i64;
  v32 = 0;
  v26[0] = 65793;
  v26[1] = 0x1000000;
  v25[0] = 16777217;
  v25[1] = 16843009;
  if ( !v3 )
    return 0;
  GetSystemTimeAsFileTime(&SystemTimeAsFileTime);
  v7 = *((int *)this + 4);
  v8 = *(int *)a2;
  if ( !*((_BYTE *)&v27[2 * v7] + v8)
    || ((v9 = *(_QWORD *)this) == 0 ? (v10 = 0) : (v10 = *(_WORD *)(v9 + 12)),
        v10 == 48 && !*((_BYTE *)v25 + v8)
     || (!v9 ? (v11 = 0) : (v11 = *(_WORD *)(v9 + 12)), v11 == 43 && !*((_BYTE *)v26 + v8))) )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x100000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 3u )
    {
      DNSSEC_TrustAnchorStateToString(*(_DWORD *)a2);
      v21 = DNSSEC_TrustAnchorStateToString(v20);
      WPP_SF_Dqss(*(_QWORD *)(v22 + 56), 0x11u, v23, *((unsigned __int16 *)this + 10), (char)this, (__int64)v21, v23);
    }
    return 0;
  }
  if ( *(_DWORD *)a2 == 4 && (_DWORD)v7 == 5 && !*((_BYTE *)this + 22) )
  {
    v12 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x100000) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 5u )
    {
      return 0;
    }
    v13 = 18;
LABEL_20:
    WPP_SF_Dq(
      *((_QWORD *)v12 + 7),
      v13,
      (__int64)&WPP_4831604f5a2431d08120905ab66c1365_Traceguids,
      *((unsigned __int16 *)this + 10));
    return 0;
  }
  v14 = SystemTimeAsFileTime;
  if ( !a3 && *(_DWORD *)a2 == 4 && (_DWORD)v7 == 3 && *(__int64 *)&SystemTimeAsFileTime < *((_QWORD *)this + 3) )
  {
    v12 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x100000) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 5u )
    {
      return 0;
    }
    v13 = 19;
    goto LABEL_20;
  }
  if ( (_DWORD)v7 != *(_DWORD *)a2 )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x100000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
    {
      DNSSEC_TrustAnchorStateToString(*(_DWORD *)a2);
      v16 = DNSSEC_TrustAnchorStateToString(v15);
      WPP_SF_Dqss(*(_QWORD *)(v17 + 56), 0x14u, v18, *((unsigned __int16 *)this + 10), (char)this, (__int64)v16, v18);
      v14 = SystemTimeAsFileTime;
    }
    *((_DWORD *)this + 4) = *(_DWORD *)a2;
    *((struct _FILETIME *)this + 4) = v14;
  }
  return 1;
}
// 1400DF6AE: variable 'v15' is possibly undefined
// 1400DF6B3: variable 'v17' is possibly undefined
// 1400DF6D0: variable 'v18' is possibly undefined
// 1400DF716: variable 'v20' is possibly undefined
// 1400DF71B: variable 'v22' is possibly undefined
// 1400DF738: variable 'v23' is possibly undefined
