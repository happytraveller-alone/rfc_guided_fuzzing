//----- (000000014000AA98) ----------------------------------------------------
__int64 __fastcall allocateAdapterList(__int64 ***a1)
{
  __int64 ***v1; // r12
  int v2; // eax
  unsigned int v3; // ebx
  __int64 v4; // rsi
  int v5; // r13d
  CDnsClientSubnetRecordsTrie *v6; // rcx
  char *v7; // rdi
  char *v8; // rax
  void *v9; // rax
  int i; // r15d
  __int16 *v11; // r8
  const char *v12; // rdx
  __int64 v15; // [rsp+90h] [rbp+18h] BYREF
  _QWORD *v16; // [rsp+98h] [rbp+20h]

  *a1 = 0i64;
  v1 = a1;
  v15 = 0i64;
  v16 = 0i64;
  v2 = Sock_AllocAdaptersAddresses((IP_ADAPTER_ADDRESSES_LH **)&v15);
  v3 = v2;
  if ( v2 )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_D(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x11u,
        (__int64)&WPP_dd5a12aafb1b34b87fc868998e41e2af_Traceguids,
        v2);
    }
  }
  else
  {
    v4 = v15;
    if ( v15 )
    {
      while ( 1 )
      {
        v5 = 0;
        dword_1401B9714 = Dns_GetCurrentTimeInSeconds();
        if ( dword_1401B9714 > (unsigned int)dwAutoConfigEndTime )
          break;
        v6 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          WPP_SF_s(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x13u,
            (__int64)&WPP_dd5a12aafb1b34b87fc868998e41e2af_Traceguids,
            *(const char **)(v4 + 16));
          v6 = WPP_GLOBAL_Control;
        }
        if ( *(_DWORD *)(v4 + 104) != 1 || *(_DWORD *)(v4 + 100) == 24 || *(_DWORD *)(v4 + 100) == 131 )
        {
          if ( v6 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_BYTE *)v6 + 68) & 2) != 0
            && *((_BYTE *)v6 + 65) >= 4u )
          {
            WPP_SF_s(
              *((_QWORD *)v6 + 7),
              0x14u,
              (__int64)&WPP_dd5a12aafb1b34b87fc868998e41e2af_Traceguids,
              *(const char **)(v4 + 16));
          }
        }
        else
        {
          v7 = (char *)Mem_AllocZero(0xA8ui64, 21i64, "ds\\dns\\server\\server\\autoconfigure.c", 737);
          if ( !v7 )
          {
            v3 = 14;
            goto LABEL_43;
          }
          v8 = (char *)Dns_StringCopyAllocate(*(char **)(v4 + 16), 0, 2i64, 2);
          *((_QWORD *)v7 + 2) = v8;
          if ( !v8 || (v9 = Dns_StringCopyAllocate(v8, 0, 2i64, 1), (*((_QWORD *)v7 + 1) = v9) == 0i64) )
          {
            v3 = 14;
            freeAdapterList((__int64 **)v7);
            goto LABEL_43;
          }
          for ( i = 0; i < 2; ++i )
          {
            v11 = (__int16 *)(v7 + 24);
            v12 = "SYSTEM\\CurrentControlSet\\Services\\Tcpip\\Parameters\\Interfaces\\";
            if ( i )
            {
              v11 = (__int16 *)(v7 + 96);
              v12 = "SYSTEM\\CurrentControlSet\\Services\\Tcpip6\\Parameters\\Interfaces\\";
            }
            if ( !(unsigned int)readAdapterParams(*((char **)v7 + 2), (__int64)v12, v11, i != 0 ? 23 : 2, v4) )
              ++v5;
          }
          v3 = 0;
          v1 = a1;
          *((_DWORD *)v7 + 7) = (*(_DWORD *)(v4 + 92) >> 7) & 1;
          *((_DWORD *)v7 + 25) = (*(_DWORD *)(v4 + 92) >> 8) & 1;
          if ( v5 )
          {
            if ( v16 )
              *v16 = v7;
            else
              *a1 = (__int64 **)v7;
            v16 = v7;
          }
          else
          {
            freeAdapterList((__int64 **)v7);
          }
        }
        v4 = *(_QWORD *)(v4 + 8);
        if ( !v4 )
          goto LABEL_43;
      }
      v3 = 1460;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x12u, (__int64)&WPP_dd5a12aafb1b34b87fc868998e41e2af_Traceguids);
      }
    }
  }
LABEL_43:
  Mem_Free((_QWORD *)v15, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\autoconfigure.c", 847);
  if ( v3 )
  {
    freeAdapterList(*v1);
    *v1 = 0i64;
  }
  return v3;
}
// 1401B8C24: using guessed type int dwAutoConfigEndTime;
// 1401B9714: using guessed type int dword_1401B9714;
