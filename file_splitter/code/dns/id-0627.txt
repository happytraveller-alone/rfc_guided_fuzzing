//----- (0000000140057AA4) ----------------------------------------------------
__int64 __fastcall Log_InitializeLogging(int a1, int a2, char *a3)
{
  int v3; // edi
  unsigned int v4; // ebx
  int LastError; // eax
  char *v8; // rax
  int v9; // r8d
  struct _SYSTEMTIME SystemTime; // [rsp+30h] [rbp-68h] BYREF
  CHAR v12[64]; // [rsp+40h] [rbp-58h] BYREF

  v3 = 0;
  v4 = 0;
  if ( fLogCsInit )
  {
    if ( !a1 )
    {
      EnterCriticalSection(&csLogLock);
      v3 = 1;
    }
  }
  else
  {
    v4 = DnsInitializeCriticalSection(&csLogLock);
    if ( v4 )
      return v4;
    fLogCsInit = 1;
    EnterCriticalSection(&csLogLock);
    v3 = 1;
    if ( !dword_1401B978C && !g_pwszLogFileName )
      massageLogFile((unsigned __int16 *)qword_1401B9760);
  }
  if ( g_hLogFile )
  {
    CloseHandle(g_hLogFile);
    g_hLogFile = 0i64;
  }
  if ( !a2
    && !dword_1401B978C
    && g_pwszLogFileName
    && !MoveFileExW(g_pwszLogFileName, L"dns\\backup\\dns.log", 3u)
    && WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 1) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    LastError = GetLastError();
    WPP_SF_DSS(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x13u,
      (__int64)&WPP_7aabcfb4077e3de7a2cc491a12601782_Traceguids,
      LastError,
      (__int64)g_pwszLogFileName,
      (__int64)L"dns\\backup\\dns.log");
  }
  if ( a3 )
    StringCchCopyW(a3, 256i64, (char *)g_pwszLogFileName);
  Timeout_FreeWithFunctionEx((__int64)g_pwszLogFileName, 0i64, (__int64)"ds\\dns\\server\\server\\log.c", 2065);
  g_pwszLogFileName = 0i64;
  Timeout_FreeWithFunctionEx((__int64)g_pwszLogFileDrive, 0i64, (__int64)"ds\\dns\\server\\server\\log.c", 2067);
  g_pwszLogFileDrive = 0i64;
  massageLogFile((unsigned __int16 *)qword_1401B9760);
  regenerateBackupExclusionKey();
  memset_0(&LogBuffer, 0, 0x30ui64);
  g_iBytesWrittenToLog = 0i64;
  dword_1401B8F70 = 0x20000;
  qword_1401B8F90 = 0x20000i64;
  qword_1401B8F78 = (__int64)&pchLogBuffer;
  lpMultiByteStr = (STRSAFE_LPSTR)&pchLogBuffer;
  qword_1401B8F80 = (__int64)&csLogLock;
  LogBuffer = (__int64)g_hLogFile;
  g_hLogFile = OpenWriteFileEx2W(0i64, g_pwszLogFileName, 0);
  if ( g_hLogFile )
  {
    dword_1401B9714 = Dns_GetCurrentTimeInSeconds();
    g_LastLogFileOpenTime = dword_1401B9714;
    writeAndResetLogBuffer();
    if ( dword_1401B9708 )
    {
      writeLogBootInfo();
      memset_0(v12, 0, 0x3Dui64);
      GetLocalTime(&SystemTime);
      Dns_WriteFormattedSystemTimeToBuffer(v12, &SystemTime);
      v8 = sprintfSafeA(lpMultiByteStr, (unsigned int)qword_1401B8F90, "Log file wrap at %s\r\n", v12);
      if ( v8 )
      {
        v9 = (_DWORD)v8 - (_DWORD)lpMultiByteStr;
        if ( v8 - lpMultiByteStr <= (unsigned __int64)(unsigned int)qword_1401B8F90 )
        {
          lpMultiByteStr = v8;
          LODWORD(qword_1401B8F90) = qword_1401B8F90 - v9;
        }
      }
    }
    else
    {
      writeLogBootInfo();
    }
    writeMessageInfoHeader();
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 1) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_Dd(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x15u,
        (__int64)&WPP_7aabcfb4077e3de7a2cc491a12601782_Traceguids,
        dword_1401B9770);
    }
  }
  else
  {
    v4 = GetLastError();
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 1) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_DS(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x14u,
        (__int64)&WPP_7aabcfb4077e3de7a2cc491a12601782_Traceguids,
        v4,
        (__int64)g_pwszLogFileName);
    }
    if ( v4 == 997 )
      v4 = 2;
  }
  if ( v3 )
    LeaveCriticalSection(&csLogLock);
  return v4;
}
// 1401B8F54: using guessed type int fLogCsInit;
// 1401B8F68: using guessed type __int64 LogBuffer;
// 1401B8F70: using guessed type int dword_1401B8F70;
// 1401B8F78: using guessed type __int64 qword_1401B8F78;
// 1401B8F80: using guessed type __int64 qword_1401B8F80;
// 1401B8F98: using guessed type __int64 g_iBytesWrittenToLog;
// 1401B8FA0: using guessed type int g_LastLogFileOpenTime;
// 1401B9708: using guessed type int dword_1401B9708;
// 1401B9714: using guessed type int dword_1401B9714;
// 1401B9770: using guessed type int dword_1401B9770;
// 1401B978C: using guessed type int dword_1401B978C;
