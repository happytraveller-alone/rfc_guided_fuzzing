//----- (00000001400A646C) ----------------------------------------------------
void LoadAndInitRRL()
{
  int v0; // eax
  __int64 v1; // rdx
  CDnsClientSubnetRecordsTrie *v2; // r10
  unsigned __int16 v3; // dx
  int RRLParamsFromRegistry; // eax
  CDnsClientSubnetRecordsTrie *v5; // r10
  unsigned __int16 v6; // dx
  CDnsRRLParameters *v7; // rcx
  __int64 v8; // rdx
  __int64 v9; // rcx
  int v10; // ebx
  int v11; // edi
  int v12; // [rsp+60h] [rbp+27h] BYREF
  int v13; // [rsp+64h] [rbp+2Bh]
  int v14; // [rsp+68h] [rbp+2Fh]
  int v15; // [rsp+6Ch] [rbp+33h]
  int v16; // [rsp+70h] [rbp+37h]
  int v17; // [rsp+74h] [rbp+3Bh]
  int v18; // [rsp+78h] [rbp+3Fh]
  int v19; // [rsp+7Ch] [rbp+43h]
  int v20; // [rsp+80h] [rbp+47h]
  int v21; // [rsp+84h] [rbp+4Bh]

  memset_0(&v12, 0, 0x2Cui64);
  v0 = DnsRRL_InitializeParams();
  if ( v0 )
  {
    v2 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      v3 = 106;
LABEL_31:
      WPP_SF_D(*((_QWORD *)v2 + 7), v3, (__int64)&WPP_44543417c05739f4a9c82c388f6d5836_Traceguids, v0);
      return;
    }
    return;
  }
  RRLParamsFromRegistry = Reg_GetRRLParamsFromRegistry((__int64)&v12, v1);
  if ( RRLParamsFromRegistry )
  {
    if ( RRLParamsFromRegistry == 9911 )
      return;
    v5 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
    {
      goto LABEL_13;
    }
    v6 = 107;
    goto LABEL_12;
  }
  RRLParamsFromRegistry = DnsRRL_ValidateRRLParameters(&v12);
  if ( RRLParamsFromRegistry )
  {
    v5 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
    {
LABEL_13:
      if ( (Microsoft_Windows_DNS_Server_ServiceEnableBits & 4) != 0 )
        Template_s(Microsoft_Windows_DNS_Server_ServiceHandle, &DNS_EVENT_RRL_PARAMS_REGISTRY_LOAD_FAILURE, Str);
      return;
    }
    v6 = 108;
LABEL_12:
    WPP_SF_D(*((_QWORD *)v5 + 7), v6, (__int64)&WPP_44543417c05739f4a9c82c388f6d5836_Traceguids, RRLParamsFromRegistry);
    goto LABEL_13;
  }
  CDnsRRLParameters::ReSetRRLParameters(v7, (struct _DnsRRLParams_ *)&v12);
  if ( (v21 & 0x100) != 0 && v20 == 2 )
  {
    v10 = v15;
    v11 = v14;
    if ( (dword_1401B9104 & 0x2000) != 0 )
      Template_sqqqqqqqqs(v9, v8, Str, v12, v13, v14, v15, v17, v16, v18, v19, "Disabled");
    if ( g_isRegisteredForUTC == 1 )
    {
      dword_1401B95C8 = v11;
      dword_1401B95CC = v10;
    }
  }
  else
  {
    v0 = InitializeRRL((struct _DnsRRLParams_ *)&v12, 1);
    if ( v0 )
    {
      v2 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        v3 = 109;
        goto LABEL_31;
      }
    }
  }
}
// 1400A64D6: variable 'v1' is possibly undefined
// 1400A6588: variable 'v7' is possibly undefined
// 1400A65F0: variable 'v9' is possibly undefined
// 1400A65F0: variable 'v8' is possibly undefined
// 140186B68: using guessed type EVENT_DESCRIPTOR DNS_EVENT_RRL_PARAMS_REGISTRY_LOAD_FAILURE;
// 1401B9104: using guessed type int dword_1401B9104;
// 1401B9140: using guessed type int Microsoft_Windows_DNS_Server_ServiceEnableBits;
// 1401B9190: using guessed type int g_isRegisteredForUTC;
// 1401B95C8: using guessed type int dword_1401B95C8;
// 1401B95CC: using guessed type int dword_1401B95CC;
