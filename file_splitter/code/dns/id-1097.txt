//----- (000000014008EDF0) ----------------------------------------------------
__int64 __fastcall RR_ListReplace(__int64 a1, __int64 a2, _QWORD *a3, _QWORD *a4)
{
  int v4; // esi
  int v5; // r12d
  int v6; // ebx
  char *v10; // rax
  int v11; // ebp
  int v12; // ebp
  __int64 v13; // r13
  _QWORD *v14; // rax
  CDnsClientSubnetRecordsTrie *v15; // rcx
  __int64 v17; // rbx
  __int64 v18; // rcx
  char *v19; // rax
  __int64 v20; // [rsp+28h] [rbp-60h]
  int v21; // [rsp+98h] [rbp+10h] BYREF
  _QWORD *v22; // [rsp+A8h] [rbp+20h]

  v22 = a4;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x80000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    v10 = Dbg_NodeName(a2);
    WPP_SF_sq(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x67u,
      (__int64)&WPP_10d39582251c332017bd035d2c946054_Traceguids,
      v10);
  }
  v11 = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a2 + 76) = 0;
  v12 = v11 & 0x100;
  v13 = *(_QWORD *)(a2 + 56);
  if ( a3 )
  {
    v14 = a3;
    do
    {
      if ( *((_WORD *)v14 + 6) == 2 )
        v4 = 1;
      if ( *((_WORD *)v14 + 6) == 5 )
        v5 = 1;
      if ( *((_WORD *)v14 + 6) == 6 )
      {
        if ( v6 )
          goto LABEL_24;
        v6 = 1;
      }
      v14 = (_QWORD *)*v14;
    }
    while ( v14 );
    if ( v6 && !v12 )
      goto LABEL_24;
  }
  v21 = -1;
  acquireUpdate(DbaseLock, 0xFFFFFFFF, (unsigned int *)&v21, 1);
  v21 = *(_QWORD *)(a2 + 64) != 0i64;
  deleteCachedRecordsForUpdate(a2);
  if ( v12 && (!a3 || !v6 || !v4 && (*(_BYTE *)(v13 + 388) & 1) == 0) && v13 )
  {
    v21 = -1;
    releaseUpdate(DbaseLock, (unsigned int *)&v21, 1);
LABEL_24:
    v15 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x80000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_qsD(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x69u,
        (__int64)&WPP_10d39582251c332017bd035d2c946054_Traceguids,
        a2,
        a2 + 102,
        (*(_DWORD *)(a2 + 84) & 0x88880000) == -2004353024);
      v15 = WPP_GLOBAL_Control;
    }
    if ( (*(_DWORD *)(a2 + 84) & 0x88880000) != -2004353024 )
    {
      if ( v15 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)v15 + 17) & 0x80000) != 0
        && *((_BYTE *)v15 + 65) >= 4u )
      {
        LODWORD(v20) = v4;
        WPP_SF_qsdddd(*((_QWORD *)v15 + 7), (__int64)&WPP_GLOBAL_Control, (__int64)a3, a2, a2 + 102, v20, v6, v5, v12);
      }
      if ( a1 )
      {
        RR_ListFree(a3);
        *(_QWORD *)(a1 + 16) = 0i64;
        *(_QWORD *)(a1 + 24) = 0i64;
      }
      *v22 = 0i64;
    }
    return 13i64;
  }
  Dbase_LockEx(a2, 2, (__int64)"ds\\dns\\server\\server\\rrlist.c", 62);
  v17 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = a3;
  RR_ListResetNodeFlags(a2);
  NTree_ChangeAncestorCounters((volatile signed __int32 **)a2, v21);
  Dbase_UnlockEx(v18, 2, (__int64)"ds\\dns\\server\\server\\rrlist.c", 136);
  v21 = -1;
  releaseUpdate(DbaseLock, (unsigned int *)&v21, 1);
  *v22 = v17;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x80000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    v19 = Dbg_NodeName(a2);
    WPP_SF_sq(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x68u,
      (__int64)&WPP_10d39582251c332017bd035d2c946054_Traceguids,
      v19);
  }
  return 0i64;
}
// 14008EFFD: variable 'a3' is possibly undefined
// 14008EFFD: variable 'v20' is possibly undefined
// 14008F070: variable 'v18' is possibly undefined
// 1401EC5E8: using guessed type __int64 DbaseLock;
