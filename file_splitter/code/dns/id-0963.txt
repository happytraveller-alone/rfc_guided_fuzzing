//----- (0000000140081CA4) ----------------------------------------------------
__int64 __fastcall W2KRpc_EnumZones(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, _DWORD *a6, _QWORD *a7)
{
  __int64 v7; // rbp
  _DWORD *v8; // rdi
  __int64 *NextZoneMatchingFilter; // rsi
  int *v11; // rbx
  void *v12; // rax
  char v13; // cl
  int v14; // eax
  __int64 v15; // rbx
  void **v16; // rsi
  char v17[8]; // [rsp+20h] [rbp-68h] BYREF
  int v18; // [rsp+28h] [rbp-60h]

  v7 = 0i64;
  memset_0(v17, 0, 0x50ui64);
  v18 = a5;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_D(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x11u, (__int64)&WPP_50c900b4444f32b255c2c8e70b282079_Traceguids, a5);
  }
  v8 = MIDL_user_allocate(0x80010ui64);
  if ( !v8 )
    return 14i64;
  NextZoneMatchingFilter = Zone_ListGetNextZoneMatchingFilterEx(0i64, 0i64, (__int64)v17);
  if ( NextZoneMatchingFilter )
  {
    while ( 1 )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
      {
        WPP_SF_s(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0xAu,
          (__int64)&WPP_50c900b4444f32b255c2c8e70b282079_Traceguids,
          (const char *)NextZoneMatchingFilter[2]);
      }
      v11 = (int *)MIDL_user_allocate(0x10ui64);
      if ( !v11 )
        break;
      v12 = Dns_StringCopyAllocate((char *)NextZoneMatchingFilter[3], 0, 1i64, 1);
      *(_QWORD *)v11 = v12;
      if ( !v12 )
      {
        MIDL_user_free(v11);
        break;
      }
      v13 = *((_BYTE *)NextZoneMatchingFilter + 372);
      v11[2] = 0;
      v14 = v11[2];
      *((_BYTE *)v11 + 12) = v13;
      *((_BYTE *)v11 + 13) = 50;
      if ( (*((_DWORD *)NextZoneMatchingFilter + 99) & 0x1000) != 0 )
        v14 = 1;
      v11[2] = v14;
      if ( (*((_DWORD *)NextZoneMatchingFilter + 99) & 0x2000) != 0 )
        v11[2] |= 2u;
      if ( (*((_BYTE *)NextZoneMatchingFilter + 396) & 2) != 0 )
        v11[2] |= 4u;
      if ( (*((_BYTE *)NextZoneMatchingFilter + 396) & 4) != 0 )
        v11[2] |= 8u;
      if ( (*((_BYTE *)NextZoneMatchingFilter + 388) & 1) != 0 )
        v11[2] |= 0x10u;
      if ( (*((_BYTE *)NextZoneMatchingFilter + 396) & 1) != 0 )
        v11[2] |= 0x20u;
      v11[2] ^= (v11[2] ^ (*((unsigned __int8 *)NextZoneMatchingFilter + 392) << 6)) & 0xC0;
      *(_QWORD *)&v8[2 * v7 + 2] = v11;
      v7 = (unsigned int)(v7 + 1);
      if ( (unsigned int)v7 < 0x10000 )
      {
        NextZoneMatchingFilter = Zone_ListGetNextZoneMatchingFilterEx(0i64, NextZoneMatchingFilter, (__int64)v17);
        if ( NextZoneMatchingFilter )
          continue;
      }
      goto LABEL_28;
    }
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_D(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x12u,
        (__int64)&WPP_50c900b4444f32b255c2c8e70b282079_Traceguids,
        14);
    }
    v15 = 0i64;
    for ( *v8 = v7; (unsigned int)v15 < *v8; v15 = (unsigned int)(v15 + 1) )
    {
      v16 = *(void ***)&v8[2 * v15 + 2];
      if ( *v16 )
        MIDL_user_free(*v16);
      MIDL_user_free(v16);
    }
    MIDL_user_free(v8);
    return 14i64;
  }
LABEL_28:
  *v8 = v7;
  *a7 = v8;
  *a6 = 16;
  return 0i64;
}
// 140081CA4: using guessed type char var_68[8];
