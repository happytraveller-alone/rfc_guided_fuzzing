//----- (0000000140161FB0) ----------------------------------------------------
int __fastcall SigRecordPrint(void (*a1)(__int64, const char *, ...), __int64 a2, __int64 a3)
{
  const char *v3; // r15
  WCHAR *v7; // rdi
  int v8; // ebx
  char *v9; // rax
  unsigned int v10; // r10d
  __int64 v11; // r11
  const char *v12; // r8
  const wchar_t *v13; // rbp
  int v14; // edi
  const char *StringForValue; // rbx
  char *v16; // rax
  __int64 v17; // rdx
  int v18; // r11d
  __int64 v20; // [rsp+28h] [rbp-290h]
  __int64 v21; // [rsp+30h] [rbp-288h]
  __int64 v22; // [rsp+38h] [rbp-280h]
  __int64 v23; // [rsp+40h] [rbp-278h]
  __int64 v24; // [rsp+48h] [rbp-270h]
  __int64 v25; // [rsp+50h] [rbp-268h]
  __int16 v26[256]; // [rsp+70h] [rbp-248h] BYREF

  v3 = "UNKNOWN";
  if ( a1 )
  {
    v7 = *(WCHAR **)(a3 + 56);
    if ( (*(_DWORD *)(a3 + 20) & 0x18) != 8 )
      v7 = (WCHAR *)recordStringWide(a3, v7, v26);
    v8 = *(unsigned __int8 *)(a3 + 34);
    Dns_GetStringForValue((__int64)&DnssecAlgorithmTable, v8);
    v9 = private_StringForRecordType(*(_WORD *)(a3 + 32));
    v12 = "UNKNOWN";
    if ( v9 )
      v12 = v9;
    a1(
      a2,
      "\tType Covered         = %s (%d)\r\n"
      "\tAlgorithm            = %s (%d)\r\n"
      "\tLabels               = %d\r\n"
      "\tOriginal TTL         = %d\r\n"
      "\tSignature Expiration = %d\r\n"
      "\tSignature Inception  = %d\r\n"
      "\tKey Tag              = %d\r\n"
      "\tSigner's Name        = %ls\r\n",
      v12,
      v10,
      v11,
      v8,
      *(unsigned __int8 *)(a3 + 35),
      *(_DWORD *)(a3 + 36),
      *(_DWORD *)(a3 + 40),
      *(_DWORD *)(a3 + 44),
      *(unsigned __int16 *)(a3 + 48),
      v7);
  }
  if ( (byte_1401BA001 & 4) != 0 )
  {
    v13 = *(const wchar_t **)(a3 + 56);
    if ( (*(_DWORD *)(a3 + 20) & 0x18) != 8 )
      v13 = recordStringWide(a3, *(WCHAR **)(a3 + 56), v26);
    v14 = *(unsigned __int8 *)(a3 + 34);
    StringForValue = (const char *)Dns_GetStringForValue((__int64)&DnssecAlgorithmTable, v14);
    v16 = private_StringForRecordType(*(_WORD *)(a3 + 32));
    if ( v16 )
      v3 = v16;
    LODWORD(v25) = *(unsigned __int16 *)(a3 + 48);
    LODWORD(v24) = *(_DWORD *)(a3 + 44);
    LODWORD(v23) = *(_DWORD *)(a3 + 40);
    LODWORD(v22) = *(_DWORD *)(a3 + 36);
    LODWORD(v21) = *(unsigned __int8 *)(a3 + 35);
    LODWORD(v20) = v14;
    WPP_SF_sdsddddddS(*(unsigned __int16 *)(a3 + 48), v17, v3, v18, StringForValue, v20, v21, v22, v23, v24, v25, v13);
  }
  return DnsPrint_RawBinary(a1, a2, (__int64)"\tSignature:", "\t\t  ", a3 + 64, *(unsigned __int16 *)(a3 + 50), 0);
}
// 14016204B: variable 'v10' is possibly undefined
// 14016207E: variable 'v11' is possibly undefined
// 140162116: variable 'v17' is possibly undefined
// 140162116: variable 'v18' is possibly undefined
// 140162116: variable 'v20' is possibly undefined
// 140162116: variable 'v21' is possibly undefined
// 140162116: variable 'v22' is possibly undefined
// 140162116: variable 'v23' is possibly undefined
// 140162116: variable 'v24' is possibly undefined
// 140162116: variable 'v25' is possibly undefined
// 140185140: using guessed type __int64 (__fastcall *_guard_dispatch_icall_fptr)(_QWORD, _QWORD);
// 1401BA001: using guessed type char byte_1401BA001;
// 140161FB0: using guessed type _WORD var_248[256];
