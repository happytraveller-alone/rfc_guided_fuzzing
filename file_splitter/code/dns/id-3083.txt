//----- (00000001401614C0) ----------------------------------------------------
void __fastcall ARecordPrint(void (*a1)(__int64, const char *, ...), __int64 a2, struct in_addr *a3)
{
  USHORT s_w2; // di
  char *v7; // rax
  char *v8; // rax
  const char *v9; // r9
  struct in_addr *v10; // rbp
  char *v11; // rax
  char *v12; // rax
  const char *v13; // r9

  s_w2 = a3[4].S_un.S_un_w.s_w2;
  if ( s_w2 == 4 )
  {
    if ( a1 )
    {
      v7 = inet_ntoa(a3[8]);
      a1(a2, "\tIP address     = %s\r\n", v7);
    }
    if ( (byte_1401BA001 & 4) != 0 )
    {
      v8 = inet_ntoa(a3[8]);
      WPP_SF_s(11i64, (unsigned __int16)&WPP_cb270f16dde935b5e1552b160c3fa946_Traceguids, (__int64)v8, v9);
    }
  }
  else if ( (s_w2 & 3) != 0 )
  {
    if ( a1 )
      a1(a2, "\tERROR:  Invalid record data length for this type.\r\n");
    if ( (byte_1401BA001 & 4) != 0 )
      WPP_SF_(10i64, (unsigned __int16)&WPP_cb270f16dde935b5e1552b160c3fa946_Traceguids, (__int64)a3);
  }
  else
  {
    v10 = a3 + 8;
    DnsPrint_Lock();
    for ( ; s_w2; s_w2 -= 4 )
    {
      if ( a1 )
      {
        v11 = inet_ntoa(*v10);
        a1(a2, "\tIP address     = %s\r\n", v11);
      }
      if ( (byte_1401BA001 & 4) != 0 )
      {
        v12 = inet_ntoa(*v10);
        WPP_SF_s(12i64, (unsigned __int16)&WPP_cb270f16dde935b5e1552b160c3fa946_Traceguids, (__int64)v12, v13);
      }
      ++v10;
    }
    DnsPrint_Unlock();
  }
}
// 14016153C: variable 'v9' is possibly undefined
// 140161579: variable 'a3' is possibly undefined
// 1401615D3: variable 'v13' is possibly undefined
// 140185140: using guessed type __int64 (__fastcall *_guard_dispatch_icall_fptr)(_QWORD, _QWORD);
// 1401BA001: using guessed type char byte_1401BA001;
