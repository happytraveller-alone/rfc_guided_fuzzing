//----- (00000001401133D4) ----------------------------------------------------
void __fastcall DnsTelemetryPolicyInfo(__int64 a1, int a2)
{
  int v2; // esi
  int v3; // ebp
  int v5; // edi
  int v7; // r12d
  __int64 v8; // r14
  int v9; // ecx
  int v10; // ebp
  int v11; // ebp
  int **v12; // r9
  __int64 v13; // r10
  int v14; // r8d
  int v15; // r8d
  int v16; // edi
  int **v17; // r9
  __int64 i; // r10
  int v19; // r8d
  int v20; // r8d
  int v21; // r8d
  int v22; // r8d
  int v23; // r8d
  int v24; // edi
  int v25; // edi
  int **v26; // r9
  __int64 v27; // r10
  int v28; // r8d
  int v29; // r8d
  int v30; // r8d
  int v31; // r8d
  int v32; // r8d

  v2 = *(_DWORD *)(a1 + 8);
  v3 = *(_DWORD *)(a1 + 12);
  v5 = *(_DWORD *)(a1 + 16);
  v7 = *(_DWORD *)(a1 + 20);
  v8 = *(unsigned int *)(a1 + 56);
  if ( v2 == 1 )
    v9 = _stricmp(*(const char **)(a1 + 32), "..Cache");
  else
    v9 = 0;
  if ( g_isRegisteredForUTC != 1 )
    return;
  if ( !v3 )
  {
    if ( v2 )
    {
      if ( v2 == 1 )
      {
        if ( v9 )
        {
          if ( v5 )
          {
            v24 = v5 - 1;
            if ( v24 )
            {
              if ( v24 == 1 )
              {
                if ( a2 )
                  _InterlockedAdd(&dword_1401B9654, 1u);
                else
                  _InterlockedAdd(&dword_1401B9654, 0xFFFFFFFF);
              }
            }
            else if ( a2 )
            {
              _InterlockedAdd(&dword_1401B9658, 1u);
            }
            else
            {
              _InterlockedAdd(&dword_1401B9658, 0xFFFFFFFF);
            }
          }
          else if ( a2 )
          {
            _InterlockedAdd(&dword_1401B9650, 1u);
          }
          else
          {
            _InterlockedAdd(&dword_1401B9650, 0xFFFFFFFF);
          }
        }
        else if ( v5 )
        {
          v25 = v5 - 1;
          if ( v25 )
          {
            if ( v25 == 1 )
            {
              if ( a2 )
                _InterlockedAdd(&dword_1401B9648, 1u);
              else
                _InterlockedAdd(&dword_1401B9648, 0xFFFFFFFF);
            }
          }
          else if ( a2 )
          {
            _InterlockedAdd(&dword_1401B964C, 1u);
          }
          else
          {
            _InterlockedAdd(&dword_1401B964C, 0xFFFFFFFF);
          }
        }
        else if ( a2 )
        {
          _InterlockedAdd(&dword_1401B9644, 1u);
        }
        else
        {
          _InterlockedAdd(&dword_1401B9644, 0xFFFFFFFF);
        }
      }
    }
    else if ( v5 )
    {
      if ( v5 == 2 )
      {
        if ( a2 )
          _InterlockedAdd(&dword_1401B9634, 1u);
        else
          _InterlockedAdd(&dword_1401B9634, 0xFFFFFFFF);
      }
    }
    else if ( a2 )
    {
      _InterlockedAdd(&dword_1401B9630, 1u);
    }
    else
    {
      _InterlockedAdd(&dword_1401B9630, 0xFFFFFFFF);
    }
    if ( v7 )
    {
      if ( v7 == 1 )
      {
        if ( a2 )
          _InterlockedAdd(&dword_1401B967C, 1u);
        else
          _InterlockedAdd(&dword_1401B967C, 0xFFFFFFFF);
      }
    }
    else if ( a2 )
    {
      _InterlockedAdd(&dword_1401B9678, 1u);
    }
    else
    {
      _InterlockedAdd(&dword_1401B9678, 0xFFFFFFFF);
    }
    if ( (_DWORD)v8 == 1 )
    {
      if ( a2 )
        _InterlockedAdd(&dword_1401B9684, 1u);
      else
        _InterlockedAdd(&dword_1401B9684, 0xFFFFFFFF);
    }
    else
    {
      if ( (unsigned int)v8 > 4 )
      {
        if ( a2 )
          _InterlockedAdd(&dword_1401B968C, 1u);
        else
          _InterlockedAdd(&dword_1401B968C, 0xFFFFFFFF);
      }
      else if ( a2 )
      {
        _InterlockedAdd(&dword_1401B9688, 1u);
      }
      else
      {
        _InterlockedAdd(&dword_1401B9688, 0xFFFFFFFF);
      }
      if ( !(_DWORD)v8 )
        return;
    }
    v26 = (int **)(a1 + 64);
    v27 = v8;
    while ( 1 )
    {
      v28 = **v26;
      if ( !v28 )
      {
        if ( a2 )
          _InterlockedAdd(&dword_1401B9660, 1u);
        else
          _InterlockedAdd(&dword_1401B9660, 0xFFFFFFFF);
        goto LABEL_179;
      }
      v29 = v28 - 1;
      if ( !v29 )
      {
        if ( a2 )
          _InterlockedAdd(&dword_1401B9668, 1u);
        else
          _InterlockedAdd(&dword_1401B9668, 0xFFFFFFFF);
        goto LABEL_179;
      }
      v30 = v29 - 1;
      if ( !v30 )
        goto LABEL_164;
      v31 = v30 - 1;
      if ( !v31 )
      {
        if ( a2 )
          _InterlockedAdd(&dword_1401B9664, 1u);
        else
          _InterlockedAdd(&dword_1401B9664, 0xFFFFFFFF);
        goto LABEL_179;
      }
      v32 = v31 - 1;
      if ( !v32 )
      {
        if ( a2 )
          _InterlockedAdd(&dword_1401B965C, 1u);
        else
          _InterlockedAdd(&dword_1401B965C, 0xFFFFFFFF);
        goto LABEL_179;
      }
      if ( (unsigned int)(v32 - 1) <= 1 )
      {
LABEL_164:
        if ( a2 )
          _InterlockedAdd(dword_1401B966C, 1u);
        else
          _InterlockedAdd(dword_1401B966C, 0xFFFFFFFF);
      }
LABEL_179:
      ++v26;
      if ( !--v27 )
        return;
    }
  }
  v10 = v3 - 1;
  if ( v10 )
  {
    v11 = v10 - 2;
    if ( v11 )
    {
      if ( v11 == 1 )
      {
        if ( a2 )
          _InterlockedAdd(&dword_1401B96D4, 1u);
        else
          _InterlockedAdd(&dword_1401B96D4, 0xFFFFFFFF);
        if ( (_DWORD)v8 )
        {
          v12 = (int **)(a1 + 64);
          v13 = v8;
          do
          {
            v14 = **v12;
            if ( v14 )
            {
              v15 = v14 - 3;
              if ( v15 )
              {
                if ( v15 == 1 )
                {
                  if ( a2 )
                    _InterlockedAdd(&dword_1401B96D8, 1u);
                  else
                    _InterlockedAdd(&dword_1401B96D8, 0xFFFFFFFF);
                }
              }
              else if ( a2 )
              {
                _InterlockedAdd(&dword_1401B96E0, 1u);
              }
              else
              {
                _InterlockedAdd(&dword_1401B96E0, 0xFFFFFFFF);
              }
            }
            else if ( a2 )
            {
              _InterlockedAdd(&dword_1401B96DC, 1u);
            }
            else
            {
              _InterlockedAdd(&dword_1401B96DC, 0xFFFFFFFF);
            }
            ++v12;
            --v13;
          }
          while ( v13 );
        }
      }
    }
    else if ( !v2 )
    {
      if ( v5 )
      {
        v16 = v5 - 1;
        if ( v16 )
        {
          if ( v16 == 1 )
          {
            if ( a2 )
              _InterlockedAdd(&dword_1401B963C, 1u);
            else
              _InterlockedAdd(&dword_1401B963C, 0xFFFFFFFF);
          }
        }
        else if ( a2 )
        {
          _InterlockedAdd(&dword_1401B9640, 1u);
        }
        else
        {
          _InterlockedAdd(&dword_1401B9640, 0xFFFFFFFF);
        }
      }
      else if ( a2 )
      {
        _InterlockedAdd(&dword_1401B9638, 1u);
      }
      else
      {
        _InterlockedAdd(&dword_1401B9638, 0xFFFFFFFF);
      }
    }
    return;
  }
  if ( v2 )
  {
    if ( v2 == 1 )
    {
      if ( v5 )
      {
        if ( v5 == 2 )
        {
          if ( a2 )
            _InterlockedAdd(&dword_1401B969C, 1u);
          else
            _InterlockedAdd(&dword_1401B969C, 0xFFFFFFFF);
        }
      }
      else if ( a2 )
      {
        _InterlockedAdd(&dword_1401B9698, 1u);
      }
      else
      {
        _InterlockedAdd(&dword_1401B9698, 0xFFFFFFFF);
      }
    }
  }
  else if ( v5 )
  {
    if ( v5 == 2 )
    {
      if ( a2 )
        _InterlockedAdd(&dword_1401B9694, 1u);
      else
        _InterlockedAdd(&dword_1401B9694, 0xFFFFFFFF);
    }
  }
  else if ( a2 )
  {
    _InterlockedAdd(&dword_1401B9690, 1u);
  }
  else
  {
    _InterlockedAdd(&dword_1401B9690, 0xFFFFFFFF);
  }
  if ( (_DWORD)v8 )
  {
    v17 = (int **)(a1 + 64);
    for ( i = v8; i; --i )
    {
      v19 = **v17;
      if ( !v19 )
      {
        if ( a2 )
          _InterlockedAdd(&dword_1401B96A4, 1u);
        else
          _InterlockedAdd(&dword_1401B96A4, 0xFFFFFFFF);
        goto LABEL_82;
      }
      v20 = v19 - 1;
      if ( !v20 )
      {
        if ( a2 )
          _InterlockedAdd(&dword_1401B96AC, 1u);
        else
          _InterlockedAdd(&dword_1401B96AC, 0xFFFFFFFF);
        goto LABEL_82;
      }
      v21 = v20 - 1;
      if ( !v21 )
        goto LABEL_67;
      v22 = v21 - 1;
      if ( !v22 )
      {
        if ( a2 )
          _InterlockedAdd(&dword_1401B96A8, 1u);
        else
          _InterlockedAdd(&dword_1401B96A8, 0xFFFFFFFF);
        goto LABEL_82;
      }
      v23 = v22 - 1;
      if ( !v23 )
      {
        if ( a2 )
          _InterlockedAdd(&dword_1401B96A0, 1u);
        else
          _InterlockedAdd(&dword_1401B96A0, 0xFFFFFFFF);
        goto LABEL_82;
      }
      if ( (unsigned int)(v23 - 1) <= 1 )
      {
LABEL_67:
        if ( a2 )
          _InterlockedAdd(dword_1401B96B0, 1u);
        else
          _InterlockedAdd(dword_1401B96B0, 0xFFFFFFFF);
      }
LABEL_82:
      ++v17;
    }
  }
  if ( v7 )
  {
    if ( v7 == 1 )
    {
      if ( a2 )
        _InterlockedAdd(&dword_1401B96C0, 1u);
      else
        _InterlockedAdd(&dword_1401B96C0, 0xFFFFFFFF);
    }
  }
  else if ( a2 )
  {
    _InterlockedAdd(&dword_1401B96BC, 1u);
  }
  else
  {
    _InterlockedAdd(&dword_1401B96BC, 0xFFFFFFFF);
  }
  if ( (_DWORD)v8 == 1 )
  {
    if ( a2 )
      _InterlockedAdd(&dword_1401B96C8, 1u);
    else
      _InterlockedAdd(&dword_1401B96C8, 0xFFFFFFFF);
  }
  else if ( (unsigned int)v8 > 4 )
  {
    if ( a2 )
      _InterlockedAdd(&dword_1401B96D0, 1u);
    else
      _InterlockedAdd(&dword_1401B96D0, 0xFFFFFFFF);
  }
  else if ( a2 )
  {
    _InterlockedAdd(&dword_1401B96CC, 1u);
  }
  else
  {
    _InterlockedAdd(&dword_1401B96CC, 0xFFFFFFFF);
  }
}
// 1401B9190: using guessed type int g_isRegisteredForUTC;
// 1401B9630: using guessed type int dword_1401B9630;
// 1401B9634: using guessed type int dword_1401B9634;
// 1401B9638: using guessed type int dword_1401B9638;
// 1401B963C: using guessed type int dword_1401B963C;
// 1401B9640: using guessed type int dword_1401B9640;
// 1401B9644: using guessed type int dword_1401B9644;
// 1401B9648: using guessed type int dword_1401B9648;
// 1401B964C: using guessed type int dword_1401B964C;
// 1401B9650: using guessed type int dword_1401B9650;
// 1401B9654: using guessed type int dword_1401B9654;
// 1401B9658: using guessed type int dword_1401B9658;
// 1401B965C: using guessed type int dword_1401B965C;
// 1401B9660: using guessed type int dword_1401B9660;
// 1401B9664: using guessed type int dword_1401B9664;
// 1401B9668: using guessed type int dword_1401B9668;
// 1401B966C: using guessed type signed __int32 dword_1401B966C[3];
// 1401B9678: using guessed type int dword_1401B9678;
// 1401B967C: using guessed type int dword_1401B967C;
// 1401B9684: using guessed type int dword_1401B9684;
// 1401B9688: using guessed type int dword_1401B9688;
// 1401B968C: using guessed type int dword_1401B968C;
// 1401B9690: using guessed type int dword_1401B9690;
// 1401B9694: using guessed type int dword_1401B9694;
// 1401B9698: using guessed type int dword_1401B9698;
// 1401B969C: using guessed type int dword_1401B969C;
// 1401B96A0: using guessed type int dword_1401B96A0;
// 1401B96A4: using guessed type int dword_1401B96A4;
// 1401B96A8: using guessed type int dword_1401B96A8;
// 1401B96AC: using guessed type int dword_1401B96AC;
// 1401B96B0: using guessed type signed __int32 dword_1401B96B0[3];
// 1401B96BC: using guessed type int dword_1401B96BC;
// 1401B96C0: using guessed type int dword_1401B96C0;
// 1401B96C8: using guessed type int dword_1401B96C8;
// 1401B96CC: using guessed type int dword_1401B96CC;
// 1401B96D0: using guessed type int dword_1401B96D0;
// 1401B96D4: using guessed type int dword_1401B96D4;
// 1401B96D8: using guessed type int dword_1401B96D8;
// 1401B96DC: using guessed type int dword_1401B96DC;
// 1401B96E0: using guessed type int dword_1401B96E0;
