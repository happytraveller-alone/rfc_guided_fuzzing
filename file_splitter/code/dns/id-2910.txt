//----- (00000001401520F4) ----------------------------------------------------
__int64 __fastcall DnsVal_GetCanonicalRRsetForSigning(
        unsigned __int8 *a1,
        __int64 a2,
        __int64 a3,
        __int64 *a4,
        _DWORD *a5)
{
  __int64 v5; // r15
  unsigned __int16 v7; // bp
  unsigned int v8; // r14d
  __int64 v9; // rbx
  u_short *v10; // rax
  unsigned int v11; // r14d
  CDnsClientSubnetRecordsTrie *v12; // rcx
  unsigned __int16 v13; // dx
  unsigned __int16 v14; // ax
  unsigned __int16 v15; // r12
  unsigned __int64 v16; // r13
  unsigned int v17; // edx
  unsigned int v18; // ecx
  unsigned int v19; // ebx
  _QWORD *v20; // rax
  __int64 v21; // r14
  char *v23; // rcx
  __int64 v24; // rax
  unsigned __int64 v25; // rbx
  __int64 v26; // r13
  __int64 v27; // rbx
  u_short *v28; // rbx
  char *v29; // r12
  __int64 v30; // rbx
  __int64 (__fastcall *v31)(__int64, __int64, __int64); // rax
  _BYTE *v32; // rcx
  char *v33; // rcx
  unsigned __int64 v34; // rbx
  unsigned __int8 v35; // cl
  unsigned __int8 *v36; // rdx
  char i; // cl
  __int64 v38; // rcx
  __int16 v39; // ax
  unsigned __int8 v40; // [rsp+30h] [rbp-58h]
  u_short v41[2]; // [rsp+34h] [rbp-54h] BYREF
  unsigned __int16 v42; // [rsp+38h] [rbp-50h]
  u_short *v43; // [rsp+40h] [rbp-48h]
  __int64 (__fastcall *v44)(__int64, __int64, __int64); // [rsp+48h] [rbp-40h]

  v5 = a2;
  v7 = 0;
  v40 = *(_BYTE *)(a3 + 74);
  v8 = 0;
  v42 = v40 + 18;
  v9 = a2;
  if ( !a2 )
    goto LABEL_94;
  v10 = (u_short *)(a2 + 12);
  v43 = (u_short *)(a2 + 12);
  while ( *(_WORD *)(v9 + 12) == *v10 && *(_BYTE *)(v9 + 8) != 8 )
  {
    if ( !(unsigned int)RR_GetCanonicalizedRdataSize(v9, v41) )
    {
      v12 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 25) < 2u )
      {
        return 7i64;
      }
      v13 = 44;
LABEL_15:
      WPP_SF_(*((_QWORD *)v12 + 2), v13, (__int64)&WPP_c53e2308f6cf3329db3757b8a77c9921_Traceguids);
      return 7i64;
    }
    v11 = v41[0] + v8;
    if ( v11 < v41[0] || (v8 = v11 + 2, v8 < 2) )
    {
      v12 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 25) < 2u )
      {
        return 7i64;
      }
      v13 = 45;
      goto LABEL_15;
    }
    if ( ++v7 == 0xFFFF )
    {
      v12 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 25) < 2u )
      {
        return 7i64;
      }
      v13 = 46;
      goto LABEL_15;
    }
    v9 = *(_QWORD *)v9;
    if ( !v9 )
      break;
    v10 = v43;
  }
  if ( !v7 )
  {
LABEL_94:
    v12 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 25) < 2u )
    {
      return 7i64;
    }
    v13 = 47;
    goto LABEL_15;
  }
  v14 = *a1;
  v15 = v14 + 8;
  if ( (unsigned __int16)(v14 + 8) < v14 )
  {
    v12 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 25) < 2u )
    {
      return 7i64;
    }
    v13 = 48;
    goto LABEL_15;
  }
  v16 = 16i64 * v7;
  if ( v16 > 0xFFFFFFFF
    || (unsigned int)v16 >= 0xFFFFFFC0
    || (v17 = v42 + v16 + 64, v17 < v42)
    || (v18 = v15 + v17, v18 < v15)
    || (v19 = v18 + v8, v18 + v8 < v8) )
  {
    v12 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 25) < 2u )
    {
      return 7i64;
    }
    v13 = 49;
    goto LABEL_15;
  }
  v20 = Mem_Alloc(v19, 0i64, "ds\\dns\\server\\validator\\validator.c", 1367);
  v21 = (__int64)v20;
  if ( v20 )
  {
    v20[5] = v20 + 8;
    v23 = (char *)v20 + v19;
    v24 = v42;
    v25 = v16 + v21 + 64;
    v26 = *(_QWORD *)(v21 + 40);
    *(_QWORD *)(v21 + 8) = v25;
    v27 = v24 + v25;
    *(_WORD *)v21 = v24;
    *(_QWORD *)(v21 + 24) = v27;
    v28 = (u_short *)(v15 + v27);
    *(_WORD *)(v21 + 16) = v15;
    v29 = v23;
    *(_WORD *)(v21 + 32) = v7;
    *(_QWORD *)(v21 + 56) = 0i64;
    *(_WORD *)(v21 + 48) = 0;
    while ( *(_WORD *)(v5 + 12) == *v43 && *(_BYTE *)(v5 + 8) != 8 )
    {
      --v7;
      if ( !(unsigned int)RR_GetCanonicalizedRdataSize(v5, v41) || v41[0] > 0xFFFDu )
      {
        Mem_Free((_QWORD *)v21, 0i64, 0i64, (__int64)"ds\\dns\\server\\validator\\validator.c", 1419);
        v12 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 25) >= 2u )
        {
          v13 = 51;
          goto LABEL_15;
        }
        return 7i64;
      }
      if ( v29 - (char *)v28 < (unsigned __int16)(v41[0] + 2) )
      {
        Mem_Free((_QWORD *)v21, 0i64, 0i64, (__int64)"ds\\dns\\server\\validator\\validator.c", 1427);
        v12 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 25) >= 2u )
        {
          v13 = 52;
          goto LABEL_15;
        }
        return 7i64;
      }
      *(_QWORD *)(v26 + 8) = v28;
      *(_WORD *)v26 = v41[0] + 2;
      *v28 = htons(v41[0]);
      v30 = (__int64)(v28 + 1);
      v44 = (__int64 (__fastcall *)(__int64, __int64, __int64))(v30 + v41[0]);
      v31 = RR_WriteCanonicalizedRdata(v30, (__int64)v44, v5);
      v28 = (u_short *)v44;
      if ( v31 != v44 )
      {
        Mem_Free((_QWORD *)v21, 0i64, 0i64, (__int64)"ds\\dns\\server\\validator\\validator.c", 1443);
        v12 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 25) >= 2u )
        {
          v13 = 53;
          goto LABEL_15;
        }
        return 7i64;
      }
      v5 = *(_QWORD *)v5;
      v26 += 16i64;
      if ( !v5 )
        break;
    }
    if ( v7 || v28 != (u_short *)v29 )
    {
      Mem_Free((_QWORD *)v21, 0i64, 0i64, (__int64)"ds\\dns\\server\\validator\\validator.c", 1455);
      v12 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 25) < 2u )
      {
        return 7i64;
      }
      v13 = 54;
      goto LABEL_15;
    }
    qsort(
      *(void **)(v21 + 40),
      *(unsigned __int16 *)(v21 + 32),
      0x10ui64,
      (_CoreCrtNonSecureSearchSortCompareFunction)DnsVal_RData_Compare);
    v32 = *(_BYTE **)(v21 + 8);
    *(_WORD *)v32 = *(_WORD *)(a3 + 56);
    v32 += 2;
    *v32++ = *(_BYTE *)(a3 + 58);
    *v32++ = *(_BYTE *)(a3 + 59);
    *(_DWORD *)v32 = *(_DWORD *)(a3 + 60);
    *((_DWORD *)v32 + 1) = *(_DWORD *)(a3 + 64);
    *((_DWORD *)v32 + 2) = *(_DWORD *)(a3 + 68);
    v32 += 12;
    *(_WORD *)v32 = *(_WORD *)(a3 + 72);
    if ( Name_WriteCanonicalizedCountName(v32 + 2, (unsigned __int64)&v32[v40 + 2], (unsigned __int8 *)(a3 + 74)) != &v32[v40] )
    {
      Mem_Free((_QWORD *)v21, 0i64, 0i64, (__int64)"ds\\dns\\server\\validator\\validator.c", 1494);
      v12 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 25) >= 2u )
      {
        v13 = 55;
        goto LABEL_15;
      }
      return 7i64;
    }
    v33 = *(char **)(v21 + 24);
    v34 = (unsigned __int64)&v33[*a1];
    if ( Name_WriteCanonicalizedCountName(v33, v34, a1) == (char *)v34 )
    {
      *(_WORD *)v34 = htons(*v43);
      *(_WORD *)(v34 + 2) = htons(1u);
      *(_DWORD *)(v34 + 4) = *(_DWORD *)(a3 + 60);
      v35 = a1[1];
      if ( *(_BYTE *)(a3 + 59) < v35 )
      {
        v36 = *(unsigned __int8 **)(v21 + 24);
        for ( i = v35 - *(_BYTE *)(a3 + 59); i; --i )
          v36 += *v36 + 1;
        v38 = (__int64)&v36[-*(_QWORD *)(v21 + 24)];
        if ( v38 < 2 || v38 >= *a1 )
        {
          Mem_Free((_QWORD *)v21, 0i64, 0i64, (__int64)"ds\\dns\\server\\validator\\validator.c", 1547);
          v12 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            || (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) == 0
            || *((_BYTE *)WPP_GLOBAL_Control + 25) < 2u )
          {
            return 7i64;
          }
          v13 = 57;
          goto LABEL_15;
        }
        *(v36 - 1) = 42;
        *(v36 - 2) = 1;
        v39 = *(_WORD *)(v21 + 24) - ((_WORD)v36 - 2);
        *(_QWORD *)(v21 + 24) = v36 - 2;
        *(_WORD *)(v21 + 16) += v39;
      }
      *a4 = v21;
      return 0i64;
    }
    Mem_Free((_QWORD *)v21, 0i64, 0i64, (__int64)"ds\\dns\\server\\validator\\validator.c", 1509);
    v12 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 25) >= 2u )
    {
      v13 = 56;
      goto LABEL_15;
    }
    return 7i64;
  }
  else
  {
    if ( a5 )
      *a5 = -1073741801;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 25) >= 2u )
    {
      WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x32u, (__int64)&WPP_c53e2308f6cf3329db3757b8a77c9921_Traceguids);
    }
    return 1i64;
  }
}
