//----- (0000000140075A64) ----------------------------------------------------
char *__fastcall createRegStringFromAddrArray(__int64 a1, int a2, _DWORD *a3)
{
  int v3; // edi
  char *v4; // r15
  unsigned int v6; // r13d
  char *v7; // rax
  unsigned int v8; // esi
  char *v9; // rbx
  unsigned __int64 v10; // r14
  const char *v11; // r9
  __int64 v12; // rcx
  __int64 v13; // r13
  int v14; // r8d
  __int64 v15; // rdx
  char *v16; // rcx
  signed __int64 v17; // r9
  char v18; // al
  int v19; // ecx
  __int64 v20; // rdx
  int v21; // r9d
  char *v22; // rcx
  char v23; // al
  __int64 v24; // rcx
  unsigned int v25; // ecx
  unsigned int v27; // [rsp+20h] [rbp-40h]
  _DWORD *v29; // [rsp+28h] [rbp-38h]
  char v30; // [rsp+30h] [rbp-30h] BYREF
  __int64 v31; // [rsp+31h] [rbp-2Fh]
  char v32; // [rsp+39h] [rbp-27h]
  char Buffer; // [rsp+40h] [rbp-20h] BYREF
  __int64 v34; // [rsp+41h] [rbp-1Fh]
  char v35; // [rsp+49h] [rbp-17h]

  v3 = 0;
  v29 = a3;
  v4 = 0i64;
  if ( !*(_DWORD *)(a1 + 4) )
    goto LABEL_37;
  v6 = 100 * *(_DWORD *)(a1 + 4);
  v27 = v6;
  v7 = (char *)Mem_Alloc(v6, 0i64, "ds\\dns\\server\\server\\registry.c", 1491);
  v4 = v7;
  if ( !v7 )
    goto LABEL_37;
  v8 = 0;
  v9 = v7;
  if ( !*(_DWORD *)(a1 + 4) )
    goto LABEL_37;
  while ( 1 )
  {
    v10 = (unsigned __int64)v8 << 6;
    v11 = DnsAddr_Ntoa((struct in_addr *)(v10 + a1 + 32));
    if ( v11 )
      break;
LABEL_34:
    if ( ++v8 >= *(_DWORD *)(a1 + 4) )
    {
      if ( v8 )
      {
        *v9 = 0;
        ++v3;
      }
      goto LABEL_37;
    }
  }
  v12 = v6 - 2;
  v13 = v12;
  v14 = 0;
  if ( (unsigned __int64)(v12 - 1) > 0x7FFFFFFE )
    v14 = -2147024809;
  if ( v14 < 0 )
  {
    if ( v12 )
      *v9 = 0;
  }
  else
  {
    v15 = (unsigned int)v12;
    v16 = v9;
    v14 = 0;
    if ( !v13 )
      goto LABEL_14;
    v17 = v11 - v9;
    do
    {
      if ( !(2147483646 - v13 + v15) )
        break;
      v18 = v16[v17];
      if ( !v18 )
        break;
      *v16++ = v18;
      --v15;
    }
    while ( v15 );
    if ( !v15 )
    {
LABEL_14:
      --v16;
      v14 = -2147024774;
    }
    *v16 = 0;
  }
  if ( v14 < 0 )
    goto LABEL_37;
  if ( !a2 )
  {
LABEL_30:
    v24 = -1i64;
    do
      ++v24;
    while ( v9[v24] );
    v25 = v24 + 1;
    if ( v27 <= v25 + 1 )
      goto LABEL_37;
    v6 = v27 - v25;
    v9 += v25;
    v27 -= v25;
    v3 += v25;
    goto LABEL_34;
  }
  v19 = *(_DWORD *)(v10 + a1 + 68);
  v30 = 0;
  v31 = 0i64;
  v32 = 0;
  v34 = 0i64;
  v35 = 0;
  Buffer = 0;
  if ( !_itoa_s(v19, &Buffer, 0xAui64, 10) )
  {
    v20 = 10i64;
    v21 = 0;
    v22 = &v30;
    do
    {
      if ( v20 == -2147483636 )
        break;
      v23 = v22["/" - &v30];
      if ( !v23 )
        break;
      *v22++ = v23;
      --v20;
    }
    while ( v20 );
    if ( !v20 )
    {
      --v22;
      v21 = -2147024774;
    }
    *v22 = 0;
    if ( v21 < 0 || (int)StringCchCatA(&v30, 10i64, &Buffer) < 0 || (int)StringCchCatA(v9, v13, &v30) < 0 )
      goto LABEL_37;
    goto LABEL_30;
  }
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x22u, (__int64)&WPP_6ba06e9d807b3b6640892c588bf1aced_Traceguids);
  }
LABEL_37:
  *v29 = v3;
  return v4;
}
