//----- (00000001401550CC) ----------------------------------------------------
__int64 __fastcall CDnsVirtualizationManager::UpdateVirtualInstance(
        CDnsVirtualizationManager *this,
        struct _DnssrvRpcVirtualizationInstance *a2)
{
  __int64 *v2; // r12
  unsigned int v3; // ebx
  void *v4; // r15
  void *v5; // rbp
  char v6; // r13
  const unsigned __int16 **v8; // r14
  char *v9; // rcx
  CDnsClientSubnetRecordsTrie *v10; // rcx
  unsigned __int16 v11; // dx
  char *v12; // rcx
  __int64 v13; // rcx
  __int64 *v14; // rax
  __int64 v15; // rcx
  void *v16; // rax
  void *v17; // rax
  __int64 *v19; // [rsp+50h] [rbp+8h] BYREF

  v19 = (__int64 *)this;
  v2 = (__int64 *)g_pVirtualizationManager;
  v3 = 0;
  v4 = 0i64;
  v5 = 0i64;
  v6 = 0;
  if ( !a2 )
  {
    v3 = 87;
LABEL_33:
    MIDL_user_free(v4);
    MIDL_user_free(v5);
    goto LABEL_46;
  }
  v8 = (const unsigned __int16 **)((char *)a2 + 16);
  if ( !*((_QWORD *)a2 + 2) )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      WPP_SF_q(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x13u,
        (__int64)&WPP_4801f8127c993977e52bcb676d808450_Traceguids,
        a2);
    }
    v3 = 9924;
    goto LABEL_33;
  }
  if ( (*((_BYTE *)a2 + 8) & 2) != 0 )
  {
    v9 = (char *)*((_QWORD *)a2 + 3);
    if ( v9 )
    {
      v4 = Dns_StringCopyAllocate(v9, 0, 1i64, 1);
      if ( !v4 )
      {
        v10 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) == 0
          || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
        {
          goto LABEL_17;
        }
        v11 = 20;
LABEL_16:
        WPP_SF_S(*((_QWORD *)v10 + 7), v11, (__int64)&WPP_4801f8127c993977e52bcb676d808450_Traceguids, *v8);
LABEL_17:
        v3 = 14;
        goto LABEL_33;
      }
    }
  }
  if ( (*((_BYTE *)a2 + 8) & 4) != 0 )
  {
    v12 = (char *)*((_QWORD *)a2 + 4);
    if ( v12 )
    {
      v5 = Dns_StringCopyAllocate(v12, 0, 1i64, 1);
      if ( !v5 )
      {
        v10 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) == 0
          || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
        {
          goto LABEL_17;
        }
        v11 = 21;
        goto LABEL_16;
      }
    }
  }
  v13 = v2[1];
  LODWORD(v19) = -1;
  if ( (unsigned int)acquireRead(v13, 0x2710u, (unsigned int *)&v19) == -1 )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x16u, (__int64)&WPP_4801f8127c993977e52bcb676d808450_Traceguids);
    }
    v3 = 9923;
    goto LABEL_33;
  }
  v6 = 1;
  v14 = *std::_Tree<std::_Tmap_traits<unsigned short *,_DnsServerScopeInfo_ *,bool (*)(unsigned short *,unsigned short *),std::allocator<std::pair<unsigned short * const,_DnsServerScopeInfo_ *>>,0>>::find(
           *v2,
           &v19,
           v8);
  if ( v14 == *(__int64 **)(*v2 + 8) )
  {
    v3 = 9922;
    goto LABEL_33;
  }
  v15 = v14[4];
  if ( (*((_BYTE *)a2 + 8) & 2) != 0 )
  {
    v16 = *(void **)(v15 + 8);
    *(_QWORD *)(v15 + 8) = v4;
    v4 = v16;
  }
  if ( (*((_BYTE *)a2 + 8) & 4) != 0 )
  {
    v17 = *(void **)(v15 + 16);
    *(_QWORD *)(v15 + 16) = v5;
    v5 = v17;
  }
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_S(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x17u, (__int64)&WPP_4801f8127c993977e52bcb676d808450_Traceguids, *v8);
  }
  if ( v4 )
    Timeout_FreeWithFunctionEx(
      (__int64)v4,
      0i64,
      (__int64)"ds\\dns\\server\\virtualization\\virtualizationmanager.cpp",
      355);
  if ( !v5 )
    goto LABEL_47;
  Timeout_FreeWithFunctionEx(
    (__int64)v5,
    0i64,
    (__int64)"ds\\dns\\server\\virtualization\\virtualizationmanager.cpp",
    359);
LABEL_46:
  if ( v6 )
  {
LABEL_47:
    LODWORD(v19) = -1;
    releaseRead(v2[1], (unsigned int *)&v19, 1);
  }
  return v3;
}
// 1401B9270: using guessed type struct CDnsVirtualizationManager *g_pVirtualizationManager;
