//----- (00000001400DC3F0) ----------------------------------------------------
__int64 __fastcall Xfr_ReceiveThread(__int64 a1)
{
  int v2; // r12d
  int v3; // r14d
  __int64 v4; // rdi
  int v5; // r15d
  int v6; // esi
  int v7; // r9d
  __int16 v8; // cx
  unsigned __int16 *v9; // r13
  int v10; // eax
  unsigned __int16 v11; // si
  volatile signed __int32 *v12; // rax
  __int16 v13; // dx
  unsigned __int16 v14; // dx
  __int64 v15; // rax
  int v16; // eax
  __int64 v17; // rdx
  volatile signed __int32 *v18; // rax
  __int16 v19; // dx
  unsigned __int16 v20; // r8
  __int16 v21; // ax
  unsigned __int16 v22; // cx
  int v23; // eax
  int XfrMessageToDatabase; // eax
  CDnsClientSubnetRecordsTrie *v25; // rcx
  unsigned __int16 v26; // dx
  CDnsClientSubnetRecordsTrie *v27; // rcx
  unsigned __int16 v28; // dx
  __int128 v29; // xmm0
  CDnsClientSubnetRecordsTrie *v30; // rcx
  unsigned __int16 v31; // dx
  volatile signed __int32 *v32; // rax
  __int16 v33; // dx
  bool v34; // zf
  __int128 v35; // xmm1
  __int128 v36; // xmm0
  __int128 v37; // xmm1
  __int64 v38; // rdx
  __int64 v39; // r8
  int v40; // r9d
  __int64 v41; // rdx
  __int64 v42; // r8
  int LastError; // eax
  __int64 v44; // rdx
  SOCKET v45; // rcx
  unsigned int v46; // eax
  __int64 v47; // rcx
  int v48; // r9d
  int v49; // eax
  __int16 v51; // [rsp+48h] [rbp-C0h]
  int v52; // [rsp+4Ch] [rbp-BCh] BYREF
  __int64 v53; // [rsp+50h] [rbp-B8h]
  __int128 v54; // [rsp+58h] [rbp-B0h]
  struct timeval timeout; // [rsp+68h] [rbp-A0h] BYREF
  unsigned __int16 *v56[3]; // [rsp+70h] [rbp-98h] BYREF
  __int128 v57; // [rsp+88h] [rbp-80h] BYREF
  char v58[64]; // [rsp+98h] [rbp-70h] BYREF
  char v59[64]; // [rsp+D8h] [rbp-30h] BYREF
  fd_set writefds; // [rsp+118h] [rbp+10h] BYREF
  char v61[80]; // [rsp+A88h] [rbp+980h] BYREF

  v54 = 0ui64;
  v51 = 251;
  v53 = 0i64;
  v2 = 1;
  v3 = 1;
  v4 = 0i64;
  v5 = 0;
  v6 = 0;
  memset_0(v59, 0, sizeof(v59));
  Zone_AssumeWriteLockEx(a1);
  DnsAddr_WriteIpString_A(v61, (char *)(a1 + 1312));
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x40) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_ss(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x6Eu,
      (__int64)&WPP_8f5c62d9956434feed7ea8f9d17b2299_Traceguids,
      *(const char **)(a1 + 16),
      (__int64)v61);
  }
  if ( *(_DWORD *)(a1 + 372) == 3 )
  {
    v8 = 240;
  }
  else
  {
    if ( (*(_BYTE *)(a1 + 1160) & 0xC) == 0 && *(_QWORD *)(a1 + 336) )
    {
      v8 = 251;
      goto LABEL_12;
    }
    v8 = 252;
  }
  v2 = 0;
  v51 = v8;
LABEL_12:
  v9 = (unsigned __int16 *)&g_stubXfrData;
  while ( 1 )
  {
    v10 = *(_DWORD *)(a1 + 372);
    if ( v10 == 3 && !*v9 )
      goto LABEL_130;
    if ( v8 == 240 )
    {
      if ( !v6 )
        goto LABEL_28;
      if ( v3 )
      {
        *(_QWORD *)(v4 + 6304) = 0i64;
        *(_DWORD *)(v4 + 6312) = 0;
        memset_0((void *)(v4 + 592), 0, 0x298ui64);
        *(_QWORD *)(v4 + 32) = v4 + 6316;
        if ( *(_DWORD *)(a1 + 372) == 3 )
        {
          v11 = *v9;
          *(_BYTE *)(v4 + 6306) ^= (*(_BYTE *)(v4 + 6306) ^ *((_BYTE *)v9 + 2)) & 1;
        }
        else
        {
          v11 = 240;
        }
        if ( !(unsigned int)Msg_WriteQuestion(v4, *(__int64 **)(a1 + 56), v11) )
        {
          v25 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
          {
            if ( (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x40) != 0 && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
            {
              WPP_SF_Ds(
                *((_QWORD *)WPP_GLOBAL_Control + 7),
                0x6Fu,
                (__int64)&WPP_8f5c62d9956434feed7ea8f9d17b2299_Traceguids,
                v11,
                *(_QWORD *)(a1 + 16));
              goto LABEL_155;
            }
            goto LABEL_156;
          }
          goto LABEL_160;
        }
        if ( *(_DWORD *)(a1 + 372) == 3 && dword_1401B98F8 )
          *(_DWORD *)(v4 + 592) |= 2u;
        Send_Msg(v4, 0);
        v6 = v53;
        v3 = 0;
        *(_BYTE *)(v4 + 1414) = 1;
        *(_QWORD *)(v4 + 208) = a1;
        goto LABEL_43;
      }
    }
    if ( v6 )
      goto LABEL_43;
LABEL_28:
    v6 = 1;
    LODWORD(v53) = 1;
    if ( v10 != 3 )
    {
      if ( v2 )
      {
        memset_0(v58, 0, sizeof(v58));
        memset_0(v59, 0, sizeof(v59));
        HIDWORD(v53) = 1;
        _InterlockedAdd(&dword_1401C8110, 1u);
        v12 = (volatile signed __int32 *)pcIxfrRequestSent;
        v13 = 251;
      }
      else
      {
        v5 = Zone_PrepareForLoad(a1);
        if ( v5 )
        {
          v25 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
            goto LABEL_160;
          if ( (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x40) == 0 || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
            goto LABEL_156;
          v26 = 113;
          goto LABEL_97;
        }
        _InterlockedAdd(&dword_1401C80BC, 1u);
        v12 = (volatile signed __int32 *)pcAxfrRequestSent;
        v13 = 252;
      }
      _InterlockedAdd(v12, 1u);
      Stat_IncrementZoneTransferStats(a1, v13, 1);
      goto LABEL_36;
    }
    v5 = Zone_PrepareForLoad(a1);
    if ( v5 )
    {
      v25 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
        goto LABEL_160;
      if ( (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x40) == 0 || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
        goto LABEL_156;
      v26 = 112;
LABEL_97:
      WPP_SF_Ds(
        *((_QWORD *)v25 + 7),
        v26,
        (__int64)&WPP_8f5c62d9956434feed7ea8f9d17b2299_Traceguids,
        v5,
        *(_QWORD *)(a1 + 16));
      goto LABEL_155;
    }
    _InterlockedAdd(&dword_1401C80D0, 1u);
    _InterlockedAdd((volatile signed __int32 *)pcAxfrRequestSent, 1u);
LABEL_36:
    *(_DWORD *)(a1 + 1160) |= 4u;
    if ( *(_DWORD *)(a1 + 372) == 3 )
      v14 = *v9;
    else
      v14 = v51;
    v15 = Xfr_BuildXfrRequest(a1, v14, 1);
    v4 = v15;
    if ( !v15 )
      goto LABEL_155;
    *(_DWORD *)(a1 + 1536) = dword_1401B9714;
    if ( !(unsigned int)Msg_MakeTcpConnection(v15, a1 + 1312, (__int16 *)(a1 + 1376), 0) )
    {
      v27 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x40) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        v28 = 114;
LABEL_102:
        WPP_SF_ss(
          *((_QWORD *)v27 + 7),
          v28,
          (__int64)&WPP_8f5c62d9956434feed7ea8f9d17b2299_Traceguids,
          *(const char **)(a1 + 16),
          (__int64)v61);
        v27 = WPP_GLOBAL_Control;
      }
LABEL_103:
      v29 = DNS_EVENT_XFR_MASTER_UNAVAILABLE;
LABEL_170:
      v54 = v29;
      goto LABEL_171;
    }
    writefds.fd_count = 0;
    writefds.fd_array[0] = *(_QWORD *)(v4 + 56);
    timeout.tv_sec = dword_1401B97BC;
    writefds.fd_count = 1;
    timeout.tv_usec = 0;
    if ( select(0, 0i64, &writefds, 0i64, &timeout) != 1 )
    {
      v27 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x40) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        v28 = 115;
        goto LABEL_102;
      }
      goto LABEL_103;
    }
    Send_Msg(v4, 0);
    *(_BYTE *)(v4 + 1414) = 1;
    *(_DWORD *)(v4 + 1312) = 0;
    *(_QWORD *)(v4 + 208) = a1;
    *(_QWORD *)(v4 + 1316) = *(unsigned int *)(a1 + 512);
    *(_BYTE *)(v4 + 1328) = 0;
LABEL_43:
    if ( select(0, &writefds, 0i64, 0i64, &timeout) != 1 )
    {
      v27 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x40) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_sqs(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x74u,
          (__int64)&WPP_8f5c62d9956434feed7ea8f9d17b2299_Traceguids,
          *(const char **)(a1 + 16),
          a1,
          (__int64)v61);
        v27 = WPP_GLOBAL_Control;
      }
      v29 = DNS_EVENT_XFR_ABORTED_BY_MASTER;
      goto LABEL_170;
    }
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x40) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_D(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x75u,
        (__int64)&WPP_8f5c62d9956434feed7ea8f9d17b2299_Traceguids,
        *(_DWORD *)(a1 + 1536));
    }
    if ( *(_DWORD *)(v4 + 3096) )
    {
      *(_DWORD *)(v4 + 3096) = 0;
      *(_QWORD *)(v4 + 3104) = 0i64;
    }
    v4 = Tcp_ReceiveMessage(v4);
    if ( g_fDnsServiceExit == 1 )
      break;
    v16 = Thread_ServiceCheck(1);
    v17 = 0i64;
    if ( !v16 )
      break;
    if ( !v4 )
      goto LABEL_155;
    if ( *(_BYTE *)(v4 + 1414) )
    {
      if ( *(_DWORD *)(v4 + 1312) )
        goto LABEL_61;
      if ( v2 )
      {
        _InterlockedIncrement(&dword_1401C8114);
        v18 = (volatile signed __int32 *)pcIxfrResponseReceived;
        v19 = 251;
      }
      else
      {
        if ( *(_DWORD *)(a1 + 372) == 3 )
        {
          _InterlockedIncrement(&dword_1401C80D4);
          _InterlockedIncrement((volatile signed __int32 *)pcAxfrResponseReceived);
          goto LABEL_61;
        }
        _InterlockedIncrement(&dword_1401C80C0);
        v18 = (volatile signed __int32 *)pcAxfrResponseReceived;
        v19 = 252;
      }
      _InterlockedIncrement(v18);
      Stat_IncrementZoneTransferStats(a1, v19, 2);
LABEL_61:
      ++*(_DWORD *)(v4 + 1312);
      if ( *(_DWORD *)(a1 + 372) == 3 )
        v20 = *v9;
      else
        v20 = v51;
      if ( !(unsigned int)Msg_ValidateResponse(v4, v17, v20) )
      {
        v27 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x40) == 0
          || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
        {
          goto LABEL_171;
        }
        WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x77u, (__int64)&WPP_8f5c62d9956434feed7ea8f9d17b2299_Traceguids);
        goto LABEL_154;
      }
      Name_ConvertPacketNameToLookupNameEx(v4, (unsigned __int8 *)(v4 + 6316), *(unsigned __int16 **)(v4 + 1400), 1);
      v21 = *(_WORD *)(v4 + 480);
      if ( v21 == 251 )
      {
        v22 = 268;
LABEL_69:
        Etw_LogIncomingPacket(v22, v4, 0i64, 0);
        goto LABEL_70;
      }
      if ( v21 == 252 )
      {
        v22 = 272;
        goto LABEL_69;
      }
LABEL_70:
      if ( !v2 )
        goto LABEL_80;
      v23 = Xfr_ParseIxfrResponse(v4, (__int64)v58, v59);
      v5 = v23;
      switch ( v23 )
      {
        case 0:
          goto LABEL_13;
        case 1168384:
          v30 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x40) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            v31 = 120;
            goto LABEL_129;
          }
LABEL_130:
          if ( v2 )
          {
            v5 = Up_ApplyUpdatesToDatabase((__int64)v58, a1, 17367048i64, v7);
            if ( !v5 )
            {
              memset_0(v58, 0, sizeof(v58));
              _InterlockedIncrement(&dword_1401C8118);
              _InterlockedIncrement((volatile signed __int32 *)pcIxfrTcpSuccessReceived);
              v32 = (volatile signed __int32 *)pcIxfrSuccessReceived;
              v33 = 251;
              goto LABEL_141;
            }
LABEL_155:
            v25 = WPP_GLOBAL_Control;
            goto LABEL_156;
          }
          v5 = Zone_ActivateLoadedZone(a1);
          if ( !v5 )
          {
            v34 = *(_DWORD *)(a1 + 372) == 3;
            v35 = *(_OWORD *)(a1 + 1328);
            *(_OWORD *)(a1 + 1440) = *(_OWORD *)(a1 + 1312);
            v36 = *(_OWORD *)(a1 + 1344);
            *(_OWORD *)(a1 + 1456) = v35;
            v37 = *(_OWORD *)(a1 + 1360);
            *(_OWORD *)(a1 + 1472) = v36;
            *(_OWORD *)(a1 + 1488) = v37;
            if ( v34 )
            {
              _InterlockedIncrement(&dword_1401C80D8);
              _InterlockedIncrement((volatile signed __int32 *)pcAxfrSuccessReceived);
            }
            else
            {
              _InterlockedIncrement(&dword_1401C80C4);
              v32 = (volatile signed __int32 *)pcAxfrSuccessReceived;
              v33 = 252;
LABEL_141:
              _InterlockedIncrement(v32);
              Stat_IncrementZoneTransferStats(a1, v33, 3);
            }
            *(_DWORD *)(a1 + 1540) = 0;
            memset_0((void *)(a1 + 1312), 0, 0x40ui64);
            *(_DWORD *)(a1 + 1344) = 32;
            memset_0((void *)(a1 + 1248), 0, 0x40ui64);
            *(_DWORD *)(a1 + 1280) = 32;
            Xfr_RefreshZone(a1);
            *(_DWORD *)(a1 + 516) = *(_DWORD *)(a1 + 512);
            File_WriteZoneToFile(a1, 0i64, 0);
            Xfr_SendNotify(a1, v38, v39, v40);
            *(_DWORD *)(a1 + 1516) = time(0i64);
            if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x40) != 0
              && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
            {
              WPP_SF_sL(*((_QWORD *)WPP_GLOBAL_Control + 7), v41, v42, *(const char **)(a1 + 16));
            }
            goto LABEL_191;
          }
          v25 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
          {
            if ( (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x40) != 0 && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
            {
              WPP_SF_s(
                *((_QWORD *)WPP_GLOBAL_Control + 7),
                0x7Fu,
                (__int64)&WPP_8f5c62d9956434feed7ea8f9d17b2299_Traceguids,
                *(const char **)(a1 + 16));
              goto LABEL_155;
            }
LABEL_156:
            if ( v25 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              && (*((_BYTE *)v25 + 68) & 0x40) != 0
              && *((_BYTE *)v25 + 65) >= 4u )
            {
              WPP_SF_D(*((_QWORD *)v25 + 7), 0x82u, (__int64)&WPP_8f5c62d9956434feed7ea8f9d17b2299_Traceguids, v5);
            }
          }
LABEL_160:
          Xfr_RetryZone(a1);
          goto LABEL_191;
        case 1168387:
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x40) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            WPP_SF_q(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x79u,
              (__int64)&WPP_8f5c62d9956434feed7ea8f9d17b2299_Traceguids,
              v4);
          }
          v5 = Zone_PrepareForLoad(a1);
          if ( v5 )
          {
            v25 = WPP_GLOBAL_Control;
            if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
              goto LABEL_160;
            if ( (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x40) == 0 || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
              goto LABEL_156;
            v26 = 122;
            goto LABEL_97;
          }
          v2 = 0;
          _InterlockedIncrement(&dword_1401C811C);
LABEL_80:
          XfrMessageToDatabase = Xfr_ReadXfrMessageToDatabase(a1, v4);
          v5 = XfrMessageToDatabase;
          if ( XfrMessageToDatabase )
          {
            if ( XfrMessageToDatabase == 1168384 )
            {
              v30 = WPP_GLOBAL_Control;
              if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x40) != 0
                && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
              {
                v31 = 125;
LABEL_129:
                WPP_SF_(*((_QWORD *)v30 + 7), v31, (__int64)&WPP_8f5c62d9956434feed7ea8f9d17b2299_Traceguids);
              }
              goto LABEL_130;
            }
            v27 = WPP_GLOBAL_Control;
            if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x40) == 0
              || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
            {
LABEL_171:
              if ( !(_WORD)v54 )
              {
                if ( (*(_BYTE *)(v4 + 6307) & 0xF) == 5 )
                {
                  if ( v51 == 251 )
                  {
                    _InterlockedIncrement(&dword_1401C8124);
                  }
                  else if ( *(_DWORD *)(a1 + 372) == 3 )
                  {
                    _InterlockedIncrement(&dword_1401C80DC);
                  }
                  else
                  {
                    _InterlockedIncrement(&dword_1401C80C8);
                  }
                  v54 = DNS_EVENT_AXFR_REFUSED;
                }
                else
                {
                  if ( v27 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                    && (*((_BYTE *)v27 + 68) & 0x40) != 0
                    && *((_BYTE *)v27 + 65) >= 4u )
                  {
                    WPP_SF_Dq(
                      *((_QWORD *)v27 + 7),
                      0x81u,
                      (__int64)&WPP_8f5c62d9956434feed7ea8f9d17b2299_Traceguids,
                      v5);
                  }
                  v54 = DNS_EVENT_AXFR_BAD_RESPONSE;
                  if ( v51 == 251 )
                  {
                    _InterlockedIncrement(&dword_1401C8128);
                  }
                  else if ( *(_DWORD *)(a1 + 372) == 3 )
                  {
                    _InterlockedIncrement(&dword_1401C80E0);
                  }
                  else
                  {
                    _InterlockedIncrement(&dword_1401C80CC);
                  }
                }
              }
              if ( *(_DWORD *)(a1 + 1540) < 3u )
              {
                v56[0] = *(unsigned __int16 **)(a1 + 24);
                v56[1] = (unsigned __int16 *)v61;
                LOWORD(v52) = 769;
                v57 = v54;
                LastError = GetLastError();
                Eventlog_LogEvent((__int64)&v57, v44, 2u, v56, (unsigned __int8 *)&v52, LastError, 0, 0i64);
              }
              memset_0((void *)(a1 + 1312), 0, 0x40ui64);
              ++*(_DWORD *)(a1 + 1540);
              *(_DWORD *)(a1 + 1344) = 32;
              goto LABEL_191;
            }
            WPP_SF_D(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x7Eu,
              (__int64)&WPP_8f5c62d9956434feed7ea8f9d17b2299_Traceguids,
              XfrMessageToDatabase);
LABEL_154:
            v27 = WPP_GLOBAL_Control;
            goto LABEL_171;
          }
          v8 = v51;
          if ( *(_DWORD *)(a1 + 372) == 3 )
          {
            v9 += 2;
            v3 = 1;
            goto LABEL_13;
          }
          break;
        case 1168388:
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x40) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            WPP_SF_q(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x7Bu,
              (__int64)&WPP_8f5c62d9956434feed7ea8f9d17b2299_Traceguids,
              v4);
          }
          shutdown(*(_QWORD *)(v4 + 56), 2);
          Sock_CloseSocket(*(_QWORD *)(v4 + 56));
          Packet_FreeTcpMessage(v4, 0);
          v8 = 252;
          v2 = 0;
          v51 = 252;
          v6 = 0;
          LODWORD(v53) = 0;
          _InterlockedIncrement(&dword_1401C8120);
          break;
        default:
          v27 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x40) == 0
            || *((_BYTE *)WPP_GLOBAL_Control + 65) < 4u )
          {
            goto LABEL_171;
          }
          WPP_SF_D(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x7Cu,
            (__int64)&WPP_8f5c62d9956434feed7ea8f9d17b2299_Traceguids,
            v23);
          goto LABEL_154;
      }
    }
    else
    {
LABEL_13:
      v8 = v51;
    }
  }
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x40) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x76u, (__int64)&WPP_8f5c62d9956434feed7ea8f9d17b2299_Traceguids);
  }
LABEL_191:
  if ( v4 )
  {
    v45 = *(_QWORD *)(v4 + 56);
    if ( v45 - 1 <= 0xFFFFFFFFFFFFFFFDui64 )
    {
      shutdown(v45, 2);
      Sock_CloseSocket(*(_QWORD *)(v4 + 56));
    }
    Packet_FreeTcpMessage(v4, 0);
  }
  v46 = *(_DWORD *)(a1 + 1160) & 0xFFFFFFFB;
  *(_DWORD *)(a1 + 1548) = 0;
  v34 = *(_DWORD *)(a1 + 372) == 3;
  *(_DWORD *)(a1 + 1160) = v46;
  if ( ((v34 || (v46 & 0x40) != 0) && (v47 = *(_QWORD *)(a1 + 1176)) != 0 || (v47 = *(_QWORD *)(a1 + 1168)) != 0)
    && *(_DWORD *)(v47 + 4) > 1u )
  {
    *(_DWORD *)(a1 + 1160) = v46 & 0xFFFFFFF7;
  }
  Zone_CleanupFailedLoad(a1);
  Zone_UnlockAfterWriteEx(a1, 256, (__int64)"ds\\dns\\server\\server\\zonesec.c", 18);
  if ( HIDWORD(v53) )
  {
    Up_FreeUpdatesInUpdateList((__int64)v58);
    Up_FreeUpdatesInUpdateList((__int64)v59);
  }
  v48 = *(_DWORD *)(g_SecondaryQueue + 96);
  if ( v48 )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 0x40) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
    {
      WPP_SF_D(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x83u,
        (__int64)&WPP_8f5c62d9956434feed7ea8f9d17b2299_Traceguids,
        v48);
    }
    SetEvent(g_hWakeSecondaryEvent);
  }
  v49 = time(0i64);
  *(_DWORD *)(a1 + 1528) = v5;
  *(_DWORD *)(a1 + 1520) = v49;
  *(_DWORD *)(a1 + 1524) = v5;
  Thread_Close(1);
  return 0i64;
}
// 1400DC8C6: variable 'v17' is possibly undefined
// 1400DCCCB: variable 'v7' is possibly undefined
// 1400DCE38: variable 'v38' is possibly undefined
// 1400DCE38: variable 'v39' is possibly undefined
// 1400DCE38: variable 'v40' is possibly undefined
// 1400DCE82: variable 'v41' is possibly undefined
// 1400DCE82: variable 'v42' is possibly undefined
// 1400DD11D: variable 'v44' is possibly undefined
// 140186928: using guessed type __int128 DNS_EVENT_XFR_ABORTED_BY_MASTER;
// 140186D10: using guessed type __int128 DNS_EVENT_AXFR_BAD_RESPONSE;
// 140187678: using guessed type __int128 DNS_EVENT_AXFR_REFUSED;
// 140187858: using guessed type __int128 DNS_EVENT_XFR_MASTER_UNAVAILABLE;
// 1401B9714: using guessed type int dword_1401B9714;
// 1401B97BC: using guessed type int dword_1401B97BC;
// 1401B98F8: using guessed type int dword_1401B98F8;
// 1401B9A40: using guessed type int g_fDnsServiceExit;
// 1401BA370: using guessed type __int64 g_SecondaryQueue;
// 1401C80BC: using guessed type int dword_1401C80BC;
// 1401C80C0: using guessed type int dword_1401C80C0;
// 1401C80C4: using guessed type int dword_1401C80C4;
// 1401C80C8: using guessed type int dword_1401C80C8;
// 1401C80CC: using guessed type int dword_1401C80CC;
// 1401C80D0: using guessed type int dword_1401C80D0;
// 1401C80D4: using guessed type int dword_1401C80D4;
// 1401C80D8: using guessed type int dword_1401C80D8;
// 1401C80DC: using guessed type int dword_1401C80DC;
// 1401C80E0: using guessed type int dword_1401C80E0;
// 1401C8110: using guessed type int dword_1401C8110;
// 1401C8114: using guessed type int dword_1401C8114;
// 1401C8118: using guessed type int dword_1401C8118;
// 1401C811C: using guessed type int dword_1401C811C;
// 1401C8120: using guessed type int dword_1401C8120;
// 1401C8124: using guessed type int dword_1401C8124;
// 1401C8128: using guessed type int dword_1401C8128;
// 1401C85A0: using guessed type __int64 pcAxfrRequestSent;
// 1401C85A8: using guessed type __int64 pcAxfrResponseReceived;
// 1401C85B0: using guessed type __int64 pcAxfrSuccessReceived;
// 1401C85B8: using guessed type __int64 pcIxfrRequestSent;
// 1401C85C0: using guessed type __int64 pcIxfrResponseReceived;
// 1401C85C8: using guessed type __int64 pcIxfrSuccessReceived;
// 1401C85D8: using guessed type __int64 pcIxfrTcpSuccessReceived;
