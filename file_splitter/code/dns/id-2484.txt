//----- (000000014012C118) ----------------------------------------------------
size_t *__fastcall std::string::append(_QWORD *Src, char *a2, size_t Size)
{
  _QWORD *v5; // rbx
  char *v6; // rax
  _BYTE *v7; // rax
  size_t v9; // r8
  size_t v10; // rdi
  _BYTE *v11; // rax
  char *v12; // rcx
  bool v13; // cf
  _BYTE *v14; // rax

  v5 = Src;
  if ( !a2 )
    goto LABEL_13;
  v6 = Src[3] < 0x10ui64 ? (char *)Src : (char *)*Src;
  if ( a2 < v6 )
    goto LABEL_13;
  if ( Src[3] >= 0x10ui64 )
    Src = (_QWORD *)*Src;
  if ( (char *)Src + v5[2] <= a2 )
  {
LABEL_13:
    v9 = v5[2];
    if ( -1i64 - v9 <= Size )
      std::wstring::_Xlen();
    if ( !Size )
      return v5;
    v10 = v9 + Size;
    if ( v9 + Size == -1i64 )
      std::wstring::_Xlen();
    if ( v5[3] >= v10 )
    {
      if ( v10 )
        goto LABEL_24;
      v5[2] = 0i64;
      if ( v5[3] < 0x10ui64 )
        v11 = v5;
      else
        v11 = (_BYTE *)*v5;
      *v11 = 0;
    }
    else
    {
      std::string::_Copy((const void **)v5, v9 + Size, v9);
    }
    if ( !v10 )
      return v5;
LABEL_24:
    if ( v5[3] < 0x10ui64 )
      v12 = (char *)v5;
    else
      v12 = (char *)*v5;
    memcpy_0(&v12[v5[2]], a2, Size);
    v13 = v5[3] < 0x10ui64;
    v5[2] = v10;
    if ( v13 )
      v14 = v5;
    else
      v14 = (_BYTE *)*v5;
    v14[v10] = 0;
    return v5;
  }
  if ( v5[3] < 0x10ui64 )
    v7 = v5;
  else
    v7 = (_BYTE *)*v5;
  return std::string::append(v5, v5, a2 - v7, Size);
}
