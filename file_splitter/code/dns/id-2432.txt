//----- (0000000140127D34) ----------------------------------------------------
unsigned __int8 __fastcall DnsSign::ParseHexIntegerString(_WORD *a1, __int64 *a2)
{
  unsigned int v4; // ecx
  unsigned __int8 result; // al
  char v6[8]; // [rsp+28h] [rbp-39h] BYREF
  _QWORD v7[2]; // [rsp+30h] [rbp-31h] BYREF
  char v8[56]; // [rsp+40h] [rbp-21h] BYREF
  char pExceptionObject[56]; // [rsp+78h] [rbp+17h] BYREF

  v7[1] = -2i64;
  v4 = 0;
  result = 0;
  if ( *a1 )
  {
    do
    {
      if ( *a1 == 32 )
      {
        if ( result )
        {
          v6[0] = v4;
          std::vector<unsigned char>::insert<unsigned char>(a2, v7, *a2, v6);
          result = 0;
          v4 = 0;
        }
      }
      else if ( (unsigned __int16)(*a1 - 48) > 9u )
      {
        if ( (unsigned __int16)(*a1 - 97) > 5u )
        {
          if ( (unsigned __int16)(*a1 - 65) > 5u )
          {
            DnsSign::CBadCommandLineException::CBadCommandLineException(
              (DnsSign::CBadCommandLineException *)v8,
              (__int64)a2,
              11);
            DnsSign::CException::AppendErrorMessageByID((DnsSign::CException *)v8, 0xD6D99u);
            DnsSign::CBadCommandLineException::CBadCommandLineException((__int64)pExceptionObject, (__int64)v8);
            CxxThrowException_0(pExceptionObject, (_ThrowInfo *)&TI2_AVCBadCommandLineException_DnsSign__);
          }
          v4 = (unsigned __int16)*a1 + 16 * v4 - 55;
          result = 1;
          if ( v4 > 0xFF )
          {
            DnsSign::CBadCommandLineException::CBadCommandLineException(
              (DnsSign::CBadCommandLineException *)v8,
              (__int64)a2,
              11);
            DnsSign::CException::AppendErrorMessageByID((DnsSign::CException *)v8, 0xD6D99u);
            DnsSign::CBadCommandLineException::CBadCommandLineException((__int64)pExceptionObject, (__int64)v8);
            CxxThrowException_0(pExceptionObject, (_ThrowInfo *)&TI2_AVCBadCommandLineException_DnsSign__);
          }
        }
        else
        {
          v4 = (unsigned __int16)*a1 + 16 * v4 - 87;
          result = 1;
          if ( v4 > 0xFF )
          {
            DnsSign::CBadCommandLineException::CBadCommandLineException(
              (DnsSign::CBadCommandLineException *)v8,
              (__int64)a2,
              11);
            DnsSign::CException::AppendErrorMessageByID((DnsSign::CException *)v8, 0xD6D99u);
            DnsSign::CBadCommandLineException::CBadCommandLineException((__int64)pExceptionObject, (__int64)v8);
            CxxThrowException_0(pExceptionObject, (_ThrowInfo *)&TI2_AVCBadCommandLineException_DnsSign__);
          }
        }
      }
      else
      {
        v4 = (unsigned __int16)*a1 + 16 * v4 - 48;
        result = 1;
        if ( v4 > 0xFF )
        {
          DnsSign::CBadCommandLineException::CBadCommandLineException(
            (DnsSign::CBadCommandLineException *)v8,
            (__int64)a2,
            11);
          DnsSign::CException::AppendErrorMessageByID((DnsSign::CException *)v8, 0xD6D99u);
          DnsSign::CBadCommandLineException::CBadCommandLineException((__int64)pExceptionObject, (__int64)v8);
          CxxThrowException_0(pExceptionObject, (_ThrowInfo *)&TI2_AVCBadCommandLineException_DnsSign__);
        }
      }
      ++a1;
    }
    while ( *a1 );
    if ( result )
    {
      v6[0] = v4;
      return (unsigned __int8)std::vector<unsigned char>::insert<unsigned char>(a2, v7, *a2, v6);
    }
  }
  return result;
}
// 140127E30: variable 'a2' is possibly undefined
// 140127D34: using guessed type char var_90[8];
