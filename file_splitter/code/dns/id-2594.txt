//----- (0000000140132B80) ----------------------------------------------------
__int64 __fastcall CDnsPolicy_QTypeCriteriaTree::FindMatchingPolicyForQuery(
        __int64 a1,
        __int64 a2,
        __int64 a3,
        const void ***a4,
        __int64 a5,
        int a6)
{
  char v9; // di
  unsigned int MatchingPolicyForQuery; // r14d
  __int64 *v11; // rbx
  __int64 ***v12; // r12
  const void **v13; // rcx
  int v14; // esi
  __int64 v15; // rax
  const wchar_t *v16; // rbx
  int v17; // eax
  const char *CriteriaTypeString; // rax
  __int64 v19; // r8
  __int64 v21; // [rsp+20h] [rbp-89h]
  __int16 v22[2]; // [rsp+50h] [rbp-59h] BYREF
  int v23; // [rsp+54h] [rbp-55h]
  __int64 *v24; // [rsp+58h] [rbp-51h] BYREF
  __int64 v25; // [rsp+60h] [rbp-49h]
  __int64 v26; // [rsp+68h] [rbp-41h]
  __int64 v27; // [rsp+70h] [rbp-39h]
  __int64 v28; // [rsp+78h] [rbp-31h]
  void *v29[5]; // [rsp+80h] [rbp-29h] BYREF

  v28 = -2i64;
  v26 = a3;
  v27 = a2;
  v25 = a5;
  v9 = 0;
  v23 = 0;
  MatchingPolicyForQuery = 0;
  v22[0] = *(_WORD *)(a2 + 440);
  std::_Tree<std::_Tmap_traits<unsigned long,CDnsPolicy_CriteriaNode *,bool (*)(unsigned long const &,unsigned long const &),std::allocator<std::pair<unsigned long const,CDnsPolicy_CriteriaNode *>>,0>>::find(
    *(_QWORD *)(a1 + 8),
    &v24,
    (__int64)v22);
  v11 = v24;
  if ( v24 != *(__int64 **)(*(_QWORD *)(a1 + 8) + 8i64) )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_Dqq(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x33u,
        (__int64)&WPP_bbbcc621566c3408fe84d6a85874d543_Traceguids,
        (unsigned __int16)v22[0]);
    }
    v12 = (__int64 ***)v11[4];
    MatchingPolicyForQuery = CDnsPolicy_CriteriaNode::FindMatchingPolicyForQuery(v12, a2, v26, a4, v25, a6);
    if ( MatchingPolicyForQuery )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        LODWORD(v21) = (unsigned __int16)v22[0];
        WPP_SF_qdq(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x34u,
          (__int64)&WPP_bbbcc621566c3408fe84d6a85874d543_Traceguids,
          v12,
          v21,
          a1);
      }
    }
    else
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
      {
        v13 = *a4;
        if ( *a4 )
          v14 = *((_DWORD *)v13 + 26);
        else
          v14 = -1;
        if ( v13 )
        {
          v15 = CDnsPolicy::Name(v13, (__int64)v29);
          v16 = (const wchar_t *)v15;
          v9 = 1;
          v23 = 1;
          if ( *(_QWORD *)(v15 + 24) >= 8ui64 )
            v16 = *(const wchar_t **)v15;
        }
        else
        {
          v16 = L"NULL";
        }
        v17 = (**(__int64 (__fastcall ***)(__int64))a1)(a1);
        CriteriaTypeString = GetCriteriaTypeString(v17);
        WPP_SF_qsqqSd(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x35u, v19, v12, CriteriaTypeString, v27, *a4, v16, v14);
      }
      if ( (v9 & 1) != 0 && v29[3] >= (void *)8 )
        operator delete(v29[0]);
    }
  }
  return MatchingPolicyForQuery;
}
// 140132CBD: variable 'v21' is possibly undefined
// 140132D7B: variable 'v19' is possibly undefined
// 140184CA8: using guessed type void __stdcall operator delete(void *);
// 140185140: using guessed type __int64 (__fastcall *_guard_dispatch_icall_fptr)(_QWORD, _QWORD);
// 140132B80: using guessed type unsigned __int16 var_A0[2];
