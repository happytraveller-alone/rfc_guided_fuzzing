//----- (0000000140148890) ----------------------------------------------------
struct CDnsPolicy *__fastcall CDnsPolicyOrder::MatchNegativePolicy(
        CDnsPolicyOrder *this,
        struct _DNS_MSGINFO *a2,
        unsigned int a3,
        unsigned int *a4)
{
  __int64 *v4; // rbx
  bool i; // zf
  __int64 v10; // rsi
  _QWORD *v11; // rax
  _QWORD *v12; // rdi
  int v13; // eax

  v4 = (__int64 *)*((_QWORD *)this + 4);
  for ( i = v4 == *((__int64 **)this + 5); ; i = v4 == *((__int64 **)this + 5) )
  {
    if ( i )
      return 0i64;
    v10 = *v4;
    if ( *(_DWORD *)(*v4 + 96) && !*(_DWORD *)(v10 + 100) )
    {
      if ( *(_DWORD *)(v10 + 104) >= a3 )
        return 0i64;
      v11 = *(_QWORD **)(v10 + 112);
      v12 = (_QWORD *)*v11;
      if ( (_QWORD *)*v11 != v11 )
        break;
    }
LABEL_13:
    ++v4;
  }
  while ( 1 )
  {
    v13 = (*(__int64 (__fastcall **)(_QWORD, struct _DNS_MSGINFO *, _QWORD, unsigned int *))(*(_QWORD *)v12[2] + 16i64))(
            v12[2],
            a2,
            *(unsigned int *)(v10 + 80),
            a4);
    if ( v13 == 1 && *(_DWORD *)(v10 + 80) == 1 )
      return (struct CDnsPolicy *)*v4;
    if ( !v13 && !*(_DWORD *)(v10 + 80) )
      goto LABEL_13;
    v12 = (_QWORD *)*v12;
    if ( v12 == *(_QWORD **)(v10 + 112) )
    {
      if ( !v13 )
        goto LABEL_13;
      return (struct CDnsPolicy *)*v4;
    }
  }
}
// 140185140: using guessed type __int64 (__fastcall *_guard_dispatch_icall_fptr)(_QWORD, _QWORD);
