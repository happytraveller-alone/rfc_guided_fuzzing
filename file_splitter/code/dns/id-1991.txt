//----- (00000001400F3CC8) ----------------------------------------------------
__int64 __fastcall DnsOls_WriteZoneSkdsToDirectory(__int64 a1)
{
  unsigned int inited; // ebx
  WCHAR *v3; // rdx
  CDnsClientSubnetRecordsTrie *v4; // rcx
  unsigned __int16 v5; // dx
  int v6; // eax
  __int64 v7; // rbx
  int v8; // edi
  int v9; // esi
  int v10; // eax
  __int64 *i; // rdi
  __int64 v12; // rcx
  __int64 v13; // rax
  int v14; // eax
  unsigned int v15; // r13d
  __int64 v16; // r8
  _QWORD *v17; // rdx
  __int64 v18; // rax
  int v19; // eax
  _DWORD *v20; // rax
  unsigned __int8 *v21; // rdx
  unsigned __int8 *v22; // rax
  unsigned __int64 v23; // rcx
  _DWORD *v24; // rdx
  _DWORD *v25; // r8
  _DWORD *v26; // rdx
  _DWORD *v27; // r8
  _DWORD *v28; // rdx
  _DWORD *v29; // r8
  _DWORD *v30; // rdx
  _DWORD *v31; // r8
  _DWORD *v32; // rdx
  _DWORD *v33; // r8
  _QWORD *v34; // rdx
  _DWORD *v35; // rdx
  unsigned __int64 v36; // rax
  _DWORD *v37; // rcx
  _DWORD *v38; // rdx
  _DWORD *v39; // rcx
  _DWORD *v40; // rdx
  _QWORD *v41; // rcx
  _DWORD *v42; // rcx
  unsigned __int64 v43; // r8
  _DWORD *v44; // rdx
  unsigned __int8 *v45; // rax
  _DWORD *v46; // rdx
  const unsigned __int16 **v47; // rbx
  __int64 v48; // rsi
  unsigned __int8 *v49; // rax
  unsigned __int8 *v50; // rdx
  __int64 v51; // r8
  _QWORD *v52; // rbx
  int v53; // r15d
  _QWORD *v54; // rbx
  char *v55; // rax
  char *v56; // rax
  int outvalue; // [rsp+20h] [rbp-E0h]
  ULONG v59; // [rsp+28h] [rbp-D8h]
  __int64 v60; // [rsp+40h] [rbp-C0h] BYREF
  LDAPModW *mods[2]; // [rsp+48h] [rbp-B8h] BYREF
  __int128 v62; // [rsp+58h] [rbp-A8h] BYREF
  __int64 v63[3]; // [rsp+68h] [rbp-98h] BYREF
  __int64 v64[4]; // [rsp+80h] [rbp-80h] BYREF
  unsigned __int64 v65; // [rsp+A0h] [rbp-60h]

  Ds_InitModBuffer(v64, 0x2000u, 25, 0, 0);
  if ( !a1 )
  {
    inited = 87;
    goto LABEL_179;
  }
  if ( *(_DWORD *)(a1 + 372) != 1 || (*(_BYTE *)(a1 + 388) & 1) == 0 )
  {
    inited = 9611;
    goto LABEL_179;
  }
  if ( !*(_QWORD *)(a1 + 1136) )
  {
    v3 = *(WCHAR **)(a1 + 840);
    v63[1] = (__int64)off_1401B6CE8;
    mods[0] = (LDAPModW *)v63;
    LODWORD(v63[0]) = 1;
    v63[2] = 0i64;
    mods[1] = 0i64;
    inited = Dns_LdapModifyExt(pServerLdap, v3, mods, 0i64, outvalue, v59, 0);
    if ( inited == 16 )
      inited = 0;
    if ( inited )
    {
      v4 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        v5 = 10;
LABEL_13:
        WPP_SF_DS(
          *((_QWORD *)v4 + 7),
          v5,
          (__int64)&WPP_b7aea06a65693a31b0dd129af848d3b8_Traceguids,
          inited,
          *(_QWORD *)(a1 + 840));
      }
    }
    goto LABEL_179;
  }
  v6 = DnsOls_CountSKDs(a1, 1, 0i64, 0);
  v7 = *(_QWORD *)(a1 + 1128);
  v8 = v6;
  v60 = -1i64;
  if ( v7 )
  {
    DnsOls_WriteRRListToBuffer(0i64, 0i64, *(__int64 **)(v7 + 128), (int *)&v60 + 1);
    DnsOls_WriteRRListToBuffer(0i64, 0i64, *(__int64 **)(v7 + 136), (int *)&v60);
    v9 = v60;
    v10 = HIDWORD(v60);
  }
  else
  {
    v10 = 0;
    LODWORD(v60) = 0;
    v9 = 0;
  }
  HIDWORD(v60) = v10;
  inited = Ds_InitModBufferCount((__int64)v64, v10 + v8 + v9);
  if ( inited )
    goto LABEL_179;
  for ( i = *(__int64 **)(a1 + 1136); i; i = (__int64 *)*i )
  {
    v12 = i[3];
    if ( v12 )
    {
      v13 = -1i64;
      do
        ++v13;
      while ( *(_WORD *)(v12 + 2 * v13) );
      v14 = 2 * v13 + 2;
    }
    else
    {
      v14 = 2;
    }
    v15 = v14 + 116;
    v16 = 3i64;
    v17 = i + 18;
    do
    {
      if ( *v17 )
      {
        v18 = -1i64;
        do
          ++v18;
        while ( *(_WORD *)(*v17 + 2 * v18) );
        v19 = 2 * v18 + 2;
      }
      else
      {
        v19 = 2;
      }
      v17 += 3;
      v15 += v19 + 4;
      --v16;
    }
    while ( v16 );
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
    {
      outvalue = (int)i;
      WPP_SF_Dq(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0xBu,
        (__int64)&WPP_b7aea06a65693a31b0dd129af848d3b8_Traceguids,
        v15);
    }
    v20 = (_DWORD *)Ds_ReserveBervalInModBuffer(v64, v15);
    if ( !v20 )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        v56 = Dbg_GuidString((const IID *)(i + 1));
        WPP_SF_DSs(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0xCu,
          (__int64)&WPP_b7aea06a65693a31b0dd129af848d3b8_Traceguids,
          v15,
          (__int64)v56,
          *(_QWORD *)(a1 + 16));
      }
      inited = 13;
      goto LABEL_179;
    }
    if ( v65 && (v21 = (unsigned __int8 *)(v20 + 1), (unsigned __int64)(v20 + 1) <= v65) )
      *v20 = 1;
    else
      v21 = 0i64;
    *(_OWORD *)v21 = *(_OWORD *)(i + 1);
    v22 = DnsOls_WriteStringToMod((struct _DsModBuffer *)v64, v21 + 16, (const unsigned __int16 *)i[3]);
    v23 = v65;
    if ( v65 && v22 && (v24 = v22 + 4, (unsigned __int64)(v22 + 4) <= v65) )
    {
      *(_DWORD *)v22 = *((_DWORD *)i + 8);
      v23 = v65;
    }
    else
    {
      v24 = 0i64;
    }
    if ( v23 && v24 && (v25 = v24 + 1, (unsigned __int64)(v24 + 1) <= v23) )
    {
      *v24 = *((_DWORD *)i + 9);
      v23 = v65;
    }
    else
    {
      v25 = 0i64;
    }
    if ( v23 && v25 && (v26 = v25 + 1, (unsigned __int64)(v25 + 1) <= v23) )
    {
      *v25 = *((unsigned __int8 *)i + 40);
      v23 = v65;
    }
    else
    {
      v26 = 0i64;
    }
    if ( v23 && v26 && (v27 = v26 + 1, (unsigned __int64)(v26 + 1) <= v23) )
    {
      *v26 = *((_DWORD *)i + 11);
      v23 = v65;
    }
    else
    {
      v27 = 0i64;
    }
    if ( v23 && v27 && (v28 = v27 + 1, (unsigned __int64)(v27 + 1) <= v23) )
    {
      *v27 = *((_DWORD *)i + 12);
      v23 = v65;
    }
    else
    {
      v28 = 0i64;
    }
    if ( v23 && v28 && (v29 = v28 + 1, (unsigned __int64)(v28 + 1) <= v23) )
    {
      *v28 = *((_DWORD *)i + 13);
      v23 = v65;
    }
    else
    {
      v29 = 0i64;
    }
    if ( v23 && v29 && (v30 = v29 + 1, (unsigned __int64)(v29 + 1) <= v23) )
    {
      *v29 = *((_DWORD *)i + 14);
      v23 = v65;
    }
    else
    {
      v30 = 0i64;
    }
    if ( v23 && v30 && (v31 = v30 + 1, (unsigned __int64)(v30 + 1) <= v23) )
    {
      *v30 = *((_DWORD *)i + 15);
      v23 = v65;
    }
    else
    {
      v31 = 0i64;
    }
    if ( v23 && v31 && (v32 = v31 + 1, (unsigned __int64)(v31 + 1) <= v23) )
    {
      *v31 = *((_DWORD *)i + 16);
      v23 = v65;
    }
    else
    {
      v32 = 0i64;
    }
    if ( v23 && v32 && (v33 = v32 + 1, (unsigned __int64)(v32 + 1) <= v23) )
    {
      *v32 = *((_DWORD *)i + 17);
      v23 = v65;
    }
    else
    {
      v33 = 0i64;
    }
    if ( v23 && v33 && (v34 = v33 + 1, (unsigned __int64)(v33 + 1) <= v23) )
      *v33 = *((_DWORD *)i + 18);
    else
      v34 = 0i64;
    *v34 = *(__int64 *)((char *)i + 76);
    v34[1] = *(__int64 *)((char *)i + 84);
    v35 = v34 + 2;
    v36 = v65;
    if ( v65 && v35 && (v37 = v35 + 1, (unsigned __int64)(v35 + 1) <= v65) )
    {
      *v35 = *((_DWORD *)i + 23);
      v36 = v65;
    }
    else
    {
      v37 = 0i64;
    }
    if ( v36 && v37 && (v38 = v37 + 1, (unsigned __int64)(v37 + 1) <= v36) )
    {
      *v37 = *((_DWORD *)i + 24);
      v36 = v65;
    }
    else
    {
      v38 = 0i64;
    }
    if ( v36 && v38 && (v39 = v38 + 1, (unsigned __int64)(v38 + 1) <= v36) )
    {
      *v38 = *((_DWORD *)i + 25);
      v36 = v65;
    }
    else
    {
      v39 = 0i64;
    }
    if ( v36 && v39 && (v40 = v39 + 1, (unsigned __int64)(v39 + 1) <= v36) )
    {
      *v39 = *((_DWORD *)i + 26);
      v36 = v65;
    }
    else
    {
      v40 = 0i64;
    }
    if ( v36 && v40 && (v41 = v40 + 1, (unsigned __int64)(v40 + 1) <= v36) )
      *v40 = *((_DWORD *)i + 27);
    else
      v41 = 0i64;
    *v41 = *(__int64 *)((char *)i + 116);
    v42 = v41 + 1;
    v43 = v65;
    if ( i == *(__int64 **)(a1 + 1128) )
    {
      if ( v65 && v42 && (v44 = v42 + 1, (unsigned __int64)(v42 + 1) <= v65) )
      {
        *v42 = HIDWORD(v60);
        v43 = v65;
      }
      else
      {
        v44 = 0i64;
      }
      if ( !v43 )
        goto LABEL_139;
      if ( !v44 )
        goto LABEL_139;
      v45 = (unsigned __int8 *)(v44 + 1);
      if ( (unsigned __int64)(v44 + 1) > v43 )
        goto LABEL_139;
      *v44 = v9;
    }
    else
    {
      if ( v65 && v42 && (v46 = v42 + 1, (unsigned __int64)(v42 + 1) <= v65) )
      {
        *v42 = 0;
        v43 = v65;
      }
      else
      {
        v46 = 0i64;
      }
      if ( !v43 || !v46 || (v45 = (unsigned __int8 *)(v46 + 1), (unsigned __int64)(v46 + 1) > v43) )
      {
LABEL_139:
        v45 = 0i64;
        goto LABEL_140;
      }
      *v46 = 0;
    }
LABEL_140:
    v47 = (const unsigned __int16 **)(i + 20);
    v48 = 3i64;
    do
    {
      v49 = DnsOls_WriteStringToMod((struct _DsModBuffer *)v64, v45, *(v47 - 2));
      v50 = v49;
      if ( v65 && v49 && (v45 = v49 + 4, (unsigned __int64)v45 <= v65) )
        *(_DWORD *)v50 = *(_DWORD *)v47;
      else
        v45 = 0i64;
      v47 += 3;
      --v48;
    }
    while ( v48 );
    inited = Ds_CommitBervalToMod((__int64)v64, v15);
    if ( inited )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        v55 = Dbg_GuidString((const IID *)(i + 1));
        WPP_SF_DSs(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0xDu,
          (__int64)&WPP_b7aea06a65693a31b0dd129af848d3b8_Traceguids,
          v15,
          (__int64)v55,
          *(_QWORD *)(a1 + 16));
      }
      goto LABEL_179;
    }
    if ( i == *(__int64 **)(a1 + 1128) )
    {
      v52 = (_QWORD *)i[16];
      if ( v52 )
      {
        v53 = HIDWORD(v60);
        do
        {
          Ds_WriteRecordToBuffer((__int64)v64, (__int64)v52, v51, 241);
          v52 = (_QWORD *)*v52;
          --v53;
        }
        while ( v52 );
        HIDWORD(v60) = v53;
      }
      v54 = (_QWORD *)i[17];
      v9 = v60;
      if ( v54 )
      {
        do
        {
          Ds_WriteRecordToBuffer((__int64)v64, (__int64)v54, v51, 242);
          v54 = (_QWORD *)*v54;
          --v9;
        }
        while ( v54 );
        LODWORD(v60) = v9;
      }
    }
    else
    {
      v9 = v60;
    }
  }
  v62 = 0i64;
  *(_QWORD *)&v62 = Ds_SetupModForExecution((__int64)v64, (__int64)off_1401B6CE8);
  if ( (_QWORD)v62 )
  {
    inited = Dns_LdapModifyExt(pServerLdap, *(PWSTR *)(a1 + 840), (LDAPModW **)&v62, 0i64, outvalue, v59, 0);
    if ( inited )
    {
      v4 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        v5 = 15;
        goto LABEL_13;
      }
    }
  }
  else
  {
    inited = GetLastError();
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      WPP_SF_Ds(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0xEu,
        (__int64)&WPP_b7aea06a65693a31b0dd129af848d3b8_Traceguids,
        inited,
        *(_QWORD *)(a1 + 16));
    }
  }
LABEL_179:
  Ds_CleanupModBuffer((__int64)v64);
  return inited;
}
// 1400F3D9F: variable 'outvalue' is possibly undefined
// 1400F3D9F: variable 'v59' is possibly undefined
// 1400F42D3: variable 'v51' is possibly undefined
// 1400F3CC8: using guessed type _QWORD var_2030[4];
