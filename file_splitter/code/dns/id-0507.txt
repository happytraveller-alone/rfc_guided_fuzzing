//----- (0000000140044514) ----------------------------------------------------
__int64 __fastcall Ds_ReadZoneProperties(__int64 a1, LDAPMessage *a2)
{
  LDAPMessage *v2; // r14
  struct berval **v4; // rbx
  unsigned int v5; // esi
  __int64 v6; // rdx
  const IID *v7; // r13
  CDnsClientSubnetRecordsTrie *v8; // rcx
  DWORD TickCount; // ebx
  PWCHAR v11; // rax
  int v12; // r15d
  PWCHAR *valuesW; // r15
  PWCHAR v14; // rax
  PWCHAR v15; // rax
  __int64 v16; // rdx
  WCHAR v17; // cx
  int v18; // eax
  struct berval **values_lenW; // rax
  unsigned int *v20; // rax
  unsigned int v21; // r12d
  void *v22; // rax
  void *v23; // r15
  __int64 v24; // rcx
  __int64 v25; // rcx
  struct berval **v26; // rax
  _QWORD *v27; // r12
  CDnsClientSubnetRecordsTrie *v28; // rcx
  struct berval **v29; // r12
  int v30; // esi
  int v31; // r14d
  __int64 v32; // rax
  int *v33; // rbx
  unsigned int v34; // r9d
  int *v35; // r15
  unsigned __int16 v36; // dx
  __int64 v37; // rax
  int v38; // r15d
  unsigned __int16 v39; // dx
  unsigned int *v40; // r15
  _DWORD *v41; // rax
  _DWORD *v42; // rax
  _DWORD *DnsAddrArrayFromDsProp; // rax
  __int64 v44; // rax
  __int64 IpArrayFromDsProp; // rax
  struct berval **v46; // rax
  struct berval *v47; // rax
  IID *v48; // rax
  CDnsClientSubnetRecordsTrie **v49; // rcx
  char *v50; // rax
  char *v51; // rax
  __m128i v52; // xmm0
  BOOL v53; // eax
  int v54; // edx
  const char *v55; // r9
  const char *v56; // r8
  bool v57; // al
  bool v58; // al
  bool v59; // al
  char v60; // al
  char v61; // al
  bool v62; // al
  int v63; // eax
  _QWORD *v64; // rcx
  char **v65; // rax
  PWCHAR *v66; // rbx
  void *v67; // rsi
  CHAR **v68; // rax
  __int64 v69; // rdx
  PWCHAR *v70; // rbx
  unsigned int v71; // r15d
  int v72; // ecx
  __int64 v73; // rbx
  struct berval **vals; // [rsp+60h] [rbp-A0h] BYREF
  __int64 v75; // [rsp+68h] [rbp-98h] BYREF
  int v76; // [rsp+70h] [rbp-90h]
  unsigned int v77; // [rsp+74h] [rbp-8Ch]
  unsigned int v78; // [rsp+78h] [rbp-88h] BYREF
  int v79; // [rsp+7Ch] [rbp-84h] BYREF
  LDAPMessage *entry; // [rsp+80h] [rbp-80h] BYREF
  PLDAPMessage res; // [rsp+88h] [rbp-78h] BYREF
  _QWORD *v82; // [rsp+90h] [rbp-70h]
  __int64 v83; // [rsp+A4h] [rbp-5Ch] BYREF
  const IID *v84; // [rsp+B0h] [rbp-50h]
  __int64 v85; // [rsp+B8h] [rbp-48h] BYREF
  PLDAPControlW ServerControls[2]; // [rsp+C8h] [rbp-38h] BYREF
  __int128 v87; // [rsp+D8h] [rbp-28h]
  __int128 v88; // [rsp+E8h] [rbp-18h]
  __int128 v89; // [rsp+F8h] [rbp-8h]
  __int128 v90; // [rsp+108h] [rbp+8h]
  __int128 v91; // [rsp+118h] [rbp+18h]
  __int128 v92; // [rsp+128h] [rbp+28h]
  __int128 v93; // [rsp+138h] [rbp+38h]
  __int128 v94[7]; // [rsp+150h] [rbp+50h] BYREF
  const IID *v95; // [rsp+1C0h] [rbp+C0h]
  char v96[1064]; // [rsp+1D0h] [rbp+D0h] BYREF
  int v97; // [rsp+5F8h] [rbp+4F8h]
  __int64 v98; // [rsp+640h] [rbp+540h]

  entry = a2;
  v2 = a2;
  v76 = 1;
  v77 = 0;
  v4 = 0i64;
  res = 0i64;
  vals = 0i64;
  HIDWORD(v75) = 0;
  v82 = 0i64;
  v5 = 0;
  v85 = 0i64;
  memset_0(v96, 0, 0x678ui64);
  ServerControls[1] = 0i64;
  ServerControls[0] = (PLDAPControlW)&SecurityDescriptorControl_DGO;
  v7 = 0i64;
  v84 = 0i64;
  v8 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
  {
    WPP_SF_s(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x16Fu,
      (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
      *(const char **)(a1 + 16));
    v8 = WPP_GLOBAL_Control;
  }
  if ( a1 && *(_QWORD *)(a1 + 192) )
    return Ds_LoadZoneScopeProperties(a1, v2);
  if ( !v2 )
  {
    if ( v8 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)v8 + 17) & 0x400) != 0
      && *((_BYTE *)v8 + 65) >= 4u )
    {
      WPP_SF_S(
        *((_QWORD *)v8 + 7),
        0x170u,
        (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
        *(const unsigned __int16 **)(a1 + 840));
    }
    TickCount = GetTickCount();
    v5 = ldap_search_ext_sW(
           pServerLdap,
           *(const PWSTR *)(a1 + 840),
           0,
           g_szDnsZoneFilter,
           &DsTypeAttributeTable,
           0,
           ServerControls,
           0i64,
           &g_LdapTimeout,
           0,
           &res);
    v77 = v5;
    _InterlockedExchangeAdd(&dword_1401C7D48, GetTickCount() - TickCount);
    if ( v5 )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        v11 = ldap_err2stringW(v5);
        WPP_SF_DS(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x171u,
          (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
          v5,
          (__int64)v11);
      }
      if ( res )
        ldap_msgfree(res);
      return Ds_ErrorHandler(v5, *(_QWORD *)(a1 + 840), pServerLdap, 0);
    }
    v12 = 1;
    HIDWORD(v75) = 1;
    entry = ldap_first_entry(pServerLdap, res);
    v2 = entry;
    if ( !entry )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x172u, (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids);
      }
      v4 = vals;
      v5 = 32;
      goto LABEL_215;
    }
    v4 = vals;
  }
  if ( (*(_BYTE *)(a1 + 1160) & 0x40) != 0 )
    goto LABEL_212;
  if ( *(_WORD *)(a1 + 894) )
  {
    valuesW = ldap_get_valuesW(pServerLdap, v2, off_1401B6C60);
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      v14 = 0i64;
      if ( valuesW )
        v14 = *valuesW;
      WPP_SF_SS(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x173u,
        (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
        (const unsigned __int16 *)(a1 + 894),
        (__int64)v14);
    }
    if ( valuesW )
    {
      v15 = *valuesW;
      if ( *valuesW )
      {
        v16 = a1 + 894 - (_QWORD)v15;
        while ( 1 )
        {
          v17 = *v15;
          if ( *v15 != *(PWCHAR)((char *)v15 + v16) )
            break;
          ++v15;
          if ( !v17 )
          {
            v18 = 0;
            goto LABEL_43;
          }
        }
        v18 = v17 < *(PWCHAR)((char *)v15 + v16) ? -1 : 1;
LABEL_43:
        v76 = v18 != 0 ? v76 : 0;
      }
      ldap_value_freeW(valuesW);
      if ( !v76 )
      {
        v5 = 0;
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          WPP_SF_Ss(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x174u,
            (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
            (const unsigned __int16 *)(a1 + 894),
            *(_QWORD *)(a1 + 16));
        }
        goto LABEL_214;
      }
    }
  }
  values_lenW = ldap_get_values_lenW(pServerLdap, v2, off_1401B6C40);
  v4 = values_lenW;
  if ( !values_lenW || (v20 = (unsigned int *)*values_lenW) == 0i64 )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      WPP_SF_s(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x175u,
        (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
        *(const char **)(a1 + 16));
    }
    v5 = 32;
LABEL_210:
    if ( v5 )
      goto LABEL_213;
LABEL_211:
    if ( !v76 )
    {
LABEL_213:
      LODWORD(v7) = 0;
      goto LABEL_214;
    }
LABEL_212:
    saveZoneObjectUsn(a1, v6, v2);
    goto LABEL_213;
  }
  v21 = *v20;
  v22 = Mem_Alloc(*v20, 12i64, "ds\\dns\\server\\server\\ds.c", 14529);
  v23 = v22;
  if ( !v22 )
  {
    v5 = 14;
    goto LABEL_214;
  }
  memcpy_0(v22, (*v4)->bv_val, (*v4)->bv_len);
  if ( a1 == g_pCacheZone )
    rewriteRootHintsSecurity(v24, v2, v23);
  EnterCriticalSection(&csZoneList);
  Timeout_FreeAndReplaceZoneDataEx(
    v25,
    (__int64 *)(a1 + 360),
    (__int64)v23,
    0i64,
    (__int64)"ds\\dns\\server\\server\\ds.c",
    14557);
  *(_DWORD *)(a1 + 368) = v21;
  LeaveCriticalSection(&csZoneList);
  ldap_value_free_len(v4);
  v26 = ldap_get_values_lenW(pServerLdap, v2, off_1401B6C30);
  v27 = 0i64;
  vals = v26;
  if ( !v26 )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      WPP_SF_s(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x176u,
        (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
        *(const char **)(a1 + 16));
    }
    goto LABEL_145;
  }
  if ( !*v26 )
    goto LABEL_144;
  v28 = WPP_GLOBAL_Control;
  v29 = v26;
  v30 = 0;
  v31 = 0;
  do
  {
    v32 = (__int64)*v29++;
    v33 = *(int **)(v32 + 8);
    if ( v28 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)v28 + 17) & 0x400) != 0
      && *((_BYTE *)v28 + 65) >= 4u )
    {
      WPP_SF_Dd(*((_QWORD *)v28 + 7), 0x177u, (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids, v33[4]);
      v28 = WPP_GLOBAL_Control;
    }
    v34 = v33[4];
    if ( v34 > 0x40 )
    {
      switch ( v34 )
      {
        case 0x81u:
          if ( v30 )
            continue;
          IpArrayFromDsProp = getIpArrayFromDsProp(a1, 129, v33);
          Timeout_FreeAndReplaceZoneDataEx(
            (__int64)"ds\\dns\\server\\server\\ds.c",
            (__int64 *)(a1 + 1168),
            IpArrayFromDsProp,
            (__int64)DnsAddrArray_Free,
            (__int64)"ds\\dns\\server\\server\\ds.c",
            14794);
          break;
        case 0x82u:
          if ( v31 )
            continue;
          v44 = getIpArrayFromDsProp(a1, 130, v33);
          Timeout_FreeAndReplaceZoneDataEx(
            (__int64)"ds\\dns\\server\\server\\ds.c",
            (__int64 *)(a1 + 1032),
            v44,
            (__int64)DnsAddrArray_Free,
            (__int64)"ds\\dns\\server\\server\\ds.c",
            14754);
          goto LABEL_129;
        case 0x83u:
          v40 = (unsigned int *)(a1 + 376);
          setPropertyValueToDsProperty(v33, (_QWORD *)(a1 + 376), 4u);
          v28 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
          {
            v39 = 378;
LABEL_113:
            v34 = *v40;
LABEL_108:
            WPP_SF_D(*((_QWORD *)v28 + 7), v39, (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids, v34);
LABEL_141:
            v28 = WPP_GLOBAL_Control;
            continue;
          }
          continue;
        case 0x90u:
          DnsAddrArrayFromDsProp = getDnsAddrArrayFromDsProp(a1, 144, v33);
          Timeout_FreeAndReplaceZoneDataEx(
            (__int64)"ds\\dns\\server\\server\\ds.c",
            (__int64 *)(a1 + 1008),
            (__int64)DnsAddrArrayFromDsProp,
            (__int64)DnsAddrArray_Free,
            (__int64)"ds\\dns\\server\\server\\ds.c",
            14731);
LABEL_86:
          LODWORD(v7) = 1;
          goto LABEL_141;
        case 0x91u:
          v42 = getDnsAddrArrayFromDsProp(a1, 145, v33);
          Timeout_FreeAndReplaceZoneDataEx(
            (__int64)"ds\\dns\\server\\server\\ds.c",
            (__int64 *)(a1 + 1168),
            (__int64)v42,
            (__int64)DnsAddrArray_Free,
            (__int64)"ds\\dns\\server\\server\\ds.c",
            14812);
          break;
        case 0x92u:
          v41 = getDnsAddrArrayFromDsProp(a1, 146, v33);
          Timeout_FreeAndReplaceZoneDataEx(
            (__int64)"ds\\dns\\server\\server\\ds.c",
            (__int64 *)(a1 + 1032),
            (__int64)v41,
            (__int64)DnsAddrArray_Free,
            (__int64)"ds\\dns\\server\\server\\ds.c",
            14772);
LABEL_129:
          v31 = 1;
          goto LABEL_141;
        default:
LABEL_124:
          if ( v28 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)v28 + 17) & 0x400) != 0
            && *((_BYTE *)v28 + 65) >= 4u )
          {
            v39 = 385;
            goto LABEL_108;
          }
          continue;
      }
      v30 = 1;
      goto LABEL_141;
    }
    switch ( v34 )
    {
      case 0x40u:
        setPropertyValueToDsProperty(v33, &v83, 4u);
        *(_DWORD *)(a1 + 396) &= ~1u;
        *(_DWORD *)(a1 + 396) |= v83 & 1;
        v28 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
        {
          v34 = *(_DWORD *)(a1 + 396) & 1;
          v39 = 383;
          goto LABEL_108;
        }
        break;
      case 1u:
        v40 = (unsigned int *)(a1 + 372);
        setPropertyValueToDsProperty(v33, (_QWORD *)(a1 + 372), 4u);
        v28 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
        {
          v39 = 376;
          goto LABEL_113;
        }
        break;
      case 2u:
        v38 = *(_BYTE *)(a1 + 392) & 3;
        setPropertyValueToDsProperty(v33, &v75, 1u);
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
        {
          WPP_SF_D(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x17Bu,
            (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
            (unsigned __int8)v75);
        }
        Zone_SetAllowUpdate(a1, (unsigned __int8)v75);
        if ( (*(_BYTE *)(a1 + 392) & 3) != v38
          && (*(_BYTE *)(a1 + 392) & 3) != 0
          && g_ServerState != 1
          && (*(_BYTE *)(a1 + 396) & 2) == 0 )
        {
          Service_SendControlCode();
        }
        v28 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
        {
          v39 = 380;
          v34 = *(_BYTE *)(a1 + 392) & 3;
          goto LABEL_108;
        }
        break;
      case 8u:
        setPropertyValueToDsProperty(v33, (_QWORD *)(a1 + 1016), 8u);
        v28 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
        {
          WPP_SF_q(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x179u,
            (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
            *(_QWORD *)(a1 + 1016));
          goto LABEL_141;
        }
        break;
      case 0x10u:
        v35 = (int *)(a1 + 992);
        setPropertyValueToDsProperty(v33, (_QWORD *)(a1 + 992), 4u);
        v28 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
        {
          v36 = 381;
          goto LABEL_79;
        }
        break;
      case 0x11u:
        if ( (_DWORD)v7 )
          break;
        v37 = getIpArrayFromDsProp(a1, 17, v33);
        Timeout_FreeAndReplaceZoneDataEx(
          (__int64)"ds\\dns\\server\\server\\ds.c",
          (__int64 *)(a1 + 1008),
          v37,
          (__int64)DnsAddrArray_Free,
          (__int64)"ds\\dns\\server\\server\\ds.c",
          14713);
        goto LABEL_86;
      case 0x12u:
        v35 = (int *)(a1 + 1000);
        setPropertyValueToDsProperty(v33, (_QWORD *)(a1 + 1000), 4u);
        v28 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
        {
          v36 = 384;
          goto LABEL_79;
        }
        break;
      case 0x20u:
        v35 = (int *)(a1 + 996);
        setPropertyValueToDsProperty(v33, (_QWORD *)(a1 + 996), 4u);
        v28 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
        {
          v36 = 382;
LABEL_79:
          WPP_SF_D(*((_QWORD *)v28 + 7), v36, (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids, *v35);
          goto LABEL_141;
        }
        break;
      default:
        goto LABEL_124;
    }
  }
  while ( *v29 );
  v5 = v77;
  v27 = 0i64;
  v2 = entry;
  v7 = v84;
  v26 = vals;
LABEL_144:
  ldap_value_free_len(v26);
LABEL_145:
  v46 = ldap_get_values_lenW(pServerLdap, v2, (const PWSTR)L"objectGUID");
  v4 = v46;
  if ( !v46 )
    goto LABEL_158;
  v47 = *v46;
  if ( v47 )
  {
    if ( v47->bv_len == 16 )
    {
      v48 = (IID *)Mem_Alloc(0x10u, 12i64, "ds\\dns\\server\\server\\ds.c", 14854);
      v7 = v48;
      if ( v48 )
        memcpy_0(v48, (*v4)->bv_val, (*v4)->bv_len);
    }
  }
  ldap_value_free_len(v4);
  v4 = 0i64;
  if ( v7 )
  {
    v49 = &WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      v50 = Dbg_GuidString(v7);
      WPP_SF_Ss(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x182u,
        (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
        (const unsigned __int16 *)v50,
        *(_QWORD *)(a1 + 16));
    }
    Timeout_FreeAndReplaceZoneDataEx(
      (__int64)v49,
      (__int64 *)(a1 + 856),
      (__int64)v7,
      0i64,
      (__int64)"ds\\dns\\server\\server\\ds.c",
      14889);
  }
  else
  {
LABEL_158:
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      v51 = Dbg_GuidString(*(const IID **)(a1 + 856));
      WPP_SF_Ss(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x183u,
        (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
        (const unsigned __int16 *)v51,
        *(_QWORD *)(a1 + 16));
    }
  }
  if ( (*(_DWORD *)(a1 + 396) & 1) == 0 || *(_DWORD *)(a1 + 1000) )
  {
    if ( (*(_DWORD *)(a1 + 396) & 1) == 0 )
      *(_DWORD *)(a1 + 1000) = 0;
  }
  else
  {
    Aging_ResetZoneAgingTime(a1);
  }
  if ( *(_DWORD *)(a1 + 372) != 1 )
    goto LABEL_211;
  v88 = *(_OWORD *)(a1 + 1040);
  v79 = 0;
  v52 = *(__m128i *)(a1 + 1056);
  LODWORD(entry) = 0;
  v87 = (__int128)v52;
  v89 = *(_OWORD *)(a1 + 1072);
  v90 = *(_OWORD *)(a1 + 1088);
  v91 = *(_OWORD *)(a1 + 1104);
  v92 = *(_OWORD *)(a1 + 1120);
  v93 = *(_OWORD *)(a1 + 1136);
  v84 = *(const IID **)(a1 + 1152);
  vals = ldap_get_values_lenW(pServerLdap, v2, off_1401B6C70);
  v53 = *(_DWORD *)(a1 + 1040) ^ (*(_DWORD *)(a1 + 1040) ^ (8 * Ds_InterpretBoolAttrValue(&vals, 0))) & 8;
  *(_DWORD *)(a1 + 1040) = v53;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    v54 = *(_DWORD *)(a1 + 372);
    v55 = "TRUE";
    if ( v54 != 1 || (v56 = "TRUE", (v53 & 8) == 0) )
      v56 = "FALSE";
    if ( v54 != 1 || (v53 & 4) == 0 )
      v55 = "FALSE";
    WPP_SF_ssS(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x184u,
      (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
      v55,
      (__int64)v56,
      (__int64)off_1401B6C70);
  }
  vals = ldap_get_values_lenW(pServerLdap, v2, off_1401B6C78);
  v57 = Ds_InterpretBoolAttrValue(&vals, 1);
  *(_DWORD *)(a1 + 1040) &= ~0x10u;
  *(_DWORD *)(a1 + 1040) |= 16 * v57;
  vals = ldap_get_values_lenW(pServerLdap, v2, off_1401B6C80);
  v58 = Ds_InterpretBoolAttrValue(&vals, 0);
  *(_DWORD *)(a1 + 1040) &= ~0x20u;
  *(_DWORD *)(a1 + 1040) |= 32 * v58;
  vals = ldap_get_values_lenW(pServerLdap, v2, off_1401B6CF8);
  v59 = Ds_InterpretBoolAttrValue(&vals, 0);
  *(_DWORD *)(a1 + 1040) &= ~0x2000u;
  *(_DWORD *)(a1 + 1040) |= v59 << 13;
  vals = ldap_get_values_lenW(pServerLdap, v2, off_1401B6C88);
  v60 = Ds_InterpretDwordAttrValue(&vals, 0);
  *(_DWORD *)(a1 + 1040) &= 0xFFFFFE3F;
  *(_DWORD *)(a1 + 1040) |= (v60 & 7) << 6;
  vals = ldap_get_values_lenW(pServerLdap, v2, off_1401B6C90);
  v61 = Ds_InterpretDwordAttrValue(&vals, 3u);
  *(_DWORD *)(a1 + 1040) &= 0xFFFFF1FF;
  *(_DWORD *)(a1 + 1040) |= (v61 & 7) << 9;
  vals = ldap_get_values_lenW(pServerLdap, v2, off_1401B6C98);
  v62 = Ds_InterpretBoolAttrValue(&vals, 1);
  *(_DWORD *)(a1 + 1040) &= ~0x1000u;
  *(_DWORD *)(a1 + 1040) |= v62 << 12;
  vals = ldap_get_values_lenW(pServerLdap, v2, off_1401B6CA0);
  *(_BYTE *)(a1 + 1044) = Ds_InterpretDwordAttrValue(&vals, 1u);
  vals = ldap_get_values_lenW(pServerLdap, v2, off_1401B6CA8);
  *(_BYTE *)(a1 + 1045) = Ds_InterpretDwordAttrValue(&vals, 8u);
  vals = ldap_get_values_lenW(pServerLdap, v2, off_1401B6CB0);
  *(_WORD *)(a1 + 1046) = Ds_InterpretDwordAttrValue(&vals, 0x32u);
  vals = ldap_get_values_lenW(pServerLdap, v2, off_1401B6CC8);
  *(_DWORD *)(a1 + 1056) = Ds_InterpretDwordAttrValue(&vals, 0);
  vals = ldap_get_values_lenW(pServerLdap, v2, off_1401B6CD0);
  *(_DWORD *)(a1 + 1060) = Ds_InterpretDwordAttrValue(&vals, 0);
  vals = ldap_get_values_lenW(pServerLdap, v2, off_1401B6CD8);
  *(_DWORD *)(a1 + 1064) = Ds_InterpretDwordAttrValue(&vals, 0xE10u);
  vals = ldap_get_values_lenW(pServerLdap, v2, off_1401B6CE0);
  *(_DWORD *)(a1 + 1068) = Ds_InterpretDwordAttrValue(&vals, 0xA8C0u);
  vals = ldap_get_values_lenW(pServerLdap, v2, off_1401B6D00);
  v63 = Ds_InterpretDwordAttrValue(&vals, 0x2A300u);
  v64 = *(_QWORD **)(a1 + 1048);
  *(_DWORD *)(a1 + 1072) = v63;
  Mem_Free(v64, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\ds.c", 15035);
  v65 = (char **)ldap_get_valuesW(pServerLdap, v2, off_1401B6CB8);
  v66 = (PWCHAR *)v65;
  v67 = 0i64;
  if ( v65 && *v65 )
  {
    v67 = Dns_StringCopyAllocate(*v65, 0, 1i64, 1);
    ldap_value_freeW(v66);
  }
  *(_QWORD *)(a1 + 1048) = v67;
  v68 = (CHAR **)ldap_get_valuesW(pServerLdap, v2, off_1401B6CC0);
  LODWORD(v7) = 0;
  v82 = 0i64;
  v78 = 0;
  v70 = (PWCHAR *)v68;
  v71 = 0;
  if ( v68 && *v68 )
  {
    v82 = Reg_StringToBinaryBlob(*v68, &v78);
    v27 = v82;
    ldap_value_freeW(v70);
    v71 = v78;
  }
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_s(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x185u,
      (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
      *(const char **)(a1 + 16));
  }
  DnsOls_DiscoverZoneKeymasterFqdn(a1, v69, 0, 0i64);
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_s(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x186u,
      (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
      *(const char **)(a1 + 16));
  }
  v5 = DnsOls_ReadZoneSkdsFromDirectory(a1, &v79, &v85);
  if ( !v5 )
  {
    if ( _mm_cvtsi128_si32(_mm_srli_si128((__m128i)v87, 8)) == *(_DWORD *)(a1 + 1064) )
    {
      v72 = 0;
    }
    else
    {
      v97 = *(_DWORD *)(a1 + 1064);
      v72 = 1;
    }
    if ( v85 )
    {
      v73 = *(_QWORD *)(a1 + 1136);
      v72 = 2;
      v98 = v85;
    }
    else
    {
      v73 = 0i64;
    }
    if ( v72 )
    {
      if ( *(_QWORD *)(a1 + 184) )
        v5 = Dns_SetPropsLockingAllZoneScopes(a1, 2u, (__int64)v96);
      else
        v5 = 0;
      *(_QWORD *)(a1 + 1136) = v98;
    }
    v98 = v73;
    Zone_FreeSkdList((__int64)v96);
    v94[0] = v88;
    v94[2] = v89;
    v94[1] = v87;
    v94[4] = v91;
    v94[3] = v90;
    v94[6] = v93;
    v94[5] = v92;
    v95 = v84;
    DnsOls_DetectResignChanges(a1, v71, v27, (__int64)v94, &v79, &entry);
    v4 = vals;
    if ( (_DWORD)entry )
      v82 = 0i64;
    goto LABEL_210;
  }
  v4 = vals;
LABEL_214:
  v12 = HIDWORD(v75);
LABEL_215:
  if ( *(_DWORD *)(a1 + 372) == 4 && *(_DWORD *)(a1 + 1556) == (_DWORD)v7 )
    *(_DWORD *)(a1 + 1556) = 3;
  if ( v4 )
    ldap_value_free_len(v4);
  if ( v12 )
    ldap_msgfree(res);
  Mem_Free(v82, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\ds.c", 15162);
  Zone_SetAutoCreateLocalNS(a1);
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
  {
    WPP_SF_Ds(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x187u,
      (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
      v5,
      *(_QWORD *)(a1 + 16));
  }
  return v5;
}
// 140044951: variable 'v24' is possibly undefined
// 140044984: variable 'v25' is possibly undefined
// 1400450D3: variable 'v49' is possibly undefined
// 14004567C: variable 'v69' is possibly undefined
// 140045841: variable 'v6' is possibly undefined
// 1401560E0: using guessed type __int64 __fastcall DnsAddrArray_Free();
// 1401B7EB0: using guessed type int g_ServerState;
// 1401C7D48: using guessed type int dword_1401C7D48;
// 1401EC440: using guessed type __int64 SecurityDescriptorControl_DGO;
// 1401EC628: using guessed type __int64 g_pCacheZone;
// 140044514: using guessed type __int64 var_7EC;
