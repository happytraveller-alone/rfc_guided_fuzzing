//----- (000000014013BCD8) ----------------------------------------------------
_QWORD *__fastcall std::_Tree<std::_Tmap_traits<std::wstring,CDnsPolicy *,CDnsCompareName,std::allocator<std::pair<std::wstring const,CDnsPolicy *>>,0>>::_Insert(
        __int64 a1,
        _QWORD *a2,
        char a3,
        _QWORD *a4,
        _QWORD *a5)
{
  unsigned __int64 v5; // rax
  _QWORD *v8; // rax
  __int64 v9; // rax
  _QWORD *v10; // rax
  __int64 v11; // rax
  _QWORD *v12; // rdx
  __int64 *v13; // rax
  __int64 *v14; // r9
  __int64 *v15; // rcx
  _QWORD *v16; // rcx
  __int64 v17; // rax
  _QWORD *v18; // rax
  _QWORD *v19; // rcx
  _QWORD *v20; // r9
  __int64 v21; // rax
  __int64 v22; // rax
  _QWORD *v23; // rax
  __int64 v24; // rcx
  __int64 v25; // rax
  __int64 v26; // rax
  _QWORD *v27; // rax
  __int64 v28; // rax
  _QWORD *v29; // rax
  __int64 v30; // rax
  __int64 v31; // rcx
  _QWORD *result; // rax
  __int64 v33; // rax
  __int64 v34; // rax
  __int64 v35; // rcx
  __int64 v36; // rcx

  v5 = *(_QWORD *)(a1 + 16);
  if ( v5 >= 0x555555555555554i64 )
  {
    v33 = std::_Tree_val<std::_Tmap_traits<std::wstring,CDnsPolicy_CriteriaNode *,bool (*)(std::wstring const &,std::wstring const &),std::allocator<std::pair<std::wstring const,CDnsPolicy_CriteriaNode *>>,0>>::_Myval((__int64)a5);
    v34 = std::streambuf::setbuf(v33);
    CDnsPolicy_CriteriaTree::GetCriteriaNodes(v35, v34);
    std::allocator<DnsSign::CDnsKeyPair *>::deallocate(v36, a5);
    std::_Xlength_error("map/set<T> too long");
  }
  *(_QWORD *)(a1 + 16) = v5 + 1;
  a5[1] = a4;
  v8 = *(_QWORD **)(a1 + 8);
  if ( a4 == v8 )
  {
    v8[1] = a5;
    **(_QWORD **)(a1 + 8) = a5;
    v9 = *(_QWORD *)(a1 + 8);
LABEL_8:
    *(_QWORD *)(v9 + 16) = a5;
    goto LABEL_9;
  }
  if ( a3 )
  {
    *a4 = a5;
    v10 = *(_QWORD **)(a1 + 8);
    if ( a4 == (_QWORD *)*v10 )
      *v10 = a5;
    goto LABEL_9;
  }
  a4[2] = a5;
  v9 = *(_QWORD *)(a1 + 8);
  if ( a4 == *(_QWORD **)(v9 + 16) )
    goto LABEL_8;
LABEL_9:
  v11 = a5[1];
  v12 = a5;
  while ( !*(_BYTE *)(v11 + 72) )
  {
    v13 = (__int64 *)v12[1];
    v14 = (__int64 *)v13[1];
    v15 = (__int64 *)*v14;
    if ( v13 == (__int64 *)*v14 )
    {
      v15 = (__int64 *)v14[2];
      if ( !*((_BYTE *)v15 + 72) )
        goto LABEL_30;
      if ( v12 == (_QWORD *)v13[2] )
      {
        v16 = (_QWORD *)v13[2];
        v12 = (_QWORD *)v12[1];
        v13[2] = *v16;
        if ( !*(_BYTE *)(*v16 + 73i64) )
          *(_QWORD *)(*v16 + 8i64) = v13;
        v16[1] = v13[1];
        v17 = *(_QWORD *)(a1 + 8);
        if ( v12 == *(_QWORD **)(v17 + 8) )
        {
          *(_QWORD *)(v17 + 8) = v16;
        }
        else
        {
          v18 = (_QWORD *)v12[1];
          if ( v12 == (_QWORD *)*v18 )
            *v18 = v16;
          else
            v18[2] = v16;
        }
        *v16 = v12;
        v12[1] = v16;
      }
      *(_BYTE *)(v12[1] + 72i64) = 1;
      *(_BYTE *)(*(_QWORD *)(v12[1] + 8i64) + 72i64) = 0;
      v19 = *(_QWORD **)(v12[1] + 8i64);
      v20 = (_QWORD *)*v19;
      *v19 = *(_QWORD *)(*v19 + 16i64);
      v21 = v20[2];
      if ( !*(_BYTE *)(v21 + 73) )
        *(_QWORD *)(v21 + 8) = v19;
      v20[1] = v19[1];
      v22 = *(_QWORD *)(a1 + 8);
      if ( v19 == *(_QWORD **)(v22 + 8) )
      {
        *(_QWORD *)(v22 + 8) = v20;
      }
      else
      {
        v23 = (_QWORD *)v19[1];
        if ( v19 == (_QWORD *)v23[2] )
          v23[2] = v20;
        else
          *v23 = v20;
      }
      v20[2] = v19;
    }
    else
    {
      if ( !*((_BYTE *)v15 + 72) )
      {
LABEL_30:
        *((_BYTE *)v13 + 72) = 1;
        *((_BYTE *)v15 + 72) = 1;
        *(_BYTE *)(*(_QWORD *)(v12[1] + 8i64) + 72i64) = 0;
        v12 = *(_QWORD **)(v12[1] + 8i64);
        goto LABEL_49;
      }
      if ( v12 == (_QWORD *)*v13 )
      {
        v24 = *v13;
        v12 = (_QWORD *)v12[1];
        *v13 = *(_QWORD *)(*v13 + 16);
        v25 = *(_QWORD *)(v24 + 16);
        if ( !*(_BYTE *)(v25 + 73) )
          *(_QWORD *)(v25 + 8) = v12;
        *(_QWORD *)(v24 + 8) = v12[1];
        v26 = *(_QWORD *)(a1 + 8);
        if ( v12 == *(_QWORD **)(v26 + 8) )
        {
          *(_QWORD *)(v26 + 8) = v24;
        }
        else
        {
          v27 = (_QWORD *)v12[1];
          if ( v12 == (_QWORD *)v27[2] )
            v27[2] = v24;
          else
            *v27 = v24;
        }
        *(_QWORD *)(v24 + 16) = v12;
        v12[1] = v24;
      }
      *(_BYTE *)(v12[1] + 72i64) = 1;
      *(_BYTE *)(*(_QWORD *)(v12[1] + 8i64) + 72i64) = 0;
      v19 = *(_QWORD **)(v12[1] + 8i64);
      v20 = (_QWORD *)v19[2];
      v19[2] = *v20;
      if ( !*(_BYTE *)(*v20 + 73i64) )
        *(_QWORD *)(*v20 + 8i64) = v19;
      v20[1] = v19[1];
      v28 = *(_QWORD *)(a1 + 8);
      if ( v19 == *(_QWORD **)(v28 + 8) )
      {
        *(_QWORD *)(v28 + 8) = v20;
      }
      else
      {
        v29 = (_QWORD *)v19[1];
        if ( v19 == (_QWORD *)*v29 )
          *v29 = v20;
        else
          v29[2] = v20;
      }
      *v20 = v19;
    }
    v19[1] = v20;
LABEL_49:
    v11 = v12[1];
  }
  v30 = *(_QWORD *)(a1 + 8);
  *a2 = a5;
  v31 = *(_QWORD *)(v30 + 8);
  result = a2;
  *(_BYTE *)(v31 + 72) = 1;
  return result;
}
// 14013BF5D: variable 'v35' is possibly undefined
// 14013BF67: variable 'v36' is possibly undefined
