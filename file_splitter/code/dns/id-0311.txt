//----- (0000000140027AF8) ----------------------------------------------------
__int64 __fastcall Dnssec_PerformValidationOnRRset(
        __int64 a1,
        __int64 *a2,
        __int64 *a3,
        __int64 a4,
        __int64 *a5,
        __int64 a6,
        __int64 a7,
        __int64 a8,
        int *a9)
{
  __int64 v9; // r12
  __int64 *v10; // rdi
  __int64 v11; // r14
  CDnsClientSubnetRecordsTrie *v12; // rcx
  unsigned __int16 v13; // dx
  __int64 v14; // rax
  int v15; // r12d
  int v16; // edx
  BOOL v17; // ecx
  char *v18; // rax
  __int64 v19; // rdx
  __int64 v20; // r8
  char *v21; // rax
  __int64 v22; // rdx
  __int64 v23; // r8
  unsigned int v24; // ecx
  unsigned int v25; // eax
  __int16 v26; // di
  unsigned int v27; // esi
  __int64 v28; // rcx
  __int64 v29; // r14
  char *v30; // rax
  unsigned int v32; // [rsp+60h] [rbp-A0h]
  unsigned int v33; // [rsp+64h] [rbp-9Ch] BYREF
  int v34; // [rsp+68h] [rbp-98h] BYREF
  int v35; // [rsp+6Ch] [rbp-94h] BYREF
  int v36; // [rsp+70h] [rbp-90h] BYREF
  __int64 *v37; // [rsp+78h] [rbp-88h]
  __int64 v38; // [rsp+80h] [rbp-80h]
  __int64 v39; // [rsp+88h] [rbp-78h]
  __int64 v40; // [rsp+90h] [rbp-70h] BYREF
  __int64 v41; // [rsp+98h] [rbp-68h] BYREF
  unsigned __int8 v42[272]; // [rsp+A0h] [rbp-60h] BYREF
  unsigned __int8 v43[272]; // [rsp+1B0h] [rbp+B0h] BYREF

  v9 = a1;
  v10 = a3;
  v11 = a7;
  v40 = a1;
  v37 = a5;
  v39 = a6;
  v32 = 0;
  v33 = 0;
  v36 = 0;
  v35 = 0;
  v38 = 0i64;
  if ( a9 )
    *a9 = 0;
  if ( !a3 )
  {
    v10 = a2;
    if ( !a2 )
      return v32;
  }
  if ( !a5 )
    return v32;
  if ( !(unsigned int)Dnssec_NodeToCountName(v43, v10) )
  {
    if ( a9 )
      *a9 = 123;
    v12 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x100000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      v13 = 55;
LABEL_13:
      WPP_SF_(*((_QWORD *)v12 + 7), v13, (__int64)&WPP_61593714a64130a636c4534d3ca3552a_Traceguids);
      return v32;
    }
    return v32;
  }
  if ( (*(_BYTE *)(a7 + 28) & 0x10) != 0 )
  {
    Name_CopyCountName(v42, (unsigned __int8 *)(*(unsigned __int16 *)(a7 + 14) + a7 + 56));
LABEL_16:
    if ( !a6 && *(_WORD *)(a8 + 12) == 5 )
    {
      v14 = Lookup_NsHostNode(a8 + 56, 16385, 0i64, 0i64, 0i64, *(_DWORD *)(v9 + 568), &v34, *(_QWORD *)(v9 + 6280));
      v15 = v34;
      v38 = v14;
      if ( v34 )
      {
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x100000) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
        {
          WPP_SF_D(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x39u,
            (__int64)&WPP_61593714a64130a636c4534d3ca3552a_Traceguids,
            v34);
        }
        if ( a9 )
          *a9 = v15;
        return v32;
      }
      v9 = v40;
    }
    v34 = Dns_ValidateRRset(v43, v10[8], v42, *(_WORD *)(a8 + 12), a7, a7, 0, &v33, &v36, &v41, &v40, &v35);
    v16 = v34;
    v17 = v34 == 0;
    v32 = v17;
    if ( v34 )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x100000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        v21 = Dbg_NodeName((__int64)v37);
        WPP_SF_DLDs(*((_QWORD *)WPP_GLOBAL_Control + 7), v22, v23, v34, v35, *(_WORD *)(a8 + 12), (__int64)v21);
        goto LABEL_42;
      }
    }
    else if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
           && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x100000) != 0
           && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      v18 = Dbg_NodeName((__int64)v37);
      WPP_SF_DsL(*((_QWORD *)WPP_GLOBAL_Control + 7), v19, v20, *(unsigned __int16 *)(a8 + 12), (__int64)v18);
LABEL_42:
      v16 = v34;
      v17 = v32;
    }
    if ( a9 )
      *a9 = v16;
    if ( v17 )
      _InterlockedAdd(&dword_1401C7E28, 1u);
    else
      _InterlockedAdd(&dword_1401C7E2C, 1u);
    if ( !v17 || (v24 = v33, v33 += *(_DWORD *)(v9 + 568), v33 < v24) )
      v33 = -1;
    Dbase_LockEx(0i64, 2, (__int64)"ds\\dns\\server\\server\\dnssec.c", 146);
    setValidationStatusOnRRset(v9, a8, (v32 != 0) + 2, 1u, *(_DWORD *)(v9 + 568), v33);
    v25 = v32;
    if ( v32 )
    {
      v28 = v39;
      if ( v39 )
      {
LABEL_70:
        if ( !v25 && (*(_BYTE *)(v28 + 28) & 3) != 2 )
          setValidationStatusOnRRset(v9, v28, 2u, 1u, *(_DWORD *)(v9 + 568), v33);
        goto LABEL_73;
      }
      if ( *(_WORD *)(a8 + 12) != 5 || (v29 = v38) == 0 )
      {
LABEL_73:
        Dbase_UnlockEx(0i64, 2, (__int64)"ds\\dns\\server\\server\\dnssec.c", 234);
        return v32;
      }
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x100000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        v30 = Dbg_NodeName(v38);
        WPP_SF_s(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x3Cu,
          (__int64)&WPP_61593714a64130a636c4534d3ca3552a_Traceguids,
          v30);
      }
      Dnssec_MsgAddValidatorRecordSet(v9, v29, 0, 1u, 0);
      Dnssec_MsgAddValidatorRecordSet(v9, v29, 0, 0x1Cu, 0);
    }
    else
    {
      v26 = *(_WORD *)(a8 + 12);
      v27 = *(_DWORD *)(v9 + 568);
      do
      {
        if ( *(_WORD *)(v11 + 12) > 0x2Eu )
          break;
        if ( *(_WORD *)(v11 + 12) == 46 && (v26 == 255 || ntohs(*(_WORD *)(v11 + 56)) == v26) )
          setValidationStatusOnSingleRecord(v11, 2i64, 1i64, v27, 0xFFFFFFFF);
        v11 = *(_QWORD *)v11;
      }
      while ( v11 );
    }
    v28 = v39;
    if ( v39 )
    {
      v25 = v32;
      goto LABEL_70;
    }
    goto LABEL_73;
  }
  if ( (unsigned int)Dnssec_NodeToCountName(v42, a5) )
    goto LABEL_16;
  if ( a9 )
    *a9 = 123;
  v12 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x100000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    v13 = 56;
    goto LABEL_13;
  }
  return v32;
}
// 140027DF4: variable 'v19' is possibly undefined
// 140027DF4: variable 'v20' is possibly undefined
// 140027E49: variable 'v22' is possibly undefined
// 140027E49: variable 'v23' is possibly undefined
// 1401C7E28: using guessed type int dword_1401C7E28;
// 1401C7E2C: using guessed type int dword_1401C7E2C;
