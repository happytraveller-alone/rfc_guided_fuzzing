//----- (000000014014A464) ----------------------------------------------------
const void **__fastcall MatchNegativePolicies(
        struct _DNS_MSGINFO *a1,
        __int64 a2,
        __int64 a3,
        unsigned int a4,
        unsigned int *a5)
{
  char v6; // r14
  char v8; // bp
  const void **v9; // r15
  CDnsPolicyOrder *v10; // rcx
  const void **matched; // rax
  const wchar_t *v12; // rdi
  __int64 PolicyName; // rax
  __int64 v14; // rdx
  __int64 v15; // r8
  const unsigned __int16 *v16; // r9
  const wchar_t *v17; // rdi
  void *v19[5]; // [rsp+48h] [rbp-70h] BYREF

  v6 = a3;
  v8 = 0;
  *a5 = 0;
  v9 = 0i64;
  if ( a2 )
    v10 = *(CDnsPolicyOrder **)(a2 + 8i64 * (int)a3 + 256);
  else
    v10 = (CDnsPolicyOrder *)((char *)&g_PolicyOrder + 72 * (int)a3);
  if ( v10 )
  {
    matched = (const void **)CDnsPolicyOrder::MatchNegativePolicy(v10, a1, a4, a5);
    v9 = matched;
    if ( matched )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        if ( a2 )
        {
          if ( *(_DWORD *)(a2 + 372) )
            v12 = *(const wchar_t **)(a2 + 24);
          else
            v12 = L"..Cache";
        }
        else
        {
          v12 = &LocaleName;
        }
        PolicyName = CDnsPolicy::GetPolicyName(matched, (__int64)v19);
        v16 = (const unsigned __int16 *)PolicyName;
        v8 = 1;
        if ( *(_QWORD *)(PolicyName + 24) >= 8ui64 )
          v16 = *(const unsigned __int16 **)PolicyName;
        WPP_SF_SddSd(*((_QWORD *)WPP_GLOBAL_Control + 7), v14, v15, v16, a2 != 0, v6, (__int64)v12);
      }
      if ( (v8 & 1) != 0 && v19[3] >= (void *)8 )
        operator delete(v19[0]);
    }
    else if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
           && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
           && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x82u, (__int64)&WPP_42dbba61d26d3062f1ad4e084cdc81fe_Traceguids);
    }
  }
  else if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
         && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
         && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
  {
    if ( a2 )
    {
      if ( *(_DWORD *)(a2 + 372) )
        v17 = *(const wchar_t **)(a2 + 24);
      else
        v17 = L"..Cache";
    }
    else
    {
      v17 = &LocaleName;
    }
    WPP_SF_ddSd(*((_QWORD *)WPP_GLOBAL_Control + 7), (__int64)&WPP_GLOBAL_Control, a3, a2 != 0, a3, (__int64)v17);
  }
  return v9;
}
// 14014A56E: variable 'v14' is possibly undefined
// 14014A56E: variable 'v15' is possibly undefined
// 140184CA8: using guessed type void __stdcall operator delete(void *);
