//----- (0000000140159694) ----------------------------------------------------
__int64 __fastcall Dns_ExtractGssTsigFromMessage(__int64 a1, __int64 a2, __int64 a3)
{
  const void **v4; // rbp
  void *v7; // rcx
  __int64 v8; // r14
  unsigned int v9; // ebx
  __int64 v10; // rax
  __int64 v12; // rax
  __int64 RecordStructureFromPacket; // rax
  __int64 v14; // rcx
  const void **v15; // rax
  int v16; // r9d
  unsigned __int16 v17; // r15
  void *v18; // rcx
  HLOCAL v19; // rax
  HLOCAL v20; // rbx
  const void *v21; // rdx
  char v22; // [rsp+80h] [rbp+8h] BYREF

  v4 = 0i64;
  if ( (byte_1401BA001 & 0x20) != 0 )
    WPP_SF_q(77i64, (unsigned __int16)&WPP_9b9f12dbc4273be48aea1d81c92c8dd1_Traceguids, a2);
  v7 = *(void **)(a1 + 56);
  if ( v7 || (v8 = a1 + 72, *(_QWORD *)(a1 + 72)) )
  {
    Dns_Free(v7);
    v8 = a1 + 72;
    DnsApiFree(*(_QWORD *)(a1 + 72));
    *(_QWORD *)(a1 + 56) = 0i64;
    *(_QWORD *)(a1 + 72) = 0i64;
  }
  *(_QWORD *)(a1 + 40) = a2;
  *(_QWORD *)(a1 + 48) = a3;
  if ( !*(_WORD *)(a2 + 10) )
    goto LABEL_7;
  v10 = Dns_SkipToRecord(a2, a3, 0xFFFFFFFFi64);
  if ( !v10 )
    goto LABEL_9;
  *(_QWORD *)(a1 + 80) = v10;
  v12 = Dns_ReadPacketNameAllocate(v8, &v22, 0i64, 0i64, v10, a2, a3);
  if ( !v12 )
  {
    if ( (byte_1401BA001 & 0x20) != 0 )
      WPP_SF_q(78i64, (unsigned __int16)&WPP_9b9f12dbc4273be48aea1d81c92c8dd1_Traceguids, 0i64);
    goto LABEL_9;
  }
  RecordStructureFromPacket = Dns_ReadRecordStructureFromPacket(v12, a3, a1 + 80);
  if ( !RecordStructureFromPacket )
  {
    if ( (byte_1401BA001 & 0x20) == 0 )
    {
LABEL_9:
      v9 = 9001;
      goto LABEL_10;
    }
    v14 = 79i64;
LABEL_21:
    WPP_SF_q(v14, (unsigned __int16)&WPP_9b9f12dbc4273be48aea1d81c92c8dd1_Traceguids, a2);
    goto LABEL_9;
  }
  if ( *(_WORD *)(a1 + 112) != 250 )
    goto LABEL_7;
  if ( RecordStructureFromPacket != a3 && (byte_1401BA001 & 0x20) != 0 )
    WPP_SF_Dd(
      80i64,
      (unsigned __int16)&WPP_9b9f12dbc4273be48aea1d81c92c8dd1_Traceguids,
      (unsigned int)(RecordStructureFromPacket - a2),
      a3 - a2);
  v15 = (const void **)Tsig_RecordRead(0i64, 2i64, 0i64, *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104));
  v4 = v15;
  if ( !v15 )
  {
    if ( (byte_1401BA003 & 0x10) == 0 )
      goto LABEL_9;
    v14 = 81i64;
    goto LABEL_21;
  }
  *(_QWORD *)(a1 + 56) = v15;
  if ( !*((_WORD *)v15 + 38) )
  {
    v17 = *((_WORD *)v15 + 39);
    if ( *(char *)(a2 + 2) >= 0 )
    {
      v18 = *(void **)(a1 + 128);
      if ( v18 )
      {
        Dns_Free(v18);
        *(_QWORD *)(a1 + 128) = 0i64;
      }
      v19 = Dns_AllocZero(v17);
      v20 = v19;
      if ( !v19 )
      {
        v9 = 14;
        goto LABEL_10;
      }
      memcpy_0(v19, v4[6], v17);
      *(_QWORD *)(a1 + 128) = v20;
      *(_WORD *)(a1 + 136) = v17;
      goto LABEL_42;
    }
    v21 = *(const void **)(a1 + 128);
    if ( !v21 || *(_WORD *)(a1 + 136) != v17 || memcmp_0(v15[6], v21, v17) )
    {
LABEL_42:
      v9 = 0;
      goto LABEL_43;
    }
LABEL_7:
    v9 = 9505;
    goto LABEL_45;
  }
  if ( (byte_1401BA001 & 0x20) != 0 )
    WPP_SF_D(
      82i64,
      (unsigned __int16)&WPP_9b9f12dbc4273be48aea1d81c92c8dd1_Traceguids,
      *((unsigned __int16 *)v15 + 38),
      v16);
  v9 = *((unsigned __int16 *)v4 + 38) + 9000;
LABEL_43:
  if ( !v9 )
    goto LABEL_11;
  if ( v9 != 9505 )
  {
LABEL_10:
    ++SecTsigFormerr;
    goto LABEL_11;
  }
LABEL_45:
  ++SecTsigEcho;
LABEL_11:
  if ( (byte_1401BA001 & 0x20) != 0 )
    WPP_SF_dqdqDqd((__int64)v4[6], *((unsigned __int16 *)v4 + 37), v9, a2);
  return v9;
}
// 1401598B7: variable 'v16' is possibly undefined
// 140183D60: using guessed type __int64 __fastcall DnsApiFree(_QWORD);
// 140183D88: using guessed type __int64 __fastcall Dns_ReadRecordStructureFromPacket(_QWORD, _QWORD, _QWORD);
// 140183DA8: using guessed type __int64 __fastcall Dns_SkipToRecord(_QWORD, _QWORD, _QWORD);
// 140183DC8: using guessed type __int64 __fastcall Dns_ReadPacketNameAllocate(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
// 1401B9E0C: using guessed type int SecTsigEcho;
// 1401B9E10: using guessed type int SecTsigFormerr;
// 1401BA001: using guessed type char byte_1401BA001;
// 1401BA003: using guessed type char byte_1401BA003;
