//----- (0000000140155AC0) ----------------------------------------------------
__int64 __fastcall Dns_FindVirtualInstance(__int64 a1, _QWORD *a2)
{
  __int64 *v2; // rsi
  unsigned int v3; // edi
  __int64 v5; // rcx
  __int64 **v6; // rax
  __int64 v7; // rcx
  __int64 *v8; // rbx
  unsigned int v10; // [rsp+40h] [rbp+8h] BYREF
  __int64 v11; // [rsp+48h] [rbp+10h] BYREF
  __int64 *v12; // [rsp+50h] [rbp+18h] BYREF

  v2 = (__int64 *)g_pVirtualizationManager;
  v3 = 0;
  v11 = a1;
  if ( a2 )
    *a2 = 0i64;
  v5 = v2[1];
  v10 = -1;
  if ( (unsigned int)acquireRead(v5, 0x2710u, &v10) == -1 )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x1Eu, (__int64)&WPP_4801f8127c993977e52bcb676d808450_Traceguids);
    }
    return 9923;
  }
  else
  {
    v6 = std::_Tree<std::_Tmap_traits<unsigned short *,_DnsServerScopeInfo_ *,bool (*)(unsigned short *,unsigned short *),std::allocator<std::pair<unsigned short * const,_DnsServerScopeInfo_ *>>,0>>::find(
           *v2,
           &v12,
           &v11);
    v10 = -1;
    v7 = v2[1];
    v8 = *v6;
    if ( *v6 == *(__int64 **)(*v2 + 8) )
    {
      v3 = 9922;
      releaseRead(v7, &v10, 1);
    }
    else
    {
      releaseRead(v7, &v10, 1);
      *a2 = v8[4];
    }
  }
  return v3;
}
// 1401B9270: using guessed type struct CDnsVirtualizationManager *g_pVirtualizationManager;
