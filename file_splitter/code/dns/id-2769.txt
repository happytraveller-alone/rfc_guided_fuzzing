//----- (0000000140146510) ----------------------------------------------------
__int64 __fastcall CDNSPolicyCriteriaSubnetRecord::MatchCriteria(_QWORD *a1, __int64 a2, int a3, int *a4)
{
  int v5; // r13d
  _QWORD *v8; // rax
  int v9; // esi
  unsigned int v10; // ebx
  int v11; // ebp
  int Node; // eax
  int v13; // edi
  _QWORD *v14; // rdx
  _QWORD *v15; // rcx
  _QWORD *i; // rax
  _QWORD *v17; // r9
  unsigned __int64 v18; // r13
  unsigned __int64 v19; // r14
  _WORD *v20; // r10
  __int64 v21; // r11
  int v22; // r8d
  __int64 v23; // r9
  int v24; // r8d
  _QWORD *v25; // rcx
  _QWORD *v26; // rax
  _QWORD *j; // rdx
  _QWORD *v28; // r9
  unsigned __int64 v29; // r13
  unsigned __int64 v30; // r14
  _WORD *v31; // r10
  __int64 v32; // r11
  int v33; // r8d
  __int64 v34; // r9
  int v35; // r8d
  _QWORD **v37; // [rsp+38h] [rbp-60h] BYREF
  __int64 v38; // [rsp+40h] [rbp-58h]
  char pExceptionObject[32]; // [rsp+50h] [rbp-48h] BYREF

  v5 = a3;
  v38 = 0i64;
  v8 = operator new(0x38ui64);
  if ( !v8 )
  {
    std::bad_alloc::bad_alloc((std::bad_alloc *)pExceptionObject, 0i64);
    CxxThrowException_0(pExceptionObject, (_ThrowInfo *)&TI2_AVbad_alloc_std__);
  }
  v37 = (_QWORD **)v8;
  *v8 = v8;
  v8[1] = v8;
  v9 = 0;
  v10 = 1;
  v11 = 1;
  Node = CDnsClientSubnetRecordsTrie::findNode((__int64)g_DnsClientSubnetTrie, a2 + 64, 0i64, 1, (__int64)&v37);
  v13 = Node;
  if ( Node && Node != 1168 )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      WPP_SF_D(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x4Cu,
        (__int64)&WPP_42dbba61d26d3062f1ad4e084cdc81fe_Traceguids,
        Node);
    }
    *a4 = v13;
    goto LABEL_9;
  }
  v14 = (_QWORD *)a1[8];
  v15 = (_QWORD *)*v14;
  if ( (_QWORD *)*v14 != v14 )
  {
    do
    {
      for ( i = *v37; i != v37; i = (_QWORD *)*i )
      {
        v17 = i + 2;
        v18 = i[4];
        if ( i[5] >= 8ui64 )
          v17 = (_QWORD *)*v17;
        v19 = v15[4];
        if ( v15[5] < 8ui64 )
          v20 = v15 + 2;
        else
          v20 = (_WORD *)v15[2];
        v21 = i[4];
        if ( v19 < v18 )
          v21 = v15[4];
        if ( v21 )
        {
          while ( *v20 == *(_WORD *)v17 )
          {
            ++v20;
            v17 = (_QWORD *)((char *)v17 + 2);
            if ( !--v21 )
              goto LABEL_24;
          }
          v22 = *v20 < *(_WORD *)v17 ? -1 : 1;
        }
        else
        {
LABEL_24:
          v22 = 0;
        }
        v23 = v22;
        v24 = v19 != i[4];
        if ( v19 < v18 )
          v24 = -1;
        if ( v23 )
          v24 = v23;
        if ( !v24 )
        {
          v9 = 1;
          break;
        }
      }
      if ( v9 == 1 )
        break;
      v15 = (_QWORD *)*v15;
    }
    while ( v15 != v14 );
    v5 = a3;
  }
  if ( v5 != 1 || v9 != 1 )
  {
    v25 = (_QWORD *)a1[11];
    v26 = (_QWORD *)*v25;
    if ( (_QWORD *)*v25 != v25 )
    {
      do
      {
        for ( j = *v37; j != v37; j = (_QWORD *)*j )
        {
          v28 = j + 2;
          v29 = j[4];
          if ( j[5] >= 8ui64 )
            v28 = (_QWORD *)*v28;
          v30 = v26[4];
          if ( v26[5] < 8ui64 )
            v31 = v26 + 2;
          else
            v31 = (_WORD *)v26[2];
          v32 = j[4];
          if ( v30 < v29 )
            v32 = v26[4];
          if ( v32 )
          {
            while ( *v31 == *(_WORD *)v28 )
            {
              ++v31;
              v28 = (_QWORD *)((char *)v28 + 2);
              if ( !--v32 )
                goto LABEL_53;
            }
            v33 = *v31 < *(_WORD *)v28 ? -1 : 1;
          }
          else
          {
LABEL_53:
            v33 = 0;
          }
          v34 = v33;
          v35 = v30 != j[4];
          if ( v30 < v29 )
            v35 = -1;
          if ( v34 )
            v35 = v34;
          if ( !v35 )
            v11 = 0;
        }
        if ( !v11 )
          break;
        v26 = (_QWORD *)*v26;
      }
      while ( v26 != v25 );
      v5 = a3;
    }
    if ( a1[9] )
    {
      if ( a1[12] )
      {
        if ( v5 )
        {
          if ( v11 )
            goto LABEL_75;
        }
        else if ( !v11 )
        {
LABEL_9:
          v10 = 0;
          goto LABEL_75;
        }
        if ( !v9 )
          goto LABEL_9;
      }
      else
      {
        v10 = v9;
      }
    }
    else
    {
      v10 = v11;
    }
  }
LABEL_75:
  if ( v38 )
    std::list<std::wstring>::clear((__int64)&v37);
  std::list<std::wstring>::clear((__int64)&v37);
  operator delete(v37);
  return v10;
}
// 1401467B6: conditional instruction was optimized away because rax.8!=0
// 140184CA8: using guessed type void __stdcall operator delete(void *);
// 1401B9248: using guessed type struct CDnsClientSubnetRecordsTrie *g_DnsClientSubnetTrie;
