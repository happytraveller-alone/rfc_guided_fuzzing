//----- (000000014009F748) ----------------------------------------------------
void **__fastcall Sock_AddNewRangeToRangeArray(
        unsigned __int16 a1,
        __int16 a2,
        __int64 a3,
        unsigned __int16 a4,
        unsigned __int16 *a5)
{
  void **result; // rax
  unsigned __int16 v9; // si
  __int64 i; // rbx
  unsigned __int16 v11; // si
  __int64 v12; // rbp
  int v13; // ecx
  unsigned int j; // edi
  unsigned __int16 *v15; // rdx
  int v16; // r9d
  void *retaddr; // [rsp+38h] [rbp+0h] BYREF

  result = &retaddr;
  v9 = *a5;
  if ( *a5 < a4 )
  {
    for ( i = 0i64; (unsigned int)i < v9; i = (unsigned int)(i + 1) )
    {
      if ( a1 < *(_WORD *)(a3 + 8 * i) )
        break;
    }
    if ( (unsigned int)i < v9 )
      result = (void **)memmove(
                          (void *)(a3 + 8i64 * (unsigned int)(i + 1)),
                          (const void *)(a3 + 8 * i),
                          8i64 * (v9 - (unsigned int)i));
    v11 = v9 + 1;
    *(_WORD *)(a3 + 8 * i) = a1;
    *(_WORD *)(a3 + 8 * i + 2) = a2;
    if ( (_DWORD)i )
      LODWORD(i) = i - 1;
    v12 = (unsigned int)(i + 1);
    v13 = v11;
    for ( j = v12; j < v11; v13 = v11 )
    {
      v15 = (unsigned __int16 *)(a3 + 8i64 * j);
      v16 = *(unsigned __int16 *)(a3 + 8i64 * (unsigned int)i + 2);
      result = (void **)((unsigned int)*v15 - 1);
      if ( v16 < (int)result )
      {
        if ( j > (unsigned int)v12 )
        {
          result = (void **)memmove((void *)(a3 + 8 * v12), v15, 8i64 * (v13 - j));
          v11 += i - j + 1;
        }
        LODWORD(i) = v12;
        v12 = (unsigned int)(v12 + 1);
        j = v12;
      }
      else
      {
        result = (void **)v15[1];
        if ( (unsigned __int16)result > (unsigned __int16)v16 )
          *(_WORD *)(a3 + 8i64 * (unsigned int)i + 2) = (_WORD)result;
        ++j;
      }
    }
    *a5 = i + 1;
  }
  return result;
}
