//----- (00000001401458F0) ----------------------------------------------------
__int64 __fastcall CDNSPolicyCriteriaFqdn::MatchCriteria(_QWORD *a1, __int64 a2, int a3)
{
  unsigned int v3; // edi
  unsigned int v6; // r15d
  int v7; // esi
  unsigned int v8; // r14d
  __int64 v9; // r8
  CDnsClientSubnetRecordsTrie *v10; // rcx
  char **v11; // rax
  char *v12; // rbx
  char *v13; // rsi
  _QWORD *v14; // rbx
  unsigned __int16 v15; // dx
  char **v16; // rax
  char *v17; // rbx
  char *v18; // rsi
  _QWORD *v19; // rbx
  _QWORD *v20; // rbx
  __int64 result; // rax
  unsigned int v22; // [rsp+38h] [rbp-D0h]
  __int16 v24[128]; // [rsp+48h] [rbp-C0h] BYREF

  v3 = 0;
  v22 = 0;
  v6 = 1;
  v7 = 0;
  v8 = 1;
  memset_0(v24, 0, 0xFFui64);
  if ( !(unsigned int)Name_ConvertLookupNameToDottedName(v24, *(unsigned __int16 **)(a2 + 1400)) )
  {
    v10 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
    {
      if ( (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0 && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x41u, (__int64)&WPP_42dbba61d26d3062f1ad4e084cdc81fe_Traceguids);
        v10 = WPP_GLOBAL_Control;
      }
      goto LABEL_57;
    }
    goto LABEL_61;
  }
  v11 = (char **)a1[8];
  v12 = *v11;
  if ( *v11 == (char *)v11 )
  {
LABEL_24:
    v10 = WPP_GLOBAL_Control;
    goto LABEL_25;
  }
  while ( 1 )
  {
    v13 = v12 + 16;
    if ( std::string::find(v12 + 16, "*.", v9, 2ui64) )
      break;
    if ( *((_QWORD *)v12 + 5) >= 0x10ui64 )
      v13 = *(char **)v13;
    if ( (unsigned int)MatchDnsDomain((const char *)v24, v13 + 2) )
    {
      v7 = 1;
      v22 = 1;
      v10 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        v14 = v12 + 16;
        if ( v14[3] >= 0x10ui64 )
          v14 = (_QWORD *)*v14;
        v15 = 66;
LABEL_17:
        WPP_SF_ss(
          *((_QWORD *)v10 + 7),
          v15,
          (__int64)&WPP_42dbba61d26d3062f1ad4e084cdc81fe_Traceguids,
          (const char *)v24,
          (__int64)v14);
        goto LABEL_24;
      }
      goto LABEL_25;
    }
LABEL_22:
    v12 = *(char **)v12;
    if ( v12 == (char *)a1[8] )
    {
      v7 = 0;
      goto LABEL_24;
    }
  }
  if ( *((_QWORD *)v12 + 5) >= 0x10ui64 )
    v13 = *(char **)v13;
  if ( v13 != (char *)v24 && (unsigned int)Dns_NameCompare_UTF8((WCHAR *)v13, (WCHAR *)v24) != 1 )
    goto LABEL_22;
  v7 = 1;
  v22 = 1;
  v10 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    v14 = v12 + 16;
    if ( v14[3] >= 0x10ui64 )
      v14 = (_QWORD *)*v14;
    v15 = 67;
    goto LABEL_17;
  }
LABEL_25:
  v16 = (char **)a1[11];
  v17 = *v16;
  if ( *v16 == (char *)v16 )
    goto LABEL_57;
  while ( 2 )
  {
    v18 = v17 + 16;
    if ( !std::string::find(v17 + 16, "*.", v9, 2ui64) )
    {
      if ( *((_QWORD *)v17 + 5) >= 0x10ui64 )
        v18 = *(char **)v18;
      if ( (unsigned int)MatchDnsDomain((const char *)v24, v18 + 2) )
      {
        v10 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          v19 = v17 + 16;
          if ( v19[3] >= 0x10ui64 )
            v19 = (_QWORD *)*v19;
          WPP_SF_ss(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x44u,
            (__int64)&WPP_42dbba61d26d3062f1ad4e084cdc81fe_Traceguids,
            (const char *)v24,
            (__int64)v19);
          v10 = WPP_GLOBAL_Control;
        }
        v8 = 0;
        goto LABEL_56;
      }
      goto LABEL_47;
    }
    if ( *((_QWORD *)v17 + 5) >= 0x10ui64 )
      v18 = *(char **)v18;
    if ( v18 != (char *)v24 && (unsigned int)Dns_NameCompare_UTF8((WCHAR *)v18, (WCHAR *)v24) != 1 )
    {
LABEL_47:
      v17 = *(char **)v17;
      if ( v17 == (char *)a1[11] )
        goto LABEL_55;
      continue;
    }
    break;
  }
  v8 = 0;
  v10 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
    goto LABEL_61;
  if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) != 0 && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    v20 = v17 + 16;
    if ( v20[3] >= 0x10ui64 )
      v20 = (_QWORD *)*v20;
    WPP_SF_ss(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x45u,
      (__int64)&WPP_42dbba61d26d3062f1ad4e084cdc81fe_Traceguids,
      (const char *)v24,
      (__int64)v20);
LABEL_55:
    v10 = WPP_GLOBAL_Control;
  }
LABEL_56:
  v7 = v22;
LABEL_57:
  if ( v10 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)v10 + 68) & 2) != 0
    && *((_BYTE *)v10 + 65) >= 4u )
  {
    WPP_SF_Dd(*((_QWORD *)v10 + 7), 0x46u, (__int64)&WPP_42dbba61d26d3062f1ad4e084cdc81fe_Traceguids, v7);
  }
LABEL_61:
  if ( !a1[9] )
    return v8;
  if ( !a1[12] )
  {
    if ( a1[9] )
    {
      result = v22;
      if ( !a1[12] )
        return result;
    }
    return v8;
  }
  if ( a3 )
  {
    if ( v8 || v22 )
      return 1;
    return v3;
  }
  else
  {
    if ( !v8 || !v22 )
      return 0;
    return v6;
  }
}
// 1401459D7: variable 'v9' is possibly undefined
// 1401458F0: using guessed type WCHAR var_130[128];
