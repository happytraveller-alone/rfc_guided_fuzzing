//----- (0000000140141308) ----------------------------------------------------
__int64 InitializePolicyManager()
{
  struct CDnsPolicyManager *v0; // rcx
  __int64 (**v1)(void); // rax
  unsigned int v2; // edi
  CDnsClientSubnetRecordsTrie *v3; // rcx
  unsigned __int16 v4; // dx
  _QWORD *v5; // rbx
  CDnsClientSubnetRecordsTrie *v6; // rcx

  v0 = (struct CDnsPolicyManager *)operator new(8ui64, (const struct std::nothrow_t *)&std::nothrow);
  if ( v0 )
    *(_QWORD *)v0 = &CDnsPolicyManager::`vftable';
  else
    v0 = 0i64;
  v1 = *(__int64 (***)(void))v0;
  g_DnsPolicyManager = v0;
  v2 = (*v1)();
  if ( !v2 )
  {
    if ( g_DnsPolicyManager )
    {
      v5 = operator new(0x10ui64, (const struct std::nothrow_t *)&std::nothrow);
      if ( v5 )
      {
        *v5 = 0i64;
        v5[1] = 0i64;
        *((_DWORD *)v5 + 2) = 0;
        *((_BYTE *)v5 + 12) = 0;
      }
      else
      {
        v5 = 0i64;
      }
      g_DnsClientSubnetTrie = (struct CDnsClientSubnetRecordsTrie *)v5;
      if ( v5 )
      {
        *((_DWORD *)v5 + 2) = (int)pow_0(2.0, 31.0);
        *((_BYTE *)v5 + 12) = (int)pow_0(2.0, 7.0);
        *v5 = CDnsClientSubnetRecordsTrie::getNode(v6);
        return v2;
      }
      v3 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
      {
        return 14;
      }
      v4 = 11;
    }
    else
    {
      v3 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400000) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
      {
        return 14;
      }
      v4 = 10;
    }
    WPP_SF_(*((_QWORD *)v3 + 7), v4, (__int64)&WPP_e9e03abdf878341bebcbaddcf41aedc1_Traceguids);
    return 14;
  }
  return v2;
}
// 140141438: variable 'v6' is possibly undefined
// 140171DB8: using guessed type void *CDnsPolicyManager::`vftable';
// 140185140: using guessed type __int64 (__fastcall *_guard_dispatch_icall_fptr)(_QWORD, _QWORD);
// 1401B91C0: using guessed type struct CDnsPolicyManager *g_DnsPolicyManager;
// 1401B9248: using guessed type struct CDnsClientSubnetRecordsTrie *g_DnsClientSubnetTrie;
