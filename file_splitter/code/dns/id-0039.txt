//----- (0000000140002018) ----------------------------------------------------
__int64 __fastcall scavengeNode(__int64 a1, _DWORD *a2)
{
  char *v4; // rax
  __int64 v5; // r9
  __int64 i; // rax
  __int64 v7; // rbx
  __int64 *v8; // rsi
  CDnsClientSubnetRecordsTrie *v9; // rax
  unsigned int v10; // ecx
  char *v11; // rax
  const char *v12; // r9
  char *v13; // rax
  unsigned int v15; // [rsp+48h] [rbp+10h] BYREF

  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
  {
    v4 = Dbg_NodeName(a1);
    WPP_SF_sd(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x12u, (__int64)&WPP_7b1a01b88f443306118dfd5b288785fb_Traceguids, v4);
  }
  ++a2[7];
  if ( g_fDnsThreadAlert && g_fDnsServiceExit == 1 )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 1) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x13u, (__int64)&WPP_7b1a01b88f443306118dfd5b288785fb_Traceguids);
    }
    ExitThread(0);
  }
  if ( g_bAbortScavenging )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x14u, (__int64)&WPP_7b1a01b88f443306118dfd5b288785fb_Traceguids);
    }
    return 0i64;
  }
  v5 = *(_QWORD *)a2;
  if ( *(int *)(*(_QWORD *)a2 + 432i64) > 0 || *(_QWORD *)(v5 + 48) != *((_QWORD *)a2 + 1) )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_s(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x15u,
        (__int64)&WPP_7b1a01b88f443306118dfd5b288785fb_Traceguids,
        *(const char **)(v5 + 16));
    }
    return 0i64;
  }
  if ( *(_QWORD *)(a1 + 32) )
  {
    for ( i = NTree_FirstChild(a1); ; i = NTree_NextSiblingWithLocking(v7) )
    {
      v7 = i;
      if ( !i )
        break;
      if ( !(unsigned int)scavengeNode(i, a2) )
        return 0i64;
    }
  }
  if ( *(_QWORD *)(a1 + 64) && (*(_BYTE *)(a1 + 92) & 1) == 0 )
  {
    v15 = -1;
    acquireRead(DbaseLock, 0xFFFFFFFF, &v15);
    v8 = *(__int64 **)(a1 + 64);
    if ( v8 )
    {
      v9 = WPP_GLOBAL_Control;
      do
      {
        if ( *((char *)v8 + 10) >= 0 )
        {
          v10 = *((_DWORD *)v8 + 6);
          if ( v10 && v10 < a2[4] )
            break;
          if ( v9 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)v9 + 17) & 0x200) != 0
            && *((_BYTE *)v9 + 65) >= 5u )
          {
            v11 = Dbg_NodeName(a1);
            v12 = "non-expired";
            if ( !*((_DWORD *)v8 + 6) )
              v12 = "static";
            WPP_SF_sds(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x16u,
              (__int64)&WPP_7b1a01b88f443306118dfd5b288785fb_Traceguids,
              v12,
              *((_WORD *)v8 + 6),
              (__int64)v11);
            v9 = WPP_GLOBAL_Control;
          }
        }
        v8 = (__int64 *)*v8;
      }
      while ( v8 );
    }
    v15 = -1;
    releaseRead(DbaseLock, &v15, 1);
    if ( v8 )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        v13 = Dbg_NodeName(a1);
        WPP_SF_sdD(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x17u,
          (__int64)&WPP_7b1a01b88f443306118dfd5b288785fb_Traceguids,
          v13);
      }
      Up_CreateAppendUpdate((__int64)(a2 + 10), a1, 0i64, 62451, 0i64);
      ++a2[8];
      executeScavengeUpdate(a2, 0);
    }
  }
  return 1i64;
}
// 1401B7EB4: using guessed type int g_fDnsThreadAlert;
// 1401B8C10: using guessed type int g_bAbortScavenging;
// 1401B9A40: using guessed type int g_fDnsServiceExit;
// 1401EC5E8: using guessed type __int64 DbaseLock;
