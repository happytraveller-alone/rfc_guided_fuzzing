//----- (00000001400F3370) ----------------------------------------------------
__int64 __fastcall std::_Tree<std::_Tmap_traits<_lookup_name *,_DnsTreeNode *,DnsSign::CLookupNameCompare,std::allocator<std::pair<_lookup_name * const,_DnsTreeNode *>>,0>>::insert<std::pair<_lookup_name *,_DnsTreeNode *>>(
        __int64 a1,
        __int64 a2,
        _QWORD *a3)
{
  unsigned __int16 **v5; // rax
  __int64 v6; // rcx
  _QWORD *v7; // rdi
  unsigned __int16 **v8; // rbp
  bool v9; // r14
  __int64 *v10; // rbx
  _QWORD *v11; // rbx
  char v12; // r8
  _QWORD *v13; // rax
  __int64 v14; // rax
  __int64 i; // rax
  __int64 v17; // [rsp+50h] [rbp+8h] BYREF

  v5 = (unsigned __int16 **)std::_Tree_val<std::_Tmap_traits<unsigned short *,_virtualization_info_ *,bool (*)(unsigned short *,unsigned short *),std::allocator<std::pair<unsigned short * const,_virtualization_info_ *>>,0>>::_Buynode<std::pair<unsigned short *,_virtualization_info_ *>>(
                              a1,
                              a3);
  v7 = *(_QWORD **)(a1 + 8);
  v8 = v5;
  v9 = 1;
  v10 = (__int64 *)v7[1];
  while ( !*((_BYTE *)v10 + 41) )
  {
    v7 = v10;
    v9 = DnsSign::CLookupNameCompare::operator()(v6, v8[3], (unsigned __int16 *)v10[3]);
    if ( v9 )
      v10 = (__int64 *)*v10;
    else
      v10 = (__int64 *)v10[2];
  }
  v11 = v7;
  if ( v9 )
  {
    if ( v7 == **(_QWORD ***)(a1 + 8) )
    {
      v12 = 1;
      goto LABEL_9;
    }
    if ( *((_BYTE *)v7 + 41) )
    {
      v11 = (_QWORD *)v7[2];
    }
    else
    {
      v14 = *v7;
      if ( *(_BYTE *)(*v7 + 41i64) )
      {
        for ( i = v7[1]; !*(_BYTE *)(i + 41) && v11 == *(_QWORD **)i; i = *(_QWORD *)(i + 8) )
          v11 = (_QWORD *)i;
        if ( !*((_BYTE *)v11 + 41) )
          v11 = (_QWORD *)i;
      }
      else
      {
        do
        {
          v11 = (_QWORD *)v14;
          v14 = *(_QWORD *)(v14 + 16);
        }
        while ( !*(_BYTE *)(v14 + 41) );
      }
    }
  }
  if ( !DnsSign::CLookupNameCompare::operator()(v6, (unsigned __int16 *)v11[3], v8[3]) )
  {
    operator delete(v8);
    *(_QWORD *)a2 = v11;
    *(_BYTE *)(a2 + 8) = 0;
    return a2;
  }
  v12 = v9;
LABEL_9:
  v13 = std::_Tree<std::_Tmap_traits<_lookup_name *,_DnsTreeNode *,DnsSign::CLookupNameCompare,std::allocator<std::pair<_lookup_name * const,_DnsTreeNode *>>,0>>::_Insert(
          a1,
          &v17,
          v12,
          v7,
          v8);
  *(_BYTE *)(a2 + 8) = 1;
  *(_QWORD *)a2 = *v13;
  return a2;
}
// 1400F33B1: variable 'v6' is possibly undefined
// 140184CA8: using guessed type void __stdcall operator delete(void *);
