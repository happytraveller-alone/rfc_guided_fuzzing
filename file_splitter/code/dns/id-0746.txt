//----- (0000000140067CA8) ----------------------------------------------------
__int64 __fastcall examineDSCacheUpdateResponse(struct _zone_info *a1, __int64 a2, u_long *a3)
{
  unsigned int v4; // esi
  int v5; // r12d
  __int64 v7; // r15
  __int64 NextRecord; // rbx
  __int64 v9; // rbp
  DnsSign::CDnsKeyPair *v10; // rcx
  struct _Dbase_Record *DnskeyRecordFromKeyPair; // rax
  DnsSign *v12; // rbp
  unsigned __int16 v13; // dx
  u_short v14; // dx
  u_short v15; // ax
  unsigned __int64 v16; // rdx
  int v17; // ecx
  struct _Dbase_Record *DsFromDnskey; // rax
  __int64 v19; // r12
  u_long v20; // eax
  bool v21; // zf
  int v22; // eax
  int v23; // eax
  int v25[18]; // [rsp+40h] [rbp-48h] BYREF
  unsigned int v26; // [rsp+90h] [rbp+8h] BYREF
  int v27; // [rsp+98h] [rbp+10h]
  u_long *v28; // [rsp+A0h] [rbp+18h] BYREF

  v28 = a3;
  v4 = 0;
  v27 = 0;
  v5 = 0;
  *a3 = 0;
  v26 = -1;
  acquireRead(DbaseLock, 0xFFFFFFFF, &v26);
  v7 = *((_QWORD *)a1 + 141);
  if ( (*(_BYTE *)(a2 + 92) & 1) != 0 )
  {
    NextRecord = *(_QWORD *)(a2 + 64);
    if ( !NextRecord )
    {
LABEL_40:
      v21 = *(_QWORD *)(a2 + 56) == 0i64;
LABEL_36:
      if ( !v21 )
      {
        v22 = *((_DWORD *)a1 + 260);
        if ( (v22 & 0x2000) != 0 )
        {
          v5 = 1;
          *((_DWORD *)a1 + 260) = v22 & 0xFFFFDFFF;
        }
        goto LABEL_39;
      }
LABEL_41:
      if ( (*((_DWORD *)a1 + 260) & 0x2000) != 0 )
      {
        if ( *(_DWORD *)(v7 + 112) == -1 )
          v4 = 2;
        goto LABEL_46;
      }
      if ( ++*(_DWORD *)(v7 + 112) <= 0xFu )
        goto LABEL_46;
LABEL_39:
      v4 = 1;
      goto LABEL_46;
    }
    if ( *(_WORD *)(NextRecord + 12) != 0xF0F0 )
      NextRecord = 0i64;
  }
  else
  {
    NextRecord = RR_FindNextRecordEx(a2, 0, 0x2Bu, 0i64, 0, 0);
  }
  if ( !NextRecord )
    goto LABEL_40;
  if ( *(_WORD *)(NextRecord + 12) == 0xF0F0 || *(char *)(NextRecord + 10) < 0 )
  {
    v21 = (*(_DWORD *)(NextRecord + 28) & 3) == 2;
    goto LABEL_36;
  }
  v9 = v7 + 168;
  if ( *(_QWORD *)(v7 + 192) )
    v9 = v7 + 192;
  if ( !v9 )
    goto LABEL_41;
  DnsOls_RefreshDnsKeyPairObject((WCHAR *)a1, (struct _dnsskd *)v7, (struct _dnsskdkey *)v9, 0);
  v10 = *(DnsSign::CDnsKeyPair **)(v9 + 8);
  if ( !v10 )
    goto LABEL_41;
  DnskeyRecordFromKeyPair = DnsOls_GetDnskeyRecordFromKeyPair(v10, 0, 0i64);
  v12 = DnskeyRecordFromKeyPair;
  if ( !DnskeyRecordFromKeyPair )
    goto LABEL_41;
  if ( *((_WORD *)DnskeyRecordFromKeyPair + 6) == 48 && (v13 = *((_WORD *)DnskeyRecordFromKeyPair + 7), v13 > 4u) )
    v14 = RR_CalculateDnsKeyTagEx((unsigned __int8 *)DnskeyRecordFromKeyPair + 56, v13);
  else
    v14 = 0;
  v15 = ntohs(v14);
  v16 = v15;
  LOWORD(v26) = v15;
  while ( *(_WORD *)(NextRecord + 12) == 43 )
  {
    if ( (*(_DWORD *)(NextRecord + 28) & 3) != 2 )
    {
      v17 = *((_DWORD *)a1 + 260);
      if ( (v17 & 0x2000) == 0 )
      {
        v27 = 1;
        *((_DWORD *)a1 + 260) = v17 | 0x2000;
      }
      if ( *(_WORD *)(NextRecord + 56) == (_WORD)v16 )
      {
        LOBYTE(v16) = *(_BYTE *)(NextRecord + 59);
        DsFromDnskey = DnsSign::GenerateDsFromDnskey(
                         v12,
                         (struct _Dbase_Record *)v16,
                         *((unsigned __int8 **)a1 + 4),
                         (const struct _CountName *)*(unsigned int *)(NextRecord + 20));
        v19 = (__int64)DsFromDnskey;
        if ( !DsFromDnskey )
          break;
        if ( (unsigned int)RR_Compare(NextRecord, (__int64)DsFromDnskey, 0i64) )
        {
          if ( *(_QWORD *)(a2 + 56) )
            v20 = ntohl(*(_DWORD *)(NextRecord + 20));
          else
            v20 = *(_DWORD *)(NextRecord + 20) - *(_DWORD *)(NextRecord + 16);
          v4 = 2;
          *v28 = v20;
          RR_Free(v19);
          break;
        }
        RR_Free(v19);
        v16 = (unsigned __int16)v26;
      }
    }
    NextRecord = *(_QWORD *)NextRecord;
    if ( !NextRecord )
      break;
  }
  RR_Free((__int64)v12);
  v5 = v27;
  if ( v4 != 2 )
    goto LABEL_41;
LABEL_46:
  if ( v5 )
  {
    v23 = (*((_DWORD *)a1 + 260) >> 13) & 1;
    if ( (*((_BYTE *)a1 + 388) & 1) != 0 )
    {
      v25[0] = 0x80000;
      v25[3] = 0;
      v25[2] = v23;
      Ds_ZoneWriteProperty(0, (__int64)a1, (CHAR *)"ParentHasSecureDelegation", v25, 0);
    }
    else
    {
      LODWORD(v28) = (*((_DWORD *)a1 + 260) >> 13) & 1;
      Reg_SetValue(0, 0i64, (__int64)a1, "ParentHasSecureDelegation", 4u, (BYTE *)&v28, 4u);
    }
  }
  v26 = -1;
  releaseRead(DbaseLock, &v26, 1);
  return v4;
}
// 1401EC5E8: using guessed type __int64 DbaseLock;
