//----- (0000000140163C80) ----------------------------------------------------
__int64 __fastcall DnsRpc_ConvertToCurrent(int *a1, __int64 *a2)
{
  unsigned int v3; // ebp
  unsigned int *v4; // rsi
  __int64 *v5; // rax
  unsigned int v6; // ecx
  int v7; // ebx
  unsigned int *v8; // rdx
  __int64 v9; // rdi
  _QWORD *v10; // rax
  __int64 v11; // rdx
  __int64 v12; // r8
  int v13; // r9d
  unsigned int *v14; // rcx
  _QWORD *v15; // rax
  void *v16; // rax
  __int64 v17; // rdx
  __int64 v18; // r8
  int v19; // r9d
  __int64 v20; // rdx
  __int64 v21; // r8
  int v22; // r9d
  unsigned int *v23; // rcx
  void *v24; // rax
  __int64 v25; // rdx
  __int64 v26; // r8
  int v27; // r9d
  __int64 v28; // rdx
  __int64 v29; // r8
  int v30; // r9d
  __int64 v31; // rdx
  __int64 v32; // r8
  int v33; // r9d
  __int64 v34; // rdx
  __int64 v35; // r8
  int v36; // r9d
  void *v37; // rax
  _QWORD *v38; // rax
  __int64 v39; // rdx
  __int64 v40; // r8
  int v41; // r9d
  unsigned int *v42; // rcx
  void *v43; // rax
  __int64 v44; // rdx
  __int64 v45; // r8
  int v46; // r9d
  __int64 v47; // rdx
  __int64 v48; // r8
  int v49; // r9d
  __int64 v50; // rdx
  __int64 v51; // r8
  int v52; // r9d
  char v53; // al
  void *v54; // rax
  __int64 v55; // rdx
  __int64 v56; // r8
  int v57; // r9d
  __int64 v58; // rdx
  __int64 v59; // r8
  int v60; // r9d
  void *v61; // rax
  __int64 v62; // rdx
  __int64 v63; // r8
  int v64; // r9d
  __int64 v65; // rdx
  __int64 v66; // r8
  int v67; // r9d
  _QWORD *v68; // rax
  void *v69; // rax
  __int64 v70; // rdx
  __int64 v71; // r8
  int v72; // r9d
  void *v73; // rax
  __int64 v74; // rdx
  __int64 v75; // r8
  int v76; // r9d
  __int64 v77; // rdx
  __int64 v78; // r8
  int v79; // r9d
  __int64 v80; // rdx
  __int64 v81; // r8
  int v82; // r9d
  __int64 v83; // rdx
  __int64 v84; // r8
  int v85; // r9d
  __int64 v86; // rdx
  __int64 v87; // r8
  int v88; // r9d
  _QWORD *v89; // rax
  void *v90; // rax
  __int64 v91; // rdx
  __int64 v92; // r8
  int v93; // r9d
  __int64 v94; // rdx
  __int64 v95; // r8
  int v96; // r9d
  __int64 v97; // rdx
  __int64 v98; // r8
  int v99; // r9d
  __int64 v100; // rdx
  __int64 v101; // r8
  int v102; // r9d
  __int64 v103; // rax
  _DWORD *v104; // rax
  __int64 v105; // rax
  __int64 v106; // rbx
  _DWORD *v108; // [rsp+40h] [rbp-48h] BYREF
  int v109; // [rsp+48h] [rbp-40h]
  __int64 v110[7]; // [rsp+50h] [rbp-38h] BYREF
  unsigned int v113; // [rsp+A0h] [rbp+18h]
  __int64 Size; // [rsp+A8h] [rbp+20h]
  int Sizea; // [rsp+A8h] [rbp+20h]

  v3 = 0;
  v4 = 0i64;
  v5 = a2;
  v6 = -1;
  v7 = -1;
  if ( !a1 || !a2 )
  {
    v3 = 13;
    goto LABEL_66;
  }
  if ( (unsigned int)*a1 >= 6 )
  {
    v8 = (unsigned int *)*a2;
    if ( v8 )
    {
      v6 = *a1;
      v4 = v8;
      v113 = v6;
      v7 = *a1;
      v9 = (__int64)v8;
      if ( v6 > 0xE )
      {
        switch ( v6 )
        {
          case 0x10u:
            v103 = *v8;
            if ( (_DWORD)v103 )
              v103 = (unsigned int)(v103 - 1);
            Size = 8 * v103 + 24;
            v104 = MIDL_user_allocate(Size);
            v108 = v104;
            if ( v104 )
            {
              memset_0(v104, 0, Size);
              v7 = 27;
              v9 = (__int64)v108;
              v109 = 27;
              v108[2] = 0;
              *(_DWORD *)v9 = 1;
              v105 = 0i64;
              Sizea = 0;
              if ( *v4 )
              {
                do
                {
                  v106 = (unsigned int)v105;
                  v110[0] = *(_QWORD *)&v4[2 * v105 + 2];
                  LODWORD(v108) = 9;
                  v3 = DnsRpc_ConvertToCurrent((int *)&v108, v110);
                  *(_QWORD *)(v9 + 8 * v106 + 16) = v110[0];
                  if ( v3 )
                    break;
                  ++*(_DWORD *)(v9 + 8);
                  v105 = (unsigned int)(Sizea + 1);
                  Sizea = v105;
                }
                while ( (unsigned int)v105 < *v4 );
                v7 = v109;
              }
              goto LABEL_63;
            }
            goto LABEL_54;
          case 0x13u:
            v90 = MIDL_user_allocate(0x118ui64);
            v9 = (__int64)v90;
            if ( !v90 )
              goto LABEL_54;
            memset_0(v90, 0, 0x118ui64);
            *(_DWORD *)v9 = 2;
            *(_DWORD *)(v9 + 8) = v4[2];
            *(_BYTE *)(v9 + 12) = *((_BYTE *)v4 + 12);
            *(_BYTE *)(v9 + 13) = *((_BYTE *)v4 + 13);
            *(_BYTE *)(v9 + 14) = *((_BYTE *)v4 + 14);
            *(_BYTE *)(v9 + 15) = *((_BYTE *)v4 + 15);
            *(_QWORD *)(v9 + 16) = *((_QWORD *)v4 + 2);
            *(_QWORD *)(v9 + 24) = *((_QWORD *)v4 + 3);
            *(_QWORD *)(v9 + 32) = midlConvertIp4ArrayToDnsAddrArray(*((unsigned int **)v4 + 4), v91, v92, v93);
            *(_QWORD *)(v9 + 40) = midlConvertIp4ArrayToDnsAddrArray(*((unsigned int **)v4 + 5), v94, v95, v96);
            *(_QWORD *)(v9 + 48) = midlConvertIp4ArrayToDnsAddrArray(*((unsigned int **)v4 + 6), v97, v98, v99);
            *(_QWORD *)(v9 + 56) = midlConvertIp4ArrayToDnsAddrArray(*((unsigned int **)v4 + 7), v100, v101, v102);
            *(_QWORD *)(v9 + 64) = *((_QWORD *)v4 + 8);
            *(_QWORD *)(v9 + 72) = *((_QWORD *)v4 + 9);
            *(_QWORD *)(v9 + 80) = *((_QWORD *)v4 + 10);
            *(_QWORD *)(v9 + 88) = *((_QWORD *)v4 + 11);
            *(_QWORD *)(v9 + 96) = *((_QWORD *)v4 + 12);
            *(_DWORD *)(v9 + 152) = v4[38];
            *(_DWORD *)(v9 + 156) = v4[39];
            *(_DWORD *)(v9 + 160) = v4[40];
            *(_DWORD *)(v9 + 164) = v4[41];
            *(_DWORD *)(v9 + 168) = v4[42];
            *(_DWORD *)(v9 + 172) = v4[43];
            *(_DWORD *)(v9 + 176) = v4[44];
            *(_DWORD *)(v9 + 180) = v4[45];
            *(_DWORD *)(v9 + 184) = v4[46];
            *(_DWORD *)(v9 + 188) = v4[47];
            *(_DWORD *)(v9 + 192) = v4[48];
            *(_DWORD *)(v9 + 196) = v4[49];
            *(_DWORD *)(v9 + 200) = v4[50];
            *(_DWORD *)(v9 + 204) = v4[51];
            *(_DWORD *)(v9 + 208) = v4[52];
            *(_DWORD *)(v9 + 212) = v4[53];
            *(_DWORD *)(v9 + 216) = v4[54];
            *(_DWORD *)(v9 + 220) = v4[55];
            *(_DWORD *)(v9 + 224) = v4[56];
            *(_DWORD *)(v9 + 228) = v4[57];
            *(_BYTE *)(v9 + 248) = *((_BYTE *)v4 + 248);
            *(_BYTE *)(v9 + 249) = *((_BYTE *)v4 + 249);
            *(_BYTE *)(v9 + 250) = *((_BYTE *)v4 + 250);
            *(_BYTE *)(v9 + 251) = *((_BYTE *)v4 + 251);
            *(_BYTE *)(v9 + 252) = *((_BYTE *)v4 + 252);
            *(_BYTE *)(v9 + 253) = *((_BYTE *)v4 + 253);
            *(_BYTE *)(v9 + 254) = *((_BYTE *)v4 + 254);
            *(_BYTE *)(v9 + 255) = *((_BYTE *)v4 + 255);
            *(_BYTE *)(v9 + 256) = *((_BYTE *)v4 + 256);
            *(_BYTE *)(v9 + 257) = *((_BYTE *)v4 + 257);
            *(_BYTE *)(v9 + 258) = *((_BYTE *)v4 + 258);
            *(_BYTE *)(v9 + 259) = *((_BYTE *)v4 + 259);
            v53 = *((_BYTE *)v4 + 260);
            goto LABEL_32;
          case 0x14u:
            v89 = MIDL_user_allocate(0x18ui64);
            v9 = (__int64)v89;
            if ( !v89 )
              goto LABEL_54;
            *v89 = 0i64;
            v89[1] = 0i64;
            v89[2] = 0i64;
            *(_DWORD *)v89 = 2;
            *((_DWORD *)v89 + 2) = v4[2];
            *((_DWORD *)v89 + 3) = v4[3];
            v42 = (unsigned int *)*((_QWORD *)v4 + 2);
            goto LABEL_29;
          case 0x16u:
            v73 = MIDL_user_allocate(0xC0ui64);
            v9 = (__int64)v73;
            if ( !v73 )
              goto LABEL_54;
            memset_0(v73, 0, 0xC0ui64);
            *(_DWORD *)v9 = 2;
            *(_QWORD *)(v9 + 8) = *((_QWORD *)v4 + 1);
            *(_DWORD *)(v9 + 16) = v4[4];
            *(_DWORD *)(v9 + 20) = v4[5];
            *(_DWORD *)(v9 + 24) = v4[6];
            *(_DWORD *)(v9 + 28) = v4[7];
            *(_DWORD *)(v9 + 32) = v4[8];
            *(_DWORD *)(v9 + 36) = v4[9];
            *(_DWORD *)(v9 + 40) = v4[10];
            *(_QWORD *)(v9 + 48) = *((_QWORD *)v4 + 6);
            *(_QWORD *)(v9 + 56) = midlConvertIp4ArrayToDnsAddrArray(*((unsigned int **)v4 + 7), v74, v75, v76);
            *(_DWORD *)(v9 + 64) = v4[16];
            *(_DWORD *)(v9 + 68) = v4[17];
            *(_QWORD *)(v9 + 72) = midlConvertIp4ArrayToDnsAddrArray(*((unsigned int **)v4 + 9), v77, v78, v79);
            *(_QWORD *)(v9 + 80) = midlConvertIp4ArrayToDnsAddrArray(*((unsigned int **)v4 + 10), v80, v81, v82);
            *(_DWORD *)(v9 + 88) = v4[22];
            *(_DWORD *)(v9 + 92) = v4[23];
            *(_DWORD *)(v9 + 96) = v4[24];
            *(_DWORD *)(v9 + 100) = v4[25];
            *(_DWORD *)(v9 + 104) = v4[26];
            *(_DWORD *)(v9 + 108) = v4[27];
            *(_QWORD *)(v9 + 112) = midlConvertIp4ArrayToDnsAddrArray(*((unsigned int **)v4 + 14), v83, v84, v85);
            *(_DWORD *)(v9 + 120) = v4[30];
            *(_DWORD *)(v9 + 124) = v4[31];
            *(_QWORD *)(v9 + 128) = midlConvertIp4ArrayToDnsAddrArray(*((unsigned int **)v4 + 16), v86, v87, v88);
            *(_DWORD *)(v9 + 136) = v4[34];
            *(_QWORD *)(v9 + 144) = *((_QWORD *)v4 + 18);
            *(_QWORD *)(v9 + 152) = *((_QWORD *)v4 + 19);
            *(_DWORD *)(v9 + 160) = v4[40];
            *(_DWORD *)(v9 + 164) = v4[41];
            goto LABEL_24;
          case 0x17u:
            v69 = MIDL_user_allocate(0x20ui64);
            v9 = (__int64)v69;
            if ( !v69 )
              goto LABEL_54;
            memset_0(v69, 0, 0x20ui64);
            *(_DWORD *)v9 = 2;
            *(_DWORD *)(v9 + 8) = v4[2];
            *(_DWORD *)(v9 + 12) = v4[3];
            *(_QWORD *)(v9 + 16) = midlConvertIp4ArrayToDnsAddrArray(*((unsigned int **)v4 + 2), v70, v71, v72);
            v23 = (unsigned int *)*((_QWORD *)v4 + 3);
            goto LABEL_21;
          case 0x19u:
            v68 = MIDL_user_allocate(0x18ui64);
            v9 = (__int64)v68;
            if ( v68 )
            {
              *v68 = 0i64;
              v68[1] = 0i64;
              v68[2] = 0i64;
              *(_DWORD *)v68 = 2;
              *((_DWORD *)v68 + 2) = v4[2];
              v14 = (unsigned int *)*((_QWORD *)v4 + 2);
              goto LABEL_16;
            }
            goto LABEL_54;
        }
        if ( v6 != 26 )
          goto LABEL_64;
        v61 = MIDL_user_allocate(0xE8ui64);
        v9 = (__int64)v61;
        if ( !v61 )
          goto LABEL_54;
        memset_0(v61, 0, 0xE8ui64);
        *(_DWORD *)v9 = 2;
        *(_QWORD *)(v9 + 8) = *((_QWORD *)v4 + 1);
        *(_DWORD *)(v9 + 16) = v4[4];
        *(_DWORD *)(v9 + 20) = v4[5];
        *(_DWORD *)(v9 + 24) = v4[6];
        *(_DWORD *)(v9 + 28) = v4[7];
        *(_QWORD *)(v9 + 32) = *((_QWORD *)v4 + 4);
        *(_DWORD *)(v9 + 40) = v4[10];
        *(_DWORD *)(v9 + 44) = v4[11];
        *(_QWORD *)(v9 + 48) = *((_QWORD *)v4 + 6);
        *(_QWORD *)(v9 + 56) = midlConvertIp4ArrayToDnsAddrArray(*((unsigned int **)v4 + 7), v62, v63, v64);
        *(_QWORD *)(v9 + 64) = midlConvertIp4ArrayToDnsAddrArray(*((unsigned int **)v4 + 8), v65, v66, v67);
        *(_DWORD *)(v9 + 72) = v4[18];
        *(_DWORD *)(v9 + 76) = v4[19];
        *(_DWORD *)(v9 + 80) = v4[20];
        *(_DWORD *)(v9 + 84) = v4[21];
        *(_DWORD *)(v9 + 88) = v4[22];
        *(_QWORD *)(v9 + 96) = *((_QWORD *)v4 + 12);
      }
      else
      {
        if ( v6 != 14 )
        {
          if ( v6 != 6 )
          {
            if ( v6 != 8 )
            {
              if ( v6 == 9 )
              {
                v37 = MIDL_user_allocate(0x28ui64);
                v9 = (__int64)v37;
                if ( v37 )
                {
                  memset_0(v37, 0, 0x28ui64);
                  *(_DWORD *)v9 = 1;
                  v7 = 21;
                  *(_QWORD *)(v9 + 8) = *(_QWORD *)v4;
                  *(_DWORD *)(v9 + 16) = v4[2];
                  *(_BYTE *)(v9 + 20) = *((_BYTE *)v4 + 12);
                  *(_BYTE *)(v9 + 21) = *((_BYTE *)v4 + 13);
                  goto LABEL_63;
                }
                goto LABEL_54;
              }
              if ( v6 != 10 )
              {
                if ( v6 != 11 )
                {
                  if ( v6 != 12 )
                  {
                    if ( v6 == 13 )
                    {
                      v10 = MIDL_user_allocate(0x18ui64);
                      v9 = (__int64)v10;
                      if ( v10 )
                      {
                        *v10 = 0i64;
                        v10[1] = 0i64;
                        v10[2] = 0i64;
                        *(_DWORD *)v10 = 2;
                        *((_DWORD *)v10 + 2) = *v4;
                        v14 = (unsigned int *)*((_QWORD *)v4 + 1);
LABEL_16:
                        *(_QWORD *)(v9 + 16) = midlConvertIp4ArrayToDnsAddrArray(v14, v11, v12, v13);
                        v7 = 39;
LABEL_63:
                        v6 = v113;
                        goto LABEL_64;
                      }
                      goto LABEL_54;
                    }
LABEL_64:
                    *a1 = v7;
                    v5 = a2;
                    *a2 = v9;
                    goto LABEL_66;
                  }
                  v15 = MIDL_user_allocate(0x18ui64);
                  v9 = (__int64)v15;
                  if ( v15 )
                  {
                    v7 = 24;
                    *v15 = 0i64;
                    v15[1] = 0i64;
                    v15[2] = 0i64;
                    *(_DWORD *)v15 = 1;
                    *((_DWORD *)v15 + 2) = *v4;
                    v15[2] = *((_QWORD *)v4 + 1);
                    goto LABEL_63;
                  }
LABEL_54:
                  v3 = 14;
                  v6 = v7;
                  goto LABEL_64;
                }
                v16 = MIDL_user_allocate(0x20ui64);
                v9 = (__int64)v16;
                if ( !v16 )
                  goto LABEL_54;
                memset_0(v16, 0, 0x20ui64);
                *(_DWORD *)v9 = 2;
                *(_DWORD *)(v9 + 8) = *v4;
                *(_DWORD *)(v9 + 12) = v4[1];
                *(_QWORD *)(v9 + 16) = midlConvertIp4ArrayToDnsAddrArray(*((unsigned int **)v4 + 1), v17, v18, v19);
                v23 = (unsigned int *)*((_QWORD *)v4 + 2);
LABEL_21:
                *(_QWORD *)(v9 + 24) = midlConvertIp4ArrayToDnsAddrArray(v23, v20, v21, v22);
                v7 = 38;
                goto LABEL_63;
              }
              v24 = MIDL_user_allocate(0xC0ui64);
              v9 = (__int64)v24;
              if ( !v24 )
                goto LABEL_54;
              memset_0(v24, 0, 0xC0ui64);
              *(_DWORD *)v9 = 2;
              *(_QWORD *)(v9 + 8) = *(_QWORD *)v4;
              *(_DWORD *)(v9 + 16) = v4[2];
              *(_DWORD *)(v9 + 20) = v4[3];
              *(_DWORD *)(v9 + 24) = v4[4];
              *(_DWORD *)(v9 + 28) = v4[5];
              *(_DWORD *)(v9 + 32) = v4[6];
              *(_DWORD *)(v9 + 36) = v4[7];
              *(_DWORD *)(v9 + 40) = v4[8];
              *(_QWORD *)(v9 + 48) = *((_QWORD *)v4 + 5);
              *(_QWORD *)(v9 + 56) = midlConvertIp4ArrayToDnsAddrArray(*((unsigned int **)v4 + 6), v25, v26, v27);
              *(_DWORD *)(v9 + 64) = v4[14];
              *(_DWORD *)(v9 + 68) = v4[15];
              *(_QWORD *)(v9 + 72) = midlConvertIp4ArrayToDnsAddrArray(*((unsigned int **)v4 + 8), v28, v29, v30);
              *(_QWORD *)(v9 + 80) = midlConvertIp4ArrayToDnsAddrArray(*((unsigned int **)v4 + 9), v31, v32, v33);
              *(_DWORD *)(v9 + 88) = v4[20];
              *(_DWORD *)(v9 + 92) = v4[21];
              *(_DWORD *)(v9 + 96) = v4[22];
              *(_DWORD *)(v9 + 100) = v4[23];
              *(_DWORD *)(v9 + 104) = v4[24];
              *(_DWORD *)(v9 + 108) = v4[25];
              *(_QWORD *)(v9 + 112) = midlConvertIp4ArrayToDnsAddrArray(*((unsigned int **)v4 + 13), v34, v35, v36);
LABEL_24:
              v7 = 36;
              goto LABEL_63;
            }
            v38 = MIDL_user_allocate(0x18ui64);
            v9 = (__int64)v38;
            if ( !v38 )
              goto LABEL_54;
            *v38 = 0i64;
            v38[1] = 0i64;
            v38[2] = 0i64;
            *(_DWORD *)v38 = 2;
            *((_DWORD *)v38 + 2) = *v4;
            *((_DWORD *)v38 + 3) = v4[1];
            v42 = (unsigned int *)*((_QWORD *)v4 + 1);
LABEL_29:
            *(_QWORD *)(v9 + 16) = midlConvertIp4ArrayToDnsAddrArray(v42, v39, v40, v41);
            v7 = 37;
            goto LABEL_63;
          }
          v43 = MIDL_user_allocate(0x118ui64);
          v9 = (__int64)v43;
          if ( !v43 )
            goto LABEL_54;
          memset_0(v43, 0, 0x118ui64);
          *(_DWORD *)v9 = 2;
          *(_DWORD *)(v9 + 8) = *v4;
          *(_BYTE *)(v9 + 12) = *((_BYTE *)v4 + 4);
          *(_BYTE *)(v9 + 13) = *((_BYTE *)v4 + 5);
          *(_BYTE *)(v9 + 14) = *((_BYTE *)v4 + 6);
          *(_BYTE *)(v9 + 15) = *((_BYTE *)v4 + 7);
          *(_QWORD *)(v9 + 16) = *((_QWORD *)v4 + 1);
          *(_QWORD *)(v9 + 24) = *((_QWORD *)v4 + 2);
          *(_QWORD *)(v9 + 32) = midlConvertIp4ArrayToDnsAddrArray(*((unsigned int **)v4 + 3), v44, v45, v46);
          *(_QWORD *)(v9 + 40) = midlConvertIp4ArrayToDnsAddrArray(*((unsigned int **)v4 + 4), v47, v48, v49);
          *(_QWORD *)(v9 + 48) = midlConvertIp4ArrayToDnsAddrArray(*((unsigned int **)v4 + 5), v50, v51, v52);
          *(_DWORD *)(v9 + 152) = v4[22];
          *(_DWORD *)(v9 + 156) = v4[23];
          *(_DWORD *)(v9 + 160) = v4[24];
          *(_DWORD *)(v9 + 164) = v4[25];
          *(_DWORD *)(v9 + 168) = v4[26];
          *(_DWORD *)(v9 + 172) = v4[27];
          *(_DWORD *)(v9 + 176) = v4[28];
          *(_DWORD *)(v9 + 180) = v4[29];
          *(_DWORD *)(v9 + 184) = v4[30];
          *(_DWORD *)(v9 + 188) = v4[31];
          *(_DWORD *)(v9 + 196) = v4[32];
          *(_DWORD *)(v9 + 200) = v4[33];
          *(_DWORD *)(v9 + 204) = v4[34];
          *(_BYTE *)(v9 + 248) = *((_BYTE *)v4 + 180);
          *(_BYTE *)(v9 + 249) = *((_BYTE *)v4 + 181);
          *(_BYTE *)(v9 + 250) = *((_BYTE *)v4 + 182);
          *(_BYTE *)(v9 + 251) = *((_BYTE *)v4 + 183);
          *(_BYTE *)(v9 + 252) = *((_BYTE *)v4 + 184);
          *(_BYTE *)(v9 + 253) = *((_BYTE *)v4 + 185);
          *(_BYTE *)(v9 + 254) = *((_BYTE *)v4 + 186);
          *(_BYTE *)(v9 + 255) = *((_BYTE *)v4 + 187);
          *(_BYTE *)(v9 + 256) = *((_BYTE *)v4 + 188);
          *(_BYTE *)(v9 + 257) = *((_BYTE *)v4 + 189);
          *(_BYTE *)(v9 + 258) = *((_BYTE *)v4 + 190);
          *(_BYTE *)(v9 + 259) = *((_BYTE *)v4 + 191);
          v53 = *((_BYTE *)v4 + 192);
LABEL_32:
          *(_BYTE *)(v9 + 260) = v53;
          v7 = 35;
          goto LABEL_63;
        }
        v54 = MIDL_user_allocate(0xE8ui64);
        v9 = (__int64)v54;
        if ( !v54 )
          goto LABEL_54;
        memset_0(v54, 0, 0xE8ui64);
        *(_DWORD *)v9 = 2;
        *(_QWORD *)(v9 + 8) = *(_QWORD *)v4;
        *(_DWORD *)(v9 + 16) = v4[2];
        *(_DWORD *)(v9 + 20) = v4[3];
        *(_DWORD *)(v9 + 24) = v4[4];
        *(_DWORD *)(v9 + 28) = v4[5];
        *(_QWORD *)(v9 + 32) = *((_QWORD *)v4 + 3);
        *(_DWORD *)(v9 + 40) = v4[8];
        *(_DWORD *)(v9 + 44) = v4[9];
        *(_QWORD *)(v9 + 48) = *((_QWORD *)v4 + 5);
        *(_QWORD *)(v9 + 56) = midlConvertIp4ArrayToDnsAddrArray(*((unsigned int **)v4 + 6), v55, v56, v57);
        *(_QWORD *)(v9 + 64) = midlConvertIp4ArrayToDnsAddrArray(*((unsigned int **)v4 + 7), v58, v59, v60);
        *(_DWORD *)(v9 + 72) = v4[16];
        *(_DWORD *)(v9 + 76) = v4[17];
      }
      v7 = 40;
      goto LABEL_63;
    }
  }
LABEL_66:
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 25) >= 4u )
  {
    WPP_SF_dddqq(*((_QWORD *)WPP_GLOBAL_Control + 2), 0xAu, (__int64)WPP_GLOBAL_Control, v3, v6, v7, v4, *v5);
  }
  return v3;
}
// 140163D5A: variable 'v11' is possibly undefined
// 140163D5A: variable 'v12' is possibly undefined
// 140163D5A: variable 'v13' is possibly undefined
// 140163DE6: variable 'v17' is possibly undefined
// 140163DE6: variable 'v18' is possibly undefined
// 140163DE6: variable 'v19' is possibly undefined
// 140163DF3: variable 'v20' is possibly undefined
// 140163DF3: variable 'v21' is possibly undefined
// 140163DF3: variable 'v22' is possibly undefined
// 140163E6F: variable 'v25' is possibly undefined
// 140163E6F: variable 'v26' is possibly undefined
// 140163E6F: variable 'v27' is possibly undefined
// 140163E88: variable 'v28' is possibly undefined
// 140163E88: variable 'v29' is possibly undefined
// 140163E88: variable 'v30' is possibly undefined
// 140163E95: variable 'v31' is possibly undefined
// 140163E95: variable 'v32' is possibly undefined
// 140163E95: variable 'v33' is possibly undefined
// 140163EC6: variable 'v34' is possibly undefined
// 140163EC6: variable 'v35' is possibly undefined
// 140163EC6: variable 'v36' is possibly undefined
// 140163F5E: variable 'v39' is possibly undefined
// 140163F5E: variable 'v40' is possibly undefined
// 140163F5E: variable 'v41' is possibly undefined
// 140163FCE: variable 'v44' is possibly undefined
// 140163FCE: variable 'v45' is possibly undefined
// 140163FCE: variable 'v46' is possibly undefined
// 140163FDB: variable 'v47' is possibly undefined
// 140163FDB: variable 'v48' is possibly undefined
// 140163FDB: variable 'v49' is possibly undefined
// 140163FE8: variable 'v50' is possibly undefined
// 140163FE8: variable 'v51' is possibly undefined
// 140163FE8: variable 'v52' is possibly undefined
// 140164180: variable 'v55' is possibly undefined
// 140164180: variable 'v56' is possibly undefined
// 140164180: variable 'v57' is possibly undefined
// 14016418D: variable 'v58' is possibly undefined
// 14016418D: variable 'v59' is possibly undefined
// 14016418D: variable 'v60' is possibly undefined
// 140164259: variable 'v62' is possibly undefined
// 140164259: variable 'v63' is possibly undefined
// 140164259: variable 'v64' is possibly undefined
// 140164266: variable 'v65' is possibly undefined
// 140164266: variable 'v66' is possibly undefined
// 140164266: variable 'v67' is possibly undefined
// 14016430C: variable 'v70' is possibly undefined
// 14016430C: variable 'v71' is possibly undefined
// 14016430C: variable 'v72' is possibly undefined
// 140164388: variable 'v74' is possibly undefined
// 140164388: variable 'v75' is possibly undefined
// 140164388: variable 'v76' is possibly undefined
// 1401643A1: variable 'v77' is possibly undefined
// 1401643A1: variable 'v78' is possibly undefined
// 1401643A1: variable 'v79' is possibly undefined
// 1401643AE: variable 'v80' is possibly undefined
// 1401643AE: variable 'v81' is possibly undefined
// 1401643AE: variable 'v82' is possibly undefined
// 1401643DF: variable 'v83' is possibly undefined
// 1401643DF: variable 'v84' is possibly undefined
// 1401643DF: variable 'v85' is possibly undefined
// 1401643FB: variable 'v86' is possibly undefined
// 1401643FB: variable 'v87' is possibly undefined
// 1401643FB: variable 'v88' is possibly undefined
// 1401644EC: variable 'v91' is possibly undefined
// 1401644EC: variable 'v92' is possibly undefined
// 1401644EC: variable 'v93' is possibly undefined
// 1401644F9: variable 'v94' is possibly undefined
// 1401644F9: variable 'v95' is possibly undefined
// 1401644F9: variable 'v96' is possibly undefined
// 140164506: variable 'v97' is possibly undefined
// 140164506: variable 'v98' is possibly undefined
// 140164506: variable 'v99' is possibly undefined
// 140164513: variable 'v100' is possibly undefined
// 140164513: variable 'v101' is possibly undefined
// 140164513: variable 'v102' is possibly undefined
// 140163C80: using guessed type __int64 var_38[7];
