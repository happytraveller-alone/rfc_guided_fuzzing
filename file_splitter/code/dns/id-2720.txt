//----- (0000000140142E64) ----------------------------------------------------
__int64 __fastcall CDNSClientSubnetRecord::NoAddressOnDeletion(
        CDNSClientSubnetRecord *this,
        struct _ClientSubnetRecord *a2)
{
  unsigned int v2; // edi
  __int64 v5; // r12
  unsigned __int64 v6; // r14
  _QWORD *v7; // r13
  _QWORD *i; // rbx
  unsigned int v9; // ebp
  __int64 v10; // r13
  __int64 v11; // r14
  unsigned __int64 v12; // rbp
  _QWORD *v13; // r15
  _QWORD *j; // rbx
  unsigned int v15; // esi
  __int64 v16; // r13
  unsigned __int64 v17; // r12

  v2 = 0;
  if ( a2 )
  {
    v5 = *((_QWORD *)a2 + 1);
    if ( v5 )
    {
      v6 = *(unsigned int *)(v5 + 4);
      if ( *((_QWORD *)this + 7) > v6 )
        return v2;
      v7 = (_QWORD *)*((_QWORD *)this + 6);
      for ( i = (_QWORD *)*v7; i != v7; i = (_QWORD *)*i )
      {
        v9 = 0;
        if ( (_DWORD)v6 )
        {
          v10 = i[2];
          do
          {
            if ( (unsigned int)DnsAddr_IsEqual((_WORD *)v10, (_WORD *)(((unsigned __int64)v9 << 6) + v5 + 32), 3)
              && *(_DWORD *)(v10 + 36) == *(_DWORD *)(((unsigned __int64)v9 << 6) + v5 + 68) )
            {
              break;
            }
            ++v9;
          }
          while ( v9 < (unsigned int)v6 );
          v7 = (_QWORD *)*((_QWORD *)this + 6);
        }
        if ( v9 == (_DWORD)v6 )
          return v2;
      }
    }
    else if ( *((_QWORD *)this + 7) )
    {
      return v2;
    }
    v11 = *((_QWORD *)a2 + 2);
    if ( v11 )
    {
      v12 = *(unsigned int *)(v11 + 4);
      if ( *((_QWORD *)this + 10) <= v12 )
      {
        v13 = (_QWORD *)*((_QWORD *)this + 9);
        for ( j = (_QWORD *)*v13; j != v13; j = (_QWORD *)*j )
        {
          v15 = 0;
          if ( (_DWORD)v12 )
          {
            v16 = j[2];
            do
            {
              v17 = (unsigned __int64)v15 << 6;
              if ( (unsigned int)DnsAddr_IsEqual((_WORD *)v16, (_WORD *)(v17 + v11 + 32), 3)
                && *(_DWORD *)(v16 + 36) == *(_DWORD *)(v17 + v11 + 68) )
              {
                break;
              }
              ++v15;
            }
            while ( v15 < (unsigned int)v12 );
          }
          if ( v15 == (_DWORD)v12 )
            return v2;
        }
        return 1;
      }
    }
    else if ( !*((_QWORD *)this + 10) )
    {
      return 1;
    }
  }
  return v2;
}
