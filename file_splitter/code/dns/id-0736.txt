//----- (00000001400664D4) ----------------------------------------------------
void __fastcall finishRollover(__int64 *a1)
{
  __int64 v1; // rbx
  unsigned int v3; // ecx
  __int128 *v4; // rax
  int v5; // r9d
  int v6; // esi
  char *v7; // rax
  __int128 v8; // [rsp+30h] [rbp-18h] BYREF

  v1 = a1[141];
  if ( *(_DWORD *)(v1 + 72) == 3 )
  {
    *(_DWORD *)(v1 + 92) = 1;
  }
  else
  {
    *(_DWORD *)(v1 + 104) = 0;
    *(_DWORD *)(v1 + 72) = 1;
  }
  GetSystemTimeAsFileTime((LPFILETIME)(v1 + 76));
  v3 = *(_DWORD *)(v1 + 68);
  if ( v3 == -1 || *(_DWORD *)(v1 + 92) == 1 )
  {
    *(_QWORD *)(v1 + 84) = 0i64;
  }
  else
  {
    if ( dword_1401B99F0 )
      v3 /= 0x2760u;
    CurrentTimePlusOffset((struct _FILETIME *)(v1 + 84), v3);
  }
  *(_DWORD *)(v1 + 100) = 0;
  *(_DWORD *)(v1 + 96) = 0;
  v4 = &DNS_EVENT_NEXT_KSKROLLOVER_STAGE;
  if ( !*(_DWORD *)(v1 + 36) )
    v4 = (__int128 *)&DNS_EVENT_NEXT_ZSKROLLOVER_STAGE;
  v8 = *v4;
  LogDnssecKeyRollover(&v8, (__int64)a1, v1, L"DNS_SKD_STATUS_ROLL_ERROR");
  *(__int64 *)((char *)a1 + 1116) = 0i64;
  a1[141] = 0i64;
  fireRolloverEvent((__int64)a1, v1, 0x1DF6u);
  v8 = DNS_EVENT_KEY_ROLLOVER_END;
  LogDnssecKeyRollover(&v8, (__int64)a1, v1, 0i64);
  if ( *(_DWORD *)(v1 + 92) == 1 )
  {
    v6 = DnsOls_WriteSkdToStorage(0, (__int64)a1, v1, 1);
    if ( v6
      && WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      v7 = Dbg_GuidString((const IID *)(v1 + 8));
      WPP_SF_DS(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0xBu,
        (__int64)&WPP_bdeacb4259f0347d69c055acf1d289ef_Traceguids,
        v6,
        (__int64)v7);
    }
    fireRolloverEvent((__int64)a1, v1, 0x1DF9u);
  }
  else
  {
    v5 = DnsOls_WriteSkdToStorage(0, (__int64)a1, v1, 0);
    if ( v5
      && WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      WPP_SF_Ds(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0xAu,
        (__int64)&WPP_bdeacb4259f0347d69c055acf1d289ef_Traceguids,
        v5,
        a1[2]);
    }
  }
}
// 140187AB8: using guessed type __int128 DNS_EVENT_KEY_ROLLOVER_END;
// 140187B50: using guessed type __int128 DNS_EVENT_NEXT_KSKROLLOVER_STAGE;
// 14018E240: using guessed type wchar_t aDnsSkdStatusRo[26];
// 1401B99F0: using guessed type int dword_1401B99F0;
// 1400664D4: using guessed type __int128 var_18;
