//----- (00000001400582C4) ----------------------------------------------------
__int64 __fastcall Etw_LogHeaderInfo(__int64 a1, __int64 a2)
{
  u_short v2; // bp
  u_short v3; // r14
  u_short v5; // r15
  u_short v7; // si
  u_short v8; // r12
  __int16 v9; // ax
  int v10; // eax

  v2 = *(_WORD *)(a1 + 6308);
  v3 = *(_WORD *)(a1 + 6304);
  v5 = *(_WORD *)(a1 + 6310);
  v7 = *(_WORD *)(a1 + 6312);
  v8 = *(_WORD *)(a1 + 6314);
  if ( v2 )
  {
    v9 = *(_WORD *)(a1 + 6308);
  }
  else
  {
    if ( !v7 )
      goto LABEL_7;
    v9 = *(_WORD *)(a1 + 6312);
  }
  if ( (v9 & 0xFF00) != 0 )
  {
    v3 = ntohs(v3);
    v2 = ntohs(v2);
    v5 = ntohs(v5);
    v7 = ntohs(v7);
    v8 = ntohs(v8);
  }
LABEL_7:
  *(_WORD *)a2 = v3;
  *(_WORD *)(a2 + 18) = v2;
  *(_WORD *)(a2 + 20) = v5;
  *(_WORD *)(a2 + 22) = v7;
  *(_WORD *)(a2 + 24) = v8;
  v10 = (*(unsigned __int8 *)(a1 + 6306) >> 3) & 0xF;
  *(_BYTE *)(a2 + 5) = 32;
  if ( v10 > 6 )
    v10 = 6;
  *(_BYTE *)(a2 + 4) = OpcodeCharacterTable[v10];
  if ( (*(_BYTE *)(a1 + 6306) & 4) != 0 )
    *(_WORD *)(a2 + 6) = 16705;
  else
    *(_WORD *)(a2 + 6) = 11565;
  *(_BYTE *)(a2 + 8) = 32;
  if ( (*(_BYTE *)(a1 + 6306) & 2) != 0 )
    *(_WORD *)(a2 + 9) = 25428;
  else
    *(_WORD *)(a2 + 9) = 11565;
  *(_BYTE *)(a2 + 11) = 32;
  if ( (*(_BYTE *)(a1 + 6306) & 1) != 0 )
    *(_WORD *)(a2 + 12) = 25682;
  else
    *(_WORD *)(a2 + 12) = 11565;
  *(_BYTE *)(a2 + 14) = 32;
  if ( *(char *)(a1 + 6307) >= 0 )
    *(_WORD *)(a2 + 15) = 11565;
  else
    *(_WORD *)(a2 + 15) = 24914;
  *(_BYTE *)(a2 + 17) = 0;
  *(_BYTE *)(a2 + 2) = (*(_BYTE *)(a1 + 6306) >> 3) & 0xF;
  *(_BYTE *)(a2 + 3) = *(_BYTE *)(a1 + 6307) & 0xF;
  return 0i64;
}
