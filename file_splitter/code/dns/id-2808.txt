//----- (000000014014B4FC) ----------------------------------------------------
_QWORD *__fastcall std::vector<CDnsPolicy *>::insert<CDnsPolicy * &>(_QWORD *a1, _QWORD *a2, __int64 a3, _QWORD *a4)
{
  __int64 v4; // r10
  __int64 v6; // rdx
  __int64 v8; // rdi
  unsigned __int64 v10; // r10
  unsigned __int64 v11; // r10
  unsigned __int64 v12; // rdx
  unsigned __int64 v13; // rdx
  _QWORD *v14; // rcx
  __int64 *v15; // r8
  __int64 *v16; // r10
  __int64 v17; // rcx
  __int64 v18; // r10
  __int64 v19; // rsi
  __int64 i; // r11
  __int64 v21; // rax
  __int64 *v22; // r14
  __int64 *v23; // rsi
  __int64 *v24; // rbp
  __int64 v25; // rdx
  __int64 v26; // r9
  __int64 *v27; // rdx
  _QWORD *result; // rax

  v4 = a1[1];
  v6 = a1[2];
  v8 = (a3 - *a1) >> 3;
  if ( v4 == v6 )
  {
    v10 = (v4 - *a1) >> 3;
    if ( v10 > 0x1FFFFFFFFFFFFFFEi64 )
      std::vector<std::vector<unsigned char> *,std::allocator<std::vector<unsigned char> *>>::_Xlen();
    v11 = v10 + 1;
    v12 = (v6 - *a1) >> 3;
    if ( v11 > v12 )
    {
      if ( 0x1FFFFFFFFFFFFFFFi64 - (v12 >> 1) >= v12 )
        v13 = (v12 >> 1) + v12;
      else
        v13 = 0i64;
      if ( v13 < v11 )
        v13 = v11;
      std::vector<unsigned short *>::reserve((__int64)a1, v13);
    }
  }
  v14 = (_QWORD *)a1[1];
  if ( v14 )
    *v14 = *a4;
  a1[1] += 8i64;
  v15 = (__int64 *)a1[1];
  v16 = v15 - 1;
  v17 = *a1 + 8 * v8;
  if ( (__int64 *)v17 != v15 - 1 && v16 != v15 )
  {
    v18 = ((__int64)v16 - v17) >> 3;
    v19 = v18;
    for ( i = ((__int64)v15 - v17) >> 3; v19; v19 = v21 % v19 )
    {
      v21 = i;
      i = v19;
    }
    if ( i < ((__int64)v15 - v17) >> 3 && i > 0 )
    {
      v22 = (__int64 *)(v17 + 8 * i);
      do
      {
        v23 = &v22[v18];
        v24 = v22;
        if ( v23 == v15 )
          v23 = (__int64 *)v17;
        do
        {
          v25 = *v24;
          *v24 = *v23;
          v24 = v23;
          v26 = v15 - v23;
          *v23 = v25;
          v27 = &v23[v18];
          v23 = (__int64 *)(v17 + 8 * (v18 - v26));
          if ( v18 < v26 )
            v23 = v27;
        }
        while ( v23 != v22 );
        --i;
        --v22;
      }
      while ( i > 0 );
    }
  }
  result = a2;
  *a2 = *a1 + 8 * v8;
  return result;
}
