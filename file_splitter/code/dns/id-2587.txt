//----- (0000000140132040) ----------------------------------------------------
__int64 *__fastcall CDnsPolicy_SubnetRecordCriteriaTree::GetCriteriaNodes(__int64 a1, __int64 a2)
{
  __int64 *v4; // rax
  __int64 *v5; // rbx
  _QWORD *v6; // rax
  __int64 v7; // rsi
  _QWORD *v8; // rdx
  __int64 v9; // rax
  __int64 *v11[2]; // [rsp+20h] [rbp-58h] BYREF
  char pExceptionObject[24]; // [rsp+30h] [rbp-48h] BYREF
  __int64 v13; // [rsp+48h] [rbp-30h]

  v11[1] = (__int64 *)-2i64;
  v13 = a2;
  v4 = (__int64 *)operator new(0x18ui64);
  v5 = v4;
  v11[0] = v4;
  if ( v4 )
  {
    v4[1] = 0i64;
    v6 = operator new(0x18ui64);
    if ( !v6 )
    {
      std::bad_alloc::bad_alloc((std::bad_alloc *)pExceptionObject, 0i64);
      CxxThrowException_0(pExceptionObject, (_ThrowInfo *)&TI2_AVbad_alloc_std__);
    }
    *v5 = (__int64)v6;
    *v6 = v6;
    *(_QWORD *)(*v5 + 8) = *v5;
  }
  else
  {
    v5 = 0i64;
  }
  std::_Tree<std::_Tmap_traits<std::wstring,CDnsPolicy_CriteriaNode *,bool (*)(std::wstring const &,std::wstring const &),std::allocator<std::pair<std::wstring const,CDnsPolicy_CriteriaNode *>>,0>>::find(
    *(_QWORD *)(a1 + 8),
    v11,
    a2);
  if ( v11[0] != *(__int64 **)(*(_QWORD *)(a1 + 8) + 8i64) )
  {
    v11[0] = *((__int64 **)v11[0] + 8);
    v7 = *v5;
    v8 = std::_List_val<CDNSPolicyCriteria *>::_Buynode((__int64)v11[0], *v5, *(_QWORD *)(*v5 + 8), v11);
    v9 = v5[1];
    if ( v9 == 0x1FFFFFFFFFFFFFFEi64 )
      std::_Xlength_error("list<T> too long");
    v5[1] = v9 + 1;
    *(_QWORD *)(v7 + 8) = v8;
    *(_QWORD *)v8[1] = v8;
  }
  if ( *(_QWORD *)(a2 + 24) >= 8ui64 )
    operator delete(*(void **)a2);
  *(_QWORD *)(a2 + 24) = 7i64;
  *(_QWORD *)(a2 + 16) = 0i64;
  *(_WORD *)a2 = 0;
  return v5;
}
// 140184CA8: using guessed type void __stdcall operator delete(void *);
