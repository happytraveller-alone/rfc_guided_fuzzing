//----- (00000001401167B0) ----------------------------------------------------
__int64 __fastcall SD_CreateServerSD(__int64 a1)
{
  CDnsClientSubnetRecordsTrie *v1; // rcx
  int ProcessSids; // eax
  void *v3; // rdi
  int v4; // ebx
  CDnsClientSubnetRecordsTrie *v5; // rcx
  unsigned __int16 v6; // dx
  char v7; // r8
  WINBOOL v8; // r9d
  signed int LastError; // eax
  _QWORD *v10; // rax
  _QWORD *v11; // rdi
  PSECURITY_DESCRIPTOR pSecurityDescriptor[2]; // [rsp+30h] [rbp-30h] BYREF
  __int128 v14; // [rsp+40h] [rbp-20h]
  __int64 v15; // [rsp+50h] [rbp-10h]
  ULONG BufferLength; // [rsp+80h] [rbp+20h] BYREF
  int v17; // [rsp+84h] [rbp+24h]
  PSECURITY_DESCRIPTOR SecurityDescriptor; // [rsp+88h] [rbp+28h] BYREF
  void *v19; // [rsp+90h] [rbp+30h] BYREF

  v17 = HIDWORD(a1);
  BufferLength = 0;
  v15 = 0i64;
  *(_OWORD *)pSecurityDescriptor = 0i64;
  v14 = 0i64;
  v1 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
  {
    if ( (*((_BYTE *)WPP_GLOBAL_Control + 68) & 1) != 0 && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x19u, (__int64)&WPP_86bf6911ab34325a83f1fc4202357274_Traceguids);
      v1 = WPP_GLOBAL_Control;
    }
    if ( v1 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)v1 + 68) & 1) != 0
      && *((_BYTE *)v1 + 65) >= 4u )
    {
      WPP_SF_(*((_QWORD *)v1 + 7), 0x1Au, (__int64)&WPP_86bf6911ab34325a83f1fc4202357274_Traceguids);
    }
  }
  CSecurityDescriptor::Initialize((CSecurityDescriptor *)pSecurityDescriptor);
  ProcessSids = CSecurityDescriptor::GetProcessSids(&v19, &SecurityDescriptor);
  v3 = v19;
  v4 = ProcessSids;
  if ( ProcessSids >= 0 )
  {
    v4 = CSecurityDescriptor::SetOwner((CSecurityDescriptor *)pSecurityDescriptor, v19, 0);
    if ( v4 >= 0 )
      v4 = CSecurityDescriptor::SetGroup((CSecurityDescriptor *)pSecurityDescriptor, SecurityDescriptor, 0);
  }
  if ( v3 )
    operator delete(v3);
  if ( SecurityDescriptor )
    operator delete(SecurityDescriptor);
  if ( v4 >= 0 )
  {
    SecurityDescriptor = 0i64;
    if ( ConvertStringSecurityDescriptorToSecurityDescriptorW(
           L"D:(A;;RPWPCRCCDCLCLORCWOWDSDDTSW;;;DA)(A;;RPWPCRCCDCLCLORCWOWDSDDTSW;;;BA)(A;;RPWPCRCCDCLCLORCWOWDSDDTSW;;;ED"
            ")(A;;RPWPCRCCDCLCLORCWOWDSDDTSW;;;SY)(A;;RPWPCRCCDCLCLORCWOWDSDDTSW;;;CO)(A;;RPLCLORC;;;WD)",
           1u,
           &SecurityDescriptor,
           0i64) )
    {
      v4 = CSecurityDescriptor::Attach((PACL *)pSecurityDescriptor, SecurityDescriptor, v7, v8);
    }
    else
    {
      LastError = GetLastError();
      v4 = (unsigned __int16)LastError | 0x80070000;
      if ( LastError <= 0 )
        v4 = LastError;
    }
    if ( SecurityDescriptor )
      LocalFree(SecurityDescriptor);
    if ( v4 >= 0 )
    {
      v4 = CSecurityDescriptor::SetOwner((CSecurityDescriptor *)pSecurityDescriptor, g_pServerSid, 0);
      if ( v4 >= 0 )
      {
        v4 = CSecurityDescriptor::SetGroup((CSecurityDescriptor *)pSecurityDescriptor, g_pServerGroupSid, 0);
        if ( v4 >= 0 )
        {
          if ( g_pDnsAdminSid
            && (v4 = CSecurityDescriptor::Allow((struct _ACL **)pSecurityDescriptor, L"DnsAdmins", 0xF017Fu, 2u), v4 < 0) )
          {
            v5 = WPP_GLOBAL_Control;
            if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 1) != 0
              && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
            {
              v6 = 31;
              goto LABEL_37;
            }
          }
          else
          {
            BufferLength = GetSecurityDescriptorLength(pSecurityDescriptor[0]);
            v10 = Mem_Alloc(BufferLength, 12i64, "ds\\dns\\server\\server\\sdutl.cxx", 440);
            v11 = v10;
            if ( v10 )
            {
              v4 = RtlAbsoluteToSelfRelativeSD(pSecurityDescriptor[0], v10, &BufferLength);
              if ( v4 )
              {
                if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                  && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 1) != 0
                  && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
                {
                  WPP_SF_(
                    *((_QWORD *)WPP_GLOBAL_Control + 7),
                    0x21u,
                    (__int64)&WPP_86bf6911ab34325a83f1fc4202357274_Traceguids);
                }
                Mem_Free(v11, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\sdutl.cxx", 461);
                v11 = 0i64;
              }
              g_pDefaultServerSD = (__int64)v11;
            }
            else
            {
              if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 1) != 0
                && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
              {
                WPP_SF_(
                  *((_QWORD *)WPP_GLOBAL_Control + 7),
                  0x20u,
                  (__int64)&WPP_86bf6911ab34325a83f1fc4202357274_Traceguids);
              }
              v4 = 0;
            }
          }
        }
        else
        {
          v5 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 1) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
          {
            v6 = 30;
            goto LABEL_37;
          }
        }
      }
      else
      {
        v5 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 1) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          v6 = 29;
          goto LABEL_37;
        }
      }
    }
    else
    {
      v5 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 1) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        v6 = 28;
        goto LABEL_37;
      }
    }
  }
  else
  {
    v5 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 1) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      v6 = 27;
LABEL_37:
      WPP_SF_(*((_QWORD *)v5 + 7), v6, (__int64)&WPP_86bf6911ab34325a83f1fc4202357274_Traceguids);
    }
  }
  CSecurityDescriptor::~CSecurityDescriptor((CSecurityDescriptor *)pSecurityDescriptor);
  return (unsigned int)v4;
}
// 140116900: variable 'v7' is possibly undefined
// 140116900: variable 'v8' is possibly undefined
// 140184CA8: using guessed type void __stdcall operator delete(void *);
// 1401C94C8: using guessed type __int64 g_pDefaultServerSD;
// 1401C9508: using guessed type __int64 g_pDnsAdminSid;
