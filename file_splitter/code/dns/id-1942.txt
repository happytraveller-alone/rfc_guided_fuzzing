//----- (00000001400EC5E8) ----------------------------------------------------
__int64 __fastcall DnsOls_CreateKey(LDAPModW *a1, __int64 a2, int a3, __int64 *a4, __int64 a5)
{
  LDAPModW *v6; // rdi
  __int64 v7; // rbx
  PLDAP v8; // rcx
  char v9; // r12
  __int64 modv_strvals; // r15
  char *v11; // rax
  unsigned int v12; // r14d
  char *v13; // rdx
  unsigned __int64 v14; // r8
  char *v15; // rdx
  unsigned __int64 v16; // r8
  const unsigned __int16 *v17; // rdx
  const wchar_t *v18; // rcx
  bool v19; // zf
  char v20; // al
  const wchar_t *v21; // rcx
  const void **KeyPair; // r12
  __int64 *KeyName; // rax
  __int64 v24; // r8
  __int64 v25; // rcx
  const char *v26; // r9
  __int64 v27; // rax
  const OLECHAR *v28; // rdi
  int v29; // eax
  __int64 *v30; // rax
  __int64 v31; // rcx
  CDnsClientSubnetRecordsTrie *v32; // rax
  char *v33; // rax
  const unsigned __int16 *v34; // rbx
  const wchar_t *v35; // rcx
  const wchar_t *v36; // rcx
  char *v37; // rbx
  char *v38; // rax
  unsigned __int16 v39; // dx
  unsigned __int16 *v40; // rax
  char *v41; // rbx
  char *v42; // rax
  __int64 StringForValue; // rdi
  const wchar_t *v44; // rbx
  char *v45; // rax
  __int64 v46; // rdx
  const struct DnsSign::CertificateCreationSpec *v47; // r8
  const struct _CERT_CONTEXT *SelfSignedCertificate; // rax
  const CERT_CONTEXT *v49; // rbx
  char *v50; // rax
  char *v51; // rax
  const CERT_CONTEXT *v52; // rdx
  HCERTSTORE v53; // rbx
  const struct _CERT_CONTEXT *v54; // rdx
  DnsSign::CCertificateStore *v55; // rcx
  char *v56; // rax
  char *v57; // rbx
  char *v58; // rax
  const char *v59; // r9
  __int64 v61; // [rsp+68h] [rbp-638h]
  int v62; // [rsp+68h] [rbp-638h]
  ULONG v63; // [rsp+70h] [rbp-630h]
  __int64 v64; // [rsp+70h] [rbp-630h]
  unsigned __int16 *KeyPointerString; // [rsp+90h] [rbp-610h]
  HCERTSTORE hCertStore; // [rsp+98h] [rbp-608h] BYREF
  int v67; // [rsp+A0h] [rbp-600h]
  DnsSign::CDnsKeyPair *v68; // [rsp+A8h] [rbp-5F8h]
  LDAPModW *mods[2]; // [rsp+B0h] [rbp-5F0h] BYREF
  __int64 v70[2]; // [rsp+C0h] [rbp-5E0h] BYREF
  __int64 v71; // [rsp+D0h] [rbp-5D0h] BYREF
  __int64 v72[2]; // [rsp+D8h] [rbp-5C8h] BYREF
  _QWORD *v73; // [rsp+E8h] [rbp-5B8h] BYREF
  __int64 *v74; // [rsp+F0h] [rbp-5B0h]
  PLDAP v75; // [rsp+F8h] [rbp-5A8h]
  const wchar_t *v76; // [rsp+100h] [rbp-5A0h] BYREF
  wchar_t *v77; // [rsp+108h] [rbp-598h]
  __int64 *v78; // [rsp+110h] [rbp-590h]
  __int64 v79; // [rsp+118h] [rbp-588h]
  __int16 v80; // [rsp+138h] [rbp-568h] BYREF
  int v81; // [rsp+13Ch] [rbp-564h]
  char v82; // [rsp+140h] [rbp-560h]
  __int16 v83; // [rsp+142h] [rbp-55Eh]
  char v84; // [rsp+144h] [rbp-55Ch]
  const void *v85[2]; // [rsp+148h] [rbp-558h] BYREF
  __int64 v86; // [rsp+158h] [rbp-548h]
  unsigned __int64 v87; // [rsp+160h] [rbp-540h]
  void *v88; // [rsp+170h] [rbp-530h] BYREF
  __int64 v89; // [rsp+180h] [rbp-520h]
  unsigned __int64 v90; // [rsp+188h] [rbp-518h]
  _BYTE v91[12]; // [rsp+198h] [rbp-508h] BYREF
  int v92; // [rsp+1A4h] [rbp-4FCh]
  wchar_t *v93; // [rsp+1A8h] [rbp-4F8h]
  unsigned __int64 v94; // [rsp+1B0h] [rbp-4F0h]
  GUID pclsid; // [rsp+1C0h] [rbp-4E0h] BYREF
  wchar_t Buffer[512]; // [rsp+258h] [rbp-448h] BYREF

  v79 = -2i64;
  v6 = a1;
  hCertStore = a1;
  mods[0] = a1;
  v70[0] = a2;
  v74 = a4;
  v7 = 0i64;
  v67 = 0;
  v8 = pServerLdap;
  v75 = pServerLdap;
  v73 = 0i64;
  LODWORD(v71) = 0;
  v9 = 0;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    if ( v6 )
      modv_strvals = (__int64)v6->mod_vals.modv_strvals;
    else
      modv_strvals = 0i64;
    if ( a2 )
      v11 = Dbg_GuidString((const IID *)(a2 + 8));
    else
      v11 = 0i64;
    WPP_SF_Ss(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x30u,
      (__int64)&WPP_4a0a7bf065bf32df4bbeec8f9c7ea0c3_Traceguids,
      (const unsigned __int16 *)v11,
      modv_strvals);
    v8 = v75;
  }
  if ( !v6 || !a2 || !v74 )
  {
    v12 = 87;
    goto LABEL_148;
  }
  if ( *(_DWORD *)(a2 + 32) && !v8 )
  {
    v12 = 9717;
    goto LABEL_148;
  }
  v76 = L"MS-DNSSEC";
  LOBYTE(v77) = 1;
  v80 = 0;
  v81 = 0;
  v82 = 0;
  v83 = 0;
  v84 = 0;
  v87 = 7i64;
  v86 = 0i64;
  LOWORD(v85[0]) = 0;
  std::wstring::assign((char *)v85, (char *)L"Microsoft Software Key Storage Provider", 0x27ui64);
  v90 = 7i64;
  v89 = 0i64;
  LOWORD(v88) = 0;
  v13 = *(char **)&v6[1].mod_op;
  v14 = -1i64;
  do
    ++v14;
  while ( *(_WORD *)&v13[2 * v14] );
  std::wstring::assign((char *)&v88, v13, v14);
  HIBYTE(v80) = *(_BYTE *)(a2 + 40);
  LOBYTE(v80) = 1;
  v15 = *(char **)(a2 + 24);
  v94 = 7i64;
  v93 = 0i64;
  *(_WORD *)v91 = 0;
  v16 = -1i64;
  do
    ++v16;
  while ( *(_WORD *)&v15[2 * v16] );
  std::wstring::assign(v91, v15, v16);
  std::wstring::assign(v85, (const void **)v91, 0i64, 0xFFFFFFFFFFFFFFFFui64);
  if ( v94 >= 8 )
    operator delete(*(void **)v91);
  v94 = 7i64;
  v93 = 0i64;
  *(_WORD *)v91 = 0;
  v81 = *(_DWORD *)(a2 + 44);
  v83 = (*(_DWORD *)(a2 + 36) != 0) | 0x100;
  v82 = 1;
  if ( !*(_DWORD *)(a2 + 32)
    || (v18 = *(const wchar_t **)(a2 + 24)) == 0i64
    || (v19 = _wcsicmp(v18, L"Microsoft Software Key Storage Provider") == 0, v20 = 1, !v19) )
  {
    v20 = 0;
  }
  v84 = v20;
  v21 = *(const wchar_t **)(a2 + 24);
  if ( !v21 || _wcsicmp(v21, L"Microsoft Software Key Storage Provider") )
    v9 = 1;
  LOBYTE(v17) = 1;
  KeyPair = DnsSign::CDnsKeyPair::GenerateKeyPair((const struct DnsSign::CDnsKeySpec *)&v80, v17, v9);
  v68 = (DnsSign::CDnsKeyPair *)KeyPair;
  v75 = (PLDAP)KeyPair;
  *(_DWORD *)KeyPair = a3;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    KeyName = (__int64 *)DnsSign::CDnsKeyPair::GetKeyName((__int64)KeyPair, (__int64)v91);
    v25 = (__int64)KeyName;
    LODWORD(v7) = 1;
    v67 = 1;
    if ( (unsigned __int64)KeyName[3] >= 8 )
      v25 = *KeyName;
    v26 = "key";
    if ( v84 )
      v26 = "ephemeral key";
    WPP_SF_sIS(*((_QWORD *)WPP_GLOBAL_Control + 7), (__int64)"ephemeral key", v24, v26, (char)KeyPair[13], v25);
  }
  if ( (v7 & 1) != 0 )
  {
    LODWORD(v7) = v7 & 0xFFFFFFFE;
    v67 = v7;
    if ( v94 >= 8 )
      operator delete(*(void **)v91);
    v94 = 7i64;
    v93 = 0i64;
    *(_WORD *)v91 = 0;
  }
  v27 = DnsSign::CDnsKeyPair::GetKeyName((__int64)KeyPair, (__int64)v91);
  v28 = (const OLECHAR *)v27;
  if ( *(_QWORD *)(v27 + 24) >= 8ui64 )
    v28 = *(const OLECHAR **)v27;
  v29 = CLSIDFromString(v28, &pclsid);
  if ( v29 )
    v12 = GuidFromString((__int64)v28, v29);
  else
    v12 = 0;
  if ( v94 >= 8 )
    operator delete(*(void **)v91);
  v94 = 7i64;
  v93 = 0i64;
  *(_WORD *)v91 = 0;
  if ( v12 )
  {
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
    {
      v6 = (LDAPModW *)hCertStore;
    }
    else
    {
      v30 = (__int64 *)DnsSign::CDnsKeyPair::GetKeyName((__int64)KeyPair, (__int64)v91);
      v31 = (__int64)v30;
      LODWORD(v7) = v7 | 2;
      v67 = v7;
      if ( (unsigned __int64)v30[3] >= 8 )
        v31 = *v30;
      v6 = (LDAPModW *)hCertStore;
      WPP_SF_DSs(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x36u,
        (__int64)&WPP_4a0a7bf065bf32df4bbeec8f9c7ea0c3_Traceguids,
        v12,
        v31,
        *((_QWORD *)hCertStore + 2));
    }
    if ( (v7 & 2) != 0 )
    {
      if ( v94 >= 8 )
        operator delete(*(void **)v91);
      v94 = 7i64;
      v93 = 0i64;
      *(_WORD *)v91 = 0;
    }
    goto LABEL_67;
  }
  v32 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    v33 = Dbg_GuidString(&pclsid);
    WPP_SF_S(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x37u,
      (__int64)&WPP_4a0a7bf065bf32df4bbeec8f9c7ea0c3_Traceguids,
      (const unsigned __int16 *)v33);
    v32 = WPP_GLOBAL_Control;
  }
  v34 = (const unsigned __int16 *)(KeyPair + 3);
  if ( (unsigned __int64)KeyPair[6] < 8 )
    v35 = (const wchar_t *)(KeyPair + 3);
  else
    v35 = *(const wchar_t **)v34;
  if ( v35 )
  {
    if ( (unsigned __int64)KeyPair[6] < 8 )
      v36 = (const wchar_t *)(KeyPair + 3);
    else
      v36 = *(const wchar_t **)v34;
    if ( !_wcsicmp(v36, L"Microsoft Software Key Storage Provider") )
    {
      if ( *(_DWORD *)(a2 + 32) )
      {
        v6 = (LDAPModW *)hCertStore;
        v12 = DnsOls_ExportKey((struct _zone_info *)hCertStore, &pclsid, (__int64)KeyPair, &v73, &v71);
        if ( v12 )
        {
          if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) == 0
            || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
          {
            goto LABEL_67;
          }
          v37 = Dbg_GuidString((const IID *)(a2 + 8));
          v38 = Dbg_GuidString(&pclsid);
          v39 = 56;
          goto LABEL_86;
        }
        LODWORD(v72[0]) = v71;
        v72[1] = (__int64)v73;
        v70[0] = (__int64)v72;
        v70[1] = 0i64;
        LODWORD(v76) = 128;
        v77 = off_1401B6CF0[0];
        v78 = v70;
        mods[0] = (LDAPModW *)&v76;
        mods[1] = 0i64;
        v12 = Dns_LdapModifyExt(pServerLdap, *((PWSTR *)hCertStore + 105), mods, 0i64, v62, v63, 0);
        if ( v12 )
        {
          if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) == 0
            || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
          {
            goto LABEL_67;
          }
          v37 = Dbg_GuidString((const IID *)(a2 + 8));
          v38 = Dbg_GuidString(&pclsid);
          v39 = 57;
LABEL_86:
          WPP_SF_DSSs(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            v39,
            (__int64)&WPP_4a0a7bf065bf32df4bbeec8f9c7ea0c3_Traceguids,
            v12,
            (__int64)v38,
            (__int64)v37,
            *((_QWORD *)hCertStore + 2));
          goto LABEL_67;
        }
        v40 = DnsOls_CreateKeyPointerString(*(char **)(a2 + 24), &pclsid, 0i64);
        if ( !v40 )
        {
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
          {
            v41 = Dbg_GuidString((const IID *)(a2 + 8));
            v42 = Dbg_GuidString(&pclsid);
            WPP_SF_DSSs(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x3Au,
              (__int64)&WPP_4a0a7bf065bf32df4bbeec8f9c7ea0c3_Traceguids,
              0,
              (__int64)v42,
              (__int64)v41,
              *((_QWORD *)hCertStore + 2));
          }
LABEL_97:
          v12 = 14;
LABEL_67:
          DnsSign::CDnsKeyPair::`scalar deleting destructor'((DnsSign::CDnsKeyPair *)KeyPair);
          if ( v90 >= 8 )
            operator delete(v88);
          v90 = 7i64;
          v89 = 0i64;
          LOWORD(v88) = 0;
          if ( v87 >= 8 )
            operator delete((void *)v85[0]);
          v87 = 7i64;
          v86 = 0i64;
          LOWORD(v85[0]) = 0;
          v7 = 0i64;
          goto LABEL_148;
        }
        v7 = (__int64)v40;
      }
      else
      {
        StringForValue = Dns_GetStringForValue((__int64)&DnssecAlgorithmTable, *(unsigned __int8 *)(a2 + 40));
        v44 = (const wchar_t *)L"ZSK";
        if ( *(_DWORD *)(a2 + 36) )
          v44 = L"KSK";
        v64 = StringForValue;
        LODWORD(v61) = (unsigned __int16)DnsSign::CDnsKeyPair::GetKeyTag((DnsSign::CDnsKeyPair *)KeyPair);
        v6 = (LDAPModW *)hCertStore;
        if ( (int)StringCchPrintfW(Buffer, 512i64, L"%s %d %S %s", *((_QWORD *)hCertStore + 3), v61, v64, v44) < 0 )
        {
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
          {
            v45 = Dbg_GuidString((const IID *)(a2 + 8));
            WPP_SF_Ss(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x3Bu,
              (__int64)&WPP_4a0a7bf065bf32df4bbeec8f9c7ea0c3_Traceguids,
              (const unsigned __int16 *)v45,
              *((_QWORD *)hCertStore + 2));
          }
          v12 = 87;
          goto LABEL_67;
        }
        memset(v91, 0, sizeof(v91));
        v92 = 0;
        v93 = Buffer;
        CurrentTimePlusOffset((struct _FILETIME *)v91, -3600i64);
        v46 = 31536000i64;
        if ( *(_DWORD *)(a2 + 68) == -1 )
          v46 = 4294967294i64;
        CurrentTimePlusOffset((struct _FILETIME *)&v91[8], v46);
        SelfSignedCertificate = DnsSign::CreateSelfSignedCertificate((WCHAR *)KeyPair, (const FILETIME *)v91, v47);
        v49 = SelfSignedCertificate;
        if ( !SelfSignedCertificate )
        {
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
          {
            v50 = Dbg_GuidString((const IID *)(a2 + 8));
            WPP_SF_Ss(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x3Cu,
              (__int64)&WPP_4a0a7bf065bf32df4bbeec8f9c7ea0c3_Traceguids,
              (const unsigned __int16 *)v50,
              *((_QWORD *)hCertStore + 2));
          }
          v12 = 9110;
          goto LABEL_67;
        }
        KeyPointerString = DnsOls_CreateKeyPointerString(*(char **)(a2 + 24), 0i64, SelfSignedCertificate);
        v72[0] = (__int64)KeyPointerString;
        if ( !KeyPointerString )
        {
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
          {
            v51 = Dbg_GuidString((const IID *)(a2 + 8));
            WPP_SF_Ss(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x3Du,
              (__int64)&WPP_4a0a7bf065bf32df4bbeec8f9c7ea0c3_Traceguids,
              (const unsigned __int16 *)v51,
              *((_QWORD *)hCertStore + 2));
          }
          goto LABEL_97;
        }
        hCertStore = 0i64;
        DnsSign::CCertificateStore::OpenStore(&hCertStore, (const struct DnsSign::CertificateStoreSpec *)&v76, 0);
        v52 = v49;
        v53 = hCertStore;
        if ( !CertAddCertificateContextToStore(hCertStore, v52, 1u, 0i64) )
          DnsSign::CCertificateStore::AddCertificateToStore(v55, v54);
        if ( v53 )
          CertCloseStore(v53, 0);
        v7 = (__int64)KeyPointerString;
      }
      goto LABEL_145;
    }
    v32 = WPP_GLOBAL_Control;
  }
  if ( v32 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)v32 + 17) & 0x200000) != 0
    && *((_BYTE *)v32 + 65) >= 4u )
  {
    if ( (unsigned __int64)KeyPair[6] >= 8 )
      v34 = *(const unsigned __int16 **)v34;
    v56 = Dbg_GuidString(&pclsid);
    WPP_SF_SS(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x40u,
      (__int64)&WPP_4a0a7bf065bf32df4bbeec8f9c7ea0c3_Traceguids,
      v34,
      (__int64)v56);
  }
  v7 = (__int64)DnsOls_CreateKeyPointerString(*(char **)(a2 + 24), &pclsid, 0i64);
  if ( v7 )
  {
    v6 = (LDAPModW *)hCertStore;
LABEL_145:
    if ( (_DWORD)a5 )
      DnsOls_PublishOrRemoveKeyAsTrustAnchor((__int64)v6, (__int64)KeyPair, 0i64, 1);
    goto LABEL_138;
  }
  if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) == 0
    || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
  {
    v6 = (LDAPModW *)hCertStore;
  }
  else
  {
    v57 = Dbg_GuidString((const IID *)(a2 + 8));
    v58 = Dbg_GuidString(&pclsid);
    v6 = (LDAPModW *)hCertStore;
    WPP_SF_DSSs(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x41u,
      (__int64)&WPP_4a0a7bf065bf32df4bbeec8f9c7ea0c3_Traceguids,
      0,
      (__int64)v58,
      (__int64)v57,
      *((_QWORD *)hCertStore + 2));
    v7 = 0i64;
  }
  v12 = 14;
LABEL_138:
  DnsSign::CDnsKeyPair::`scalar deleting destructor'((DnsSign::CDnsKeyPair *)KeyPair);
  if ( v90 >= 8 )
    operator delete(v88);
  v90 = 7i64;
  v89 = 0i64;
  LOWORD(v88) = 0;
  if ( v87 >= 8 )
    operator delete((void *)v85[0]);
  v87 = 7i64;
  v86 = 0i64;
  LOWORD(v85[0]) = 0;
LABEL_148:
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    if ( v6 )
      v59 = (const char *)v6->mod_vals.modv_strvals;
    else
      v59 = 0i64;
    WPP_SF_sdS(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x42u,
      (__int64)&WPP_4a0a7bf065bf32df4bbeec8f9c7ea0c3_Traceguids,
      v59,
      v12,
      v7);
  }
  if ( v74 )
    *v74 = v7;
  else
    Mem_Free((_QWORD *)v7, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\olscore.cpp", 2129);
  Mem_Free(v73, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\olscore.cpp", 2132);
  return v12;
}
// 1400EC5E8: could not find valid save-restore pair for rbp
// 1400EC92E: conditional instruction was optimized away because %var_617.1==0
// 1400EC97E: conditional instruction was optimized away because r14d.4==0
// 1400EC8EB: variable 'v17' is possibly undefined
// 1400ECA7B: variable 'v24' is possibly undefined
// 1400ECDD6: variable 'v62' is possibly undefined
// 1400ECDD6: variable 'v63' is possibly undefined
// 1400ECF2D: variable 'v61' is possibly undefined
// 1400ECFFA: variable 'v47' is possibly undefined
// 1400ED11D: variable 'v55' is possibly undefined
// 1400ED11D: variable 'v54' is possibly undefined
// 140184CA8: using guessed type void __stdcall operator delete(void *);
// 140185140: using guessed type __int64 (__fastcall *_guard_dispatch_icall_fptr)(_QWORD, _QWORD);
// 140192B98: using guessed type wchar_t aMsDnssec[10];
// 140192C68: using guessed type wchar_t aKsk_0[4];
// 1401B6CF0: using guessed type wchar_t *off_1401B6CF0[4];
// 1401B9140: using guessed type int Microsoft_Windows_DNS_Server_ServiceEnableBits;
