//----- (0000000140056B10) ----------------------------------------------------
void __fastcall Log_Message(__int64 a1, int a2, int a3)
{
  int v6; // edx
  unsigned int v7; // r8d
  char v8; // dl
  unsigned int v9; // eax
  const char *v10; // r15
  unsigned int v11; // eax
  bool v12; // cf
  const char *v13; // r8
  const char *v14; // rax
  char *v15; // rax
  char *v16; // r10
  int v17; // r8d
  char *v18; // rbx
  int v19; // eax
  STRSAFE_LPSTR v20; // rdx
  int v21; // r9d
  unsigned __int16 v22; // ax
  char *v23; // rax
  unsigned __int16 v24; // r10
  __int64 v25; // r10
  char *v26; // rdx
  signed __int64 v27; // rax
  char v28; // cl
  size_t v29; // r8
  STRSAFE_LPSTR v30; // rcx
  unsigned __int64 v31; // r8
  int v32; // edx
  int v33; // [rsp+48h] [rbp-91h]
  int v34; // [rsp+58h] [rbp-81h]
  int v35; // [rsp+60h] [rbp-79h]
  int v36; // [rsp+68h] [rbp-71h]
  char *v37; // [rsp+90h] [rbp-49h] BYREF
  char pszDest[80]; // [rsp+A0h] [rbp-39h] BYREF

  if ( a3
    || (v6 = dword_1401B9770, ((a2 != 0 ? 4096 : 0x2000) & dword_1401B9770) != 0)
    && ((*(_BYTE *)(a1 + 1413) != 0 ? 0x8000 : 0x4000) & dword_1401B9770) != 0
    && ((*(char *)(a1 + 6306) < 0 ? 512 : 256) & dword_1401B9770) != 0
    && _bittest(&v6, (*(unsigned __int8 *)(a1 + 6306) >> 3) & 0xF) )
  {
    if ( (!qword_1401B9768 || (unsigned int)DnsAddrArray_ContainsAddr(qword_1401B9768, (_WORD *)(a1 + 64), 3))
      && (unsigned int)Log_EnterLock() )
    {
      if ( a2 || !*(_BYTE *)(a1 + 20) )
      {
        logPrefix("PACKET");
        DnsAddr_WriteIpString_A(pszDest, (char *)(a1 + 64));
        v7 = *(unsigned __int8 *)(a1 + 6306);
        v8 = *(_BYTE *)(a1 + 6307);
        v9 = v8 & 0xF;
        if ( v9 > 0x13 )
          v9 = 19;
        v10 = ResponseCodeStringTable[v9];
        v11 = (v7 >> 3) & 0xF;
        if ( v11 > 6 )
          v11 = 6;
        v36 = (v7 & 1) != 0 ? 68 : 32;
        v35 = (v7 & 2) != 0 ? 84 : 32;
        v12 = (v7 & 0x80u) != 0;
        v34 = (v7 & 4) != 0 ? 65 : 32;
        v13 = "Rcv";
        v33 = OpcodeCharacterTable[v11];
        if ( a2 )
          v13 = "Snd";
        v14 = "UDP";
        if ( *(_BYTE *)(a1 + 1413) )
          v14 = "TCP";
        v15 = sprintfSafeA(
                lpMultiByteStr,
                (unsigned int)qword_1401B8F90,
                "%p %s %s %-15s %04x %c %c [%04x %c%c%c%c %8s] %s ",
                (const void *)a1,
                v14,
                v13,
                pszDest,
                *(unsigned __int16 *)(a1 + 6304),
                v12 ? 82 : 32,
                v33,
                *(unsigned __int16 *)(a1 + 6306),
                v34,
                v35,
                v36,
                v8 < 0 ? 82 : 32,
                v10,
                "      ");
        v37 = v15;
        if ( v15 )
        {
          v16 = lpMultiByteStr;
          v17 = (_DWORD)v15 - (_DWORD)lpMultiByteStr;
          if ( v15 - lpMultiByteStr <= (unsigned __int64)(unsigned int)qword_1401B8F90 )
          {
            lpMultiByteStr = v15;
            LODWORD(qword_1401B8F90) = qword_1401B8F90 - v17;
            v16 = v15;
          }
          v18 = v16 - 7;
          v19 = Dns_WritePacketNameToBuffer(
                  v16,
                  &v37,
                  (unsigned __int8 *)(a1 + 6316),
                  a1 + 6304,
                  *(unsigned __int16 *)(a1 + 6302) + a1 + 6304);
          v20 = lpMultiByteStr;
          v21 = (_DWORD)v37 - (_DWORD)lpMultiByteStr;
          if ( v37 - lpMultiByteStr <= (unsigned __int64)(unsigned int)qword_1401B8F90 )
          {
            v20 = v37;
            lpMultiByteStr = v37;
            LODWORD(qword_1401B8F90) = qword_1401B8F90 - v21;
          }
          if ( v18 && v19 )
          {
            v22 = ntohs(*(_WORD *)(v19 + a1 + 6316));
            pszDest[0] = 0;
            v23 = private_StringForRecordType(v22);
            if ( v23 )
            {
              v25 = 11i64;
              v26 = pszDest;
              v27 = v23 - pszDest;
              do
              {
                if ( v25 == -2147483635 )
                  break;
                v28 = v26[v27];
                if ( !v28 )
                  break;
                *v26++ = v28;
                --v25;
              }
              while ( v25 );
              if ( !v25 )
                --v26;
              *v26 = 0;
            }
            else
            {
              StringCbPrintfA(pszDest, 0xBui64, "%u", v24);
            }
            pszDest[6] = 0;
            v29 = -1i64;
            do
              ++v29;
            while ( pszDest[v29] );
            memcpy_0(v18, pszDest, v29);
            v20 = lpMultiByteStr;
          }
          *(_WORD *)v20 = 2573;
          v30 = lpMultiByteStr;
          v31 = v20 + 2 - lpMultiByteStr;
          if ( v31 <= (unsigned int)qword_1401B8F90 )
          {
            v30 = v20 + 2;
            lpMultiByteStr = v20 + 2;
            LODWORD(qword_1401B8F90) = qword_1401B8F90 - v31;
          }
          if ( (dword_1401B9770 & 0x1000000) != 0 )
          {
            Print_DnsMessage(Log_PrintRoutine, 0i64, v31, a1);
          }
          else
          {
            *(_WORD *)v30 = 2573;
            v32 = (_DWORD)v30 + 2 - (_DWORD)lpMultiByteStr;
            if ( v30 + 2 - lpMultiByteStr <= (unsigned __int64)(unsigned int)qword_1401B8F90 )
            {
              lpMultiByteStr = v30 + 2;
              LODWORD(qword_1401B8F90) = qword_1401B8F90 - v32;
            }
          }
          if ( !a2 )
            *(_BYTE *)(a1 + 20) = 1;
        }
      }
      Log_LeaveLock();
    }
  }
}
// 140056E61: variable 'v24' is possibly undefined
// 14017B700: using guessed type char *ResponseCodeStringTable[20];
// 1401B9768: using guessed type __int64 qword_1401B9768;
// 1401B9770: using guessed type int dword_1401B9770;
