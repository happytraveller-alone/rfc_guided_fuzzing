//----- (0000000140010000) ----------------------------------------------------
__int64 __fastcall loadRegistryZoneExtensions(HKEY hKey, __int64 a2)
{
  unsigned int *AddrArray; // rax
  unsigned int *v5; // rsi
  const unsigned __int16 *v6; // rdx
  int *v7; // rsi
  unsigned int *v8; // rax
  unsigned int *v9; // rsi
  const unsigned __int16 *v10; // rdx
  unsigned int *v11; // rax
  unsigned int *v12; // rsi
  unsigned int i; // ecx
  unsigned __int64 v14; // rax
  int v15; // eax
  char v16; // al
  char v17; // al
  int v18; // edx
  __int64 v19; // rcx
  const unsigned __int16 *v20; // rdx
  const unsigned __int16 *v21; // rdx
  const unsigned __int16 *v22; // rdx
  unsigned int ZoneRegistryExtentions; // edi
  unsigned int v25; // [rsp+58h] [rbp+28h] BYREF

  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_Sq(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x17u,
      (__int64)&WPP_7130a3a4d89e343b55addd3e43accbbd_Traceguids,
      *(const unsigned __int16 **)(a2 + 24));
  }
  AddrArray = Reg_GetAddrArrayEx(hKey, 0i64, "SecondaryServers", 0, 0i64);
  v5 = AddrArray;
  if ( (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0 )
  {
    if ( AddrArray )
    {
      Dbg_DnsAddrArray("Secondary list from registry", (__int64)AddrArray);
    }
    else if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
           && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_S(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x18u,
        (__int64)&WPP_7130a3a4d89e343b55addd3e43accbbd_Traceguids,
        *(const unsigned __int16 **)(a2 + 24));
    }
  }
  v6 = *(const unsigned __int16 **)(a2 + 24);
  *(_QWORD *)(a2 + 552) = v5;
  v7 = (int *)(a2 + 380);
  if ( (unsigned int)Reg_ReadDwordValue(hKey, v6, (const unsigned __int16 *)"SecureSecondaries", 0, (_BYTE *)(a2 + 380)) )
  {
    *v7 = (2 * (*(_DWORD *)(a2 + 388) & 1)) | 1;
  }
  else if ( *v7 && *(_QWORD *)(a2 + 552) )
  {
    *v7 = 2;
  }
  v8 = Reg_GetAddrArrayEx(hKey, 0i64, "NotifyServers", 0, 0i64);
  v9 = v8;
  if ( (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0 )
  {
    if ( v8 )
    {
      Dbg_DnsAddrArray("Notify list from registry", (__int64)v8);
    }
    else if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
           && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_S(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x19u,
        (__int64)&WPP_7130a3a4d89e343b55addd3e43accbbd_Traceguids,
        *(const unsigned __int16 **)(a2 + 24));
    }
  }
  v10 = *(const unsigned __int16 **)(a2 + 24);
  *(_QWORD *)(a2 + 544) = v9;
  Reg_ReadDwordValue(hKey, v10, (const unsigned __int16 *)"NotifyLevel", 1, (_BYTE *)(a2 + 385));
  if ( *(_DWORD *)(a2 + 372) == 3 )
  {
    v11 = Reg_GetAddrArrayEx(hKey, 0i64, "LocalMasterServers", 0, 0i64);
    v12 = v11;
    if ( (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0 )
    {
      if ( v11 )
      {
        Dbg_DnsAddrArray("Local masters for stub zone", (__int64)v11);
      }
      else if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
             && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_S(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x1Au,
          (__int64)&WPP_7130a3a4d89e343b55addd3e43accbbd_Traceguids,
          *(const unsigned __int16 **)(a2 + 24));
      }
    }
    *(_QWORD *)(a2 + 1176) = v12;
    if ( v12 )
    {
      for ( i = 0; i < v12[1]; *(_WORD *)((char *)v12 + v14 + 34) = 13568 )
        v14 = (unsigned __int64)i++ << 6;
    }
  }
  if ( (*(_BYTE *)(a2 + 388) & 1) == 0 )
  {
    Reg_ReadDwordValue(hKey, *(const unsigned __int16 **)(a2 + 24), (const unsigned __int16 *)"AllowUpdate", 0, &v25);
    Zone_SetAllowUpdate(a2, v25);
  }
  if ( (*(_BYTE *)(a2 + 392) & 3) != 0 )
  {
    v15 = Reg_ReadDwordValue(
            hKey,
            *(const unsigned __int16 **)(a2 + 24),
            (const unsigned __int16 *)"LogUpdates",
            0,
            &v25);
    *(_DWORD *)(a2 + 1028) &= ~1u;
    *(_DWORD *)(a2 + 1028) |= v25 & 1;
    if ( v15 )
      *(_DWORD *)(a2 + 1028) ^= (*(_DWORD *)(a2 + 1028) ^ ~*(_DWORD *)(a2 + 388)) & 1;
  }
  if ( *(_DWORD *)(a2 + 372) == 1 )
  {
    if ( (*(_BYTE *)(a2 + 388) & 1) == 0 )
    {
      Reg_ReadDwordValue(hKey, *(const unsigned __int16 **)(a2 + 24), (const unsigned __int16 *)"Aging", 0, &v25);
      v16 = v25;
      *(_DWORD *)(a2 + 396) &= ~1u;
      *(_DWORD *)(a2 + 396) |= v16 & 1;
      Reg_ReadDwordValue(
        hKey,
        *(const unsigned __int16 **)(a2 + 24),
        (const unsigned __int16 *)"NoRefreshInterval",
        0,
        (_BYTE *)(a2 + 992));
      Reg_ReadDwordValue(
        hKey,
        *(const unsigned __int16 **)(a2 + 24),
        (const unsigned __int16 *)"RefreshInterval",
        0,
        (_BYTE *)(a2 + 996));
    }
    if ( !*(_DWORD *)(a2 + 996) )
      *(_DWORD *)(a2 + 996) = dword_1401B990C;
    if ( !*(_DWORD *)(a2 + 992) )
      *(_DWORD *)(a2 + 992) = dword_1401B9910;
  }
  if ( *(_DWORD *)(a2 + 372) == 4 )
  {
    Reg_ReadDwordValue(
      hKey,
      *(const unsigned __int16 **)(a2 + 24),
      (const unsigned __int16 *)"ForwarderTimeout",
      0,
      (_BYTE *)(a2 + 1556));
    Reg_ReadDwordValue(hKey, *(const unsigned __int16 **)(a2 + 24), (const unsigned __int16 *)"ForwarderSlave", 0, &v25);
    v17 = v25;
    *(_DWORD *)(a2 + 1160) &= ~0x20u;
    *(_DWORD *)(a2 + 1160) |= 32 * (v17 & 1);
  }
  if ( (*(_BYTE *)(a2 + 388) & 1) == 0 )
    Reg_ReadDwordValue(
      hKey,
      *(const unsigned __int16 **)(a2 + 24),
      (const unsigned __int16 *)"DcPromoConvert",
      0,
      (_BYTE *)(a2 + 376));
  v18 = *(_DWORD *)(a2 + 372);
  v19 = g_pTrustAnchorsZone;
  if ( (unsigned int)(v18 - 1) <= 1 && (*(_BYTE *)(a2 + 396) & 6) == 0 && a2 != g_pTrustAnchorsZone || !v18 )
  {
    v20 = *(const unsigned __int16 **)(a2 + 24);
    v25 = 0;
    Reg_ReadDwordValue(hKey, v20, (const unsigned __int16 *)"PluginEnabled", 0, &v25);
    *(_DWORD *)(a2 + 396) &= ~0x20000u;
    v19 = g_pTrustAnchorsZone;
    *(_DWORD *)(a2 + 396) |= (v25 != 0) << 17;
  }
  if ( a2 != v19 )
  {
    if ( (*(_BYTE *)(a2 + 388) & 1) == 0 && (*(_BYTE *)(a2 + 396) & 4) == 0 && *(_DWORD *)(a2 + 372) )
    {
      v21 = *(const unsigned __int16 **)(a2 + 24);
      v25 = 0;
      Reg_ReadDwordValue(hKey, v21, (const unsigned __int16 *)"FreezeSOASerialNumber", 0, &v25);
      v19 = g_pTrustAnchorsZone;
      *(_DWORD *)(a2 + 396) ^= (*(_DWORD *)(a2 + 396) ^ ((v25 != 0) << 18)) & 0x40000;
    }
    if ( a2 != v19 && *(_DWORD *)(a2 + 372) <= 3u )
    {
      v22 = *(const unsigned __int16 **)(a2 + 24);
      v25 = 0;
      if ( (unsigned int)Reg_ReadDwordValue(hKey, v22, (const unsigned __int16 *)"EnablePolicies", 0, &v25) )
        *(_DWORD *)(a2 + 304) = 1;
      else
        *(_DWORD *)(a2 + 304) = v25 != 0;
    }
  }
  ZoneRegistryExtentions = DnsOls_LoadZoneRegistryExtentions(hKey, a2);
  if ( ZoneRegistryExtentions )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_Ds(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x1Bu,
        (__int64)&WPP_7130a3a4d89e343b55addd3e43accbbd_Traceguids,
        ZoneRegistryExtentions,
        *(_QWORD *)(a2 + 16));
    }
  }
  else if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
         && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
         && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x1Cu, (__int64)&WPP_7130a3a4d89e343b55addd3e43accbbd_Traceguids);
  }
  return ZoneRegistryExtentions;
}
// 1401B8C48: using guessed type __int64 g_pTrustAnchorsZone;
// 1401B990C: using guessed type int dword_1401B990C;
// 1401B9910: using guessed type int dword_1401B9910;
