//----- (000000014014CE44) ----------------------------------------------------
__int64 __fastcall DnsRRL_Initialize(struct _DnsRRLParams_ *a1, int a2, int a3)
{
  int RegKeyParams; // eax
  unsigned int v7; // ebx
  unsigned int Locks; // eax
  unsigned int updated; // edi
  CDnsClientSubnetRecordsTrie *v11; // rcx
  unsigned __int16 v12; // dx
  int v13; // r9d
  void **v14; // rsi
  _QWORD *v15; // rcx
  _QWORD *v16; // rbx
  _QWORD *v17; // rdi
  CDnsRRLStateHashMap *v18; // rax
  CDnsRRLStateHashMap *v19; // rsi
  CDnsRRLManager *v20; // rax
  CDnsRRLManager *v21; // rbx
  _QWORD *v22; // rax
  char *v23; // rax
  CDnsRRLThreadLocks *v24; // rcx
  struct CDnsRRLThreadLocks *v25; // rbx
  char pExceptionObject[40]; // [rsp+20h] [rbp-28h] BYREF

  RegKeyParams = DnsRRL_ReadRegKeyParams();
  v7 = RegKeyParams;
  if ( RegKeyParams )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 1) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_D(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x1Eu,
        (__int64)&WPP_fb17dad7faab38b20f3316f2d4e4b278_Traceguids,
        RegKeyParams);
    }
    return v7;
  }
  Locks = DnsRRL_InitializeParams();
  updated = Locks;
  if ( Locks )
  {
    v11 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
    {
      goto LABEL_14;
    }
    v12 = 31;
  }
  else if ( a2 || (Locks = DnsRRL_ResetParamsAndRegistry(a1), (updated = Locks) == 0) )
  {
    v17 = operator new(0x20ui64, (const struct std::nothrow_t *)&std::nothrow);
    if ( v17 )
    {
      *v17 = &CDnsRRLStateInfoList::`vftable';
      v17[3] = v17 + 2;
      v17[2] = v17 + 2;
      *((_DWORD *)v17 + 2) = 0;
    }
    else
    {
      v17 = 0i64;
    }
    if ( !v17 )
    {
      v13 = 14;
      updated = 14;
      v11 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
      {
        goto LABEL_14;
      }
      v12 = 33;
      goto LABEL_13;
    }
    v18 = (CDnsRRLStateHashMap *)operator new(0x10ui64, (const struct std::nothrow_t *)&std::nothrow);
    if ( v18 )
      v19 = CDnsRRLStateHashMap::CDnsRRLStateHashMap(v18);
    else
      v19 = 0i64;
    if ( !v19 )
    {
      v13 = 14;
      updated = 14;
      v11 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
      {
        goto LABEL_14;
      }
      v12 = 34;
      goto LABEL_13;
    }
    v20 = (CDnsRRLManager *)operator new(0x80ui64, (const struct std::nothrow_t *)&std::nothrow);
    v21 = v20;
    if ( v20 )
    {
      *((_QWORD *)v20 + 1) = 0i64;
      v22 = operator new(0x18ui64);
      if ( !v22 )
      {
        std::bad_alloc::bad_alloc((std::bad_alloc *)pExceptionObject, 0i64);
        CxxThrowException_0(pExceptionObject, (_ThrowInfo *)&TI2_AVbad_alloc_std__);
      }
      *(_QWORD *)v21 = v22;
      *v22 = v22;
      *(_QWORD *)(*(_QWORD *)v21 + 8i64) = *(_QWORD *)v21;
      InitializeCriticalSectionAndSpinCount((LPCRITICAL_SECTION)((char *)v21 + 88), 0x8000u);
      InitializeCriticalSectionAndSpinCount((LPCRITICAL_SECTION)((char *)v21 + 48), 0x8000u);
      *((_DWORD *)v21 + 7) = 0;
      *((_DWORD *)v21 + 6) = 0;
      *((_QWORD *)v21 + 4) = v17;
      *((_QWORD *)v21 + 5) = v19;
    }
    else
    {
      v21 = 0i64;
    }
    g_DnsRRLManager = v21;
    if ( !v21 )
    {
      v13 = 14;
      updated = 14;
      v11 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
      {
        goto LABEL_14;
      }
      v12 = 35;
      goto LABEL_13;
    }
    updated = CDnsRRLManager::UpdateFreeListWithNodes(v21, gNumMinNodesInFreeList);
    if ( updated )
      goto LABEL_14;
    v23 = (char *)operator new(0x38ui64, (const struct std::nothrow_t *)&std::nothrow);
    v25 = (struct CDnsRRLThreadLocks *)v23;
    if ( v23 )
    {
      *((_QWORD *)v23 + 1) = 0i64;
      *(_DWORD *)v23 = a3;
      InitializeCriticalSectionAndSpinCount((LPCRITICAL_SECTION)(v23 + 16), 0x8000u);
    }
    else
    {
      v25 = 0i64;
    }
    g_DnsRRLThreadLock = v25;
    if ( !v25 )
    {
      v13 = 14;
      updated = 14;
      v11 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
      {
        goto LABEL_14;
      }
      v12 = 36;
      goto LABEL_13;
    }
    Locks = CDnsRRLThreadLocks::CreateLocks(v24);
    updated = Locks;
    if ( !Locks )
      return 0i64;
    v11 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
    {
      goto LABEL_14;
    }
    v12 = 37;
  }
  else
  {
    v11 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
    {
      goto LABEL_14;
    }
    v12 = 32;
  }
  v13 = Locks;
LABEL_13:
  WPP_SF_D(*((_QWORD *)v11 + 7), v12, (__int64)&WPP_fb17dad7faab38b20f3316f2d4e4b278_Traceguids, v13);
LABEL_14:
  if ( g_DnsRRLConfigParams )
    operator delete(g_DnsRRLConfigParams);
  if ( g_DnsRRLManager )
  {
    CDnsRRLManager::RemoveNodeFromFreeList((void ***)g_DnsRRLManager, 0xFFFFFFFF);
    v14 = (void **)g_DnsRRLManager;
    if ( g_DnsRRLManager )
    {
      CDnsRRLManager::RemoveNodeFromFreeList((void ***)g_DnsRRLManager, 0xFFFFFFFF);
      DeleteCriticalSection((LPCRITICAL_SECTION)(v14 + 11));
      DeleteCriticalSection((LPCRITICAL_SECTION)(v14 + 6));
      v15 = *(_QWORD **)*v14;
      *(_QWORD *)*v14 = *v14;
      *((_QWORD *)*v14 + 1) = *v14;
      v14[1] = 0i64;
      if ( v15 != *v14 )
      {
        do
        {
          v16 = (_QWORD *)*v15;
          operator delete(v15);
          v15 = v16;
        }
        while ( v16 != *v14 );
      }
      operator delete(*v14);
      operator delete(v14);
    }
  }
  Reg_DeleteRRL();
  return updated;
}
// 14014D201: variable 'v24' is possibly undefined
// 140172158: using guessed type void *CDnsRRLStateInfoList::`vftable';
// 140184CA8: using guessed type void __stdcall operator delete(void *);
// 1401B9258: using guessed type struct CDnsRRLThreadLocks *g_DnsRRLThreadLock;
