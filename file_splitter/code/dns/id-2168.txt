//----- (0000000140112488) ----------------------------------------------------
__int64 __fastcall Get_NextElement_ServerScopeMap(__int64 a1, __int64 a2, _DWORD *a3)
{
  __int64 v3; // rbx
  __int64 **v6; // rdx
  __int64 *v7; // rax
  __int64 **v8; // rax
  __int64 v9; // rcx
  __int64 i; // rcx
  __int64 *v12; // [rsp+30h] [rbp+8h] BYREF
  __int64 v13; // [rsp+38h] [rbp+10h] BYREF

  v13 = a2;
  v3 = 0i64;
  if ( a3 )
    *a3 = 0;
  if ( a2 )
  {
    v8 = std::_Tree<std::_Tmap_traits<unsigned short *,_DnsServerScopeInfo_ *,bool (*)(unsigned short *,unsigned short *),std::allocator<std::pair<unsigned short * const,_DnsServerScopeInfo_ *>>,0>>::find(
           a1,
           &v12,
           &v13);
    v6 = *(__int64 ***)(a1 + 8);
    v7 = *v8;
    if ( v7 == (__int64 *)v6 )
    {
      if ( a3 )
        *a3 = 9959;
    }
    else if ( !*((_BYTE *)v7 + 41) )
    {
      v9 = v7[2];
      if ( *(_BYTE *)(v9 + 41) )
      {
        for ( i = v7[1]; !*(_BYTE *)(i + 41) && v7 == *(__int64 **)(i + 16); i = *(_QWORD *)(i + 8) )
          v7 = (__int64 *)i;
        v7 = (__int64 *)i;
      }
      else
      {
        do
        {
          v7 = (__int64 *)v9;
          v9 = *(_QWORD *)v9;
        }
        while ( !*(_BYTE *)(v9 + 41) );
      }
    }
  }
  else
  {
    v6 = *(__int64 ***)(a1 + 8);
    v7 = *v6;
  }
  if ( v7 != (__int64 *)v6 )
    return v7[4];
  return v3;
}
