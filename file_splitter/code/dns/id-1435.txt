//----- (00000001400B3364) ----------------------------------------------------
_BYTE *__fastcall NTree_FindOrCreateChildNodeEx(
        __int64 a1,
        void *a2,
        unsigned int a3,
        int a4,
        __int64 a5,
        unsigned int a6,
        __int64 *a7,
        int a8,
        __int64 a9)
{
  _BYTE *v9; // r15
  void *v10; // r13
  __int64 v11; // rbx
  unsigned __int64 v13; // r12
  __int64 v14; // rcx
  CDnsClientSubnetRecordsTrie *v15; // rcx
  void *v16; // rax
  __int64 v17; // rdx
  __int64 v18; // r8
  _BYTE **v19; // r12
  unsigned int v20; // ebx
  __int64 v21; // r13
  unsigned __int64 v22; // rsi
  unsigned int v23; // eax
  unsigned int v24; // r12d
  unsigned int v25; // r13d
  const char *v26; // rax
  __int64 v27; // rcx
  CDnsClientSubnetRecordsTrie *v28; // rax
  const void *v29; // rbx
  const char *v30; // rax
  const char *v31; // rax
  unsigned int v32; // esi
  _BYTE *v33; // r10
  unsigned __int8 v34; // r8
  __int64 v35; // r10
  __int64 *v36; // rcx
  __int64 *v37; // rbx
  void *v38; // rbx
  void *v39; // rsi
  const char *v40; // rax
  _BYTE *v41; // rax
  char *v42; // rcx
  _QWORD *Node; // rax
  __int64 v44; // rbx
  __int64 v45; // rsi
  __int64 v46; // rax
  _BYTE **v47; // r15
  __int64 v48; // rsi
  __int64 v49; // rcx
  __int64 *v50; // r10
  _BYTE *v51; // r10
  unsigned __int8 v52; // r8
  int v53; // eax
  __int64 v54; // r10
  __int64 *v55; // rax
  __int64 v56; // rsi
  __int64 v57; // rcx
  _BYTE *v59; // rcx
  __int64 v60; // r10
  int v61; // eax
  __int64 v62; // r10
  __int64 v63; // rcx
  unsigned int v64; // [rsp+40h] [rbp-A9h] BYREF
  unsigned int v65; // [rsp+44h] [rbp-A5h] BYREF
  __int64 v66; // [rsp+48h] [rbp-A1h]
  void *v67; // [rsp+50h] [rbp-99h]
  _BYTE *v68; // [rsp+58h] [rbp-91h] BYREF
  int v69; // [rsp+60h] [rbp-89h]
  _BYTE *v70; // [rsp+68h] [rbp-81h] BYREF
  __int64 *v71; // [rsp+70h] [rbp-79h] BYREF
  unsigned int Size; // [rsp+78h] [rbp-71h]
  int Size_4; // [rsp+7Ch] [rbp-6Dh]
  __int64 *v74; // [rsp+80h] [rbp-69h]
  __int64 v75; // [rsp+88h] [rbp-61h]
  _BYTE *v76; // [rsp+90h] [rbp-59h]
  char Src[64]; // [rsp+A0h] [rbp-49h] BYREF

  v9 = 0i64;
  v10 = a2;
  v11 = a9;
  v75 = 0i64;
  v13 = a3;
  v67 = a2;
  Size_4 = a4;
  Size = a3;
  v64 = a6;
  v74 = a7;
  v66 = a9;
  memset_0(Src, 0, sizeof(Src));
  v69 = 0;
  v76 = 0i64;
  if ( !a8 )
  {
    v14 = DbaseLock;
LABEL_5:
    v65 = -1;
    acquireRead(v14, 0xFFFFFFFF, &v65);
    goto LABEL_6;
  }
  if ( a8 == 1 )
  {
    v14 = a9;
    goto LABEL_5;
  }
LABEL_6:
  v15 = WPP_GLOBAL_Control;
  if ( (*((_BYTE *)WPP_GLOBAL_Control + 68) & 8) != 0 && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 6u )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
    {
      v16 = FormatLabelA(v13, v10);
      WPP_SF_sdqs(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        v17,
        v18,
        (const char *)(a1 + 102),
        *(_DWORD *)(a1 + 84),
        *(_QWORD *)(a1 + 56),
        (__int64)v16);
    }
    Dbg_SiblingList("Child list before lookup:", *(_BYTE **)(a1 + 32));
    v15 = WPP_GLOBAL_Control;
  }
  if ( a1 )
  {
    v19 = (_BYTE **)(a1 + 32);
    if ( *(_QWORD *)(a1 + 32) )
    {
      if ( (*((_BYTE *)v15 + 68) & 8) != 0 && *((_BYTE *)v15 + 65) >= 6u && !*(_DWORD *)(a1 + 84) )
      {
        if ( v15 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
          WPP_SF_sq(
            *((_QWORD *)v15 + 7),
            0x36u,
            (__int64)&WPP_800d841ceeab39a775299d72a602aebb_Traceguids,
            (const char *)(a1 + 102));
        Dbg_SiblingList("Child list of parent with zero children:\n", *v19);
      }
    }
    else if ( *(_DWORD *)(a1 + 84) )
    {
      if ( v15 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)v15 + 68) & 8) != 0
        && *((_BYTE *)v15 + 65) >= 2u )
      {
        WPP_SF_sqD(
          *((_QWORD *)v15 + 7),
          0x35u,
          (__int64)&WPP_800d841ceeab39a775299d72a602aebb_Traceguids,
          (const char *)(a1 + 102));
      }
      *(_DWORD *)(a1 + 84) = 0;
    }
    if ( *v19 || Size_4 || a8 != 1 && a7 )
    {
      v20 = 3;
      if ( !a8 )
      {
        v21 = *(_QWORD *)(a1 + 56);
        v75 = v21;
        if ( v21 && *(_DWORD *)(v21 + 372) == 1 )
          v20 = dword_1401B9854;
        v10 = v67;
      }
      v22 = Size;
      v23 = Dns_DowncaseNameLabel(Src, (unsigned __int8 *)v10, Size, (const char *)v20);
      v24 = v23;
      if ( !v23 )
      {
        v25 = v22;
        goto LABEL_58;
      }
      if ( v23 == -1 )
      {
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 8) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
        {
          v26 = (const char *)FormatLabelA(v22, v10);
          WPP_SF_sd(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x38u,
            (__int64)&WPP_800d841ceeab39a775299d72a602aebb_Traceguids,
            v26);
        }
        SetLastError(0x7Bu);
        goto LABEL_42;
      }
      v25 = v23;
      if ( v23 == (_DWORD)v22 )
      {
        v28 = WPP_GLOBAL_Control;
      }
      else
      {
        v28 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
          goto LABEL_58;
        if ( (*((_BYTE *)WPP_GLOBAL_Control + 68) & 8) != 0 )
        {
          v29 = v67;
          if ( *((_BYTE *)WPP_GLOBAL_Control + 65) >= 3u )
          {
            v30 = (const char *)FormatLabelA(v22, v67);
            WPP_SF_sdD(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x39u,
              (__int64)&WPP_800d841ceeab39a775299d72a602aebb_Traceguids,
              v30);
            v28 = WPP_GLOBAL_Control;
          }
          goto LABEL_54;
        }
      }
      v29 = v67;
LABEL_54:
      if ( v28 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)v28 + 68) & 8) != 0
        && *((_BYTE *)v28 + 65) >= 5u )
      {
        v31 = (const char *)FormatLabelA(v22, v29);
        WPP_SF_ssdd(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x3Au,
          (__int64)&WPP_800d841ceeab39a775299d72a602aebb_Traceguids,
          v31,
          (__int64)Src);
      }
LABEL_58:
      v32 = ((*(_WORD *)Src & 0xFF00 | (*(_DWORD *)Src << 16)) << 8) | ((*(unsigned __int16 *)&Src[2] | *(_DWORD *)Src & 0xFF0000u) >> 8);
      v65 = v32;
      if ( v25 < 4 )
      {
        v32 &= QuickCompareMask[v25];
        v65 = v32;
      }
      v68 = 0i64;
      v33 = *(_BYTE **)(a1 + 32);
      v71 = (__int64 *)(a1 + 32);
      v70 = v33;
      if ( v33 )
      {
        do
        {
          if ( *v33 != 0xFF )
            break;
          v34 = v33[2];
          v68 = v33;
          v76 = v33;
          v69 = NTree_HashTableIndexEx(0i64, (unsigned __int8 *)Src, v34);
          v36 = (__int64 *)(v35 + 16 + 8i64 * v69);
          v33 = (_BYTE *)*v36;
          v71 = v36;
        }
        while ( v33 );
        v32 = v65;
        v70 = v33;
      }
      v37 = v74;
      walkBinaryTree(v32, Src, v25, &v68, (__int64 *)&v70, &v71, v74);
      v9 = v70;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 8) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
      {
        if ( v37 && *v37 )
          v38 = FormatLabelA(*(unsigned __int8 *)(*v37 + 101), (const void *)(*v37 + 102));
        else
          v38 = 0i64;
        if ( v9 )
          v39 = FormatLabelA((unsigned __int8)v9[101], v9 + 102);
        else
          v39 = 0i64;
        v40 = (const char *)FormatLabelA(Size, v67);
        WPP_SF_sss(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x3Bu,
          (__int64)&WPP_800d841ceeab39a775299d72a602aebb_Traceguids,
          v40,
          (__int64)v39,
          (__int64)v38);
        v32 = v65;
        v37 = v74;
      }
      if ( v9 )
        goto LABEL_42;
      if ( !Size_4 )
      {
        if ( v37 )
        {
          v41 = v68;
          if ( !*v37 && v68 && *v68 == 0xFF )
          {
            *v37 = NTree_PreviousHashedNode((__int64)v68, 0i64, v69);
            v41 = 0i64;
          }
          if ( v75 && (*(_BYTE *)(v75 + 396) & 0x20) != 0 )
            NTree_FindBestNSEC3Node(v37, (__int64)v41, a1, 0);
          else
            NTree_FindBestNSECNode((__int64 **)v37, (__int64)v41, a1, 0);
        }
        goto LABEL_42;
      }
      if ( v24 )
      {
        if ( v25 > 0x3F )
          goto LABEL_42;
        v42 = Src;
      }
      else
      {
        if ( v25 > 0x3F )
          goto LABEL_42;
        v42 = (char *)v67;
      }
      Node = NTree_CreateNode(v42, Src, v25, v64, a8);
      v44 = (__int64)Node;
      if ( Node )
      {
        *((_DWORD *)Node + 18) = v32;
        v45 = DbaseLock;
        *Node = a1;
        *((_BYTE *)Node + 100) = *(_BYTE *)(a1 + 100) + 1;
        if ( a8 )
        {
          if ( a8 != 1 )
          {
LABEL_106:
            if ( v76 && *v76 == 0xFF )
            {
              v47 = (_BYTE **)(a1 + 32);
              v68 = v76;
              v50 = (__int64 *)&v76[8 * v69 + 16];
              v71 = v50;
            }
            else
            {
              v68 = 0i64;
              v47 = (_BYTE **)(a1 + 32);
              v50 = (__int64 *)(a1 + 32);
              v71 = (__int64 *)(a1 + 32);
            }
            v51 = (_BYTE *)*v50;
            v70 = v51;
            if ( v51 )
            {
              do
              {
                if ( *v51 != 0xFF )
                  break;
                v52 = v51[2];
                v68 = v51;
                v53 = NTree_HashTableIndexEx(0i64, (unsigned __int8 *)Src, v52);
                v55 = (__int64 *)(v54 + 16 + 8i64 * v53);
                v51 = (_BYTE *)*v55;
                v71 = v55;
              }
              while ( v51 );
              v70 = v51;
            }
            walkBinaryTree(v65, Src, v25, &v68, (__int64 *)&v70, &v71, v74);
            v56 = (__int64)v70;
            if ( v70 )
            {
              if ( a8 )
              {
                if ( a8 != 1 )
                  return (_BYTE *)v56;
                v57 = v66;
              }
              else
              {
                v57 = DbaseLock;
                v70[98] = CurrentTimeoutBin;
              }
              v64 = -1;
              releaseUpdate(v57, &v64, 1);
              return (_BYTE *)v56;
            }
            if ( !a8 )
              goto LABEL_122;
            if ( a8 != 1 )
              goto LABEL_123;
            v48 = v66;
LABEL_129:
            v64 = -1;
            acquireWrite(v48, 0xFFFFFFFF, &v64);
LABEL_124:
            *v71 = v44;
            *(_QWORD *)(v44 + 8) = v68;
            v59 = *v47;
            ++*(_DWORD *)(a1 + 84);
            if ( *v59 == 0xFF )
            {
              v60 = v44;
              do
                v60 = *(_QWORD *)(v60 + 8);
              while ( v60 && *(_BYTE *)v60 != 0xFF );
              v61 = NTree_HashTableIndexEx(v44, 0i64, *(_BYTE *)(v60 + 2));
              if ( ++*(_DWORD *)(v62 + 4i64 * v61 + 2064) < 0x40u )
              {
LABEL_136:
                if ( a8 )
                {
                  if ( a8 == 1 )
                    Lock_ReleaseWrite(v48);
                }
                else
                {
                  Dbase_UnlockEx(0i64, 2, (__int64)"ds\\dns\\server\\server\\tree.c", 72);
                }
                if ( (*((_BYTE *)WPP_GLOBAL_Control + 68) & 8) != 0 && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 6u )
                  Dbg_SiblingList("Full sibling list after insert:", *v47);
                if ( a8 )
                {
                  if ( a8 != 1 )
                  {
LABEL_148:
                    NTree_VerifyNodeInSiblingList((_QWORD *)v44);
                    return (_BYTE *)v44;
                  }
                  v63 = v48;
                }
                else
                {
                  v63 = DbaseLock;
                  *(_BYTE *)(v44 + 98) = CurrentTimeoutBin;
                }
                v64 = -1;
                releaseUpdate(v63, &v64, 1);
                goto LABEL_148;
              }
              v59 = *(_BYTE **)(v62 + 8i64 * v61 + 16);
            }
            else if ( *(_DWORD *)(a1 + 84) <= 0x40u )
            {
              goto LABEL_136;
            }
            NTree_CreateHashAtNode((__int64)v59);
            goto LABEL_136;
          }
          v48 = v66;
          v64 = -1;
          if ( v66 && (((unsigned int)getTlsCounter(v66, 1, &v64) + 1) & 0xFFFFFFFE) != 0 )
          {
            v64 = -1;
            releaseRead(v48, &v64, 1);
            v64 = -1;
            acquireUpdate(v48, 0xFFFFFFFF, &v64, 1);
            v47 = (_BYTE **)(a1 + 32);
            goto LABEL_129;
          }
          v64 = -1;
          releaseRead(v48, &v64, 1);
          v49 = v48;
        }
        else
        {
          v46 = a5;
          if ( !a5 )
            v46 = *(_QWORD *)(a1 + 56);
          *(_QWORD *)(v44 + 56) = v46;
          v64 = -1;
          if ( v45 && (unsigned int)getTlsCounter(v45, 1, &v64) - 1 <= 0xFFFFFFFD )
          {
            v64 = -1;
            releaseRead(v45, &v64, 1);
            v64 = -1;
            acquireUpdate(DbaseLock, 0xFFFFFFFF, &v64, 1);
            v47 = (_BYTE **)(a1 + 32);
LABEL_122:
            Dbase_LockEx(0i64, 2, (__int64)"ds\\dns\\server\\server\\tree.c", 19);
LABEL_123:
            v48 = v66;
            goto LABEL_124;
          }
          v64 = -1;
          releaseRead(v45, &v64, 1);
          v49 = DbaseLock;
        }
        v64 = -1;
        acquireUpdate(v49, 0xFFFFFFFF, &v64, 1);
        goto LABEL_106;
      }
LABEL_42:
      v11 = v66;
    }
  }
  if ( !a8 )
  {
    if ( v9 )
      v9[98] = CurrentTimeoutBin;
    v27 = DbaseLock;
    goto LABEL_151;
  }
  if ( a8 == 1 )
  {
    v27 = v11;
LABEL_151:
    v64 = -1;
    releaseRead(v27, &v64, 1);
  }
  return v9;
}
// 1400B342D: conditional instruction was optimized away because al.1>=6u
// 1400B34F4: conditional instruction was optimized away because al.1>=6u
// 1400B3A33: conditional instruction was optimized away because edi.4>=2u
// 1400B345F: variable 'v17' is possibly undefined
// 1400B345F: variable 'v18' is possibly undefined
// 1400B3760: variable 'v35' is possibly undefined
// 1400B3ACC: variable 'v54' is possibly undefined
// 1400B3BE7: variable 'v62' is possibly undefined
// 140191850: using guessed type _DWORD QuickCompareMask[4];
// 1401B9854: using guessed type int dword_1401B9854;
// 1401BA4B8: using guessed type char CurrentTimeoutBin;
// 1401EC5E8: using guessed type __int64 DbaseLock;
// 1400B3364: using guessed type CHAR Src[64];
