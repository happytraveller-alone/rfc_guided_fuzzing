//----- (000000014016EF68) ----------------------------------------------------
__int64 WPP_SF_HHLsLsLLLLLLsHHHH(__int64 a1, __int64 a2, __int16 a3, __int16 a4, ...)
{
  __int64 v4; // r8
  __int64 v5; // r9
  __int64 v6; // r9
  __int64 v7; // r10
  __int64 v8; // r10
  __int64 v9; // r8
  const char *v10; // rdx
  const char *v11; // rax
  const char *v12; // rcx
  __int16 v14; // [rsp+158h] [rbp-60h] BYREF
  __int16 v15; // [rsp+160h] [rbp-58h] BYREF
  __int64 v16; // [rsp+168h] [rbp-50h] BYREF
  va_list va; // [rsp+168h] [rbp-50h]
  const char *v18; // [rsp+170h] [rbp-48h]
  __int64 v19; // [rsp+178h] [rbp-40h] BYREF
  va_list va1; // [rsp+178h] [rbp-40h]
  const char *v21; // [rsp+180h] [rbp-38h]
  __int64 v22; // [rsp+188h] [rbp-30h] BYREF
  va_list va2; // [rsp+188h] [rbp-30h]
  __int64 v24; // [rsp+190h] [rbp-28h] BYREF
  va_list va3; // [rsp+190h] [rbp-28h]
  __int64 v26; // [rsp+198h] [rbp-20h] BYREF
  va_list va4; // [rsp+198h] [rbp-20h]
  __int64 v28; // [rsp+1A0h] [rbp-18h] BYREF
  va_list va5; // [rsp+1A0h] [rbp-18h]
  __int64 v30; // [rsp+1A8h] [rbp-10h] BYREF
  va_list va6; // [rsp+1A8h] [rbp-10h]
  __int64 v32; // [rsp+1B0h] [rbp-8h] BYREF
  va_list va7; // [rsp+1B0h] [rbp-8h]
  const char *v34; // [rsp+1B8h] [rbp+0h]
  __int64 v35; // [rsp+1C0h] [rbp+8h] BYREF
  va_list va8; // [rsp+1C0h] [rbp+8h]
  __int64 v37; // [rsp+1C8h] [rbp+10h] BYREF
  va_list va9; // [rsp+1C8h] [rbp+10h]
  __int64 v39; // [rsp+1D0h] [rbp+18h] BYREF
  va_list va10; // [rsp+1D0h] [rbp+18h]
  va_list va11; // [rsp+1D8h] [rbp+20h] BYREF

  va_start(va11, a4);
  va_start(va10, a4);
  va_start(va9, a4);
  va_start(va8, a4);
  va_start(va7, a4);
  va_start(va6, a4);
  va_start(va5, a4);
  va_start(va4, a4);
  va_start(va3, a4);
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v16 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, const char *);
  va_copy(va2, va1);
  v19 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, const char *);
  va_copy(va3, va2);
  v22 = va_arg(va3, _QWORD);
  va_copy(va4, va3);
  v24 = va_arg(va4, _QWORD);
  va_copy(va5, va4);
  v26 = va_arg(va5, _QWORD);
  va_copy(va6, va5);
  v28 = va_arg(va6, _QWORD);
  va_copy(va7, va6);
  v30 = va_arg(va7, _QWORD);
  va_copy(va8, va7);
  v32 = va_arg(va8, _QWORD);
  v34 = va_arg(va8, const char *);
  va_copy(va9, va8);
  v35 = va_arg(va9, _QWORD);
  va_copy(va10, va9);
  v37 = va_arg(va10, _QWORD);
  va_copy(va11, va10);
  v39 = va_arg(va11, _QWORD);
  v15 = a4;
  v14 = a3;
  v4 = -1i64;
  if ( v34 )
  {
    v5 = -1i64;
    do
      ++v5;
    while ( v34[v5] );
    v6 = v5 + 1;
  }
  else
  {
    v6 = 5i64;
  }
  if ( v21 )
  {
    v7 = -1i64;
    do
      ++v7;
    while ( v21[v7] );
    v8 = v7 + 1;
  }
  else
  {
    v8 = 5i64;
  }
  if ( v18 )
  {
    do
      ++v4;
    while ( v18[v4] );
    v9 = v4 + 1;
  }
  else
  {
    v9 = 5i64;
  }
  v10 = "NULL";
  v11 = "NULL";
  if ( v34 )
    v11 = v34;
  v12 = "NULL";
  if ( v21 )
    v12 = v21;
  if ( v18 )
    v10 = v18;
  return FastWppTraceMessage(
           (__int64)&WPP_7f900513327334733b8f3a4951ec5607_Traceguids,
           0x66u,
           &v14,
           2i64,
           &v15,
           2i64,
           va,
           4i64,
           v10,
           v9,
           va1,
           4i64,
           v12,
           v8,
           va2,
           4i64,
           va3,
           4i64,
           va4,
           4i64,
           va5,
           4i64,
           va6,
           4i64,
           va7,
           4i64,
           v11,
           v6,
           va8,
           2i64,
           va9,
           2i64,
           va10,
           2i64,
           va11,
           2i64,
           0i64);
}
