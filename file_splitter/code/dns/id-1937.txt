//----- (00000001400EBE6C) ----------------------------------------------------
__int64 __fastcall DnsOls_RefreshKeysForZone(struct _zone_info *a1, _QWORD *a2)
{
  __int64 v2; // rsi
  unsigned int v4; // r13d
  CDnsClientSubnetRecordsTrie *v6; // rcx
  const char *v7; // r9
  __int64 *i; // rdi
  char *v10; // rax
  unsigned __int16 v11; // dx
  char *v12; // rax
  const char *v13; // r9
  __int64 *v14; // r12
  signed int refreshed; // eax
  __int64 v16; // r15
  unsigned __int64 v17; // rcx
  __int64 v18; // r15
  _QWORD *v19; // rdx
  __int64 *v20; // rax
  unsigned __int16 *v21; // rbx
  __int64 v22; // rdx
  _QWORD *v23; // rdi
  __int16 v24; // [rsp+40h] [rbp-40h] BYREF
  char v25; // [rsp+42h] [rbp-3Eh]
  __int64 v26; // [rsp+48h] [rbp-38h] BYREF
  __int128 v27; // [rsp+50h] [rbp-30h] BYREF
  unsigned __int16 *v28[3]; // [rsp+60h] [rbp-20h] BYREF

  v2 = 0i64;
  v4 = 0;
  v6 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    if ( a1 )
      v7 = (const char *)*((_QWORD *)a1 + 2);
    else
      v7 = 0i64;
    WPP_SF_s(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x27u, (__int64)&WPP_4a0a7bf065bf32df4bbeec8f9c7ea0c3_Traceguids, v7);
    v6 = WPP_GLOBAL_Control;
  }
  if ( !a1 )
  {
    v4 = 87;
    goto LABEL_10;
  }
  for ( i = (__int64 *)*((_QWORD *)a1 + 142); ; i = (__int64 *)*i )
  {
    if ( !i )
      goto LABEL_10;
    if ( (*((_BYTE *)a1 + 388) & 1) == 0 )
      break;
    if ( *((_DWORD *)i + 8) || (*((_BYTE *)a1 + 1040) & 2) != 0 )
      goto LABEL_33;
    if ( v6 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)v6 + 17) & 0x200000) != 0
      && *((_BYTE *)v6 + 65) >= 5u )
    {
      v10 = Dbg_GuidString((const IID *)(i + 1));
      v11 = 40;
LABEL_26:
      WPP_SF_S(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        v11,
        (__int64)&WPP_4a0a7bf065bf32df4bbeec8f9c7ea0c3_Traceguids,
        (const unsigned __int16 *)v10);
LABEL_56:
      v6 = WPP_GLOBAL_Control;
      continue;
    }
LABEL_57:
    ;
  }
  if ( (*((_BYTE *)a1 + 1040) & 2) == 0 && *((_DWORD *)i + 9) )
  {
    if ( v6 == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_DWORD *)v6 + 17) & 0x200000) == 0
      || *((_BYTE *)v6 + 65) < 5u )
    {
      goto LABEL_57;
    }
    v10 = Dbg_GuidString((const IID *)(i + 1));
    v11 = 41;
    goto LABEL_26;
  }
LABEL_33:
  if ( v6 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)v6 + 17) & 0x200000) != 0
    && *((_BYTE *)v6 + 65) >= 4u )
  {
    v12 = Dbg_GuidString((const IID *)(i + 1));
    v13 = "ZSK";
    if ( *((_DWORD *)i + 9) )
      v13 = "KSK";
    WPP_SF_sS(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x2Au,
      (__int64)&WPP_4a0a7bf065bf32df4bbeec8f9c7ea0c3_Traceguids,
      v13,
      (__int64)v12);
  }
  *(_QWORD *)&v27 = 0i64;
  v14 = i + 19;
  while ( *((_DWORD *)v14 + 2) == 4 )
  {
LABEL_55:
    v14 += 3;
    *(_QWORD *)&v27 = v27 + 1;
    if ( (unsigned __int64)v27 >= 3 )
      goto LABEL_56;
  }
  refreshed = DnsOls_RefreshDnsKeyPairObject((WCHAR *)a1, (struct _dnsskd *)i, (struct _dnsskdkey *)(v14 - 1), 0);
  v4 = refreshed;
  if ( !refreshed )
  {
    v16 = *v14;
    if ( *v14 && a2 )
    {
      v17 = a2[1];
      v26 = *v14;
      if ( (unsigned __int64)&v26 >= v17 || *a2 > (unsigned __int64)&v26 )
      {
        if ( v17 == a2[2] )
          std::vector<DnsSign::CDnsKeyPair *>::_Reserve(a2);
        v20 = (__int64 *)a2[1];
        if ( v20 )
          *v20 = v16;
      }
      else
      {
        v18 = ((__int64)&v26 - *a2) >> 3;
        if ( v17 == a2[2] )
          std::vector<DnsSign::CDnsKeyPair *>::_Reserve(a2);
        v19 = (_QWORD *)a2[1];
        if ( v19 )
          *v19 = *(_QWORD *)(*a2 + 8 * v18);
      }
      a2[1] += 8i64;
    }
    goto LABEL_55;
  }
  if ( a2 )
  {
    v28[0] = *((unsigned __int16 **)a1 + 3);
    *(_QWORD *)&v27 = 0i64;
    v21 = (unsigned __int16 *)&Annotation;
    v24 = 257;
    v25 = 4;
    v28[2] = (unsigned __int16 *)refreshed;
    StringFromGuid((const IID *)(i + 1), (void **)&v27);
    v23 = (_QWORD *)v27;
    if ( (_QWORD)v27 )
      v21 = (unsigned __int16 *)v27;
    v28[1] = v21;
    v27 = DNS_EVENT_DNSSEC_SIGNING_KEY_DESCRIPTOR_UNAVAILABLE;
    Eventlog_LogEvent((__int64)&v27, v22, 3u, v28, (unsigned __int8 *)&v24, 0, 0, 0i64);
    Mem_Free(v23, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\olscore.cpp", 1263);
  }
  v6 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control )
  {
    if ( (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0 && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      WPP_SF_DSs(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x2Bu,
        (__int64)&WPP_4a0a7bf065bf32df4bbeec8f9c7ea0c3_Traceguids,
        v4,
        *(v14 - 1),
        *((_QWORD *)a1 + 2));
      v6 = WPP_GLOBAL_Control;
    }
LABEL_10:
    if ( v6 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)v6 + 17) & 0x200000) != 0
      && *((_BYTE *)v6 + 65) >= 4u )
    {
      if ( a1 )
        v2 = *((_QWORD *)a1 + 2);
      WPP_SF_Dds(*((_QWORD *)v6 + 7), 0x2Cu, (__int64)&WPP_4a0a7bf065bf32df4bbeec8f9c7ea0c3_Traceguids, 0, v4, v2);
    }
  }
  return v4;
}
// 1400EC1C6: variable 'v22' is possibly undefined
// 140186F70: using guessed type __int128 DNS_EVENT_DNSSEC_SIGNING_KEY_DESCRIPTOR_UNAVAILABLE;
