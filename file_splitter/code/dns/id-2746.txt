//----- (00000001401448D0) ----------------------------------------------------
__int64 __fastcall CDNSPolicyCriteriaTime::DeleteCriteria(CDNSPolicyCriteriaTime *this)
{
  _QWORD **v1; // rax
  _QWORD *v3; // rcx
  _QWORD *v4; // rbx
  _QWORD **v5; // rax
  _QWORD *v6; // rcx
  _QWORD *v7; // rbx
  const void *v8; // rbx
  const void *v9; // rdx
  _QWORD *v10; // rsi
  bool v11; // cf
  __int64 result; // rax

  v1 = (_QWORD **)*((_QWORD *)this + 8);
  v3 = *v1;
  *v1 = v1;
  *(_QWORD *)(*((_QWORD *)this + 8) + 8i64) = *((_QWORD *)this + 8);
  *((_QWORD *)this + 9) = 0i64;
  if ( v3 != *((_QWORD **)this + 8) )
  {
    do
    {
      v4 = (_QWORD *)*v3;
      operator delete(v3);
      v3 = v4;
    }
    while ( v4 != *((_QWORD **)this + 8) );
  }
  v5 = (_QWORD **)*((_QWORD *)this + 11);
  v6 = *v5;
  *v5 = v5;
  *(_QWORD *)(*((_QWORD *)this + 11) + 8i64) = *((_QWORD *)this + 11);
  *((_QWORD *)this + 12) = 0i64;
  if ( v6 != *((_QWORD **)this + 11) )
  {
    do
    {
      v7 = (_QWORD *)*v6;
      operator delete(v6);
      v6 = v7;
    }
    while ( v7 != *((_QWORD **)this + 11) );
  }
  v8 = (const void *)*((_QWORD *)this + 14);
  v9 = (const void *)*((_QWORD *)this + 15);
  if ( v8 != v9 )
  {
    memmove(*((void **)this + 14), v9, 0i64);
    *((_QWORD *)this + 15) = v8;
  }
  *((_QWORD *)this + 2) = 0i64;
  v10 = (_QWORD *)((char *)this + 24);
  v11 = v10[3] < 8ui64;
  v10[2] = 0i64;
  if ( !v11 )
    v10 = (_QWORD *)*v10;
  result = 0i64;
  *(_WORD *)v10 = 0;
  return result;
}
// 140184CA8: using guessed type void __stdcall operator delete(void *);
