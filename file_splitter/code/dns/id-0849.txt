//----- (0000000140075578) ----------------------------------------------------
__int64 __fastcall Reg_SetValue(
        int a1,
        HKEY a2,
        __int64 a3,
        const CHAR *a4,
        DWORD dwType,
        BYTE *lpMultiByteStr,
        DWORD a7)
{
  int v7; // ebp
  const CHAR *v8; // rsi
  wchar_t *v11; // r12
  __int64 v12; // rdx
  unsigned int v13; // ebx
  const unsigned __int16 *v14; // r9
  const WCHAR **v15; // rax
  const WCHAR *v16; // rcx
  HKEY v17; // rax
  __int64 v18; // rcx
  __int64 v19; // rax
  __int64 v20; // rax
  __int64 v21; // rax
  const WCHAR *v22; // rdx
  DWORD v23; // ebp
  __int64 v24; // r13
  wchar_t *v25; // rax
  const BYTE *lpData; // rcx
  DWORD cbData; // edi
  char **v28; // rsi
  int v29; // ecx
  __int64 v30; // r8
  BYTE *v31; // rax
  BYTE *v32; // r9
  __int64 v33; // rax
  unsigned int v34; // ecx
  unsigned int v35; // ebx
  wchar_t *v36; // rax
  __int64 v37; // rbp
  char *v38; // rbx
  char *v39; // rbp
  char *v40; // rax
  char *v41; // r14
  __int64 v42; // rcx
  __int64 v43; // rcx
  bool v44; // cf
  unsigned int v45; // ebx
  int v46; // esi
  wchar_t *v47; // rax
  LSTATUS v48; // eax
  int v50; // [rsp+44h] [rbp-54h]
  __int128 v51[4]; // [rsp+50h] [rbp-48h] BYREF
  int v52; // [rsp+A0h] [rbp+8h]

  v50 = 0;
  v7 = a1 & 0x10000000;
  v8 = a4;
  v52 = a1 & 0x10000000;
  v11 = 0i64;
  if ( (a1 & 0x10000000) != 0 )
  {
    v13 = RpcUtil_SwitchSecurityContext(0);
    if ( v13 )
      goto LABEL_81;
  }
  if ( !a2 )
  {
    if ( a3 )
    {
      v14 = *(const unsigned __int16 **)(a3 + 192);
      if ( v14 )
      {
        v18 = *(_QWORD *)(a3 + 328);
        v19 = a3;
        if ( v18 )
          v19 = *(_QWORD *)(a3 + 328);
        if ( *(_QWORD *)(v19 + 200) )
        {
          v20 = a3;
          if ( v18 )
            v20 = *(_QWORD *)(a3 + 328);
          if ( *(_QWORD *)(v20 + 200) )
          {
            v21 = a3;
            if ( v18 )
              v21 = *(_QWORD *)(a3 + 328);
            v22 = **(const WCHAR ***)(v21 + 200);
          }
          else
          {
            v22 = L".";
          }
        }
        else
        {
          v22 = 0i64;
        }
        v17 = Reg_OpenScope(0i64, v22, *(const WCHAR **)(a3 + 24), v14, 0);
      }
      else
      {
        v15 = *(const WCHAR ***)(a3 + 200);
        if ( v15 )
          v16 = *v15;
        else
          v16 = 0i64;
        v17 = Reg_OpenZone(v16, *(const WCHAR **)(a3 + 24), 0i64);
      }
    }
    else
    {
      v17 = Reg_OpenParameters();
    }
    a2 = v17;
    if ( !v17 )
    {
      v13 = 110;
      goto LABEL_81;
    }
    v50 = 1;
  }
  if ( (dwType & 0xF0000000) == 0 )
  {
    v48 = RegSetValueExA(a2, v8, 0, dwType, lpMultiByteStr, a7);
    goto LABEL_78;
  }
  v23 = (unsigned __int16)dwType;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_SD(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x1Fu,
      (__int64)&WPP_6ba06e9d807b3b6640892c588bf1aced_Traceguids,
      (const unsigned __int16 *)v8);
  }
  v24 = -1i64;
  if ( dwType == -16777215 )
  {
    v25 = (wchar_t *)Dns_StringCopyAllocate((char *)lpMultiByteStr, 0, 2i64, 1);
    v11 = v25;
    if ( !v25 )
    {
      v13 = 14;
LABEL_35:
      v7 = v52;
      goto LABEL_79;
    }
    lpData = (const BYTE *)v25;
    cbData = 0;
    goto LABEL_72;
  }
  if ( dwType == -16777209 )
  {
    v28 = (char **)lpMultiByteStr;
    LODWORD(v12) = 0;
    cbData = 0;
    v29 = 0;
    if ( !lpMultiByteStr )
      goto LABEL_65;
    v30 = *(_QWORD *)lpMultiByteStr;
    v31 = lpMultiByteStr;
    if ( !*(_QWORD *)lpMultiByteStr )
      goto LABEL_65;
    do
    {
      ++v29;
      v31 += 8;
    }
    while ( *(_QWORD *)v31 );
    if ( !v29 )
    {
LABEL_65:
      v8 = a4;
      lpData = (const BYTE *)v11;
      goto LABEL_71;
    }
    v32 = lpMultiByteStr;
    while ( 1 )
    {
      v33 = -1i64;
      do
        ++v33;
      while ( *(_BYTE *)(v30 + v33) );
      v34 = v12 + 2 * v33 + 2;
      if ( v34 < (unsigned int)v12 )
        break;
      v32 += 8;
      v12 = v34;
      v30 = *(_QWORD *)v32;
      if ( !*(_QWORD *)v32 )
        goto LABEL_49;
    }
    v12 = 0i64;
LABEL_49:
    v35 = 0;
    if ( (int)v12 + 2 >= (unsigned int)v12 )
      v35 = v12 + 2;
    if ( v35 )
    {
      v36 = (wchar_t *)Mem_AllocZero(v35, 19i64, "ds\\dns\\server\\server\\registry.c", 1232);
      v11 = v36;
      if ( v36 )
      {
        v37 = v35;
        v38 = (char *)v36;
        v39 = (char *)v36 + v37;
        while ( *v28 )
        {
          v40 = (char *)Dns_StringCopyAllocate(*v28, 0, 2i64, 1);
          v41 = v40;
          if ( !v40 || (int)StringCchCopyW(v38, (v39 - v38) >> 1, v40) < 0 )
          {
            v23 = (unsigned __int16)dwType;
            goto LABEL_65;
          }
          v42 = -1i64;
          do
            ++v42;
          while ( *(_WORD *)&v41[2 * v42] );
          v43 = (unsigned int)(v42 + 1);
          ++v28;
          v38 += 2 * v43;
          cbData += 2 * v43;
        }
        v44 = v38 < v39;
        v23 = (unsigned __int16)dwType;
        if ( v44 )
        {
          *(_WORD *)v38 = 0;
          cbData += 2;
        }
        goto LABEL_65;
      }
    }
    goto LABEL_62;
  }
  cbData = a7;
  if ( dwType == -268435453 )
  {
    v45 = 2 * a7 + 1;
    v46 = 2 * v45;
    v47 = (wchar_t *)Mem_AllocZero(2 * v45, 19i64, "ds\\dns\\server\\server\\registry.c", 1296);
    v11 = v47;
    if ( !v47 )
    {
LABEL_62:
      v13 = 14;
LABEL_63:
      v8 = a4;
      goto LABEL_35;
    }
    v13 = Reg_BinaryBlobToString(lpMultiByteStr, v47, a7, v45);
    if ( v13 )
      goto LABEL_63;
    cbData = v46;
    v23 = 1;
    v8 = a4;
    lpData = (const BYTE *)v11;
  }
  else
  {
    lpData = lpMultiByteStr;
  }
LABEL_71:
  if ( !cbData )
  {
LABEL_72:
    if ( lpData && v23 - 1 <= 1 )
    {
      do
        ++v24;
      while ( *(_WORD *)&lpData[2 * v24] );
      cbData = 2 * v24 + 2;
    }
  }
  v48 = RegSetValueExW(a2, (LPCWSTR)v8, 0, v23, lpData, cbData);
  v7 = v52;
LABEL_78:
  v13 = v48;
LABEL_79:
  if ( v50 )
    RegCloseKey(a2);
LABEL_81:
  if ( v7 )
    v13 = RpcUtil_SwitchSecurityContext(1);
  if ( v13 )
  {
    v51[0] = DNS_EVENT_REGISTRY_WRITE_FAILED;
    Eventlog_LogEvent((__int64)v51, v12, 0, 0i64, 0i64, v13, 0, 0i64);
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_s(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x20u,
        (__int64)&WPP_6ba06e9d807b3b6640892c588bf1aced_Traceguids,
        v8);
    }
  }
  else if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
         && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 2) != 0
         && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_sdD(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x21u,
      (__int64)&WPP_6ba06e9d807b3b6640892c588bf1aced_Traceguids,
      v8);
  }
  Mem_Free(v11, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\registry.c", 1383);
  return v13;
}
// 1400759B0: variable 'v12' is possibly undefined
// 140187688: using guessed type __int128 DNS_EVENT_REGISTRY_WRITE_FAILED;
// 140075578: using guessed type __int128 var_48[4];
