//----- (0000000140003FE4) ----------------------------------------------------
void __fastcall Answer_ProcessMessage(__int64 a1, int a2)
{
  __int16 v2; // r15
  struct _DNS_MSGINFO *v4; // rbx
  CDnsClientSubnetRecordsTrie *v5; // rcx
  _BYTE *v6; // r13
  char v7; // al
  CDnsClientSubnetRecordsTrie *v8; // rcx
  char v9; // al
  _QWORD *QueryByXid; // rax
  __int64 v11; // r14
  unsigned __int8 *v12; // rsi
  _WORD *v13; // rax
  unsigned __int16 *v14; // r8
  unsigned __int16 v15; // cx
  CDnsClientSubnetRecordsTrie *v16; // r10
  unsigned __int16 v17; // cx
  int v18; // r9d
  _QWORD *v19; // r8
  __int16 v20; // cx
  unsigned __int16 v21; // cx
  __int64 v22; // rcx
  const char *v23; // rax
  unsigned __int16 v24; // cx
  __int64 v25; // rdx
  char v26; // al
  unsigned __int16 v27; // ax
  unsigned __int16 v28; // r14
  _WORD *v29; // rax
  __int16 v30; // si
  CDnsClientSubnetRecordsTrie *v31; // rcx
  unsigned __int16 v32; // dx
  __int16 v33; // r14
  unsigned __int16 v34; // dx
  char v35; // al
  CDnsClientSubnetRecordsTrie *v36; // rcx
  unsigned __int16 v37; // dx
  char v38; // al
  __int64 v39; // [rsp+20h] [rbp-10h]
  struct _DNS_MSGINFO *v40; // [rsp+70h] [rbp+40h] BYREF
  unsigned __int8 *v41; // [rsp+80h] [rbp+50h]

  v40 = (struct _DNS_MSGINFO *)a1;
  v2 = 0;
  *(_DWORD *)(a1 + 6288) = 0;
  v4 = (struct _DNS_MSGINFO *)a1;
  *(_QWORD *)(a1 + 3680) = 0i64;
  *(_QWORD *)(a1 + 3688) = 0i64;
  *(_QWORD *)(a1 + 3696) = 0i64;
  v5 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_q(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x11u, (__int64)&WPP_a00dfa190cfc31699b498ea413aa2a5c_Traceguids, v4);
    v5 = WPP_GLOBAL_Control;
  }
  v6 = (char *)v4 + 6306;
  v7 = *((_BYTE *)v4 + 6306);
  if ( v7 < 0 )
  {
    *((_QWORD *)v4 + 72) = GetTickCount64();
    v8 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_qd(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x14u,
        (__int64)&WPP_a00dfa190cfc31699b498ea413aa2a5c_Traceguids,
        v4,
        *((unsigned __int16 *)v4 + 3152));
      v8 = WPP_GLOBAL_Control;
    }
    v9 = (*v6 >> 3) & 0xF;
    switch ( v9 )
    {
      case 0:
        Read_ScopeNameFromOptRR((__int64)v4, 0);
        QueryByXid = DnsRq_FindQueryByXid((__int64)v4);
        v11 = (__int64)QueryByXid;
        if ( !QueryByXid )
        {
          if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
            && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
            && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 3u )
          {
            LODWORD(v39) = *((unsigned __int16 *)v4 + 3152);
            WPP_SF_qd(
              *((_QWORD *)WPP_GLOBAL_Control + 7),
              0x15u,
              (__int64)&WPP_a00dfa190cfc31699b498ea413aa2a5c_Traceguids,
              v4,
              v39);
          }
          _InterlockedAdd(&dword_1401C7E70, 1u);
          _InterlockedAdd((volatile signed __int32 *)pcUnmatchedResponses, 1u);
          v4 = v40;
          v12 = (unsigned __int8 *)v40 + 6316;
          v13 = (_WORD *)Dns_SkipPacketName((char *)v40 + 6316, (char *)v40 + *((unsigned __int16 *)v40 + 3151) + 6304);
          if ( v13 )
            v2 = __ROL2__(*v13, 8);
          v14 = (unsigned __int16 *)*((_QWORD *)v4 + 175);
          *((_WORD *)v4 + 240) = v2;
          Name_ConvertPacketNameToLookupNameEx((__int64)v4, v12, v14, 0);
          if ( v2 == 251 )
          {
            v15 = 268;
          }
          else if ( v2 == 252 )
          {
            v15 = 272;
          }
          else
          {
            v15 = 261;
          }
          Etw_LogIncomingPacket(v15, (__int64)v4, 0i64, 0);
          Etw_LogIncomingPacket(0x103u, (__int64)v4, 0i64, 0);
          if ( (dword_1401B9770 & 0x2000000) != 0 )
          {
            Log_Message((__int64)v4, 0, 1);
            logPrefix("PACKET");
            Log_RawPrintf("Response packet %p does not match any outstanding query\n", v4);
          }
          goto LABEL_66;
        }
        *((_WORD *)v4 + 248) = *((_WORD *)QueryByXid + 248);
        *((_WORD *)v4 + 249) = *((_WORD *)QueryByXid + 249);
        v16 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x40000) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
        {
          WPP_SF_dqd(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x16u,
            (__int64)&WPP_a00dfa190cfc31699b498ea413aa2a5c_Traceguids,
            *((unsigned __int16 *)QueryByXid + 248));
          v16 = WPP_GLOBAL_Control;
        }
        if ( *(_WORD *)(v11 + 496) == 1 )
        {
          *((_DWORD *)v4 + 142) = *(_DWORD *)(v11 + 568);
          *((_QWORD *)v4 + 785) = *(_QWORD *)(v11 + 6280);
LABEL_49:
          Etw_LogIncomingPacket(0x105u, (__int64)v4, (_QWORD *)v11, 1);
          Recurse_ProcessResponse((struct _DNS_MSGINFO *)v11, (struct in_addr **)&v40);
          v4 = v40;
          goto LABEL_66;
        }
        if ( *(_WORD *)(v11 + 496) != 2 )
        {
          if ( *(_WORD *)(v11 + 496) == 3 )
          {
            Etw_LogIncomingPacket(0x105u, (__int64)v4, (_QWORD *)v11, 1);
            Wins_ProcessResponse((struct _DNS_MSGINFO *)v11, (__int64)v4);
LABEL_66:
            v22 = (__int64)v4;
            goto LABEL_67;
          }
          if ( *(_WORD *)(v11 + 496) != 4 )
          {
            if ( *(_WORD *)(v11 + 496) != 5 )
            {
              if ( v16 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                && (*((_DWORD *)v16 + 17) & 0x40000) != 0
                && *((_BYTE *)v16 + 65) >= 2u )
              {
                WPP_SF_dqd(
                  *((_QWORD *)v16 + 7),
                  0x17u,
                  (__int64)&WPP_a00dfa190cfc31699b498ea413aa2a5c_Traceguids,
                  *(unsigned __int16 *)(v11 + 496));
              }
              v17 = 261;
              v18 = 1;
              v19 = (_QWORD *)v11;
              goto LABEL_65;
            }
            goto LABEL_49;
          }
        }
        v20 = *(_WORD *)(v11 + 480);
        switch ( v20 )
        {
          case 6:
            v21 = 261;
            break;
          case 251:
            v21 = 268;
            break;
          case 252:
            v21 = 272;
            break;
          default:
LABEL_47:
            Xfr_QueueSoaCheckResponse(v11, (__int64)v4);
            v22 = v11;
LABEL_67:
            Packet_Free(v22);
            return;
        }
        Etw_LogIncomingPacket(v21, (__int64)v4, (_QWORD *)v11, 1);
        goto LABEL_47;
      case 4:
        if ( v8 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_BYTE *)v8 + 68) & 0x40) != 0
          && *((_BYTE *)v8 + 65) >= 4u )
        {
          v23 = DnsAddr_Ntoa((struct in_addr *)v4 + 16);
          WPP_SF_qs(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x18u,
            (__int64)&WPP_a00dfa190cfc31699b498ea413aa2a5c_Traceguids,
            v4,
            v23);
        }
        v17 = 275;
        v18 = 1;
        goto LABEL_64;
      case 5:
        Up_ForwardUpdateResponseToClient((__int64)v4);
        goto LABEL_66;
    }
    if ( v8 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)v8 + 17) & 0x800) != 0
      && *((_BYTE *)v8 + 65) >= 3u )
    {
      WPP_SF_Dq(
        *((_QWORD *)v8 + 7),
        0x19u,
        (__int64)&WPP_a00dfa190cfc31699b498ea413aa2a5c_Traceguids,
        ((unsigned __int8)*v6 >> 3) & 0xF);
    }
    v24 = 261;
LABEL_63:
    Etw_LogIncomingPacket(v24, (__int64)v4, 0i64, 1);
    v17 = 259;
    v18 = 0;
LABEL_64:
    v19 = 0i64;
LABEL_65:
    Etw_LogIncomingPacket(v17, (__int64)v4, v19, v18);
    goto LABEL_66;
  }
  v25 = *((_QWORD *)v4 + 7);
  if ( v25 && (v25 == g_UdpZeroBoundSocket4 || v25 == g_UdpZeroBoundSocket6 || a2 == 1) )
  {
    if ( v5 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)v5 + 17) & 0x2000) != 0
      && *((_BYTE *)v5 + 65) >= 3u )
    {
      WPP_SF_qd(
        *((_QWORD *)v5 + 7),
        0x1Au,
        (__int64)&WPP_a00dfa190cfc31699b498ea413aa2a5c_Traceguids,
        v4,
        *((_DWORD *)v4 + 14));
    }
    v24 = 256;
    goto LABEL_63;
  }
  v26 = ((unsigned __int8)v7 >> 3) & 0xF;
  if ( (v26 & 0xFA) != 0 )
  {
    if ( v26 != 1 )
    {
      if ( v5 == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_DWORD *)v5 + 17) & 0x800) == 0
        || *((_BYTE *)v5 + 65) < 2u )
      {
        goto LABEL_200;
      }
      v34 = 27;
      goto LABEL_199;
    }
LABEL_194:
    Etw_LogIncomingPacket(0x100u, (__int64)v4, 0i64, 1);
    answerIQuery((__int64)v4);
    return;
  }
  if ( v26 == 1 )
    goto LABEL_194;
  v27 = *((_WORD *)v4 + 3154);
  if ( v27 != 1 )
  {
    if ( v5 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)v5 + 17) & 0x800) != 0
      && *((_BYTE *)v5 + 65) >= 2u )
    {
      WPP_SF_qd(*((_QWORD *)v5 + 7), 0x1Cu, (__int64)&WPP_a00dfa190cfc31699b498ea413aa2a5c_Traceguids, v4, v27);
    }
    goto LABEL_84;
  }
  v41 = (unsigned __int8 *)v4 + 6316;
  v29 = (_WORD *)Wire_SkipPacketName((__int64)v4, (__int64)v4 + 6316);
  if ( !v29 )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      WPP_SF_q(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x1Du,
        (__int64)&WPP_a00dfa190cfc31699b498ea413aa2a5c_Traceguids,
        v4);
    }
    v28 = 1;
    goto LABEL_201;
  }
  *((_QWORD *)v4 + 59) = v29;
  v30 = __ROL2__(*v29, 8);
  *((_WORD *)v4 + 240) = v30;
  *((_WORD *)v4 + 220) = v30;
  *((_WORD *)v4 + 221) = 12;
  *((_QWORD *)v4 + 4) = v29 + 2;
  if ( !v30 )
  {
    v31 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
    {
      goto LABEL_84;
    }
    v32 = 31;
LABEL_96:
    WPP_SF_q(*((_QWORD *)v31 + 7), v32, (__int64)&WPP_a00dfa190cfc31699b498ea413aa2a5c_Traceguids, v4);
LABEL_84:
    v28 = 1;
LABEL_201:
    Etw_LogIncomingPacket(0x100u, (__int64)v4, 0i64, 1);
LABEL_202:
    Reject_RequestIntact((__int64)v4, v28, v2);
    return;
  }
  v33 = v29[1];
  if ( v33 == 768 )
  {
    if ( v30 == 16
      && dword_1401B99C4
      && *v41 >= 6u
      && *(_DWORD *)((char *)v4 + 6317) == g_szChaosVersionQueryPrefix
      && *(_WORD *)((char *)v4 + 6321) == word_1401B7EAC )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_q(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x20u,
          (__int64)&WPP_a00dfa190cfc31699b498ea413aa2a5c_Traceguids,
          v4);
      }
      Etw_LogIncomingPacket(0x100u, (__int64)v4, 0i64, 1);
      Version_AnswerQuery((__int64)v4);
      return;
    }
    goto LABEL_109;
  }
  if ( ((v33 + 256) & 0xFDFF) != 0 )
  {
LABEL_109:
    v5 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
    {
      goto LABEL_200;
    }
    v34 = 33;
LABEL_199:
    WPP_SF_q(*((_QWORD *)v5 + 7), v34, (__int64)&WPP_a00dfa190cfc31699b498ea413aa2a5c_Traceguids, v4);
LABEL_200:
    v28 = 4;
    goto LABEL_201;
  }
  _InterlockedAdd(&dword_1401C7F68, 1u);
  v35 = (*v6 >> 3) & 0xF;
  if ( v35 )
  {
    if ( v35 == 5 )
    {
      v4 = v40;
      Etw_LogIncomingPacket(0x107u, (__int64)v40, 0i64, 1);
      if ( dword_1401B9838 )
      {
        if ( v33 == 256 )
        {
          _InterlockedAdd(&dword_1401C7F74, 1u);
          Up_ProcessUpdate((__int64)v40);
          return;
        }
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
        {
          WPP_SF_q(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x23u,
            (__int64)&WPP_a00dfa190cfc31699b498ea413aa2a5c_Traceguids,
            v4);
        }
        v28 = 1;
      }
      else
      {
        v28 = 4;
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
        {
          WPP_SF_q(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x22u,
            (__int64)&WPP_a00dfa190cfc31699b498ea413aa2a5c_Traceguids,
            v4);
        }
      }
      goto LABEL_202;
    }
    v28 = 4;
    if ( v35 == 4 )
    {
      _InterlockedAdd(&dword_1401C7F70, 1u);
      Read_ScopeNameFromOptRR((__int64)v40, 0);
      Xfr_QueueSoaCheckResponse(0i64, (__int64)v40);
      return;
    }
    v36 = WPP_GLOBAL_Control;
    v4 = v40;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
    {
      goto LABEL_201;
    }
    v37 = 37;
LABEL_133:
    WPP_SF_q(*((_QWORD *)v36 + 7), v37, (__int64)&WPP_a00dfa190cfc31699b498ea413aa2a5c_Traceguids, v4);
    goto LABEL_201;
  }
  v4 = v40;
  if ( !(unsigned int)Name_ConvertPacketNameToLookupNameEx((__int64)v40, v41, *((unsigned __int16 **)v40 + 175), 1) )
  {
    v31 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
    {
      goto LABEL_84;
    }
    v32 = 38;
    goto LABEL_96;
  }
  v28 = Answer_ParseAndStripOPT((__int64)v4, 0, 0, 0i64);
  if ( v28 )
  {
    LOBYTE(v2) = 1;
    v36 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
    {
      goto LABEL_201;
    }
    v37 = 39;
    goto LABEL_133;
  }
  if ( v30 == 249 )
  {
    _InterlockedAdd(&dword_1401C7F78, 1u);
    v4 = v40;
    Etw_LogIncomingPacket(0x100u, (__int64)v40, 0i64, 0);
    if ( g_NumZonesAllowSecureUpdate <= 0 )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x80000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        WPP_SF_q(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x2Au,
          (__int64)&WPP_a00dfa190cfc31699b498ea413aa2a5c_Traceguids,
          v4);
      }
      v28 = 4;
      goto LABEL_202;
    }
    if ( !(unsigned int)PQ_QueuePacketEx(g_SecureNegoQueue, (__int64)v4) )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x80000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
      {
        WPP_SF_q(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x29u,
          (__int64)&WPP_a00dfa190cfc31699b498ea413aa2a5c_Traceguids,
          v4);
      }
      v28 = 2;
      goto LABEL_202;
    }
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x80000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_q(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x28u,
        (__int64)&WPP_a00dfa190cfc31699b498ea413aa2a5c_Traceguids,
        v4);
    }
  }
  else
  {
    _InterlockedAdd(&dword_1401C7F6C, 1u);
    switch ( v30 )
    {
      case 1:
        _InterlockedAdd(&dword_1401C7F7C, 1u);
        break;
      case 2:
        _InterlockedAdd(&dword_1401C7F80, 1u);
        break;
      case 6:
        _InterlockedAdd(&dword_1401C7F84, 1u);
        break;
      case 12:
        _InterlockedAdd(&dword_1401C7F8C, 1u);
        break;
      case 15:
        _InterlockedAdd(&dword_1401C7F88, 1u);
        break;
      case 33:
        _InterlockedAdd(&dword_1401C7F90, 1u);
        break;
      case 251:
        _InterlockedAdd(&dword_1401C7F98, 1u);
        break;
      case 252:
        _InterlockedAdd(&dword_1401C7F9C, 1u);
        break;
      case 255:
        _InterlockedAdd(&dword_1401C7F94, 1u);
        break;
      default:
        _InterlockedAdd(&dword_1401C7FA0, 1u);
        break;
    }
    if ( (unsigned __int16)(v30 - 251) <= 1u )
    {
      Read_ScopeNameFromOptRR((__int64)v40, 1);
      Xfr_TransferZone(v40);
      return;
    }
    v4 = v40;
    if ( *((_WORD *)v40 + 3155) || *((_WORD *)v40 + 3156) || *((_WORD *)v40 + 3157) > 1u )
    {
      v31 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x800) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
      {
        goto LABEL_84;
      }
      v32 = 43;
      goto LABEL_96;
    }
    Etw_LogIncomingPacket(0x100u, (__int64)v40, 0i64, 0);
    *v6 &= ~2u;
    *(_DWORD *)((char *)v4 + 6310) = 0;
    *((_WORD *)v4 + 3157) = 0;
    *((_BYTE *)v4 + 6307) |= 0x20u;
    *((_BYTE *)v4 + 6307) = ((_BYTE)dword_1401B97F8 << 7) | *((_BYTE *)v4 + 6307) & 0x7F;
    if ( !dword_1401B97F8 || (v38 = 1, (*v6 & 1) == 0) )
      v38 = 0;
    *((_BYTE *)v4 + 1417) = v38;
    *v6 |= 0x80u;
    *(_WORD *)((char *)v4 + 1415) = 257;
    *((_QWORD *)v4 + 284) = 50i64;
    *((_QWORD *)v4 + 285) = 0i64;
    *((_DWORD *)v4 + 572) = 0;
    *((_WORD *)v4 + 302) = *((_WORD *)v4 + 300);
    Answer_Question(v4, 0i64, 0);
  }
}
// 140004130: variable 'v39' is possibly undefined
// 140183DD0: using guessed type __int64 __fastcall Dns_SkipPacketName(_QWORD, _QWORD);
// 1401B7EA8: using guessed type int g_szChaosVersionQueryPrefix;
// 1401B7EAC: using guessed type __int16 word_1401B7EAC;
// 1401B90C0: using guessed type int g_NumZonesAllowSecureUpdate;
// 1401B9770: using guessed type int dword_1401B9770;
// 1401B97F8: using guessed type int dword_1401B97F8;
// 1401B9838: using guessed type int dword_1401B9838;
// 1401B99C4: using guessed type int dword_1401B99C4;
// 1401BA4A0: using guessed type __int64 g_SecureNegoQueue;
// 1401C7E70: using guessed type int dword_1401C7E70;
// 1401C7F40: using guessed type __int64 pcUnmatchedResponses;
// 1401C7F68: using guessed type int dword_1401C7F68;
// 1401C7F6C: using guessed type int dword_1401C7F6C;
// 1401C7F70: using guessed type int dword_1401C7F70;
// 1401C7F74: using guessed type int dword_1401C7F74;
// 1401C7F78: using guessed type int dword_1401C7F78;
// 1401C7F7C: using guessed type int dword_1401C7F7C;
// 1401C7F80: using guessed type int dword_1401C7F80;
// 1401C7F84: using guessed type int dword_1401C7F84;
// 1401C7F88: using guessed type int dword_1401C7F88;
// 1401C7F8C: using guessed type int dword_1401C7F8C;
// 1401C7F90: using guessed type int dword_1401C7F90;
// 1401C7F94: using guessed type int dword_1401C7F94;
// 1401C7F98: using guessed type int dword_1401C7F98;
// 1401C7F9C: using guessed type int dword_1401C7F9C;
// 1401C7FA0: using guessed type int dword_1401C7FA0;
