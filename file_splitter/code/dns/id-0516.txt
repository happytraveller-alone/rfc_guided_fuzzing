//----- (00000001400468E4) ----------------------------------------------------
__int64 __fastcall addProxiesGroup(LDAP *ld)
{
  ULONG v2; // edi
  WCHAR *v3; // rsi
  __int64 v4; // rbx
  size_t v5; // rbx
  int LastError; // eax
  _QWORD *v7; // rax
  DWORD TickCount; // eax
  WCHAR *v9; // rdx
  LDAP *v10; // rsi
  DWORD v11; // ebx
  LDAPMessage *entry; // rax
  struct berval **values_lenW; // rax
  struct berval **v14; // rbx
  void *v15; // rax
  struct ldap *v16; // r8
  ULONG attrsonly; // [rsp+28h] [rbp-D8h]
  PWSTR base; // [rsp+60h] [rbp-A0h] BYREF
  PLDAPMessage res; // [rsp+68h] [rbp-98h] BYREF
  struct berval **vals; // [rsp+70h] [rbp-90h]
  LDAP *lda; // [rsp+78h] [rbp-88h]
  __int64 v23[2]; // [rsp+80h] [rbp-80h] BYREF
  __int64 v24[2]; // [rsp+90h] [rbp-70h] BYREF
  __int64 v25[2]; // [rsp+A0h] [rbp-60h] BYREF
  __int64 v26[2]; // [rsp+B0h] [rbp-50h] BYREF
  PWSTR attrs[2]; // [rsp+C0h] [rbp-40h] BYREF
  int v28; // [rsp+D0h] [rbp-30h] BYREF
  const wchar_t *v29; // [rsp+D8h] [rbp-28h]
  __int64 *v30; // [rsp+E0h] [rbp-20h]
  int v31; // [rsp+E8h] [rbp-18h] BYREF
  const WCHAR *v32; // [rsp+F0h] [rbp-10h]
  __int64 *v33; // [rsp+F8h] [rbp-8h]
  int v34; // [rsp+100h] [rbp+0h] BYREF
  const wchar_t *v35; // [rsp+108h] [rbp+8h]
  __int64 *v36; // [rsp+110h] [rbp+10h]
  int v37; // [rsp+118h] [rbp+18h] BYREF
  const wchar_t *v38; // [rsp+120h] [rbp+20h]
  __int64 *v39; // [rsp+128h] [rbp+28h]
  LDAPModW *v40[6]; // [rsp+130h] [rbp+30h] BYREF
  WCHAR filter[64]; // [rsp+160h] [rbp+60h] BYREF
  wchar_t Buffer[128]; // [rsp+1E0h] [rbp+E0h] BYREF
  WCHAR v43[256]; // [rsp+2E0h] [rbp+1E0h] BYREF

  lda = ld;
  attrs[0] = (PWSTR)L"objectSid";
  v23[0] = (__int64)L"DnsUpdateProxy";
  v29 = L"samAccountName";
  v2 = 0;
  v30 = v23;
  v3 = 0i64;
  base = 0i64;
  v24[0] = (__int64)L"group";
  v32 = L"objectClass";
  v33 = v24;
  v25[0] = (__int64)Buffer;
  v35 = L"groupType";
  v36 = v25;
  v26[0] = (__int64)v43;
  v38 = L"Description";
  v39 = v26;
  v40[0] = (LDAPModW *)&v28;
  v40[1] = (LDAPModW *)&v31;
  v40[2] = (LDAPModW *)&v34;
  v40[3] = (LDAPModW *)&v37;
  res = 0i64;
  vals = 0i64;
  attrs[1] = 0i64;
  v23[1] = 0i64;
  v28 = 0;
  v24[1] = 0i64;
  v31 = 0;
  v25[1] = 0i64;
  v34 = 0;
  v26[1] = 0i64;
  v37 = 0;
  v40[4] = 0i64;
  if ( dword_1401B9750 || g_fDsReadOnlyDcMode )
    goto LABEL_48;
  if ( !ld )
  {
LABEL_4:
    v2 = 87;
    goto LABEL_48;
  }
  _ultow(0x80000002, Buffer, 10);
  sprintfSafe(filter, 0x40ui64, L"samAccountName=%s", L"DnsUpdateProxy");
  if ( isDNinDS(ld, DistinguishedName, 2u, filter, (char **)&base) )
  {
    v3 = base;
  }
  else
  {
    v4 = -1i64;
    do
      ++v4;
    while ( DistinguishedName[v4] );
    v5 = v4 + 45;
    base = (PWSTR)Mem_Alloc(2 * (int)v5, 9i64, "ds\\dns\\server\\server\\ds.c", 16382);
    v3 = base;
    if ( !base )
    {
      v2 = 14;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_D(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x19Eu,
          (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
          14);
      }
      goto LABEL_48;
    }
    sprintfSafe(base, v5, L"CN=%s,CN=Users,%s", L"DnsUpdateProxy", DistinguishedName);
    if ( !Dns_GetResourceString(0xC004u, v43, 255i64) )
    {
      LastError = GetLastError();
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_D(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x19Fu,
          (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
          LastError);
      }
      if ( (int)StringCchCopyW(
                  (char *)v43,
                  255i64,
                  (char *)L"DNS clients who are permitted to perform dynamic updates on behalf of some other clients (such"
                           " as DHCP servers).") < 0 )
        goto LABEL_4;
    }
    v2 = Dns_LdapAddExt(lda, v3, v40, 0i64, 0i64, attrsonly, 0);
    if ( v2 )
    {
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_Sq(
          *((_QWORD *)WPP_GLOBAL_Control + 7),
          0x1A0u,
          (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
          v3);
      }
      goto LABEL_48;
    }
  }
  v7 = g_pDynuproxSid;
  if ( g_pDynuproxSid )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x1A1u, (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids);
      v7 = g_pDynuproxSid;
    }
    Mem_Free(v7, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\ds.c", 16458);
    g_pDynuproxSid = 0i64;
  }
  TickCount = GetTickCount();
  v9 = v3;
  v10 = lda;
  v11 = TickCount;
  v2 = ldap_search_ext_sW(lda, v9, 0, g_szWildCardFilter, attrs, 0, 0i64, 0i64, &g_LdapTimeout, 0, &res);
  _InterlockedExchangeAdd(&dword_1401C7D48, GetTickCount() - v11);
  if ( v2 )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
    {
      WPP_SF_D(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x1A3u,
        (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids,
        v2);
    }
    v16 = v10;
    v3 = base;
    v2 = Ds_ErrorHandler(v2, (__int64)base, v16, 0);
  }
  else
  {
    entry = ldap_first_entry(v10, res);
    if ( entry )
    {
      values_lenW = ldap_get_values_lenW(v10, entry, (const PWSTR)L"objectSid");
      vals = values_lenW;
      v14 = values_lenW;
      if ( values_lenW && *values_lenW )
      {
        v15 = Mem_Alloc((*values_lenW)->bv_len, 12i64, "ds\\dns\\server\\server\\ds.c", 16495);
        g_pDynuproxSid = v15;
        if ( v15 )
        {
          memcpy_0(v15, (*v14)->bv_val, (*v14)->bv_len);
          ldap_value_free_len(v14);
          vals = 0i64;
          ldap_msgfree(res);
          res = 0i64;
        }
        else
        {
          v2 = 14;
        }
      }
      else if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
             && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x400) != 0
             && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 7), 0x1A2u, (__int64)&WPP_d0fa00cabf37307abd3d7f77fcc28067_Traceguids);
      }
    }
    v3 = base;
  }
LABEL_48:
  Mem_Free(v3, 0i64, 0i64, (__int64)"ds\\dns\\server\\server\\ds.c", 16516);
  ldap_value_free_len(vals);
  ldap_msgfree(res);
  return v2;
}
// 140046BCB: variable 'attrsonly' is possibly undefined
// 1401883D8: using guessed type wchar_t aDescription[12];
// 14018C7A0: using guessed type wchar_t aDnsupdateproxy[15];
// 14018C7C0: using guessed type wchar_t aSamaccountname_0[15];
// 14018C7E0: using guessed type wchar_t aGroup[6];
// 14018C7F0: using guessed type wchar_t aGrouptype[10];
// 14018C808: using guessed type wchar_t aSamaccountname[18];
// 14018C830: using guessed type wchar_t aCnSCnUsersS[18];
// 1401B8C94: using guessed type int g_fDsReadOnlyDcMode;
// 1401B9750: using guessed type int dword_1401B9750;
// 1401C7D48: using guessed type int dword_1401C7D48;
