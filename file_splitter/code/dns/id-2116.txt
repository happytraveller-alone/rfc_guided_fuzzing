//----- (000000014010B23C) ----------------------------------------------------
void __fastcall performChildDsRebuild(struct _DnsTreeNode *a1, struct _DnsTreeNode *ChildDnskeyNode)
{
  CDnsClientSubnetRecordsTrie *v4; // rax
  char *v5; // rax
  __int64 v6; // rdx
  __int64 v7; // r8
  __int64 v8; // rsi
  __int64 v9; // rax
  __int64 v10; // rax
  __int64 v11; // rbx
  char *v12; // rax
  struct _Dbase_Record *NextRecord; // rbx
  char *v14; // rax
  unsigned __int16 v15; // dx
  __int64 v16; // rax
  struct _CountName *v17; // rdi
  int v18; // eax
  char *v19; // rax
  __int64 v20; // rdx
  __int64 *v21; // rax
  struct _Dbase_Record *v22; // rsi
  __int64 v23; // rax
  __int64 *v24; // rbx
  _BYTE *v25; // rax
  CDnsClientSubnetRecordsTrie *v26; // r11
  unsigned __int16 v27; // dx
  int v28; // r9d
  CDnsClientSubnetRecordsTrie *v29; // r11
  unsigned __int16 v30; // dx
  int v31; // r9d
  unsigned __int16 v32; // dx
  char v33; // al
  const char *v34; // r9
  void **v35; // r15
  __int64 *v36; // rsi
  char *v37; // rax
  void **v38; // rbx
  struct _Dbase_Record *v39; // rdx
  struct _Dbase_Record *v40; // r13
  char v41; // cl
  __int64 *v42; // rdi
  __int64 v43; // rsi
  __int64 v44; // rbx
  unsigned int v45; // r15d
  struct _Dbase_Record *DsFromDnskey; // r14
  CDnsClientSubnetRecordsTrie *v47; // r11
  unsigned __int16 v48; // dx
  int v49; // ecx
  __int64 v50; // rax
  __int64 i; // rax
  char *v52; // rax
  void **v53; // rbx
  __int64 v54; // r14
  void **v55; // rbx
  __int64 *v56; // rdi
  int v57; // r9d
  void **v58; // rbx
  int v59; // eax
  __int64 v60; // rbx
  __int64 v61; // rdx
  char *v62; // rax
  void **v63; // rbx
  void **v64; // rbx
  __int64 v65; // [rsp+28h] [rbp-E0h]
  __int64 v66; // [rsp+30h] [rbp-D8h]
  __int64 v67; // [rsp+38h] [rbp-D0h]
  char v68; // [rsp+48h] [rbp-C0h]
  unsigned int v69; // [rsp+4Ch] [rbp-BCh] BYREF
  struct _CountName *v70; // [rsp+50h] [rbp-B8h] BYREF
  __int64 *v71; // [rsp+58h] [rbp-B0h] BYREF
  __int64 v72; // [rsp+60h] [rbp-A8h] BYREF
  __int64 *v73; // [rsp+68h] [rbp-A0h]
  __int64 v74; // [rsp+70h] [rbp-98h]
  __int64 *v75; // [rsp+80h] [rbp-88h]
  __int128 v76; // [rsp+88h] [rbp-80h] BYREF
  __int128 pExceptionObject; // [rsp+98h] [rbp-70h] BYREF
  __int64 v78; // [rsp+A8h] [rbp-60h]
  char v79; // [rsp+B8h] [rbp-50h]
  __int64 v80; // [rsp+C0h] [rbp-48h]
  char v81[64]; // [rsp+C8h] [rbp-40h] BYREF
  unsigned __int8 v82[272]; // [rsp+108h] [rbp+0h] BYREF
  __int128 v83; // [rsp+218h] [rbp+110h] BYREF
  __int64 v84; // [rsp+228h] [rbp+120h]

  v80 = -2i64;
  v75 = (__int64 *)a1;
  memset_0(v81, 0, sizeof(v81));
  v4 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    v5 = Dbg_NodeName((__int64)a1);
    WPP_SF_qssq(*((_QWORD *)WPP_GLOBAL_Control + 7), v6, v7, a1, v5, 0i64, ChildDnskeyNode);
    v4 = WPP_GLOBAL_Control;
  }
  if ( !a1 )
    return;
  v8 = *((_QWORD *)a1 + 7);
  *(_QWORD *)&v76 = v8;
  if ( !v8 )
    return;
  if ( !ChildDnskeyNode )
  {
    ChildDnskeyNode = findChildDnskeyNode(a1, 0);
    v4 = WPP_GLOBAL_Control;
  }
  if ( v4 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)v4 + 17) & 0x200000) != 0
    && *((_BYTE *)v4 + 65) >= 4u )
  {
    if ( ChildDnskeyNode )
      v9 = *((_QWORD *)ChildDnskeyNode + 7);
    else
      v9 = 0i64;
    if ( v9 )
    {
      if ( ChildDnskeyNode )
        v10 = *((_QWORD *)ChildDnskeyNode + 7);
      else
        v10 = 0i64;
      v11 = *(_QWORD *)(v10 + 16);
    }
    else
    {
      v11 = 0i64;
    }
    v12 = Dbg_NodeName((__int64)ChildDnskeyNode);
    WPP_SF_qss(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0x26u,
      (__int64)&WPP_9f96d4c672f338bf067ce342b88232b8_Traceguids,
      ChildDnskeyNode,
      v12,
      v11);
  }
  v69 = -1;
  acquireUpdate(DbaseLock, 0xFFFFFFFF, &v69, 1);
  NextRecord = (struct _Dbase_Record *)RR_FindNextRecordEx((__int64)a1, 0, 0x2Bu, 0i64, 0, 0);
  *(_QWORD *)&v83 = NextRecord;
  if ( !NextRecord )
  {
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
    {
      goto LABEL_177;
    }
    v14 = Dbg_NodeName((__int64)a1);
    v15 = 39;
    goto LABEL_27;
  }
  v16 = RR_FindNextRecordEx((__int64)ChildDnskeyNode, 0, 0x30u, 0i64, 0, 0);
  v17 = (struct _CountName *)v16;
  if ( !v16 )
  {
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
    {
      goto LABEL_177;
    }
    v14 = Dbg_NodeName((__int64)ChildDnskeyNode);
    v15 = 40;
    goto LABEL_27;
  }
  v18 = *(_DWORD *)(v16 + 28) & 3;
  if ( v18 == 2 )
  {
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
    {
      goto LABEL_177;
    }
    v14 = Dbg_NodeName((__int64)ChildDnskeyNode);
    v15 = 41;
    goto LABEL_27;
  }
  if ( (*((_DWORD *)ChildDnskeyNode + 23) & 0x100) != 0 )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
    {
      v19 = Dbg_NodeName((__int64)ChildDnskeyNode);
      WPP_SF_s(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x2Au,
        (__int64)&WPP_9f96d4c672f338bf067ce342b88232b8_Traceguids,
        v19);
    }
  }
  else if ( v18 != 3 && !validateDnskeyUsingChildDs(a1, NextRecord, (__int64 **)ChildDnskeyNode) )
  {
    if ( (unsigned int)DnsOls_OkToFireThrottledEvent(v8, 7660) )
    {
      LOWORD(v69) = 259;
      *(_QWORD *)&v76 = (char *)a1 + 102;
      *((_QWORD *)&v76 + 1) = *(_QWORD *)(v8 + 24);
      v83 = DNS_EVENT_DNSSEC_CHILD_DS_VALIDATION_FAIL;
      Eventlog_LogEvent((__int64)&v83, v20, 2u, (unsigned __int16 **)&v76, (unsigned __int8 *)&v69, 0, 0, 0i64);
    }
    if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) == 0
      || *((_BYTE *)WPP_GLOBAL_Control + 65) < 2u )
    {
      goto LABEL_177;
    }
    v14 = Dbg_NodeName((__int64)ChildDnskeyNode);
    v15 = 43;
LABEL_27:
    WPP_SF_s(*((_QWORD *)WPP_GLOBAL_Control + 7), v15, (__int64)&WPP_9f96d4c672f338bf067ce342b88232b8_Traceguids, v14);
    goto LABEL_177;
  }
  v74 = 0i64;
  v21 = (__int64 *)operator new(0x20ui64);
  if ( !v21 )
  {
    std::bad_alloc::bad_alloc((std::bad_alloc *)&pExceptionObject, 0i64);
    CxxThrowException_0(&pExceptionObject, (_ThrowInfo *)&TI2_AVbad_alloc_std__);
  }
  v73 = v21;
  *v21 = (__int64)v21;
  v73[1] = (__int64)v73;
  v73[2] = (__int64)v73;
  *((_BYTE *)v73 + 26) = 1;
  *((_BYTE *)v73 + 27) = 1;
  v22 = NextRecord;
  do
  {
    if ( *((_WORD *)v22 + 6) != 43 )
      break;
    v23 = v73[1];
    v24 = v73;
    while ( !*(_BYTE *)(v23 + 27) )
    {
      if ( *(_BYTE *)(v23 + 24) >= *((_BYTE *)v22 + 59) )
      {
        v24 = (__int64 *)v23;
        v23 = *(_QWORD *)v23;
      }
      else
      {
        v23 = *(_QWORD *)(v23 + 16);
      }
    }
    if ( v24 == v73 || *((_BYTE *)v22 + 59) < *((_BYTE *)v24 + 24) )
    {
      LOWORD(v69) = *((unsigned __int8 *)v22 + 59);
      v25 = std::_Tree_val<std::_Tmap_traits<unsigned char,bool,std::less<unsigned char>,std::allocator<std::pair<unsigned char const,bool>>,0>>::_Buynode<std::pair<unsigned char const,bool>>(
              (__int64)&v72,
              &v69);
      std::_Tree<std::_Tmap_traits<unsigned char,bool,std::less<unsigned char>,std::allocator<std::pair<unsigned char const,bool>>,0>>::_Insert(
        (__int64)&v72,
        &v71,
        v24,
        v25);
      v24 = v71;
    }
    *((_BYTE *)v24 + 25) = 1;
    v22 = *(struct _Dbase_Record **)v22;
  }
  while ( v22 );
  pExceptionObject = 0i64;
  v78 = 0i64;
  v79 = 0;
  v70 = v17;
  v26 = WPP_GLOBAL_Control;
  while ( *((_WORD *)v17 + 6) == 48 )
  {
    if ( *((_BYTE *)v17 + 58) != 3 )
      goto LABEL_86;
    if ( (ntohs(*((_WORD *)v17 + 28)) & 1) == 0 )
    {
      v26 = WPP_GLOBAL_Control;
LABEL_86:
      if ( v26 == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_DWORD *)v26 + 17) & 0x200000) == 0
        || *((_BYTE *)v26 + 65) < 5u )
      {
        goto LABEL_96;
      }
      if ( *((_WORD *)v17 + 6) == 48 )
      {
        v32 = *((_WORD *)v17 + 7);
        if ( v32 > 4u )
          RR_CalculateDnsKeyTagEx((unsigned __int8 *)v17 + 56, v32);
      }
      v33 = ntohs(*((_WORD *)v17 + 28));
      v34 = "SEP";
      if ( (v33 & 1) == 0 )
        v34 = "non-SEP";
      LODWORD(v67) = *((unsigned __int8 *)v17 + 58);
      WPP_SF_sddd(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x2Cu,
        (__int64)&WPP_9f96d4c672f338bf067ce342b88232b8_Traceguids,
        v34);
      goto LABEL_95;
    }
    if ( (ntohs(*((_WORD *)v17 + 28)) & 0x80u) == 0 )
    {
      v29 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
      {
        if ( *((_WORD *)v17 + 6) == 48 && (v30 = *((_WORD *)v17 + 7), v30 > 4u) )
          v31 = (unsigned __int16)RR_CalculateDnsKeyTagEx((unsigned __int8 *)v17 + 56, v30);
        else
          v31 = 0;
        WPP_SF_Dd(*((_QWORD *)v29 + 7), 0x2Eu, (__int64)&WPP_9f96d4c672f338bf067ce342b88232b8_Traceguids, v31);
      }
      std::vector<_Dbase_Record *>::push_back((unsigned __int64 *)&pExceptionObject, (unsigned __int64 *)&v70);
      v17 = v70;
    }
    else
    {
      v26 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control == (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        || (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) == 0
        || *((_BYTE *)WPP_GLOBAL_Control + 65) < 5u )
      {
        goto LABEL_96;
      }
      if ( *((_WORD *)v17 + 6) == 48 && (v27 = *((_WORD *)v17 + 7), v27 > 4u) )
        v28 = (unsigned __int16)RR_CalculateDnsKeyTagEx((unsigned __int8 *)v17 + 56, v27);
      else
        v28 = 0;
      WPP_SF_Dd(*((_QWORD *)v26 + 7), 0x2Du, (__int64)&WPP_9f96d4c672f338bf067ce342b88232b8_Traceguids, v28);
    }
LABEL_95:
    v26 = WPP_GLOBAL_Control;
LABEL_96:
    v17 = *(struct _CountName **)v17;
    v70 = v17;
    if ( !v17 )
      break;
  }
  v35 = (void **)*((_QWORD *)&pExceptionObject + 1);
  v36 = (__int64 *)pExceptionObject;
  if ( ((*((_QWORD *)&pExceptionObject + 1) - (_QWORD)pExceptionObject) & 0xFFFFFFFFFFFFFFF8ui64) == 0 )
  {
    if ( v26 != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)v26 + 17) & 0x200000) != 0
      && *((_BYTE *)v26 + 65) >= 2u )
    {
      v37 = Dbg_NodeName((__int64)ChildDnskeyNode);
      WPP_SF_s(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x2Fu,
        (__int64)&WPP_9f96d4c672f338bf067ce342b88232b8_Traceguids,
        v37);
    }
    if ( v79 )
    {
      v38 = (void **)v36;
      if ( v36 != (__int64 *)v35 )
      {
        do
          operator delete(*v38++);
        while ( v38 != v35 );
      }
    }
    goto LABEL_105;
  }
  Name_NodeToCountName(v82, v75, 1);
  LODWORD(v70) = ntohl(*(_DWORD *)(v83 + 20));
  v40 = 0i64;
  v41 = 0;
  v68 = 0;
  v42 = v36;
  v71 = v36;
  do
  {
    if ( v42 == (__int64 *)v35 )
      break;
    v43 = *v42;
    v44 = *v73;
    v45 = (unsigned int)v70;
    do
    {
      if ( (__int64 *)v44 == v73 )
        break;
      LOBYTE(v69) = *(_BYTE *)(v44 + 24);
      LOBYTE(v39) = v69;
      DsFromDnskey = DnsSign::GenerateDsFromDnskey((DnsSign *)v43, v39, v82, (const struct _CountName *)v45);
      v47 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
        && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 5u )
      {
        if ( *(_WORD *)(v43 + 12) == 48 && (v48 = *(_WORD *)(v43 + 14), v48 > 4u) )
          v49 = (unsigned __int16)RR_CalculateDnsKeyTagEx((unsigned __int8 *)(v43 + 56), v48);
        else
          v49 = 0;
        LODWORD(v66) = v49;
        LODWORD(v65) = (unsigned __int8)v69;
        WPP_SF_qdD(
          *((_QWORD *)v47 + 7),
          0x24u,
          (__int64)&WPP_9f96d4c672f338bf067ce342b88232b8_Traceguids,
          DsFromDnskey,
          v65,
          v66,
          v67);
      }
      if ( DsFromDnskey )
      {
        v41 = v68;
        if ( v40 )
          *(_QWORD *)DsFromDnskey = v40;
        else
          *(_QWORD *)DsFromDnskey = 0i64;
        v40 = DsFromDnskey;
      }
      else
      {
        RR_ListFree(v40);
        v40 = 0i64;
        v41 = 1;
        v68 = 1;
      }
      if ( !*(_BYTE *)(v44 + 27) )
      {
        v50 = *(_QWORD *)(v44 + 16);
        if ( *(_BYTE *)(v50 + 27) )
        {
          for ( i = *(_QWORD *)(v44 + 8); !*(_BYTE *)(i + 27) && v44 == *(_QWORD *)(i + 16); i = *(_QWORD *)(i + 8) )
            v44 = i;
          v44 = i;
        }
        else
        {
          do
          {
            v44 = v50;
            v50 = *(_QWORD *)v50;
          }
          while ( !*(_BYTE *)(v50 + 27) );
        }
      }
    }
    while ( !v41 );
    v35 = (void **)*((_QWORD *)&pExceptionObject + 1);
    v42 = ++v71;
  }
  while ( !v41 );
  v36 = (__int64 *)pExceptionObject;
  if ( !v40 )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      v52 = Dbg_NodeName((__int64)v75);
      WPP_SF_s(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x30u,
        (__int64)&WPP_9f96d4c672f338bf067ce342b88232b8_Traceguids,
        v52);
    }
    if ( v79 )
    {
      v53 = (void **)v36;
      if ( v36 != (__int64 *)v35 )
      {
        do
          operator delete(*v53++);
        while ( v53 != v35 );
      }
    }
    goto LABEL_105;
  }
  v54 = v76;
  if ( (unsigned int)Zone_LockForWriteEx(v76, 1, 0x2710u, (__int64)"ds\\dns\\server\\server\\olssigrefresh.cpp", 155) )
  {
    if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
      && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
      && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
    {
      WPP_SF_s(
        *((_QWORD *)WPP_GLOBAL_Control + 7),
        0x31u,
        (__int64)&WPP_9f96d4c672f338bf067ce342b88232b8_Traceguids,
        *(const char **)(v54 + 16));
    }
    if ( v79 )
    {
      v55 = (void **)v36;
      if ( v36 != (__int64 *)v35 )
      {
        do
          operator delete(*v55++);
        while ( v55 != v35 );
      }
    }
LABEL_105:
    if ( v36 )
      operator delete(v36);
    std::_Tree<std::_Tmap_traits<unsigned char,bool,std::less<unsigned char>,std::allocator<std::pair<unsigned char const,bool>>,0>>::~_Tree<std::_Tmap_traits<unsigned char,bool,std::less<unsigned char>,std::allocator<std::pair<unsigned char const,bool>>,0>>((__int64)&v72);
  }
  else
  {
    Dbase_LockEx(0i64, 2, (__int64)"ds\\dns\\server\\server\\olssigrefresh.cpp", 162);
    v56 = v75;
    if ( Up_CreateAppendUpdateMultiRRAdd((__int64)v81, (__int64)v75, v40, 43) )
    {
      v59 = Up_ApplyUpdatesToDatabase((__int64)v81, v54, 50856448i64, v57);
      v60 = v59;
      if ( v59 )
      {
        if ( (unsigned int)DnsOls_OkToFireThrottledEvent(v54, 7659) )
        {
          LOWORD(v69) = 259;
          BYTE2(v69) = 4;
          *(_QWORD *)&v83 = (char *)v56 + 102;
          *((_QWORD *)&v83 + 1) = *(_QWORD *)(v54 + 24);
          v84 = v60;
          v76 = DNS_EVENT_DNSSEC_CHILD_DS_SIGN_FAIL;
          Eventlog_LogEvent((__int64)&v76, v61, 3u, (unsigned __int16 **)&v83, (unsigned __int8 *)&v69, 0, 0, 0i64);
        }
        if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
          && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 2u )
        {
          v62 = Dbg_NodeName((__int64)v56);
          WPP_SF_Dss(
            *((_QWORD *)WPP_GLOBAL_Control + 7),
            0x32u,
            (__int64)&WPP_9f96d4c672f338bf067ce342b88232b8_Traceguids,
            v60,
            (__int64)v62,
            *(_QWORD *)(v54 + 16));
        }
        if ( v79 )
        {
          v63 = (void **)v36;
          if ( v36 != (__int64 *)v35 )
          {
            do
              operator delete(*v63++);
            while ( v63 != v35 );
          }
        }
      }
      else if ( v79 )
      {
        v64 = (void **)v36;
        if ( v36 != (__int64 *)v35 )
        {
          do
            operator delete(*v64++);
          while ( v64 != v35 );
        }
      }
    }
    else if ( v79 )
    {
      v58 = (void **)v36;
      if ( v36 != (__int64 *)v35 )
      {
        do
          operator delete(*v58++);
        while ( v58 != v35 );
      }
    }
    if ( v36 )
      operator delete(v36);
    std::_Tree<std::_Tmap_traits<unsigned char,bool,std::less<unsigned char>,std::allocator<std::pair<unsigned char const,bool>>,0>>::~_Tree<std::_Tmap_traits<unsigned char,bool,std::less<unsigned char>,std::allocator<std::pair<unsigned char const,bool>>,0>>((__int64)&v72);
    Dbase_UnlockEx(0i64, 2, (__int64)"ds\\dns\\server\\server\\olssigrefresh.cpp", 229);
    Zone_UnlockAfterWriteEx(v54, 1, (__int64)"ds\\dns\\server\\server\\olssigrefresh.cpp", 230);
  }
LABEL_177:
  LODWORD(v70) = -1;
  releaseUpdate(DbaseLock, (unsigned int *)&v70, 1);
}
// 14010B9AB: conditional instruction was optimized away because cl.1==0
// 14010B2DC: variable 'v6' is possibly undefined
// 14010B2DC: variable 'v7' is possibly undefined
// 14010B5B4: variable 'v20' is possibly undefined
// 14010B78D: variable 'v26' is possibly undefined
// 14010B7ED: variable 'v29' is possibly undefined
// 14010B9D9: variable 'v39' is possibly undefined
// 14010BA3A: variable 'v47' is possibly undefined
// 14010BA3E: variable 'v65' is possibly undefined
// 14010BA3E: variable 'v66' is possibly undefined
// 14010BA3E: variable 'v67' is possibly undefined
// 14010BC5A: variable 'v57' is possibly undefined
// 14010BCDA: variable 'v61' is possibly undefined
// 140184CA8: using guessed type void __stdcall operator delete(void *);
// 140186388: using guessed type __int128 DNS_EVENT_DNSSEC_CHILD_DS_VALIDATION_FAIL;
// 140186918: using guessed type __int128 DNS_EVENT_DNSSEC_CHILD_DS_SIGN_FAIL;
// 1401EC5E8: using guessed type __int64 DbaseLock;
