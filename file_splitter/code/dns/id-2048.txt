//----- (00000001400FE2CC) ----------------------------------------------------
__int64 __fastcall Rpc_AllocateRR(
        struct _zone_info *a1,
        struct _Dbase_Record *a2,
        unsigned int *a3,
        unsigned __int8 **a4)
{
  _BYTE *ZoneNodeFromDotted; // rax
  unsigned int v9; // esi
  __int64 v10; // r15
  unsigned __int8 *v11; // rax
  unsigned __int8 *v12; // rbx
  unsigned __int64 v13; // rdx
  int v15; // eax
  _BYTE *v16; // rax
  struct _Dbase_Record *v17; // rdi
  const char *v18; // r9
  __int64 v19; // [rsp+30h] [rbp-30h] BYREF
  int v20; // [rsp+38h] [rbp-28h]
  unsigned __int8 *v21; // [rsp+40h] [rbp-20h]
  unsigned __int8 *v22; // [rsp+48h] [rbp-18h]
  unsigned __int64 v23; // [rsp+50h] [rbp-10h]
  __int64 v24; // [rsp+58h] [rbp-8h]
  unsigned int v25; // [rsp+A0h] [rbp+40h] BYREF

  v25 = 0;
  if ( a3 && a4 )
  {
    *a3 = 0;
    *a4 = 0i64;
    memset_0(&v19, 0, 0x30ui64);
    ZoneNodeFromDotted = Lookup_FindZoneNodeFromDotted(a1, *((_BYTE **)a1 + 2), (__int64 *)0xFFFFFFFFFFFFFFFFi64, &v25);
    v9 = v25;
    v10 = (__int64)ZoneNodeFromDotted;
    if ( !v25 && ZoneNodeFromDotted )
    {
      v11 = (unsigned __int8 *)MIDL_user_allocate(0x40000ui64);
      v12 = v11;
      if ( v11 )
      {
        v21 = v11;
        v13 = (unsigned __int64)(v11 + 262128);
        v20 = 262128;
        v24 = 262128i64;
        v23 = (unsigned __int64)v11;
        v22 = v11 + 262128;
        v19 = 0i64;
        *((_DWORD *)v11 + 1) = 0;
        *((_WORD *)v11 + 1) = 0;
        *((_DWORD *)v11 + 2) = *(_DWORD *)(v10 + 84);
        if ( (*(_BYTE *)(v10 + 92) & 0x10) != 0 )
        {
          *((_DWORD *)v11 + 1) = 0x40000000;
          v15 = *((_DWORD *)v11 + 1);
          if ( (*(_DWORD *)(v10 + 92) & 0x100) != 0 )
            v15 = 1610612736;
          *((_DWORD *)v12 + 1) = v15;
        }
        v16 = Name_PlaceNodeLabelInRpcBuffer(v12 + 12, v13, v10);
        if ( v16 )
        {
          v23 = (unsigned __int64)(v16 + 3) & 0xFFFFFFFFFFFFFFFCui64;
          *(_WORD *)v12 = v23 - (_WORD)v12;
          if ( a2 )
          {
            v17 = a2;
          }
          else
          {
            v25 = -1;
            acquireRead(DbaseLock, 0xFFFFFFFF, &v25);
            v17 = *(struct _Dbase_Record **)(v10 + 64);
          }
          do
          {
            if ( *((_WORD *)v17 + 6) == 48 || *((_WORD *)v17 + 6) == 46 && htons(*((_WORD *)v17 + 28)) == 48 )
            {
              v9 = Flat_WriteRecordToBuffer((__int64)&v19, (__int64)v12, (__int64)v17, v10, 0);
              if ( v9 )
                break;
            }
            v17 = *(struct _Dbase_Record **)v17;
          }
          while ( v17 );
          if ( !a2 )
          {
            v25 = -1;
            releaseRead(DbaseLock, &v25, 1);
          }
          if ( !v9 )
          {
            if ( !*((_WORD *)v12 + 1) && !*((_DWORD *)v12 + 2) )
            {
              if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
                && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
                && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
              {
                WPP_SF_s(
                  *((_QWORD *)WPP_GLOBAL_Control + 7),
                  0xCu,
                  (__int64)&WPP_fcf90f505e41335ad1a88e0d5ede2d0c_Traceguids,
                  (const char *)(v10 + 102));
              }
              v23 = (unsigned __int64)v12;
            }
            *((_DWORD *)v12 + 1) |= 0x800000u;
            *a3 = v23 - (_DWORD)v21;
            *a4 = v21;
            if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
              && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
              && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
            {
              WPP_SF_dqd(
                *((_QWORD *)WPP_GLOBAL_Control + 7),
                0xDu,
                (__int64)&WPP_fcf90f505e41335ad1a88e0d5ede2d0c_Traceguids,
                *a3);
            }
            return v9;
          }
        }
        else
        {
          v9 = 14;
        }
        MIDL_user_free(v12);
      }
      else
      {
        return 14;
      }
    }
    return v9;
  }
  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_BYTE *)WPP_GLOBAL_Control + 68) & 4) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    v18 = "Invalid Buffer Length";
    if ( a3 )
      v18 = "Invalid Buffer";
    WPP_SF_s(*((_QWORD *)WPP_GLOBAL_Control + 7), 0xAu, (__int64)&WPP_fcf90f505e41335ad1a88e0d5ede2d0c_Traceguids, v18);
  }
  return 87i64;
}
// 1401EC5E8: using guessed type __int64 DbaseLock;
