//----- (0000000140104728) ----------------------------------------------------
void __fastcall CNodeTypePairCollection::SetPairSigned(
        CNodeTypePairCollection *this,
        struct _DnsTreeNode *a2,
        unsigned __int16 a3)
{
  char *v6; // rax
  _QWORD *v7; // r11
  char *v8; // rdx
  _QWORD *v9; // r9
  char v10; // r8
  __int64 *v11; // rcx
  unsigned __int64 v12; // r10
  bool v13; // cf
  _QWORD *v14; // rax
  __int64 v15; // rcx
  __int64 i; // rcx
  unsigned __int64 v17; // rcx
  bool v18; // cf
  struct _DnsTreeNode *v19; // [rsp+30h] [rbp-28h] BYREF
  unsigned __int16 v20; // [rsp+38h] [rbp-20h]
  char v21; // [rsp+40h] [rbp-18h]
  __int64 v22; // [rsp+60h] [rbp+8h] BYREF

  if ( WPP_GLOBAL_Control != (CDnsClientSubnetRecordsTrie *)&WPP_GLOBAL_Control
    && (*((_DWORD *)WPP_GLOBAL_Control + 17) & 0x200000) != 0
    && *((_BYTE *)WPP_GLOBAL_Control + 65) >= 4u )
  {
    WPP_SF_qd(
      *((_QWORD *)WPP_GLOBAL_Control + 7),
      0xAu,
      (__int64)&WPP_41961b29e2683d0b96cfd252d798ca95_Traceguids,
      a2,
      a3);
  }
  v19 = a2;
  v20 = a3;
  v21 = 1;
  v6 = std::_Tree_val<std::_Tmap_traits<NodeTypePair,bool,CNodeTypePairComparator,std::allocator<std::pair<NodeTypePair const,bool>>,0>>::_Buynode<std::pair<NodeTypePair,bool>>(
         (__int64)this,
         (__int64)&v19);
  v7 = (_QWORD *)*((_QWORD *)this + 1);
  v8 = v6;
  v9 = v7;
  v10 = 1;
  v11 = (__int64 *)v7[1];
  if ( !*((_BYTE *)v11 + 49) )
  {
    v12 = *((_QWORD *)v6 + 3);
    do
    {
      v9 = v11;
      v13 = v12 < v11[3];
      if ( v12 == v11[3] )
        v13 = *((_WORD *)v6 + 16) < *((_WORD *)v11 + 16);
      v10 = v13;
      if ( v13 )
        v11 = (__int64 *)*v11;
      else
        v11 = (__int64 *)v11[2];
    }
    while ( !*((_BYTE *)v11 + 49) );
  }
  v14 = v9;
  if ( v10 )
  {
    if ( v9 == (_QWORD *)*v7 )
    {
      v10 = 1;
LABEL_16:
      std::_Tree<std::_Tmap_traits<IP6_ADDRESS,CDnsPolicy_CriteriaNode *,bool (*)(IP6_ADDRESS const &,IP6_ADDRESS const &),std::allocator<std::pair<IP6_ADDRESS const,CDnsPolicy_CriteriaNode *>>,0>>::_Insert(
        (__int64)this,
        &v22,
        v10,
        v9,
        v8);
      return;
    }
    if ( *((_BYTE *)v9 + 49) )
    {
      v14 = (_QWORD *)v9[2];
    }
    else
    {
      v15 = *v9;
      if ( *(_BYTE *)(*v9 + 49i64) )
      {
        for ( i = v9[1]; !*(_BYTE *)(i + 49) && v14 == *(_QWORD **)i; i = *(_QWORD *)(i + 8) )
          v14 = (_QWORD *)i;
        if ( !*((_BYTE *)v14 + 49) )
          v14 = (_QWORD *)i;
      }
      else
      {
        do
        {
          v14 = (_QWORD *)v15;
          v15 = *(_QWORD *)(v15 + 16);
        }
        while ( !*(_BYTE *)(v15 + 49) );
      }
    }
  }
  v17 = v14[3];
  v18 = v17 < *((_QWORD *)v8 + 3);
  if ( v17 == *((_QWORD *)v8 + 3) )
    v18 = *((_WORD *)v14 + 16) < *((_WORD *)v8 + 16);
  if ( v18 )
    goto LABEL_16;
  operator delete(v8);
}
// 140184CA8: using guessed type void __stdcall operator delete(void *);
