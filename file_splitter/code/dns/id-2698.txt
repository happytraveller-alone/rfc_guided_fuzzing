//----- (0000000140140A4C) ----------------------------------------------------
__int64 __fastcall std::_Tree<std::_Tmap_traits<std::wstring,CDnsPolicy *,CDnsCompareName,std::allocator<std::pair<std::wstring const,CDnsPolicy *>>,0>>::_Linsert(
        __int64 a1,
        __int64 a2,
        const void **a3)
{
  __int64 v4; // rsi
  const void **v6; // r14
  __int64 *v7; // rdi
  const void **v8; // rbx
  bool v9; // r12
  __int64 v10; // rcx
  __int64 *v11; // rbx
  char v12; // r8
  __int64 *v13; // rax
  __int64 *i; // rax
  __int64 v15; // rcx
  const void *v17[2]; // [rsp+40h] [rbp-31h] BYREF
  __int64 v18; // [rsp+50h] [rbp-21h]
  __int64 v19; // [rsp+58h] [rbp-19h]
  const void *v20[2]; // [rsp+68h] [rbp-9h] BYREF
  __int64 v21; // [rsp+78h] [rbp+7h]
  __int64 v22; // [rsp+80h] [rbp+Fh]
  const void **v23; // [rsp+D8h] [rbp+67h] BYREF
  __int64 v24; // [rsp+E0h] [rbp+6Fh]

  v24 = a2;
  v4 = a2;
  v6 = a3 + 3;
  v7 = *(__int64 **)(a1 + 8);
  v8 = (const void **)v7[1];
  v9 = 1;
  if ( !*((_BYTE *)v8 + 73) )
  {
    do
    {
      v7 = (__int64 *)v8;
      v23 = v17;
      v19 = 7i64;
      v18 = 0i64;
      LOWORD(v17[0]) = 0;
      std::wstring::assign(v17, v8 + 3, 0i64, 0xFFFFFFFFFFFFFFFFui64);
      v22 = 7i64;
      v21 = 0i64;
      LOWORD(v20[0]) = 0;
      std::wstring::assign(v20, v6, 0i64, 0xFFFFFFFFFFFFFFFFui64);
      v9 = CDnsCompareName::operator()(v10, (__int64)v20, (__int64)v17);
      if ( v9 )
        v8 = (const void **)*v8;
      else
        v8 = (const void **)v8[2];
    }
    while ( !*((_BYTE *)v8 + 73) );
    v4 = v24;
  }
  v11 = v7;
  if ( v9 )
  {
    if ( v7 == **(__int64 ***)(a1 + 8) )
    {
      v12 = 1;
LABEL_10:
      *(_QWORD *)v4 = *std::_Tree<std::_Tmap_traits<std::wstring,CDnsPolicy *,CDnsCompareName,std::allocator<std::pair<std::wstring const,CDnsPolicy *>>,0>>::_Insert(
                         a1,
                         &v23,
                         v12,
                         v7,
                         a3);
      *(_BYTE *)(v4 + 8) = 1;
      return v4;
    }
    if ( *((_BYTE *)v7 + 73) )
    {
      v11 = (__int64 *)v7[2];
    }
    else
    {
      v13 = (__int64 *)*v7;
      if ( *(_BYTE *)(*v7 + 73) )
      {
        for ( i = (__int64 *)v7[1]; !*((_BYTE *)i + 73) && v11 == (__int64 *)*i; i = (__int64 *)i[1] )
          v11 = i;
        if ( !*((_BYTE *)v11 + 73) )
          v11 = i;
      }
      else
      {
        do
        {
          v11 = v13;
          v13 = (__int64 *)v13[2];
        }
        while ( !*((_BYTE *)v13 + 73) );
      }
    }
  }
  v23 = v20;
  v22 = 7i64;
  v21 = 0i64;
  LOWORD(v20[0]) = 0;
  std::wstring::assign(v20, v6, 0i64, 0xFFFFFFFFFFFFFFFFui64);
  v19 = 7i64;
  v18 = 0i64;
  LOWORD(v17[0]) = 0;
  std::wstring::assign(v17, (const void **)v11 + 3, 0i64, 0xFFFFFFFFFFFFFFFFui64);
  if ( CDnsCompareName::operator()(v15, (__int64)v17, (__int64)v20) )
  {
    v12 = v9;
    goto LABEL_10;
  }
  if ( (unsigned __int64)v6[3] >= 8 )
    operator delete((void *)*v6);
  v6[3] = (const void *)7;
  v6[2] = 0i64;
  *(_WORD *)v6 = 0;
  operator delete(a3);
  *(_QWORD *)v4 = v11;
  *(_BYTE *)(v4 + 8) = 0;
  return v4;
}
// 140140AF2: variable 'v10' is possibly undefined
// 140140BE4: variable 'v15' is possibly undefined
// 140184CA8: using guessed type void __stdcall operator delete(void *);
