Description ID,Description
1,"When a client first connects to a server, it is REQUIRED to send the ClientHello as its first TLS message."
2,"In that case, the client MUST send the same ClientHello without modification, except as follows:
-  If a ""key_share"" extension was supplied in the HelloRetryRequest, replacing the list of shares with a list containing a single KeyShareEntry from the indicated group.
-  Removing the ""early_data"" extension (Section 4.2.10) if one was present.  Early data is not permitted after a HelloRetryRequest.
-  Including a ""cookie"" extension if one was provided in the HelloRetryRequest.
-  Updating the ""pre_shared_key"" extension if present by recomputing the ""obfuscated_ticket_age"" and binder values and (optionally) removing any PSKs which are incompatible with the server's indicated cipher suite.
-  Optionally adding, removing, or changing the length of the ""padding"" extension [RFC7685].
-  Other modifications that may be allowed by an extension defined in the future and present in the HelloRetryRequest."
3,"legacy_version: In TLS 1.3, the client indicates its version preferences in the ""supported_versions"" extension (Section 4.2.1) and the legacy_version field MUST be set to 0x0303, which is the version number for TLS 1.2."
4,"legacy_session_id: In compatibility mode (see Appendix D.4), this field MUST be non-empty, so a client not offering a pre-TLS 1.3 session MUST generate a new 32-byte value."
5,"legacy_session_id: This value need not be random but SHOULD be unpredictable to avoid implementations fixating on a specific value (also known as ossification).  Otherwise, it MUST be set as a zero-length vector(i.e., a zero-valued single byte length field)."
6,"legacy_compression_methods: For every TLS 1.3 ClientHello, this vector MUST contain exactly one byte, set to zero, which corresponds to the ""null"" compression method in prior versions of TLS."
7,"extensions: Servers MUST ignore unrecognized extensions."
8,"When multiple extensions of different types are present, the extensions MAY appear in any order, with the exception of ""pre_shared_key"" (Section 4.2.11) which MUST be the last extension in the ClientHello (but can appear anywhere in the ServerHello extensions block)."
9,"There MUST NOT be more than one extension of the same type in a given extension block."
10,"Implementations of this specification MUST send this extension in the ClientHello containing all versions of TLS which they are prepared to negotiate (for this specification, that means minimally 0x0304, but if previous versions of TLS are allowed to be negotiated, they MUST be present as well)."
11,"If this extension is present, clients MUST ignore the ServerHello.legacy_version value and MUST use only the ""supported_versions"" extension to determine the selected version."
12,"If the ""supported_versions"" extension in the ServerHello contains a version not offered by the client or contains a version prior to TLS 1.3, the client MUST abort the handshake with an ""illegal_parameter"" alert."
13,"When sending the new ClientHello, the client MUST copy the contents of the extension received in the HelloRetryRequest into a ""cookie"" extension in the new ClientHello."
14,"Clients MUST NOT use  cookies in their initial ClientHello in subsequent connections."
15,"filters: If the server has included a non-empty      filters list, the client certificate included in the response MUST      contain all of the specified extension OIDs that the client      recognizes."
16,"filters: For each extension OID recognized by the client, all      of the specified values MUST be present in the client certificate      (but the certificate MAY have other values as well)."
17,"filters: However, the client MUST ignore and skip any unrecognized certificate extension      OIDs."
18,"Clients MUST NOT offer multiple KeyShareEntry values for the same group. "
19,"Clients MUST NOT offer any KeyShareEntry values   for groups not listed in the client's ""supported_groups"" extension."
20,"Upon receipt of this extension in a HelloRetryRequest, the client  MUST verify that (1) the selected_group field corresponds to a group   which was provided in the ""supported_groups"" extension in the   original ClientHello and (2) the selected_group field does not   correspond to a group which was provided in the ""key_share"" extension   in the original ClientHello.  If either of these checks fails, then   the client MUST abort the handshake with an ""illegal_parameter""   alert.  Otherwise, when sending the new ClientHello, the client MUST   replace the original ""key_share"" extension with one containing only a   new KeyShareEntry for the group indicated in the selected_group field   of the triggering HelloRetryRequest."
21,"In order to use PSKs, clients MUST also send a ""psk_key_exchange_modes"" extension."
22,"A client MUST provide a ""psk_key_exchange_modes"" extension if it offers a ""pre_shared_key"" extension."
23,"The ""pre_shared_key"" extension MUST be the last extension in the   ClientHello (this facilitates implementation as described below).   Servers MUST check that it is the last extension and otherwise fail   the handshake with an ""illegal_parameter"" alert."
24,"Clients MUST NOT attempt to   use tickets which have ages greater than the ""ticket_lifetime"" value   which was provided with the ticket."
25,"If the server requests client authentication but no suitable certificate is available, the client MUST send a Certificate  message containing no certificates (i.e., with the ""certificate_list""  field having length 0)."
26,"extensions: Extensions in the Certificate message from the client MUST correspond to extensions in the CertificateRequest message from the server."
27,"If the client opts to send an OCSP response, the body of its ""status_request"" extension MUST be a CertificateStatus structure as defined in [RFC6066]."
28,"The following rules apply to certificates sent by the client:
-  The certificate type MUST be X.509v3 [RFC5280], unless explicitly negotiated otherwise (e.g., [RFC7250]).
-  If the ""certificate_authorities"" extension in the CertificateRequest message was present, at least one of the certificates in the certificate chain SHOULD be issued by one of the listed CAs.
-  The certificates MUST be signed using an acceptable signature algorithm, as described in Section 4.3.2.  Note that this relaxes the constraints on certificate-signing algorithms found in prior versions of TLS.
-  If the CertificateRequest message contained a non-empty ""oid_filters"" extension, the end-entity certificate MUST match the extension OIDs that are recognized by the client, as described in Section 4.2.5."
29,"Servers MUST send this message when authenticating via a certificate."
30,"Clients MUST send this message whenever authenticating via a certificate (i.e., when the Certificate message is non-empty)."
31,"If the CertificateVerify message is sent by a server, the signature
   algorithm MUST be one offered in the client's ""signature_algorithms""
   extension unless no valid certificate chain can be produced without
   unsupported algorithms (see Section 4.2.3)."
32,"If sent by a client, the signature algorithm used in the signature
   MUST be one of those present in the supported_signature_algorithms
   field of the ""signature_algorithms"" extension in the
   CertificateRequest message."
33,"If the server sent an ""early_data"" extension in EncryptedExtensions,
   the client MUST send an EndOfEarlyData message after receiving the
   server Finished."
34,"If the server does not send an ""early_data""
   extension in EncryptedExtensions, then the client MUST NOT send an
   EndOfEarlyData message."