Description ID,Description,extracted_rule,single_extracted_rule
1,"When a client first connects to a server, it is REQUIRED to send the ClientHello as its first TLS message.",<CMC> <1> (Clients are REQUIRED to send the ClientHello as their first TLS message.) + <SMP> <0> (Servers MUST accept the ClientHello as the first TLS message received.),<CMC> <1> (Clients are REQUIRED to send the ClientHello as their first TLS message.) + <SMP> <0> (Servers MUST accept the ClientHello as the first TLS message received.)
2,"In that case, the client MUST send the same ClientHello without modification, except as follows:
-  If a ""key_share"" extension was supplied in the HelloRetryRequest, replacing the list of shares with a list containing a single KeyShareEntry from the indicated group.
-  Removing the ""early_data"" extension (Section 4.2.10) if one was present.  Early data is not permitted after a HelloRetryRequest.
-  Including a ""cookie"" extension if one was provided in the HelloRetryRequest.
-  Updating the ""pre_shared_key"" extension if present by recomputing the ""obfuscated_ticket_age"" and binder values and (optionally) removing any PSKs which are incompatible with the server's indicated cipher suite.
-  Optionally adding, removing, or changing the length of the ""padding"" extension [RFC7685].
-  Other modifications that may be allowed by an extension defined in the future and present in the HelloRetryRequest.","<CMC> <1> (Clients MUST send the same ClientHello without modification, except as specified.) + <SMP> <0> (Servers MUST accept the same ClientHello without modification, except as specified.)
<CMC> <1> (Clients MUST replace the list of shares in the ""key_share"" extension with a single KeyShareEntry from the indicated group if supplied.) + <SMP> <0> (Servers MUST accept the modified ""key_share"" extension containing a single KeyShareEntry.)
<CMC> <1> (Clients MUST remove the ""early_data"" extension if present after a HelloRetryRequest.) + <SMP> <0> (Servers MUST not process ""early_data"" after a HelloRetryRequest.)
<CMC> <1> (Clients MUST include a ""cookie"" extension if provided in the HelloRetryRequest.) + <SMP> <0> (Servers MUST accept the ""cookie"" extension if present.)
<CMC> <1> (Clients MUST update the ""pre_shared_key"" extension by recomputing the ""obfuscated_ticket_age"" and binder values.) + <SMP> <0> (Servers MUST verify the updated ""pre_shared_key"" extension.)
<CMC> <1> (Clients MAY add, remove, or change the length of the ""padding"" extension.) + <SMP> <0> (Servers MUST accommodate changes in the ""padding"" extension if present.)","<CMC> <1> (Clients MUST send the same ClientHello without modification, except as specified.) + <SMP> <0> (Servers MUST accept the same ClientHello without modification, except as specified.)"
,,,"<CMC> <1> (Clients MUST replace the list of shares in the ""key_share"" extension with a single KeyShareEntry from the indicated group if supplied.) + <SMP> <0> (Servers MUST accept the modified ""key_share"" extension containing a single KeyShareEntry.)"
,,,"<CMC> <1> (Clients MUST remove the ""early_data"" extension if present after a HelloRetryRequest.) + <SMP> <0> (Servers MUST not process ""early_data"" after a HelloRetryRequest.)"
,,,"<CMC> <1> (Clients MUST include a ""cookie"" extension if provided in the HelloRetryRequest.) + <SMP> <0> (Servers MUST accept the ""cookie"" extension if present.)"
,,,"<CMC> <1> (Clients MUST update the ""pre_shared_key"" extension by recomputing the ""obfuscated_ticket_age"" and binder values.) + <SMP> <0> (Servers MUST verify the updated ""pre_shared_key"" extension.)"
,,,"<CMC> <1> (Clients MAY add, remove, or change the length of the ""padding"" extension.) + <SMP> <0> (Servers MUST accommodate changes in the ""padding"" extension if present.)"
3,"legacy_version: In TLS 1.3, the client indicates its version preferences in the ""supported_versions"" extension (Section 4.2.1) and the legacy_version field MUST be set to 0x0303, which is the version number for TLS 1.2.","<CMC> <1> (Clients MUST indicate their version preferences in the ""supported_versions"" extension.) + <SMP> <1> (Servers MUST recognize that the legacy_version field is set to 0x0303 for TLS 1.2.)  
<CMC> <1> (Clients MUST set the legacy_version field to 0x0303.) + <SMP> <1> (Servers MUST process the legacy_version field as 0x0303 indicating TLS 1.2.)","<CMC> <1> (Clients MUST indicate their version preferences in the ""supported_versions"" extension.) + <SMP> <1> (Servers MUST recognize that the legacy_version field is set to 0x0303 for TLS 1.2.)"
,,,<CMC> <1> (Clients MUST set the legacy_version field to 0x0303.) + <SMP> <1> (Servers MUST process the legacy_version field as 0x0303 indicating TLS 1.2.)
4,"legacy_session_id: In compatibility mode (see Appendix D.4), this field MUST be non-empty, so a client not offering a pre-TLS 1.3 session MUST generate a new 32-byte value.",<CMC> <1> (Clients MUST generate a new 32-byte value for the legacy_session_id field if not offering a pre-TLS 1.3 session in compatibility mode.) + <SMP> <0> (Servers MUST accept the legacy_session_id field as non-empty in compatibility mode.),<CMC> <1> (Clients MUST generate a new 32-byte value for the legacy_session_id field if not offering a pre-TLS 1.3 session in compatibility mode.) + <SMP> <0> (Servers MUST accept the legacy_session_id field as non-empty in compatibility mode.)
5,"The following rules apply to certificates sent by the client:
-  The certificate type MUST be X.509v3 [RFC5280], unless explicitly negotiated otherwise (e.g., [RFC7250]).
-  If the ""certificate_authorities"" extension in the CertificateRequest message was present, at least one of the certificates in the certificate chain SHOULD be issued by one of the listed CAs.
-  The certificates MUST be signed using an acceptable signature algorithm, as described in Section 4.3.2.  Note that this relaxes the constraints on certificate-signing algorithms found in prior versions of TLS.
-  If the CertificateRequest message contained a non-empty ""oid_filters"" extension, the end-entity certificate MUST match the extension OIDs that are recognized by the client, as described in Section 4.2.5.","### OUTPUT
<CMC> <1> (Clients MUST send certificates of type X.509v3 unless explicitly negotiated otherwise.) + <SMP> <0> (Servers MUST accept only certificates of type X.509v3 unless explicitly negotiated otherwise.)
<CMC> <1> (Clients SHOULD ensure at least one certificate in the chain is issued by listed CAs if the ""certificate_authorities"" extension was present.) + <SMP> <0> (Servers SHOULD verify at least one certificate in the chain is issued by listed CAs if the ""certificate_authorities"" extension was present.)
<CMC> <1> (Clients MUST sign certificates using an acceptable signature algorithm.) + <SMP> <0> (Servers MUST verify that certificates are signed using an acceptable signature algorithm.)
<CMC> <1> (Clients MUST ensure the end-entity certificate matches recognized OIDs if ""oid_filters"" extension is present.) + <SMP> <0> (Servers MUST check that the end-entity certificate matches recognized OIDs if ""oid_filters"" extension is present.)",<CMC> <1> (Clients MUST send certificates of type X.509v3 unless explicitly negotiated otherwise.) + <SMP> <0> (Servers MUST accept only certificates of type X.509v3 unless explicitly negotiated otherwise.)
,,,"<CMC> <1> (Clients SHOULD ensure at least one certificate in the chain is issued by listed CAs if the ""certificate_authorities"" extension was present.) + <SMP> <0> (Servers SHOULD verify at least one certificate in the chain is issued by listed CAs if the ""certificate_authorities"" extension was present.)"
,,,<CMC> <1> (Clients MUST sign certificates using an acceptable signature algorithm.) + <SMP> <0> (Servers MUST verify that certificates are signed using an acceptable signature algorithm.)
,,,"<CMC> <1> (Clients MUST ensure the end-entity certificate matches recognized OIDs if ""oid_filters"" extension is present.) + <SMP> <0> (Servers MUST check that the end-entity certificate matches recognized OIDs if ""oid_filters"" extension is present.)"
6,Servers MUST send this message when authenticating via a certificate.,<SMC> <1> (Servers MUST send a message when authenticating via a certificate.) + <CMP> <0> (Clients MUST process the message sent by the server when authenticating via a certificate.),<SMC> <1> (Servers MUST send a message when authenticating via a certificate.) + <CMP> <0> (Clients MUST process the message sent by the server when authenticating via a certificate.)
7,"Clients MUST send this message whenever authenticating via a certificate (i.e., when the Certificate message is non-empty).",<CMC> <1> (Clients MUST send this message whenever authenticating via a certificate.) + <SMP> <0> (Servers MUST accept this message when it is sent during certificate authentication.),<CMC> <1> (Clients MUST send this message whenever authenticating via a certificate.) + <SMP> <0> (Servers MUST accept this message when it is sent during certificate authentication.)
8,"If the CertificateVerify message is sent by a server, the signature
   algorithm MUST be one offered in the client's ""signature_algorithms""
   extension unless no valid certificate chain can be produced without
   unsupported algorithms (see Section 4.2.3).","<SMC> <1> (Servers MUST use a signature algorithm offered in the client's ""signature_algorithms"" extension for the CertificateVerify message unless no valid certificate chain can be produced.) + <CMP> <1> (Clients MUST provide a ""signature_algorithms"" extension listing acceptable signature algorithms.)","<SMC> <1> (Servers MUST use a signature algorithm offered in the client's ""signature_algorithms"" extension for the CertificateVerify message unless no valid certificate chain can be produced.) + <CMP> <1> (Clients MUST provide a ""signature_algorithms"" extension listing acceptable signature algorithms.)"
