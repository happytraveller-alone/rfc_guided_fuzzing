index,section_name,title,content
1,4.. Handshake Protocol,Handshake Protocol Overview,"The handshake protocol is used to negotiate the security parameters of a connection. Handshake messages are supplied to the TLS record layer, where they are encapsulated within one or more TLSPlaintext or TLSCiphertext structures which are processed and transmitted as specified by the current active connection state."
2,4.. Handshake Protocol,Handshake Message Types Enumeration,"enum {
    client_hello(1),
    server_hello(2),
    new_session_ticket(4),
    end_of_early_data(5),
    encrypted_extensions(8),
    certificate(11),
    certificate_request(13),
    certificate_verify(15),
    finished(20),
    key_update(24),
    message_hash(254),
    (255)
} HandshakeType;"
3,4.. Handshake Protocol,Handshake Message Structure,"struct {
    HandshakeType msg_type;    /* handshake type */
    uint24 length;             /* remaining bytes in message */
    select (Handshake.msg_type) {
        case client_hello:          ClientHello;
        case server_hello:          ServerHello;
        case end_of_early_data:     EndOfEarlyData;
        case encrypted_extensions:  EncryptedExtensions;
        case certificate_request:   CertificateRequest;
        case certificate:           Certificate;
        case certificate_verify:    CertificateVerify;
        case finished:              Finished;
        case new_session_ticket:    NewSessionTicket;
        case key_update:            KeyUpdate;
    };
} Handshake;"
4,4.. Handshake Protocol,Message Order and Error Handling,"Protocol messages MUST be sent in the order defined in Section 4.4.1 and shown in the diagrams in Section 2. A peer which receives a handshake message in an unexpected order MUST abort the handshake with an ""unexpected_message"" alert."
5,4.. Handshake Protocol,IANA Message Type Assignments,New handshake message types are assigned by IANA as described in Section 11.
6,4.1.. Handshake Protocol_Key Exchange Messages,Key Exchange Messages Overview,"The key exchange messages are used to determine the security capabilities of the client and the server and to establish shared secrets, including the traffic keys used to protect the rest of the handshake and the data."
7,4.1.1.. Handshake Protocol_Key Exchange Messages_Cryptographic Negotiation,Cryptographic Negotiation Overview,"In TLS, the cryptographic negotiation proceeds by the client offering four sets of options in its ClientHello: a list of cipher suites, a supported_groups extension, a signature_algorithms extension, and a pre_shared_key extension."
8,4.1.1.. Handshake Protocol_Key Exchange Messages_Cryptographic Negotiation,Cipher Suites,The client provides a list of cipher suites indicating the AEAD algorithm/HKDF hash pairs that it supports.
9,4.1.1.. Handshake Protocol_Key Exchange Messages_Cryptographic Negotiation,Supported Groups and Key Shares,"The client includes a 'supported_groups' extension (Section 4.2.7) indicating the (EC)DHE groups it supports, along with a 'key_share' extension (Section 4.2.8) containing (EC)DHE shares for some or all of these groups."
10,4.1.1.. Handshake Protocol_Key Exchange Messages_Cryptographic Negotiation,Signature Algorithms,"The client may add a 'signature_algorithms' extension (Section 4.2.3) to indicate acceptable signature algorithms, and a 'signature_algorithms_cert' extension for certificate-specific algorithms."
11,4.1.1.. Handshake Protocol_Key Exchange Messages_Cryptographic Negotiation,Pre-Shared Key Extensions,The client may include a 'pre_shared_key' extension (Section 4.2.11) listing known symmetric key identities and a 'psk_key_exchange_modes' extension (Section 4.2.9) indicating key exchange modes for PSKs.
12,4.1.1.. Handshake Protocol_Key Exchange Messages_Cryptographic Negotiation,Server Parameter Selection,"If the server does not select a PSK, it independently selects a cipher suite, (EC)DHE group, key share, and signature algorithm. If there is no overlap in 'supported_groups', the server MUST abort the handshake with a 'handshake_failure' or 'insufficient_security' alert."
13,4.1.1.. Handshake Protocol_Key Exchange Messages_Cryptographic Negotiation,PSK Selection,"If the server selects a PSK, it MUST choose a key establishment mode from the client's 'psk_key_exchange_modes'. If the PSK can be used without (EC)DHE, non-overlap in 'supported_groups' need not be fatal."
14,4.1.1.. Handshake Protocol_Key Exchange Messages_Cryptographic Negotiation,HelloRetryRequest,"If the server selects an (EC)DHE group and the client did not offer a compatible 'key_share' extension, the server MUST respond with a HelloRetryRequest (Section 4.1.4)."
15,4.1.1.. Handshake Protocol_Key Exchange Messages_Cryptographic Negotiation,ServerHello Parameter Indication,"If parameters are successfully negotiated without requiring a HelloRetryRequest, the server indicates the selected parameters in the ServerHello: it sends a 'pre_shared_key' extension if PSK is used, and a 'key_share' extension when (EC)DHE is in use."
16,4.1.1.. Handshake Protocol_Key Exchange Messages_Cryptographic Negotiation,Certificate Authentication,"When authenticating via a certificate, the server sends the Certificate (Section 4.4.2) and CertificateVerify (Section 4.4.3) messages. In TLS 1.3, either a PSK or a certificate is used, but not both."
17,4.1.1.. Handshake Protocol_Key Exchange Messages_Cryptographic Negotiation,Negotiation Failure,"If the server cannot negotiate a supported set of parameters, it MUST abort the handshake with either a 'handshake_failure' or 'insufficient_security' fatal alert (see Section 6)."
18,4.1.2.. Handshake Protocol_Key Exchange Messages_Client Hello,ClientHello Message Overview,"When a client first connects to a server, it is REQUIRED to send the ClientHello as its first TLS message. The client will also send a ClientHello when the server has responded to its ClientHello with a HelloRetryRequest. In that case, the client MUST send the same ClientHello without modification, except as follows: - If a ""key_share"" extension was supplied in the HelloRetryRequest, replacing the list of shares with a list containing a single KeyShareEntry from the indicated group. - Removing the ""early_data"" extension if one was present. Early data is not permitted after a HelloRetryRequest. - Including a ""cookie"" extension if one was provided in the HelloRetryRequest. - Updating the ""pre_shared_key"" extension if present by recomputing the ""obfuscated_ticket_age"" and binder values and (optionally) removing any PSKs which are incompatible with the server's indicated cipher suite. - Optionally adding, removing, or changing the length of the ""padding"" extension [RFC7685]. - Other modifications that may be allowed by an extension defined in the future and present in the HelloRetryRequest."
19,4.1.2.. Handshake Protocol_Key Exchange Messages_Client Hello,Connection Termination Rules,"Because TLS 1.3 forbids renegotiation, if a server has negotiated TLS 1.3 and receives a ClientHello at any other time, it MUST terminate the connection with an ""unexpected_message"" alert. If a server established a TLS connection with a previous version of TLS and receives a TLS 1.3 ClientHello in a renegotiation, it MUST retain the previous protocol version. In particular, it MUST NOT negotiate TLS 1.3."
20,4.1.2.. Handshake Protocol_Key Exchange Messages_Client Hello,ClientHello Message Structure,Structure of this message: uint16 ProtocolVersion; opaque Random[32]; uint8 CipherSuite[2]; struct { ProtocolVersion legacy_version = 0x0303; /* TLS v1.2 */ Random random; opaque legacy_session_id<0..32>; CipherSuite cipher_suites<2..2^16-2>; opaque legacy_compression_methods<1..2^8-1>; Extension extensions<8..2^16-1>; } ClientHello;
21,4.1.2.. Handshake Protocol_Key Exchange Messages_Client Hello,Field Descriptions,"1. legacy_version: In previous versions of TLS, this field was used for version negotiation and represented the highest version number supported by the client. In TLS 1.3, the legacy_version field MUST be set to 0x0303, which is the version number for TLS 1.2. 2. random: 32 bytes generated by a secure random number generator. 3. legacy_session_id: A client which has a cached session ID set by a pre-TLS 1.3 server SHOULD set this field to that value. In compatibility mode, this field MUST be non-empty. 4. cipher_suites: A list of the symmetric cipher options supported by the client, in descending order of preference. 5. legacy_compression_methods: This vector MUST contain exactly one byte, set to zero, which corresponds to the ""null"" compression method. 6. extensions: Clients request extended functionality from servers by sending data in the extensions field. Servers MUST ignore unrecognized extensions."
22,4.1.2.. Handshake Protocol_Key Exchange Messages_Client Hello,Extensions Handling,"TLS 1.3 ClientHello messages always contain extensions (minimally ""supported_versions""). The presence of extensions can be detected by determining whether there are bytes following the compression_methods field at the end of the ClientHello. If negotiating a version of TLS prior to 1.3, a server MUST check that the message either contains no data after legacy_compression_methods or that it contains a valid extensions block with no data following. If not, then it MUST abort the handshake with a ""decode_error"" alert."
23,4.1.2.. Handshake Protocol_Key Exchange Messages_Client Hello,Post-ClientHello Behavior,"After sending the ClientHello message, the client waits for a ServerHello or HelloRetryRequest message. If early data is in use, the client may transmit early Application Data while waiting for the next handshake message."
24,4.1.3.. Handshake Protocol_Key Exchange Messages_Server Hello,ServerHello Message Overview,The server will send this message in response to a ClientHello message to proceed with the handshake if it is able to negotiate an acceptable set of handshake parameters based on the ClientHello.
25,4.1.3.. Handshake Protocol_Key Exchange Messages_Server Hello,ServerHello Message Structure,"struct {
    ProtocolVersion legacy_version = 0x0303;    /* TLS v1.2 */
    Random random;
    opaque legacy_session_id_echo<0..32>;
    CipherSuite cipher_suite;
    uint8 legacy_compression_method = 0;
    Extension extensions<6..2^16-1>;
} ServerHello;"
26,4.1.3.. Handshake Protocol_Key Exchange Messages_Server Hello,Field Descriptions,"1. **legacy_version**: Set to 0x0303 (TLS v1.2) for compatibility with middleboxes. The actual version is indicated using the ""supported_versions"" extension.

2. **random**: 32 bytes generated by a secure random number generator. The last 8 bytes must be overwritten if negotiating TLS 1.2 or TLS 1.1, while the rest must be random.

3. **legacy_session_id_echo**: Echoes the client's legacy_session_id. If this does not match the client's sent value, the handshake must abort with an ""illegal_parameter"" alert.

4. **cipher_suite**: The selected cipher suite from the ClientHello. If not offered, the handshake must abort with an ""illegal_parameter"" alert.

5. **legacy_compression_method**: Must be set to 0.

6. **extensions**: Must include only those necessary for establishing the cryptographic context. All TLS 1.3 ServerHello messages must contain the ""supported_versions"" extension."
27,4.1.3.. Handshake Protocol_Key Exchange Messages_Server Hello,HelloRetryRequest Compatibility,"The HelloRetryRequest message uses the same structure as the ServerHello, but with Random set to the SHA-256 of ""HelloRetryRequest"":

    CF 21 AD 74 E5 9A 61 11 BE 1D 8C 02 1E 65 B8 91
    C2 A2 11 16 7A BB 8C 5E 07 9E 09 E2 C8 A8 33 9C."
28,4.1.3.. Handshake Protocol_Key Exchange Messages_Server Hello,Downgrade Protection Mechanism,"TLS 1.3 has a downgrade protection mechanism embedded in the server's random value. If negotiating TLS 1.2, the last 8 bytes of the Random value must be set to:

    44 4F 57 4E 47 52 44 01

If negotiating TLS 1.1 or below, they should be set to:

    44 4F 57 4E 47 52 44 00.

Clients must check these values and abort the handshake with an ""illegal_parameter"" alert if they match."
29,4.1.3.. Handshake Protocol_Key Exchange Messages_Server Hello,Renegotiation Handling,"A legacy TLS client performing renegotiation with TLS 1.2 or prior that receives a TLS 1.3 ServerHello during renegotiation must abort the handshake with a ""protocol_version"" alert. Note that renegotiation is not possible when TLS 1.3 has been negotiated."
30,4.1.4.. Handshake Protocol_Key Exchange Messages_Hello Retry Request,HelloRetryRequest Overview,"The server will send this message in response to a ClientHello message if it is able to find an acceptable set of parameters but the ClientHello does not contain sufficient information to proceed with the handshake. The HelloRetryRequest has the same format as a ServerHello message, and the legacy_version, legacy_session_id_echo, cipher_suite, and legacy_compression_method fields have the same meaning. However, it is discussed as if it were a distinct message."
31,4.1.4.. Handshake Protocol_Key Exchange Messages_Hello Retry Request,Extensions Requirements,"The server's extensions MUST contain 'supported_versions'. Additionally, it SHOULD contain the minimal set of extensions necessary for the client to generate a correct ClientHello pair. A HelloRetryRequest MUST NOT contain any extensions that were not first offered by the client in its ClientHello, with the exception of optionally the 'cookie' extension."
32,4.1.4.. Handshake Protocol_Key Exchange Messages_Hello Retry Request,Client Processing of HelloRetryRequest,"Upon receipt of a HelloRetryRequest, the client MUST check the legacy_version, legacy_session_id_echo, cipher_suite, and legacy_compression_method as specified in Section 4.1.3 and then process the extensions, starting with determining the version using 'supported_versions'. Clients MUST abort the handshake with an 'illegal_parameter' alert if the HelloRetryRequest would not result in any change in the ClientHello. If a client receives a second HelloRetryRequest in the same connection, it MUST abort the handshake with an 'unexpected_message' alert."
33,4.1.4.. Handshake Protocol_Key Exchange Messages_Hello Retry Request,HelloRetryRequest Extensions,The HelloRetryRequest extensions defined in this specification are: - supported_versions (see Section 4.2.1) - cookie (see Section 4.2.2) - key_share (see Section 4.2.8).
34,4.1.4.. Handshake Protocol_Key Exchange Messages_Hello Retry Request,Cipher Suite Negotiation,"A client which receives a cipher suite that was not offered MUST abort the handshake. Servers MUST ensure that they negotiate the same cipher suite when receiving a conformant updated ClientHello. Upon receiving the ServerHello, clients MUST check that the cipher suite supplied in the ServerHello is the same as that in the HelloRetryRequest and otherwise abort the handshake with an 'illegal_parameter' alert."
35,4.1.4.. Handshake Protocol_Key Exchange Messages_Hello Retry Request,Updated ClientHello Considerations,"In its updated ClientHello, the client SHOULD NOT offer any pre-shared keys associated with a hash other than that of the selected cipher suite. This allows the client to avoid having to compute partial hash transcripts for multiple hashes in the second ClientHello."
36,4.1.4.. Handshake Protocol_Key Exchange Messages_Hello Retry Request,Version Retention,"The value of selected_version in the HelloRetryRequest 'supported_versions' extension MUST be retained in the ServerHello, and a client MUST abort the handshake with an 'illegal_parameter' alert if the value changes."
37,4.2.. Handshake Protocol_Extensions,Extension Structure,"A number of TLS messages contain tag-length-value encoded extensions structures.

struct {
    ExtensionType extension_type;
    opaque extension_data<0..2^16-1>;
} Extension;

Here:
- ""extension_type"" identifies the particular extension type.
- ""extension_data"" contains information specific to the particular extension type."
38,4.2.. Handshake Protocol_Extensions,Extension Types Enumeration,"enum {
    server_name(0),                             /* RFC 6066 */
    max_fragment_length(1),                     /* RFC 6066 */
    status_request(5),                          /* RFC 6066 */
    supported_groups(10),                       /* RFC 8422, 7919 */
    signature_algorithms(13),                   /* RFC 8446 */
    use_srtp(14),                               /* RFC 5764 */
    heartbeat(15),                              /* RFC 6520 */
    application_layer_protocol_negotiation(16), /* RFC 7301 */
    signed_certificate_timestamp(18),           /* RFC 6962 */
    client_certificate_type(19),                /* RFC 7250 */
    server_certificate_type(20),                /* RFC 7250 */
    padding(21),                                /* RFC 7685 */
    pre_shared_key(41),                         /* RFC 8446 */
    early_data(42),                             /* RFC 8446 */
    supported_versions(43),                     /* RFC 8446 */
    cookie(44),                                 /* RFC 8446 */
    psk_key_exchange_modes(45),                 /* RFC 8446 */
    certificate_authorities(47),                /* RFC 8446 */
    oid_filters(48),                            /* RFC 8446 */
    post_handshake_auth(49),                    /* RFC 8446 */
    signature_algorithms_cert(50),              /* RFC 8446 */
    key_share(51),                              /* RFC 8446 */
    (65535)
} ExtensionType;"
39,4.2.. Handshake Protocol_Extensions,Extension Negotiation,"Extensions are generally structured in a request/response fashion, though some extensions are just indications with no corresponding response. The client sends its extension requests in the ClientHello message, and the server sends its extension responses in the ServerHello, EncryptedExtensions, HelloRetryRequest, and Certificate messages. The server sends extension requests in the CertificateRequest message which a client MAY respond to with a Certificate message."
40,4.2.. Handshake Protocol_Extensions,Extension Handling Rules,"Implementations MUST NOT send extension responses if the remote endpoint did not send the corresponding extension requests, with the exception of the ""cookie"" extension in the HelloRetryRequest. Upon receiving such an extension, an endpoint MUST abort the handshake with an ""unsupported_extension"" alert."
41,4.2.. Handshake Protocol_Extensions,Extension Message Compatibility,"The table below indicates the messages where a given extension may appear, using the following notation: CH (ClientHello), SH (ServerHello), EE (EncryptedExtensions), CT (Certificate), CR (CertificateRequest), NST (NewSessionTicket), and HRR (HelloRetryRequest). If an implementation receives an extension which it recognizes and which is not specified for the message in which it appears, it MUST abort the handshake with an ""illegal_parameter"" alert."
42,4.2.. Handshake Protocol_Extensions,Extension Order and Uniqueness,"When multiple extensions of different types are present, the extensions MAY appear in any order, with the exception of ""pre_shared_key"" which MUST be the last extension in the ClientHello. There MUST NOT be more than one extension of the same type in a given extension block."
43,4.2.. Handshake Protocol_Extensions,0-RTT Parameters and Security Considerations,"In TLS 1.3, unlike TLS 1.2, extensions are negotiated for each handshake even when in resumption-PSK mode. However, 0-RTT parameters are those negotiated in the previous handshake; mismatches may require rejecting 0-RTT. There are subtle interactions that may occur in this protocol between new features and existing features which may result in a significant reduction in overall security."
44,4.2.. Handshake Protocol_Extensions,Design Considerations for Extensions,"- Some cases where a server does not agree to an extension are error conditions, and some are simply refusals to support particular features. In general, error alerts should be used for the former and a field in the server extension response for the latter.
- Extensions should, as far as possible, be designed to prevent any attack that forces use (or non-use) of a particular feature by manipulation of handshake messages."
45,4.2.1.. Handshake Protocol_Extensions_Supported Versions,Supported Versions Extension Overview,"struct {
          select (Handshake.msg_type) {
              case client_hello:
                   ProtocolVersion versions<2..254>;

              case server_hello: /* and HelloRetryRequest */
                   ProtocolVersion selected_version;
          };
      } SupportedVersions;

   The ""supported_versions"" extension is used by the client to indicate
   which versions of TLS it supports and by the server to indicate which
   version it is using. The extension contains a list of supported
   versions in preference order, with the most preferred version first."
46,4.2.1.. Handshake Protocol_Extensions_Supported Versions,ClientHello Requirements,"Implementations of this specification MUST send this extension in the
   ClientHello containing all versions of TLS which they are prepared to
   negotiate (for this specification, that means minimally 0x0304, but
   if previous versions of TLS are allowed to be negotiated, they MUST
   be present as well)."
47,4.2.1.. Handshake Protocol_Extensions_Supported Versions,Server Behavior Without Extension,"If this extension is not present, servers which are compliant with
   this specification and which also support TLS 1.2 MUST negotiate
   TLS 1.2 or prior as specified in [RFC5246], even if
   ClientHello.legacy_version is 0x0304 or later. Servers MAY abort the
   handshake upon receiving a ClientHello with legacy_version 0x0304 or
   later."
48,4.2.1.. Handshake Protocol_Extensions_Supported Versions,Server Behavior With Extension,"If this extension is present in the ClientHello, servers MUST NOT use
   the ClientHello.legacy_version value for version negotiation and MUST
   use only the ""supported_versions"" extension to determine client
   preferences. Servers MUST only select a version of TLS present in
   that extension and MUST ignore any unknown versions that are present
   in that extension."
49,4.2.1.. Handshake Protocol_Extensions_Supported Versions,Negotiation of TLS Versions,"Note that this mechanism makes it possible to negotiate a version prior
   to TLS 1.2 if one side supports a sparse range. Implementations of TLS 1.3 which choose to support prior
   versions of TLS SHOULD support TLS 1.2. Servers MUST be prepared to
   receive ClientHellos that include this extension but do not include
   0x0304 in the list of versions."
50,4.2.1.. Handshake Protocol_Extensions_Supported Versions,ServerHello Requirements,"A server which negotiates a version of TLS prior to TLS 1.3 MUST set
   ServerHello.version and MUST NOT send the ""supported_versions""
   extension. A server which negotiates TLS 1.3 MUST respond by sending
   a ""supported_versions"" extension containing the selected version
   value (0x0304). It MUST set the ServerHello.legacy_version field to
   0x0303 (TLS 1.2)."
51,4.2.1.. Handshake Protocol_Extensions_Supported Versions,Client Checks for Extension,"Clients MUST check for this extension prior to
   processing the rest of the ServerHello (although they will have to
   parse the ServerHello in order to read the extension). If this
   extension is present, clients MUST ignore the
   ServerHello.legacy_version value and MUST use only the
   ""supported_versions"" extension to determine the selected version."
52,4.2.1.. Handshake Protocol_Extensions_Supported Versions,Handshake Abort Conditions,"If the ""supported_versions"" extension in the ServerHello contains a
   version not offered by the client or contains a version prior to
   TLS 1.3, the client MUST abort the handshake with an
   ""illegal_parameter"" alert."
53,4.2.2.. Handshake Protocol_Extensions_Cookie,Cookie Structure,"struct {
          opaque cookie<1..2^16-1>;
      } Cookie;"
54,4.2.2.. Handshake Protocol_Extensions_Cookie,Purpose of Cookies,"Cookies serve two primary purposes:

- Allowing the server to force the client to demonstrate reachability at their apparent network address (thus providing a measure of DoS protection). This is primarily useful for non-connection-oriented transports (see [RFC6347] for an example of this).

- Allowing the server to offload state to the client, thus allowing it to send a HelloRetryRequest without storing any state. The server can do this by storing the hash of the ClientHello in the HelloRetryRequest cookie (protected with some suitable integrity protection algorithm)."
55,4.2.2.. Handshake Protocol_Extensions_Cookie,Cookie Extension Handling,"When sending a HelloRetryRequest, the server MAY provide a ""cookie"" extension to the client (this is an exception to the usual rule that the only extensions that may be sent are those that appear in the ClientHello). When sending the new ClientHello, the client MUST copy the contents of the extension received in the HelloRetryRequest into a ""cookie"" extension in the new ClientHello. Clients MUST NOT use cookies in their initial ClientHello in subsequent connections."
56,4.2.2.. Handshake Protocol_Extensions_Cookie,Stateless Server Behavior,"When a server is operating statelessly, it may receive an unprotected record of type change_cipher_spec between the first and second ClientHello (see Section 5). Since the server is not storing any state, this will appear as if it were the first message to be received. Servers operating statelessly MUST ignore these records."
57,4.2.3.. Handshake Protocol_Extensions_Signature Algorithms,Signature Algorithms Extensions Overview,"TLS 1.3 provides two extensions for indicating which signature algorithms may be used in digital signatures: the ""signature_algorithms_cert"" extension for signatures in certificates and the ""signature_algorithms"" extension for signatures in CertificateVerify messages. If no ""signature_algorithms_cert"" extension is present, the ""signature_algorithms"" extension applies to signatures in certificates as well. Clients must send the ""signature_algorithms"" extension if they want the server to authenticate itself via a certificate. If the server is authenticating via a certificate and the client has not sent this extension, the server must abort the handshake with a ""missing_extension"" alert."
58,4.2.3.. Handshake Protocol_Extensions_Signature Algorithms,Purpose of Signature Algorithms Extensions,"The ""signature_algorithms_cert"" extension was added to allow implementations to signal their capabilities clearly, especially when different sets of algorithms are supported for certificates and TLS itself. TLS 1.2 implementations should also process this extension. If the policies for both cases are the same, implementations may omit the ""signature_algorithms_cert"" extension."
59,4.2.3.. Handshake Protocol_Extensions_Signature Algorithms,SignatureScheme Enumeration,"The ""extension_data"" field of these extensions contains a SignatureSchemeList value defined as follows:

plaintext
enum {
    /* RSASSA-PKCS1-v1_5 algorithms */
    rsa_pkcs1_sha256(0x0401),
    rsa_pkcs1_sha384(0x0501),
    rsa_pkcs1_sha512(0x0601),

    /* ECDSA algorithms */
    ecdsa_secp256r1_sha256(0x0403),
    ecdsa_secp384r1_sha384(0x0503),
    ecdsa_secp521r1_sha512(0x0603),

    /* RSASSA-PSS algorithms with public key OID rsaEncryption */
    rsa_pss_rsae_sha256(0x0804),
    rsa_pss_rsae_sha384(0x0805),
    rsa_pss_rsae_sha512(0x0806),

    /* EdDSA algorithms */
    ed25519(0x0807),
    ed448(0x0808),

    /* RSASSA-PSS algorithms with public key OID RSASSA-PSS */
    rsa_pss_pss_sha256(0x0809),
    rsa_pss_pss_sha384(0x080a),
    rsa_pss_pss_sha512(0x080b),

    /* Legacy algorithms */
    rsa_pkcs1_sha1(0x0201),
    ecdsa_sha1(0x0203),

    /* Reserved Code Points */
    private_use(0xFE00..0xFFFF),
    (0xFFFF)
} SignatureScheme;


Each SignatureScheme value lists a single signature algorithm that the client is willing to verify, indicated in descending order of preference."
60,4.2.3.. Handshake Protocol_Extensions_Signature Algorithms,Signature Algorithm Types,"The signature algorithms defined include:

- **RSASSA-PKCS1-v1_5 algorithms**: Used for signatures in certificates, not defined for signed TLS handshake messages.
- **ECDSA algorithms**: Based on ECDSA with specified curves and hash algorithms.
- **RSASSA-PSS algorithms**: Include both RSAE and PSS variants with specific requirements for salt length and OIDs.
- **EdDSA algorithms**: Defined as per RFC 8032.
- **Legacy algorithms**: Deprecated algorithms like SHA-1, which should only be used for backward compatibility."
61,4.2.3.. Handshake Protocol_Extensions_Signature Algorithms,Signature Algorithm Negotiation,Endpoints should not negotiate deprecated algorithms but may do so for backward compatibility. Clients offering legacy algorithms must list them as the lowest priority. TLS 1.3 servers must not offer a SHA-1 signed certificate unless no valid certificate chain can be produced without it.
62,4.2.3.. Handshake Protocol_Extensions_Signature Algorithms,Compatibility with TLS 1.2,"TLS 1.3 implementations willing to negotiate TLS 1.2 must adhere to the requirements of RFC 5246. Notably, TLS 1.2 ClientHellos may omit the signature algorithms extension, and the extension in TLS 1.2 contained hash/signature pairs rather than the SignatureScheme values used in TLS 1.3."
