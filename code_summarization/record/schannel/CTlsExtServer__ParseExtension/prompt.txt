Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 445
// Total lines: 709

//----- (000000018001E0C0) ----------------------------------------------------
__int64 __fastcall CTlsExtServer::ParseExtension(__int64 a1, int a2, unsigned __int8 *a3, unsigned __int16 a4)
{
  unsigned __int8 *v4; // r15
  __int64 v6; // r14
  __int16 *v7; // r8
  __int64 v8; // rcx
  __int64 result; // rax
  __int64 v10; // r11
  int v11; // esi
  int v12; // eax
  int v13; // r9d
  int v14; // ebx
  _WORD *v15; // rdi
  unsigned int v16; // ebx
  unsigned int v17; // ecx
  __int64 v18; // r10
  unsigned __int8 v19; // cl
  void **v20; // rax
  __int16 v21; // dx
  int v22; // eax
  __int64 v23; // rax
  __int16 v24; // bx
  unsigned int v25; // esi
  __int16 v26; // ax
  unsigned __int16 *v27; // rdi
  _QWORD *v28; // rcx
  unsigned __int16 v29; // bx
  __int64 v30; // rcx
  HLOCAL v31; // rax
  __int64 v32; // rax
  __int64 v33; // rbp
  __int64 v34; // rcx
  __int64 v35; // rcx
  __int64 v36; // rcx
  __int64 v37; // rax
  __int64 v38; // rcx
  __int64 v39; // rax
  __int64 v40; // rcx
  size_t v41; // rbx
  const void *v42; // r15
  int v43; // r8d
  int v44; // ebp
  CCipherMill *v45; // rcx
  __int64 v46; // r8
  unsigned __int16 v47; // dx
  __int64 v48; // rbx
  unsigned __int8 *v49; // rbp
  unsigned __int16 v50; // r12
  unsigned __int8 *v51; // rcx
  unsigned __int64 v52; // r13
  __int64 v53; // rax
  unsigned __int8 *v54; // rcx
  __int64 v55; // rax
  unsigned __int8 *v56; // rcx
  unsigned int v57; // esi
  unsigned __int64 v58; // rax
  unsigned __int8 *v59; // rdi
  SIZE_T v60; // rsi
  unsigned __int8 *v61; // r15
  __int64 v62; // r12
  unsigned int v63; // eax
  _WORD *v64; // rax
  __int64 v65; // rax
  __int16 v66; // ax
  unsigned int v67; // ecx
  _BYTE *v68; // rdi
  unsigned int v69; // edi
  CCipherMill *v70; // rcx
  __int64 v71; // rdx
  CCipherMill *v72; // rcx
  __int64 v73; // rdx
  __int64 v74; // rcx
  __int64 v75; // r10
  unsigned __int16 v76; // r8
  unsigned __int16 v77; // r9
  unsigned __int16 v78; // cx
  CSsl3TlsServerContext *v79; // rcx
  __int64 v80; // rbx
  __int64 v81; // rcx
  __int64 v82; // rcx
  unsigned __int16 v83; // dx
  int v84; // r9d
  __int64 v85; // rax
  CCipherMill *v86; // rbp
  unsigned __int16 v87; // [rsp+30h] [rbp-98h]
  unsigned int v88; // [rsp+34h] [rbp-94h]
  char *v89; // [rsp+38h] [rbp-90h]
  __int64 v90; // [rsp+40h] [rbp-88h]
  unsigned __int64 v91; // [rsp+48h] [rbp-80h]
  unsigned __int8 *v93; // [rsp+58h] [rbp-70h]
  __int16 v94; // [rsp+60h] [rbp-68h] BYREF
  __int128 v95[2]; // [rsp+62h] [rbp-66h] BYREF
  unsigned __int16 v96; // [rsp+82h] [rbp-46h]

  v4 = 0i64;
  v89 = 0i64;
  v6 = a1;
  if ( a2 != 65281 )
  {
    if ( a2 > 65281 )
    {
LABEL_220:
      CSchannelTelemetryContext::LogUnknownTlsExtension(
        *(CSchannelTelemetryContext **)(*(_QWORD *)(a1 + 8) + 120i64),
        a2);
    }
    else
    {
      v7 = &_ImageBase;
      switch ( a2 )
      {
        case 0:
          v80 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80i64);
          if ( !(unsigned int)CTlsExtServer::ParseServerNameExtension((CSsl3TlsServerContext **)a1, a3, a4)
            && (*(_DWORD *)(v80 + 156) & 0x100) != 0 )
          {
            *(_QWORD *)(*(_QWORD *)(v6 + 8) + 136i64) |= 0x200000ui64;
          }
          CSchannelTelemetryContext::LogTlsExtensionTelemetry(*(_QWORD *)(*(_QWORD *)(v6 + 8) + 120i64), 1, 0);
          return 0i64;
        case 5:
          if ( a4 && *a3 == 1 )
          {
            *(_QWORD *)(*(_QWORD *)(a1 + 8) + 136i64) |= 0x20000ui64;
            CSchannelTelemetryContext::LogTlsExtensionTelemetry(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 120i64), 1, 5);
          }
          else if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control
                 && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 2) != 0 )
          {
            WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 56i64, &WPP_f49a95b901763c3505884ea2834cd757_Traceguids);
          }
          return 0i64;
        case 6:
          v67 = *a3;
          v68 = a3 + 1;
          if ( v67 != a4 - 1 )
            return 2148074278i64;
          if ( !v67 )
            goto LABEL_115;
          while ( *v68 != 64 )
          {
            LODWORD(v4) = (_DWORD)v4 + 1;
            ++v68;
            if ( (unsigned int)v4 >= v67 )
              goto LABEL_115;
          }
          if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control
            && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
          {
            WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 54i64, &WPP_f49a95b901763c3505884ea2834cd757_Traceguids);
          }
          *(_BYTE *)(*(_QWORD *)(v6 + 8) + 922i64) = 1;
LABEL_115:
          CSchannelTelemetryContext::LogTlsExtensionTelemetry(*(_QWORD *)(*(_QWORD *)(v6 + 8) + 120i64), 1, 6);
          return 0i64;
        case 10:
          if ( a4 < 2u )
            return (unsigned int)-2146893018;
          v24 = *a3;
          v25 = a4 - 2;
          v26 = a3[1];
          v27 = (unsigned __int16 *)(a3 + 2);
          v28 = *(_QWORD **)(a1 + 8);
          v29 = v26 | (v24 << 8);
          if ( v28[114] )
          {
            (*(void (__fastcall **)(_QWORD *))(*v28 + 16i64))(v28);
            v28 = *(_QWORD **)(v6 + 8);
          }
          v30 = *(_QWORD *)(v28[16] + 24i64);
          if ( v30 )
          {
            LOBYTE(v7) = 1;
            v31 = (HLOCAL)(*(__int64 (__fastcall **)(__int64, _QWORD, __int16 *))(*(_QWORD *)v30 + 48i64))(v30, v29, v7);
          }
          else if ( LsaTable )
          {
            v31 = (HLOCAL)(*(__int64 (__fastcall **)(_QWORD))(LsaTable + 40))(v29);
          }
          else
          {
            v31 = LocalAlloc(0x40u, v29);
          }
          *(_QWORD *)(*(_QWORD *)(v6 + 8) + 912i64) = v31;
          v32 = *(_QWORD *)(v6 + 8);
          if ( !*(_QWORD *)(v32 + 912) )
            return 14;
          if ( v29 < 2u || v25 != v29 || (v29 & 1) != 0 )
            return (unsigned int)-2146893018;
          if ( v25 > 1 )
          {
            v33 = ((v25 - 2) >> 1) + 1;
            do
            {
              *(_WORD *)(2i64 * (unsigned int)v4 + *(_QWORD *)(*(_QWORD *)(v6 + 8) + 912i64)) = _byteswap_ushort(*v27);
              if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control
                && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
              {
                WPP_SF_D(
                  *((_QWORD *)WPP_GLOBAL_Control + 2),
                  27i64,
                  &WPP_f49a95b901763c3505884ea2834cd757_Traceguids,
                  *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v6 + 8) + 912i64) + 2i64 * (unsigned int)v4));
              }
              LODWORD(v4) = (_DWORD)v4 + 1;
              ++v27;
              --v33;
            }
            while ( v33 );
            v32 = *(_QWORD *)(v6 + 8);
          }
          *(_WORD *)(v32 + 920) = v29 >> 1;
          v34 = *(_QWORD *)(*(_QWORD *)(v6 + 8) + 120i64);
          if ( v34 && CSchannelTelemetryContext::m_bTelemetryIsGloballyInitialized )
            *(_DWORD *)(v34 + 72) |= 0x80u;
          return 0i64;
        case 11:
          v35 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 120i64);
          if ( v35 && CSchannelTelemetryContext::m_bTelemetryIsGloballyInitialized )
            *(_DWORD *)(v35 + 72) |= 0x100u;
          return 0i64;
        case 13:
          v10 = *(_QWORD *)(a1 + 8);
          if ( (*(_DWORD *)(v10 + 64) & 0x41400) == 0 )
            goto LABEL_32;
          v94 = 0;
          memset(v95, 0, sizeof(v95));
          if ( *(_BYTE *)(v10 + 925) )
            return (unsigned int)-2146893018;
          v11 = a4;
          if ( !a3 )
            return (unsigned int)-2146893018;
          if ( a4 < 2u )
            return (unsigned int)-2146893018;
          v12 = a3[1];
          LOWORD(v13) = 0;
          v14 = *a3;
          v15 = a3 + 2;
          v16 = v12 | (v14 << 8);
          v94 = 0;
          v96 = 0;
          v17 = v16 >> 1;
          if ( v16 > v11 - 2 || (v16 & 1) != 0 || v17 - 1 > 0x4F )
            return (unsigned int)-2146893018;
          if ( !v17 )
            return (unsigned int)-2146893007;
          v18 = v17;
          do
          {
            v19 = 0;
            v20 = (void **)&unk_18007C390;
            v21 = __ROR2__(*v15, 8);
            while ( v21 != *(_WORD *)v20 )
            {
              v20 += 9;
              ++v19;
              if ( v20 >= &CSsl3TlsServerContext::`vftable' )
                goto LABEL_28;
            }
            if ( v19 < 0xCu )
            {
              v22 = (unsigned __int16)v13;
              if ( !_bittest(&v22, v19) && (unsigned __int16)v4 < 0x10u )
              {
                *((_WORD *)v95 + (unsigned __int16)v4) = __ROR2__(*((_WORD *)&unk_18007C390 + 36 * v19), 8);
                LOWORD(v4) = v94 + 1;
                v13 = v96 | (1 << v19);
                ++v94;
                v96 |= 1 << v19;
              }
            }
LABEL_28:
            ++v15;
            --v18;
          }
          while ( v18 );
          if ( !(_WORD)v4 )
            return (unsigned int)-2146893007;
          if ( v11 != v16 + 2 )
            return (unsigned int)-2146893018;
          CTlsSignatureSuiteList::SetSignatureSuiteList(
            (CTlsSignatureSuiteList *)(v10 + 510),
            (const struct CTlsSignatureSuiteList *)(v10 + 474));
          CTlsSignatureSuiteList::Restrict(
            (CTlsSignatureSuiteList *)(*(_QWORD *)(v6 + 8) + 510i64),
            (const struct CTlsSignatureSuiteList *)&v94,
            *(_DWORD *)(*(_QWORD *)(v6 + 8) + 64i64));
          *(_BYTE *)(*(_QWORD *)(v6 + 8) + 925i64) = 1;
          v10 = *(_QWORD *)(v6 + 8);
LABEL_32:
          v23 = *(_QWORD *)(v10 + 120);
          if ( v23 && CSchannelTelemetryContext::m_bTelemetryIsGloballyInitialized )
            *(_DWORD *)(v23 + 72) |= 0x200u;
          return 0i64;
        case 14:
          v75 = *(_QWORD *)(a1 + 32);
          if ( !*(_BYTE *)(v75 + 233) || !*(_QWORD *)(v75 + 800) )
            return 0i64;
          if ( a4 < 5u )
          {
            v70 = WPP_GLOBAL_Control;
            if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control
              && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) != 0 )
            {
              v71 = 59i64;
              goto LABEL_194;
            }
            return 2148074278i64;
          }
          v76 = _byteswap_ushort(*(_WORD *)a3);
          v77 = a4 - 2;
          if ( v77 < (unsigned __int64)v76 + 1 )
          {
            v70 = WPP_GLOBAL_Control;
            if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control
              && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) != 0 )
            {
              v71 = 60i64;
              goto LABEL_194;
            }
            return 2148074278i64;
          }
          v78 = a3[v76 + 2];
          if ( !(_BYTE)v78 )
            goto LABEL_169;
          if ( (unsigned __int16)(v77 - v76 - 1) < v78 )
          {
            v70 = WPP_GLOBAL_Control;
            if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control
              && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) != 0 )
            {
              v71 = 61i64;
              goto LABEL_194;
            }
            return 2148074278i64;
          }
          v4 = &a3[v76 + 3];
LABEL_169:
          result = CSsl3TlsServerContext::SelectSrtpParameters(
                     (CSsl3TlsServerContext *)v75,
                     (unsigned __int16 *const)a3 + 1,
                     v76,
                     v4,
                     v78);
          if ( (_DWORD)result )
            return result;
          CSchannelTelemetryContext::LogTlsExtensionTelemetry(*(_QWORD *)(*(_QWORD *)(v6 + 8) + 120i64), 1, 14);
          return 0i64;
        case 16:
          v46 = *(_QWORD *)(a1 + 8);
          if ( !*(_QWORD *)(v46 + 784) )
            return 0i64;
          if ( a4 < 4u )
          {
            v70 = WPP_GLOBAL_Control;
            if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control
              && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) != 0 )
            {
              v71 = 57i64;
              goto LABEL_194;
            }
            return 2148074278i64;
          }
          v47 = _byteswap_ushort(*(_WORD *)a3);
          if ( v47 != a4 - 2 )
          {
            v70 = WPP_GLOBAL_Control;
            if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control
              && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) != 0 )
            {
              v71 = 58i64;
              goto LABEL_194;
            }
            return 2148074278i64;
          }
          v48 = *(_QWORD *)(a1 + 32);
          v49 = a3 + 2;
          v90 = v48;
          if ( !*(_QWORD *)(v48 + 968) )
          {
            v87 = 0;
            v50 = 0;
            if ( a3 != (unsigned __int8 *)-2i64 )
            {
              if ( (unsigned __int16)(v47 - 2) > 0xFFFBu )
              {
                v72 = WPP_GLOBAL_Control;
                if ( WPP_GLOBAL_Control == (CCipherMill *)&WPP_GLOBAL_Control
                  || (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) == 0 )
                {
                  return (unsigned int)-2146893018;
                }
                v73 = 74i64;
LABEL_147:
                WPP_SF_(*((_QWORD *)v72 + 2), v73, &WPP_906ebfdb0b6e356d5c7c2dbe304d0682_Traceguids);
                return (unsigned int)-2146893018;
              }
              v51 = a3 + 2;
              v52 = (unsigned __int64)&v49[v47];
              if ( (unsigned __int64)v49 < v52 )
              {
                while ( 1 )
                {
                  v53 = *v51;
                  if ( !(_BYTE)v53 )
                    break;
                  v54 = &v51[v53];
                  if ( (unsigned __int64)v54 >= v52 )
                    break;
                  v51 = v54 + 1;
                  if ( (unsigned __int64)v51 >= v52 )
                    goto LABEL_81;
                }
                v72 = WPP_GLOBAL_Control;
                if ( WPP_GLOBAL_Control == (CCipherMill *)&WPP_GLOBAL_Control
                  || (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) == 0 )
                {
                  return (unsigned int)-2146893018;
                }
                v73 = 76i64;
                goto LABEL_147;
              }
LABEL_81:
              v55 = *(_QWORD *)(v48 + 784);
              if ( v55 )
              {
                v56 = (unsigned __int8 *)(v55 + 6);
                v88 = 0;
                v57 = 0;
                v58 = v55 + 6 + *(unsigned __int16 *)(v55 + 4);
                v93 = v56;
                v91 = v58;
                while ( 1 )
                {
                  v59 = v56;
                  if ( (unsigned __int64)v56 < v58 )
                  {
                    do
                    {
                      v60 = *v59;
                      v61 = v49;
                      if ( (unsigned __int64)v49 < v52 )
                      {
                        while ( 1 )
                        {
                          v62 = *v61;
                          if ( (_BYTE)v60 == (_BYTE)v62 && RtlCompareMemory(v59 + 1, v61 + 1, v60) == v60 )
                            break;
                          v61 += v62 + 1;
                          if ( (unsigned __int64)v61 >= v52 )
                            goto LABEL_87;
                        }
                        v66 = v60 + 1;
                        if ( *(_QWORD *)(v90 + 968) )
                        {
                          memcpy_0(v89, v59, (unsigned __int16)(v60 + 1));
                          v89 += (unsigned __int16)(v60 + 1);
LABEL_87:
                          v50 = v87;
                          goto LABEL_88;
                        }
                        v50 = v66 + v87;
                        v87 += v66;
                      }
LABEL_88:
                      v59 += v60 + 1;
                    }
                    while ( (unsigned __int64)v59 < v91 );
                    v6 = a1;
                    v48 = v90;
                    v57 = v88;
                  }
                  if ( !v50 )
                    break;
                  if ( !*(_QWORD *)(v48 + 968) )
                  {
                    v63 = v50 + 6;
                    if ( LsaTable )
                      v64 = (_WORD *)(*(__int64 (__fastcall **)(_QWORD))(LsaTable + 40))(v63);
                    else
                      v64 = LocalAlloc(0x40u, v63);
                    *(_QWORD *)(v48 + 968) = v64;
                    if ( !v64 )
                      return 14;
                    v64[2] = v50;
                    v89 = (char *)(*(_QWORD *)(v48 + 968) + 6i64);
                  }
                  v88 = ++v57;
                  if ( v57 >= 2 )
                  {
                    v46 = *(_QWORD *)(v6 + 8);
                    goto LABEL_98;
                  }
                  v58 = v91;
                  v56 = v93;
                }
                if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control
                  && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) != 0 )
                {
                  WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 65i64, &WPP_095c39149c3f336b5b94efe855075ae2_Traceguids);
                }
                v69 = -2146892953;
                CSslContext::SetErrorAndFatalAlert(v48, 1208, -2146892953, 0x78u);
                *(_DWORD *)(v48 + 68) = 96;
                *(_WORD *)(v48 + 96) = 30722;
                return v69;
              }
            }
            return 87;
          }
LABEL_98:
          v65 = *(_QWORD *)(v46 + 120);
          if ( v65 && CSchannelTelemetryContext::m_bTelemetryIsGloballyInitialized )
            *(_DWORD *)(v65 + 72) |= 0x800u;
          break;
        case 23:
          if ( CSslGlobals::m_fDisableServerExtendedMS || (*(_DWORD *)(*(_QWORD *)(a1 + 32) + 64i64) & 0x51540) == 0 )
          {
            v74 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 120i64);
            if ( v74 && CSchannelTelemetryContext::m_bTelemetryIsGloballyInitialized )
              *(_WORD *)(v74 + 66) |= 0x10u;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)(a1 + 8) + 136i64) |= 0x8000000ui64;
            v8 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 120i64);
            if ( v8 && CSchannelTelemetryContext::m_bTelemetryIsGloballyInitialized )
              *(_DWORD *)(v8 + 72) |= 0x1000u;
          }
          return 0i64;
        case 24:
          v79 = *(CSsl3TlsServerContext **)(a1 + 32);
          if ( !*((_QWORD *)v79 + 102) )
            return 0i64;
          if ( a4 < 4u )
          {
            v70 = WPP_GLOBAL_Control;
            if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control
              && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) != 0 )
            {
              v71 = 62i64;
              goto LABEL_194;
            }
            return 2148074278i64;
          }
          if ( (unsigned __int16)(a4 - 3) < a3[2] )
          {
            v70 = WPP_GLOBAL_Control;
            if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control
              && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) != 0 )
            {
              v71 = 63i64;
              goto LABEL_194;
            }
            return 2148074278i64;
          }
          result = CSsl3TlsServerContext::SelectTBParameters(v79, *a3, a3[1], a3 + 3, a3[2]);
          if ( (_DWORD)result )
            return result;
          CSchannelTelemetryContext::LogTlsExtensionTelemetry(*(_QWORD *)(*(_QWORD *)(v6 + 8) + 120i64), 1, 24);
          return 0i64;
        case 35:
          v36 = *(_QWORD *)(a1 + 8);
          v37 = *(_QWORD *)(v36 + 136);
          if ( (v37 & 0x800) != 0 )
          {
            if ( a4 )
            {
              *(_DWORD *)(v36 + 984) = a4;
              *(_QWORD *)(v36 + 976) = a3;
            }
            else
            {
              *(_QWORD *)(v36 + 136) = v37 | 0x400000;
            }
          }
          v38 = *(_QWORD *)(*(_QWORD *)(v6 + 8) + 120i64);
          if ( v38 && CSchannelTelemetryContext::m_bTelemetryIsGloballyInitialized )
            *(_DWORD *)(v38 + 72) |= 0x2000u;
          return 0i64;
        default:
          goto LABEL_220;
      }
    }
    return 0i64;
  }
  v39 = *(_QWORD *)(a1 + 8);
  if ( !*(_DWORD *)(v39 + 416) || *(_BYTE *)(v39 + 553) )
  {
    *(_BYTE *)(v39 + 553) = 1;
    v40 = *(_QWORD *)(a1 + 8);
    v41 = *(unsigned int *)(v40 + 416);
    v42 = (const void *)(v40 + 377);
    if ( a4 )
    {
      v43 = *a3;
      v44 = a4;
      if ( v43 + 1 == a4 )
      {
        if ( a4 == 1 )
        {
          v45 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control
            && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
          {
            WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 67i64, &WPP_f49a95b901763c3505884ea2834cd757_Traceguids);
            v45 = WPP_GLOBAL_Control;
          }
          if ( (_DWORD)v41 )
          {
            if ( v45 == (CCipherMill *)&WPP_GLOBAL_Control || (*((_BYTE *)v45 + 28) & 1) == 0 )
              goto LABEL_203;
            v82 = *((_QWORD *)v45 + 2);
            v83 = 68;
            v84 = v44;
LABEL_202:
            WPP_SF_DD(v82, v83, (__int64)&WPP_f49a95b901763c3505884ea2834cd757_Traceguids, v84, v41);
LABEL_203:
            v40 = *(_QWORD *)(v6 + 8);
LABEL_204:
            CSslContext::SetErrorAndFatalAlert(v40, 1207, -2146892986, 0x28u);
            v85 = *(_QWORD *)(v6 + 8);
            *(_DWORD *)(v85 + 68) = 96;
            *(_WORD *)(v85 + 96) = 10242;
            return 2148074310i64;
          }
        }
        else
        {
          if ( v43 != (_DWORD)v41 )
          {
            if ( WPP_GLOBAL_Control == (CCipherMill *)&WPP_GLOBAL_Control
              || (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) == 0 )
            {
              goto LABEL_204;
            }
            v82 = *((_QWORD *)WPP_GLOBAL_Control + 2);
            v83 = 69;
            v84 = v43;
            goto LABEL_202;
          }
          v86 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control )
          {
            if ( (*((_DWORD *)WPP_GLOBAL_Control + 7) & 0x800) != 0 )
            {
              WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 70i64, &WPP_f49a95b901763c3505884ea2834cd757_Traceguids);
              v86 = WPP_GLOBAL_Control;
            }
            if ( v86 != (CCipherMill *)&WPP_GLOBAL_Control && (*((_DWORD *)v86 + 7) & 0x800) != 0 )
            {
              WPP_SF_(*((_QWORD *)v86 + 2), 71i64, &WPP_f49a95b901763c3505884ea2834cd757_Traceguids);
              v86 = WPP_GLOBAL_Control;
            }
          }
          if ( memcmp_0(a3 + 1, v42, v41) )
          {
            if ( v86 != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)v86 + 28) & 1) != 0 )
              WPP_SF_(*((_QWORD *)v86 + 2), 72i64, &WPP_f49a95b901763c3505884ea2834cd757_Traceguids);
            goto LABEL_203;
          }
          CSchannelTelemetryContext::LogTlsExtensionTelemetry(*(_QWORD *)(*(_QWORD *)(v6 + 8) + 120i64), 1, 65281);
        }
        return 0i64;
      }
      if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 7) & 0x800) != 0 )
      {
        WPP_SF_DD(
          *((_QWORD *)WPP_GLOBAL_Control + 2),
          0x42u,
          (__int64)&WPP_f49a95b901763c3505884ea2834cd757_Traceguids,
          v43,
          a4);
      }
    }
    else
    {
      v70 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) != 0 )
      {
        v71 = 65i64;
LABEL_194:
        WPP_SF_(*((_QWORD *)v70 + 2), v71, &WPP_f49a95b901763c3505884ea2834cd757_Traceguids);
      }
    }
    return 2148074278i64;
  }
  if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) != 0 )
  {
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 64i64, &WPP_f49a95b901763c3505884ea2834cd757_Traceguids);
    v39 = *(_QWORD *)(v6 + 8);
  }
  CSslContext::SetErrorAndFatalAlert(v39, 1207, -2146892986, 0x28u);
  v81 = *(_QWORD *)(v6 + 8);
  result = 2148074310i64;
  *(_DWORD *)(v81 + 68) = 96;
  *(_WORD *)(v81 + 96) = 10242;
  return result;
}
// 180031905: variable 'v7' is possibly undefined
// 180000000: using guessed type __int16 _ImageBase;
// 180041CB0: using guessed type __int64 __fastcall WPP_SF_(_QWORD, _QWORD, _QWORD);
// 180041CDC: using guessed type __int64 __fastcall WPP_SF_D(_QWORD, _QWORD, _QWORD, _QWORD);
// 18007C6F0: using guessed type void *CSsl3TlsServerContext::`vftable';
// 180092620: using guessed type __int64 LsaTable;
// 1800927AC: using guessed type bool CSchannelTelemetryContext::m_bTelemetryIsGloballyInitialized;
// 1800927B4: using guessed type int CSslGlobals::m_fDisableServerExtendedMS;
##############################
Role: Let us assume that you are an advanced reverse engineer and you are reverse engineering a network driver using IDA Pro, and you are also familiar with the RFC documentation. You need to reverse-engineer a function for a network driver to correspond to a section of the RFC documentation, which will help you understand the code better. The driver you're reversing is Schannel.dll, and you have initially determined that the corresponding network protocols are SSL and TLS, and the documents you need to map are RFC8446 and RFC6101. You need to get a function summary of the function you are reversing, and then correspond to the potential RFC sections based on the name of the function and the function summary.
Function Background: The function is reverse engineered from the driver file Schannel.dll on Windows platform. Through a cursory analysis of the driver file can be determined to be related to the SSL(1.3), TLS(3.0) protocol, that is, with RFC8446, RFC6101 strong correlation.

Output Function Summary: Summarizes the function's functionality with several phrases instead of sentences, focuses on covering the function's control flow information, and highlights the protocol function points implemented by the function. Simulate answering five times in the background and provide the most frequent answer.

Retrieve document sections: giving matches for document sections(FunctionMatchRFCResult) that the code may related to. NOTE if the code is only business related(i.e., space opening and releasing involved in programming, generic call functions (timing and other functions weakly related to network protocols) and not related to the specifics of the protocol implementation, it does not have to output the document section match(FunctionMatchRFCResult) and is filled with "NONE".

Retrieve document sections Thinking Chain: The function code is matched with the RFC document section, and the thinking chain is provided to help you solve the problem better:
	1. Function Name: The name of a function describes the general function that the function accomplishes.
	2. Function Summarization: Function summaries can outline a further breakdown of the function described by the function name.
	3. Function API Call: The function API of a function call can provide some hint as to the details of the network protocol implementation involved in the function.
	4. Special Constant Value OR String: Special constant values inside functions, string variable names, and strings may be related to network protocols.
	5. Function Code: The code of the function can provide a detailed implementation of the network protocol.
Generate Function Information Collection with JSON Format:

{
	"FunctionIndex": "(FILL WITH "File count" with less than four bits are indexed with zeros to make up the four bits.)",
	"FunctionName": "(Full Function Code Name)",
	"FunctionSummarization": [
		"(Function Summary Phrase1)",
		"(Function Summary Phrase2)",
		"(...)"
	],
	"FunctionMatchRFCResult": [
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 1)",
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 2)",
		"(...)"
	],
}

ATTENTION: Remember YOU MUST ONLY output the Function Information Collection result.
