Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 1367
// Total lines: 217

//----- (000000018006C5E0) ----------------------------------------------------
__int64 __fastcall CTls13ClientContext::GenerateHello(CTls13ClientContext *this, struct SPBuffer *a2)
{
  __int64 v4; // r15
  CCipherMill *v5; // rcx
  __int64 v6; // r10
  unsigned int OutputBuffer; // ebx
  __int16 *v8; // rsi
  __int64 v9; // rdx
  unsigned int v10; // r8d
  __int16 v11; // r14
  char v12; // al
  bool v13; // zf
  unsigned __int8 v14; // si
  unsigned int v15; // eax
  int v16; // r8d
  int v17; // edx
  CTls13ClientContext *v18; // rcx
  __int64 v19; // rax
  unsigned __int8 v20; // si
  unsigned __int16 *v21; // r13
  __int64 v22; // rcx
  unsigned int v23; // eax
  unsigned int v24; // edx
  HLOCAL Memory; // rax
  unsigned int ClientHello; // eax
  char v28[4]; // [rsp+50h] [rbp-B0h] BYREF
  unsigned int v29; // [rsp+54h] [rbp-ACh] BYREF
  unsigned int v30; // [rsp+58h] [rbp-A8h] BYREF
  unsigned __int16 *v31; // [rsp+60h] [rbp-A0h]
  unsigned __int64 AProvider; // [rsp+68h] [rbp-98h] BYREF
  __int16 v33[2]; // [rsp+70h] [rbp-90h] BYREF
  int v34; // [rsp+74h] [rbp-8Ch]
  int v35; // [rsp+78h] [rbp-88h]
  __int16 v36; // [rsp+7Ch] [rbp-84h]
  int v37; // [rsp+80h] [rbp-80h]
  int v38; // [rsp+84h] [rbp-7Ch]
  unsigned int v39[68]; // [rsp+90h] [rbp-70h] BYREF

  AProvider = CCipherMill::GetAProvider(this);
  v4 = AProvider;
  memset_0(v39, 0, sizeof(v39));
  v6 = *((_QWORD *)this + 10);
  v29 = 68;
  if ( !v6 )
  {
    OutputBuffer = 1359;
    goto LABEL_40;
  }
  OutputBuffer = CCipherMill::BuildCipherSuiteList(
                   (__int64)this + 912,
                   *(unsigned int **)(v6 + 184),
                   *(_DWORD *)(v6 + 176),
                   *(_DWORD *)(v6 + 192),
                   v6,
                   *((_DWORD *)this + 16),
                   (__int64)v39,
                   &v29,
                   (_QWORD *)this + 114,
                   (_WORD *)this + 460);
  if ( OutputBuffer )
    goto LABEL_40;
  v8 = (__int16 *)((char *)this + 474);
  CCipherMill::GetSignatureSuiteList(v5, (CTls13ClientContext *)((char *)this + 474));
  v9 = *((_QWORD *)this + 10);
  v10 = *(_DWORD *)(v9 + 196);
  if ( v10 )
  {
    OutputBuffer = CTlsSignatureSuiteList::Blacklist(
                     (CTls13ClientContext *)((char *)this + 474),
                     *(struct _TLS_PARAMETERS **)(v9 + 200),
                     v10);
    if ( OutputBuffer )
      goto LABEL_40;
    v11 = *v8;
    if ( !*v8 )
    {
      v5 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) != 0 )
        WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 26i64, &WPP_d144303c37633bde7ff6f9c18fccf166_Traceguids);
      OutputBuffer = -2146893007;
      goto LABEL_40;
    }
  }
  else
  {
    v11 = *v8;
  }
  v31 = (unsigned __int16 *)((char *)this + 476);
  v12 = (*(__int64 (__fastcall **)(CTls13ClientContext *))(*(_QWORD *)this + 384i64))(this);
  v35 = 1;
  v38 = 1;
  v28[0] = 0;
  v13 = *((_DWORD *)this + 17) == 100;
  v14 = 0;
  *((_BYTE *)this + 1649) = v12 != 0 ? 0x20 : 0;
  v33[0] = 0;
  v34 = 22;
  v37 = 22;
  v36 = 0;
  if ( v13 )
  {
    v15 = CTls13Context::SetCcsRecordInfo(
            (CTls13ClientContext *)((char *)this + 1368),
            (struct CTlsRecord::CMessageInfo *)v33,
            v28);
    OutputBuffer = v15;
    if ( v15 )
    {
      v16 = v15;
LABEL_11:
      v17 = 50;
LABEL_12:
      v18 = this;
LABEL_13:
      CSslContext::SetError((__int64)v18, v17, v16);
      goto LABEL_40;
    }
    v14 = v28[0];
  }
  v19 = v14;
  v20 = v14 + 1;
  v21 = (unsigned __int16 *)&v33[6 * v19];
  OutputBuffer = CTls13ClientHandshake::ComputeClientHelloSize(
                   (CTls13ClientContext *)((char *)this + 1656),
                   v4,
                   v29,
                   v11,
                   v21);
  if ( OutputBuffer )
  {
    v16 = OutputBuffer;
    goto LABEL_11;
  }
  v22 = *((_QWORD *)this + 197);
  v30 = 0;
  v23 = (*(__int64 (__fastcall **)(__int64, _QWORD, __int16 *, unsigned int *))(*(_QWORD *)v22 + 16i64))(
          v22,
          v20,
          v33,
          &v30);
  OutputBuffer = v23;
  v18 = this;
  if ( v23 )
  {
    v16 = v23;
    v17 = 51;
    goto LABEL_13;
  }
  OutputBuffer = CSsl3TlsContext::AllocateOutputBuffer(this, a2, v30);
  if ( OutputBuffer )
    goto LABEL_20;
  OutputBuffer = (*(__int64 (__fastcall **)(_QWORD, struct SPBuffer *))(**((_QWORD **)this + 197) + 24i64))(
                   *((_QWORD *)this + 197),
                   a2);
  if ( OutputBuffer )
    goto LABEL_20;
  if ( *((_QWORD *)this + 110) )
  {
    (*(void (__fastcall **)(CTls13ClientContext *))(*(_QWORD *)this + 16i64))(this);
    *((_QWORD *)this + 110) = 0i64;
  }
  v13 = *((_DWORD *)this + 17) == 40;
  *((_DWORD *)this + 218) = 0;
  if ( !v13 )
  {
    OutputBuffer = CTls13Context::GenerateCcsRecord((CTls13ClientContext *)((char *)this + 1368));
    if ( OutputBuffer )
      goto LABEL_20;
LABEL_32:
    if ( this == (CTls13ClientContext *)-272i64 )
    {
      OutputBuffer = 1359;
      goto LABEL_20;
    }
    ClientHello = CTls13ClientHandshake::GenerateClientHello(
                    (CTls13ClientContext *)((char *)this + 1656),
                    v29,
                    v39,
                    v11,
                    v31,
                    (PUCHAR)this + 272);
    OutputBuffer = ClientHello;
    if ( ClientHello )
    {
      v16 = ClientHello;
      goto LABEL_21;
    }
    goto LABEL_40;
  }
  v24 = *v21;
  *((_DWORD *)this + 218) = v24;
  Memory = CSslContext::GetMemory(this, v24);
  *((_QWORD *)this + 110) = Memory;
  if ( !Memory )
  {
    OutputBuffer = 14;
LABEL_20:
    v16 = OutputBuffer;
LABEL_21:
    v17 = 52;
    goto LABEL_12;
  }
  if ( !*((_BYTE *)this + 1649) )
    goto LABEL_32;
  OutputBuffer = GenerateRandomBits((PUCHAR)this + 1617, *((unsigned __int8 *)this + 1649));
  if ( !OutputBuffer )
    goto LABEL_32;
LABEL_40:
  if ( v4 )
    CCipherMill::DeferenceProvider(v5, &AProvider);
  return OutputBuffer;
}
// 18006C6B4: variable 'v5' is possibly undefined
// 180041CB0: using guessed type __int64 __fastcall WPP_SF_(_QWORD, _QWORD, _QWORD);
// 180080FD8: using guessed type __int64 (__fastcall *_guard_xfg_dispatch_icall_fptr)(_QWORD, _QWORD, _QWORD);
// 18006C5E0: using guessed type char var_190[4];
##############################
Role: Let us assume that you are an advanced reverse engineer and you are reverse engineering a network driver using IDA Pro, and you are also familiar with the RFC documentation. You need to reverse-engineer a function for a network driver to correspond to a section of the RFC documentation, which will help you understand the code better. The driver you're reversing is Schannel.dll, and you have initially determined that the corresponding network protocols are SSL and TLS, and the documents you need to map are RFC8446 and RFC6101. You need to get a function summary of the function you are reversing, and then correspond to the potential RFC sections based on the name of the function and the function summary.
Function Background: The function is reverse engineered from the driver file Schannel.dll on Windows platform. Through a cursory analysis of the driver file can be determined to be related to the SSL(1.3), TLS(3.0) protocol, that is, with RFC8446, RFC6101 strong correlation.

Output Function Summary: Summarizes the function's functionality with several phrases instead of sentences, focuses on covering the function's control flow information, and highlights the protocol function points implemented by the function. Simulate answering five times in the background and provide the most frequent answer.

Retrieve document sections: giving matches for document sections(FunctionMatchRFCResult) that the code may related to. NOTE if the code is only business related(i.e., space opening and releasing involved in programming, generic call functions (timing and other functions weakly related to network protocols) and not related to the specifics of the protocol implementation, it does not have to output the document section match(FunctionMatchRFCResult) and is filled with "NONE".

Retrieve document sections Thinking Chain: The function code is matched with the RFC document section, and the thinking chain is provided to help you solve the problem better:
	1. Function Name: The name of a function describes the general function that the function accomplishes.
	2. Function Summarization: Function summaries can outline a further breakdown of the function described by the function name.
	3. Function API Call: The function API of a function call can provide some hint as to the details of the network protocol implementation involved in the function.
	4. Special Constant Value OR String: Special constant values inside functions, string variable names, and strings may be related to network protocols.
	5. Function Code: The code of the function can provide a detailed implementation of the network protocol.
Generate Function Information Collection with JSON Format:

{
	"FunctionIndex": "(FILL WITH "File count" with less than four bits are indexed with zeros to make up the four bits.)",
	"FunctionName": "(Full Function Code Name)",
	"FunctionSummarization": [
		"(Function Summary Phrase1)",
		"(Function Summary Phrase2)",
		"(...)"
	],
	"FunctionMatchRFCResult": [
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 1)",
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 2)",
		"(...)"
	],
}

ATTENTION: Remember YOU MUST ONLY output the Function Information Collection result.
