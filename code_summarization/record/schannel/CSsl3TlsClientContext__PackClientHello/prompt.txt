Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 107
// Total lines: 238

//----- (0000000180008A4C) ----------------------------------------------------
__int64 __fastcall CSsl3TlsClientContext::PackClientHello(
        CSsl3TlsClientContext *this,
        struct _Ssl2_Client_Hello *a2,
        struct SPBuffer *a3)
{
  unsigned int v6; // esi
  char v7; // al
  bool v8; // cf
  unsigned int v9; // eax
  __int64 v10; // rcx
  int v11; // r14d
  unsigned int ClientHelloExtensionsLength; // ebx
  char v13; // dl
  unsigned int v14; // r14d
  unsigned int v15; // r15d
  unsigned int v16; // ecx
  unsigned int v17; // r15d
  unsigned int v18; // r15d
  unsigned int v19; // esi
  _BYTE *v20; // rsi
  _BYTE *v21; // rsi
  __int64 v22; // rdx
  int v23; // ecx
  _BYTE *v24; // rsi
  _BYTE *i; // rsi
  _BYTE *v26; // rsi
  char v27; // al
  unsigned int v28; // eax
  __int64 v29; // rcx
  HLOCAL Memory; // rax
  __int64 v32; // rcx
  _BYTE *v33; // rsi
  __int16 v34; // cx
  _BYTE *v35; // rdx
  __int16 v36; // [rsp+20h] [rbp-60h]
  int v37; // [rsp+28h] [rbp-58h]
  unsigned int v38; // [rsp+30h] [rbp-50h]
  unsigned int Size; // [rsp+34h] [rbp-4Ch]
  unsigned int Size_4; // [rsp+38h] [rbp-48h]
  unsigned int v41; // [rsp+3Ch] [rbp-44h]
  __int64 v42[3]; // [rsp+40h] [rbp-40h] BYREF
  int v43; // [rsp+58h] [rbp-28h]
  char v44; // [rsp+60h] [rbp-20h]
  __int64 v45; // [rsp+68h] [rbp-18h]
  int v46; // [rsp+70h] [rbp-10h]
  char v47; // [rsp+74h] [rbp-Ch]
  CSsl3TlsClientContext *v48; // [rsp+78h] [rbp-8h]
  unsigned __int8 v49; // [rsp+C0h] [rbp+40h]
  unsigned int v50; // [rsp+D8h] [rbp+58h] BYREF

  v42[1] = (__int64)this;
  v42[2] = 0i64;
  v42[0] = (__int64)&CTlsExtClient::`vftable';
  v43 = 0;
  v44 = 0;
  v45 = 0i64;
  v6 = 0;
  v46 = 0;
  v48 = this;
  v47 = *((_BYTE *)this + 922);
  v7 = *((_BYTE *)this + 233);
  Size = 0;
  v50 = 0;
  if ( !v7 && (*((_BYTE *)this + 32) & 4) != 0 )
    v38 = *((_DWORD *)this + 11);
  else
    v38 = 0;
  v8 = v7 != 0;
  v49 = 0;
  v9 = *((_DWORD *)this + 15);
  v10 = *((_QWORD *)this + 165);
  Size_4 = v9;
  v11 = v8 ? 12 : 4;
  v41 = v11;
  if ( v10 )
    RtlAcquireResourceShared((PRTL_RESOURCE)(v10 + 72), 1u);
  ClientHelloExtensionsLength = CTlsExtClient::GetClientHelloExtensionsLength((CTlsExtClient *)v42, &v50);
  if ( ClientHelloExtensionsLength )
    goto LABEL_42;
  v13 = *((_BYTE *)this + 233);
  if ( v13 )
  {
    if ( *((_DWORD *)this + 327) )
    {
      v6 = *((unsigned __int8 *)this + 1312);
      Size = v6;
    }
    else
    {
      Size = 0;
    }
  }
  v14 = v50 + v11 + 2 * *((_DWORD *)a2 + 1) + *((_DWORD *)a2 + 2) + 39;
  if ( v13 )
    v14 += v6 + 1;
  if ( (*((_DWORD *)this + 16) & 0x2A88) == 0 && (*((_BYTE *)this + 64) & 0x20) != 0 && !v50 )
  {
    v14 += 2;
    v49 = 1;
  }
  v15 = v14;
  if ( v13 )
  {
    v19 = Size_4;
    v18 = v14 + Size_4;
  }
  else
  {
    if ( (*((_BYTE *)this + 32) & 4) != 0 )
    {
      v16 = *((_DWORD *)this + 13);
      v17 = v14 + *((_DWORD *)this + 12);
      if ( v16 )
      {
        if ( (*((_BYTE *)this + 56) & 1) != 0 )
          v16 -= v17 % v16;
        v17 += v16;
      }
      v15 = *((_DWORD *)this + 11) + v17;
    }
    v18 = *((_DWORD *)this + 15) + v15;
    v19 = Size_4;
  }
  ClientHelloExtensionsLength = CSsl3TlsContext::AllocateOutputBuffer(this, a3, v18);
  if ( ClientHelloExtensionsLength )
  {
LABEL_42:
    v32 = *((_QWORD *)this + 165);
    if ( v32 )
      RtlReleaseResource((PRTL_RESOURCE)(v32 + 72));
  }
  else
  {
    v20 = (_BYTE *)(*((_QWORD *)a3 + 1) + v19 + v38 + (unsigned __int64)v41);
    *v20++ = *((_BYTE *)a2 + 1);
    *v20++ = *(_BYTE *)a2;
    *(_OWORD *)v20 = *((_OWORD *)a2 + 3);
    *((_OWORD *)v20 + 1) = *((_OWORD *)a2 + 4);
    v20 += 32;
    *v20++ = *((_BYTE *)a2 + 8);
    memcpy_0(v20, (char *)a2 + 16, *((unsigned int *)a2 + 2));
    v21 = &v20[*((unsigned int *)a2 + 2)];
    if ( *((_BYTE *)this + 233) )
    {
      *v21++ = Size;
      if ( *((_DWORD *)this + 327) && Size )
      {
        memcpy_0(v21, (char *)this + 1052, Size);
        v21 += Size;
      }
      else if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control
             && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 2) != 0 )
      {
        WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 10i64, &WPP_13477250810f3961702f89c94d47ffd6_Traceguids);
      }
    }
    v22 = 0i64;
    v23 = 2 * (*((_DWORD *)a2 + 1) + v49);
    *v21 = (unsigned __int16)(*((_WORD *)a2 + 2) + v49) >> 7;
    v24 = v21 + 1;
    *v24 = v23;
    for ( i = v24 + 1; (unsigned int)v22 < *((_DWORD *)a2 + 1); i = v26 + 1 )
    {
      *i = *((_BYTE *)a2 + 4 * v22 + 81);
      v26 = i + 1;
      v27 = *((_BYTE *)a2 + 4 * v22 + 80);
      v22 = (unsigned int)(v22 + 1);
      *v26 = v27;
    }
    if ( v49 )
    {
      *i = 0;
      v33 = i + 1;
      *v33 = -1;
      i = v33 + 1;
    }
    *i = 1;
    i[1] = 0;
    v28 = CTlsExtClient::BuildClientHelloExtension((CTlsExtClient *)v42, v50, i + 2, &v50);
    v29 = *((_QWORD *)this + 165);
    ClientHelloExtensionsLength = v28;
    if ( v29 )
      RtlReleaseResource((PRTL_RESOURCE)(v29 + 72));
    if ( !ClientHelloExtensionsLength )
    {
      v37 = *((unsigned __int8 *)this + 233);
      v36 = *((_WORD *)this + 110);
      *((_WORD *)this + 110) = v36 + 1;
      SetHandshakeHeader(
        *((_QWORD *)a3 + 1) + v38 + (unsigned __int64)Size_4,
        1,
        0i64,
        (unsigned __int16)(v14 - v41),
        v36,
        v37);
      if ( *((_QWORD *)this + 110) )
      {
        (*(void (__fastcall **)(CSsl3TlsClientContext *))(*(_QWORD *)this + 16i64))(this);
        *((_QWORD *)this + 110) = 0i64;
      }
      *((_DWORD *)this + 218) = v14;
      Memory = CSslContext::GetMemory(this, v14);
      *((_QWORD *)this + 110) = Memory;
      if ( Memory )
      {
        memcpy_0(
          Memory,
          (const void *)(*((_QWORD *)a3 + 1) + v38 + (unsigned __int64)Size_4),
          *((unsigned int *)this + 218));
        if ( *((_BYTE *)this + 233) )
        {
          v34 = *((_WORD *)this + 17);
          ClientHelloExtensionsLength = 0;
          v35 = (_BYTE *)*((_QWORD *)a3 + 1);
          v35[12] = v14;
          v35[11] = BYTE1(v14);
          v35[1] = HIBYTE(v34);
          v35[2] = v34;
          *v35 = 22;
          *((_DWORD *)a3 + 1) += v18;
        }
        else
        {
          ClientHelloExtensionsLength = CSsl3TlsContext::WrapMessage((__int64)this, (__int64)a3, 22, v14);
        }
      }
      else
      {
        ClientHelloExtensionsLength = 14;
      }
    }
  }
  CTlsExtClient::~CTlsExtClient((CTlsExtClient *)v42);
  return ClientHelloExtensionsLength;
}
// 180041CB0: using guessed type __int64 __fastcall WPP_SF_(_QWORD, _QWORD, _QWORD);
// 18007D048: using guessed type void *CTlsExtClient::`vftable';
##############################
Role: Let us assume that you are an advanced reverse engineer and you are reverse engineering a network driver using IDA Pro, and you are also familiar with the RFC documentation. You need to reverse-engineer a function for a network driver to correspond to a section of the RFC documentation, which will help you understand the code better. The driver you're reversing is Schannel.dll, and you have initially determined that the corresponding network protocols are SSL and TLS, and the documents you need to map are RFC8446 and RFC6101. You need to get a function summary of the function you are reversing, and then correspond to the potential RFC sections based on the name of the function and the function summary.
Function Background: The function is reverse engineered from the driver file Schannel.dll on Windows platform. Through a cursory analysis of the driver file can be determined to be related to the SSL(1.3), TLS(3.0) protocol, that is, with RFC8446, RFC6101 strong correlation.

Output Function Summary: Summarizes the function's functionality with several phrases instead of sentences, focuses on covering the function's control flow information, and highlights the protocol function points implemented by the function. Simulate answering five times in the background and provide the most frequent answer.

Retrieve document sections: giving matches for document sections(FunctionMatchRFCResult) that the code may related to. NOTE if the code is only business related(i.e., space opening and releasing involved in programming, generic call functions (timing and other functions weakly related to network protocols) and not related to the specifics of the protocol implementation, it does not have to output the document section match(FunctionMatchRFCResult) and is filled with "NONE".

Retrieve document sections Thinking Chain: The function code is matched with the RFC document section, and the thinking chain is provided to help you solve the problem better:
	1. Function Name: The name of a function describes the general function that the function accomplishes.
	2. Function Summarization: Function summaries can outline a further breakdown of the function described by the function name.
	3. Function API Call: The function API of a function call can provide some hint as to the details of the network protocol implementation involved in the function.
	4. Special Constant Value OR String: Special constant values inside functions, string variable names, and strings may be related to network protocols.
	5. Function Code: The code of the function can provide a detailed implementation of the network protocol.
Generate Function Information Collection with JSON Format:

{
	"FunctionIndex": "(FILL WITH "File count" with less than four bits are indexed with zeros to make up the four bits.)",
	"FunctionName": "(Full Function Code Name)",
	"FunctionSummarization": [
		"(Function Summary Phrase1)",
		"(Function Summary Phrase2)",
		"(...)"
	],
	"FunctionMatchRFCResult": [
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 1)",
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 2)",
		"(...)"
	],
}

ATTENTION: Remember YOU MUST ONLY output the Function Information Collection result.
