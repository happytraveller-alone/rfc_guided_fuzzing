Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 1365
// Total lines: 390

//----- (000000018006BC00) ----------------------------------------------------
__int64 __fastcall CTls13ServerContext::GenerateClientHelloResponse(CTls13ServerContext *this, struct SPBuffer *a2)
{
  __int64 *v2; // rax
  struct SPBuffer *v3; // r14
  __int64 v5; // r13
  unsigned int inited; // edi
  int v7; // edx
  CTls13ServerContext *v8; // rcx
  int v10; // edi
  unsigned int OutputBuffer; // esi
  int v12; // edx
  __int64 v13; // rcx
  __int64 v14; // rax
  int v15; // r14d
  __int64 v16; // rax
  __int64 v17; // r13
  __int64 v18; // rax
  __int64 v19; // rsi
  void *v20; // rcx
  PCCERT_SERVER_OCSP_RESPONSE_CONTEXT ServerOcspResponseContext; // rax
  DWORD LastError; // eax
  __int64 v23; // rax
  unsigned __int8 v24; // di
  int v25; // eax
  __int64 v26; // rcx
  bool v27; // zf
  __int64 v28; // rax
  unsigned int v29; // ecx
  __int64 *v30; // r14
  _QWORD *v31; // r12
  char v32; // cl
  __int64 v33; // rax
  __int64 v34; // rcx
  char v35; // cl
  char v36[8]; // [rsp+50h] [rbp-79h] BYREF
  __int64 v37; // [rsp+58h] [rbp-71h] BYREF
  unsigned int v38; // [rsp+60h] [rbp-69h] BYREF
  __int64 v39; // [rsp+68h] [rbp-61h]
  struct SPBuffer *v40; // [rsp+70h] [rbp-59h]
  unsigned __int16 v41[2]; // [rsp+80h] [rbp-49h] BYREF
  int v42; // [rsp+84h] [rbp-45h]
  int v43; // [rsp+88h] [rbp-41h]
  __int16 v44; // [rsp+8Ch] [rbp-3Dh] BYREF
  int v45; // [rsp+90h] [rbp-39h]
  int v46; // [rsp+94h] [rbp-35h]
  __int16 v47; // [rsp+98h] [rbp-31h]
  int v48; // [rsp+9Ch] [rbp-2Dh]
  int v49; // [rsp+A0h] [rbp-29h]
  __int16 v50; // [rsp+A4h] [rbp-25h]
  int v51; // [rsp+A8h] [rbp-21h]
  int v52; // [rsp+ACh] [rbp-1Dh]
  __int16 v53; // [rsp+B0h] [rbp-19h]
  int v54; // [rsp+B4h] [rbp-15h]
  int v55; // [rsp+B8h] [rbp-11h]
  __int16 v56; // [rsp+BCh] [rbp-Dh]
  int v57; // [rsp+C0h] [rbp-9h]
  int v58; // [rsp+C4h] [rbp-5h]
  __int16 v59; // [rsp+C8h] [rbp-1h]
  int v60; // [rsp+CCh] [rbp+3h]
  int v61; // [rsp+D0h] [rbp+7h]

  v2 = (__int64 *)*((_QWORD *)this + 1);
  v40 = a2;
  v3 = a2;
  if ( v2 )
    v5 = *v2;
  else
    v5 = 0i64;
  v39 = v5;
  v41[0] = 0;
  v42 = 22;
  v43 = 1;
  v44 = 0;
  v46 = 3;
  v49 = 3;
  v52 = 3;
  v55 = 3;
  v58 = 3;
  v61 = 3;
  v45 = 22;
  v47 = 0;
  v48 = 22;
  v50 = 0;
  v51 = 22;
  v53 = 0;
  v54 = 22;
  v56 = 0;
  v57 = 22;
  v59 = 0;
  v60 = 22;
  v36[0] = 1;
  inited = CTls13ServerHandshake::ComputeServerHelloOrHRRSize((CTls13ServerContext *)((char *)this + 1288), v5, 1, v41);
  if ( inited
    || (inited = CTls13Context::SetCcsRecordInfo(
                   (CTls13ServerContext *)((char *)this + 1000),
                   (struct CTlsRecord::CMessageInfo *)&v44,
                   v36)) != 0 )
  {
    v7 = 1253;
LABEL_6:
    v8 = this;
LABEL_7:
    CSslContext::SetError((__int64)v8, v7, inited);
    return inited;
  }
  v10 = (unsigned __int8)(v36[0] + 1);
  OutputBuffer = CTls13ServerHandshake::ComputeEncryptedExtensionsMsgSize(
                   (CTls13ServerContext *)((char *)this + 1288),
                   &v41[6 * (unsigned __int8)v36[0]]);
  if ( OutputBuffer )
  {
LABEL_10:
    v12 = 1253;
LABEL_11:
    CSslContext::SetError((__int64)this, v12, OutputBuffer);
    return OutputBuffer;
  }
  v13 = *((_QWORD *)this + 17);
  if ( (v13 & 0x8000) != 0 )
  {
    v14 = *((_QWORD *)this + 1);
    v36[0] = 0;
    if ( !v14 )
      return 1359i64;
    v15 = *(_DWORD *)(v14 + 48);
    if ( (v13 & 0x100) != 0 && v15 != 4 )
    {
      v16 = (unsigned __int8)v10;
      LOBYTE(v10) = v10 + 1;
      OutputBuffer = CTls13ServerHandshake::ComputeCertificateRequestSize(
                       (CTls13ServerContext *)((char *)this + 1288),
                       &v41[6 * v16]);
      if ( OutputBuffer )
        goto LABEL_10;
    }
    v17 = *((_QWORD *)this + 10);
    if ( !v17 )
      return 1359i64;
    v18 = *(_QWORD *)this;
    v37 = 0i64;
    (*(void (__fastcall **)(CTls13ServerContext *, __int64 *))(v18 + 232))(this, &v37);
    if ( !v37 )
      return 1359i64;
    RtlAcquireResourceShared((PRTL_RESOURCE)(v37 + 72), 1u);
    v19 = *(_QWORD *)(v37 + 336);
    if ( !v19 )
    {
      RtlReleaseResource((PRTL_RESOURCE)(v37 + 72));
      return 1359i64;
    }
    if ( (*((_DWORD *)this + 34) & 0x20000) != 0 )
    {
      v20 = *(void **)(v19 + 456);
      if ( v20 )
      {
        if ( v15 != 4 )
        {
          ServerOcspResponseContext = CertGetServerOcspResponseContext(v20, 0, 0i64);
          *((_QWORD *)this + 189) = ServerOcspResponseContext;
          if ( !ServerOcspResponseContext
            && WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control
            && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
          {
            LastError = GetLastError();
            WPP_SF_D(
              *((_QWORD *)WPP_GLOBAL_Control + 2),
              59i64,
              &WPP_d144303c37633bde7ff6f9c18fccf166_Traceguids,
              LastError);
          }
        }
      }
    }
    v23 = (unsigned __int8)v10;
    v24 = v10 + 1;
    OutputBuffer = CTls13Handshake<CTls13ServerContext,CTls13ExtServer>::ComputeCertificateMsgSize(
                     (__int64)this + 1288,
                     v19,
                     *(_BYTE *)(v17 + 156) & 0x80,
                     &v41[6 * v23]);
    RtlReleaseResource((PRTL_RESOURCE)(v37 + 72));
    if ( OutputBuffer )
      goto LABEL_10;
    v25 = CTls13Handshake<CTls13ClientContext,CTls13ExtClient>::ComputeCertificateVerifySize(
            (__int64)this + 1288,
            &v41[6 * v24]);
    LOBYTE(v10) = v24 + 1;
    OutputBuffer = v25;
    if ( v25 )
      goto LABEL_10;
    v5 = v39;
    v3 = v40;
  }
  else
  {
    v36[0] = 1;
  }
  OutputBuffer = CTls13Handshake<CTls13ServerContext,CTls13ExtServer>::ComputeFinishedSize(
                   (__int64)this + 1288,
                   (__int64)&v41[6 * (unsigned __int8)v10]);
  if ( OutputBuffer )
    goto LABEL_10;
  v26 = *((_QWORD *)this + 151);
  v38 = 0;
  inited = (*(__int64 (__fastcall **)(__int64, _QWORD, unsigned __int16 *, unsigned int *))(*(_QWORD *)v26 + 16i64))(
             v26,
             (unsigned __int8)(v10 + 1),
             v41,
             &v38);
  v8 = this;
  if ( inited )
  {
    v7 = 1254;
    goto LABEL_7;
  }
  OutputBuffer = CSsl3TlsContext::AllocateOutputBuffer(this, v3, v38);
  if ( OutputBuffer )
    goto LABEL_37;
  OutputBuffer = (*(__int64 (__fastcall **)(_QWORD, struct SPBuffer *))(**((_QWORD **)this + 151) + 24i64))(
                   *((_QWORD *)this + 151),
                   v3);
  if ( OutputBuffer )
    goto LABEL_37;
  if ( *((_DWORD *)this + 17) == 93 )
  {
    inited = CSsl3TlsServerContext::InitUpdateClientHash(this);
  }
  else
  {
    inited = (*(__int64 (__fastcall **)(CTls13ServerContext *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)this + 504i64))(
               this,
               *((_QWORD *)this + 110),
               *((unsigned int *)this + 218),
               0i64);
    if ( *((_QWORD *)this + 110) )
    {
      (*(void (__fastcall **)(CTls13ServerContext *))(*(_QWORD *)this + 16i64))(this);
      *((_QWORD *)this + 110) = 0i64;
    }
    *((_DWORD *)this + 218) = 0;
  }
  if ( inited )
  {
    v7 = 1007;
    goto LABEL_6;
  }
  if ( this == (CTls13ServerContext *)-304i64 )
  {
    CSslContext::SetError(-304i64, 1255, 1359);
    return 1359i64;
  }
  OutputBuffer = CTls13ServerHandshake::GenerateServerHelloOrHRR(
                   (CTls13ServerContext *)((char *)this + 1288),
                   1,
                   (unsigned __int8 *)this + 304);
  if ( OutputBuffer )
  {
LABEL_37:
    v12 = 1255;
    goto LABEL_11;
  }
  v27 = (*((_BYTE *)this + 32) & 1) == 0;
  LODWORD(v37) = 1255;
  if ( v27 || (v28 = *((_QWORD *)this + 1)) == 0 )
    v29 = 0;
  else
    v29 = *(_DWORD *)(v28 + 28);
  v30 = (__int64 *)((char *)this + 168);
  v31 = (_QWORD *)((char *)this + 160);
  OutputBuffer = CTls13Context::GenerateHandshakeWriteKeys(
                   (CTls13ServerContext *)((char *)this + 1000),
                   v5,
                   *((_QWORD *)this + 14),
                   *((_QWORD *)this + 74),
                   *((_WORD *)this + 17),
                   v29,
                   v36[0],
                   (unsigned __int64 *)this + 20,
                   (unsigned __int64 *)this + 21,
                   (enum eSslErrorState *)&v37);
  if ( OutputBuffer )
  {
    v12 = v37;
    goto LABEL_11;
  }
  v32 = *((_BYTE *)this + 233);
  *((_WORD *)this + 16) |= 0xCu;
  if ( !v32 && *((_QWORD *)this + 19) )
  {
    SslFreeObject(*((_QWORD *)this + 19), 0i64);
    v32 = *((_BYTE *)this + 233);
  }
  v33 = *v30;
  *v30 = 0i64;
  *((_QWORD *)this + 19) = v33;
  if ( !v32 )
    *((_QWORD *)this + 23) = 0i64;
  if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 59i64, &WPP_906ebfdb0b6e356d5c7c2dbe304d0682_Traceguids);
  *((_BYTE *)this + 1216) = 2;
  OutputBuffer = CTls13Context::GenerateCcsRecord((CTls13ServerContext *)((char *)this + 1000));
  if ( OutputBuffer
    || (OutputBuffer = CTls13ServerHandshake::GenerateEncryptedExtensionsMsg((CTls13ServerContext *)((char *)this + 1288))) != 0
    || !v36[0]
    && ((*((_DWORD *)this + 34) & 0x100i64) != 0
     && *(_DWORD *)(*((_QWORD *)this + 1) + 48i64) != 4
     && (OutputBuffer = CTls13ServerHandshake::GenerateCertificateRequest((CTls13ServerContext *)((char *)this + 1288))) != 0
     || (OutputBuffer = CTls13Handshake<CTls13ServerContext,CTls13ExtServer>::GenerateCertificateMsg((__int64)this + 1288)) != 0
     || (OutputBuffer = CTls13Handshake<CTls13ServerContext,CTls13ExtServer>::GenerateCertificateVerify((__int64)this + 1288)) != 0)
    || (OutputBuffer = CTls13Handshake<CTls13ServerContext,CTls13ExtServer>::GenerateFinished((__int64)this + 1288)) != 0 )
  {
    v12 = 1255;
    goto LABEL_11;
  }
  *((_WORD *)this + 16) |= 0xAu;
  v34 = *((_QWORD *)this + 18);
  if ( v34 )
    SslFreeObject(v34, 0i64);
  *((_QWORD *)this + 18) = *v31;
  *v31 = 0i64;
  if ( !*((_BYTE *)this + 233) )
    *((_QWORD *)this + 22) = 0i64;
  if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 60i64, &WPP_906ebfdb0b6e356d5c7c2dbe304d0682_Traceguids);
  inited = CTls13Context::GenerateApplicationWriteKeys(
             (CTls13ServerContext *)((char *)this + 1000),
             v5,
             *((_QWORD *)this + 74),
             (unsigned __int64 *)this + 20,
             (unsigned __int64 *)this + 21,
             (enum eSslErrorState *)&v37);
  if ( inited )
  {
    v7 = v37;
    goto LABEL_6;
  }
  if ( !(*(unsigned __int8 (__fastcall **)(CTls13ServerContext *))(*(_QWORD *)this + 384i64))(this) )
  {
    inited = CTls13Context::PopulateSecTrafficSecret(
               (__int64)this + 1000,
               v5,
               1,
               2u,
               *((_QWORD *)this + 1),
               v41[0],
               *((_WORD *)v40 + 2));
    if ( inited )
    {
      v7 = 610;
      goto LABEL_6;
    }
    inited = CTls13Context::PopulateSecTrafficSecret((__int64)this + 1000, v5, 0, 2u, *((_QWORD *)this + 1), 0, 0);
    if ( inited )
    {
      v7 = 609;
      goto LABEL_6;
    }
    inited = CTls13Context::PopulateSecTrafficSecret((__int64)this + 1000, v5, 1, 3u, *((_QWORD *)this + 1), 0, 0);
    if ( inited )
    {
      v7 = 612;
      goto LABEL_6;
    }
  }
  v35 = *((_BYTE *)this + 233);
  *((_WORD *)this + 16) |= 0xCu;
  if ( !v35 )
  {
    v35 = 0;
    if ( *((_QWORD *)this + 19) )
    {
      SslFreeObject(*((_QWORD *)this + 19), 0i64);
      v35 = *((_BYTE *)this + 233);
    }
  }
  *((_QWORD *)this + 19) = *v30;
  *v30 = 0i64;
  if ( !v35 )
    *((_QWORD *)this + 23) = 0i64;
  if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 59i64, &WPP_906ebfdb0b6e356d5c7c2dbe304d0682_Traceguids);
  *((_BYTE *)this + 1216) = 3;
  return 0i64;
}
// 180041CB0: using guessed type __int64 __fastcall WPP_SF_(_QWORD, _QWORD, _QWORD);
// 180041CDC: using guessed type __int64 __fastcall WPP_SF_D(_QWORD, _QWORD, _QWORD, _QWORD);
// 180080FD8: using guessed type __int64 (__fastcall *_guard_xfg_dispatch_icall_fptr)(_QWORD, _QWORD, _QWORD);
// 180098570: using guessed type __int64 __fastcall SslFreeObject(_QWORD, _QWORD);
// 18006BC00: using guessed type char var_D0[8];
##############################
Role: Let us assume that you are an advanced reverse engineer and you are reverse engineering a network driver using IDA Pro, and you are also familiar with the RFC documentation. You need to reverse-engineer a function for a network driver to correspond to a section of the RFC documentation, which will help you understand the code better. The driver you're reversing is Schannel.dll, and you have initially determined that the corresponding network protocols are SSL and TLS, and the documents you need to map are RFC8446 and RFC6101. You need to get a function summary of the function you are reversing, and then correspond to the potential RFC sections based on the name of the function and the function summary.
Function Background: The function is reverse engineered from the driver file Schannel.dll on Windows platform. Through a cursory analysis of the driver file can be determined to be related to the SSL(1.3), TLS(3.0) protocol, that is, with RFC8446, RFC6101 strong correlation.

Output Function Summary: Summarizes the function's functionality with several phrases instead of sentences, focuses on covering the function's control flow information, and highlights the protocol function points implemented by the function. Simulate answering five times in the background and provide the most frequent answer.

Retrieve document sections: giving matches for document sections(FunctionMatchRFCResult) that the code may related to. NOTE if the code is only business related(i.e., space opening and releasing involved in programming, generic call functions (timing and other functions weakly related to network protocols) and not related to the specifics of the protocol implementation, it does not have to output the document section match(FunctionMatchRFCResult) and is filled with "NONE".

Retrieve document sections Thinking Chain: The function code is matched with the RFC document section, and the thinking chain is provided to help you solve the problem better:
	1. Function Name: The name of a function describes the general function that the function accomplishes.
	2. Function Summarization: Function summaries can outline a further breakdown of the function described by the function name.
	3. Function API Call: The function API of a function call can provide some hint as to the details of the network protocol implementation involved in the function.
	4. Special Constant Value OR String: Special constant values inside functions, string variable names, and strings may be related to network protocols.
	5. Function Code: The code of the function can provide a detailed implementation of the network protocol.
Generate Function Information Collection with JSON Format:

{
	"FunctionIndex": "(FILL WITH "File count" with less than four bits are indexed with zeros to make up the four bits.)",
	"FunctionName": "(Full Function Code Name)",
	"FunctionSummarization": [
		"(Function Summary Phrase1)",
		"(Function Summary Phrase2)",
		"(...)"
	],
	"FunctionMatchRFCResult": [
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 1)",
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 2)",
		"(...)"
	],
}

ATTENTION: Remember YOU MUST ONLY output the Function Information Collection result.
