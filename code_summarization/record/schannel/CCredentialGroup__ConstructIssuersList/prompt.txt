Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 1023
// Total lines: 210

//----- (0000000180055730) ----------------------------------------------------
__int64 __fastcall CCredentialGroup::ConstructIssuersList(CCredentialGroup *this)
{
  unsigned int TrustedRoots; // ebx
  unsigned int v2; // r15d
  unsigned __int8 *v4; // rdi
  void *v5; // rcx
  void *v6; // rcx
  unsigned __int8 *v7; // rax
  void *v8; // rcx
  void *v9; // rcx
  const CERT_CONTEXT *v10; // rax
  void *v11; // r14
  unsigned int v12; // ebx
  unsigned __int8 *v13; // rax
  CCredentialGroup *v14; // rcx
  __int64 v15; // rbx
  bool v16; // zf
  unsigned __int8 *v17; // rax
  unsigned int v18; // ebx
  int v19; // edx
  int v20; // ecx
  unsigned int v21; // eax
  unsigned int v22; // ebx
  struct _UNICODE_STRING DestinationString; // [rsp+20h] [rbp-10h] BYREF
  SIZE_T uBytes; // [rsp+70h] [rbp+40h] BYREF
  SIZE_T Size; // [rsp+78h] [rbp+48h] BYREF
  void *v27; // [rsp+80h] [rbp+50h] BYREF
  void *Src; // [rsp+88h] [rbp+58h] BYREF

  TrustedRoots = 0;
  v2 = 0;
  Src = 0i64;
  LODWORD(Size) = 0;
  v4 = 0i64;
  v27 = 0i64;
  v5 = (void *)*((_QWORD *)this + 108);
  LODWORD(uBytes) = 0;
  if ( v5 )
  {
    if ( (*((_BYTE *)this + 156) & 0x10) == 0 )
      return TrustedRoots;
    LocalFree(v5);
    *((_QWORD *)this + 108) = 0i64;
    *((_DWORD *)this + 214) = 0;
  }
  *((_DWORD *)this + 39) &= ~0x10u;
  v6 = (void *)*((_QWORD *)this + 96);
  if ( v6 )
  {
    if ( (unsigned int)ExtractIssuerNamesFromStore(v6, 0i64, (unsigned int *)&uBytes, 0i64) )
      goto LABEL_10;
    v7 = (unsigned __int8 *)LocalAlloc(0x40u, (unsigned int)uBytes);
    v4 = v7;
    if ( !v7 )
      return 14;
    if ( !(unsigned int)ExtractIssuerNamesFromStore(*((void **)this + 96), v7, (unsigned int *)&uBytes, 0i64) )
    {
LABEL_10:
      v2 = uBytes;
    }
    else
    {
      LocalFree(v4);
      v4 = 0i64;
    }
  }
  v8 = (void *)*((_QWORD *)this + 102);
  if ( v8 )
  {
LABEL_15:
    v27 = CertDuplicateStore(v8);
    v11 = v27;
    if ( v27 )
      goto LABEL_22;
    goto LABEL_16;
  }
  v9 = (void *)*((_QWORD *)this + 104);
  if ( v9 )
  {
    v10 = CertEnumCertificatesInStore(v9, 0i64);
    if ( v10 )
    {
      CertFreeCertificateContext(v10);
      v8 = (void *)*((_QWORD *)this + 104);
      goto LABEL_15;
    }
  }
LABEL_16:
  TrustedRoots = SchGetTrustedRoots(&v27, *((_QWORD *)this + 94));
  if ( TrustedRoots )
  {
    if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) != 0 )
      WPP_SF_D(
        *((_QWORD *)WPP_GLOBAL_Control + 2),
        35i64,
        &WPP_2ffbdd3159b83638eae39e16ce6a3c9c_Traceguids,
        TrustedRoots);
    v11 = v27;
    goto LABEL_38;
  }
  v11 = v27;
LABEL_22:
  TrustedRoots = ConstructIssuersListFromStore(v11, (unsigned __int8 **)&Src, (unsigned int *)&Size);
  if ( !TrustedRoots )
  {
    if ( v4 )
    {
      v12 = Size;
      if ( (unsigned int)Size + v2 < v2 )
      {
LABEL_30:
        TrustedRoots = 534;
LABEL_42:
        LocalFree(v4);
        goto LABEL_52;
      }
      v13 = (unsigned __int8 *)LocalReAlloc(v4, (unsigned int)Size + v2, 2u);
      if ( !v13 )
      {
        TrustedRoots = 14;
        goto LABEL_42;
      }
      v4 = v13;
    }
    else
    {
      v12 = Size;
      v4 = (unsigned __int8 *)LocalAlloc(0x40u, (unsigned int)Size);
      if ( !v4 )
      {
        TrustedRoots = 14;
        goto LABEL_52;
      }
    }
    memcpy_0(&v4[v2], Src, v12);
    v15 = v2 + v12;
    v16 = (*((_BYTE *)this + 156) & 1) == 0;
    LODWORD(uBytes) = v15;
    if ( !v16 )
      goto LABEL_41;
    if ( (int)v15 + 27 >= (unsigned int)v15 )
    {
      v17 = (unsigned __int8 *)LocalReAlloc(v4, (unsigned int)(v15 + 27), 2u);
      if ( !v17 )
      {
        TrustedRoots = 14;
        goto LABEL_38;
      }
      v4 = v17;
      LODWORD(uBytes) = v15 + 27;
      *(_OWORD *)&v17[v15] = *(_OWORD *)&SslNtAuthorityName;
      qmemcpy(&v17[v15 + 16], "T AUTHORITY", 11);
LABEL_41:
      TrustedRoots = CCredentialGroup::RemoveDuplicateIssuers(v14, v4, (unsigned int *)&uBytes);
      if ( !TrustedRoots )
      {
        v18 = uBytes;
        *((_DWORD *)this + 214) = uBytes;
        *((_QWORD *)this + 108) = v4;
        if ( v18 > 0x3FD0 )
        {
          v19 = 0;
          while ( 1 )
          {
            v20 = v4[1] | (*v4 << 8);
            v21 = v20 + v19 + 2;
            if ( v21 > 0x3FD0 )
              break;
            v19 += v20 + 2;
            v4 += (unsigned int)(v20 + 2);
            if ( v21 >= v18 )
              goto LABEL_49;
          }
          *((_DWORD *)this + 214) = v19;
LABEL_49:
          v22 = *((_DWORD *)this + 53);
          if ( (g_dwEventLogging & 1) != 0 )
          {
            RtlInitUnicodeString(&DestinationString, (PCWSTR)this + 108);
            SchEventWrite(&SSLEVENT_ISSUER_LIST_OVERFLOW_FAILURE, L"du", v22, &DestinationString);
          }
        }
        TrustedRoots = 0;
        goto LABEL_52;
      }
      goto LABEL_42;
    }
    goto LABEL_30;
  }
  if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) != 0 )
    WPP_SF_D(*((_QWORD *)WPP_GLOBAL_Control + 2), 36i64, &WPP_2ffbdd3159b83638eae39e16ce6a3c9c_Traceguids, TrustedRoots);
LABEL_38:
  if ( v4 )
    goto LABEL_42;
LABEL_52:
  if ( v11 )
    CertCloseStore(v11, 0);
  if ( Src )
    SPExternalFree(Src);
  return TrustedRoots;
}
// 180055A6E: conditional instruction was optimized away because ebx.4>=3FD1u
// 18005599E: conditional instruction was optimized away because rdi.8!=0
// 180055A22: conditional instruction was optimized away because rdi.8!=0
// 180055A5D: conditional instruction was optimized away because rdi.8!=0
// 180055A2B: variable 'v14' is possibly undefined
// 180041CDC: using guessed type __int64 __fastcall WPP_SF_D(_QWORD, _QWORD, _QWORD, _QWORD);
// 180082B38: using guessed type GUID WPP_2ffbdd3159b83638eae39e16ce6a3c9c_Traceguids;
// 180091A00: using guessed type unsigned __int8 near *SslNtAuthorityName;
##############################
Role: Let us assume that you are an advanced reverse engineer and you are reverse engineering a network driver using IDA Pro, and you are also familiar with the RFC documentation. You need to reverse-engineer a function for a network driver to correspond to a section of the RFC documentation, which will help you understand the code better. The driver you're reversing is Schannel.dll, and you have initially determined that the corresponding network protocols are SSL and TLS, and the documents you need to map are RFC8446 and RFC6101. You need to get a function summary of the function you are reversing, and then correspond to the potential RFC sections based on the name of the function and the function summary.
Function Background: The function is reverse engineered from the driver file Schannel.dll on Windows platform. Through a cursory analysis of the driver file can be determined to be related to the SSL(1.3), TLS(3.0) protocol, that is, with RFC8446, RFC6101 strong correlation.

Output Function Summary: Summarizes the function's functionality with several phrases instead of sentences, focuses on covering the function's control flow information, and highlights the protocol function points implemented by the function. Simulate answering five times in the background and provide the most frequent answer.

Retrieve document sections: giving matches for document sections(FunctionMatchRFCResult) that the code may related to. NOTE if the code is only business related(i.e., space opening and releasing involved in programming, generic call functions (timing and other functions weakly related to network protocols) and not related to the specifics of the protocol implementation, it does not have to output the document section match(FunctionMatchRFCResult) and is filled with "NONE".

Retrieve document sections Thinking Chain: The function code is matched with the RFC document section, and the thinking chain is provided to help you solve the problem better:
	1. Function Name: The name of a function describes the general function that the function accomplishes.
	2. Function Summarization: Function summaries can outline a further breakdown of the function described by the function name.
	3. Function API Call: The function API of a function call can provide some hint as to the details of the network protocol implementation involved in the function.
	4. Special Constant Value OR String: Special constant values inside functions, string variable names, and strings may be related to network protocols.
	5. Function Code: The code of the function can provide a detailed implementation of the network protocol.
Generate Function Information Collection with JSON Format:

{
	"FunctionIndex": "(FILL WITH "File count" with less than four bits are indexed with zeros to make up the four bits.)",
	"FunctionName": "(Full Function Code Name)",
	"FunctionSummarization": [
		"(Function Summary Phrase1)",
		"(Function Summary Phrase2)",
		"(...)"
	],
	"FunctionMatchRFCResult": [
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 1)",
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 2)",
		"(...)"
	],
}

ATTENTION: Remember YOU MUST ONLY output the Function Information Collection result.
