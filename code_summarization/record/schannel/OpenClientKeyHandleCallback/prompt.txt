Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 973
// Total lines: 268

//----- (00000001800511B0) ----------------------------------------------------
__int64 __fastcall OpenClientKeyHandleCallback(unsigned __int64 a1, char a2, int *a3, __int64 a4)
{
  unsigned int v4; // ebx
  char v8; // r14
  CCipherMill *v9; // rcx
  int v10; // r12d
  unsigned int v11; // ecx
  int v12; // r14d
  _QWORD *v13; // rax
  _QWORD *v14; // r15
  int v15; // r10d
  __int64 v16; // r14
  int v17; // r10d
  int v18; // eax
  unsigned int v19; // r10d
  __int64 v20; // rcx
  __int128 v21; // xmm0
  DWORD v22; // r13d
  unsigned int v23; // esi
  DWORD v24; // ebx
  __int64 v25; // rdx
  const WCHAR *v26; // r9
  unsigned int v27; // eax
  const WCHAR *v28; // r8
  bool v29; // zf
  CCipherMill *v30; // rcx
  CCipherMill *v31; // rcx
  int v32; // eax
  unsigned __int64 v33; // r8
  unsigned __int64 *v34; // r15
  void *v35; // rcx
  int v37; // [rsp+48h] [rbp-29h] BYREF
  LPCWSTR pszProviderName; // [rsp+50h] [rbp-21h]
  LPCWSTR pszKeyName; // [rsp+58h] [rbp-19h]
  NCRYPT_KEY_HANDLE phKey; // [rsp+60h] [rbp-11h] BYREF
  int v41; // [rsp+68h] [rbp-9h]
  int v42; // [rsp+6Ch] [rbp-5h]
  unsigned __int64 v43; // [rsp+70h] [rbp-1h] BYREF
  __int64 v44; // [rsp+78h] [rbp+7h]
  __int128 v45; // [rsp+80h] [rbp+Fh]

  pszKeyName = 0i64;
  v4 = 0;
  pszProviderName = 0i64;
  v37 = 0;
  phKey = 0i64;
  v43 = 0i64;
  v8 = a2;
  if ( !(unsigned int)SchannelInit(1) || !a3 || !a4 )
    return 1359i64;
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0i64;
  *(_DWORD *)(a4 + 4) = 0;
  v9 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
  {
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 36i64, &WPP_e7a188b1921532aa285b79366435dd9d_Traceguids);
    v9 = WPP_GLOBAL_Control;
  }
  v10 = 8;
  if ( *((_QWORD *)a3 + 1) )
  {
    *(_DWORD *)(a4 + 4) = 1;
    v11 = 36 * a1;
    *(_DWORD *)a4 = 36 * a1;
    v12 = v8 & 4;
    if ( v12 )
    {
      v11 += 8;
      *(_DWORD *)a4 = v11;
    }
    v13 = SPExternalAlloc(v11);
    *(_QWORD *)(a4 + 8) = v13;
    v14 = v13;
    if ( v13 )
    {
      if ( v12 )
      {
        *v13 = **((_QWORD **)a3 + 1);
        v14 = v13 + 1;
      }
      v15 = *a3;
      v16 = *((_QWORD *)a3 + 1) + 8i64;
      v44 = 0i64;
      v17 = v15 - 8;
      if ( a1 )
      {
        while ( 1 )
        {
          v18 = *(_DWORD *)(v16 + 20);
          v19 = v17 - *(_DWORD *)v16;
          v20 = *(unsigned int *)(v16 + 36);
          v21 = *(_OWORD *)(v16 + 4);
          v22 = *(_DWORD *)(v16 + 24);
          v23 = *(_DWORD *)(v16 + 28);
          v24 = *(_DWORD *)(v16 + 32);
          v25 = *(unsigned int *)(v16 + 40);
          v16 += 44i64;
          v41 = v18;
          v26 = (const WCHAR *)v16;
          v27 = v20 + 44;
          v42 = v19;
          v45 = v21;
          if ( (unsigned int)v20 >= 0xFFFFFFD4 || (unsigned int)v25 + v27 < v27 )
            break;
          if ( v19 < (unsigned int)v25 + v27 )
          {
            v4 = 1359;
            goto LABEL_66;
          }
          if ( (_DWORD)v20 )
            v16 += v20;
          v28 = (const WCHAR *)v16;
          if ( !(_DWORD)v20 )
            v26 = pszKeyName;
          pszKeyName = v26;
          v29 = (_DWORD)v25 == 0;
          if ( (_DWORD)v25 )
          {
            v16 += v25;
            v29 = (_DWORD)v25 == 0;
          }
          if ( v29 )
            v28 = pszProviderName;
          v30 = WPP_GLOBAL_Control;
          pszProviderName = v28;
          if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control )
          {
            if ( (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
            {
              WPP_SF_S(
                *((_QWORD *)WPP_GLOBAL_Control + 2),
                0x25u,
                (__int64)&WPP_e7a188b1921532aa285b79366435dd9d_Traceguids,
                v26);
              v30 = WPP_GLOBAL_Control;
              v28 = pszProviderName;
            }
            if ( v30 != (CCipherMill *)&WPP_GLOBAL_Control )
            {
              if ( (*((_BYTE *)v30 + 28) & 4) != 0 )
              {
                WPP_SF_S(*((_QWORD *)v30 + 2), 0x26u, (__int64)&WPP_e7a188b1921532aa285b79366435dd9d_Traceguids, v28);
                v30 = WPP_GLOBAL_Control;
              }
              if ( v30 != (CCipherMill *)&WPP_GLOBAL_Control )
              {
                if ( (*((_BYTE *)v30 + 28) & 4) != 0 )
                {
                  WPP_SF_D(*((_QWORD *)v30 + 2), 39i64, &WPP_e7a188b1921532aa285b79366435dd9d_Traceguids, v24);
                  v30 = WPP_GLOBAL_Control;
                }
                if ( v30 != (CCipherMill *)&WPP_GLOBAL_Control )
                {
                  if ( (*((_BYTE *)v30 + 28) & 4) != 0 )
                  {
                    WPP_SF_D(*((_QWORD *)v30 + 2), 40i64, &WPP_e7a188b1921532aa285b79366435dd9d_Traceguids, v22);
                    v30 = WPP_GLOBAL_Control;
                  }
                  if ( v30 != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)v30 + 28) & 4) != 0 )
                    WPP_SF_D(*((_QWORD *)v30 + 2), 41i64, &WPP_e7a188b1921532aa285b79366435dd9d_Traceguids, v23);
                }
              }
            }
          }
          v4 = OpenKeyUsingCng(&phKey, pszKeyName, pszProviderName, v24, v23, 1, &v37);
          if ( v4 )
          {
            if ( v37 )
            {
              v9 = WPP_GLOBAL_Control;
              if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control
                && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
              {
                WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 42i64, &WPP_e7a188b1921532aa285b79366435dd9d_Traceguids);
LABEL_59:
                v9 = WPP_GLOBAL_Control;
              }
LABEL_60:
              v4 = -2146893043;
              goto LABEL_67;
            }
            phKey = 0i64;
            v4 = OpenKeyUsingCAPI(&v43, pszKeyName, pszProviderName, v22, v23);
            if ( v4 )
            {
              v9 = WPP_GLOBAL_Control;
              if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control
                && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) != 0 )
              {
                WPP_SF_D(
                  *((_QWORD *)WPP_GLOBAL_Control + 2),
                  43i64,
                  &WPP_e7a188b1921532aa285b79366435dd9d_Traceguids,
                  v4);
                goto LABEL_59;
              }
              goto LABEL_60;
            }
          }
          v31 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control )
          {
            if ( (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
            {
              WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 44i64, &WPP_e7a188b1921532aa285b79366435dd9d_Traceguids);
              v31 = WPP_GLOBAL_Control;
            }
            if ( v31 != (CCipherMill *)&WPP_GLOBAL_Control )
            {
              if ( (*((_BYTE *)v31 + 28) & 4) != 0 )
              {
                WPP_SF_q(*((_QWORD *)v31 + 2), 0x2Du, (__int64)&WPP_e7a188b1921532aa285b79366435dd9d_Traceguids, phKey);
                v31 = WPP_GLOBAL_Control;
              }
              if ( v31 != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)v31 + 28) & 4) != 0 )
                WPP_SF_q(*((_QWORD *)v31 + 2), 0x2Eu, (__int64)&WPP_e7a188b1921532aa285b79366435dd9d_Traceguids, v43);
            }
          }
          v32 = v41;
          v33 = ++v44;
          *(_OWORD *)v14 = v45;
          *((_DWORD *)v14 + 4) = v32;
          v34 = (_QWORD *)((char *)v14 + 20);
          *v34++ = phKey;
          *v34 = v43;
          v14 = v34 + 1;
          if ( v33 >= a1 )
            goto LABEL_66;
          v17 = v42;
        }
        v4 = 534;
      }
    }
    else
    {
      v4 = 14;
    }
LABEL_66:
    v9 = WPP_GLOBAL_Control;
LABEL_67:
    v8 = a2;
  }
  else
  {
    v4 = 1359;
  }
  if ( v9 != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)v9 + 28) & 4) != 0 )
    WPP_SF_(*((_QWORD *)v9 + 2), 47i64, &WPP_e7a188b1921532aa285b79366435dd9d_Traceguids);
  if ( v4 )
  {
    if ( (v8 & 4) == 0 )
    {
      v35 = *(void **)(a4 + 8);
      if ( v35 )
        SPExternalFree(v35);
      *(_QWORD *)(a4 + 8) = 0i64;
      *(_DWORD *)(a4 + 4) = 0;
      v10 = 0;
    }
    *(_DWORD *)a4 = v10;
    return 0;
  }
  return v4;
}
// 180041CB0: using guessed type __int64 __fastcall WPP_SF_(_QWORD, _QWORD, _QWORD);
// 180041CDC: using guessed type __int64 __fastcall WPP_SF_D(_QWORD, _QWORD, _QWORD, _QWORD);
##############################
Role: Let us assume that you are an advanced reverse engineer and you are reverse engineering a network driver using IDA Pro, and you are also familiar with the RFC documentation. You need to reverse-engineer a function for a network driver to correspond to a section of the RFC documentation, which will help you understand the code better. The driver you're reversing is Schannel.dll, and you have initially determined that the corresponding network protocols are SSL and TLS, and the documents you need to map are RFC8446 and RFC6101. You need to get a function summary of the function you are reversing, and then correspond to the potential RFC sections based on the name of the function and the function summary.
Function Background: The function is reverse engineered from the driver file Schannel.dll on Windows platform. Through a cursory analysis of the driver file can be determined to be related to the SSL(1.3), TLS(3.0) protocol, that is, with RFC8446, RFC6101 strong correlation.

Output Function Summary: Summarizes the function's functionality with several phrases instead of sentences, focuses on covering the function's control flow information, and highlights the protocol function points implemented by the function. Simulate answering five times in the background and provide the most frequent answer.

Retrieve document sections: giving matches for document sections(FunctionMatchRFCResult) that the code may related to. NOTE if the code is only business related(i.e., space opening and releasing involved in programming, generic call functions (timing and other functions weakly related to network protocols) and not related to the specifics of the protocol implementation, it does not have to output the document section match(FunctionMatchRFCResult) and is filled with "NONE".

Retrieve document sections Thinking Chain: The function code is matched with the RFC document section, and the thinking chain is provided to help you solve the problem better:
	1. Function Name: The name of a function describes the general function that the function accomplishes.
	2. Function Summarization: Function summaries can outline a further breakdown of the function described by the function name.
	3. Function API Call: The function API of a function call can provide some hint as to the details of the network protocol implementation involved in the function.
	4. Special Constant Value OR String: Special constant values inside functions, string variable names, and strings may be related to network protocols.
	5. Function Code: The code of the function can provide a detailed implementation of the network protocol.
Generate Function Information Collection with JSON Format:

{
	"FunctionIndex": "(FILL WITH "File count" with less than four bits are indexed with zeros to make up the four bits.)",
	"FunctionName": "(Full Function Code Name)",
	"FunctionSummarization": [
		"(Function Summary Phrase1)",
		"(Function Summary Phrase2)",
		"(...)"
	],
	"FunctionMatchRFCResult": [
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 1)",
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 2)",
		"(...)"
	],
}

ATTENTION: Remember YOU MUST ONLY output the Function Information Collection result.
