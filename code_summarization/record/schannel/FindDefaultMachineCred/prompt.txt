Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 1048
// Total lines: 318

//----- (0000000180057D84) ----------------------------------------------------
__int64 __fastcall FindDefaultMachineCred(
        struct CCredentialGroup **a1,
        unsigned int a2,
        struct _LUID *a3,
        void *a4,
        unsigned int a5,
        unsigned __int16 *SourceString)
{
  int v6; // ebx
  PCCERT_CONTEXT v8; // rsi
  HCERTSTORE v9; // r14
  WCHAR *v10; // rdi
  int v11; // r15d
  DWORD LastError; // eax
  __int64 v13; // rdx
  unsigned int v14; // ebx
  WCHAR *v15; // rax
  int v16; // eax
  __int64 v17; // rax
  const CERT_CONTEXT *i; // rdx
  __int64 v19; // rcx
  __int64 v20; // r8
  __int64 v21; // r9
  __int64 v22; // rcx
  __int64 v23; // r8
  __int64 v24; // r9
  DWORD v25; // eax
  char v26; // al
  __int64 v27; // rcx
  __int64 v28; // r8
  __int64 v29; // r9
  unsigned int v30; // eax
  CCipherMill *v31; // rcx
  __int64 v32; // rdx
  __int64 v33; // rdx
  void *pvPara; // [rsp+20h] [rbp-258h]
  DWORD nSize; // [rsp+40h] [rbp-238h] BYREF
  PCCERT_CHAIN_CONTEXT pChainContext; // [rsp+48h] [rbp-230h] BYREF
  unsigned int v38; // [rsp+50h] [rbp-228h]
  void *v39; // [rsp+58h] [rbp-220h]
  struct _UNICODE_STRING DestinationString; // [rsp+60h] [rbp-218h] BYREF
  struct _CERT_CHAIN_POLICY_PARA pPolicyPara; // [rsp+70h] [rbp-208h] BYREF
  int v42[4]; // [rsp+80h] [rbp-1F8h] BYREF
  WCHAR *v43; // [rsp+90h] [rbp-1E8h]
  struct _CERT_CHAIN_POLICY_STATUS pPolicyStatus; // [rsp+98h] [rbp-1E0h] BYREF
  __int128 v45[3]; // [rsp+B0h] [rbp-1C8h] BYREF
  __int64 v46; // [rsp+E0h] [rbp-198h]
  struct _CERT_CHAIN_PARA pChainPara; // [rsp+F0h] [rbp-188h] BYREF
  int v48[2]; // [rsp+150h] [rbp-128h] BYREF
  __int128 *v49; // [rsp+158h] [rbp-120h]
  char v50[96]; // [rsp+160h] [rbp-118h] BYREF
  __int64 v51[3]; // [rsp+1C0h] [rbp-B8h] BYREF
  struct _EVENT_DATA_DESCRIPTOR v52; // [rsp+1D8h] [rbp-A0h] BYREF
  struct _EVENT_DATA_DESCRIPTOR v53; // [rsp+1E8h] [rbp-90h] BYREF
  struct _EVENT_DATA_DESCRIPTOR v54; // [rsp+1F8h] [rbp-80h] BYREF
  struct _EVENT_DATA_DESCRIPTOR v55; // [rsp+208h] [rbp-70h] BYREF
  struct _EVENT_DATA_DESCRIPTOR v56; // [rsp+218h] [rbp-60h] BYREF
  struct _EVENT_DATA_DESCRIPTOR v57; // [rsp+228h] [rbp-50h] BYREF

  v6 = 0;
  v51[0] = (__int64)"1.3.6.1.5.5.7.3.1";
  v39 = a4;
  v51[1] = (__int64)"1.3.6.1.4.1.311.10.3.3";
  *(_QWORD *)&DestinationString.Length = a3;
  v51[2] = (__int64)"2.16.840.1.113730.4.1";
  v8 = 0i64;
  v38 = a2;
  v9 = 0i64;
  pChainContext = 0i64;
  v10 = 0i64;
  v11 = 0;
  if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 0x20) != 0 )
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 25i64, &WPP_d5302f0819dd3315699237cebd9fbb35_Traceguids);
  nSize = 0;
  if ( !GetComputerNameExW(ComputerNameDnsFullyQualified, 0i64, &nSize) && GetLastError() != 234 )
  {
    if ( WPP_GLOBAL_Control == (CCipherMill *)&WPP_GLOBAL_Control || (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) == 0 )
      goto LABEL_10;
    LastError = GetLastError();
    v13 = 26i64;
LABEL_9:
    WPP_SF_D(*((_QWORD *)WPP_GLOBAL_Control + 2), v13, &WPP_d5302f0819dd3315699237cebd9fbb35_Traceguids, LastError);
LABEL_10:
    v14 = -2146893022;
    goto LABEL_82;
  }
  v15 = (WCHAR *)SPExternalAlloc(2 * nSize);
  v10 = v15;
  if ( !v15 )
  {
    v14 = -2146893056;
    goto LABEL_82;
  }
  if ( !GetComputerNameExW(ComputerNameDnsFullyQualified, v15, &nSize) )
  {
    if ( WPP_GLOBAL_Control == (CCipherMill *)&WPP_GLOBAL_Control || (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) == 0 )
      goto LABEL_10;
    LastError = GetLastError();
    v13 = 27i64;
    goto LABEL_9;
  }
  v16 = lstrlenW(v10);
  nSize = v16;
  if ( v16 )
  {
    v17 = (unsigned int)(v16 - 1);
    if ( v10[v17] == 46 )
      v10[v17] = 0;
  }
  if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
    WPP_SF_S(*((_QWORD *)WPP_GLOBAL_Control + 2), 0x1Cu, (__int64)&WPP_d5302f0819dd3315699237cebd9fbb35_Traceguids, v10);
  v9 = CertOpenStore((LPCSTR)0xA, 1u, 0i64, 0x2C000u, L"MY");
  if ( !v9 )
  {
    GetLastError();
    v14 = GetLastError();
    if ( v14 )
      goto LABEL_82;
    goto LABEL_85;
  }
  while ( 2 )
  {
    for ( i = 0i64; ; i = v8 )
    {
      v8 = CertEnumCertificatesInStore(v9, i);
      if ( !v8 )
        break;
      memset_0(&pChainPara, 0, 0x60ui64);
      pChainPara.RequestedUsage.Usage.rgpszUsageIdentifier = (LPSTR *)v51;
      pChainPara.cbSize = 96;
      pChainPara.RequestedUsage.dwType = 1;
      pChainPara.RequestedUsage.Usage.cUsageIdentifier = 3;
      if ( (Microsoft_Windows_Schannel_EventsEnableBits & 1) != 0 )
        McGenEventWrite_EventWriteTransfer(v19, &ChainBuildStart, v20, v21, &v52);
      if ( !CertGetCertificateChain(0i64, v8, 0i64, 0i64, &pChainPara, 0x90000004, 0i64, &pChainContext) )
      {
        if ( (Microsoft_Windows_Schannel_EventsEnableBits & 1) != 0 )
          McGenEventWrite_EventWriteTransfer(v22, &ChainBuildStop, v23, v24, &v53);
        if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 2) != 0 )
        {
          v25 = GetLastError();
          WPP_SF_D(*((_QWORD *)WPP_GLOBAL_Control + 2), 29i64, &WPP_d5302f0819dd3315699237cebd9fbb35_Traceguids, v25);
        }
        continue;
      }
      v26 = Microsoft_Windows_Schannel_EventsEnableBits;
      if ( (Microsoft_Windows_Schannel_EventsEnableBits & 1) != 0 )
      {
        McGenEventWrite_EventWriteTransfer(v22, &ChainBuildStop, v23, v24, &v54);
        v26 = Microsoft_Windows_Schannel_EventsEnableBits;
      }
      v42[3] = 0;
      v42[2] = 0;
      v42[0] = 24;
      pPolicyPara.pvExtraPolicyPara = v42;
      v42[1] = 2;
      memset(&pPolicyStatus, 0, sizeof(pPolicyStatus));
      pPolicyStatus.cbSize = 24;
      v43 = v10;
      pPolicyPara.cbSize = 16;
      pPolicyPara.dwFlags = v6 != 0 ? 7 : 0;
      if ( (v26 & 1) != 0 )
        McGenEventWrite_EventWriteTransfer((unsigned int)-v6, &ChainVerifyStart, v23, v24, &v55);
      if ( !CertVerifyCertificateChainPolicy((LPCSTR)4, pChainContext, &pPolicyPara, &pPolicyStatus) )
      {
        if ( (Microsoft_Windows_Schannel_EventsEnableBits & 1) != 0 )
          McGenEventWrite_EventWriteTransfer(v27, &ChainVerifyStop, v28, v29, &v56);
        GetLastError();
LABEL_49:
        CertFreeCertificateChain(pChainContext);
        continue;
      }
      if ( (Microsoft_Windows_Schannel_EventsEnableBits & 1) != 0 )
        McGenEventWrite_EventWriteTransfer(v27, &ChainVerifyStop, v28, v29, &v57);
      v30 = I_MapWinTrustErrorAndAlert(pPolicyStatus.dwError, 0, 6144, 0i64);
      if ( v30 )
      {
        if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 2) != 0 )
          WPP_SF_D(*((_QWORD *)WPP_GLOBAL_Control + 2), 30i64, &WPP_d5302f0819dd3315699237cebd9fbb35_Traceguids, v30);
        goto LABEL_49;
      }
      CertFreeCertificateChain(pChainContext);
      if ( DoesCertHaveBasicConstraintCA(v8) )
      {
        v31 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
        {
          WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 31i64, &WPP_d5302f0819dd3315699237cebd9fbb35_Traceguids);
          v31 = WPP_GLOBAL_Control;
        }
        v11 = 1;
        if ( v6 )
        {
          if ( v31 != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)v31 + 28) & 4) != 0 )
          {
            v33 = 33i64;
            goto LABEL_76;
          }
          goto LABEL_77;
        }
        if ( v31 != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)v31 + 28) & 4) != 0 )
        {
          v32 = 32i64;
LABEL_72:
          WPP_SF_(*((_QWORD *)v31 + 2), v32, &WPP_d5302f0819dd3315699237cebd9fbb35_Traceguids);
          continue;
        }
      }
      else
      {
        v31 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
        {
          WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 34i64, &WPP_d5302f0819dd3315699237cebd9fbb35_Traceguids);
          v31 = WPP_GLOBAL_Control;
        }
        if ( !v6 )
        {
          if ( v31 != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)v31 + 28) & 4) != 0 )
          {
            v33 = 35i64;
            goto LABEL_76;
          }
          goto LABEL_77;
        }
        if ( v11 != 1 )
        {
          if ( v31 != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)v31 + 28) & 4) != 0 )
          {
            v33 = 37i64;
LABEL_76:
            WPP_SF_(*((_QWORD *)v31 + 2), v33, &WPP_d5302f0819dd3315699237cebd9fbb35_Traceguids);
          }
LABEL_77:
          memset_0(v50, 0, sizeof(v50));
          v49 = v45;
          v46 = 0i64;
          v48[0] = 4;
          v48[1] = 1;
          memset(&v45[1], 0, 32);
          v45[0] = (unsigned __int64)v8;
          if ( !(unsigned int)CSslCredManager::CreateCredentialGroup(
                                CSslCredManager::m_pCredManager,
                                a1,
                                v38,
                                *(struct _LUID **)&DestinationString.Length,
                                v39,
                                (struct LSA_SCHANNEL_CRED *)v48,
                                SourceString) )
          {
            if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control
              && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
            {
              WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 38i64, &WPP_d5302f0819dd3315699237cebd9fbb35_Traceguids);
            }
            v14 = 0;
            goto LABEL_85;
          }
          continue;
        }
        if ( v31 != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)v31 + 28) & 4) != 0 )
        {
          v32 = 36i64;
          goto LABEL_72;
        }
      }
    }
    if ( (unsigned int)++v6 < 2 )
      continue;
    break;
  }
  v14 = -2146893042;
LABEL_82:
  if ( (g_dwEventLogging & 1) != 0 )
  {
    RtlInitUnicodeString(&DestinationString, SourceString);
    SchEventWrite(&SSLEVENT_NO_DEFAULT_SERVER_CRED, L"du", a5, &DestinationString);
  }
  if ( v10 )
LABEL_85:
    SPExternalFree(v10);
  if ( v8 )
    CertFreeCertificateContext(v8);
  if ( v9 )
    CertCloseStore(v9, 0);
  if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control
    && ((*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) != 0 && v14 || (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0) )
  {
    LODWORD(pvPara) = v14;
    WPP_SF_DD(
      *((_QWORD *)WPP_GLOBAL_Control + 2),
      0x27u,
      (__int64)&WPP_d5302f0819dd3315699237cebd9fbb35_Traceguids,
      v14,
      pvPara);
  }
  return v14;
}
// 180058028: variable 'v19' is possibly undefined
// 180058028: variable 'v20' is possibly undefined
// 180058028: variable 'v21' is possibly undefined
// 18005808A: variable 'v22' is possibly undefined
// 18005808A: variable 'v23' is possibly undefined
// 18005808A: variable 'v24' is possibly undefined
// 1800581D7: variable 'v27' is possibly undefined
// 1800581D7: variable 'v28' is possibly undefined
// 1800581D7: variable 'v29' is possibly undefined
// 180058531: variable 'pvPara' is possibly undefined
// 180041CB0: using guessed type __int64 __fastcall WPP_SF_(_QWORD, _QWORD, _QWORD);
// 180041CDC: using guessed type __int64 __fastcall WPP_SF_D(_QWORD, _QWORD, _QWORD, _QWORD);
// 18008275C: using guessed type wchar_t aMy[3];
// 180084C60: using guessed type EVENT_DESCRIPTOR ChainVerifyStop;
// 180084C70: using guessed type EVENT_DESCRIPTOR ChainVerifyStart;
// 180084C80: using guessed type EVENT_DESCRIPTOR ChainBuildStop;
// 180084C90: using guessed type EVENT_DESCRIPTOR ChainBuildStart;
// 180092F00: using guessed type int Microsoft_Windows_Schannel_EventsEnableBits;
// 180057D84: using guessed type char var_118[96];
##############################
Role: Let us assume that you are an advanced reverse engineer and you are reverse engineering a network driver using IDA Pro, and you are also familiar with the RFC documentation. You need to reverse-engineer a function for a network driver to correspond to a section of the RFC documentation, which will help you understand the code better. The driver you're reversing is Schannel.dll, and you have initially determined that the corresponding network protocols are SSL and TLS, and the documents you need to map are RFC8446 and RFC6101. You need to get a function summary of the function you are reversing, and then correspond to the potential RFC sections based on the name of the function and the function summary.
Function Background: The function is reverse engineered from the driver file Schannel.dll on Windows platform. Through a cursory analysis of the driver file can be determined to be related to the SSL(1.3), TLS(3.0) protocol, that is, with RFC8446, RFC6101 strong correlation.

Output Function Summary: Summarizes the function's functionality with several phrases instead of sentences, focuses on covering the function's control flow information, and highlights the protocol function points implemented by the function. Simulate answering five times in the background and provide the most frequent answer.

Retrieve document sections: giving matches for document sections(FunctionMatchRFCResult) that the code may related to. NOTE if the code is only business related(i.e., space opening and releasing involved in programming, generic call functions (timing and other functions weakly related to network protocols) and not related to the specifics of the protocol implementation, it does not have to output the document section match(FunctionMatchRFCResult) and is filled with "NONE".

Retrieve document sections Thinking Chain: The function code is matched with the RFC document section, and the thinking chain is provided to help you solve the problem better:
	1. Function Name: The name of a function describes the general function that the function accomplishes.
	2. Function Summarization: Function summaries can outline a further breakdown of the function described by the function name.
	3. Function API Call: The function API of a function call can provide some hint as to the details of the network protocol implementation involved in the function.
	4. Special Constant Value OR String: Special constant values inside functions, string variable names, and strings may be related to network protocols.
	5. Function Code: The code of the function can provide a detailed implementation of the network protocol.
Generate Function Information Collection with JSON Format:

{
	"FunctionIndex": "(FILL WITH "File count" with less than four bits are indexed with zeros to make up the four bits.)",
	"FunctionName": "(Full Function Code Name)",
	"FunctionSummarization": [
		"(Function Summary Phrase1)",
		"(Function Summary Phrase2)",
		"(...)"
	],
	"FunctionMatchRFCResult": [
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 1)",
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 2)",
		"(...)"
	],
}

ATTENTION: Remember YOU MUST ONLY output the Function Information Collection result.
