Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 202
// Total lines: 414

//----- (000000018001118C) ----------------------------------------------------
__int64 __fastcall SpMapVersion3Certificate(void *a1, int a2, struct _SecBuffer *a3, struct LSA_SCHANNEL_CRED *a4)
{
  unsigned int v7; // ebx
  void *v8; // r12
  void *v9; // r15
  int v10; // r14d
  int v11; // ebx
  __int64 v12; // r15
  __int64 v13; // rax
  unsigned int v14; // r12d
  struct _SecBuffer *v15; // rbx
  unsigned int *pvBuffer; // rsi
  unsigned int cbBuffer; // r14d
  unsigned int *v18; // rbx
  int v19; // r13d
  int v20; // eax
  void *v21; // rcx
  unsigned int v23; // eax
  unsigned int v24; // eax
  _QWORD *v25; // rax
  HLOCAL v26; // rax
  unsigned int v27; // r15d
  __int64 v28; // r8
  __int64 v29; // rcx
  unsigned int *v30; // rdx
  __int64 ppvContext; // r9
  DWORD v32; // r8d
  int v33; // eax
  __int64 v34; // rcx
  int *v35; // r8
  HCERTSTORE v36; // r14
  const CERT_CONTEXT *i; // rdx
  DWORD v38; // eax
  const CERT_CONTEXT *v39; // rax
  const CERT_CONTEXT *v40; // rsi
  DWORD LastError; // eax
  __int64 v42; // rcx
  HCERTSTORE v43; // rax
  unsigned int v44; // ebx
  HLOCAL v45; // rax
  void *pvPara; // [rsp+28h] [rbp-A9h]
  HCERTSTORE hCertStore; // [rsp+48h] [rbp-89h]
  HLOCAL v48; // [rsp+50h] [rbp-81h]
  unsigned int v49; // [rsp+58h] [rbp-79h]
  struct _SecBuffer v50; // [rsp+60h] [rbp-71h] BYREF
  __int64 v51; // [rsp+70h] [rbp-61h]
  unsigned int v52; // [rsp+78h] [rbp-59h] BYREF
  int *v53; // [rsp+80h] [rbp-51h]
  char v54[4]; // [rsp+88h] [rbp-49h] BYREF
  unsigned int v55; // [rsp+8Ch] [rbp-45h]
  __int64 v56; // [rsp+90h] [rbp-41h]
  __int64 v57; // [rsp+98h] [rbp-39h]
  __int64 v58; // [rsp+A0h] [rbp-31h]
  unsigned int v59; // [rsp+B0h] [rbp-21h]
  __int64 v60; // [rsp+B8h] [rbp-19h]
  unsigned int v61; // [rsp+C0h] [rbp-11h]
  int v62; // [rsp+C4h] [rbp-Dh]
  struct _TLS_PARAMETERS *v63; // [rsp+C8h] [rbp-9h]
  __int64 v64; // [rsp+D0h] [rbp-1h]
  __int128 v65; // [rsp+D8h] [rbp+7h] BYREF
  __int64 v66; // [rsp+E8h] [rbp+17h]

  v48 = 0i64;
  hCertStore = 0i64;
  v7 = 80;
  v8 = 0i64;
  v9 = 0i64;
  memset_0(v54, 0, 0x50ui64);
  v65 = 0i64;
  v66 = 0i64;
  if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 0x20) != 0 )
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 10i64, &WPP_436d244ba9be3eb0a28121d2e8b5d9e1_Traceguids);
  if ( !LsaTable )
    return 2148074333i64;
  if ( !(*(unsigned __int8 (__fastcall **)(__int128 *))(LsaTable + 192))(&v65) )
    return 2148074244i64;
  v10 = BYTE8(v65) & 0x11;
  if ( a2 == 3 )
  {
    v11 = (*(__int64 (__fastcall **)(_QWORD, __int64, char *, void *))(LsaTable + 80))(0i64, 72i64, v54, a1);
    if ( v11 < 0 )
      goto LABEL_26;
    v64 = 0i64;
  }
  else
  {
    if ( a2 != 4 )
      v7 = 72;
    v11 = (*(__int64 (__fastcall **)(_QWORD, _QWORD, char *, void *))(LsaTable + 80))(0i64, v7, v54, a1);
    if ( v11 < 0 )
      goto LABEL_26;
  }
  memset_0((char *)a4 + 4, 0, 0x6Cui64);
  *(_DWORD *)a4 = a2;
  if ( a2 == 4 )
  {
    v12 = v56;
    v13 = v57;
    v14 = v55;
  }
  else
  {
    v12 = v57;
    v13 = v58;
    v14 = v56;
  }
  v51 = v13;
  if ( v14 > 0x64 )
  {
    v9 = 0i64;
    v11 = -2146893056;
    v8 = 0i64;
    goto LABEL_26;
  }
  v15 = a3;
  pvBuffer = (unsigned int *)a3->pvBuffer;
  if ( pvBuffer )
    goto LABEL_64;
  if ( v14 && v12 || (pvBuffer = 0i64, v13) )
  {
    if ( !v10 )
    {
      if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
        WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 12i64, &WPP_436d244ba9be3eb0a28121d2e8b5d9e1_Traceguids);
      v9 = 0i64;
      v11 = 590610;
      v8 = 0i64;
      goto LABEL_26;
    }
    v50.cbBuffer = 8;
    v50.BufferType = 1;
    v25 = SPExternalAlloc(8u);
    v50.pvBuffer = v25;
    if ( !v25 )
    {
      v11 = -2146893056;
LABEL_59:
      v9 = 0i64;
      v8 = 0i64;
      goto LABEL_26;
    }
    *v25 = a1;
    v11 = PerformApplicationCallback(10i64, 0i64, 0i64, &v50, a3, 1, 0, 1);
    if ( v50.pvBuffer )
      SPExternalFree(v50.pvBuffer);
    if ( v11 < 0 )
      goto LABEL_59;
    v15 = a3;
    pvBuffer = (unsigned int *)a3->pvBuffer;
    if ( !pvBuffer )
    {
      v11 = -2146893052;
      goto LABEL_59;
    }
LABEL_64:
    cbBuffer = v15->cbBuffer;
    goto LABEL_17;
  }
  cbBuffer = 0;
LABEL_17:
  v18 = pvBuffer;
  if ( v14 && v12 )
  {
    v48 = SPExternalAlloc(8 * v14);
    if ( !v48 )
    {
      v9 = 0i64;
      v11 = -2146893056;
      v8 = 0i64;
      goto LABEL_26;
    }
    v11 = (*(__int64 (__fastcall **)(_QWORD, _QWORD, HLOCAL, __int64))(LsaTable + 80))(0i64, 8 * v14, v48, v12);
    if ( v11 < 0 )
      goto LABEL_72;
    *((_DWORD *)a4 + 1) = v14;
    v26 = SPExternalAlloc(56 * v14);
    *((_QWORD *)a4 + 1) = v26;
    if ( !v26 )
    {
      v11 = -2146893056;
LABEL_72:
      v9 = hCertStore;
LABEL_74:
      v8 = v48;
      goto LABEL_26;
    }
    hCertStore = CertOpenStore((LPCSTR)2, 0, 0i64, 4u, 0i64);
    v9 = hCertStore;
    if ( !hCertStore )
    {
      GetLastError();
      v11 = -2146893056;
      goto LABEL_74;
    }
    v27 = 0;
    v28 = 0i64;
    *(_QWORD *)&v50.cbBuffer = 0i64;
    v18 = pvBuffer;
    while ( 1 )
    {
      v29 = *v18;
      v30 = v18 + 1;
      cbBuffer += -4 - v29;
      v18 = (unsigned int *)((char *)v18 + v29 + 4);
      if ( !v30 )
        break;
      if ( (unsigned int)v29 < 0xC )
        break;
      ppvContext = v28 + *((_QWORD *)a4 + 1);
      *(_QWORD *)(ppvContext + 16) = *(_QWORD *)v30;
      v32 = v30[2];
      if ( (int)v29 - 12 < v32 )
        break;
      if ( !CertAddSerializedElementToStore(
              hCertStore,
              (const BYTE *)v30 + 12,
              v32,
              4u,
              0,
              2u,
              0i64,
              (const void **)ppvContext) )
        goto LABEL_99;
      v33 = HIDWORD(v60);
      if ( a2 == 4 )
        v33 = v64;
      if ( (v33 & 0x10000) != 0 )
      {
        if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
          WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 13i64, &WPP_436d244ba9be3eb0a28121d2e8b5d9e1_Traceguids);
        v34 = *v18;
        v35 = (int *)(v18 + 1);
        v18 = (unsigned int *)((char *)v18 + v34 + 4);
        v49 = -4 - v34 + cbBuffer;
        if ( v35 )
        {
          if ( (unsigned int)v34 >= 4 )
          {
            v52 = *v35;
            v53 = v35 + 1;
            if ( v34 - 4 >= (unsigned __int64)v52 )
            {
              v36 = CertOpenStore((LPCSTR)6, 1u, 0i64, 0, &v52);
              if ( !v36 )
                goto LABEL_109;
              for ( i = 0i64; ; i = v40 )
              {
                v39 = CertEnumCertificatesInStore(v36, i);
                v40 = v39;
                if ( !v39 )
                {
                  if ( !CertCloseStore(v36, 2u)
                    && WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control
                    && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 2) != 0 )
                  {
                    LastError = GetLastError();
                    WPP_SF_D(
                      *((_QWORD *)WPP_GLOBAL_Control + 2),
                      15i64,
                      &WPP_436d244ba9be3eb0a28121d2e8b5d9e1_Traceguids,
                      LastError);
                  }
                  cbBuffer = v49;
                  goto LABEL_107;
                }
                if ( !CertAddCertificateContextToStore(hCertStore, v39, 1u, 0i64) && GetLastError() != -2146885627 )
                  break;
              }
              if ( !CertCloseStore(v36, 2u)
                && WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control
                && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 2) != 0 )
              {
                v38 = GetLastError();
                WPP_SF_D(
                  *((_QWORD *)WPP_GLOBAL_Control + 2),
                  14i64,
                  &WPP_436d244ba9be3eb0a28121d2e8b5d9e1_Traceguids,
                  v38);
              }
              CertFreeCertificateContext(v40);
LABEL_99:
              v11 = -2146893043;
              goto LABEL_72;
            }
          }
        }
        goto LABEL_110;
      }
LABEL_107:
      ++v27;
      v28 = *(_QWORD *)&v50.cbBuffer + 56i64;
      *(_QWORD *)&v50.cbBuffer += 56i64;
      if ( v27 >= v14 )
        goto LABEL_18;
    }
LABEL_71:
    v11 = -2146893052;
    goto LABEL_72;
  }
LABEL_18:
  if ( v51 )
  {
    v42 = *v18;
    if ( v18 == (unsigned int *)-4i64 || (unsigned int)v42 < 4 )
      goto LABEL_71;
    v52 = v18[1];
    v53 = (int *)(v18 + 2);
    if ( v42 - 4 < (unsigned __int64)v52 )
    {
LABEL_110:
      v11 = -2146893052;
      goto LABEL_25;
    }
    if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
      WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 16i64, &WPP_436d244ba9be3eb0a28121d2e8b5d9e1_Traceguids);
    v43 = CertOpenStore((LPCSTR)6, 1u, 0i64, 0, &v52);
    *((_QWORD *)a4 + 2) = v43;
    if ( !v43 )
    {
      if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) != 0 )
        WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 17i64, &WPP_436d244ba9be3eb0a28121d2e8b5d9e1_Traceguids);
LABEL_109:
      v11 = -2146893043;
      goto LABEL_25;
    }
    if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
      WPP_SF_q(
        *((_QWORD *)WPP_GLOBAL_Control + 2),
        0x12u,
        (__int64)&WPP_436d244ba9be3eb0a28121d2e8b5d9e1_Traceguids,
        v43);
  }
  v19 = a2 - 4;
  if ( v19 )
  {
    if ( v19 != 1 )
    {
LABEL_24:
      v11 = 0;
      goto LABEL_25;
    }
    v11 = CopyTlsParameters(v63, v61, 0, 1, (struct _TLS_PARAMETERS **)a4 + 13, (unsigned int *)a4 + 24);
    if ( !v11 )
    {
      *(_QWORD *)((char *)a4 + 84) = v60;
      v20 = v55;
LABEL_23:
      *((_DWORD *)a4 + 23) = v20;
      goto LABEL_24;
    }
  }
  else
  {
    v23 = v59;
    if ( !v59 || !v60 )
      goto LABEL_41;
    if ( v59 > 0x100
      || (v44 = 4 * v59, *((_DWORD *)a4 + 14) = v59, v45 = SPExternalAlloc(4 * v23), (*((_QWORD *)a4 + 8) = v45) == 0i64) )
    {
      v11 = -2146893056;
      goto LABEL_25;
    }
    v11 = (*(__int64 (__fastcall **)(_QWORD, _QWORD, HLOCAL, __int64))(LsaTable + 80))(0i64, v44, v45, v60);
    if ( v11 >= 0 )
    {
LABEL_41:
      v24 = v61;
      if ( v61 == -1 )
        v24 = 0;
      *((_DWORD *)a4 + 18) = v24 & 0x3FFFFFFF;
      *((_DWORD *)a4 + 19) = v62;
      *((_QWORD *)a4 + 10) = v63;
      *((_DWORD *)a4 + 22) = v64;
      v20 = HIDWORD(v64);
      goto LABEL_23;
    }
  }
LABEL_25:
  v9 = hCertStore;
  v8 = v48;
LABEL_26:
  if ( a3 )
  {
    v21 = a3->pvBuffer;
    if ( v21 && (BYTE8(v65) & 0x10) != 0 )
      SPExternalFree(v21);
    a3->pvBuffer = 0i64;
    *(_QWORD *)&a3->cbBuffer = 0i64;
    CleanupAppModeInfo(0i64);
  }
  if ( v8 )
    SPExternalFree(v8);
  if ( v9 )
    CertCloseStore(v9, 0);
  if ( v11 < 0 )
    FreeSchannelCred(a4, 1);
  if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control
    && ((*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) != 0 && v11 || (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0) )
  {
    LODWORD(pvPara) = v11;
    WPP_SF_DD(
      *((_QWORD *)WPP_GLOBAL_Control + 2),
      0x13u,
      (__int64)&WPP_436d244ba9be3eb0a28121d2e8b5d9e1_Traceguids,
      v11,
      pvPara);
  }
  return (unsigned int)v11;
}
// 18003A716: variable 'pvPara' is possibly undefined
// 180041CB0: using guessed type __int64 __fastcall WPP_SF_(_QWORD, _QWORD, _QWORD);
// 180041CDC: using guessed type __int64 __fastcall WPP_SF_D(_QWORD, _QWORD, _QWORD, _QWORD);
// 180092620: using guessed type __int64 LsaTable;
##############################
Role: Let us assume that you are an advanced reverse engineer and you are reverse engineering a network driver using IDA Pro, and you are also familiar with the RFC documentation. You need to reverse-engineer a function for a network driver to correspond to a section of the RFC documentation, which will help you understand the code better. The driver you're reversing is Schannel.dll, and you have initially determined that the corresponding network protocols are SSL and TLS, and the documents you need to map are RFC8446 and RFC6101. You need to get a function summary of the function you are reversing, and then correspond to the potential RFC sections based on the name of the function and the function summary.
Function Background: The function is reverse engineered from the driver file Schannel.dll on Windows platform. Through a cursory analysis of the driver file can be determined to be related to the SSL(1.3), TLS(3.0) protocol, that is, with RFC8446, RFC6101 strong correlation.

Output Function Summary: Summarizes the function's functionality with several phrases instead of sentences, focuses on covering the function's control flow information, and highlights the protocol function points implemented by the function. Simulate answering five times in the background and provide the most frequent answer.

Retrieve document sections: giving matches for document sections(FunctionMatchRFCResult) that the code may related to. NOTE if the code is only business related(i.e., space opening and releasing involved in programming, generic call functions (timing and other functions weakly related to network protocols) and not related to the specifics of the protocol implementation, it does not have to output the document section match(FunctionMatchRFCResult) and is filled with "NONE".

Retrieve document sections Thinking Chain: The function code is matched with the RFC document section, and the thinking chain is provided to help you solve the problem better:
	1. Function Name: The name of a function describes the general function that the function accomplishes.
	2. Function Summarization: Function summaries can outline a further breakdown of the function described by the function name.
	3. Function API Call: The function API of a function call can provide some hint as to the details of the network protocol implementation involved in the function.
	4. Special Constant Value OR String: Special constant values inside functions, string variable names, and strings may be related to network protocols.
	5. Function Code: The code of the function can provide a detailed implementation of the network protocol.
Generate Function Information Collection with JSON Format:

{
	"FunctionIndex": "(FILL WITH "File count" with less than four bits are indexed with zeros to make up the four bits.)",
	"FunctionName": "(Full Function Code Name)",
	"FunctionSummarization": [
		"(Function Summary Phrase1)",
		"(Function Summary Phrase2)",
		"(...)"
	],
	"FunctionMatchRFCResult": [
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 1)",
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 2)",
		"(...)"
	],
}

ATTENTION: Remember YOU MUST ONLY output the Function Information Collection result.
