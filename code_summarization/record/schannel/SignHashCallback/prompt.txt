Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 975
// Total lines: 354

//----- (00000001800517A0) ----------------------------------------------------
__int64 __fastcall SignHashCallback(NCRYPT_HANDLE a1, __int64 a2, __int64 a3, __int64 a4)
{
  unsigned int v4; // r14d
  unsigned int v7; // esi
  __int64 v8; // r13
  CCipherMill *v9; // rcx
  unsigned int v10; // r14d
  unsigned int *v11; // rdx
  __int64 v13; // r9
  DWORD v14; // r8d
  DWORD v15; // ebx
  __int64 v16; // rsi
  __int64 v17; // r12
  __int64 v18; // r15
  unsigned int v19; // eax
  unsigned int v20; // edx
  unsigned int v21; // eax
  DWORD v22; // ebx
  const wchar_t *v23; // r9
  DWORD v24; // r12d
  BYTE *v25; // r14
  __int64 *v26; // rsi
  DWORD v27; // r15d
  NCRYPT_KEY_HANDLE v28; // r13
  unsigned int v29; // eax
  BYTE *pbSignature; // rax
  CCipherMill *v31; // rcx
  __int64 v32; // rdx
  __int64 v33; // r9
  HCRYPTPROV v34; // r13
  DWORD LastError; // eax
  DWORD v36; // eax
  DWORD v37; // esi
  BYTE *v38; // rax
  void *v39; // rcx
  DWORD cbSignature; // [rsp+28h] [rbp-58h]
  DWORD dwKeySpec; // [rsp+40h] [rbp-40h] BYREF
  HCRYPTHASH phHash; // [rsp+48h] [rbp-38h] BYREF
  DWORD dwFlags; // [rsp+50h] [rbp-30h]
  __int64 v44; // [rsp+58h] [rbp-28h] BYREF
  BYTE pbInput[8]; // [rsp+60h] [rbp-20h] BYREF
  DWORD cbHashValue; // [rsp+68h] [rbp-18h]
  ALG_ID Algid; // [rsp+6Ch] [rbp-14h]
  __int128 v48; // [rsp+70h] [rbp-10h] BYREF

  v4 = a1;
  phHash = 0i64;
  v7 = a2;
  v8 = 0i64;
  if ( (unsigned int)SchannelInit(1) && a3 && a4 )
  {
    *(_QWORD *)a4 = 0i64;
    *(_QWORD *)(a4 + 8) = 0i64;
    v9 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control )
    {
      if ( (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
      {
        WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 10i64, &WPP_e7a188b1921532aa285b79366435dd9d_Traceguids);
        v9 = WPP_GLOBAL_Control;
      }
      if ( v9 != (CCipherMill *)&WPP_GLOBAL_Control )
      {
        if ( (*((_BYTE *)v9 + 28) & 4) != 0 )
        {
          WPP_SF_D(*((_QWORD *)v9 + 2), 11i64, &WPP_e7a188b1921532aa285b79366435dd9d_Traceguids, v4);
          v9 = WPP_GLOBAL_Control;
        }
        if ( v9 != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)v9 + 28) & 4) != 0 )
        {
          WPP_SF_D(*((_QWORD *)v9 + 2), 12i64, &WPP_e7a188b1921532aa285b79366435dd9d_Traceguids, v7);
          v9 = WPP_GLOBAL_Control;
        }
      }
    }
    v10 = *(_DWORD *)a3;
    v11 = *(unsigned int **)(a3 + 8);
    if ( *(_DWORD *)a3 < 0x24u )
      return 2148074264i64;
    v13 = *v11;
    v14 = v11[2];
    dwFlags = v11[1];
    *(_QWORD *)pbInput = *(_QWORD *)(v11 + 3);
    v15 = v11[8];
    v16 = v11[6];
    v17 = v11[7];
    LODWORD(v44) = v11[5];
    *(_QWORD *)&v48 = v11 + 9;
    v18 = (__int64)(v11 + 9);
    Algid = v13;
    dwKeySpec = v14;
    cbHashValue = v15;
    if ( v9 != (CCipherMill *)&WPP_GLOBAL_Control )
    {
      if ( (*((_BYTE *)v9 + 28) & 4) != 0 )
      {
        WPP_SF_D(*((_QWORD *)v9 + 2), 13i64, &WPP_e7a188b1921532aa285b79366435dd9d_Traceguids, v13);
        v9 = WPP_GLOBAL_Control;
        v14 = dwKeySpec;
      }
      if ( v9 != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)v9 + 28) & 4) != 0 )
      {
        WPP_SF_D(*((_QWORD *)v9 + 2), 14i64, &WPP_e7a188b1921532aa285b79366435dd9d_Traceguids, v14);
        v9 = WPP_GLOBAL_Control;
      }
    }
    v19 = v16 + 24;
    if ( (unsigned int)v16 >= 0xFFFFFFE8 )
      return 534i64;
    v20 = v19 + v17;
    if ( v19 + (unsigned int)v17 < v19 )
      return 534i64;
    v21 = v20 + v15;
    if ( v20 + v15 < v20 )
      return 534i64;
    v22 = 0;
    if ( v10 >= v21 )
    {
      if ( (_DWORD)v16 )
        v18 += v16;
      v23 = (const wchar_t *)(v48 & -(__int64)((_DWORD)v16 != 0));
      if ( !(_DWORD)v17 )
      {
LABEL_30:
        v24 = cbHashValue;
        v25 = (BYTE *)(v18 & -(__int64)(cbHashValue != 0));
        if ( a2 )
        {
          dwKeySpec = 0;
          v44 = 0i64;
          v26 = 0i64;
          v48 = 0i64;
          if ( v23 && v25 )
          {
            v27 = dwFlags;
            if ( wcsncmp(v23, L"RSA", 3ui64) )
              goto LABEL_38;
            if ( dwFlags == 8 )
            {
              v26 = (__int64 *)&v48;
              *(_QWORD *)&v48 = v8;
              DWORD2(v48) = cbHashValue;
              goto LABEL_38;
            }
            if ( dwFlags == 2 )
            {
              v26 = &v44;
              v44 = v8;
LABEL_38:
              if ( *(_QWORD *)pbInput )
              {
                if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control
                  && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
                {
                  WPP_SF_q(
                    *((_QWORD *)WPP_GLOBAL_Control + 2),
                    0xFu,
                    (__int64)&WPP_e7a188b1921532aa285b79366435dd9d_Traceguids);
                }
                v28 = a1;
                v29 = NCryptSetProperty(a1, L"HWND Handle", pbInput, 8u, 0);
                if ( v29
                  && WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control
                  && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) != 0 )
                {
                  WPP_SF_D(
                    *((_QWORD *)WPP_GLOBAL_Control + 2),
                    16i64,
                    &WPP_e7a188b1921532aa285b79366435dd9d_Traceguids,
                    v29);
                }
              }
              else
              {
                v28 = a1;
              }
              v22 = NCryptSignHash(v28, v26, v25, v24, 0i64, dwKeySpec, &dwKeySpec, dwFlags);
              if ( v22 )
              {
                if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control
                  && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) != 0 )
                {
                  WPP_SF_D(
                    *((_QWORD *)WPP_GLOBAL_Control + 2),
                    17i64,
                    &WPP_e7a188b1921532aa285b79366435dd9d_Traceguids,
                    v22);
                }
                return v22;
              }
              pbSignature = (BYTE *)SPExternalAlloc(dwKeySpec);
              *(_QWORD *)(a4 + 8) = pbSignature;
              if ( !pbSignature )
                return 14i64;
              cbSignature = dwKeySpec;
              *(_DWORD *)a4 = dwKeySpec;
              v22 = NCryptSignHash(v28, v26, v25, v24, pbSignature, cbSignature, &dwKeySpec, v27);
              if ( v22 )
              {
                v31 = WPP_GLOBAL_Control;
                if ( WPP_GLOBAL_Control == (CCipherMill *)&WPP_GLOBAL_Control
                  || (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) == 0 )
                {
                  goto LABEL_99;
                }
                v32 = 18i64;
                goto LABEL_58;
              }
LABEL_96:
              *(_DWORD *)(a4 + 4) = 1;
              if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control
                && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
              {
                WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 27i64, &WPP_e7a188b1921532aa285b79366435dd9d_Traceguids);
              }
              goto LABEL_99;
            }
          }
          return 1359i64;
        }
        if ( v9 != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)v9 + 28) & 4) != 0 )
        {
          WPP_SF_(*((_QWORD *)v9 + 2), 19i64, &WPP_e7a188b1921532aa285b79366435dd9d_Traceguids);
          v9 = WPP_GLOBAL_Control;
        }
        if ( *(_QWORD *)pbInput )
        {
          if ( v9 != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)v9 + 28) & 4) != 0 )
            WPP_SF_q(*((_QWORD *)v9 + 2), 0x14u, (__int64)&WPP_e7a188b1921532aa285b79366435dd9d_Traceguids);
          v34 = a1;
          if ( !CryptSetProvParam(a1, 1u, pbInput, 0)
            && WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control
            && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) != 0 )
          {
            LastError = GetLastError();
            WPP_SF_D(
              *((_QWORD *)WPP_GLOBAL_Control + 2),
              21i64,
              &WPP_e7a188b1921532aa285b79366435dd9d_Traceguids,
              LastError);
          }
        }
        else
        {
          v34 = a1;
        }
        if ( !CryptCreateHash(v34, Algid, 0i64, 0, &phHash) )
        {
          v36 = GetLastError();
          v22 = v36;
          v31 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control == (CCipherMill *)&WPP_GLOBAL_Control
            || (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) == 0 )
          {
            goto LABEL_99;
          }
          v32 = 22i64;
          goto LABEL_76;
        }
        if ( (_DWORD)v44 )
        {
          if ( !CryptHashData(phHash, v25, v24, 0) )
          {
            v36 = GetLastError();
            v22 = v36;
            v31 = WPP_GLOBAL_Control;
            if ( WPP_GLOBAL_Control == (CCipherMill *)&WPP_GLOBAL_Control
              || (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) == 0 )
            {
              goto LABEL_99;
            }
            v32 = 24i64;
LABEL_76:
            v33 = v36;
            goto LABEL_59;
          }
        }
        else if ( !CryptSetHashParam(phHash, 2u, v25, 0) )
        {
          v36 = GetLastError();
          v22 = v36;
          v31 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control == (CCipherMill *)&WPP_GLOBAL_Control
            || (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) == 0 )
          {
            goto LABEL_99;
          }
          v32 = 23i64;
          goto LABEL_76;
        }
        v37 = dwKeySpec;
        if ( CryptSignHashW(phHash, dwKeySpec, 0i64, 0, 0i64, (DWORD *)a4) )
        {
          v38 = (BYTE *)SPExternalAlloc(*(_DWORD *)a4);
          *(_QWORD *)(a4 + 8) = v38;
          if ( !v38 )
          {
            v22 = 14;
            goto LABEL_99;
          }
          if ( CryptSignHashW(phHash, v37, 0i64, 0, v38, (DWORD *)a4) )
            goto LABEL_96;
          v22 = GetLastError();
          v31 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control == (CCipherMill *)&WPP_GLOBAL_Control
            || (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) == 0 )
          {
            goto LABEL_99;
          }
          v32 = 26i64;
        }
        else
        {
          v22 = GetLastError();
          v31 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control == (CCipherMill *)&WPP_GLOBAL_Control
            || (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) == 0 )
          {
            goto LABEL_99;
          }
          v32 = 25i64;
        }
LABEL_58:
        v33 = v22;
LABEL_59:
        WPP_SF_D(*((_QWORD *)v31 + 2), v32, &WPP_e7a188b1921532aa285b79366435dd9d_Traceguids, v33);
LABEL_99:
        if ( phHash )
          CryptDestroyHash(phHash);
        if ( v22 )
        {
          v39 = *(void **)(a4 + 8);
          if ( v39 )
          {
            SPExternalFree(v39);
            *(_QWORD *)(a4 + 8) = 0i64;
          }
          *(_DWORD *)a4 = 0;
        }
        return v22;
      }
      if ( (v16 & 1) == 0 )
      {
        v8 = v18;
        v18 += v17;
        goto LABEL_30;
      }
    }
  }
  return 1359i64;
}
// 180041CB0: using guessed type __int64 __fastcall WPP_SF_(_QWORD, _QWORD, _QWORD);
// 180041CDC: using guessed type __int64 __fastcall WPP_SF_D(_QWORD, _QWORD, _QWORD, _QWORD);
##############################
Role: Let us assume that you are an advanced reverse engineer and you are reverse engineering a network driver using IDA Pro, and you are also familiar with the RFC documentation. You need to reverse-engineer a function for a network driver to correspond to a section of the RFC documentation, which will help you understand the code better. The driver you're reversing is Schannel.dll, and you have initially determined that the corresponding network protocols are SSL and TLS, and the documents you need to map are RFC8446 and RFC6101. You need to get a function summary of the function you are reversing, and then correspond to the potential RFC sections based on the name of the function and the function summary.
Function Background: The function is reverse engineered from the driver file Schannel.dll on Windows platform. Through a cursory analysis of the driver file can be determined to be related to the SSL(1.3), TLS(3.0) protocol, that is, with RFC8446, RFC6101 strong correlation.

Output Function Summary: Summarizes the function's functionality with several phrases instead of sentences, focuses on covering the function's control flow information, and highlights the protocol function points implemented by the function. Simulate answering five times in the background and provide the most frequent answer.

Retrieve document sections: giving matches for document sections(FunctionMatchRFCResult) that the code may related to. NOTE if the code is only business related(i.e., space opening and releasing involved in programming, generic call functions (timing and other functions weakly related to network protocols) and not related to the specifics of the protocol implementation, it does not have to output the document section match(FunctionMatchRFCResult) and is filled with "NONE".

Retrieve document sections Thinking Chain: The function code is matched with the RFC document section, and the thinking chain is provided to help you solve the problem better:
	1. Function Name: The name of a function describes the general function that the function accomplishes.
	2. Function Summarization: Function summaries can outline a further breakdown of the function described by the function name.
	3. Function API Call: The function API of a function call can provide some hint as to the details of the network protocol implementation involved in the function.
	4. Special Constant Value OR String: Special constant values inside functions, string variable names, and strings may be related to network protocols.
	5. Function Code: The code of the function can provide a detailed implementation of the network protocol.
Generate Function Information Collection with JSON Format:

{
	"FunctionIndex": "(FILL WITH "File count" with less than four bits are indexed with zeros to make up the four bits.)",
	"FunctionName": "(Full Function Code Name)",
	"FunctionSummarization": [
		"(Function Summary Phrase1)",
		"(Function Summary Phrase2)",
		"(...)"
	],
	"FunctionMatchRFCResult": [
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 1)",
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 2)",
		"(...)"
	],
}

ATTENTION: Remember YOU MUST ONLY output the Function Information Collection result.
