Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 1458
// Total lines: 376

//----- (00000001800745B4) ----------------------------------------------------
__int64 __fastcall CSsl3TlsClientContext::DhGenerateClientExchangeValue(
        CSsl3TlsClientContext *this,
        unsigned __int8 *a2,
        int a3,
        unsigned __int8 *a4,
        unsigned int *a5)
{
  char *v7; // rsi
  __int64 v8; // rax
  enum _eTlsHashAlgorithm v9; // r10d
  bool v10; // zf
  int v11; // r14d
  unsigned __int8 *v12; // r15
  int v13; // r12d
  unsigned int v14; // edx
  unsigned __int8 *v15; // r8
  unsigned __int8 *v16; // r9
  unsigned int v17; // r8d
  unsigned __int8 *v18; // r13
  unsigned int v20; // r8d
  int v21; // edx
  __int16 v22; // dx
  __int16 v23; // ax
  unsigned int *v24; // r9
  unsigned __int8 v25; // r9
  unsigned int cbEncoded; // edx
  int v27; // r14d
  unsigned int EphemKey; // edi
  __int64 v29; // rax
  unsigned int v30; // edx
  __int64 v31; // rcx
  unsigned __int8 v32; // r9
  __int64 v33; // r14
  __int64 v34; // rcx
  unsigned int v35; // edi
  unsigned int v36; // edx
  __int64 *v37; // rax
  __int64 v38; // rcx
  int EphemBlobFromKey; // eax
  unsigned int *v40; // r15
  int v41; // edx
  unsigned int v42; // edx
  unsigned __int64 v43; // rcx
  unsigned __int64 v44; // rax
  void *v45; // rsp
  size_t v46; // r13
  unsigned int v47; // ecx
  char *v48; // rax
  __int64 v49; // rdi
  unsigned int v50; // r12d
  _QWORD *v51; // rcx
  size_t v52; // rdx
  unsigned int v53; // eax
  unsigned __int8 *v54; // rcx
  unsigned int EccDhPskSessionKeysHelper; // eax
  __int64 v56; // [rsp+0h] [rbp-50h] BYREF
  unsigned int v57; // [rsp+50h] [rbp+0h] BYREF
  __int16 v58; // [rsp+54h] [rbp+4h]
  enum _eTlsSignatureAlgorithm v59; // [rsp+58h] [rbp+8h] BYREF
  enum _eTlsHashAlgorithm v60; // [rsp+5Ch] [rbp+Ch] BYREF
  unsigned int v61; // [rsp+60h] [rbp+10h]
  ULONG v62; // [rsp+64h] [rbp+14h] BYREF
  unsigned int v63; // [rsp+68h] [rbp+18h] BYREF
  unsigned __int64 v64; // [rsp+70h] [rbp+20h] BYREF
  unsigned __int64 v65; // [rsp+78h] [rbp+28h] BYREF
  unsigned int v66; // [rsp+80h] [rbp+30h]
  _DWORD Size[3]; // [rsp+84h] [rbp+34h] BYREF
  void *Src; // [rsp+90h] [rbp+40h] BYREF
  unsigned __int8 *v69; // [rsp+98h] [rbp+48h]
  unsigned __int8 *v70; // [rsp+A0h] [rbp+50h]
  unsigned __int8 *v71; // [rsp+A8h] [rbp+58h]
  void *v72; // [rsp+B0h] [rbp+60h]

  v69 = a4;
  v64 = 0i64;
  v63 = 0;
  v7 = 0i64;
  v8 = *((_QWORD *)this + 1);
  v9 = TlsHashAlgorithm_None;
  v65 = 0i64;
  Src = 0i64;
  *(_QWORD *)&Size[1] = 0i64;
  v10 = *(_DWORD *)(v8 + 52) == 2;
  v60 = TlsHashAlgorithm_None;
  v62 = 0;
  if ( v10 )
  {
    v11 = 1;
  }
  else
  {
    if ( *(_DWORD *)(v8 + 52) != 3 )
      return 2148074248i64;
    v11 = 2;
  }
  if ( a2 )
  {
    v12 = &a2[a3];
    v71 = a2 + 2;
    if ( a2 + 2 > v12 )
      goto LABEL_91;
    v13 = a2[1] | (*a2 << 8);
    v14 = v13 + 2;
    v15 = &a2[v13 + 2];
    v70 = v15 + 2;
    if ( v15 + 2 > v12 )
      goto LABEL_91;
    v66 = v15[1] | (*v15 << 8);
    v16 = &v15[v66 + 2];
    if ( v16 + 2 > v12 )
      goto LABEL_91;
    v17 = v16[1] | (*v16 << 8);
    Size[0] = v17;
    v72 = v16 + 2;
    v18 = &v16[v17 + 2];
    if ( v18 + 2 > v12 || v17 + 2 < v17 )
      goto LABEL_91;
    if ( !v69 )
    {
      *a5 = v14;
      return 0i64;
    }
    if ( *a5 < v14 )
      return 122i64;
    v20 = (_DWORD)v18 - (_DWORD)a2;
    v10 = (*((_DWORD *)this + 16) & 0x80800) == 0;
    v61 = (_DWORD)v18 - (_DWORD)a2;
    if ( !v10 )
    {
      if ( v18 + 4 > v12 )
      {
        v21 = 822;
LABEL_92:
        v25 = 50;
        goto LABEL_93;
      }
      v22 = v18[1];
      v23 = *v18;
      v18 += 2;
      v58 = v23 | (v22 << 8);
      if ( !CTlsSignatureSuiteList::IsSupportedCodePoint((CSsl3TlsClientContext *)((char *)this + 474), v58) )
      {
        v25 = 47;
LABEL_20:
        v21 = 822;
LABEL_93:
        EphemKey = -2146893048;
        goto LABEL_94;
      }
      v59 = TlsSignatureAlgorithm_Anonymous;
      GetSignatureSuiteInfoByCodePoint(v58, &v59, &v60, v24, (const unsigned __int16 **)&Size[1], 0i64, &v62);
      if ( v59 != v11 || (v9 = v60, v59 == TlsSignatureAlgorithm_Dsa) && v60 != TlsHashAlgorithm_Sha1 )
      {
        v25 = 40;
        goto LABEL_20;
      }
      v20 = v61;
    }
    cbEncoded = v18[1] | (*v18 << 8);
    if ( &v18[cbEncoded + 2] != v12 )
    {
LABEL_91:
      v21 = 807;
      goto LABEL_92;
    }
    v27 = v11 - 1;
    if ( !v27 )
    {
      EphemKey = VerifyRsaParams(
                   (UCHAR *)this,
                   a2,
                   v20,
                   *(const unsigned __int16 **)&Size[1],
                   v9,
                   v62,
                   v18 + 2,
                   cbEncoded);
      if ( EphemKey )
      {
        v25 = 51;
        v21 = 802;
        goto LABEL_94;
      }
LABEL_33:
      if ( (*((_BYTE *)this + 32) & 1) != 0 && (v29 = *((_QWORD *)this + 1)) != 0 )
      {
        v30 = *(_DWORD *)(v29 + 28);
      }
      else
      {
        v29 = *((_QWORD *)this + 1);
        v30 = 0;
        if ( !v29 )
        {
          v31 = 0i64;
LABEL_39:
          EphemKey = DhGetEphemKey(v31, v30, *((unsigned __int16 *)this + 17), v13, v71, v66, v70, &v65, &v63);
          if ( EphemKey )
          {
            v32 = 51;
            if ( EphemKey == 87 )
              v32 = 40;
            CSslContext::SetErrorAndFatalAlert((__int64)this, 808, EphemKey, v32);
            goto LABEL_43;
          }
          v34 = *((_QWORD *)this + 10);
          v35 = v63;
          v36 = *(_DWORD *)(v34 + 196);
          if ( v36 && IsDheAlgorithmBlacklisted(*(struct _TLS_PARAMETERS **)(v34 + 200), v36, v63, 0i64, 1u) )
          {
            CSslContext::SetErrorAndFatalAlert((__int64)this, 808, 0, 0x28u);
            EphemKey = 87;
LABEL_43:
            v33 = v65;
LABEL_87:
            if ( v33 )
              SslFreeObject(v33, 0i64);
            if ( v64 )
              SslFreeObject(v64, 0i64);
            return EphemKey;
          }
          *(_DWORD *)(*((_QWORD *)this + 165) + 8i64) = v35;
          v37 = (__int64 *)*((_QWORD *)this + 1);
          if ( v37 )
            v38 = *v37;
          else
            v38 = 0i64;
          v33 = v65;
          EphemBlobFromKey = GetEphemBlobFromKey(v38, v65, L"DHPUBLICBLOB", &v57, (unsigned __int8 **)&Src);
          v40 = (unsigned int *)Src;
          EphemKey = EphemBlobFromKey;
          if ( EphemBlobFromKey )
          {
            v41 = 809;
            goto LABEL_52;
          }
          v42 = v57;
          if ( v57 )
          {
            if ( v57 <= (unsigned __int64)g_ulMaxStackAllocSize )
            {
              v43 = v57 + g_ulAdditionalProbeSize + 8;
              if ( v43 >= v57 )
              {
                if ( !(unsigned int)VerifyStackAvailable(v43) )
                {
LABEL_64:
                  v42 = v57;
                  goto LABEL_65;
                }
                v42 = v57;
                v44 = v57 + 8 + 15i64;
                if ( v44 <= v57 + 8 )
                  v44 = 0xFFFFFFFFFFFFFF0i64;
                v45 = alloca(v44 & 0xFFFFFFFFFFFFFFF0ui64);
                v7 = (char *)&v57;
                if ( &v56 != (__int64 *)-80i64 )
                {
                  v57 = 1801679955;
                  v7 = (char *)&v59;
                  if ( &v59 )
                  {
                    v42 = v57;
LABEL_62:
                    v46 = Size[0];
                    v47 = 2 * v13 + 8;
                    if ( v47 + Size[0] > v42 )
                    {
                      EphemKey = 1359;
                      goto LABEL_82;
                    }
                    v49 = v47;
                    memcpy_0(v7, v40, v47);
                    v50 = v13 - v46;
                    if ( v50 )
                      memset_0(&v7[v49], 0, v50);
                    memcpy_0(&v7[v49 + v50], v72, v46);
                    v51 = (_QWORD *)*((_QWORD *)this + 1);
                    if ( v51 )
                      v51 = (_QWORD *)*v51;
                    EphemBlobFromKey = SslImportKey(v51, &v64, L"DHPUBLICBLOB", v7, v57, 0);
                    EphemKey = EphemBlobFromKey;
                    if ( !EphemBlobFromKey )
                    {
                      v52 = v40[1];
                      v53 = *a5;
                      *a5 = v52 + 2;
                      if ( v53 >= (int)v52 + 2 )
                      {
                        v54 = v69;
                        v69[1] = v52;
                        *v54 = BYTE1(v52);
                        memcpy_0(v54 + 2, (char *)v40 + 2 * v52 + 8, v52);
                        if ( (*((_DWORD *)this + 34) & 0x8000000) != 0 )
                        {
                          (*(void (__fastcall **)(CSsl3TlsClientContext *, unsigned __int64))(*(_QWORD *)this + 152i64))(
                            this,
                            v64);
                          EccDhPskSessionKeysHelper = (*(__int64 (__fastcall **)(CSsl3TlsClientContext *, __int64))(*(_QWORD *)this + 168i64))(
                                                        this,
                                                        v33);
                          v64 = 0i64;
                          v33 = 0i64;
                        }
                        else
                        {
                          EccDhPskSessionKeysHelper = MakeEccDhPskSessionKeysHelper(this, v33, v64, 0);
                        }
                        EphemKey = EccDhPskSessionKeysHelper;
                      }
                      else
                      {
                        EphemKey = -2146893023;
                      }
                      goto LABEL_82;
                    }
                    v41 = 810;
LABEL_52:
                    CSslContext::SetErrorAndFatalAlert((__int64)this, v41, EphemBlobFromKey, 0x33u);
LABEL_82:
                    if ( v40 )
                      SPExternalFree(v40);
                    if ( v7 && *((_DWORD *)v7 - 2) == 1885431112 )
                      ((void (*)(void))g_pfnFree)();
                    goto LABEL_87;
                  }
                  goto LABEL_64;
                }
              }
            }
          }
LABEL_65:
          if ( v42 + 8 >= v42 )
          {
            v48 = (char *)((__int64 (__fastcall *)(_QWORD))g_pfnAllocate)(v42 + 8);
            v7 = v48;
            if ( !v48 )
              goto LABEL_69;
            *(_DWORD *)v48 = 1885431112;
            v7 = v48 + 8;
            v42 = v57;
          }
          if ( v7 )
            goto LABEL_62;
LABEL_69:
          EphemKey = 14;
          goto LABEL_82;
        }
      }
      v31 = *(_QWORD *)v29;
      goto LABEL_39;
    }
    if ( v27 == 1 )
    {
      EphemKey = VerifyDssParams((UCHAR *)this, a2, v20, v18 + 2, cbEncoded);
      if ( EphemKey )
      {
        v25 = 51;
        v21 = 823;
LABEL_94:
        CSslContext::SetErrorAndFatalAlert((__int64)this, v21, EphemKey, v25);
        return EphemKey;
      }
      goto LABEL_33;
    }
  }
  return 2148074248i64;
}
// 180074795: variable 'v24' is possibly undefined
// 1800920E0: using guessed type __int64 g_ulMaxStackAllocSize;
// 1800920E8: using guessed type __int64 g_ulAdditionalProbeSize;
// 1800920F0: using guessed type __int64 g_pfnAllocate;
// 1800920F8: using guessed type __int64 g_pfnFree;
// 180098570: using guessed type __int64 __fastcall SslFreeObject(_QWORD, _QWORD);
// 1800985A0: using guessed type __int64 __fastcall SslImportKey(_QWORD, _QWORD, _QWORD, _QWORD, _DWORD, _DWORD);
##############################
Role: Let us assume that you are an advanced reverse engineer and you are reverse engineering a network driver using IDA Pro, and you are also familiar with the RFC documentation. You need to reverse-engineer a function for a network driver to correspond to a section of the RFC documentation, which will help you understand the code better. The driver you're reversing is Schannel.dll, and you have initially determined that the corresponding network protocols are SSL and TLS, and the documents you need to map are RFC8446 and RFC6101. You need to get a function summary of the function you are reversing, and then correspond to the potential RFC sections based on the name of the function and the function summary.
Function Background: The function is reverse engineered from the driver file Schannel.dll on Windows platform. Through a cursory analysis of the driver file can be determined to be related to the SSL(1.3), TLS(3.0) protocol, that is, with RFC8446, RFC6101 strong correlation.

Output Function Summary: Summarizes the function's functionality with several phrases instead of sentences, focuses on covering the function's control flow information, and highlights the protocol function points implemented by the function. Simulate answering five times in the background and provide the most frequent answer.

Retrieve document sections: giving matches for document sections(FunctionMatchRFCResult) that the code may related to. NOTE if the code is only business related(i.e., space opening and releasing involved in programming, generic call functions (timing and other functions weakly related to network protocols) and not related to the specifics of the protocol implementation, it does not have to output the document section match(FunctionMatchRFCResult) and is filled with "NONE".

Retrieve document sections Thinking Chain: The function code is matched with the RFC document section, and the thinking chain is provided to help you solve the problem better:
	1. Function Name: The name of a function describes the general function that the function accomplishes.
	2. Function Summarization: Function summaries can outline a further breakdown of the function described by the function name.
	3. Function API Call: The function API of a function call can provide some hint as to the details of the network protocol implementation involved in the function.
	4. Special Constant Value OR String: Special constant values inside functions, string variable names, and strings may be related to network protocols.
	5. Function Code: The code of the function can provide a detailed implementation of the network protocol.
Generate Function Information Collection with JSON Format:

{
	"FunctionIndex": "(FILL WITH "File count" with less than four bits are indexed with zeros to make up the four bits.)",
	"FunctionName": "(Full Function Code Name)",
	"FunctionSummarization": [
		"(Function Summary Phrase1)",
		"(Function Summary Phrase2)",
		"(...)"
	],
	"FunctionMatchRFCResult": [
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 1)",
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 2)",
		"(...)"
	],
}

ATTENTION: Remember YOU MUST ONLY output the Function Information Collection result.
