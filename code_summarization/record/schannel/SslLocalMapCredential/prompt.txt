Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 886
// Total lines: 329

//----- (0000000180048DD8) ----------------------------------------------------
__int64 __fastcall SslLocalMapCredential(
        struct CCredentialGroup *a1,
        __int64 a2,
        int a3,
        __int64 a4,
        unsigned int a5,
        struct _CERT_CONTEXT *a6,
        struct _LUID a7,
        unsigned __int16 *a8,
        unsigned __int16 *a9,
        unsigned __int64 *a10)
{
  struct _MSV1_0_PASSTHROUGH_RESPONSE *v10; // r13
  unsigned __int8 *v11; // r14
  unsigned __int8 *v12; // r12
  __int64 result; // rax
  int v14; // esi
  PCCERT_CHAIN_CONTEXT v15; // rdi
  int v16; // ebx
  CCipherMill *v17; // rcx
  __int64 v18; // rdx
  CCipherMill *v19; // rcx
  __int64 v20; // rdx
  unsigned int *v21; // r15
  int v22; // eax
  CCipherMill *v23; // rcx
  const WCHAR *v24; // rsi
  int v25; // edi
  int v26; // eax
  PUCHAR ValidationData; // rcx
  int v28; // esi
  unsigned __int8 *v29; // [rsp+48h] [rbp-59h] BYREF
  void *v30; // [rsp+50h] [rbp-51h] BYREF
  PCCERT_CHAIN_CONTEXT pChainContext; // [rsp+58h] [rbp-49h] BYREF
  unsigned int v32; // [rsp+60h] [rbp-41h] BYREF
  unsigned __int8 *v33; // [rsp+68h] [rbp-39h] BYREF
  struct _UNICODE_STRING v34; // [rsp+70h] [rbp-31h] BYREF
  HLOCAL hMem; // [rsp+80h] [rbp-21h] BYREF
  struct _MSV1_0_PASSTHROUGH_RESPONSE *v36; // [rsp+88h] [rbp-19h] BYREF
  struct _UNICODE_STRING DestinationString; // [rsp+90h] [rbp-11h] BYREF
  __int64 v39; // [rsp+F0h] [rbp+4Fh] BYREF
  int v40; // [rsp+F8h] [rbp+57h] BYREF

  v39 = a2;
  v36 = 0i64;
  hMem = 0i64;
  v10 = 0i64;
  a7.LowPart = 0;
  v11 = 0i64;
  v29 = 0i64;
  v12 = 0i64;
  v33 = 0i64;
  v40 = 0;
  pChainContext = 0i64;
  v34 = 0i64;
  if ( a3 != 1 )
    return 2148074253i64;
  result = MapperVerifyClientChain(a1, a6, a4, a5, &v32, &v40, &pChainContext);
  if ( !(_DWORD)result )
  {
    v14 = v32;
    v15 = pChainContext;
    if ( (v32 & 0x10) != 0 )
    {
      if ( (g_dwCertMappingMethods & 8) != 0 )
      {
        if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 7) & 0x100) != 0 )
        {
          WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 37i64, &WPP_dd7b7bddfdb936bf76d1675dae523069_Traceguids);
        }
        v16 = SslTryS4U2Self(v15, &v30, 0, a8, a9);
        if ( v16 >= 0 )
        {
          v17 = WPP_GLOBAL_Control;
          if ( WPP_GLOBAL_Control == (CCipherMill *)&WPP_GLOBAL_Control
            || (*((_DWORD *)WPP_GLOBAL_Control + 7) & 0x100) == 0 )
          {
            goto LABEL_14;
          }
          v18 = 38i64;
LABEL_13:
          WPP_SF_(*((_QWORD *)v17 + 2), v18, &WPP_dd7b7bddfdb936bf76d1675dae523069_Traceguids);
LABEL_14:
          CertFreeCertificateChain(v15);
          *a10 = (unsigned __int64)v30;
          return (unsigned int)v16;
        }
        v19 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 7) & 0x100) != 0 )
        {
          v20 = 39i64;
LABEL_29:
          WPP_SF_D(*((_QWORD *)v19 + 2), v20, &WPP_dd7b7bddfdb936bf76d1675dae523069_Traceguids, (unsigned int)v16);
          goto LABEL_30;
        }
        goto LABEL_31;
      }
    }
    else if ( (v32 & 0x60) != 0 && (g_dwCertMappingMethods & 0x10) != 0 )
    {
      if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 7) & 0x100) != 0 )
      {
        WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 40i64, &WPP_dd7b7bddfdb936bf76d1675dae523069_Traceguids);
      }
      v16 = SslTryS4U2Self(v15, &v30, 4, a8, a9);
      if ( v16 >= 0 )
      {
        v17 = WPP_GLOBAL_Control;
        if ( WPP_GLOBAL_Control == (CCipherMill *)&WPP_GLOBAL_Control
          || (*((_DWORD *)WPP_GLOBAL_Control + 7) & 0x100) == 0 )
        {
          goto LABEL_14;
        }
        v18 = 41i64;
        goto LABEL_13;
      }
      v19 = WPP_GLOBAL_Control;
      if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control
        && (*((_DWORD *)WPP_GLOBAL_Control + 7) & 0x100) != 0 )
      {
        v20 = 42i64;
        goto LABEL_29;
      }
LABEL_31:
      if ( !v14 )
      {
        if ( v19 != (CCipherMill *)&WPP_GLOBAL_Control && (*((_DWORD *)v19 + 7) & 0x100) != 0 )
          WPP_SF_(*((_QWORD *)v19 + 2), 43i64, &WPP_dd7b7bddfdb936bf76d1675dae523069_Traceguids);
        v16 = -2146893017;
        if ( v40 < 0 )
          v16 = v40;
        CertFreeCertificateChain(v15);
        return (unsigned int)v16;
      }
      v16 = SslBuildCertLogonRequest(v15, v14, (struct _SSL_CERT_LOGON_REQ **)&hMem, (unsigned int *)&a7);
      CertFreeCertificateChain(v15);
      if ( v16 < 0 )
      {
        if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 7) & 0x100) != 0 )
        {
          WPP_SF_D(
            *((_QWORD *)WPP_GLOBAL_Control + 2),
            44i64,
            &WPP_dd7b7bddfdb936bf76d1675dae523069_Traceguids,
            (unsigned int)v16);
        }
        return (unsigned int)v16;
      }
      CSchannelTelemetryContext::LogRCMPUsage(1);
      v21 = (unsigned int *)hMem;
      v22 = SslMapCertToUserPac(
              (struct _SSL_CERT_LOGON_REQ *)hMem,
              a7.LowPart,
              &v29,
              (unsigned int *)&v39,
              (unsigned __int16 **)&pChainContext);
      v23 = WPP_GLOBAL_Control;
      v16 = v22;
      if ( v22 < 0 )
      {
        if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control
          && (*((_DWORD *)WPP_GLOBAL_Control + 7) & 0x100) != 0 )
        {
          WPP_SF_D(
            *((_QWORD *)WPP_GLOBAL_Control + 2),
            45i64,
            &WPP_dd7b7bddfdb936bf76d1675dae523069_Traceguids,
            (unsigned int)v22);
          v23 = WPP_GLOBAL_Control;
        }
        v24 = (const WCHAR *)pChainContext;
        if ( pChainContext || v16 == -1073740943 )
        {
          v25 = 0;
          if ( v23 != (CCipherMill *)&WPP_GLOBAL_Control && (*((_DWORD *)v23 + 7) & 0x100) != 0 )
            WPP_SF_(*((_QWORD *)v23 + 2), 46i64, &WPP_dd7b7bddfdb936bf76d1675dae523069_Traceguids);
          if ( v16 == -1073740943 )
          {
            v25 = 1;
            DestinationString = SslDomainName;
          }
          else
          {
            RtlInitUnicodeString(&DestinationString, v24);
          }
          v26 = SslMapCertAtDC(&DestinationString, v21, v21[1], 1, v25, &v29, (unsigned int *)&v39, &v36);
          v10 = v36;
          v16 = v26;
          if ( v26 < 0 )
          {
            if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control
              && (*((_DWORD *)WPP_GLOBAL_Control + 7) & 0x100) != 0 )
            {
              WPP_SF_D(
                *((_QWORD *)WPP_GLOBAL_Control + 2),
                47i64,
                &WPP_dd7b7bddfdb936bf76d1675dae523069_Traceguids,
                (unsigned int)v26);
            }
          }
          else
          {
            ValidationData = v36->ValidationData;
            v12 = v29;
            if ( (unsigned int)(*((_DWORD *)ValidationData + 1) - *((_DWORD *)ValidationData + 3)) <= 0x20
              || *((_DWORD *)ValidationData + 6) >= 0x10000u )
            {
              v34 = SslDomainName;
            }
            else
            {
              v34.Length = *((_WORD *)ValidationData + 12);
              v34.MaximumLength = v34.Length;
              v34.Buffer = (PWSTR)&ValidationData[*((unsigned int *)ValidationData + 5)];
            }
          }
          (*(void (__fastcall **)(const WCHAR *))(LsaTable + 48))(v24);
          v23 = WPP_GLOBAL_Control;
LABEL_65:
          if ( v16 >= 0 )
          {
            v16 = (*(__int64 (__fastcall **)(unsigned __int8 *, _QWORD, _QWORD, unsigned __int8 **, struct _CERT_CONTEXT **))(LsaTable + 376))(
                    v29,
                    (unsigned int)v39,
                    0i64,
                    &v33,
                    &a6);
            if ( v16 >= 0 )
            {
              v29 = v33;
              v28 = 0;
              LODWORD(v39) = (_DWORD)a6;
              v16 = SslCreateTokenFromPac(v33, (unsigned int)a6, &v34, &a7, &v30);
              if ( v16 < 0 )
              {
                v23 = WPP_GLOBAL_Control;
                if ( WPP_GLOBAL_Control == (CCipherMill *)&WPP_GLOBAL_Control
                  || (*((_DWORD *)WPP_GLOBAL_Control + 7) & 0x100) == 0 )
                {
                  goto LABEL_77;
                }
                WPP_SF_D(
                  *((_QWORD *)WPP_GLOBAL_Control + 2),
                  49i64,
                  &WPP_dd7b7bddfdb936bf76d1675dae523069_Traceguids,
                  (unsigned int)v16);
              }
              else
              {
                *a10 = (unsigned __int64)v30;
              }
              v23 = WPP_GLOBAL_Control;
LABEL_77:
              if ( v21 )
              {
                LocalFree(v21);
                v23 = WPP_GLOBAL_Control;
              }
              if ( v10 )
              {
                (*(void (__fastcall **)(struct _MSV1_0_PASSTHROUGH_RESPONSE *))(LsaTable + 184))(v10);
                v23 = WPP_GLOBAL_Control;
              }
              if ( v11 )
              {
                (*(void (__fastcall **)(unsigned __int8 *))(LsaTable + 48))(v11);
                v23 = WPP_GLOBAL_Control;
              }
              if ( v12 )
              {
                (*(void (__fastcall **)(unsigned __int8 *))(LsaTable + 48))(v12);
                v23 = WPP_GLOBAL_Control;
              }
              if ( v33 )
              {
                (*(void (__fastcall **)(unsigned __int8 *))(LsaTable + 48))(v33);
                v23 = WPP_GLOBAL_Control;
              }
              if ( v16 < 0 )
              {
                if ( v23 != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)v23 + 28) & 2) != 0 )
                  WPP_SF_D(
                    *((_QWORD *)v23 + 2),
                    50i64,
                    &WPP_dd7b7bddfdb936bf76d1675dae523069_Traceguids,
                    (unsigned int)v16);
                LogCertMappingFailureEvent(*((_DWORD *)a1 + 53), (const unsigned __int16 *)a1 + 108, v16);
                if ( v28 < 0 && (v16 & 0x1FFF0000) != 589824 )
                  return (unsigned int)v28;
              }
              return (unsigned int)v16;
            }
            v23 = WPP_GLOBAL_Control;
            if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control
              && (*((_DWORD *)WPP_GLOBAL_Control + 7) & 0x100) != 0 )
            {
              WPP_SF_D(
                *((_QWORD *)WPP_GLOBAL_Control + 2),
                48i64,
                &WPP_dd7b7bddfdb936bf76d1675dae523069_Traceguids,
                (unsigned int)v16);
              v23 = WPP_GLOBAL_Control;
            }
          }
          v28 = v40;
          goto LABEL_77;
        }
      }
      else
      {
        v11 = v29;
      }
      v34 = SslDomainName;
      goto LABEL_65;
    }
LABEL_30:
    v19 = WPP_GLOBAL_Control;
    goto LABEL_31;
  }
  return result;
}
// 180041CB0: using guessed type __int64 __fastcall WPP_SF_(_QWORD, _QWORD, _QWORD);
// 180041CDC: using guessed type __int64 __fastcall WPP_SF_D(_QWORD, _QWORD, _QWORD, _QWORD);
// 180092620: using guessed type __int64 LsaTable;
##############################
Role: Let us assume that you are an advanced reverse engineer and you are reverse engineering a network driver using IDA Pro, and you are also familiar with the RFC documentation. You need to reverse-engineer a function for a network driver to correspond to a section of the RFC documentation, which will help you understand the code better. The driver you're reversing is Schannel.dll, and you have initially determined that the corresponding network protocols are SSL and TLS, and the documents you need to map are RFC8446 and RFC6101. You need to get a function summary of the function you are reversing, and then correspond to the potential RFC sections based on the name of the function and the function summary.
Function Background: The function is reverse engineered from the driver file Schannel.dll on Windows platform. Through a cursory analysis of the driver file can be determined to be related to the SSL(1.3), TLS(3.0) protocol, that is, with RFC8446, RFC6101 strong correlation.

Output Function Summary: Summarizes the function's functionality with several phrases instead of sentences, focuses on covering the function's control flow information, and highlights the protocol function points implemented by the function. Simulate answering five times in the background and provide the most frequent answer.

Retrieve document sections: giving matches for document sections(FunctionMatchRFCResult) that the code may related to. NOTE if the code is only business related(i.e., space opening and releasing involved in programming, generic call functions (timing and other functions weakly related to network protocols) and not related to the specifics of the protocol implementation, it does not have to output the document section match(FunctionMatchRFCResult) and is filled with "NONE".

Retrieve document sections Thinking Chain: The function code is matched with the RFC document section, and the thinking chain is provided to help you solve the problem better:
	1. Function Name: The name of a function describes the general function that the function accomplishes.
	2. Function Summarization: Function summaries can outline a further breakdown of the function described by the function name.
	3. Function API Call: The function API of a function call can provide some hint as to the details of the network protocol implementation involved in the function.
	4. Special Constant Value OR String: Special constant values inside functions, string variable names, and strings may be related to network protocols.
	5. Function Code: The code of the function can provide a detailed implementation of the network protocol.
Generate Function Information Collection with JSON Format:

{
	"FunctionIndex": "(FILL WITH "File count" with less than four bits are indexed with zeros to make up the four bits.)",
	"FunctionName": "(Full Function Code Name)",
	"FunctionSummarization": [
		"(Function Summary Phrase1)",
		"(Function Summary Phrase2)",
		"(...)"
	],
	"FunctionMatchRFCResult": [
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 1)",
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 2)",
		"(...)"
	],
}

ATTENTION: Remember YOU MUST ONLY output the Function Information Collection result.
