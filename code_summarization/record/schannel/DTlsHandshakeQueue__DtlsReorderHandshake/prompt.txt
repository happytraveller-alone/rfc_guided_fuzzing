Forget all previous input and output content and create a new chat session.

(SSL3.0)RFC 6101 SECTION:
#################################################
2.	Goals
3.	GoalsofThisDocument
5.	SSLProtocol
5.1.	SSLProtocol_SessionandConnectionStates_
5.2.	SSLProtocol_RecordLayer_
5.2.1.	SSLProtocol_RecordLayer_Fragmentation_
5.2.2.	SSLProtocol_RecordLayer_RecordCompressionandDecompression_
5.2.3.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_
5.2.3.1.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_NullorStandardStreamCipher_
5.2.3.2.	SSLProtocol_RecordLayer_RecordPayloadProtectionandtheCipherSpec_CBCBlockCipher_
5.3.	SSLProtocol_ChangeCipherSpecProtocol_
5.4.	SSLProtocol_AlertProtocol_
5.4.1.	SSLProtocol_AlertProtocol_ClosureAlerts_
5.4.2.	SSLProtocol_AlertProtocol_ErrorAlerts_
5.5.	SSLProtocol_HandshakeProtocolOverview_
5.6.	SSLProtocol_HandshakeProtocol_
5.6.1.	SSLProtocol_HandshakeProtocol_Hellomessages_
5.6.1.1.	SSLProtocol_HandshakeProtocol_Hellomessages_HelloRequest_
5.6.1.2.	SSLProtocol_HandshakeProtocol_Hellomessages_ClientHello_
5.6.1.3.	SSLProtocol_HandshakeProtocol_Hellomessages_ServerHello_
5.6.2.	SSLProtocol_HandshakeProtocol_ServerCertificate_
5.6.3.	SSLProtocol_HandshakeProtocol_ServerKeyExchangeMessage_
5.6.4.	SSLProtocol_HandshakeProtocol_CertificateRequest_
5.6.5.	SSLProtocol_HandshakeProtocol_ServerHelloDone_
5.6.6.	SSLProtocol_HandshakeProtocol_ClientCertificate_
5.6.7.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_
5.6.7.1.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_RSAEncryptedPremasterSecretMessage_
5.6.7.2.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_FORTEZZAKeyExchangeMessage_
5.6.7.3.	SSLProtocol_HandshakeProtocol_ClientKeyExchangeMessage_ClientDiffieHellmanPublicValue_
5.6.8.	SSLProtocol_HandshakeProtocol_CertificateVerify_
5.6.9.	SSLProtocol_HandshakeProtocol_Finished_
5.7.	SSLProtocol_ApplicationDataProtocol_
6.	CryptographicComputations
6.1.	CryptographicComputations_AsymmetricCryptographicComputations_
6.1.1.	CryptographicComputations_AsymmetricCryptographicComputations_RSA_
6.1.2.	CryptographicComputations_AsymmetricCryptographicComputations_DiffieHellman_
6.1.3.	CryptographicComputations_AsymmetricCryptographicComputations_FORTEZZA_
6.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_
6.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_TheMasterSecret_
6.2.2.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_
6.2.2.1.	CryptographicComputations_SymmetricCryptographicCalculationsandtheCipherSpec_ConvertingtheMasterSecretintoKeysandMACSecrets_ExportKeyGenerationExample_
7.	SecurityConsiderations
8.	InformativeReferences
#################################################

(TLS1.3)RFC 8446 SECTION:
#################################################
4.	HandshakeProtocol
4.1.	HandshakeProtocol_KeyExchangeMessages_
4.1.1.	HandshakeProtocol_KeyExchangeMessages_CryptographicNegotiation_
4.1.2.	HandshakeProtocol_KeyExchangeMessages_ClientHello_
4.1.3.	HandshakeProtocol_KeyExchangeMessages_ServerHello_
4.1.4.	HandshakeProtocol_KeyExchangeMessages_HelloRetryRequest_
4.2.	HandshakeProtocol_Extensions_
4.2.1.	HandshakeProtocol_Extensions_SupportedVersions_
4.2.2.	HandshakeProtocol_Extensions_Cookie_
4.2.3.	HandshakeProtocol_Extensions_SignatureAlgorithms_
4.2.4.	HandshakeProtocol_Extensions_CertificateAuthorities_
4.2.5.	HandshakeProtocol_Extensions_OIDFilters_
4.2.6.	HandshakeProtocol_Extensions_PostHandshakeClientAuthentication_
4.2.7.	HandshakeProtocol_Extensions_SupportedGroups_
4.2.8.	HandshakeProtocol_Extensions_KeyShare_
4.2.8.1.	HandshakeProtocol_Extensions_KeyShare_DiffieHellmanParameters_
4.2.8.2.	HandshakeProtocol_Extensions_KeyShare_ECDHEParameters_
4.2.9.	HandshakeProtocol_Extensions_PreSharedKeyExchangeModes_
4.2.10.	HandshakeProtocol_Extensions_EarlyDataIndication_
4.2.11.	HandshakeProtocol_Extensions_PreSharedKeyExtension_
4.2.11.1.	HandshakeProtocol_Extensions_PreSharedKeyExtension_TicketAge_
4.2.11.2.	HandshakeProtocol_Extensions_PreSharedKeyExtension_PSKBinder_
4.2.11.3.	HandshakeProtocol_Extensions_PreSharedKeyExtension_ProcessingOrder_
4.3.	HandshakeProtocol_ServerParameters_
4.3.1.	HandshakeProtocol_ServerParameters_EncryptedExtensions_
4.3.2.	HandshakeProtocol_ServerParameters_CertificateRequest_
4.4.	HandshakeProtocol_AuthenticationMessages_
4.4.1.	HandshakeProtocol_AuthenticationMessages_TheTranscriptHash_
4.4.2.	HandshakeProtocol_AuthenticationMessages_Certificate_
4.4.2.1.	HandshakeProtocol_AuthenticationMessages_Certificate_OCSPStatusandSCTExtensions_
4.4.2.2.	HandshakeProtocol_AuthenticationMessages_Certificate_ServerCertificateSelection_
4.4.2.3.	HandshakeProtocol_AuthenticationMessages_Certificate_ClientCertificateSelection_
4.4.2.4.	HandshakeProtocol_AuthenticationMessages_Certificate_ReceivingaCertificateMessage_
4.4.3.	HandshakeProtocol_AuthenticationMessages_CertificateVerify_
4.4.4.	HandshakeProtocol_AuthenticationMessages_Finished_
4.5.	HandshakeProtocol_EndofEarlyData_
4.6.	HandshakeProtocol_PostHandshakeMessages_
4.6.1.	HandshakeProtocol_PostHandshakeMessages_NewSessionTicketMessage_
4.6.2.	HandshakeProtocol_PostHandshakeMessages_PostHandshakeAuthentication_
4.6.3.	HandshakeProtocol_PostHandshakeMessages_KeyandInitializationVectorUpdate_
5.	RecordProtocol
5.1.	RecordProtocol_RecordLayer_
5.2.	RecordProtocol_RecordPayloadProtection_
5.3.	RecordProtocol_PerRecordNonce_
5.4.	RecordProtocol_RecordPadding_
5.5.	RecordProtocol_LimitsonKeyUsage_
6.	AlertProtocol
6.1.	AlertProtocol_ClosureAlerts_
6.2.	AlertProtocol_ErrorAlerts_
7.	CryptographicComputations
7.1.	CryptographicComputations_KeySchedule_
7.2.	CryptographicComputations_UpdatingTrafficSecrets_
7.3.	CryptographicComputations_TrafficKeyCalculation_
7.4.	CryptographicComputations_(EC)DHESharedSecretCalculation_
7.4.1.	CryptographicComputations_(EC)DHESharedSecretCalculation_FiniteFieldDiffieHellman_
7.4.2.	CryptographicComputations_(EC)DHESharedSecretCalculation_EllipticCurveDiffieHellman_
7.5.	CryptographicComputations_Exporters_
8.	0RTTandAntiReplay
8.1.	0RTTandAntiReplay_SingleUseTickets_
8.2.	0RTTandAntiReplay_ClientHelloRecording_
8.3.	0RTTandAntiReplay_FreshnessChecks_
9.	ComplianceRequirements
9.1.	ComplianceRequirements_MandatorytoImplementCipherSuites_
9.2.	ComplianceRequirements_MandatorytoImplementExtensions_
9.3.	ComplianceRequirements_ProtocolInvariants_
10.	SecurityConsiderations
11.	IANAConsiderations
#################################################

Function Code Content
##############################
// File count: 1436
// Total lines: 172

//----- (0000000180072ADC) ----------------------------------------------------
__int64 __fastcall DTlsHandshakeQueue::DtlsReorderHandshake(
        __int64 a1,
        __int64 a2,
        __int64 a3,
        unsigned int a4,
        unsigned __int64 a5)
{
  unsigned int v5; // ebp
  unsigned __int8 *v6; // rdi
  int v7; // r15d
  unsigned int v9; // ebx
  CCipherMill *v10; // r10
  CSsl3TlsContext *v11; // r8
  __int64 v12; // rax
  unsigned int v13; // r13d
  const unsigned __int16 *v14; // r12
  unsigned int v15; // eax
  CCipherMill *v16; // r11
  int v17; // r15d
  unsigned int v18; // r12d
  unsigned int v19; // esi
  CCipherMill *v20; // r10
  DTlsMsgMgr *v21; // r11
  struct DTlsMessage *Msg; // r13
  __int64 v23; // rdx
  unsigned int v24; // eax
  __int64 v25; // rdx
  unsigned __int16 *v27; // [rsp+70h] [rbp+8h]
  unsigned int v28; // [rsp+78h] [rbp+10h]
  int v29; // [rsp+90h] [rbp+28h]

  v5 = a4;
  v6 = (unsigned __int8 *)a3;
  v7 = a2;
  v9 = 590610;
  v10 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
  {
    WPP_SF_DDi(*((_QWORD *)WPP_GLOBAL_Control + 2), a2, a3, a2, a4, a5);
    v10 = WPP_GLOBAL_Control;
  }
  v11 = *(CSsl3TlsContext **)(a1 + 40);
  v12 = *((_QWORD *)v11 + 10);
  if ( v12 )
  {
    v13 = *(_DWORD *)(v12 + 212);
    v14 = (const unsigned __int16 *)(v12 + 216);
  }
  else
  {
    v14 = &Class;
    v13 = 0;
  }
  v28 = v13;
  v27 = (unsigned __int16 *)v14;
  if ( v7 == 20 )
  {
    v15 = DTlsHandshakeQueue::SetCcs((DTlsHandshakeQueue *)a1, v6, v5, a5);
LABEL_9:
    v9 = v15;
    goto LABEL_55;
  }
  if ( v7 != 22 )
  {
    if ( v10 == (CCipherMill *)&WPP_GLOBAL_Control || (*((_BYTE *)v10 + 28) & 1) == 0 )
      goto LABEL_56;
    WPP_SF_(*((_QWORD *)v10 + 2), 34i64, &WPP_7c40084571853895c7781ddf48bb701c_Traceguids);
LABEL_55:
    v10 = WPP_GLOBAL_Control;
    goto LABEL_56;
  }
  if ( *(_DWORD *)(a1 + 36) == -1 || *(_DWORD *)(a1 + 36) < HIWORD(a5) )
  {
    v15 = DTlsHandshakeQueue::SetFinish((DTlsHandshakeQueue *)a1, v6, v5, a5);
    goto LABEL_9;
  }
  if ( !CSsl3TlsContext::CheckRecordValidity(v11, a5) )
  {
    if ( WPP_GLOBAL_Control != v16 && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) != 0 )
      WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 35i64, &WPP_7c40084571853895c7781ddf48bb701c_Traceguids);
    LogDtlsRecordOutOfRecvWindow(v13, v14);
    goto LABEL_55;
  }
  while ( 1 )
  {
    v10 = WPP_GLOBAL_Control;
    if ( WPP_GLOBAL_Control != v16 && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
    {
      WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 36i64, &WPP_7c40084571853895c7781ddf48bb701c_Traceguids);
      v10 = WPP_GLOBAL_Control;
      v16 = (CCipherMill *)&WPP_GLOBAL_Control;
    }
    if ( v5 < 0xC )
    {
      if ( v10 == v16 || (*((_BYTE *)v10 + 28) & 1) == 0 )
        goto LABEL_50;
      v25 = 37i64;
LABEL_48:
      WPP_SF_(*((_QWORD *)v10 + 2), v25, &WPP_7c40084571853895c7781ddf48bb701c_Traceguids);
      goto LABEL_49;
    }
    v17 = v6[3] + ((v6[2] + (v6[1] << 8)) << 8);
    v29 = v6[8] + ((v6[7] + (v6[6] << 8)) << 8);
    v18 = v6[11] + ((v6[10] + (v6[9] << 8)) << 8);
    if ( (unsigned __int64)v18 + 12 > v5 )
    {
      if ( v10 == v16 || (*((_BYTE *)v10 + 28) & 1) == 0 )
        goto LABEL_50;
      v25 = 38i64;
      goto LABEL_48;
    }
    v19 = v6[5] + (v6[4] << 8);
    Msg = DTlsMsgMgr::FindMsg(*(DTlsMsgMgr **)a1, v19);
    if ( Msg )
      goto LABEL_33;
    if ( v20 != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)v20 + 28) & 4) != 0 )
    {
      WPP_SF_(*((_QWORD *)v20 + 2), 39i64, &WPP_7c40084571853895c7781ddf48bb701c_Traceguids);
      v21 = *(DTlsMsgMgr **)a1;
    }
    Msg = DTlsMsgMgr::AddMsg(v21, 22i64, v19, v17);
    if ( Msg )
      break;
LABEL_37:
    v6 += v18 + 12;
    v5 += -12 - v18;
    if ( !v5 )
      goto LABEL_55;
    v16 = (CCipherMill *)&WPP_GLOBAL_Control;
  }
  if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 4) != 0 )
    WPP_SF_(*((_QWORD *)WPP_GLOBAL_Control + 2), 40i64, &WPP_7c40084571853895c7781ddf48bb701c_Traceguids);
  v23 = *((_QWORD *)Msg + 5);
  *(_BYTE *)v23 = *v6;
  *(_BYTE *)(v23 + 5) = v19;
  *(_WORD *)(v23 + 7) = 0;
  *(_BYTE *)(v23 + 1) = BYTE2(v17);
  *(_BYTE *)(v23 + 9) = BYTE2(v17);
  *(_BYTE *)(v23 + 4) = BYTE1(v19);
  *(_BYTE *)(v23 + 3) = v17;
  *(_BYTE *)(v23 + 2) = BYTE1(v17);
  *(_BYTE *)(v23 + 11) = v17;
  *(_BYTE *)(v23 + 10) = BYTE1(v17);
  *(_BYTE *)(v23 + 6) = 0;
  v20 = WPP_GLOBAL_Control;
LABEL_33:
  if ( v20 != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)v20 + 28) & 4) != 0 )
    WPP_SF_(*((_QWORD *)v20 + 2), 41i64, &WPP_7c40084571853895c7781ddf48bb701c_Traceguids);
  v24 = DTlsMessage::addFragment(Msg, v28, v27, v6 + 12, v29, v18);
  v9 = v24;
  if ( !v24 )
    goto LABEL_37;
  v10 = WPP_GLOBAL_Control;
  if ( WPP_GLOBAL_Control != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)WPP_GLOBAL_Control + 28) & 1) != 0 )
  {
    WPP_SF_D(*((_QWORD *)WPP_GLOBAL_Control + 2), 42i64, &WPP_7c40084571853895c7781ddf48bb701c_Traceguids, v24);
LABEL_49:
    v10 = WPP_GLOBAL_Control;
  }
LABEL_50:
  v9 = -2146893018;
LABEL_56:
  if ( v10 != (CCipherMill *)&WPP_GLOBAL_Control && (*((_BYTE *)v10 + 28) & 4) != 0 )
    WPP_SF_D(*((_QWORD *)v10 + 2), 43i64, &WPP_7c40084571853895c7781ddf48bb701c_Traceguids, v9);
  return v9;
}
// 180072BD5: variable 'v16' is possibly undefined
// 180072CDC: variable 'v20' is possibly undefined
// 180072D0A: variable 'v21' is possibly undefined
// 180041CB0: using guessed type __int64 __fastcall WPP_SF_(_QWORD, _QWORD, _QWORD);
// 180041CDC: using guessed type __int64 __fastcall WPP_SF_D(_QWORD, _QWORD, _QWORD, _QWORD);
##############################
Role: Let us assume that you are an advanced reverse engineer and you are reverse engineering a network driver using IDA Pro, and you are also familiar with the RFC documentation. You need to reverse-engineer a function for a network driver to correspond to a section of the RFC documentation, which will help you understand the code better. The driver you're reversing is Schannel.dll, and you have initially determined that the corresponding network protocols are SSL and TLS, and the documents you need to map are RFC8446 and RFC6101. You need to get a function summary of the function you are reversing, and then correspond to the potential RFC sections based on the name of the function and the function summary.
Function Background: The function is reverse engineered from the driver file Schannel.dll on Windows platform. Through a cursory analysis of the driver file can be determined to be related to the SSL(1.3), TLS(3.0) protocol, that is, with RFC8446, RFC6101 strong correlation.

Output Function Summary: Summarizes the function's functionality with several phrases instead of sentences, focuses on covering the function's control flow information, and highlights the protocol function points implemented by the function. Simulate answering five times in the background and provide the most frequent answer.

Retrieve document sections: giving matches for document sections(FunctionMatchRFCResult) that the code may related to. NOTE if the code is only business related(i.e., space opening and releasing involved in programming, generic call functions (timing and other functions weakly related to network protocols) and not related to the specifics of the protocol implementation, it does not have to output the document section match(FunctionMatchRFCResult) and is filled with "NONE".

Retrieve document sections Thinking Chain: The function code is matched with the RFC document section, and the thinking chain is provided to help you solve the problem better:
	1. Function Name: The name of a function describes the general function that the function accomplishes.
	2. Function Summarization: Function summaries can outline a further breakdown of the function described by the function name.
	3. Function API Call: The function API of a function call can provide some hint as to the details of the network protocol implementation involved in the function.
	4. Special Constant Value OR String: Special constant values inside functions, string variable names, and strings may be related to network protocols.
	5. Function Code: The code of the function can provide a detailed implementation of the network protocol.
Generate Function Information Collection with JSON Format:

{
	"FunctionIndex": "(FILL WITH "File count" with less than four bits are indexed with zeros to make up the four bits.)",
	"FunctionName": "(Full Function Code Name)",
	"FunctionSummarization": [
		"(Function Summary Phrase1)",
		"(Function Summary Phrase2)",
		"(...)"
	],
	"FunctionMatchRFCResult": [
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 1)",
		"(RFCXXXX-SectionX.X.X.X-FULL Section Title 2)",
		"(...)"
	],
}

ATTENTION: Remember YOU MUST ONLY output the Function Information Collection result.
