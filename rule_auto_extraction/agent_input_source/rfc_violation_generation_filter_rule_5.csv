index,section,title,construction_rule_type,construction_explicitness,construction_base,processing_rule_type,processing_explicitness,processing_base
1,4.1.2.. Handshake Protocol_Key Exchange Messages_Client Hello,ClientHello Message Overview,CLI-MSG-CONST,1,"""Clients MUST send the ClientHello as the first TLS message when connecting to a server. If a HelloRetryRequest is received, the client MUST resend the same ClientHello, modifying only as specified.""",SRV-MSG-PROC,1,"""Servers MUST expect the ClientHello as the first message and MUST handle a HelloRetryRequest by validating the modifications made by the client."""
2,4.1.2.. Handshake Protocol_Key Exchange Messages_Client Hello,ClientHello Message Overview,CLI-MSG-CONST,1,"""Clients MUST replace the list of shares in the ""key_share"" extension with a single KeyShareEntry from the indicated group if specified in the HelloRetryRequest.""",SRV-MSG-PROC,1,"""Servers MUST validate that the ""key_share"" extension contains a single KeyShareEntry as indicated in the HelloRetryRequest."""
3,4.1.2.. Handshake Protocol_Key Exchange Messages_Client Hello,ClientHello Message Overview,CLI-MSG-CONST,1,"""Clients MUST remove the ""early_data"" extension if it was present when sending ClientHello after a HelloRetryRequest.""",SRV-MSG-PROC,1,"""Servers MUST reject any ClientHello that includes the ""early_data"" extension after a HelloRetryRequest."""
4,4.1.2.. Handshake Protocol_Key Exchange Messages_Client Hello,ClientHello Message Overview,CLI-MSG-CONST,1,"""Clients MUST include a ""cookie"" extension if provided in the HelloRetryRequest.""",SRV-MSG-PROC,1,"""Servers MUST process the ""cookie"" extension if present in the ClientHello after a HelloRetryRequest."""
5,4.1.2.. Handshake Protocol_Key Exchange Messages_Client Hello,ClientHello Message Overview,CLI-MSG-CONST,1,"""Clients MUST update the ""pre_shared_key"" extension by recomputing the ""obfuscated_ticket_age"" and binder values, and may remove incompatible PSKs as indicated by the server's cipher suite.""",SRV-MSG-PROC,1,"""Servers MUST validate the updated ""pre_shared_key"" extension for correctness according to the cipher suite."""
6,4.1.2.. Handshake Protocol_Key Exchange Messages_Client Hello,ClientHello Message Overview,CLI-MSG-CONST,0,"""Clients MAY optionally add, remove, or change the length of the ""padding"" extension.""",SRV-MSG-PROC,0,"""Servers MAY handle modifications to the ""padding"" extension as specified by the client."""
7,4.1.2.. Handshake Protocol_Key Exchange Messages_Client Hello,Field Descriptions,CLI-MSG-CONST,1,"""The 'legacy_version' field MUST be set to 0x0303 for compatibility with middleboxes; the actual version is indicated using the 'supported_versions' extension.""",SRV-MSG-PROC,1,"""Servers MUST accept 'legacy_version' set to 0x0303 and refer to the 'supported_versions' extension for the actual version."""
8,4.1.2.. Handshake Protocol_Key Exchange Messages_Client Hello,Field Descriptions,CLI-MSG-CONST,1,"""The 'random' field MUST contain 32 bytes generated by a secure random number generator.""",SRV-MSG-PROC,1,"""Servers MUST validate that the 'random' field contains 32 bytes."""
9,4.1.2.. Handshake Protocol_Key Exchange Messages_Client Hello,Field Descriptions,CLI-MSG-CONST,1,"""The 'legacy_session_id' field MUST be either a cached session ID from a pre-TLS 1.3 server or a new unpredictable value if none exists.""",SRV-MSG-PROC,1,"""Servers MUST handle 'legacy_session_id' by accepting either a cached session ID or a new unpredictable value."""
10,4.1.2.. Handshake Protocol_Key Exchange Messages_Client Hello,Field Descriptions,CLI-MSG-CONST,1,"""The 'cipher_suites' field MUST contain a list of symmetric cipher options supported by the client.""",SRV-MSG-PROC,1,"""Servers MUST validate the 'cipher_suites' field to ensure it contains supported symmetric cipher options."""
11,4.1.2.. Handshake Protocol_Key Exchange Messages_Client Hello,Field Descriptions,CLI-MSG-CONST,1,"""The 'legacy_compression_methods' field MUST contain exactly one byte, set to zero.""",SRV-MSG-PROC,1,"""Servers MUST check that the 'legacy_compression_methods' field contains exactly one byte, set to zero."""
12,4.1.2.. Handshake Protocol_Key Exchange Messages_Client Hello,Field Descriptions,CLI-MSG-CONST,1,"""The 'extensions' field is used by clients to request extended functionality from servers.""",SRV-MSG-PROC,1,"""Servers MUST process the 'extensions' field to fulfill the extended functionality requests from clients."""
13,4.1.2.. Handshake Protocol_Key Exchange Messages_Client Hello,Extension Handling,CLI-MSG-CONST,1,"""Clients MUST include extensions in ClientHello messages, with at least the 'supported_versions' extension.""",SRV-MSG-PROC,1,"""Servers MUST ignore any unrecognized extensions in ClientHello messages."""
14,4.1.2.. Handshake Protocol_Key Exchange Messages_Client Hello,Extension Handling,CLI-MSG-CONST,1,"""Clients MUST include mandatory extensions as specified in the TLS 1.3 protocol.""",SRV-MSG-PROC,1,"""Servers MUST process ClientHello messages while adhering to the mandatory extension requirements."""
15,4.1.3.. Handshake Protocol_Key Exchange Messages_Server Hello,Downgrade Protection Mechanism,CLI-MSG-CONST,1,"""Clients MUST check the last 8 bytes of the server's Random value during the handshake. If they are set to '44 4F 57 4E 47 52 44 01' (indicating a negotiation of TLS 1.2) or '44 4F 57 4E 47 52 44 00' (indicating TLS 1.1 or below), they MUST abort the handshake.""",SRV-MSG-PROC,1,"""Servers MUST set the last 8 bytes of the Random value to '44 4F 57 4E 47 52 44 01' when negotiating TLS 1.2 and to '44 4F 57 4E 47 52 44 00' when negotiating TLS 1.1 or below."""
16,4.1.3.. Handshake Protocol_Key Exchange Messages_Server Hello,Renegotiation Handling,CLI-MSG-CONST,1,"""A legacy TLS client performing renegotiation with TLS 1.2 or prior MUST abort the handshake upon receiving a TLS 1.3 ServerHello, issuing a 'protocol_version' alert.""",SRV-MSG-PROC,1,"""The server MUST not allow renegotiation when TLS 1.3 has been negotiated."""
17,4.1.4.. Handshake Protocol_Key Exchange Messages_Hello Retry Request,Extension Processing and Updated ClientHello,CLI-MSG-CONST,1,"""Clients MUST process all extensions in the HelloRetryRequest and send a second updated ClientHello.""",SRV-MSG-PROC,1,"""Servers MUST ensure that the ClientHello includes only the extensions defined in the HelloRetryRequest."""
18,4.1.4.. Handshake Protocol_Key Exchange Messages_Hello Retry Request,Extension Processing and Updated ClientHello,CLI-MSG-CONST,1,"""Clients MUST include the supported_versions, cookie, and key_share extensions as defined in the HelloRetryRequest.""",SRV-MSG-PROC,1,"""Servers MUST abort the handshake if a cipher suite not offered is received."""
19,4.1.4.. Handshake Protocol_Key Exchange Messages_Hello Retry Request,Version Retention in ServerHello,CLI-MSG-CONST,1,"""Clients MUST retain the value of selected_version in the HelloRetryRequest 'supported_versions' extension.""",SRV-MSG-PROC,1,"""Servers MUST ensure the value of selected_version in the HelloRetryRequest is the same in the ServerHello; otherwise, clients MUST abort the handshake with an 'illegal_parameter' alert."""
20,4.2.. Handshake Protocol_Extensions,Extension Message Compatibility,CLI-MSG-CONST,1,"""Clients MUST ensure that extensions are only included in messages where they are specified to appear.""",SRV-MSG-PROC,1,"""Servers MUST abort the handshake with an 'illegal_parameter' alert if an extension is received in an unexpected message."""
21,4.2.. Handshake Protocol_Extensions,Extension Order and Uniqueness,CLI-MSG-CONST,1,"""Clients MAY place extensions in any order in the ClientHello, except the ""pre_shared_key"" extension which MUST be last.""",SRV-MSG-PROC,1,"""Servers MUST ensure the ""pre_shared_key"" extension is the last extension in ClientHello."""
22,4.2.. Handshake Protocol_Extensions,Extension Order and Uniqueness,CLI-MSG-CONST,1,"""Clients MUST NOT include more than one extension of the same type in any extension block.""",SRV-MSG-PROC,1,"""Servers MUST reject ClientHello messages with duplicate extension types."""
23,4.2.1.. Handshake Protocol_Extensions_Supported Versions,ClientHello Requirements,CLI-MSG-CONST,1,"""Clients MUST send the 'Supported Versions' extension in ClientHello, containing all TLS versions they are prepared to negotiate, including at least 0x0304.""",SRV-MSG-PROC,1,"""Servers MUST process the 'Supported Versions' extension and validate that it includes all versions of TLS that the client is prepared to negotiate."""
24,4.2.1.. Handshake Protocol_Extensions_Supported Versions,ClientHello Requirements,CLI-MSG-CONST,1,"""If previous versions of TLS are allowed for negotiation, they MUST also be included in the 'Supported Versions' extension.""",SRV-MSG-PROC,1,"""Servers MUST ensure that any previous TLS versions permitted for negotiation are present in the 'Supported Versions' extension."""
25,4.2.1.. Handshake Protocol_Extensions_Supported Versions,Server Behavior With the Extension,CLI-MSG-CONST,1,"""Clients MUST include the ""supported_versions"" extension in ClientHello for server version negotiation.""",SRV-MSG-PROC,1,"""Servers MUST NOT use ClientHello.legacy_version for version negotiation if the ""supported_versions"" extension is present; they MUST use the versions specified in that extension."""
26,4.2.1.. Handshake Protocol_Extensions_Supported Versions,Server Behavior With the Extension,CLI-MSG-CONST,1,"""Clients MUST ensure that the ""supported_versions"" extension lists all TLS versions they support.""",SRV-MSG-PROC,1,"""Servers MUST select a TLS version from the ""supported_versions"" extension and MUST ignore any unknown versions present."""
27,4.2.1.. Handshake Protocol_Extensions_Supported Versions,Negotiation of Versions Prior to TLS 1.2,CLI-MSG-CONST,1,"""Clients that support prior versions of TLS SHOULD include TLS 1.2 in their supported versions list.""",SRV-MSG-PROC,1,"""Servers MUST be prepared to receive ClientHellos with this extension, and handle cases where 0x0304 (TLS 1.3) is not included in the list of versions."""
28,4.2.1.. Handshake Protocol_Extensions_Supported Versions,Client Checks for the Supported Versions Extension,CLI-MSG-CONST,1,"""Clients MUST check for the 'supported_versions' extension prior to processing the rest of the ServerHello.""",SRV-MSG-PROC,1,"""If the 'supported_versions' extension is present, clients MUST ignore the ServerHello.legacy_version value."""
29,4.2.1.. Handshake Protocol_Extensions_Supported Versions,Client Checks for the Supported Versions Extension,CLI-MSG-CONST,1,"""Clients MUST use only the 'supported_versions' extension to determine the selected version.""",SRV-MSG-PROC,1,"""If the 'supported_versions' extension contains a version not offered by the client or a version prior to TLS 1.3, clients MUST abort the handshake with an 'illegal_parameter' alert."""
30,4.2.2.. Handshake Protocol_Extensions_Cookie,HelloRetryRequest Cookie Extension,CLI-MSG-CONST,1,"""Clients MUST copy the contents of the 'cookie' extension received in the HelloRetryRequest into a 'cookie' extension in the new ClientHello.""",SRV-MSG-PROC,1,"""Servers MAY include a 'cookie' extension in the HelloRetryRequest to the client."""
31,4.2.2.. Handshake Protocol_Extensions_Cookie,HelloRetryRequest Cookie Extension,CLI-MSG-CONST,1,"""Clients MUST NOT use cookies in their initial ClientHello in subsequent connections.""",SRV-MSG-PROC,0,"""No server-side processing rule regarding the prohibition of using cookies in initial ClientHello messages."""
32,4.2.3.. Handshake Protocol_Extensions_Signature Algorithms,Client Requirements for Signature Algorithms,CLI-MSG-CONST,1,"""Clients MUST send the ""signature_algorithms"" extension if they desire server authentication via a certificate.""",SRV-MSG-PROC,1,"""Servers MUST abort the handshake with a ""missing_extension"" alert if the client has not sent the ""signature_algorithms"" extension while authenticating via a certificate."""
33,4.2.3.. Handshake Protocol_Extensions_Signature Algorithms,RSASSA-PSS Algorithms,CLI-MSG-CONST,1,"""Clients MUST specify a signature algorithm using RSASSA-PSS with mask generation function 1, ensuring that the Salt length equals the output length of the digest algorithm.""",SRV-MSG-PROC,1,"""Servers MUST validate that the Salt length matches the output length of the specified digest algorithm."""
34,4.2.3.. Handshake Protocol_Extensions_Signature Algorithms,TLS 1.2 Compatibility,CLI-MSG-CONST,1,"""Clients negotiating TLS 1.2 MUST comply with the requirements of RFC5246. Clients MAY omit the signature algorithms extension in ClientHellos.""",SRV-MSG-PROC,1,"""Servers MUST ensure that legacy signature algorithm pairs, which are deprecated, MUST NOT be offered or negotiated."""
35,4.2.5.. Handshake Protocol_Extensions_OID Filters,Filters List Description,CLI-MSG-CONST,1,"""Clients MUST include all specified certificate extension OIDs in the client certificate if the server provides a non-empty filters list.""",SRV-MSG-PROC,1,"""Servers MUST ensure that the client certificate contains all specified extension OIDs that the client recognizes from the filters list."""
36,4.2.5.. Handshake Protocol_Extensions_OID Filters,Client Certificate Requirements,CLI-MSG-CONST,1,"""Clients MUST ensure that all specified values for recognized extension OIDs are present in the client certificate, although the certificate MAY contain additional values.""",SRV-MSG-PROC,1,"""Servers MAY choose to continue the connection without client authentication or abort the handshake with an 'unsupported_certificate' alert if the client ignores required certificate extension OIDs."""
37,4.2.5.. Handshake Protocol_Extensions_OID Filters,Client Certificate Requirements,CLI-MSG-CONST,1,"""Clients MUST ignore and skip any unrecognized certificate extension OIDs.""",SRV-MSG-PROC,1,"""Servers MUST handle the absence of required certificate extension OIDs appropriately, based on the client's compliance."""
38,4.2.5.. Handshake Protocol_Extensions_OID Filters,OID Uniqueness and Matching Rules,CLI-MSG-CONST,1,"""Clients MUST NOT include the same OID more than once in the filters list.""",SRV-MSG-PROC,1,"""Servers MUST ensure that no OID appears more than once in the filters list."""
39,4.2.5.. Handshake Protocol_Extensions_OID Filters,OID Uniqueness and Matching Rules,CLI-MSG-CONST,1,"""Clients MUST assert all key usage bits in the request that are also in the Key Usage certificate extension.""",SRV-MSG-PROC,1,"""Servers MUST verify that all key usage bits asserted in the request are present in the Key Usage certificate extension."""
40,4.2.5.. Handshake Protocol_Extensions_OID Filters,OID Uniqueness and Matching Rules,CLI-MSG-CONST,1,"""Clients MUST assert all key purpose OIDs present in the request that are found in the Extended Key Usage certificate extension.""",SRV-MSG-PROC,1,"""Servers MUST check that all key purpose OIDs in the request are present in the Extended Key Usage certificate extension."""
41,4.2.5.. Handshake Protocol_Extensions_OID Filters,OID Uniqueness and Matching Rules,CLI-MSG-CONST,1,"""Clients MUST NOT use the anyExtendedKeyUsage OID in the request.""",SRV-MSG-PROC,1,"""Servers MUST reject requests using the anyExtendedKeyUsage OID."""
42,4.2.8.. Handshake Protocol_Extensions_Key Share,Client Shares Description,CLI-MSG-CONST,1,"""Clients MUST offer KeyShareEntry values corresponding to groups in the 'supported_groups' extension, listed in descending order of preference. The client_shares vector MAY be empty if requesting a HelloRetryRequest.""",SRV-MSG-PROC,1,"""Servers MUST validate that each KeyShareEntry corresponds to a group in the 'supported_groups' extension and appears in the correct order."""
43,4.2.8.. Handshake Protocol_Extensions_Key Share,KeyShare Entry Rules,CLI-MSG-CONST,1,"""Clients MUST offer KeyShareEntry values only for groups listed in the 'supported_groups' extension and MUST NOT offer multiple KeyShareEntry values for the same group.""",SRV-MSG-PROC,1,"""Servers MAY check for violations of KeyShareEntry rules and abort the handshake with an 'illegal_parameter' alert if any rule is violated."""
44,4.2.8.. Handshake Protocol_Extensions_Key Share,Selected Group Verification,CLI-MSG-CONST,1,"""Clients MUST verify that the selected_group field in HelloRetryRequest corresponds to a group in the 'supported_groups' extension of the original ClientHello and does not correspond to a group in the 'key_share' extension of the original ClientHello.""",SRV-MSG-PROC,1,"""Servers MUST ensure that clients abort the handshake with an 'illegal_parameter' alert if the selected_group verification fails."""
45,4.2.8.. Handshake Protocol_Extensions_Key Share,Verification of Selected NamedGroup,CLI-MSG-CONST,1,"""Clients MUST verify that the selected NamedGroup in the ServerHello matches the NamedGroup in the HelloRetryRequest when using (EC)DHE key establishment.""",SRV-MSG-PROC,1,"""Servers MUST ensure that the NamedGroup selection is consistent between the HelloRetryRequest and ServerHello."""
46,4.2.8.. Handshake Protocol_Extensions_Key Share,Verification of Selected NamedGroup,CLI-MSG-CONST,1,"""If the NamedGroup verification fails, the client MUST abort the handshake and send an 'illegal_parameter' alert.""",SRV-MSG-PROC,0,"""Servers should be prepared to handle ClientHello messages that may lead to an 'illegal_parameter' alert due to NamedGroup mismatch."""
47,4.2.8.1.. Handshake Protocol_Extensions_Key Share_Diffie-Hellman Parameters,Public Key Validation,CLI-MSG-CONST,1,"""Clients MUST validate that their own public key Y satisfies the condition 1 < Y < p-1.""",SRV-MSG-PROC,1,"""Servers MUST also validate that the public key Y of the remote peer satisfies the condition 1 < Y < p-1."""
48,4.2.8.2.. Handshake Protocol_Extensions_Key Share_ECDHE Parameters,Public Value Validation,CLI-MSG-CONST,1,"""Peers MUST validate each other's public value Q by ensuring Q is a valid point on the elliptic curve, specifically checking that Q is not the point at infinity, that both integers x and y are within the correct interval, and that (x, y) satisfies the elliptic curve equation.""",SRV-MSG-PROC,1,"""Servers MUST verify the public value Q following the specified steps: ensuring Q is not the point at infinity, confirming x and y are in the correct interval, and checking that (x, y) satisfies the elliptic curve equation."""
49,4.2.9.. Handshake Protocol_Extensions_Pre-Shared Key Exchange Modes,PSK Key Exchange Modes Extension Overview,CLI-MSG-CONST,1,"""Clients MUST send a 'psk_key_exchange_modes' extension to indicate the supported modes for PSK usage.""",SRV-MSG-PROC,1,"""Servers MUST interpret the 'psk_key_exchange_modes' extension to restrict PSK options based on the client's capabilities."""
50,4.2.9.. Handshake Protocol_Extensions_Pre-Shared Key Exchange Modes,Client Requirements for PSK Extensions,CLI-MSG-CONST,1,"""Clients MUST provide a 'psk_key_exchange_modes' extension if they offer a 'pre_shared_key' extension.""",SRV-MSG-PROC,1,"""Servers MUST abort the handshake if clients offer 'pre_shared_key' without a 'psk_key_exchange_modes' extension."""
51,4.2.9.. Handshake Protocol_Extensions_Pre-Shared Key Exchange Modes,Client Requirements for PSK Extensions,CLI-MSG-CONST,1,"""Clients MUST ensure that the key exchange mode offered is compatible with the modes advertised.""",SRV-MSG-PROC,1,"""Servers MUST NOT select a key exchange mode that is not listed by the client."""
52,4.2.9.. Handshake Protocol_Extensions_Pre-Shared Key Exchange Modes,Client Requirements for PSK Extensions,CLI-MSG-CONST,0,"""Clients SHOULD be aware that if a server sends NewSessionTicket with incompatible tickets, the client's attempts at resumption may fail.""",SRV-MSG-PROC,0,"""Servers SHOULD NOT send NewSessionTicket with tickets that are not compatible with the advertised modes."""
53,4.2.9.. Handshake Protocol_Extensions_Pre-Shared Key Exchange Modes,Key Exchange Mode Descriptions,CLI-MSG-CONST,1,"""In the psk_dhe_ke mode, both the client and server MUST supply 'key_share' values.""",SRV-MSG-PROC,1,"""Servers MUST provide 'key_share' values in psk_dhe_ke mode as specified in Section 4.2.8."""
54,4.2.10.. Handshake Protocol_Extensions_Early Data Indication,Early Data Indication Overview,CLI-MSG-CONST,1,"""Clients MUST supply both the ""pre_shared_key"" and ""early_data"" extensions when using PSK with early data.""",SRV-MSG-PROC,0,"""Servers must handle the early data if both extensions are provided, but no specific requirement is detailed."""
55,4.2.10.. Handshake Protocol_Extensions_Early Data Indication,Parameters for 0-RTT Data,CLI-MSG-CONST,1,"""Clients MUST use the first PSK listed in the 'pre_shared_key' extension to encrypt early data.""",SRV-MSG-PROC,1,"""Servers MUST validate that the PSK used to encrypt early data is the first PSK listed in the client's 'pre_shared_key' extension."""
56,4.2.10.. Handshake Protocol_Extensions_Early Data Indication,Error Handling for Early Data,CLI-MSG-CONST,1,"""Clients MUST handle the case where the server rejects a 0-RTT handshake by ensuring that no 0-RTT records are sent if the server does not support them.""",SRV-MSG-PROC,1,"""Servers MUST NOT respond with the extension if any checks fail and MUST discard all first-flight data, falling back to 1-RTT or 2-RTT."""
57,4.2.10.. Handshake Protocol_Extensions_Early Data Indication,Error Handling for Early Data,CLI-MSG-CONST,1,"""Clients MUST expect that if the server rejects the 0-RTT handshake, it will not have the 0-RTT record protection keys.""",SRV-MSG-PROC,1,"""Servers MUST use trial decryption to find the first non-0-RTT message when rejecting 0-RTT handshakes."""
58,4.2.11.. Handshake Protocol_Extensions_Pre-Shared Key Extension,Field Descriptions,CLI-MSG-CONST,1,"""Clients MUST provide a label for a key, which can be a ticket or a pre-shared key label.""",SRV-MSG-PROC,1,"""Servers MUST recognize and utilize the identity label provided by the client."""
59,4.2.11.. Handshake Protocol_Extensions_Pre-Shared Key Extension,Field Descriptions,CLI-MSG-CONST,1,"""Clients SHOULD use an obfuscated_ticket_age of 0 for externally established identities, which servers MUST ignore.""",SRV-MSG-PROC,1,"""Servers MUST ignore the obfuscated_ticket_age value when it is 0."""
60,4.2.11.. Handshake Protocol_Extensions_Pre-Shared Key Extension,Field Descriptions,CLI-MSG-CONST,1,"""Clients MUST send a list of identities they are willing to negotiate, using the first identity for 0-RTT data if 'early_data' is also sent.""",SRV-MSG-PROC,1,"""Servers MUST select the first identity from the identities list for processing 0-RTT data if the 'early_data' extension is present."""
61,4.2.11.. Handshake Protocol_Extensions_Pre-Shared Key Extension,Field Descriptions,CLI-MSG-CONST,1,"""Clients MUST provide binders as HMAC values for each identity in the identities list.""",SRV-MSG-PROC,1,"""Servers MUST validate the binders against the identities provided."""
62,4.2.11.. Handshake Protocol_Extensions_Pre-Shared Key Extension,Field Descriptions,CLI-MSG-CONST,1,"""Clients MUST indicate the server's chosen identity as a (0-based) index into the identities list.""",SRV-MSG-PROC,1,"""Servers MUST confirm the selected_identity index corresponds to an identity in the client's list."""
63,4.2.11.. Handshake Protocol_Extensions_Pre-Shared Key Extension,PSK Hash Algorithm,CLI-MSG-CONST,1,"""Externally established PSKs MUST have the Hash algorithm set during establishment or default to SHA-256 if no algorithm is defined.""",SRV-MSG-PROC,1,"""The server MUST ensure that it selects a compatible PSK and cipher suite."""
64,4.2.11.. Handshake Protocol_Extensions_Pre-Shared Key Extension,PSK Hash Algorithm,CLI-MSG-CONST,1,"""For PSKs established via the ticket mechanism, the Hash algorithm is the KDF Hash algorithm from the connection where the ticket was established.""",SRV-MSG-PROC,0,"""Servers use the KDF Hash algorithm from the connection for PSKs established via the ticket mechanism."""
65,4.2.11.. Handshake Protocol_Extensions_Pre-Shared Key Extension,Client Verification,CLI-MSG-CONST,1,"""Clients MUST verify that the selected_identity is within the supplied range, that the selected cipher suite indicates a Hash associated with the PSK, and that a server 'key_share' extension is present if required by the 'psk_key_exchange_modes' extension.""",SRV-MSG-PROC,1,"""Servers MUST ensure the selected_identity, cipher suite, and 'key_share' extension are consistent with the ClientHello parameters."""
66,4.2.11.. Handshake Protocol_Extensions_Pre-Shared Key Extension,Client Verification,CLI-MSG-CONST,1,"""Clients MUST abort the handshake with an 'illegal_parameter' alert if the verification of the selected_identity, cipher suite, or 'key_share' extension fails.""",SRV-MSG-PROC,1,"""Servers MUST handle the 'illegal_parameter' alert appropriately, ensuring the handshake is terminated correctly."""
67,4.2.11.. Handshake Protocol_Extensions_Pre-Shared Key Extension,Early Data Handling,CLI-MSG-CONST,1,"""Clients MUST verify that the server's selected_identity is 0 if the server supplies an ""early_data"" extension.""",SRV-MSG-PROC,0,"""If the server supplies an ""early_data"" extension, it must ensure the selected_identity is set appropriately."""
68,4.2.11.. Handshake Protocol_Extensions_Pre-Shared Key Extension,Early Data Handling,CLI-MSG-CONST,1,"""Clients MUST abort the handshake with an ""illegal_parameter"" alert if any value other than 0 is returned for selected_identity.""",SRV-MSG-PROC,0,"""Servers must ensure proper handling of selected_identity values to avoid handshake failures."""
69,4.2.11.. Handshake Protocol_Extensions_Pre-Shared Key Extension,Extension Positioning,CLI-MSG-CONST,1,"""Clients MUST place the ""pre_shared_key"" extension last in the ClientHello.""",SRV-MSG-PROC,1,"""Servers MUST check that the ""pre_shared_key"" extension is the last extension in ClientHello and fail the handshake with an ""illegal_parameter"" alert if it is not."""
70,4.2.11.1.. Handshake Protocol_Extensions_Pre-Shared Key Extension_Ticket Age,Client Ticket Age Handling,CLI-MSG-CONST,1,"""Clients MUST consider the ticket age as the time since receiving the NewSessionTicket message and MUST NOT use tickets with ages greater than the 'ticket_lifetime' value.""",SRV-MSG-PROC,1,"""Servers must ensure that clients do not use tickets exceeding the specified 'ticket_lifetime' during session resumption."""
71,4.2.11.3.. Handshake Protocol_Extensions_Pre-Shared Key Extension_Processing Order,0-RTT Data Streaming and Processing Order,CLI-MSG-CONST,1,"""Clients are permitted to stream 0-RTT data until they receive the server's Finished message. They must send the EndOfEarlyData message after receiving this.""",SRV-MSG-PROC,1,"""Servers MUST process the client's ClientHello and immediately send their flight of messages, rather than waiting for the client's EndOfEarlyData message before sending its ServerHello."""
72,4.3.1.. Handshake Protocol_Server Parameters_Encrypted Extensions,Purpose of EncryptedExtensions,CLI-MSG-CONST,1,"""Clients MUST check the EncryptedExtensions message for forbidden extensions.""",SRV-MSG-PROC,1,"""If forbidden extensions are found in the EncryptedExtensions message, clients MUST abort the handshake with an 'illegal_parameter' alert."""
73,4.4.2.. Handshake Protocol_Authentication Messages_Certificate,Certificate Message Overview,CLI-MSG-CONST,1,"""If the server requests client authentication but no suitable certificate is available, the client MUST send a Certificate message with an empty certificate_list.""",SRV-MSG-PROC,1,"""The server MUST accept a Certificate message with an empty certificate_list when the client has no certificates."""
74,4.4.2.. Handshake Protocol_Authentication Messages_Certificate,Certificate Message Overview,CLI-MSG-CONST,1,"""A Finished message MUST be sent by both parties regardless of whether the Certificate message is empty.""",SRV-MSG-PROC,1,"""The server MUST send a Finished message after processing the Certificate message."""
75,4.4.2.. Handshake Protocol_Authentication Messages_Certificate,Handling Certificate List Ordering,CLI-MSG-CONST,1,"""Clients SHOULD be prepared to handle potentially extraneous certificates and arbitrary orderings from any TLS version, but the end-entity certificate MUST be first.""",SRV-MSG-PROC,1,"""Servers MUST ensure that the end-entity certificate is the first in the certificate_list."""
76,4.4.2.. Handshake Protocol_Authentication Messages_Certificate,RawPublicKey Certificate Type,CLI-MSG-CONST,1,"""If the RawPublicKey certificate type is negotiated, the certificate_list MUST contain no more than one CertificateEntry.""",SRV-MSG-PROC,1,"""Servers MUST validate that the certificate_list contains at most one CertificateEntry with an ASN1_subjectPublicKeyInfo value."""
77,4.4.2.. Handshake Protocol_Authentication Messages_Certificate,OpenPGP Certificate Type,CLI-MSG-CONST,1,"""Clients MUST NOT use the OpenPGP certificate type with TLS 1.3.""",SRV-MSG-PROC,1,"""Servers MUST reject any authentication message that includes the OpenPGP certificate type."""
78,4.4.2.1.. Handshake Protocol_Authentication Messages_Certificate_OCSP Status and SCT Extensions,Deprecation of status_request_v2 Extension,CLI-MSG-CONST,1,"""Clients MAY include the status_request_v2 extension in ClientHello messages, but it is deprecated.""",SRV-MSG-PROC,1,"""Servers MUST NOT act upon the presence of the status_request_v2 extension in ClientHello messages and MUST NOT include it in EncryptedExtensions, CertificateRequest, or Certificate messages."""
79,4.4.2.1.. Handshake Protocol_Authentication Messages_Certificate_OCSP Status and SCT Extensions,Deprecation of status_request_v2 Extension,CLI-MSG-CONST,1,"""Clients MAY send the status_request_v2 extension in ClientHello, intending to use it with earlier TLS versions.""",SRV-MSG-PROC,1,"""Servers MUST be able to process ClientHello messages that include the deprecated status_request_v2 extension."""
80,4.4.2.1.. Handshake Protocol_Authentication Messages_Certificate_OCSP Status and SCT Extensions,Client OCSP Response Request,CLI-MSG-CONST,1,"""Clients MAY send an OCSP response if a server requests it via an empty 'status_request' extension in the CertificateRequest message. If sent, the body of the 'status_request' extension MUST be a CertificateStatus structure as defined in [RFC6066].""",SRV-MSG-PROC,1,"""Servers MUST process the 'status_request' extension and validate the CertificateStatus structure if the client opts to send an OCSP response."""
81,4.4.2.2.. Handshake Protocol_Authentication Messages_Certificate_Server Certificate Selection,Client Handling of Certificate Chains,CLI-MSG-CONST,1,"""Clients MUST construct an acceptable chain using provided certificates or decide to abort the handshake.""",SRV-MSG-PROC,1,"""If the client aborts the handshake, it MUST send an appropriate certificate-related alert, defaulting to 'unsupported_certificate'."""
82,4.4.2.3.. Handshake Protocol_Authentication Messages_Certificate_Client Certificate Selection,Client Certificate Selection Rules,CLI-MSG-CONST,1,"""Clients MUST send certificates of type X.509v3 unless explicitly negotiated otherwise.""",SRV-MSG-PROC,1,"""Servers MUST validate that the client certificate is of type X.509v3 unless a different type has been negotiated."""
83,4.4.2.3.. Handshake Protocol_Authentication Messages_Certificate_Client Certificate Selection,Client Certificate Selection Rules,CLI-MSG-CONST,1,"""If the ""certificate_authorities"" extension in the CertificateRequest message is present, at least one certificate in the chain SHOULD be issued by one of the listed CAs.""",SRV-MSG-PROC,1,"""Servers SHOULD check that at least one certificate in the chain is issued by one of the CAs listed in the ""certificate_authorities"" extension."""
84,4.4.2.3.. Handshake Protocol_Authentication Messages_Certificate_Client Certificate Selection,Client Certificate Selection Rules,CLI-MSG-CONST,1,"""Clients MUST ensure that certificates are signed using an acceptable signature algorithm as specified in Section 4.3.2.""",SRV-MSG-PROC,1,"""Servers MUST verify that the signature algorithm used to sign the certificates is acceptable as defined in Section 4.3.2."""
85,4.4.2.3.. Handshake Protocol_Authentication Messages_Certificate_Client Certificate Selection,Client Certificate Selection Rules,CLI-MSG-CONST,1,"""If the CertificateRequest message contains a non-empty ""oid_filters"" extension, the end-entity certificate MUST match the recognized OIDs.""",SRV-MSG-PROC,1,"""Servers MUST check that the end-entity certificate matches the OIDs specified in the ""oid_filters"" extension."""
86,4.4.2.4.. Handshake Protocol_Authentication Messages_Certificate_Receiving a Certificate Message,Server Certificate Handling,CLI-MSG-CONST,1,"""Clients MUST abort the handshake if the server supplies an empty Certificate message.""",SRV-MSG-PROC,1,"""Servers MUST ensure that they do not send an empty Certificate message to avoid client handshake abort."""
87,4.4.2.4.. Handshake Protocol_Authentication Messages_Certificate_Receiving a Certificate Message,Signature Algorithm Restrictions,CLI-MSG-CONST,1,"""Endpoints MUST abort the handshake with a ""bad_certificate"" alert if they receive a certificate requiring validation using an MD5 hash.""",SRV-MSG-PROC,1,"""Servers MUST reject any certificate using MD5 for validation with a ""bad_certificate"" alert."""
88,4.4.2.4.. Handshake Protocol_Authentication Messages_Certificate_Receiving a Certificate Message,Signature Algorithm Restrictions,CLI-MSG-CONST,1,"""It is RECOMMENDED that endpoints abort the handshake with a ""bad_certificate"" alert if they receive a certificate requiring validation using a SHA-1 hash.""",SRV-MSG-PROC,1,"""Servers are RECOMMENDED to reject certificates validated using SHA-1 with a ""bad_certificate"" alert."""
89,4.4.3.. Handshake Protocol_Authentication Messages_Certificate Verify,Signature Algorithm Requirements,CLI-MSG-CONST,1,"""If the CertificateVerify message is sent by a client, the signature algorithm used in the signature MUST be one of those present in the supported_signature_algorithms field of the ""signature_algorithms"" extension in the CertificateRequest message.""",SRV-MSG-PROC,1,"""Servers MUST validate that the signature algorithm used in the client's CertificateVerify message corresponds to the supported signature algorithms from the client's CertificateRequest."""
90,4.4.3.. Handshake Protocol_Authentication Messages_Certificate Verify,Signature Algorithm Compatibility,CLI-MSG-CONST,1,"""The signature algorithm MUST be compatible with the key in the sender's end-entity certificate.""",SRV-MSG-PROC,1,"""Servers MUST verify that the signature algorithm used is compatible with the key in the sender's end-entity certificate."""
91,4.4.3.. Handshake Protocol_Authentication Messages_Certificate Verify,Signature Algorithm Compatibility,CLI-MSG-CONST,1,"""RSA signatures MUST use an RSASSA-PSS algorithm, regardless of the presence of RSASSA-PKCS1-v1_5 algorithms in 'signature_algorithms'.""",SRV-MSG-PROC,1,"""Servers MUST ensure that RSA signatures use the RSASSA-PSS algorithm."""
92,4.4.3.. Handshake Protocol_Authentication Messages_Certificate Verify,Signature Algorithm Compatibility,CLI-MSG-CONST,1,"""The SHA-1 algorithm MUST NOT be used in any signatures of CertificateVerify messages.""",SRV-MSG-PROC,1,"""Servers MUST reject CertificateVerify messages that use the SHA-1 algorithm in signatures."""
93,4.4.4.. Handshake Protocol_Authentication Messages_Finished,Finished Message Overview,CLI-MSG-CONST,1,"""Clients MUST ensure the Finished message is correctly constructed to provide authentication of the handshake and computed keys.""",SRV-MSG-PROC,1,"""Servers MUST verify the correctness of the Finished message contents and terminate the connection with a ""decrypt_error"" alert if incorrect."""
94,4.5.. Handshake Protocol_End of Early Data,EndOfEarlyData Message Overview,CLI-MSG-CONST,1,"""Clients MUST send an EndOfEarlyData message after receiving the server's Finished if the server sent an 'early_data' extension in EncryptedExtensions.""",SRV-MSG-PROC,1,"""Servers MUST ensure the EndOfEarlyData message is sent only if the 'early_data' extension was included in EncryptedExtensions."""
95,4.5.. Handshake Protocol_End of Early Data,EndOfEarlyData Message Overview,CLI-MSG-CONST,1,"""Clients MUST NOT send an EndOfEarlyData message if the server did not send an 'early_data' extension in EncryptedExtensions.""",SRV-MSG-PROC,1,"""Servers MUST reject any EndOfEarlyData messages received if the 'early_data' extension was not sent."""
96,4.6.1.. Handshake Protocol_Post-Handshake Messages_New Session Ticket Message,Ticket Resumption Requirements,CLI-MSG-CONST,1,"""Clients MUST only attempt to resume a session with a cipher suite that uses the same KDF hash algorithm as the original connection.""",SRV-MSG-PROC,1,"""Servers MUST verify that the cipher suite used for resumption matches the KDF hash algorithm of the original session."""
97,4.6.1.. Handshake Protocol_Post-Handshake Messages_New Session Ticket Message,Ticket Resumption Requirements,CLI-MSG-CONST,1,"""Clients MUST only resume if the new SNI value is valid for the server certificate presented in the original session.""",SRV-MSG-PROC,1,"""Servers MUST ensure the new SNI value is valid for the certificate used in the original session."""
98,4.6.1.. Handshake Protocol_Post-Handshake Messages_New Session Ticket Message,Ticket Resumption Requirements,CLI-MSG-CONST,0,"""Clients SHOULD only resume if the SNI value matches the one used in the original session.""",SRV-MSG-PROC,0,"""Servers SHOULD prefer to validate that the SNI value matches the original session's SNI."""
99,4.6.1.. Handshake Protocol_Post-Handshake Messages_New Session Ticket Message,Ticket Resumption Requirements,CLI-MSG-CONST,0,"""Clients MAY resume with a different SNI value if indicated externally or by other means.""",SRV-MSG-PROC,0,"""Servers MAY accept a session resume with a different SNI value if appropriately indicated."""
100,4.6.1.. Handshake Protocol_Post-Handshake Messages_New Session Ticket Message,SNI Value Reporting,CLI-MSG-CONST,1,"""Clients MUST use the SNI value sent in the resumption ClientHello when reporting to the calling application.""",SRV-MSG-PROC,1,"""Servers MUST ensure that the SNI value reported corresponds to the value sent in the resumption ClientHello."""
101,4.6.1.. Handshake Protocol_Post-Handshake Messages_New Session Ticket Message,SNI Value Reporting,CLI-MSG-CONST,0,"""If all PSK identities with different SNI values are declined, both SNI values must be the same.""",SRV-MSG-PROC,0,"""Servers must ensure consistency between the SNI values when all PSK identities are declined."""
102,4.6.2.. Handshake Protocol_Post-Handshake Messages_Post-Handshake Authentication,Post-Handshake Authentication Overview,CLI-MSG-CONST,1,"""Clients MUST respond to a CertificateRequest with appropriate Authentication messages, including Certificate, CertificateVerify, and Finished if they choose to authenticate.""",SRV-MSG-PROC,1,"""Servers MAY request client authentication at any time after the handshake completion by sending a CertificateRequest message."""
103,4.6.2.. Handshake Protocol_Post-Handshake Messages_Post-Handshake Authentication,Post-Handshake Authentication Overview,CLI-MSG-CONST,1,"""If the client declines to authenticate, it MUST send a Certificate message containing no certificates followed by Finished.""",SRV-MSG-PROC,1,"""Servers MUST ensure that all of the client's messages for a given response appear consecutively on the wire with no intervening messages of other types."""
104,4.6.2.. Handshake Protocol_Post-Handshake Messages_Post-Handshake Authentication,CertificateRequest Handling,CLI-MSG-CONST,1,"""Clients MUST send an 'unexpected_message' fatal alert if they receive a CertificateRequest message without having sent the 'post_handshake_auth' extension.""",SRV-MSG-PROC,0,"""Servers sending a CertificateRequest must ensure that clients can handle the request appropriately based on the 'post_handshake_auth' extension."""
105,4.6.2.. Handshake Protocol_Post-Handshake Messages_Post-Handshake Authentication,Client Response Timing Considerations,CLI-MSG-CONST,1,"""Clients MAY respond to multiple CertificateRequests in a different order than they were received.""",SRV-MSG-PROC,1,"""Servers MUST be prepared for delays and the possibility of receiving other messages between sending the CertificateRequest and receiving a response."""
106,4.6.3.. Handshake Protocol_Post-Handshake Messages_Key and Initialization Vector Update,request_update Field Description,CLI-MSG-CONST,1,"""The request_update field indicates whether the recipient should respond with its own KeyUpdate.""",SRV-MSG-PROC,1,"""If an implementation receives any value other than the expected value, it MUST terminate the connection with an 'illegal_parameter' alert."""
