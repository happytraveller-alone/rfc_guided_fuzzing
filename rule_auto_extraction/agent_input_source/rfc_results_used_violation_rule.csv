ID,Title,Content,RuleMatch,ExtractedRule,SlicedRule,Violation
4,Order of Protocol Messages,Protocol messages must be sent in the order defined in Section 4.4.1 and shown in the diagrams in Section 2.,1,<CMC> <1> (Clients MUST send protocol messages in the order defined in Section 4.4.1.) + <SMP> <1> (Servers MUST process protocol messages in the order defined in Section 4.4.1.),<CMC> <1> (Clients MUST send protocol messages in the order defined in Section 4.4.1.) + <SMP> <1> (Servers MUST process protocol messages in the order defined in Section 4.4.1.),"```markdown
{CMC} (Send a ClientHello message followed by a ServerHello message without waiting for the server's response.)

{CMC} (Send a ClientHello message followed by an ApplicationData message, bypassing the required handshake messages.)

{CMC} (Send multiple ClientHello messages in quick succession without waiting for a response, violating the protocol message ordering.)
```"
5,Handling Unexpected Message Orders,"A peer that receives a handshake message in an unexpected order must abort the handshake with an ""unexpected_message"" alert.",1,"<CMC> <1> (Clients MUST abort the handshake with an ""unexpected_message"" alert if they receive a handshake message in an unexpected order.) + <SMP> <1> (Servers MUST abort the handshake with an ""unexpected_message"" alert if they receive a handshake message in an unexpected order.)","<CMC> <1> (Clients MUST abort the handshake with an ""unexpected_message"" alert if they receive a handshake message in an unexpected order.) + <SMP> <1> (Servers MUST abort the handshake with an ""unexpected_message"" alert if they receive a handshake message in an unexpected order.)","```markdown
{CMC} (Send a ClientHello message followed by a ServerHello message without waiting for a response from the server, violating the expected message order.)

{CMC} (Include a Certificate message in the ClientHello that is only valid for a different protocol version, causing a mismatch in expected message processing.)

{CMC} (Omit the required ""extensions"" field in the ClientHello message entirely, leading to a malformed handshake initiation.)
```"
19,Session ID Echo,"legacy_session_id_echo contains the client's session ID, which must match the client's sent value; otherwise, the handshake is aborted with an ""illegal_parameter"" alert.",1,"<CMC> <1> (Clients' session ID in legacy_session_id_echo MUST match the sent value.) + <SMP> <1> (Servers MUST abort the handshake with an ""illegal_parameter"" alert if the session ID does not match.)","<CMC> <1> (Clients' session ID in legacy_session_id_echo MUST match the sent value.) + <SMP> <1> (Servers MUST abort the handshake with an ""illegal_parameter"" alert if the session ID does not match.)","```markdown
{CMC} (Send a ClientHello with a legacy_session_id_echo that contains a session ID not previously issued by the server.)

{CMC} (Include an empty legacy_session_id_echo field in the ClientHello, violating the requirement for a valid session ID.)

{CMC} (Send a ClientHello with a legacy_session_id_echo containing an arbitrary byte sequence that does not adhere to the session ID format.)
```"
21,Compression Method,The legacy_compression_method field must always have the value 0.,1,<CMC> <1> (Clients MUST set the legacy_compression_method field to 0.) + <SMP> <0> (Servers MUST accept the legacy_compression_method field with the value 0.),<CMC> <1> (Clients MUST set the legacy_compression_method field to 0.) + <SMP> <0> (Servers MUST accept the legacy_compression_method field with the value 0.),"```markdown
{CMC} (Set the legacy_compression_method field to an invalid value, such as 255, which is not defined in the specification.)

{CMC} (Omit the legacy_compression_method field entirely from the ClientHello message.)

{CMC} (Send the legacy_compression_method field as a string instead of an integer value.)
```"
22,Extensions Requirements,"The extensions field must include only those necessary for establishing the cryptographic context and must contain the ""supported_versions"" extension in all TLS 1.3 messages.",1,"```
<CMC> <1> (Clients MUST include only necessary extensions for establishing the cryptographic context and MUST contain the ""supported_versions"" extension in all TLS 1.3 messages.) + <SMP> <1> (Servers MUST process only necessary extensions for establishing the cryptographic context and MUST expect the ""supported_versions"" extension in all TLS 1.3 messages.)
```","<CMC> <1> (Clients MUST include only necessary extensions for establishing the cryptographic context and MUST contain the ""supported_versions"" extension in all TLS 1.3 messages.) + <SMP> <1> (Servers MUST process only necessary extensions for establishing the cryptographic context and MUST expect the ""supported_versions"" extension in all TLS 1.3 messages.)","```markdown
{CMC} (Send a ClientHello message that omits the ""supported_versions"" extension entirely.)

{CMC} (Include an unsupported or invalid extension in the ClientHello message that is not relevant to TLS 1.3.)

{CMC} (Send a ClientHello message with multiple unnecessary extensions that do not pertain to establishing the cryptographic context.)
```"
26,Client Checks for Downgrade,"TLS 1.3 clients must verify the last 8 bytes of the Random value to prevent downgrade attacks, and if a match is found, they must abort the handshake with an ""illegal_parameter"" alert.",1,"<CMC> <1> (Clients MUST verify the last 8 bytes of the Random value to prevent downgrade attacks.) + <SMP> <1> (Clients MUST abort the handshake with an ""illegal_parameter"" alert if a match is found.)","<CMC> <1> (Clients MUST verify the last 8 bytes of the Random value to prevent downgrade attacks.) + <SMP> <1> (Clients MUST abort the handshake with an ""illegal_parameter"" alert if a match is found.)","```markdown
{CMC} (Send a ClientHello with a Random value that has the last 8 bytes set to a known value, allowing potential downgrade attacks.)

{CMC} (Send a ClientHello where the Random value is entirely zeroed out, violating the requirement for entropy in the handshake.)

{CMC} (Send a ClientHello with the Random value containing non-ASCII characters, which is not allowed in the proper encoding.)
```"
27,Renegotiation Handling,"A legacy TLS client receiving a TLS 1.3 ServerHello during renegotiation must abort the handshake with a ""protocol_version"" alert, as renegotiation is not possible in TLS 1.3.",1,"<CMC> <1> (A legacy TLS client MUST abort the handshake with a ""protocol_version"" alert upon receiving a TLS 1.3 ServerHello during renegotiation.) + <SMP> <0> (Servers MUST not expect renegotiation in TLS 1.3.)","<CMC> <1> (A legacy TLS client MUST abort the handshake with a ""protocol_version"" alert upon receiving a TLS 1.3 ServerHello during renegotiation.) + <SMP> <0> (Servers MUST not expect renegotiation in TLS 1.3.)","```markdown
{CMC} (Send a ClientHello message with a legacy protocol version (e.g., TLS 1.2) while initiating a TLS 1.3 handshake)

{CMC} (Omit the required ""ClientHello"" extensions when sending a ClientHello in a TLS 1.3 handshake)

{CMC} (Include an invalid ""Session ID"" field in the ClientHello, exceeding the maximum length permitted by RFC 8446)
```"
30,Client Actions on Hello Retry Request,"Upon receiving a HelloRetryRequest, the client must check specific fields and process the extensions, starting with ""supported_versions."" It must abort the handshake with an ""illegal_parameter"" alert if no changes result from the HelloRetryRequest.",1,"<CMC> <1> (Clients MUST check specific fields and process the extensions upon receiving a HelloRetryRequest, starting with ""supported_versions."") + <CMP> <1> (Clients MUST abort the handshake with an ""illegal_parameter"" alert if no changes result from the HelloRetryRequest.)","<CMC> <1> (Clients MUST check specific fields and process the extensions upon receiving a HelloRetryRequest, starting with ""supported_versions."") + <CMP> <1> (Clients MUST abort the handshake with an ""illegal_parameter"" alert if no changes result from the HelloRetryRequest.)","```markdown
{CMC} (Send a ClientHello message without the ""supported_versions"" extension when responding to a HelloRetryRequest.)

{CMC} (Include a malformed or invalid extension in the ClientHello message after receiving a HelloRetryRequest.)

{CMC} (Omit the required ""key_share"" extension in the ClientHello message after a HelloRetryRequest.)
```"
31,Handling Multiple Hello Retry Requests,"If a client receives a second HelloRetryRequest in the same connection, it must abort the handshake with an ""unexpected_message"" alert.",1,"<CMC> <1> (Clients MUST abort the handshake with an ""unexpected_message"" alert upon receiving a second HelloRetryRequest in the same connection.) + <SMP> <0> (Servers MUST not send a second HelloRetryRequest in the same connection.)","<CMC> <1> (Clients MUST abort the handshake with an ""unexpected_message"" alert upon receiving a second HelloRetryRequest in the same connection.) + <SMP> <0> (Servers MUST not send a second HelloRetryRequest in the same connection.)","```markdown
{CMC} (Send a ClientHello message without including the mandatory ""client_version"" field, violating the required structure of the handshake.)

{CMC} (Send a ClientHello message with an invalid ""key_share"" extension that uses a curve not supported by the server, leading to a malformed key exchange.)

{CMC} (Send a second ClientHello message in the same connection without properly responding to the first HelloRetryRequest, violating the expected flow of the handshake.)
```"
32,Cipher Suite Negotiation,A client must abort the handshake if it receives a cipher suite not offered earlier. Servers must negotiate the same cipher suite when receiving an updated ClientHello.,1,<CMC> <1> (Clients MUST abort the handshake if they receive a cipher suite not offered earlier.) + <SMP> <1> (Servers MUST negotiate the same cipher suite when receiving an updated ClientHello.),<CMC> <1> (Clients MUST abort the handshake if they receive a cipher suite not offered earlier.) + <SMP> <1> (Servers MUST negotiate the same cipher suite when receiving an updated ClientHello.),"```markdown
{CMC} (Send a ClientHello message that includes an unsupported cipher suite, but do not abort the handshake.)

{CMC} (Send a ClientHello message with a cipher suite length field that is larger than the number of offered cipher suites.)

{CMC} (Send a second ClientHello message with a different set of cipher suites after receiving a response, violating the expectation to negotiate the same cipher suite.)
```"
40,Extension Message Restrictions,"If an implementation receives an extension not specified for the message, it must abort the handshake with an ""illegal_parameter"" alert.",1,"<CMC> <1> (Clients MUST abort the handshake with an ""illegal_parameter"" alert if an extension not specified for the message is received.) + <SMP> <0> (Servers MUST not accept extensions not specified for the message and must trigger an abort with an ""illegal_parameter"" alert.)","<CMC> <1> (Clients MUST abort the handshake with an ""illegal_parameter"" alert if an extension not specified for the message is received.) + <SMP> <0> (Servers MUST not accept extensions not specified for the message and must trigger an abort with an ""illegal_parameter"" alert.)","```markdown
{CMC} (Send a ClientHello message that includes an unsupported extension, violating the requirement to abort the handshake with an ""illegal_parameter"" alert.)

{CMC} (Omit the mandatory ""cipher_suites"" field in the ClientHello message, which should trigger an ""illegal_parameter"" alert.)

{CMC} (Include an invalid ""version"" field in the ClientHello message that exceeds the maximum allowed TLS version, which should cause an ""illegal_parameter"" alert.)
```"
42,Order of Extensions,"When multiple extensions are present, they may appear in any order, except for ""pre_shared_key,"" which must be last in ClientHello. No more than one extension of the same type may exist in a block.",1,"<CMC> <1> (Clients MAY include multiple extensions in any order, except for ""pre_shared_key,"" which MUST be last in the ClientHello.) + <SMP> <1> (Servers MUST process multiple extensions in any order, except for ""pre_shared_key,"" which MUST be last in the ClientHello.)
<CMC> <1> (Clients MUST not include more than one extension of the same type in a block.) + <SMP> <1> (Servers MUST reject multiple extensions of the same type in a block.)","<CMC> <1> (Clients MAY include multiple extensions in any order, except for ""pre_shared_key,"" which MUST be last in the ClientHello.) + <SMP> <1> (Servers MUST process multiple extensions in any order, except for ""pre_shared_key,"" which MUST be last in the ClientHello.)","```markdown
{CMC} (Include the ""pre_shared_key"" extension before other extensions in the ClientHello message.)

{CMC} (Send a ClientHello with duplicate ""pre_shared_key"" extensions, violating uniqueness constraints.)

{CMC} (Omit the ""pre_shared_key"" extension entirely from the ClientHello message, even when it is expected.)
```"
,,,,,<CMC> <1> (Clients MUST not include more than one extension of the same type in a block.) + <SMP> <1> (Servers MUST reject multiple extensions of the same type in a block.),"```markdown
{CMC} (Include multiple extensions of the same type in the ClientHello message, violating the rule against duplicates in a block.)

{CMC} (Omit the ""extensions"" field entirely from the ClientHello message, which is required for valid construction.)

{CMC} (Send a malformed ""ClientHello"" message with an invalid extension type that is not defined in RFC 8446.)
```"
46,Integrity of Handshake Phase,"Designers must ensure that extensions do not compromise security, especially since active attackers can modify messages until the handshake is authenticated.",1,<CMC> <1> (Designers MUST ensure that extensions do not compromise security during the handshake.) + <SMP> <0> (Servers MUST handle extensions in a way that maintains security integrity until the handshake is authenticated.),<CMC> <1> (Designers MUST ensure that extensions do not compromise security during the handshake.) + <SMP> <0> (Servers MUST handle extensions in a way that maintains security integrity until the handshake is authenticated.),"```markdown
{CMC} (Include an extension that is unrecognized by the server and does not conform to the expected format, potentially causing parsing errors.)

{CMC} (Send a ClientHello with critical extensions that have invalid values, contradicting their defined specifications.)

{CMC} (Omit mandatory extensions from the ClientHello that are required for a secure handshake, such as supported groups or signature algorithms.)
```"
48,ClientHello Requirements,"Implementations of this specification must send the ""supported_versions"" extension in the ClientHello, containing all versions of TLS they are prepared to negotiate, minimally including 0x0304. Previous versions of TLS must also be included if allowed.",1,"<CMC> <1> (Clients MUST send the ""supported_versions"" extension in the ClientHello, containing all versions of TLS they are prepared to negotiate, minimally including 0x0304.) + <SMP> <0> (Servers MUST accept the ""supported_versions"" extension in the ClientHello, containing all versions of TLS prepared for negotiation.)  
<CMC> <1> (Clients MUST include previous versions of TLS if allowed.) + <SMP> <0> (Servers MUST accept previous versions of TLS included in the ""supported_versions"" extension if allowed.)","<CMC> <1> (Clients MUST send the ""supported_versions"" extension in the ClientHello, containing all versions of TLS they are prepared to negotiate, minimally including 0x0304.) + <SMP> <0> (Servers MUST accept the ""supported_versions"" extension in the ClientHello, containing all versions of TLS prepared for negotiation.)","```markdown
{CMC} (Send a ClientHello without the ""supported_versions"" extension.)

{CMC} (Send a ClientHello with an invalid ""supported_versions"" extension containing unsupported TLS versions.)

{CMC} (Send a ClientHello with the ""supported_versions"" extension containing only the version 0x0303, omitting 0x0304.)
```"
,,,,,"<CMC> <1> (Clients MUST include previous versions of TLS if allowed.) + <SMP> <0> (Servers MUST accept previous versions of TLS included in the ""supported_versions"" extension if allowed.)","```markdown
{CMC} (Send a ClientHello without the ""supported_versions"" extension, violating the requirement to include previous TLS versions if allowed.)

{CMC} (Include an invalid TLS version in the ""supported_versions"" extension that is not defined in the RFC 8446 specification.)

{CMC} (Send a ClientHello with the ""supported_versions"" extension containing duplicate versions, which violates the uniqueness requirement of the version list.)
```"
50,Version Negotiation with Extension,"If the extension is present in the ClientHello, servers must not use the ClientHello.legacy_version for version negotiation and must rely solely on the ""supported_versions"" extension. They must select only a version present in this extension and ignore any unknown versions.",1,"<CMC> <1> (Clients MUST include the ""supported_versions"" extension for version negotiation.) + <SMP> <1> (Servers MUST rely solely on the ""supported_versions"" extension and must not use ClientHello.legacy_version for version negotiation.)  
<SMC> <1> (Servers MUST select only a version present in the ""supported_versions"" extension.) + <CMP> <1> (Clients MUST ensure only known versions are included in the ""supported_versions"" extension.)","<CMC> <1> (Clients MUST include the ""supported_versions"" extension for version negotiation.) + <SMP> <1> (Servers MUST rely solely on the ""supported_versions"" extension and must not use ClientHello.legacy_version for version negotiation.)","```markdown
{CMC} (Send a ClientHello message without the ""supported_versions"" extension.)

{CMC} (Include an invalid ""supported_versions"" extension with unsupported TLS versions.)

{CMC} (Send a ""supported_versions"" extension that is malformed, such as including extra bytes or incorrect length values.)
```"
56,ClientHello Cookie Requirement,The client must include the cookie extension received in the HelloRetryRequest in the new ClientHello. Clients must not use cookies in their initial ClientHello for subsequent connections.,1,"<CMC> <1> (Clients MUST include the cookie extension received in the HelloRetryRequest in the new ClientHello.) + <SMP> <1> (Servers MUST accept the cookie extension included in the new ClientHello.)  
<CMC> <1> (Clients MUST NOT use cookies in their initial ClientHello for subsequent connections.) + <SMP> <0> (Servers MUST not expect cookies in the initial ClientHello for subsequent connections.)",<CMC> <1> (Clients MUST include the cookie extension received in the HelloRetryRequest in the new ClientHello.) + <SMP> <1> (Servers MUST accept the cookie extension included in the new ClientHello.),"```markdown
{CMC} (Send a ClientHello without the cookie extension received in the HelloRetryRequest)

{CMC} (Include an invalid cookie extension in the ClientHello that does not match the expected format)

{CMC} (Send a ClientHello with multiple cookie extensions, violating the one-cookie limitation)
```"
,,,,,<CMC> <1> (Clients MUST NOT use cookies in their initial ClientHello for subsequent connections.) + <SMP> <0> (Servers MUST not expect cookies in the initial ClientHello for subsequent connections.),"```markdown
{CMC} (Include a cookie in the initial ClientHello message for a new connection attempt, violating the requirement that clients MUST NOT use cookies in this context.)

{CMC} (Send a ClientHello message where the cookie field contains invalid or malformed data, breaching the expectations of well-formedness.)

{CMC} (Send a ClientHello message with the cookie length field set to a value greater than the actual length of the cookie, leading to a protocol mismatch.)
```"
60,Client Authentication Requirement,"Clients desiring server authentication via a certificate must send the ""signature_algorithms"" extension; otherwise, the server must abort the handshake with a ""missing_extension"" alert.",1,"<CMC> <1> (Clients MUST send the ""signature_algorithms"" extension for server authentication via a certificate.) + <SMP> <1> (Servers MUST abort the handshake with a ""missing_extension"" alert if the ""signature_algorithms"" extension is not present.)","<CMC> <1> (Clients MUST send the ""signature_algorithms"" extension for server authentication via a certificate.) + <SMP> <1> (Servers MUST abort the handshake with a ""missing_extension"" alert if the ""signature_algorithms"" extension is not present.)","```markdown
{CMC} (Send a ClientHello message without the ""signature_algorithms"" extension to trigger a missing extension alert from the server.)

{CMC} (Send a ClientHello message with an invalid ""signature_algorithms"" extension that contains unsupported signature algorithms.)

{CMC} (Send a ClientHello message that includes multiple ""signature_algorithms"" extensions, violating the rule that only one instance is permitted.)
```"
64,Deprecation of Legacy Algorithms,"Legacy algorithms using SHA-1 are being deprecated; clients must list these as lower priority, and TLS 1.3 servers must not offer SHA-1 signed certificates unless unavoidable.",1,<CMC> <1> (Clients MUST list SHA-1 algorithms as lower priority.) + <SMP> <1> (Servers MUST NOT offer SHA-1 signed certificates unless unavoidable.),<CMC> <1> (Clients MUST list SHA-1 algorithms as lower priority.) + <SMP> <1> (Servers MUST NOT offer SHA-1 signed certificates unless unavoidable.),"```markdown
{CMC} (Send a ClientHello that lists SHA-1 algorithms as the highest priority, violating the requirement to list them as lower priority.)
{CMC} (Include a ClientHello without any supported cipher suites, which violates the requirement to specify at least one.)
{CMC} (Send a ClientHello with a malformed extension that alters the expected length of the extensions field.)
```"
75,Client Certificate Validation,"For each recognized extension OID, all specified values must be present in the client certificate. The client may include additional values but must ignore unrecognized OIDs.",1,<CMC> <1> (Clients MUST include all specified values for recognized extension OIDs in the client certificate.) + <SMP> <0> (Servers MUST accept client certificates that include additional values but ignore unrecognized OIDs.),<CMC> <1> (Clients MUST include all specified values for recognized extension OIDs in the client certificate.) + <SMP> <0> (Servers MUST accept client certificates that include additional values but ignore unrecognized OIDs.),"```markdown
{CMC} (Include an unrecognized extension OID in the client certificate that exceeds the maximum allowed length specified in RFC 8446.)

{CMC} (Send a ClientHello without any specified values for recognized extension OIDs, even though the client certificate is present.)

{CMC} (Send a ClientHello that contains duplicate extension OIDs, which violates the uniqueness requirement for recognized extensions.)
```"
76,Server Actions on Mismatch,"If the client ignores required extension OIDs and provides a non-compliant certificate, the server may either continue without client authentication or abort the handshake with an ""unsupported_certificate"" alert.",1,"<CMC> <1> (Clients MUST NOT ignore required extension OIDs and MUST provide a compliant certificate.) + <SMP> <1> (Servers MAY continue without client authentication if required extensions are ignored.)  
<CMC> <1> (Clients MUST NOT provide a non-compliant certificate.) + <SMP> <1> (Servers MAY abort the handshake with an ""unsupported_certificate"" alert if a non-compliant certificate is provided.)",<CMC> <1> (Clients MUST NOT ignore required extension OIDs and MUST provide a compliant certificate.) + <SMP> <1> (Servers MAY continue without client authentication if required extensions are ignored.),"```markdown
{CMC} (Send a ClientHello message that omits the required ""supported_versions"" extension entirely.)

{CMC} (Include an invalid extension in the ClientHello, such as an unsupported or malformed extension type.)

{CMC} (Send a ClientHello message with a certificate that contains an invalid signature algorithm not supported by the server.)
```"
,,,,,"<CMC> <1> (Clients MUST NOT provide a non-compliant certificate.) + <SMP> <1> (Servers MAY abort the handshake with an ""unsupported_certificate"" alert if a non-compliant certificate is provided.)","```markdown
{CMC} (Send a ClientHello message with a certificate that uses an unsupported algorithm for key exchange, such as MD5.)

{CMC} (Include a certificate that has expired or is not yet valid in the ClientHello message.)

{CMC} (Send a ClientHello message without the required certificate when the server requests it.)
```"
77,Unique OID Requirement,Each OID must not appear more than once in the filters list.,1,<CMC> <1> (Clients MUST ensure that each OID appears only once in the filters list.) + <SMP> <0> (Servers MUST reject the filters list if an OID appears more than once.),<CMC> <1> (Clients MUST ensure that each OID appears only once in the filters list.) + <SMP> <0> (Servers MUST reject the filters list if an OID appears more than once.),"```markdown
{CMC} (Include multiple instances of the same OID in the filters list of the ClientHello.)

{CMC} (Omit the filters list entirely from the ClientHello message.)

{CMC} (Send a malformed filters list that contains non-OID values as entries in the ClientHello.)
```"
80,Exclusion of anyExtendedKeyUsage,The special anyExtendedKeyUsage OID must not be used in the request for Extended Key Usage.,1,<CMC> <1> (Clients MUST NOT use the special anyExtendedKeyUsage OID in the request for Extended Key Usage.) + <SMP> <0> (Servers MUST reject requests that include the anyExtendedKeyUsage OID in Extended Key Usage.),<CMC> <1> (Clients MUST NOT use the special anyExtendedKeyUsage OID in the request for Extended Key Usage.) + <SMP> <0> (Servers MUST reject requests that include the anyExtendedKeyUsage OID in Extended Key Usage.),"```markdown
{CMC} (Include the anyExtendedKeyUsage OID in the Extended Key Usage extension of the ClientHello message)

{CMC} (Send a ClientHello message with an invalid Extended Key Usage OID that is not defined in RFC 8446)

{CMC} (Omit the SupportedVersions field in the ClientHello while including anyExtendedKeyUsage in Extended Key Usage)
```"
98,Empty Client Shares for HelloRetryRequest,"The client_shares vector may be empty if the client is requesting a HelloRetryRequest, but each KeyShareEntry must correspond to a group in the ""supported_groups"" extension.",1,"<CMC> <1> (Clients MAY have an empty client_shares vector when requesting a HelloRetryRequest.) + <SMP> <1> (Servers MUST ensure that each KeyShareEntry corresponds to a group in the ""supported_groups"" extension.)","<CMC> <1> (Clients MAY have an empty client_shares vector when requesting a HelloRetryRequest.) + <SMP> <1> (Servers MUST ensure that each KeyShareEntry corresponds to a group in the ""supported_groups"" extension.)","```markdown
{CMC} (Send a ClientHello with a client_shares vector that contains an unsupported group not listed in the ""supported_groups"" extension.)

{CMC} (Send a ClientHello with a client_shares vector that is non-empty but contains invalid key shares that do not correspond to the listed groups.)

{CMC} (Send a ClientHello with a client_shares vector that is empty while simultaneously omitting the ""supported_groups"" extension.)
```"
99,Offering Multiple KeyShareEntries,"Clients can offer multiple KeyShareEntry values for supported groups, but each value must be generated independently, and clients must not offer duplicates or invalid groups.",1,"<CMC> <1> (Clients MAY offer multiple KeyShareEntry values for supported groups, but each value MUST be generated independently.) + <SMP> <0> (Servers MUST verify that KeyShareEntry values are not duplicates or invalid groups.)  
<CMC> <1> (Clients MUST NOT offer duplicates or invalid groups in KeyShareEntry values.) + <SMP> <0> (Servers MUST reject KeyShareEntry values that are duplicates or invalid groups.)","<CMC> <1> (Clients MAY offer multiple KeyShareEntry values for supported groups, but each value MUST be generated independently.) + <SMP> <0> (Servers MUST verify that KeyShareEntry values are not duplicates or invalid groups.)","```markdown
{CMC} (Send a ClientHello with multiple KeyShareEntry values that are identical, violating the requirement for independent generation.)

{CMC} (Include a KeyShareEntry with a group identifier that is not supported by the client, violating the specification.)

{CMC} (Omit required KeyShareEntry values entirely from the ClientHello, not providing necessary key shares for the supported groups.)
```"
,,,,,<CMC> <1> (Clients MUST NOT offer duplicates or invalid groups in KeyShareEntry values.) + <SMP> <0> (Servers MUST reject KeyShareEntry values that are duplicates or invalid groups.),"```markdown
{CMC} (Send a ClientHello that includes multiple KeyShareEntry values for the same group, violating the uniqueness requirement.)

{CMC} (Include a KeyShareEntry value that specifies an unsupported or invalid group identifier.)

{CMC} (Omit the KeyShareExtension completely from the ClientHello, despite its presence being mandatory when offering key shares.)
```"
100,HelloRetryRequest Handling,"In a HelloRetryRequest, the ""extension_data"" contains a KeyShareHelloRetryRequest value indicating the mutually supported group for negotiation. The client must verify that the selected group is valid before retrying.",1,<CMC> <1> (Clients MUST verify that the selected group in the KeyShareHelloRetryRequest is valid before retrying.) + <SMP> <0> (Servers MUST accept the KeyShareHelloRetryRequest containing a valid group for negotiation.),<CMC> <1> (Clients MUST verify that the selected group in the KeyShareHelloRetryRequest is valid before retrying.) + <SMP> <0> (Servers MUST accept the KeyShareHelloRetryRequest containing a valid group for negotiation.),"```markdown
{CMC} (Send a KeyShareHelloRetryRequest with an invalid group that was not included in the initial ClientHello.)

{CMC} (Omit the KeyShareHelloRetryRequest entirely after receiving a HelloRetryRequest from the server.)

{CMC} (Include multiple KeyShareHelloRetryRequests with conflicting groups within a single ClientHello message.)
```"
105,Public Key Validation,Peers must validate each other's public key Y by ensuring that 1 < Y < p-1. This check ensures that the remote peer is properly behaved and isn't forcing the local system into a small subgroup.,1,<CMC> <1> (Clients MUST validate the public key Y by ensuring that 1 < Y < p-1.) + <SMP> <0> (Servers MUST be properly behaved and not force the local system into a small subgroup.),<CMC> <1> (Clients MUST validate the public key Y by ensuring that 1 < Y < p-1.) + <SMP> <0> (Servers MUST be properly behaved and not force the local system into a small subgroup.),"```markdown
{CMC} (Send a ClientHello with a public key Y that does not satisfy the condition 1 < Y < p-1, such as Y = 0 or Y = p-1)

{CMC} (Send a ClientHello with a public key Y that is set to an arbitrary invalid value outside the valid range, e.g., Y = -5)

{CMC} (Send a ClientHello containing a public key Y that is a non-numeric value, violating the expected format for the key)
```"
112,PSK Key Exchange Modes Requirement,"In order to use PSKs, clients must send a ""psk_key_exchange_modes"" extension, indicating the supported modes. This restricts both the PSKs offered in the ClientHello and those the server might supply via NewSessionTicket.",1,"<CMC> <1> (Clients MUST send a ""psk_key_exchange_modes"" extension indicating supported modes to use PSKs.) + <SMP> <1> (Servers MUST restrict PSKs offered in the ClientHello and those supplied via NewSessionTicket based on the modes indicated by the client.)","<CMC> <1> (Clients MUST send a ""psk_key_exchange_modes"" extension indicating supported modes to use PSKs.) + <SMP> <1> (Servers MUST restrict PSKs offered in the ClientHello and those supplied via NewSessionTicket based on the modes indicated by the client.)","```markdown
{CMC} (Send a ClientHello without the ""psk_key_exchange_modes"" extension, completely omitting it despite supporting PSKs.)

{CMC} (Include an invalid ""psk_key_exchange_modes"" extension value that is not defined in the TLS 1.3 specification.)

{CMC} (Send a ClientHello with the ""psk_key_exchange_modes"" extension but with the length field incorrectly set, causing a mismatch with the actual data length.)
```"
113,Mandatory Extension for Pre-Shared Key,"A client must provide a ""psk_key_exchange_modes"" extension if it offers a ""pre_shared_key"" extension. If a client offers ""pre_shared_key"" without this extension, servers must abort the handshake.",1,"<CMC> <1> (Clients MUST provide a ""psk_key_exchange_modes"" extension if offering a ""pre_shared_key"" extension.) + <SMP> <1> (Servers MUST abort the handshake if a client offers ""pre_shared_key"" without the ""psk_key_exchange_modes"" extension.)","<CMC> <1> (Clients MUST provide a ""psk_key_exchange_modes"" extension if offering a ""pre_shared_key"" extension.) + <SMP> <1> (Servers MUST abort the handshake if a client offers ""pre_shared_key"" without the ""psk_key_exchange_modes"" extension.)","```markdown
{CMC} (Send a ClientHello with a ""pre_shared_key"" extension but without the required ""psk_key_exchange_modes"" extension.)

{CMC} (Include an invalid value in the ""psk_key_exchange_modes"" extension when offering a ""pre_shared_key"" extension.)

{CMC} (Send a ClientHello that omits the ""psk_key_exchange_modes"" extension while including multiple ""pre_shared_key"" extensions.)
```"
128,Client Behavior on Rejection,"If the server rejects the ""early_data"" extension, the client may retransmit Application Data after the handshake, but must consider the connection state.",1,"<CMC> <1> (Clients may retransmit Application Data after the handshake if the server rejects the ""early_data"" extension.) + <SMP> <0> (Servers must reject the ""early_data"" extension if not allowed, impacting the client's connection state considerations.)","<CMC> <1> (Clients may retransmit Application Data after the handshake if the server rejects the ""early_data"" extension.) + <SMP> <0> (Servers must reject the ""early_data"" extension if not allowed, impacting the client's connection state considerations.)","```markdown
{CMC} (Send a ClientHello that includes the ""early_data"" extension without a valid ""pre_shared_key"" indication to establish a session.)

{CMC} (Send a ClientHello message that omits the mandatory ""supported_versions"" field, violating the requirement for version negotiation.)

{CMC} (Send a ClientHello with an invalid ""cipher_suites"" list that contains unsupported or non-existent cipher suites.)
```"
146,Extensions Specification,"The extensions describe the parameters of the requested certificate, with the ""signature_algorithms"" extension being mandatory. Clients must ignore unrecognized extensions.",1,"<CMC> <1> (Clients MUST include the ""signature_algorithms"" extension as it is mandatory.) + <SMP> <0> (Servers MUST accept the ""signature_algorithms"" extension as it is mandatory.)
<CMC> <1> (Clients MUST ignore unrecognized extensions.) + <SMP> <0> (Servers MUST not process unrecognized extensions sent by clients.)","<CMC> <1> (Clients MUST include the ""signature_algorithms"" extension as it is mandatory.) + <SMP> <0> (Servers MUST accept the ""signature_algorithms"" extension as it is mandatory.)","```markdown
{CMC} (Send a ClientHello without the ""signature_algorithms"" extension, violating the mandatory requirement.)

{CMC} (Include an invalid ""signature_algorithms"" extension value that does not conform to the defined algorithms in RFC 8446.)

{CMC} (Send the ""signature_algorithms"" extension with an incorrect length field, causing a mismatch in expected data structure.)
```"
,,,,,<CMC> <1> (Clients MUST ignore unrecognized extensions.) + <SMP> <0> (Servers MUST not process unrecognized extensions sent by clients.),"```markdown
{CMC} (Send a ClientHello message with an unrecognized extension marked as critical, which should cause a protocol violation.)

{CMC} (Construct a ClientHello message that includes duplicate extensions, violating the uniqueness requirement in the TLS 1.3 specification.)

{CMC} (Omit the mandatory ""client_version"" field in the ClientHello message, which is required for establishing the TLS version.)
```"
168,Certificate Type Requirement,"The certificate type must be X.509v3, unless explicitly negotiated otherwise.",1,"<CMC> <1> (Clients MUST use X.509v3 certificate type, unless explicitly negotiated otherwise.) + <SMP> <0> (Servers MUST accept X.509v3 certificate type, unless explicitly negotiated otherwise.)","<CMC> <1> (Clients MUST use X.509v3 certificate type, unless explicitly negotiated otherwise.) + <SMP> <0> (Servers MUST accept X.509v3 certificate type, unless explicitly negotiated otherwise.)","```markdown
{CMC} (Send a ClientHello message that specifies an unsupported certificate type, such as a self-signed certificate without X.509v3 encoding.)

{CMC} (Include a certificate extension in the ClientHello that is not valid for X.509v3, such as a non-existent or deprecated extension.)

{CMC} (Omit the certificate type field entirely from the ClientHello message.)
```"
170,Signing Capability,"The certificate must allow the key to be used for signing, indicated by the digitalSignature bit in the Key Usage extension.",1,"<CMC> <1> (Clients MUST ensure the certificate allows the key to be used for signing, indicated by the digitalSignature bit in the Key Usage extension.) + <SMP> <0> (Servers MUST verify that the certificate's key usage allows for signing as indicated by the digitalSignature bit.)","<CMC> <1> (Clients MUST ensure the certificate allows the key to be used for signing, indicated by the digitalSignature bit in the Key Usage extension.) + <SMP> <0> (Servers MUST verify that the certificate's key usage allows for signing as indicated by the digitalSignature bit.)","```markdown
{CMC} (Send a ClientHello with a certificate that has the digitalSignature bit in the Key Usage extension set to 0, indicating that the key cannot be used for signing.)

{CMC} (Send a ClientHello that includes a certificate with an invalid Key Usage extension length, causing the server to misinterpret the key usage bits.)

{CMC} (Send a ClientHello with a self-signed certificate that lacks the Key Usage extension entirely, violating the requirement for proper signing capability.)
```"
174,Client Response to Invalid Chain,"If the client cannot construct an acceptable chain and aborts the handshake, it must do so with an appropriate certificate-related alert.",1,<CMC> <1> (Clients MUST abort the handshake with an appropriate certificate-related alert if they cannot construct an acceptable chain.) + <SMP> <0> (Servers MUST be prepared to handle a certificate-related alert if the client aborts the handshake.),<CMC> <1> (Clients MUST abort the handshake with an appropriate certificate-related alert if they cannot construct an acceptable chain.) + <SMP> <0> (Servers MUST be prepared to handle a certificate-related alert if the client aborts the handshake.),"```markdown
{CMC} (Send a ClientHello message without the required ""Certificate"" extension, which is necessary for certificate negotiation.)

{CMC} (Send a ClientHello message that includes an invalid or unrecognized signature algorithm in the ""Supported Signature Algorithms"" extension.)

{CMC} (Send a ClientHello message containing an unsupported or malformed ""Certificate Request"" extension, violating the expected structure.)
```"
176,Client Certificate Type Requirement,"The certificate type must be X.509v3 [RFC5280], unless explicitly negotiated otherwise (e.g., [RFC7250]).",1,<CMC> <1> (Clients MUST use X.509v3 certificates unless explicitly negotiated otherwise.) + <SMP> <0> (Servers MUST accept X.509v3 certificates unless explicitly negotiated otherwise.),<CMC> <1> (Clients MUST use X.509v3 certificates unless explicitly negotiated otherwise.) + <SMP> <0> (Servers MUST accept X.509v3 certificates unless explicitly negotiated otherwise.),"```markdown
{CMC} (Send a ClientHello with an invalid certificate type that is not X.509v3, such as a self-signed certificate with an unsupported format.)

{CMC} (Send a ClientHello without including any certificate information, violating the requirement to provide a valid X.509v3 certificate.)

{CMC} (Send a ClientHello where the certificate contains an invalid or expired signature, which should be rejected according to RFC 8446.)
```"
179,OID Filters Matching,"If the CertificateRequest message contained a non-empty ""oid_filters"" extension, the end-entity certificate must match the extension OIDs recognized by the client, as described in Section 4.2.5.",1,"<CMC> <1> (Clients MUST ensure that the end-entity certificate matches the OIDs recognized by them if the ""oid_filters"" extension is non-empty in the CertificateRequest message.) + <SMP> <0> (Servers MUST include the ""oid_filters"" extension in the CertificateRequest message when applicable.)","<CMC> <1> (Clients MUST ensure that the end-entity certificate matches the OIDs recognized by them if the ""oid_filters"" extension is non-empty in the CertificateRequest message.) + <SMP> <0> (Servers MUST include the ""oid_filters"" extension in the CertificateRequest message when applicable.)","```markdown
{CMC} (Send a ClientHello message that includes a CertificateRequest but omits the end-entity certificate entirely, violating the requirement to provide a valid certificate.)

{CMC} (Send a ClientHello message that includes an end-entity certificate with OIDs that are not recognized, despite the presence of a non-empty ""oid_filters"" extension in the CertificateRequest.)

{CMC} (Send a ClientHello message with a CertificateRequest that includes the ""oid_filters"" extension, but with the OIDs set to invalid or non-existent values, violating the expected format.)
```"
181,Handling Empty Certificate Messages,"If the server supplies an empty Certificate message, the client must abort the handshake with a ""decode_error"" alert. If the client sends an empty Certificate message, the server may either continue the handshake or abort it with a ""certificate_required"" alert.",1,"<CMC> <1> (Clients MUST abort the handshake with a ""decode_error"" alert if the server supplies an empty Certificate message.) + <SMP> <1> (Servers MAY continue the handshake or abort it with a ""certificate_required"" alert if the client sends an empty Certificate message.)","<CMC> <1> (Clients MUST abort the handshake with a ""decode_error"" alert if the server supplies an empty Certificate message.) + <SMP> <1> (Servers MAY continue the handshake or abort it with a ""certificate_required"" alert if the client sends an empty Certificate message.)","```markdown
{CMC} (Send a ClientHello message with an invalid message length field, significantly shorter than the actual message length.)

{CMC} (Send a ClientHello with an unsupported cipher suite that is not included in the client's supported list.)

{CMC} (Send a ClientHello message missing the mandatory ""random"" field.)
```"
183,Aborting for MD5 and SHA-1 Certificates,"Any endpoint receiving a certificate that requires validation using MD5 must abort the handshake with a ""bad_certificate"" alert. SHA-1 is deprecated, and endpoints should also abort the handshake for SHA-1 validation.",1,"<CMC> <1> (Clients MUST abort the handshake with a ""bad_certificate"" alert if receiving a certificate requiring MD5 validation.) + <SMP> <1> (Servers MUST abort the handshake with a ""bad_certificate"" alert if receiving a certificate requiring MD5 validation.)  
<CMC> <1> (Clients MUST abort the handshake if receiving a certificate requiring SHA-1 validation.) + <SMP> <1> (Servers MUST abort the handshake if receiving a certificate requiring SHA-1 validation.)","<CMC> <1> (Clients MUST abort the handshake with a ""bad_certificate"" alert if receiving a certificate requiring MD5 validation.) + <SMP> <1> (Servers MUST abort the handshake with a ""bad_certificate"" alert if receiving a certificate requiring MD5 validation.)","```markdown
{CMC} (Send a ClientHello message with an invalid signature algorithm that requires MD5 validation, triggering a ""bad_certificate"" alert.)

{CMC} (Include an unsupported cipher suite in the ClientHello that requires the server to respond with a ""bad_certificate"" alert due to MD5 validation.)

{CMC} (Construct the ClientHello with a certificate containing an MD5 hash, without any valid signature algorithm, forcing the server to issue a ""bad_certificate"" alert.)
```"
,,,,,<CMC> <1> (Clients MUST abort the handshake if receiving a certificate requiring SHA-1 validation.) + <SMP> <1> (Servers MUST abort the handshake if receiving a certificate requiring SHA-1 validation.),"```markdown
{CMC} (Send a ClientHello that includes an unsupported cipher suite that requires SHA-1 validation.)

{CMC} (Include a certificate in the ClientHello that explicitly requires SHA-1 validation, despite the handshake context.)

{CMC} (Omit the ""supported_versions"" extension from the ClientHello, leading to ambiguity regarding protocol version support.)
```"
186,Purpose of CertificateVerify Message,This message is used to provide explicit proof that an endpoint possesses the private key corresponding to its certificate and ensures integrity for the handshake up to this point. Servers and clients must send this message when authenticating via a certificate.,1,"```markdown
<CMC> <1> (Clients MUST send a message to provide proof of possession of the private key corresponding to its certificate.) + <SMP> <1> (Servers MUST send a message to provide proof of possession of the private key corresponding to its certificate.)
<CMC> <1> (Clients MUST ensure integrity for the handshake up to this point.) + <SMP> <1> (Servers MUST ensure integrity for the handshake up to this point.)
```",<CMC> <1> (Clients MUST send a message to provide proof of possession of the private key corresponding to its certificate.) + <SMP> <1> (Servers MUST send a message to provide proof of possession of the private key corresponding to its certificate.),"```markdown
{CMC} (Send a ClientHello message without including the required Certificate message that proves possession of the private key.)

{CMC} (Include an invalid or malformed Certificate message in the ClientHello, violating the expected format.)

{CMC} (Send a ClientHello message with a Certificate message that contains a public key not corresponding to the client's certificate.)
```"
,,,,,<CMC> <1> (Clients MUST ensure integrity for the handshake up to this point.) + <SMP> <1> (Servers MUST ensure integrity for the handshake up to this point.),"```markdown
{CMC} (Send a ClientHello message with a tampered handshake hash, violating integrity checks.)

{CMC} (Omit the handshake hash from the ClientHello message, compromising integrity verification.)

{CMC} (Include an invalid handshake hash value in the ClientHello message, ensuring it does not match the expected hash.)
```"
192,Verification Process,"The receiver of a CertificateVerify message must verify the signature using the public key from the end-entity certificate and terminate the handshake with a ""decrypt_error"" alert if the verification fails.",1,"<CMC> <1> (Clients MUST verify the signature in the CertificateVerify message using the public key from the end-entity certificate.) + <SMP> <1> (Servers MUST terminate the handshake with a ""decrypt_error"" alert if the signature verification fails.)","<CMC> <1> (Clients MUST verify the signature in the CertificateVerify message using the public key from the end-entity certificate.) + <SMP> <1> (Servers MUST terminate the handshake with a ""decrypt_error"" alert if the signature verification fails.)","```markdown
{CMC} (Send a CertificateVerify message with an invalid signature that does not correspond to the public key in the provided end-entity certificate.)

{CMC} (Omit the CertificateVerify message entirely, failing to provide necessary proof of possession of the private key.)

{CMC} (Include a CertificateVerify message but alter the signature algorithm to one that is not supported or incorrectly formatted.)
```"
194,Verification Requirement,"Recipients of Finished messages must verify their contents; if incorrect, they must terminate the connection with a ""decrypt_error"" alert.",1,"<CMC> <1> (Clients MUST verify the contents of Finished messages; if incorrect, they MUST terminate the connection with a ""decrypt_error"" alert.) + <SMP> <1> (Servers MUST verify the contents of Finished messages; if incorrect, they MUST terminate the connection with a ""decrypt_error"" alert.)","<CMC> <1> (Clients MUST verify the contents of Finished messages; if incorrect, they MUST terminate the connection with a ""decrypt_error"" alert.) + <SMP> <1> (Servers MUST verify the contents of Finished messages; if incorrect, they MUST terminate the connection with a ""decrypt_error"" alert.)","```markdown
{CMC} (Send a Finished message that contains an invalid MAC value, bypassing the verification process.)
{CMC} (Send a Finished message with an incorrect handshake message length, misleading the client about the actual size of the message.)
{CMC} (Send a Finished message that omits the necessary cryptographic checks, such as not including the handshake hash.)
```"
206,Client Response Requirements,"The client must respond with the appropriate Authentication messages. If the client chooses to authenticate, it must send Certificate, CertificateVerify, and Finished. If it declines, it must send a Certificate message containing no certificates followed by Finished.",1,"<CMC> <1> (Clients MUST send Certificate, CertificateVerify, and Finished if choosing to authenticate.) + <SMP> <0> (Servers MUST process the Certificate, CertificateVerify, and Finished messages if they are sent by the client for authentication.)
<CMC> <1> (Clients MUST send a Certificate message containing no certificates followed by Finished if they decline to authenticate.) + <SMP> <0> (Servers MUST process the Certificate message containing no certificates and the Finished message if they are sent by the client.)","<CMC> <1> (Clients MUST send Certificate, CertificateVerify, and Finished if choosing to authenticate.) + <SMP> <0> (Servers MUST process the Certificate, CertificateVerify, and Finished messages if they are sent by the client for authentication.)","```markdown
{CMC} (Send a ClientHello message without the Certificate message when authentication is required.)

{CMC} (Send a Certificate message with an invalid signature algorithm that is not supported by the server.)

{CMC} (Send a CertificateVerify message that does not correspond to the Certificate message provided.)
```"
,,,,,<CMC> <1> (Clients MUST send a Certificate message containing no certificates followed by Finished if they decline to authenticate.) + <SMP> <0> (Servers MUST process the Certificate message containing no certificates and the Finished message if they are sent by the client.),"```markdown
{CMC} (Send a Certificate message containing an invalid certificate format followed by Finished.)

{CMC} (Send a Certificate message with an unexpected extension that is not permitted in the Certificate message.)

{CMC} (Send a Certificate message with more than one CertificateEntry while declaring to decline authentication.)
```"
207,Message Order for Client Responses,All of the client's messages for a given response must appear consecutively on the wire with no intervening messages of other types.,1,<CMC> <1> (Clients' messages for a given response MUST appear consecutively on the wire with no intervening messages of other types.) + <SMP> <0> (Servers MUST process clients' messages only when they appear consecutively without intervening messages of other types.),<CMC> <1> (Clients' messages for a given response MUST appear consecutively on the wire with no intervening messages of other types.) + <SMP> <0> (Servers MUST process clients' messages only when they appear consecutively without intervening messages of other types.),"```markdown
{CMC} (Interleave the ClientHello message with an unrelated message type, such as an application data message, to violate the consecutive message requirement.)

{CMC} (Send multiple ClientHello messages with different session IDs in quick succession, creating ambiguity in the expected response.)

{CMC} (Insert a malformed message type between legitimate ClientHello messages, causing the server to misinterpret the message flow.)
```"
208,Handling Unexpected Certificate Requests,"A client that receives a CertificateRequest message without having sent the ""post_handshake_auth"" extension must send an ""unexpected_message"" fatal alert.",1,"<CMC> <1> (Clients MUST send an ""unexpected_message"" fatal alert if they receive a CertificateRequest message without having sent the ""post_handshake_auth"" extension.) + <SMP> <0> (Servers MUST not expect a CertificateRequest message if the ""post_handshake_auth"" extension was not sent by the client.)","<CMC> <1> (Clients MUST send an ""unexpected_message"" fatal alert if they receive a CertificateRequest message without having sent the ""post_handshake_auth"" extension.) + <SMP> <0> (Servers MUST not expect a CertificateRequest message if the ""post_handshake_auth"" extension was not sent by the client.)","```markdown
{CMC} (Send a ClientHello message without the ""post_handshake_auth"" extension, but include a CertificateRequest message in the handshake response.)

{CMC} (Send a ClientHello message that acknowledges a CertificateRequest but omits the ""unexpected_message"" fatal alert when it should be sent.)

{CMC} (Send a ClientHello with an invalid ""CertificateRequest"" indicating an unsupported type, violating the expected structure of the handshake.)
```"
212,Handling Unexpected KeyUpdate,"Implementations that receive a KeyUpdate message prior to receiving a Finished message must terminate the connection with an ""unexpected_message"" alert.",1,"<CMC> <1> (Clients MUST terminate the connection with an ""unexpected_message"" alert if they receive a KeyUpdate message before the Finished message.) + <SMP> <1> (Servers MUST terminate the connection with an ""unexpected_message"" alert if they receive a KeyUpdate message before the Finished message.)","<CMC> <1> (Clients MUST terminate the connection with an ""unexpected_message"" alert if they receive a KeyUpdate message before the Finished message.) + <SMP> <1> (Servers MUST terminate the connection with an ""unexpected_message"" alert if they receive a KeyUpdate message before the Finished message.)","```markdown
{CMC} (Send a KeyUpdate message before the Finished message in the ClientHello sequence.)

{CMC} (Omit the Finished message entirely from the ClientHello sequence, sending only KeyUpdate.)

{CMC} (Send a malformed KeyUpdate message with invalid syntax or unexpected values in the ClientHello sequence.)
```"
213,KeyUpdate Message Protocol,"After sending a KeyUpdate message, the sender shall use the next generation of keys. Upon receiving a KeyUpdate, the receiver must update its receiving keys.",1,<CMC> <1> (Senders SHALL use the next generation of keys after sending a KeyUpdate message.) + <SMP> <1> (Receivers MUST update their receiving keys upon receiving a KeyUpdate.),<CMC> <1> (Senders SHALL use the next generation of keys after sending a KeyUpdate message.) + <SMP> <1> (Receivers MUST update their receiving keys upon receiving a KeyUpdate.),"```markdown
{CMC} (Send a KeyUpdate message without a preceding ClientHello message, violating the required handshake order.)

{CMC} (Send a KeyUpdate message that references nonexistent key parameters, creating ambiguity in key management.)

{CMC} (Send a KeyUpdate message with an invalid key version that does not match any previously negotiated keys.)
```"
215,Response Mechanism for KeyUpdate,"If request_update is set to ""update_requested,"" the receiver must send a KeyUpdate of its own with request_update set to ""update_not_requested"" before sending its next Application Data record.",1,"<CMC> <1> (Clients MUST send a KeyUpdate with request_update set to ""update_not_requested"" before sending the next Application Data record if request_update is set to ""update_requested."") + <SMP> <0> (Servers MUST process the KeyUpdate with request_update set to ""update_not_requested"" before sending the next Application Data record.)","<CMC> <1> (Clients MUST send a KeyUpdate with request_update set to ""update_not_requested"" before sending the next Application Data record if request_update is set to ""update_requested."") + <SMP> <0> (Servers MUST process the KeyUpdate with request_update set to ""update_not_requested"" before sending the next Application Data record.)","```markdown
{CMC} (Send a KeyUpdate with request_update set to ""update_requested"" when the previous KeyUpdate was also set to ""update_requested"".)

{CMC} (Send a KeyUpdate message that omits the required ""key"" field, violating the construction of the message.)

{CMC} (Send a KeyUpdate with request_update set to ""update_not_requested"" while still including Application Data in the same message, which violates the expected sequence.)
```"
218,Encryption Requirement for KeyUpdate,Both sender and receiver must encrypt KeyUpdate messages with the old keys and ensure that a KeyUpdate with the old key is received before accepting any messages encrypted with the new key to prevent message truncation attacks.,1,<CMC> <1> (Clients MUST encrypt KeyUpdate messages with the old keys.) + <SMP> <1> (Servers MUST ensure that a KeyUpdate with the old key is received before accepting messages encrypted with the new key to prevent message truncation attacks.),<CMC> <1> (Clients MUST encrypt KeyUpdate messages with the old keys.) + <SMP> <1> (Servers MUST ensure that a KeyUpdate with the old key is received before accepting messages encrypted with the new key to prevent message truncation attacks.),"```markdown
{CMC} (Send a KeyUpdate message encrypted with the new keys instead of the old keys.)

{CMC} (Omit the required KeyUpdate message entirely before sending messages encrypted with the new keys.)

{CMC} (Send a KeyUpdate message that contains an invalid key length, violating the expected key size.)
```"
