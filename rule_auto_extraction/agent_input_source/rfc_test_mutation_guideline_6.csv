index,section,title,construction_rule_type,construction_explicitness,construction_base,processing_rule_type,processing_explicitness,processing_base,test_strategy,message,field,action,relative_to,position,value,expected_result
1,4.1.2.. Handshake Protocol_Key Exchange Messages_Client Hello,ClientHello Message Overview,CLI-MSG-CONST,1,"""Clients MUST send the ClientHello as the first TLS message when connecting to a server. If a HelloRetryRequest is received, the client MUST resend the same ClientHello, modifying only as specified.""",SRV-MSG-PROC,1,"""Servers MUST expect the ClientHello as the first message and MUST handle a HelloRetryRequest by validating the modifications made by the client.""","""Test the server's handling of a non-ClientHello message as the first message in the handshake to verify its behavior.""",ClientHello,None,SET,None,None,"""NonClientHelloMessage""","""Server aborts the handshake with an unexpected_message alert."""
2,4.1.2.. Handshake Protocol_Key Exchange Messages_Client Hello,ClientHello Message Overview,CLI-MSG-CONST,1,"""Clients MUST replace the list of shares in the ""key_share"" extension with a single KeyShareEntry from the indicated group if specified in the HelloRetryRequest.""",SRV-MSG-PROC,1,"""Servers MUST validate that the ""key_share"" extension contains a single KeyShareEntry as indicated in the HelloRetryRequest.""","""Set the 'key_share' extension to contain multiple KeyShareEntries instead of a single entry as required by the HelloRetryRequest.""",ClientHello,key_share,SET,None,None,"""key_share extension contains multiple key with same group X25519""","""Server aborts the handshake with an illegal_parameter alert."""
3,4.1.2.. Handshake Protocol_Key Exchange Messages_Client Hello,ClientHello Message Overview,CLI-MSG-CONST,1,"""Clients MUST remove the ""early_data"" extension if it was present when sending ClientHello after a HelloRetryRequest.""",SRV-MSG-PROC,1,"""Servers MUST reject any ClientHello that includes the ""early_data"" extension after a HelloRetryRequest.""","""Set the 'early_data' extension in the ClientHello after a HelloRetryRequest to test server rejection.""",ClientHello,early_data,SET,None,None,"""present""","""Server rejects the ClientHello with an illegal_parameter alert."""
4,4.1.2.. Handshake Protocol_Key Exchange Messages_Client Hello,ClientHello Message Overview,CLI-MSG-CONST,1,"""Clients MUST include a ""cookie"" extension if provided in the HelloRetryRequest.""",SRV-MSG-PROC,1,"""Servers MUST process the ""cookie"" extension if present in the ClientHello after a HelloRetryRequest.""","""Remove the 'cookie' extension from the ClientHello after receiving a HelloRetryRequest to test server's handling of missing extensions.""",ClientHello,cookie,REMOVE,None,None,"""None""","""Server aborts the handshake with a missing_extension or illegal_parameter alert."""
5,4.1.2.. Handshake Protocol_Key Exchange Messages_Client Hello,ClientHello Message Overview,CLI-MSG-CONST,1,"""Clients MUST update the ""pre_shared_key"" extension by recomputing the ""obfuscated_ticket_age"" and binder values, and may remove incompatible PSKs as indicated by the server's cipher suite.""",SRV-MSG-PROC,1,"""Servers MUST validate the updated ""pre_shared_key"" extension for correctness according to the cipher suite.""","""Set the 'pre_shared_key' extension with incorrect 'obfuscated_ticket_age' and binder values to test server validation.""",ClientHello,pre_shared_key,SET,None,None,"""{""obfuscated_ticket_age"": 9999, ""binder"": ""invalid_binder""}""","""Server aborts the handshake with an illegal_parameter alert."""
6,4.1.2.. Handshake Protocol_Key Exchange Messages_Client Hello,ClientHello Message Overview,CLI-MSG-CONST,0,"""Clients MAY optionally add, remove, or change the length of the ""padding"" extension.""",SRV-MSG-PROC,0,"""Servers MAY handle modifications to the ""padding"" extension as specified by the client.""","""Set the length of the 'padding' extension to an invalid value to test server handling of padding modifications.""",ClientHello,padding,SET,None,None,"""0xFF""","""Server processes the modified padding without aborting the handshake."""
7,4.1.2.. Handshake Protocol_Key Exchange Messages_Client Hello,Field Descriptions,CLI-MSG-CONST,1,"""The 'legacy_version' field MUST be set to 0x0303 for compatibility with middleboxes; the actual version is indicated using the 'supported_versions' extension.""",SRV-MSG-PROC,1,"""Servers MUST accept 'legacy_version' set to 0x0303 and refer to the 'supported_versions' extension for the actual version.""","""Set the 'legacy_version' field to a value other than 0x0303 to test server's rejection of invalid versions.""",ClientHello,legacy_version,SET,None,None,"""0x0200""","""Server rejects the ClientHello with a protocol_version alert."""
8,4.1.2.. Handshake Protocol_Key Exchange Messages_Client Hello,Field Descriptions,CLI-MSG-CONST,1,"""The 'random' field MUST contain 32 bytes generated by a secure random number generator.""",SRV-MSG-PROC,1,"""Servers MUST validate that the 'random' field contains 32 bytes.""","""Set the 'random' field to a value that is not 32 bytes long to test server's validation of the field length.""",ClientHello,random,SET,None,None,"""0x0123456789ABCDEF""","""Server rejects the ClientHello with a handshake_failure alert."""
9,4.1.2.. Handshake Protocol_Key Exchange Messages_Client Hello,Field Descriptions,CLI-MSG-CONST,1,"""The 'legacy_session_id' field MUST be either a cached session ID from a pre-TLS 1.3 server or a new unpredictable value if none exists.""",SRV-MSG-PROC,1,"""Servers MUST handle 'legacy_session_id' by accepting either a cached session ID or a new unpredictable value.""","""Set the 'legacy_session_id' field to an invalid value to test server's rejection of incorrect session IDs.""",ClientHello,legacy_session_id,SET,None,None,"""invalid_session_id""","""Server rejects the ClientHello with an illegal_parameter alert."""
10,4.1.2.. Handshake Protocol_Key Exchange Messages_Client Hello,Field Descriptions,CLI-MSG-CONST,1,"""The 'cipher_suites' field MUST contain a list of symmetric cipher options supported by the client.""",SRV-MSG-PROC,1,"""Servers MUST validate the 'cipher_suites' field to ensure it contains supported symmetric cipher options.""","""Set the 'cipher_suites' field to an unsupported cipher suite to verify server rejection.""",ClientHello,cipher_suites,SET,None,None,"""0x0000""","""Server rejects the ClientHello with an illegal_parameter alert."""
11,4.1.2.. Handshake Protocol_Key Exchange Messages_Client Hello,Field Descriptions,CLI-MSG-CONST,1,"""The 'legacy_compression_methods' field MUST contain exactly one byte, set to zero.""",SRV-MSG-PROC,1,"""Servers MUST check that the 'legacy_compression_methods' field contains exactly one byte, set to zero.""","""Set the 'legacy_compression_methods' field to more than one byte to test server handling of invalid compression method lengths.""",ClientHello,legacy_compression_methods,SET,None,None,"""0x01, 0x02""","""Server aborts the handshake with an illegal_parameter alert."""
12,4.1.2.. Handshake Protocol_Key Exchange Messages_Client Hello,Field Descriptions,CLI-MSG-CONST,1,"""The 'extensions' field is used by clients to request extended functionality from servers.""",SRV-MSG-PROC,1,"""Servers MUST process the 'extensions' field to fulfill the extended functionality requests from clients.""","""Set the 'extensions' field to an incorrect format to test server's handling of malformed extension requests.""",ClientHello,extensions,SET,None,None,"""malformed_extension_data""","""Server rejects the ClientHello with an illegal_parameter alert."""
13,4.1.2.. Handshake Protocol_Key Exchange Messages_Client Hello,Extension Handling,CLI-MSG-CONST,1,"""Clients MUST include extensions in ClientHello messages, with at least the 'supported_versions' extension.""",SRV-MSG-PROC,1,"""Servers MUST ignore any unrecognized extensions in ClientHello messages.""","""Insert an unrecognized extension to test the server's handling of unknown extensions.""",ClientHello,unknown_extension,INSERT,supported_versions,AFTER,"""0xFFFF""","""Server ignores the unknown extension and proceeds with the handshake."""
14,4.1.2.. Handshake Protocol_Key Exchange Messages_Client Hello,Extension Handling,CLI-MSG-CONST,1,"""Clients MUST include mandatory extensions as specified in the TLS 1.3 protocol.""",SRV-MSG-PROC,1,"""Servers MUST process ClientHello messages while adhering to the mandatory extension requirements.""","""Remove the mandatory 'key_share' extension to test the server's handling of missing mandatory extensions.""",ClientHello,key_share,REMOVE,None,None,"""None""","""Server aborts the handshake with a missing_extension or illegal_parameter alert."""
15,4.1.3.. Handshake Protocol_Key Exchange Messages_Server Hello,Downgrade Protection Mechanism,CLI-MSG-CONST,1,"""Clients MUST check the last 8 bytes of the server's Random value during the handshake. If they are set to '44 4F 57 4E 47 52 44 01' (indicating a negotiation of TLS 1.2) or '44 4F 57 4E 47 52 44 00' (indicating TLS 1.1 or below), they MUST abort the handshake.""",SRV-MSG-PROC,1,"""Servers MUST set the last 8 bytes of the Random value to '44 4F 57 4E 47 52 44 01' when negotiating TLS 1.2 and to '44 4F 57 4E 47 52 44 00' when negotiating TLS 1.1 or below.""","""Set the last 8 bytes of the server's Random value to an incorrect value to test client handling of downgrade attempts.""",ServerHello,Random,SET,None,None,"""44 4F 57 4E 47 52 44 02""","""Client aborts the handshake due to invalid server Random value."""
16,4.1.3.. Handshake Protocol_Key Exchange Messages_Server Hello,Renegotiation Handling,CLI-MSG-CONST,1,"""A legacy TLS client performing renegotiation with TLS 1.2 or prior MUST abort the handshake upon receiving a TLS 1.3 ServerHello, issuing a 'protocol_version' alert.""",SRV-MSG-PROC,1,"""The server MUST not allow renegotiation when TLS 1.3 has been negotiated.""","""Simulate a legacy TLS client attempting to renegotiate upon receiving a TLS 1.3 ServerHello to verify the protocol version alert.""",ServerHello,protocol_version,SET,None,None,"""0x0303""","""Client aborts the handshake with a protocol_version alert."""
17,4.1.4.. Handshake Protocol_Key Exchange Messages_Hello Retry Request,Extension Processing and Updated ClientHello,CLI-MSG-CONST,1,"""Clients MUST process all extensions in the HelloRetryRequest and send a second updated ClientHello.""",SRV-MSG-PROC,1,"""Servers MUST ensure that the ClientHello includes only the extensions defined in the HelloRetryRequest.""","""Set an extension in the ClientHello that is not defined in the HelloRetryRequest to test server rejection.""",ClientHello,unsupported_extension,SET,None,None,"""0xFFFF""","""Server aborts the handshake with an illegal_parameter alert."""
18,4.1.4.. Handshake Protocol_Key Exchange Messages_Hello Retry Request,Extension Processing and Updated ClientHello,CLI-MSG-CONST,1,"""Clients MUST include the supported_versions, cookie, and key_share extensions as defined in the HelloRetryRequest.""",SRV-MSG-PROC,1,"""Servers MUST abort the handshake if a cipher suite not offered is received.""","""Remove one of the mandatory extensions (cookie) to test server response to missing mandatory extension.""",HelloRetryRequest,cookie,REMOVE,None,None,"""None""","""Server aborts the handshake with a missing_extension alert."""
19,4.1.4.. Handshake Protocol_Key Exchange Messages_Hello Retry Request,Version Retention in ServerHello,CLI-MSG-CONST,1,"""Clients MUST retain the value of selected_version in the HelloRetryRequest 'supported_versions' extension.""",SRV-MSG-PROC,1,"""Servers MUST ensure the value of selected_version in the HelloRetryRequest is the same in the ServerHello; otherwise, clients MUST abort the handshake with an 'illegal_parameter' alert.""","""Set the selected_version in the HelloRetryRequest to a different value than in the ServerHello to test client handling of version mismatches.""",HelloRetryRequest,selected_version,SET,None,None,"""0x0001""","""Client aborts the handshake with an illegal_parameter alert."""
20,4.2.. Handshake Protocol_Extensions,Extension Message Compatibility,CLI-MSG-CONST,1,"""Clients MUST ensure that extensions are only included in messages where they are specified to appear.""",SRV-MSG-PROC,1,"""Servers MUST abort the handshake with an 'illegal_parameter' alert if an extension is received in an unexpected message.""","""Insert an unexpected extension into a ClientHello message to test server handling of extensions in incorrect messages.""",ClientHello,unexpected_extension,INSERT,None,END,"""0x1234""","""Server aborts the handshake with an illegal_parameter alert."""
21,4.2.. Handshake Protocol_Extensions,Extension Order and Uniqueness,CLI-MSG-CONST,1,"""Clients MAY place extensions in any order in the ClientHello, except the ""pre_shared_key"" extension which MUST be last.""",SRV-MSG-PROC,1,"""Servers MUST ensure the ""pre_shared_key"" extension is the last extension in ClientHello.""","""Swap the position of the pre_shared_key extension to a non-last position to test server enforcement.""",ClientHello,pre_shared_key,SWAP,supported_versions,BEFORE,"""None""","""Server aborts the handshake with an illegal_parameter alert."""
22,4.2.. Handshake Protocol_Extensions,Extension Order and Uniqueness,CLI-MSG-CONST,1,"""Clients MUST NOT include more than one extension of the same type in any extension block.""",SRV-MSG-PROC,1,"""Servers MUST reject ClientHello messages with duplicate extension types.""","""Duplicate an existing extension in the ClientHello to test the server's handling of duplicate extensions.""",ClientHello,supported_versions,DUPLICATE,supported_versions,AFTER,"""None""","""Server aborts the handshake with an illegal_parameter alert."""
23,4.2.1.. Handshake Protocol_Extensions_Supported Versions,ClientHello Requirements,CLI-MSG-CONST,1,"""Clients MUST send the 'Supported Versions' extension in ClientHello, containing all TLS versions they are prepared to negotiate, including at least 0x0304.""",SRV-MSG-PROC,1,"""Servers MUST process the 'Supported Versions' extension and validate that it includes all versions of TLS that the client is prepared to negotiate.""","""Set the 'Supported Versions' extension to exclude 0x0304 to test server response to missing required versions.""",ClientHello,supported_versions,SET,None,None,"""[0x0303]""","""Server aborts the handshake with a protocol_version alert."""
24,4.2.1.. Handshake Protocol_Extensions_Supported Versions,ClientHello Requirements,CLI-MSG-CONST,1,"""If previous versions of TLS are allowed for negotiation, they MUST also be included in the 'Supported Versions' extension.""",SRV-MSG-PROC,1,"""Servers MUST ensure that any previous TLS versions permitted for negotiation are present in the 'Supported Versions' extension.""","""Set the 'Supported Versions' extension to exclude a previous version of TLS that is allowed for negotiation.""",ClientHello,supported_versions,SET,None,None,"""0x0302""","""Server aborts the handshake with a missing_extension or illegal_parameter alert."""
25,4.2.1.. Handshake Protocol_Extensions_Supported Versions,Server Behavior With the Extension,CLI-MSG-CONST,1,"""Clients MUST include the ""supported_versions"" extension in ClientHello for server version negotiation.""",SRV-MSG-PROC,1,"""Servers MUST NOT use ClientHello.legacy_version for version negotiation if the ""supported_versions"" extension is present; they MUST use the versions specified in that extension.""","""Set the legacy_version field to an arbitrary version while including the supported_versions extension to test server's behavior ignoring legacy_version.""",ClientHello,legacy_version,SET,None,None,"""0x0302""","""Server uses the versions specified in the supported_versions extension for negotiation, ignoring the legacy_version."""
26,4.2.1.. Handshake Protocol_Extensions_Supported Versions,Server Behavior With the Extension,CLI-MSG-CONST,1,"""Clients MUST ensure that the ""supported_versions"" extension lists all TLS versions they support.""",SRV-MSG-PROC,1,"""Servers MUST select a TLS version from the ""supported_versions"" extension and MUST ignore any unknown versions present.""","""Set the 'supported_versions' extension to include an unsupported version to validate server handling.""",ClientHello,supported_versions,SET,None,None,"""[0xFFFF, 0x0304]""","""Server selects a valid version from the list, ignoring the unsupported ones."""
27,4.2.1.. Handshake Protocol_Extensions_Supported Versions,Negotiation of Versions Prior to TLS 1.2,CLI-MSG-CONST,1,"""Clients that support prior versions of TLS SHOULD include TLS 1.2 in their supported versions list.""",SRV-MSG-PROC,1,"""Servers MUST be prepared to receive ClientHellos with this extension, and handle cases where 0x0304 (TLS 1.3) is not included in the list of versions.""","""Set the supported_versions field to exclude TLS 1.2 to test server's handling of unsupported versions.""",ClientHello,supported_versions,SET,None,None,"""0x0301, 0x0302""","""Server aborts the handshake with a protocol_version alert."""
28,4.2.1.. Handshake Protocol_Extensions_Supported Versions,Client Checks for the Supported Versions Extension,CLI-MSG-CONST,1,"""Clients MUST check for the 'supported_versions' extension prior to processing the rest of the ServerHello.""",SRV-MSG-PROC,1,"""If the 'supported_versions' extension is present, clients MUST ignore the ServerHello.legacy_version value.""","""Remove the 'supported_versions' extension from the ServerHello to test if the client processes the legacy_version value.""",ServerHello,supported_versions,REMOVE,None,None,"""None""","""Client processes the legacy_version value without ignoring it."""
29,4.2.1.. Handshake Protocol_Extensions_Supported Versions,Client Checks for the Supported Versions Extension,CLI-MSG-CONST,1,"""Clients MUST use only the 'supported_versions' extension to determine the selected version.""",SRV-MSG-PROC,1,"""If the 'supported_versions' extension contains a version not offered by the client or a version prior to TLS 1.3, clients MUST abort the handshake with an 'illegal_parameter' alert.""","""Set the 'supported_versions' extension to a version prior to TLS 1.3 to test the client's handling of unsupported versions.""",ClientHello,supported_versions,SET,None,None,"""0x0301""","""Client aborts the handshake with an illegal_parameter alert."""
30,4.2.2.. Handshake Protocol_Extensions_Cookie,HelloRetryRequest Cookie Extension,CLI-MSG-CONST,1,"""Clients MUST copy the contents of the 'cookie' extension received in the HelloRetryRequest into a 'cookie' extension in the new ClientHello.""",SRV-MSG-PROC,1,"""Servers MAY include a 'cookie' extension in the HelloRetryRequest to the client.""","""Remove the 'cookie' extension from the ClientHello after receiving it in the HelloRetryRequest to test server handling of missing cookies.""",ClientHello,cookie,REMOVE,None,None,"""None""","""Server aborts the handshake with a missing_extension or illegal_parameter alert."""
31,4.2.2.. Handshake Protocol_Extensions_Cookie,HelloRetryRequest Cookie Extension,CLI-MSG-CONST,1,"""Clients MUST NOT use cookies in their initial ClientHello in subsequent connections.""",SRV-MSG-PROC,0,"""No server-side processing rule regarding the prohibition of using cookies in initial ClientHello messages.""","""Set a cookie in the initial ClientHello message to verify server response to invalid usage.""",ClientHello,cookie,SET,None,None,"""cookie_value""","""Server processes the ClientHello without enforcing the cookie prohibition."""
32,4.2.3.. Handshake Protocol_Extensions_Signature Algorithms,Client Requirements for Signature Algorithms,CLI-MSG-CONST,1,"""Clients MUST send the ""signature_algorithms"" extension if they desire server authentication via a certificate.""",SRV-MSG-PROC,1,"""Servers MUST abort the handshake with a ""missing_extension"" alert if the client has not sent the ""signature_algorithms"" extension while authenticating via a certificate.""","""Remove the 'signature_algorithms' extension from the ClientHello to test server handling of missing extensions.""",ClientHello,signature_algorithms,REMOVE,None,None,"""None""","""Server aborts the handshake with a missing_extension alert."""
33,4.2.3.. Handshake Protocol_Extensions_Signature Algorithms,RSASSA-PSS Algorithms,CLI-MSG-CONST,1,"""Clients MUST specify a signature algorithm using RSASSA-PSS with mask generation function 1, ensuring that the Salt length equals the output length of the digest algorithm.""",SRV-MSG-PROC,1,"""Servers MUST validate that the Salt length matches the output length of the specified digest algorithm.""","""Set the Salt length to a value different from the output length of the digest algorithm to test server validation.""",ClientHello,signature_algorithm,SET,None,None,"""RSASSA-PSS with Salt length = 32 (when digest output is 64)""","""Server rejects the ClientHello with an illegal_parameter alert."""
34,4.2.3.. Handshake Protocol_Extensions_Signature Algorithms,TLS 1.2 Compatibility,CLI-MSG-CONST,1,"""Clients negotiating TLS 1.2 MUST comply with the requirements of RFC5246. Clients MAY omit the signature algorithms extension in ClientHellos.""",SRV-MSG-PROC,1,"""Servers MUST ensure that legacy signature algorithm pairs, which are deprecated, MUST NOT be offered or negotiated.""","""Set the signature algorithms extension in the ClientHello to include a deprecated signature algorithm to test server rejection of unsupported algorithms.""",ClientHello,signature_algorithms,SET,None,None,"""0x0001""","""Server rejects the ClientHello with an illegal_parameter alert."""
35,4.2.5.. Handshake Protocol_Extensions_OID Filters,Filters List Description,CLI-MSG-CONST,1,"""Clients MUST include all specified certificate extension OIDs in the client certificate if the server provides a non-empty filters list.""",SRV-MSG-PROC,1,"""Servers MUST ensure that the client certificate contains all specified extension OIDs that the client recognizes from the filters list.""","""Remove a specified certificate extension OID from the client certificate to test the server's response to incomplete OIDs.""",Certificate,certificate_extensions,REMOVE,None,None,"""None""","""Server aborts the handshake with a certificate_unrecognized alert."""
36,4.2.5.. Handshake Protocol_Extensions_OID Filters,Client Certificate Requirements,CLI-MSG-CONST,1,"""Clients MUST ensure that all specified values for recognized extension OIDs are present in the client certificate, although the certificate MAY contain additional values.""",SRV-MSG-PROC,1,"""Servers MAY choose to continue the connection without client authentication or abort the handshake with an 'unsupported_certificate' alert if the client ignores required certificate extension OIDs.""","""Set an unrecognized value for a recognized extension OID in the client certificate to test server's handling of unsupported certificates.""",ClientHello,certificate,SET,None,None,"""Invalid_OID_Value""","""Server aborts the handshake with an unsupported_certificate alert."""
37,4.2.5.. Handshake Protocol_Extensions_OID Filters,Client Certificate Requirements,CLI-MSG-CONST,1,"""Clients MUST ignore and skip any unrecognized certificate extension OIDs.""",SRV-MSG-PROC,1,"""Servers MUST handle the absence of required certificate extension OIDs appropriately, based on the client's compliance.""","""Set an unrecognized certificate extension OID in the client's certificate to test server's handling of ignored OIDs.""",Certificate,unrecognized_extension_oid,SET,None,None,"""0x9999""","""Server processes the certificate without error, ignoring the unrecognized OID."""
38,4.2.5.. Handshake Protocol_Extensions_OID Filters,OID Uniqueness and Matching Rules,CLI-MSG-CONST,1,"""Clients MUST NOT include the same OID more than once in the filters list.""",SRV-MSG-PROC,1,"""Servers MUST ensure that no OID appears more than once in the filters list.""","""Duplicate an OID in the filters list of the ClientHello message to test server enforcement of uniqueness.""",ClientHello,filters,DUPLICATE,filters,AFTER,"""1.2.3.4.5""","""Server aborts the handshake with an illegal_parameter alert."""
39,4.2.5.. Handshake Protocol_Extensions_OID Filters,OID Uniqueness and Matching Rules,CLI-MSG-CONST,1,"""Clients MUST assert all key usage bits in the request that are also in the Key Usage certificate extension.""",SRV-MSG-PROC,1,"""Servers MUST verify that all key usage bits asserted in the request are present in the Key Usage certificate extension.""","""Set key usage bits in the request that are not present in the Key Usage certificate extension to test server validation.""",ClientHello,key_usage_bits,SET,None,None,"""0x05""","""Server rejects the ClientHello with an illegal_parameter alert."""
40,4.2.5.. Handshake Protocol_Extensions_OID Filters,OID Uniqueness and Matching Rules,CLI-MSG-CONST,1,"""Clients MUST assert all key purpose OIDs present in the request that are found in the Extended Key Usage certificate extension.""",SRV-MSG-PROC,1,"""Servers MUST check that all key purpose OIDs in the request are present in the Extended Key Usage certificate extension.""","""Set a key purpose OID in the ClientHello that is not included in the Extended Key Usage certificate extension to test server enforcement.""",ClientHello,key_purpose_OID,SET,None,None,"""1.2.3.4.5""","""Server aborts the handshake with an illegal_parameter alert."""
41,4.2.5.. Handshake Protocol_Extensions_OID Filters,OID Uniqueness and Matching Rules,CLI-MSG-CONST,1,"""Clients MUST NOT use the anyExtendedKeyUsage OID in the request.""",SRV-MSG-PROC,1,"""Servers MUST reject requests using the anyExtendedKeyUsage OID.""","""Set the request to include the anyExtendedKeyUsage OID to test server's rejection of invalid OIDs.""",CertificateRequest,extended_key_usage,SET,None,None,"""anyExtendedKeyUsage""","""Server rejects the request with an illegal_parameter alert."""
42,4.2.8.. Handshake Protocol_Extensions_Key Share,Client Shares Description,CLI-MSG-CONST,1,"""Clients MUST offer KeyShareEntry values corresponding to groups in the 'supported_groups' extension, listed in descending order of preference. The client_shares vector MAY be empty if requesting a HelloRetryRequest.""",SRV-MSG-PROC,1,"""Servers MUST validate that each KeyShareEntry corresponds to a group in the 'supported_groups' extension and appears in the correct order.""","""Set the KeyShareEntry values to groups that are not included in the 'supported_groups' extension to test server validation.""",ClientHello,key_shares,SET,None,None,"""{""group"":""0x1234"",""key_share"":""some_key_data""}""","""Server aborts the handshake with an illegal_parameter alert."""
43,4.2.8.. Handshake Protocol_Extensions_Key Share,KeyShare Entry Rules,CLI-MSG-CONST,1,"""Clients MUST offer KeyShareEntry values only for groups listed in the 'supported_groups' extension and MUST NOT offer multiple KeyShareEntry values for the same group.""",SRV-MSG-PROC,1,"""Servers MAY check for violations of KeyShareEntry rules and abort the handshake with an 'illegal_parameter' alert if any rule is violated.""","""Set multiple KeyShareEntry values for the same group to test server enforcement of KeyShareEntry rules.""",ClientHello,KeyShareEntry,SET,None,None,"""Multiple entries for the same group""","""Server aborts the handshake with an illegal_parameter alert."""
44,4.2.8.. Handshake Protocol_Extensions_Key Share,Selected Group Verification,CLI-MSG-CONST,1,"""Clients MUST verify that the selected_group field in HelloRetryRequest corresponds to a group in the 'supported_groups' extension of the original ClientHello and does not correspond to a group in the 'key_share' extension of the original ClientHello.""",SRV-MSG-PROC,1,"""Servers MUST ensure that clients abort the handshake with an 'illegal_parameter' alert if the selected_group verification fails.""","""Set the selected_group field in HelloRetryRequest to a group not present in the 'supported_groups' extension to test server rejection of invalid groups.""",HelloRetryRequest,selected_group,SET,None,None,"""0x001D""","""Server sends an illegal_parameter alert due to failed verification."""
45,4.2.8.. Handshake Protocol_Extensions_Key Share,Verification of Selected NamedGroup,CLI-MSG-CONST,1,"""Clients MUST verify that the selected NamedGroup in the ServerHello matches the NamedGroup in the HelloRetryRequest when using (EC)DHE key establishment.""",SRV-MSG-PROC,1,"""Servers MUST ensure that the NamedGroup selection is consistent between the HelloRetryRequest and ServerHello.""","""Set the NamedGroup in the ServerHello to a different value than the one in the HelloRetryRequest to test client verification.""",ServerHello,NamedGroup,SET,HelloRetryRequest,None,"""0x001D""","""Client rejects the ServerHello due to NamedGroup mismatch."""
46,4.2.8.. Handshake Protocol_Extensions_Key Share,Verification of Selected NamedGroup,CLI-MSG-CONST,1,"""If the NamedGroup verification fails, the client MUST abort the handshake and send an 'illegal_parameter' alert.""",SRV-MSG-PROC,0,"""Servers should be prepared to handle ClientHello messages that may lead to an 'illegal_parameter' alert due to NamedGroup mismatch.""","""Set an invalid NamedGroup in the key_share extension to verify that the server responds correctly to the illegal_parameter alert.""",ClientHello,key_share.named_group,SET,None,None,"""0xFFFF""","""Server aborts the handshake with an illegal_parameter alert."""
47,4.2.8.1.. Handshake Protocol_Extensions_Key Share_Diffie-Hellman Parameters,Public Key Validation,CLI-MSG-CONST,1,"""Clients MUST validate that their own public key Y satisfies the condition 1 < Y < p-1.""",SRV-MSG-PROC,1,"""Servers MUST also validate that the public key Y of the remote peer satisfies the condition 1 < Y < p-1.""","""Set the public key Y value to a value that does not satisfy the condition 1 < Y < p-1 to test validation enforcement.""",ClientHello,public_key_Y,SET,None,None,"""0""","""Server rejects the ClientHello with an illegal_parameter alert."""
48,4.2.8.2.. Handshake Protocol_Extensions_Key Share_ECDHE Parameters,Public Value Validation,CLI-MSG-CONST,1,"""Peers MUST validate each other's public value Q by ensuring Q is a valid point on the elliptic curve, specifically checking that Q is not the point at infinity, that both integers x and y are within the correct interval, and that (x, y) satisfies the elliptic curve equation.""",SRV-MSG-PROC,1,"""Servers MUST verify the public value Q following the specified steps: ensuring Q is not the point at infinity, confirming x and y are in the correct interval, and checking that (x, y) satisfies the elliptic curve equation.""","""Set Q to an invalid elliptic curve point to test the server's validation process.""",ClientKeyShare,Q,SET,None,None,"""(infinity)""","""Server aborts the handshake with an illegal_parameter alert."""
49,4.2.9.. Handshake Protocol_Extensions_Pre-Shared Key Exchange Modes,PSK Key Exchange Modes Extension Overview,CLI-MSG-CONST,1,"""Clients MUST send a 'psk_key_exchange_modes' extension to indicate the supported modes for PSK usage.""",SRV-MSG-PROC,1,"""Servers MUST interpret the 'psk_key_exchange_modes' extension to restrict PSK options based on the client's capabilities.""","""Set the 'psk_key_exchange_modes' extension to an unsupported mode to test server's rejection of invalid PSK modes.""",ClientHello,psk_key_exchange_modes,SET,None,None,"""0xFF""","""Server rejects the ClientHello with an illegal_parameter alert."""
50,4.2.9.. Handshake Protocol_Extensions_Pre-Shared Key Exchange Modes,Client Requirements for PSK Extensions,CLI-MSG-CONST,1,"""Clients MUST provide a 'psk_key_exchange_modes' extension if they offer a 'pre_shared_key' extension.""",SRV-MSG-PROC,1,"""Servers MUST abort the handshake if clients offer 'pre_shared_key' without a 'psk_key_exchange_modes' extension.""","""Set a 'pre_shared_key' extension without including the required 'psk_key_exchange_modes' extension to test the server's handling of missing mandatory extensions.""",ClientHello,psk_key_exchange_modes,REMOVE,pre_shared_key,AFTER,"""None""","""Server aborts the handshake with a missing_extension alert."""
51,4.2.9.. Handshake Protocol_Extensions_Pre-Shared Key Exchange Modes,Client Requirements for PSK Extensions,CLI-MSG-CONST,1,"""Clients MUST ensure that the key exchange mode offered is compatible with the modes advertised.""",SRV-MSG-PROC,1,"""Servers MUST NOT select a key exchange mode that is not listed by the client.""","""Set an incompatible key exchange mode in the ClientHello to test server's rejection of invalid modes.""",ClientHello,psk_key_exchange_modes,SET,None,None,"""0x03""","""Server rejects the ClientHello with an illegal_parameter alert."""
52,4.2.9.. Handshake Protocol_Extensions_Pre-Shared Key Exchange Modes,Client Requirements for PSK Extensions,CLI-MSG-CONST,0,"""Clients SHOULD be aware that if a server sends NewSessionTicket with incompatible tickets, the client's attempts at resumption may fail.""",SRV-MSG-PROC,0,"""Servers SHOULD NOT send NewSessionTicket with tickets that are not compatible with the advertised modes.""","""Set the NewSessionTicket with an incompatible ticket to test client response to incompatible session resumption attempts.""",NewSessionTicket,session_ticket,SET,None,None,"""incompatible_ticket_data""","""Client fails to resume the session due to incompatible ticket and may not proceed with the handshake."""
53,4.2.9.. Handshake Protocol_Extensions_Pre-Shared Key Exchange Modes,Key Exchange Mode Descriptions,CLI-MSG-CONST,1,"""In the psk_dhe_ke mode, both the client and server MUST supply 'key_share' values.""",SRV-MSG-PROC,1,"""Servers MUST provide 'key_share' values in psk_dhe_ke mode as specified in Section 4.2.8.""","""Set the 'key_share' field to an invalid format to test server's handling of improperly formatted key shares.""",ClientHello,key_share,SET,None,None,"""invalid_format_key_share""","""Server aborts the handshake with an illegal_parameter alert."""
54,4.2.10.. Handshake Protocol_Extensions_Early Data Indication,Early Data Indication Overview,CLI-MSG-CONST,1,"""Clients MUST supply both the ""pre_shared_key"" and ""early_data"" extensions when using PSK with early data.""",SRV-MSG-PROC,0,"""Servers must handle the early data if both extensions are provided, but no specific requirement is detailed.""","""Remove the 'early_data' extension from the ClientHello to test server behavior when mandatory extensions are missing.""",ClientHello,early_data,REMOVE,None,None,"""None""","""Server aborts the handshake with a missing_extension or illegal_parameter alert."""
55,4.2.10.. Handshake Protocol_Extensions_Early Data Indication,Parameters for 0-RTT Data,CLI-MSG-CONST,1,"""Clients MUST use the first PSK listed in the 'pre_shared_key' extension to encrypt early data.""",SRV-MSG-PROC,1,"""Servers MUST validate that the PSK used to encrypt early data is the first PSK listed in the client's 'pre_shared_key' extension.""","""Set the PSK used for early data encryption to a PSK that is not the first listed in the 'pre_shared_key' extension.""",ClientHello,pre_shared_key,SET,None,None,"""second_psk_value""","""Server rejects the early data with an invalid_psk alert."""
56,4.2.10.. Handshake Protocol_Extensions_Early Data Indication,Error Handling for Early Data,CLI-MSG-CONST,1,"""Clients MUST handle the case where the server rejects a 0-RTT handshake by ensuring that no 0-RTT records are sent if the server does not support them.""",SRV-MSG-PROC,1,"""Servers MUST NOT respond with the extension if any checks fail and MUST discard all first-flight data, falling back to 1-RTT or 2-RTT.""","""Set the early data flag to indicate 0-RTT data should be sent when the server does not support it, testing client handling.""",ClientHello,early_data,SET,None,None,"""1""","""Server discards all first-flight data and falls back to 1-RTT."""
57,4.2.10.. Handshake Protocol_Extensions_Early Data Indication,Error Handling for Early Data,CLI-MSG-CONST,1,"""Clients MUST expect that if the server rejects the 0-RTT handshake, it will not have the 0-RTT record protection keys.""",SRV-MSG-PROC,1,"""Servers MUST use trial decryption to find the first non-0-RTT message when rejecting 0-RTT handshakes.""","""Set the 0-RTT handshake to be rejected and verify the server's handling of non-0-RTT messages using trial decryption.""",ClientHello,early_data,SET,None,None,"""0""","""Server rejects the 0-RTT handshake and correctly identifies the non-0-RTT message."""
58,4.2.11.. Handshake Protocol_Extensions_Pre-Shared Key Extension,Field Descriptions,CLI-MSG-CONST,1,"""Clients MUST provide a label for a key, which can be a ticket or a pre-shared key label.""",SRV-MSG-PROC,1,"""Servers MUST recognize and utilize the identity label provided by the client.""","""Set the key label to an invalid format to test server's handling of identity labels.""",ClientHello,key_label,SET,None,None,"""invalid_label_format""","""Server aborts the handshake with an illegal_parameter alert."""
59,4.2.11.. Handshake Protocol_Extensions_Pre-Shared Key Extension,Field Descriptions,CLI-MSG-CONST,1,"""Clients SHOULD use an obfuscated_ticket_age of 0 for externally established identities, which servers MUST ignore.""",SRV-MSG-PROC,1,"""Servers MUST ignore the obfuscated_ticket_age value when it is 0.""","""Set the 'obfuscated_ticket_age' field to a value other than 0 to test server's handling of this field.""",ClientHello,obfuscated_ticket_age,SET,None,None,"""1""","""Server processes the ClientHello normally, ignoring the obfuscated_ticket_age."""
60,4.2.11.. Handshake Protocol_Extensions_Pre-Shared Key Extension,Field Descriptions,CLI-MSG-CONST,1,"""Clients MUST send a list of identities they are willing to negotiate, using the first identity for 0-RTT data if 'early_data' is also sent.""",SRV-MSG-PROC,1,"""Servers MUST select the first identity from the identities list for processing 0-RTT data if the 'early_data' extension is present.""","""Set the identity list to an empty array to test server behavior with no identities provided.""",ClientHello,identities,SET,None,None,"""""","""Server aborts the handshake with a missing_extension alert."""
61,4.2.11.. Handshake Protocol_Extensions_Pre-Shared Key Extension,Field Descriptions,CLI-MSG-CONST,1,"""Clients MUST provide binders as HMAC values for each identity in the identities list.""",SRV-MSG-PROC,1,"""Servers MUST validate the binders against the identities provided.""","""Set a binder that does not correspond to any identity in the identities list to test server validation.""",ClientHello,binders,SET,identities,AFTER,"""Invalid_HMAC_Value""","""Server aborts the handshake with an illegal_parameter alert."""
62,4.2.11.. Handshake Protocol_Extensions_Pre-Shared Key Extension,Field Descriptions,CLI-MSG-CONST,1,"""Clients MUST indicate the server's chosen identity as a (0-based) index into the identities list.""",SRV-MSG-PROC,1,"""Servers MUST confirm the selected_identity index corresponds to an identity in the client's list.""","""Set the selected_identity index to a value that exceeds the range of the identities list to evaluate server response.""",ClientHello,selected_identity,SET,None,None,"""10""","""Server aborts the handshake with an illegal_parameter alert."""
63,4.2.11.. Handshake Protocol_Extensions_Pre-Shared Key Extension,PSK Hash Algorithm,CLI-MSG-CONST,1,"""Externally established PSKs MUST have the Hash algorithm set during establishment or default to SHA-256 if no algorithm is defined.""",SRV-MSG-PROC,1,"""The server MUST ensure that it selects a compatible PSK and cipher suite.""","""Set the PSK hash algorithm to an unsupported value to test server's handling of incompatible PSK.""",ClientHello,psk_hash_algorithm,SET,None,None,"""0xFFFF""","""Server aborts the handshake with an illegal_parameter alert."""
64,4.2.11.. Handshake Protocol_Extensions_Pre-Shared Key Extension,PSK Hash Algorithm,CLI-MSG-CONST,1,"""For PSKs established via the ticket mechanism, the Hash algorithm is the KDF Hash algorithm from the connection where the ticket was established.""",SRV-MSG-PROC,0,"""Servers use the KDF Hash algorithm from the connection for PSKs established via the ticket mechanism.""","""Set the Hash algorithm to a value not matching the KDF Hash algorithm from the original connection to test server compliance with the PSK mechanism.""",ClientHello,psk_hash_algorithm,SET,None,None,"""0x1234""","""Server aborts the handshake with an illegal_parameter alert."""
65,4.2.11.. Handshake Protocol_Extensions_Pre-Shared Key Extension,Client Verification,CLI-MSG-CONST,1,"""Clients MUST verify that the selected_identity is within the supplied range, that the selected cipher suite indicates a Hash associated with the PSK, and that a server 'key_share' extension is present if required by the 'psk_key_exchange_modes' extension.""",SRV-MSG-PROC,1,"""Servers MUST ensure the selected_identity, cipher suite, and 'key_share' extension are consistent with the ClientHello parameters.""","""Set the 'selected_identity' to a value outside the acceptable range to test client verification.""",ClientHello,selected_identity,SET,None,None,"""invalid_identity""","""Server aborts the handshake with an illegal_parameter alert."""
66,4.2.11.. Handshake Protocol_Extensions_Pre-Shared Key Extension,Client Verification,CLI-MSG-CONST,1,"""Clients MUST abort the handshake with an 'illegal_parameter' alert if the verification of the selected_identity, cipher suite, or 'key_share' extension fails.""",SRV-MSG-PROC,1,"""Servers MUST handle the 'illegal_parameter' alert appropriately, ensuring the handshake is terminated correctly.""","""Set an invalid cipher suite in the ClientHello to test the client's verification mechanism.""",ClientHello,cipher_suites,SET,None,None,"""0x0000""","""Client aborts the handshake with an illegal_parameter alert."""
67,4.2.11.. Handshake Protocol_Extensions_Pre-Shared Key Extension,Early Data Handling,CLI-MSG-CONST,1,"""Clients MUST verify that the server's selected_identity is 0 if the server supplies an ""early_data"" extension.""",SRV-MSG-PROC,0,"""If the server supplies an ""early_data"" extension, it must ensure the selected_identity is set appropriately.""","""Set the selected_identity to a non-zero value when the early_data extension is present to test client verification.""",ClientHello,selected_identity,SET,None,None,"""1""","""Client rejects the server response due to invalid selected_identity with an appropriate alert."""
68,4.2.11.. Handshake Protocol_Extensions_Pre-Shared Key Extension,Early Data Handling,CLI-MSG-CONST,1,"""Clients MUST abort the handshake with an ""illegal_parameter"" alert if any value other than 0 is returned for selected_identity.""",SRV-MSG-PROC,0,"""Servers must ensure proper handling of selected_identity values to avoid handshake failures.""","""Set the selected_identity to a non-zero value to test client handling of invalid identities.""",ClientHello,selected_identity,SET,None,None,"""1""","""Client aborts the handshake with an illegal_parameter alert."""
69,4.2.11.. Handshake Protocol_Extensions_Pre-Shared Key Extension,Extension Positioning,CLI-MSG-CONST,1,"""Clients MUST place the ""pre_shared_key"" extension last in the ClientHello.""",SRV-MSG-PROC,1,"""Servers MUST check that the ""pre_shared_key"" extension is the last extension in ClientHello and fail the handshake with an ""illegal_parameter"" alert if it is not.""","""Swap the position of the pre_shared_key extension to a non-last position to test server enforcement.""",ClientHello,pre_shared_key,SWAP,supported_versions,BEFORE,"""None""","""Server aborts the handshake with an illegal_parameter alert."""
70,4.2.11.1.. Handshake Protocol_Extensions_Pre-Shared Key Extension_Ticket Age,Client Ticket Age Handling,CLI-MSG-CONST,1,"""Clients MUST consider the ticket age as the time since receiving the NewSessionTicket message and MUST NOT use tickets with ages greater than the 'ticket_lifetime' value.""",SRV-MSG-PROC,1,"""Servers must ensure that clients do not use tickets exceeding the specified 'ticket_lifetime' during session resumption.""","""Set the ticket age to a value greater than the 'ticket_lifetime' to test server rejection behavior.""",ClientHello,ticket_age,SET,None,None,"""5000""","""Server rejects the ClientHello with an illegal_parameter alert."""
71,4.2.11.3.. Handshake Protocol_Extensions_Pre-Shared Key Extension_Processing Order,0-RTT Data Streaming and Processing Order,CLI-MSG-CONST,1,"""Clients are permitted to stream 0-RTT data until they receive the server's Finished message. They must send the EndOfEarlyData message after receiving this.""",SRV-MSG-PROC,1,"""Servers MUST process the client's ClientHello and immediately send their flight of messages, rather than waiting for the client's EndOfEarlyData message before sending its ServerHello.""","""Send 0-RTT data without waiting for the EndOfEarlyData message to test server's immediate processing of the ClientHello.""",ClientHello,0-RTT data,SET,EndOfEarlyData,BEFORE,"""0-RTT payload""","""Server processes the ClientHello and sends the ServerHello without waiting for EndOfEarlyData."""
72,4.3.1.. Handshake Protocol_Server Parameters_Encrypted Extensions,Purpose of EncryptedExtensions,CLI-MSG-CONST,1,"""Clients MUST check the EncryptedExtensions message for forbidden extensions.""",SRV-MSG-PROC,1,"""If forbidden extensions are found in the EncryptedExtensions message, clients MUST abort the handshake with an 'illegal_parameter' alert.""","""Insert a forbidden extension into the EncryptedExtensions message to verify client handling.""",EncryptedExtensions,forbidden_extension,INSERT,None,START,"""0xFFFF""","""Client aborts the handshake with an illegal_parameter alert."""
73,4.4.2.. Handshake Protocol_Authentication Messages_Certificate,Certificate Message Overview,CLI-MSG-CONST,1,"""If the server requests client authentication but no suitable certificate is available, the client MUST send a Certificate message with an empty certificate_list.""",SRV-MSG-PROC,1,"""The server MUST accept a Certificate message with an empty certificate_list when the client has no certificates.""","""Set the certificate_list field to be empty in the Certificate message to verify server acceptance of empty certificate lists.""",Certificate,certificate_list,SET,None,None,"""""","""Server accepts the Certificate message with empty certificate_list."""
74,4.4.2.. Handshake Protocol_Authentication Messages_Certificate,Certificate Message Overview,CLI-MSG-CONST,1,"""A Finished message MUST be sent by both parties regardless of whether the Certificate message is empty.""",SRV-MSG-PROC,1,"""The server MUST send a Finished message after processing the Certificate message.""","""Test the server's handling when the Certificate message is empty, ensuring it still sends the Finished message.""",Finished,Certificate,REMOVE,None,None,"""None""","""Server sends a Finished message even when the Certificate message is empty."""
75,4.4.2.. Handshake Protocol_Authentication Messages_Certificate,Handling Certificate List Ordering,CLI-MSG-CONST,1,"""Clients SHOULD be prepared to handle potentially extraneous certificates and arbitrary orderings from any TLS version, but the end-entity certificate MUST be first.""",SRV-MSG-PROC,1,"""Servers MUST ensure that the end-entity certificate is the first in the certificate_list.""","""Set the first certificate in the certificate_list to a non-end-entity certificate to test server's enforcement of certificate ordering.""",Certificate,certificate_list,SET,None,START,"""non_end_entity_certificate""","""Server rejects the Certificate message with an illegal_parameter alert."""
76,4.4.2.. Handshake Protocol_Authentication Messages_Certificate,RawPublicKey Certificate Type,CLI-MSG-CONST,1,"""If the RawPublicKey certificate type is negotiated, the certificate_list MUST contain no more than one CertificateEntry.""",SRV-MSG-PROC,1,"""Servers MUST validate that the certificate_list contains at most one CertificateEntry with an ASN1_subjectPublicKeyInfo value.""","""Set the certificate_list to contain two CertificateEntries to test server's validation of certificate count.""",Certificate,certificate_list,SET,None,None,"""[CertificateEntry1, CertificateEntry2]""","""Server rejects the Certificate message with an illegal_parameter alert."""
77,4.4.2.. Handshake Protocol_Authentication Messages_Certificate,OpenPGP Certificate Type,CLI-MSG-CONST,1,"""Clients MUST NOT use the OpenPGP certificate type with TLS 1.3.""",SRV-MSG-PROC,1,"""Servers MUST reject any authentication message that includes the OpenPGP certificate type.""","""Set the certificate type to OpenPGP in a ClientHello message to verify server rejection.""",Certificate,certificate_type,SET,None,None,"""OpenPGP""","""Server rejects the message with an illegal_parameter alert."""
78,4.4.2.1.. Handshake Protocol_Authentication Messages_Certificate_OCSP Status and SCT Extensions,Deprecation of status_request_v2 Extension,CLI-MSG-CONST,1,"""Clients MAY include the status_request_v2 extension in ClientHello messages, but it is deprecated.""",SRV-MSG-PROC,1,"""Servers MUST NOT act upon the presence of the status_request_v2 extension in ClientHello messages and MUST NOT include it in EncryptedExtensions, CertificateRequest, or Certificate messages.""","""Set the status_request_v2 extension in the ClientHello message to check server's compliance with deprecation rules.""",ClientHello,status_request_v2,SET,None,END,"""0x0000""","""Server ignores the status_request_v2 extension and proceeds with the handshake without acting on it."""
79,4.4.2.1.. Handshake Protocol_Authentication Messages_Certificate_OCSP Status and SCT Extensions,Deprecation of status_request_v2 Extension,CLI-MSG-CONST,1,"""Clients MAY send the status_request_v2 extension in ClientHello, intending to use it with earlier TLS versions.""",SRV-MSG-PROC,1,"""Servers MUST be able to process ClientHello messages that include the deprecated status_request_v2 extension.""","""Set the status_request_v2 extension in the ClientHello to test server compliance with handling deprecated extensions.""",ClientHello,status_request_v2,SET,None,END,"""0x0005""","""Server processes the ClientHello including the deprecated status_request_v2 extension without errors."""
80,4.4.2.1.. Handshake Protocol_Authentication Messages_Certificate_OCSP Status and SCT Extensions,Client OCSP Response Request,CLI-MSG-CONST,1,"""Clients MAY send an OCSP response if a server requests it via an empty 'status_request' extension in the CertificateRequest message. If sent, the body of the 'status_request' extension MUST be a CertificateStatus structure as defined in [RFC6066].""",SRV-MSG-PROC,1,"""Servers MUST process the 'status_request' extension and validate the CertificateStatus structure if the client opts to send an OCSP response.""","""Set the 'status_request' extension to an invalid CertificateStatus structure to test server validation handling.""",CertificateRequest,status_request,SET,None,None,"""InvalidStructure""","""Server aborts the handshake with an illegal_parameter alert."""
81,4.4.2.2.. Handshake Protocol_Authentication Messages_Certificate_Server Certificate Selection,Client Handling of Certificate Chains,CLI-MSG-CONST,1,"""Clients MUST construct an acceptable chain using provided certificates or decide to abort the handshake.""",SRV-MSG-PROC,1,"""If the client aborts the handshake, it MUST send an appropriate certificate-related alert, defaulting to 'unsupported_certificate'.""","""Set an invalid certificate chain that cannot be verified to test the server's response to a client aborting the handshake.""",Certificate,certificate_list,SET,None,None,"""Invalid_Certificate_Chain""","""Server sends an unsupported_certificate alert upon client abort."""
82,4.4.2.3.. Handshake Protocol_Authentication Messages_Certificate_Client Certificate Selection,Client Certificate Selection Rules,CLI-MSG-CONST,1,"""Clients MUST send certificates of type X.509v3 unless explicitly negotiated otherwise.""",SRV-MSG-PROC,1,"""Servers MUST validate that the client certificate is of type X.509v3 unless a different type has been negotiated.""","""Set the client certificate type to a type other than X.509v3 to test server certificate validation.""",Certificate,certificate_type,SET,None,None,"""OtherType""","""Server rejects the certificate with an illegal_parameter alert."""
83,4.4.2.3.. Handshake Protocol_Authentication Messages_Certificate_Client Certificate Selection,Client Certificate Selection Rules,CLI-MSG-CONST,1,"""If the ""certificate_authorities"" extension in the CertificateRequest message is present, at least one certificate in the chain SHOULD be issued by one of the listed CAs.""",SRV-MSG-PROC,1,"""Servers SHOULD check that at least one certificate in the chain is issued by one of the CAs listed in the ""certificate_authorities"" extension.""","""Provide a certificate chain where none of the certificates is issued by the CAs listed in the certificate_authorities extension to test server behavior.""",Certificate,certificate_chain,SET,None,None,"""Certificates not issued by listed CAs""","""Server rejects the certificate with an illegal_parameter alert."""
84,4.4.2.3.. Handshake Protocol_Authentication Messages_Certificate_Client Certificate Selection,Client Certificate Selection Rules,CLI-MSG-CONST,1,"""Clients MUST ensure that certificates are signed using an acceptable signature algorithm as specified in Section 4.3.2.""",SRV-MSG-PROC,1,"""Servers MUST verify that the signature algorithm used to sign the certificates is acceptable as defined in Section 4.3.2.""","""Set the signature algorithm to an unacceptable value to test server rejection of invalid signatures.""",Certificate,signature_algorithm,SET,None,None,"""0xFFFF""","""Server rejects the certificate with an illegal_parameter alert."""
85,4.4.2.3.. Handshake Protocol_Authentication Messages_Certificate_Client Certificate Selection,Client Certificate Selection Rules,CLI-MSG-CONST,1,"""If the CertificateRequest message contains a non-empty ""oid_filters"" extension, the end-entity certificate MUST match the recognized OIDs.""",SRV-MSG-PROC,1,"""Servers MUST check that the end-entity certificate matches the OIDs specified in the ""oid_filters"" extension.""","""Set the end-entity certificate to an OID not recognized by the server while including an 'oid_filters' extension that specifies recognized OIDs to test server's enforcement.""",CertificateRequest,certificate,SET,None,None,"""0x123456""","""Server aborts the handshake with an illegal_parameter alert."""
86,4.4.2.4.. Handshake Protocol_Authentication Messages_Certificate_Receiving a Certificate Message,Server Certificate Handling,CLI-MSG-CONST,1,"""Clients MUST abort the handshake if the server supplies an empty Certificate message.""",SRV-MSG-PROC,1,"""Servers MUST ensure that they do not send an empty Certificate message to avoid client handshake abort.""","""Send an empty Certificate message from the server to test the client's handling of this scenario.""",Certificate,certificate_list,SET,None,None,"""None""","""Client aborts the handshake with a unexpected_message alert."""
87,4.4.2.4.. Handshake Protocol_Authentication Messages_Certificate_Receiving a Certificate Message,Signature Algorithm Restrictions,CLI-MSG-CONST,1,"""Endpoints MUST abort the handshake with a ""bad_certificate"" alert if they receive a certificate requiring validation using an MD5 hash.""",SRV-MSG-PROC,1,"""Servers MUST reject any certificate using MD5 for validation with a ""bad_certificate"" alert.""","""Set a certificate that requires MD5 for validation to verify server rejection.""",Certificate,certificate,SET,None,None,"""MD5-signed certificate""","""Server aborts the handshake with a bad_certificate alert."""
88,4.4.2.4.. Handshake Protocol_Authentication Messages_Certificate_Receiving a Certificate Message,Signature Algorithm Restrictions,CLI-MSG-CONST,1,"""It is RECOMMENDED that endpoints abort the handshake with a ""bad_certificate"" alert if they receive a certificate requiring validation using a SHA-1 hash.""",SRV-MSG-PROC,1,"""Servers are RECOMMENDED to reject certificates validated using SHA-1 with a ""bad_certificate"" alert.""","""Set a certificate in the ClientHello that is validated using a SHA-1 hash to test server's rejection of insecure certificates.""",Certificate,certificate_hash_algorithm,SET,None,None,"""SHA-1""","""Server aborts the handshake with a bad_certificate alert."""
89,4.4.3.. Handshake Protocol_Authentication Messages_Certificate Verify,Signature Algorithm Requirements,CLI-MSG-CONST,1,"""If the CertificateVerify message is sent by a client, the signature algorithm used in the signature MUST be one of those present in the supported_signature_algorithms field of the ""signature_algorithms"" extension in the CertificateRequest message.""",SRV-MSG-PROC,1,"""Servers MUST validate that the signature algorithm used in the client's CertificateVerify message corresponds to the supported signature algorithms from the client's CertificateRequest.""","""Set the signature algorithm in the CertificateVerify message to an unsupported value to test server validation.""",CertificateVerify,signature_algorithm,SET,None,None,"""0xFFFF""","""Server rejects the CertificateVerify with an illegal_parameter alert."""
90,4.4.3.. Handshake Protocol_Authentication Messages_Certificate Verify,Signature Algorithm Compatibility,CLI-MSG-CONST,1,"""The signature algorithm MUST be compatible with the key in the sender's end-entity certificate.""",SRV-MSG-PROC,1,"""Servers MUST verify that the signature algorithm used is compatible with the key in the sender's end-entity certificate.""","""Set the signature algorithm to an incompatible value to test server's verification process.""",CertificateVerify,signature_algorithm,SET,None,None,"""0xFFFF""","""Server aborts the handshake with an illegal_parameter alert."""
91,4.4.3.. Handshake Protocol_Authentication Messages_Certificate Verify,Signature Algorithm Compatibility,CLI-MSG-CONST,1,"""RSA signatures MUST use an RSASSA-PSS algorithm, regardless of the presence of RSASSA-PKCS1-v1_5 algorithms in 'signature_algorithms'.""",SRV-MSG-PROC,1,"""Servers MUST ensure that RSA signatures use the RSASSA-PSS algorithm.""","""Set the signature algorithm to RSASSA-PKCS1-v1_5 to test the server's rejection of incompatible signature algorithms.""",CertificateVerify,signature_algorithm,SET,None,None,"""RSASSA-PKCS1-v1_5""","""Server rejects the CertificateVerify message with an illegal_parameter alert."""
92,4.4.3.. Handshake Protocol_Authentication Messages_Certificate Verify,Signature Algorithm Compatibility,CLI-MSG-CONST,1,"""The SHA-1 algorithm MUST NOT be used in any signatures of CertificateVerify messages.""",SRV-MSG-PROC,1,"""Servers MUST reject CertificateVerify messages that use the SHA-1 algorithm in signatures.""","""Set the signature algorithm in CertificateVerify to SHA-1 to test server's rejection of insecure algorithms.""",CertificateVerify,signature_algorithm,SET,None,None,"""SHA-1""","""Server rejects the CertificateVerify message."""
93,4.4.4.. Handshake Protocol_Authentication Messages_Finished,Finished Message Overview,CLI-MSG-CONST,1,"""Clients MUST ensure the Finished message is correctly constructed to provide authentication of the handshake and computed keys.""",SRV-MSG-PROC,1,"""Servers MUST verify the correctness of the Finished message contents and terminate the connection with a ""decrypt_error"" alert if incorrect.""","""Set the Finished message to an incorrect value to test server's handling of authentication failures.""",Finished,verify_data,SET,None,None,"""incorrect_verify_data""","""Server terminates the connection with a decrypt_error alert."""
94,4.5.. Handshake Protocol_End of Early Data,EndOfEarlyData Message Overview,CLI-MSG-CONST,1,"""Clients MUST send an EndOfEarlyData message after receiving the server's Finished if the server sent an 'early_data' extension in EncryptedExtensions.""",SRV-MSG-PROC,1,"""Servers MUST ensure the EndOfEarlyData message is sent only if the 'early_data' extension was included in EncryptedExtensions.""","""Set up a scenario where the client sends an EndOfEarlyData message after the Finished message while the server did not include the 'early_data' extension.""",EndOfEarlyData,early_data_extension,SET,None,None,"""None""","""Server rejects the EndOfEarlyData message with an illegal_parameter alert."""
95,4.5.. Handshake Protocol_End of Early Data,EndOfEarlyData Message Overview,CLI-MSG-CONST,1,"""Clients MUST NOT send an EndOfEarlyData message if the server did not send an 'early_data' extension in EncryptedExtensions.""",SRV-MSG-PROC,1,"""Servers MUST reject any EndOfEarlyData messages received if the 'early_data' extension was not sent.""","""Send an EndOfEarlyData message from the client without the server having sent the 'early_data' extension to test server rejection.""",EndOfEarlyData,None,SET,None,None,"""None""","""Server rejects the EndOfEarlyData message."""
96,4.6.1.. Handshake Protocol_Post-Handshake Messages_New Session Ticket Message,Ticket Resumption Requirements,CLI-MSG-CONST,1,"""Clients MUST only attempt to resume a session with a cipher suite that uses the same KDF hash algorithm as the original connection.""",SRV-MSG-PROC,1,"""Servers MUST verify that the cipher suite used for resumption matches the KDF hash algorithm of the original session.""","""Set the cipher suite to one that uses a different KDF hash algorithm than the original session to test server's session resumption verification.""",NewSessionTicket,cipher_suite,SET,None,None,"""0x0035""","""Server rejects the session resumption attempt due to KDF hash algorithm mismatch."""
97,4.6.1.. Handshake Protocol_Post-Handshake Messages_New Session Ticket Message,Ticket Resumption Requirements,CLI-MSG-CONST,1,"""Clients MUST only resume if the new SNI value is valid for the server certificate presented in the original session.""",SRV-MSG-PROC,1,"""Servers MUST ensure the new SNI value is valid for the certificate used in the original session.""","""Set the SNI value in the ClientHello to a value that is not valid for the original session's server certificate to test server behavior.""",ClientHello,SNI,SET,None,None,"""invalid.example.com""","""Server aborts the handshake with a certificate_unknown alert."""
98,4.6.1.. Handshake Protocol_Post-Handshake Messages_New Session Ticket Message,Ticket Resumption Requirements,CLI-MSG-CONST,0,"""Clients SHOULD only resume if the SNI value matches the one used in the original session.""",SRV-MSG-PROC,0,"""Servers SHOULD prefer to validate that the SNI value matches the original session's SNI.""","""Set the SNI value in the session ticket to a different value than the original session to test server's handling of mismatched SNI during resumption.""",NewSessionTicket,SNI,SET,None,None,"""different_sni_value""","""Server rejects the session ticket with an illegal_parameter alert."""
99,4.6.1.. Handshake Protocol_Post-Handshake Messages_New Session Ticket Message,Ticket Resumption Requirements,CLI-MSG-CONST,0,"""Clients MAY resume with a different SNI value if indicated externally or by other means.""",SRV-MSG-PROC,0,"""Servers MAY accept a session resume with a different SNI value if appropriately indicated.""","""Set a different SNI value in the ClientHello during session resumption to verify server acceptance.""",ClientHello,SNI,SET,None,None,"""different.example.com""","""Server accepts the session resume and continues the handshake."""
100,4.6.1.. Handshake Protocol_Post-Handshake Messages_New Session Ticket Message,SNI Value Reporting,CLI-MSG-CONST,1,"""Clients MUST use the SNI value sent in the resumption ClientHello when reporting to the calling application.""",SRV-MSG-PROC,1,"""Servers MUST ensure that the SNI value reported corresponds to the value sent in the resumption ClientHello.""","""Set the SNI value in the New Session Ticket message to a value that does not match the resumption ClientHello to test the server's verification process.""",NewSessionTicket,sni_value,SET,None,None,"""malicious.example.com""","""Server rejects the New Session Ticket message or sends an alert indicating a mismatch."""
101,4.6.1.. Handshake Protocol_Post-Handshake Messages_New Session Ticket Message,SNI Value Reporting,CLI-MSG-CONST,0,"""If all PSK identities with different SNI values are declined, both SNI values must be the same.""",SRV-MSG-PROC,0,"""Servers must ensure consistency between the SNI values when all PSK identities are declined.""","""Set different SNI values in a ClientHello and check server response for consistency.""",ClientHello,SNI,SET,None,None,"""sni1.example.com, sni2.example.com""","""Server aborts the handshake with an illegal_parameter alert."""
102,4.6.2.. Handshake Protocol_Post-Handshake Messages_Post-Handshake Authentication,Post-Handshake Authentication Overview,CLI-MSG-CONST,1,"""Clients MUST respond to a CertificateRequest with appropriate Authentication messages, including Certificate, CertificateVerify, and Finished if they choose to authenticate.""",SRV-MSG-PROC,1,"""Servers MAY request client authentication at any time after the handshake completion by sending a CertificateRequest message.""","""Set the response to a CertificateRequest message with missing authentication messages to verify server handling.""",CertificateRequest,Authentication messages,REMOVE,None,None,"""None""","""Server rejects the response and sends a 'handshake_failure' alert."""
103,4.6.2.. Handshake Protocol_Post-Handshake Messages_Post-Handshake Authentication,Post-Handshake Authentication Overview,CLI-MSG-CONST,1,"""If the client declines to authenticate, it MUST send a Certificate message containing no certificates followed by Finished.""",SRV-MSG-PROC,1,"""Servers MUST ensure that all of the client's messages for a given response appear consecutively on the wire with no intervening messages of other types.""","""Test the server's handling of a Certificate message that contains no certificates followed by an intervening message type instead of Finished.""",Certificate,certificate_list,SET,Finished,BEFORE,"""None""","""Server rejects the handshake with an illegal_parameter alert."""
104,4.6.2.. Handshake Protocol_Post-Handshake Messages_Post-Handshake Authentication,CertificateRequest Handling,CLI-MSG-CONST,1,"""Clients MUST send an 'unexpected_message' fatal alert if they receive a CertificateRequest message without having sent the 'post_handshake_auth' extension.""",SRV-MSG-PROC,0,"""Servers sending a CertificateRequest must ensure that clients can handle the request appropriately based on the 'post_handshake_auth' extension.""","""Send a CertificateRequest from the server without the client having sent the 'post_handshake_auth' extension to test client response.""",CertificateRequest,post_handshake_auth,REMOVE,None,None,"""None""","""Client sends an 'unexpected_message' fatal alert."""
105,4.6.2.. Handshake Protocol_Post-Handshake Messages_Post-Handshake Authentication,Client Response Timing Considerations,CLI-MSG-CONST,1,"""Clients MAY respond to multiple CertificateRequests in a different order than they were received.""",SRV-MSG-PROC,1,"""Servers MUST be prepared for delays and the possibility of receiving other messages between sending the CertificateRequest and receiving a response.""","""Simulate a delay in client response to test server's handling of out-of-order responses.""",Certificate,CertificateRequest,SWAP,CertificateResponse,AFTER,"""None""","""Server processes the delayed response without aborting the handshake."""
106,4.6.3.. Handshake Protocol_Post-Handshake Messages_Key and Initialization Vector Update,request_update Field Description,CLI-MSG-CONST,1,"""The request_update field indicates whether the recipient should respond with its own KeyUpdate.""",SRV-MSG-PROC,1,"""If an implementation receives any value other than the expected value, it MUST terminate the connection with an 'illegal_parameter' alert.""","""Set the request_update field to an unexpected value to test server's handling of invalid parameters.""",KeyUpdate,request_update,SET,None,None,"""0x02""","""Server terminates the connection with an illegal_parameter alert."""
