{
  "content": "The server will send this message in response to a ClientHello\n   message if it is able to find an acceptable set of parameters but the\n   ClientHello does not contain sufficient information to proceed with\n   the handshake.  As discussed in Section 4.1.3, the HelloRetryRequest\n   has the same format as a ServerHello message, and the legacy_version,\n   legacy_session_id_echo, cipher_suite, and legacy_compression_method\n   fields have the same meaning.  However, for convenience we discuss\n   \"HelloRetryRequest\" throughout this document as if it were a distinct\n   message.\n\n   The server's extensions MUST contain \"supported_versions\".\n   Additionally, it SHOULD contain the minimal set of extensions\n   necessary for the client to generate a correct ClientHello pair.  As\n   with the ServerHello, a HelloRetryRequest MUST NOT contain any\n   extensions that were not first offered by the client in its\n   ClientHello, with the exception of optionally the \"cookie\" (see\n   Section 4.2.2) extension.\n\n   Upon receipt of a HelloRetryRequest, the client MUST check the\n   legacy_version, legacy_session_id_echo, cipher_suite, and\n   legacy_compression_method as specified in Section 4.1.3 and then\n   process the extensions, starting with determining the version using\n   \"supported_versions\".  Clients MUST abort the handshake with an\n   \"illegal_parameter\" alert if the HelloRetryRequest would not result\n   in any change in the ClientHello.  If a client receives a second\n   HelloRetryRequest in the same connection (i.e., where the ClientHello\n   was itself in response to a HelloRetryRequest), it MUST abort the\n   handshake with an \"unexpected_message\" alert.\n\n   Otherwise, the client MUST process all extensions in the\n   HelloRetryRequest and send a second updated ClientHello.  The\n   HelloRetryRequest extensions defined in this specification are:\n\n   -  supported_versions (see Section 4.2.1)\n\n   -  cookie (see Section 4.2.2)\n\n   -  key_share (see Section 4.2.8)\n\n   A client which receives a cipher suite that was not offered MUST\n   abort the handshake.  Servers MUST ensure that they negotiate the\n   same cipher suite when receiving a conformant updated ClientHello (if\n   the server selects the cipher suite as the first step in the\n   negotiation, then this will happen automatically).  Upon receiving\n   the ServerHello, clients MUST check that the cipher suite supplied in\n   the ServerHello is the same as that in the HelloRetryRequest and\n   otherwise abort the handshake with an \"illegal_parameter\" alert.\n\n   In addition, in its updated ClientHello, the client SHOULD NOT offer\n   any pre-shared keys associated with a hash other than that of the\n   selected cipher suite.  This allows the client to avoid having to\n   compute partial hash transcripts for multiple hashes in the second\n   ClientHello.\n\n   The value of selected_version in the HelloRetryRequest\n   \"supported_versions\" extension MUST be retained in the ServerHello,\n   and a client MUST abort the handshake with an \"illegal_parameter\"\n   alert if the value changes.",
  "section": "4.1.4.. Handshake Protocol_Key Exchange Messages_Hello Retry Request"
}
