{
  "content": "TLS 1.3 provides two extensions for indicating which signature\n   algorithms may be used in digital signatures.  The\n   \"signature_algorithms_cert\" extension applies to signatures in\n   certificates, and the \"signature_algorithms\" extension, which\n   originally appeared in TLS 1.2, applies to signatures in\n   CertificateVerify messages.  The keys found in certificates MUST also\n   be of appropriate type for the signature algorithms they are used\n   with.  This is a particular issue for RSA keys and PSS signatures, as\n   described below.  If no \"signature_algorithms_cert\" extension is\n   present, then the \"signature_algorithms\" extension also applies to\n   signatures appearing in certificates.  Clients which desire the\n   server to authenticate itself via a certificate MUST send the\n   \"signature_algorithms\" extension.  If a server is authenticating via\n   a certificate and the client has not sent a \"signature_algorithms\"\n   extension, then the server MUST abort the handshake with a\n   \"missing_extension\" alert (see Section 9.2).\n\n   The \"signature_algorithms_cert\" extension was added to allow\n   implementations which supported different sets of algorithms for\n   certificates and in TLS itself to clearly signal their capabilities.\n   TLS 1.2 implementations SHOULD also process this extension.\n   Implementations which have the same policy in both cases MAY omit the\n   \"signature_algorithms_cert\" extension.\n\n   The \"extension_data\" field of these extensions contains a\n   SignatureSchemeList value:\n\n      enum {\n          /* RSASSA-PKCS1-v1_5 algorithms */\n          rsa_pkcs1_sha256(0x0401),\n          rsa_pkcs1_sha384(0x0501),\n          rsa_pkcs1_sha512(0x0601),\n\n          /* ECDSA algorithms */\n          ecdsa_secp256r1_sha256(0x0403),\n          ecdsa_secp384r1_sha384(0x0503),\n          ecdsa_secp521r1_sha512(0x0603),\n\n          /* RSASSA-PSS algorithms with public key OID rsaEncryption */\n          rsa_pss_rsae_sha256(0x0804),\n          rsa_pss_rsae_sha384(0x0805),\n          rsa_pss_rsae_sha512(0x0806),\n\n          /* EdDSA algorithms */\n          ed25519(0x0807),\n          ed448(0x0808),\n\n          /* RSASSA-PSS algorithms with public key OID RSASSA-PSS */\n          rsa_pss_pss_sha256(0x0809),\n          rsa_pss_pss_sha384(0x080a),\n          rsa_pss_pss_sha512(0x080b),\n\n          /* Legacy algorithms */\n          rsa_pkcs1_sha1(0x0201),\n          ecdsa_sha1(0x0203),\n\n          /* Reserved Code Points */\n          private_use(0xFE00..0xFFFF),\n          (0xFFFF)\n      } SignatureScheme;\n\n      struct {\n          SignatureScheme supported_signature_algorithms<2..2^16-2>;\n      } SignatureSchemeList;\n\n   Note: This enum is named \"SignatureScheme\" because there is already a\n   \"SignatureAlgorithm\" type in TLS 1.2, which this replaces.  We use\n   the term \"signature algorithm\" throughout the text.\n\n   Each SignatureScheme value lists a single signature algorithm that\n   the client is willing to verify.  The values are indicated in\n   descending order of preference.  Note that a signature algorithm\n   takes as input an arbitrary-length message, rather than a digest.\n   Algorithms which traditionally act on a digest should be defined in\n   TLS to first hash the input with a specified hash algorithm and then\n   proceed as usual.  The code point groups listed above have the\n   following meanings:\n\n   RSASSA-PKCS1-v1_5 algorithms:  Indicates a signature algorithm using\n      RSASSA-PKCS1-v1_5 [RFC8017] with the corresponding hash algorithm\n      as defined in [SHS].  These values refer solely to signatures\n      which appear in certificates (see Section 4.4.2.2) and are not\n      defined for use in signed TLS handshake messages, although they\n      MAY appear in \"signature_algorithms\" and\n      \"signature_algorithms_cert\" for backward compatibility with\n      TLS 1.2.\n\n   ECDSA algorithms:  Indicates a signature algorithm using ECDSA\n      [ECDSA], the corresponding curve as defined in ANSI X9.62 [ECDSA]\n      and FIPS 186-4 [DSS], and the corresponding hash algorithm as\n      defined in [SHS].  The signature is represented as a DER-encoded\n      [X690] ECDSA-Sig-Value structure.\n\n   RSASSA-PSS RSAE algorithms:  Indicates a signature algorithm using\n      RSASSA-PSS [RFC8017] with mask generation function 1.  The digest\n      used in the mask generation function and the digest being signed\n      are both the corresponding hash algorithm as defined in [SHS].\n      The length of the Salt MUST be equal to the length of the output\n      of the digest algorithm.  If the public key is carried in an X.509\n      certificate, it MUST use the rsaEncryption OID [RFC5280].\n\n   EdDSA algorithms:  Indicates a signature algorithm using EdDSA as\n      defined in [RFC8032] or its successors.  Note that these\n      correspond to the \"PureEdDSA\" algorithms and not the \"prehash\"\n      variants.\n\n   RSASSA-PSS PSS algorithms:  Indicates a signature algorithm using\n      RSASSA-PSS [RFC8017] with mask generation function 1.  The digest\n      used in the mask generation function and the digest being signed\n      are both the corresponding hash algorithm as defined in [SHS].\n      The length of the Salt MUST be equal to the length of the digest\n      algorithm.  If the public key is carried in an X.509 certificate,\n      it MUST use the RSASSA-PSS OID [RFC5756].  When used in\n      certificate signatures, the algorithm parameters MUST be DER\n      encoded.  If the corresponding public key's parameters are\n      present, then the parameters in the signature MUST be identical to\n      those in the public key.\n\n   Legacy algorithms:  Indicates algorithms which are being deprecated\n      because they use algorithms with known weaknesses, specifically\n      SHA-1 which is used in this context with either (1) RSA using\n      RSASSA-PKCS1-v1_5 or (2) ECDSA.  These values refer solely to\n      signatures which appear in certificates (see Section 4.4.2.2) and\n      are not defined for use in signed TLS handshake messages, although\n      they MAY appear in \"signature_algorithms\" and\n      \"signature_algorithms_cert\" for backward compatibility with\n      TLS 1.2.  Endpoints SHOULD NOT negotiate these algorithms but are\n      permitted to do so solely for backward compatibility.  Clients\n      offering these values MUST list them as the lowest priority\n      (listed after all other algorithms in SignatureSchemeList).\n      TLS 1.3 servers MUST NOT offer a SHA-1 signed certificate unless\n      no valid certificate chain can be produced without it (see\n      Section 4.4.2.2).\n\n   The signatures on certificates that are self-signed or certificates\n   that are trust anchors are not validated, since they begin a\n   certification path (see [RFC5280], Section 3.2).  A certificate that\n   begins a certification path MAY use a signature algorithm that is not\n   advertised as being supported in the \"signature_algorithms\"\n   extension.\n\n   Note that TLS 1.2 defines this extension differently.  TLS 1.3\n   implementations willing to negotiate TLS 1.2 MUST behave in\n   accordance with the requirements of [RFC5246] when negotiating that\n   version.  In particular:\n\n   -  TLS 1.2 ClientHellos MAY omit this extension.\n\n   -  In TLS 1.2, the extension contained hash/signature pairs.  The\n      pairs are encoded in two octets, so SignatureScheme values have\n      been allocated to align with TLS 1.2's encoding.  Some legacy\n      pairs are left unallocated.  These algorithms are deprecated as of\n      TLS 1.3.  They MUST NOT be offered or negotiated by any\n      implementation.  In particular, MD5 [SLOTH], SHA-224, and DSA\n      MUST NOT be used.\n\n   -  ECDSA signature schemes align with TLS 1.2's ECDSA hash/signature\n      pairs.  However, the old semantics did not constrain the signing\n      curve.  If TLS 1.2 is negotiated, implementations MUST be prepared\n      to accept a signature that uses any curve that they advertised in\n      the \"supported_groups\" extension.\n\n   -  Implementations that advertise support for RSASSA-PSS (which is\n      mandatory in TLS 1.3) MUST be prepared to accept a signature using\n      that scheme even when TLS 1.2 is negotiated.  In TLS 1.2,\n      RSASSA-PSS is used with RSA cipher suites.",
  "section": "4.2.3.. Handshake Protocol_Extensions_Signature Algorithms"
}
