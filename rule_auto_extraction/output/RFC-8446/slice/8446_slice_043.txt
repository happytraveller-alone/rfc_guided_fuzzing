{
  "content": "This message conveys the endpoint's certificate chain to the peer.\n\n   The server MUST send a Certificate message whenever the agreed-upon\n   key exchange method uses certificates for authentication (this\n   includes all key exchange methods defined in this document\n   except PSK).\n\n   The client MUST send a Certificate message if and only if the server\n   has requested client authentication via a CertificateRequest message\n   (Section 4.3.2).  If the server requests client authentication but no\n   suitable certificate is available, the client MUST send a Certificate\n   message containing no certificates (i.e., with the \"certificate_list\"\n   field having length 0).  A Finished message MUST be sent regardless\n   of whether the Certificate message is empty.\n\n   Structure of this message:\n\n      enum {\n          X509(0),\n          RawPublicKey(2),\n          (255)\n      } CertificateType;\n\n      struct {\n          select (certificate_type) {\n              case RawPublicKey:\n                /* From RFC 7250 ASN.1_subjectPublicKeyInfo */\n                opaque ASN1_subjectPublicKeyInfo<1..2^24-1>;\n\n              case X509:\n                opaque cert_data<1..2^24-1>;\n          };\n          Extension extensions<0..2^16-1>;\n      } CertificateEntry;\n\n      struct {\n          opaque certificate_request_context<0..2^8-1>;\n          CertificateEntry certificate_list<0..2^24-1>;\n      } Certificate;\n\n   certificate_request_context:  If this message is in response to a\n      CertificateRequest, the value of certificate_request_context in\n      that message.  Otherwise (in the case of server authentication),\n      this field SHALL be zero length.\n\n   certificate_list:  A sequence (chain) of CertificateEntry structures,\n      each containing a single certificate and set of extensions.\n\n   extensions:  A set of extension values for the CertificateEntry.  The\n      \"Extension\" format is defined in Section 4.2.  Valid extensions\n      for server certificates at present include the OCSP Status\n      extension [RFC6066] and the SignedCertificateTimestamp extension\n      [RFC6962]; future extensions may be defined for this message as\n      well.  Extensions in the Certificate message from the server MUST\n      correspond to ones from the ClientHello message.  Extensions in\n      the Certificate message from the client MUST correspond to\n      extensions in the CertificateRequest message from the server.  If\n      an extension applies to the entire chain, it SHOULD be included in\n      the first CertificateEntry.\n\n   If the corresponding certificate type extension\n   (\"server_certificate_type\" or \"client_certificate_type\") was not\n   negotiated in EncryptedExtensions, or the X.509 certificate type was\n   negotiated, then each CertificateEntry contains a DER-encoded X.509\n   certificate.  The sender's certificate MUST come in the first\n   CertificateEntry in the list.  Each following certificate SHOULD\n   directly certify the one immediately preceding it.  Because\n   certificate validation requires that trust anchors be distributed\n   independently, a certificate that specifies a trust anchor MAY be\n   omitted from the chain, provided that supported peers are known to\n   possess any omitted certificates.\n\n   Note: Prior to TLS 1.3, \"certificate_list\" ordering required each\n   certificate to certify the one immediately preceding it; however,\n   some implementations allowed some flexibility.  Servers sometimes\n   send both a current and deprecated intermediate for transitional\n   purposes, and others are simply configured incorrectly, but these\n   cases can nonetheless be validated properly.  For maximum\n   compatibility, all implementations SHOULD be prepared to handle\n   potentially extraneous certificates and arbitrary orderings from any\n   TLS version, with the exception of the end-entity certificate which\n   MUST be first.\n\n   If the RawPublicKey certificate type was negotiated, then the\n   certificate_list MUST contain no more than one CertificateEntry,\n   which contains an ASN1_subjectPublicKeyInfo value as defined in\n   [RFC7250], Section 3.\n\n   The OpenPGP certificate type [RFC6091] MUST NOT be used with TLS 1.3.\n\n   The server's certificate_list MUST always be non-empty.  A client\n   will send an empty certificate_list if it does not have an\n   appropriate certificate to send in response to the server's\n   authentication request.",
  "section": "4.4.2.. Handshake Protocol_Authentication Messages_Certificate"
}
