{
  "content": "The following rules apply to the certificates sent by the server:\n\n   -  The certificate type MUST be X.509v3 [RFC5280], unless explicitly\n      negotiated otherwise (e.g., [RFC7250]).\n\n   -  The server's end-entity certificate's public key (and associated\n      restrictions) MUST be compatible with the selected authentication\n      algorithm from the client's \"signature_algorithms\" extension\n      (currently RSA, ECDSA, or EdDSA).\n\n   -  The certificate MUST allow the key to be used for signing (i.e.,\n      the digitalSignature bit MUST be set if the Key Usage extension is\n      present) with a signature scheme indicated in the client's\n      \"signature_algorithms\"/\"signature_algorithms_cert\" extensions (see\n      Section 4.2.3).\n\n   -  The \"server_name\" [RFC6066] and \"certificate_authorities\"\n      extensions are used to guide certificate selection.  As servers\n      MAY require the presence of the \"server_name\" extension, clients\n      SHOULD send this extension, when applicable.\n\n   All certificates provided by the server MUST be signed by a signature\n   algorithm advertised by the client if it is able to provide such a\n   chain (see Section 4.2.3).  Certificates that are self-signed or\n   certificates that are expected to be trust anchors are not validated\n   as part of the chain and therefore MAY be signed with any algorithm.\n\n   If the server cannot produce a certificate chain that is signed only\n   via the indicated supported algorithms, then it SHOULD continue the\n   handshake by sending the client a certificate chain of its choice\n   that may include algorithms that are not known to be supported by the\n   client.  This fallback chain SHOULD NOT use the deprecated SHA-1 hash\n   algorithm in general, but MAY do so if the client's advertisement\n   permits it, and MUST NOT do so otherwise.\n\n   If the client cannot construct an acceptable chain using the provided\n   certificates and decides to abort the handshake, then it MUST abort\n   the handshake with an appropriate certificate-related alert (by\n   default, \"unsupported_certificate\"; see Section 6.2 for more\n   information).\n\n   If the server has multiple certificates, it chooses one of them based\n   on the above-mentioned criteria (in addition to other criteria, such\n   as transport-layer endpoint, local configuration, and preferences).",
  "section": "4.4.2.2.. Handshake Protocol_Authentication Messages_Certificate_Server Certificate Selection"
}
