{
  "content": "The handshake protocol is used to negotiate the security parameters\n   of a connection.  Handshake messages are supplied to the TLS record\n   layer, where they are encapsulated within one or more TLSPlaintext or\n   TLSCiphertext structures which are processed and transmitted as\n   specified by the current active connection state.\n\n      enum {\n          client_hello(1),\n          server_hello(2),\n          new_session_ticket(4),\n          end_of_early_data(5),\n          encrypted_extensions(8),\n          certificate(11),\n          certificate_request(13),\n          certificate_verify(15),\n          finished(20),\n          key_update(24),\n          message_hash(254),\n          (255)\n      } HandshakeType;\n\n      struct {\n          HandshakeType msg_type;    /* handshake type */\n          uint24 length;             /* remaining bytes in message */\n          select (Handshake.msg_type) {\n              case client_hello:          ClientHello;\n              case server_hello:          ServerHello;\n              case end_of_early_data:     EndOfEarlyData;\n              case encrypted_extensions:  EncryptedExtensions;\n              case certificate_request:   CertificateRequest;\n              case certificate:           Certificate;\n              case certificate_verify:    CertificateVerify;\n              case finished:              Finished;\n              case new_session_ticket:    NewSessionTicket;\n              case key_update:            KeyUpdate;\n          };\n      } Handshake;\n\n   Protocol messages MUST be sent in the order defined in Section 4.4.1\n   and shown in the diagrams in Section 2.  A peer which receives a\n   handshake message in an unexpected order MUST abort the handshake\n   with an \"unexpected_message\" alert.\n\n   New handshake message types are assigned by IANA as described in\n   Section 11.",
  "section": "4.. Handshake Protocol"
}
