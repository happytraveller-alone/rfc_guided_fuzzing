{
  "content": "The \"oid_filters\" extension allows servers to provide a set of\n   OID/value pairs which it would like the client's certificate to\n   match.  This extension, if provided by the server, MUST only be sent\n   in the CertificateRequest message.\n\n      struct {\n          opaque certificate_extension_oid<1..2^8-1>;\n          opaque certificate_extension_values<0..2^16-1>;\n      } OIDFilter;\n\n      struct {\n          OIDFilter filters<0..2^16-1>;\n      } OIDFilterExtension;\n\n   filters:  A list of certificate extension OIDs [RFC5280] with their\n      allowed value(s) and represented in DER-encoded [X690] format.\n      Some certificate extension OIDs allow multiple values (e.g.,\n      Extended Key Usage).  If the server has included a non-empty\n      filters list, the client certificate included in the response MUST\n      contain all of the specified extension OIDs that the client\n      recognizes.  For each extension OID recognized by the client, all\n      of the specified values MUST be present in the client certificate\n      (but the certificate MAY have other values as well).  However, the\n      client MUST ignore and skip any unrecognized certificate extension\n      OIDs.  If the client ignored some of the required certificate\n      extension OIDs and supplied a certificate that does not satisfy\n      the request, the server MAY at its discretion either continue the\n      connection without client authentication or abort the handshake\n      with an \"unsupported_certificate\" alert.  Any given OID MUST NOT\n      appear more than once in the filters list.\n\n   PKIX RFCs define a variety of certificate extension OIDs and their\n   corresponding value types.  Depending on the type, matching\n   certificate extension values are not necessarily bitwise-equal.  It\n   is expected that TLS implementations will rely on their PKI libraries\n   to perform certificate selection using certificate extension OIDs.\n\n   This document defines matching rules for two standard certificate\n   extensions defined in [RFC5280]:\n\n   -  The Key Usage extension in a certificate matches the request when\n      all key usage bits asserted in the request are also asserted in\n      the Key Usage certificate extension.\n\n   -  The Extended Key Usage extension in a certificate matches the\n      request when all key purpose OIDs present in the request are also\n      found in the Extended Key Usage certificate extension.  The\n      special anyExtendedKeyUsage OID MUST NOT be used in the request.\n\n   Separate specifications may define matching rules for other\n   certificate extensions.",
  "section": "4.2.5.. Handshake Protocol_Extensions_OID Filters"
}
