{
  "content": "The server will send this message in response to a ClientHello\n   message to proceed with the handshake if it is able to negotiate an\n   acceptable set of handshake parameters based on the ClientHello.\n\n   Structure of this message:\n\n      struct {\n          ProtocolVersion legacy_version = 0x0303;    /* TLS v1.2 */\n          Random random;\n          opaque legacy_session_id_echo<0..32>;\n          CipherSuite cipher_suite;\n          uint8 legacy_compression_method = 0;\n          Extension extensions<6..2^16-1>;\n      } ServerHello;\n\n   legacy_version:  In previous versions of TLS, this field was used for\n      version negotiation and represented the selected version number\n      for the connection.  Unfortunately, some middleboxes fail when\n      presented with new values.  In TLS 1.3, the TLS server indicates\n      its version using the \"supported_versions\" extension\n      (Section 4.2.1), and the legacy_version field MUST be set to\n      0x0303, which is the version number for TLS 1.2.  (See Appendix D\n      for details about backward compatibility.)\n\n   random:  32 bytes generated by a secure random number generator.  See\n      Appendix C for additional information.  The last 8 bytes MUST be\n      overwritten as described below if negotiating TLS 1.2 or TLS 1.1,\n      but the remaining bytes MUST be random.  This structure is\n      generated by the server and MUST be generated independently of the\n      ClientHello.random.\n\n   legacy_session_id_echo:  The contents of the client's\n      legacy_session_id field.  Note that this field is echoed even if\n      the client's value corresponded to a cached pre-TLS 1.3 session\n      which the server has chosen not to resume.  A client which\n      receives a legacy_session_id_echo field that does not match what\n      it sent in the ClientHello MUST abort the handshake with an\n      \"illegal_parameter\" alert.\n\n   cipher_suite:  The single cipher suite selected by the server from\n      the list in ClientHello.cipher_suites.  A client which receives a\n      cipher suite that was not offered MUST abort the handshake with an\n      \"illegal_parameter\" alert.\n\n   legacy_compression_method:  A single byte which MUST have the\n      value 0.\n\n   extensions:  A list of extensions.  The ServerHello MUST only include\n      extensions which are required to establish the cryptographic\n      context and negotiate the protocol version.  All TLS 1.3\n      ServerHello messages MUST contain the \"supported_versions\"\n      extension.  Current ServerHello messages additionally contain\n      either the \"pre_shared_key\" extension or the \"key_share\"\n      extension, or both (when using a PSK with (EC)DHE key\n      establishment).  Other extensions (see Section 4.2) are sent\n      separately in the EncryptedExtensions message.\n\n   For reasons of backward compatibility with middleboxes (see\n   Appendix D.4), the HelloRetryRequest message uses the same structure\n   as the ServerHello, but with Random set to the special value of the\n   SHA-256 of \"HelloRetryRequest\":\n\n     CF 21 AD 74 E5 9A 61 11 BE 1D 8C 02 1E 65 B8 91\n     C2 A2 11 16 7A BB 8C 5E 07 9E 09 E2 C8 A8 33 9C\n\n   Upon receiving a message with type server_hello, implementations MUST\n   first examine the Random value and, if it matches this value, process\n   it as described in Section 4.1.4).\n\n   TLS 1.3 has a downgrade protection mechanism embedded in the server's\n   random value.  TLS 1.3 servers which negotiate TLS 1.2 or below in\n   response to a ClientHello MUST set the last 8 bytes of their Random\n   value specially in their ServerHello.\n\n   If negotiating TLS 1.2, TLS 1.3 servers MUST set the last 8 bytes of\n   their Random value to the bytes:\n\n     44 4F 57 4E 47 52 44 01\n\n   If negotiating TLS 1.1 or below, TLS 1.3 servers MUST, and TLS 1.2\n   servers SHOULD, set the last 8 bytes of their ServerHello.Random\n   value to the bytes:\n\n     44 4F 57 4E 47 52 44 00\n\n   TLS 1.3 clients receiving a ServerHello indicating TLS 1.2 or below\n   MUST check that the last 8 bytes are not equal to either of these\n   values.  TLS 1.2 clients SHOULD also check that the last 8 bytes are\n   not equal to the second value if the ServerHello indicates TLS 1.1 or\n   below.  If a match is found, the client MUST abort the handshake with\n   an \"illegal_parameter\" alert.  This mechanism provides limited\n   protection against downgrade attacks over and above what is provided\n   by the Finished exchange: because the ServerKeyExchange, a message\n   present in TLS 1.2 and below, includes a signature over both random\n   values, it is not possible for an active attacker to modify the\n\n   random values without detection as long as ephemeral ciphers are\n   used.  It does not provide downgrade protection when static RSA\n   is used.\n\n   Note: This is a change from [RFC5246], so in practice many TLS 1.2\n   clients and servers will not behave as specified above.\n\n   A legacy TLS client performing renegotiation with TLS 1.2 or prior\n   and which receives a TLS 1.3 ServerHello during renegotiation MUST\n   abort the handshake with a \"protocol_version\" alert.  Note that\n   renegotiation is not possible when TLS 1.3 has been negotiated.",
  "section": "4.1.3.. Handshake Protocol_Key Exchange Messages_Server Hello"
}
