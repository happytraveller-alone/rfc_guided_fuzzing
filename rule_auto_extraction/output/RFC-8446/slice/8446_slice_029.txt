{
  "content": "The \"key_share\" extension contains the endpoint's cryptographic\n   parameters.\n\n   Clients MAY send an empty client_shares vector in order to request\n   group selection from the server, at the cost of an additional round\n   trip (see Section 4.1.4).\n\n      struct {\n          NamedGroup group;\n          opaque key_exchange<1..2^16-1>;\n      } KeyShareEntry;\n\n   group:  The named group for the key being exchanged.\n\n   key_exchange:  Key exchange information.  The contents of this field\n      are determined by the specified group and its corresponding\n      definition.  Finite Field Diffie-Hellman [DH76] parameters are\n      described in Section 4.2.8.1; Elliptic Curve Diffie-Hellman\n      parameters are described in Section 4.2.8.2.\n\n   In the ClientHello message, the \"extension_data\" field of this\n   extension contains a \"KeyShareClientHello\" value:\n\n      struct {\n          KeyShareEntry client_shares<0..2^16-1>;\n      } KeyShareClientHello;\n\n   client_shares:  A list of offered KeyShareEntry values in descending\n      order of client preference.\n\n   This vector MAY be empty if the client is requesting a\n   HelloRetryRequest.  Each KeyShareEntry value MUST correspond to a\n   group offered in the \"supported_groups\" extension and MUST appear in\n   the same order.  However, the values MAY be a non-contiguous subset\n   of the \"supported_groups\" extension and MAY omit the most preferred\n   groups.  Such a situation could arise if the most preferred groups\n   are new and unlikely to be supported in enough places to make\n   pregenerating key shares for them efficient.\n\n   Clients can offer as many KeyShareEntry values as the number of\n   supported groups it is offering, each representing a single set of\n   key exchange parameters.  For instance, a client might offer shares\n   for several elliptic curves or multiple FFDHE groups.  The\n   key_exchange values for each KeyShareEntry MUST be generated\n   independently.  Clients MUST NOT offer multiple KeyShareEntry values\n   for the same group.  Clients MUST NOT offer any KeyShareEntry values\n   for groups not listed in the client's \"supported_groups\" extension.\n   Servers MAY check for violations of these rules and abort the\n   handshake with an \"illegal_parameter\" alert if one is violated.\n\n   In a HelloRetryRequest message, the \"extension_data\" field of this\n   extension contains a KeyShareHelloRetryRequest value:\n\n      struct {\n          NamedGroup selected_group;\n      } KeyShareHelloRetryRequest;\n\n   selected_group:  The mutually supported group the server intends to\n      negotiate and is requesting a retried ClientHello/KeyShare for.\n\n   Upon receipt of this extension in a HelloRetryRequest, the client\n   MUST verify that (1) the selected_group field corresponds to a group\n   which was provided in the \"supported_groups\" extension in the\n   original ClientHello and (2) the selected_group field does not\n   correspond to a group which was provided in the \"key_share\" extension\n   in the original ClientHello.  If either of these checks fails, then\n   the client MUST abort the handshake with an \"illegal_parameter\"\n   alert.  Otherwise, when sending the new ClientHello, the client MUST\n\n   replace the original \"key_share\" extension with one containing only a\n   new KeyShareEntry for the group indicated in the selected_group field\n   of the triggering HelloRetryRequest.\n\n   In a ServerHello message, the \"extension_data\" field of this\n   extension contains a KeyShareServerHello value:\n\n      struct {\n          KeyShareEntry server_share;\n      } KeyShareServerHello;\n\n   server_share:  A single KeyShareEntry value that is in the same group\n      as one of the client's shares.\n\n   If using (EC)DHE key establishment, servers offer exactly one\n   KeyShareEntry in the ServerHello.  This value MUST be in the same\n   group as the KeyShareEntry value offered by the client that the\n   server has selected for the negotiated key exchange.  Servers\n   MUST NOT send a KeyShareEntry for any group not indicated in the\n   client's \"supported_groups\" extension and MUST NOT send a\n   KeyShareEntry when using the \"psk_ke\" PskKeyExchangeMode.  If using\n   (EC)DHE key establishment and a HelloRetryRequest containing a\n   \"key_share\" extension was received by the client, the client MUST\n   verify that the selected NamedGroup in the ServerHello is the same as\n   that in the HelloRetryRequest.  If this check fails, the client MUST\n   abort the handshake with an \"illegal_parameter\" alert.",
  "section": "4.2.8.. Handshake Protocol_Extensions_Key Share"
}
