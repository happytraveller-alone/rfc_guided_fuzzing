index,section,title,construction_rule_type,construction_explicitness,construction_base,processing_rule_type,processing_explicitness,processing_base,test_strategy,message,field,action,relative_to,position,value,expected_result
1,4.1.2.. Handshake Protocol_Key Exchange Messages_Client Hello,ClientHello Message Overview,CLI-MSG-CONST,1,"""Clients MUST send the ClientHello as the first TLS message when connecting to a server. If a HelloRetryRequest is received, the client MUST resend the same ClientHello, modifying only as specified.""",SRV-MSG-PROC,1,"""Servers MUST expect the ClientHello as the first message and MUST handle a HelloRetryRequest by validating the modifications made by the client.""","""Test the server's handling of a non-ClientHello message as the first message in the handshake to verify its behavior.""",ClientHello,None,SET,None,None,"""NonClientHelloMessage""","""Server aborts the handshake with an unexpected_message alert."""
2,4.1.2.. Handshake Protocol_Key Exchange Messages_Client Hello,ClientHello Message Overview,CLI-MSG-CONST,1,"""Clients MUST replace the list of shares in the ""key_share"" extension with a single KeyShareEntry from the indicated group if specified in the HelloRetryRequest.""",SRV-MSG-PROC,1,"""Servers MUST validate that the ""key_share"" extension contains a single KeyShareEntry as indicated in the HelloRetryRequest.""","""Set the 'key_share' extension to contain multiple KeyShareEntries instead of a single entry as required by the HelloRetryRequest.""",ClientHello,key_share,SET,None,None,"""key_share extension contains multiple key with same group X25519""","""Server aborts the handshake with an illegal_parameter alert."""
3,4.1.2.. Handshake Protocol_Key Exchange Messages_Client Hello,ClientHello Message Overview,CLI-MSG-CONST,1,"""Clients MUST update the ""pre_shared_key"" extension by recomputing the ""obfuscated_ticket_age"" and binder values, and may remove incompatible PSKs as indicated by the server's cipher suite.""",SRV-MSG-PROC,1,"""Servers MUST validate the updated ""pre_shared_key"" extension for correctness according to the cipher suite.""","""Set the 'pre_shared_key' extension with incorrect 'obfuscated_ticket_age' and binder values to test server validation.""",ClientHello,pre_shared_key,SET,None,None,"""{""obfuscated_ticket_age"": 9999, ""binder"": ""invalid_binder""}""","""Server aborts the handshake with an illegal_parameter alert."""
4,4.1.2.. Handshake Protocol_Key Exchange Messages_Client Hello,ClientHello Message Overview,CLI-MSG-CONST,0,"""Clients MAY optionally add, remove, or change the length of the ""padding"" extension.""",SRV-MSG-PROC,0,"""Servers MAY handle modifications to the ""padding"" extension as specified by the client.""","""Set the length of the 'padding' extension to an invalid value to test server handling of padding modifications.""",ClientHello,padding,SET,None,None,"""0xFF""","""Server processes the modified padding without aborting the handshake."""
5,4.1.2.. Handshake Protocol_Key Exchange Messages_Client Hello,Field Descriptions,CLI-MSG-CONST,1,"""The 'legacy_version' field MUST be set to 0x0303 for compatibility with middleboxes; the actual version is indicated using the 'supported_versions' extension.""",SRV-MSG-PROC,1,"""Servers MUST accept 'legacy_version' set to 0x0303 and refer to the 'supported_versions' extension for the actual version.""","""Set the 'legacy_version' field to a value other than 0x0303 to test server's rejection of invalid versions.""",ClientHello,legacy_version,SET,None,None,"""0x0200""","""Server rejects the ClientHello with a protocol_version alert."""
6,4.1.2.. Handshake Protocol_Key Exchange Messages_Client Hello,Field Descriptions,CLI-MSG-CONST,1,"""The 'random' field MUST contain 32 bytes generated by a secure random number generator.""",SRV-MSG-PROC,1,"""Servers MUST validate that the 'random' field contains 32 bytes.""","""Set the 'random' field to a value that is not 32 bytes long to test server's validation of the field length.""",ClientHello,random,SET,None,None,"""0x0123456789ABCDEF""","""Server rejects the ClientHello with a handshake_failure alert."""
7,4.1.2.. Handshake Protocol_Key Exchange Messages_Client Hello,Field Descriptions,CLI-MSG-CONST,1,"""The 'legacy_session_id' field MUST be either a cached session ID from a pre-TLS 1.3 server or a new unpredictable value if none exists.""",SRV-MSG-PROC,1,"""Servers MUST handle 'legacy_session_id' by accepting either a cached session ID or a new unpredictable value.""","""Set the 'legacy_session_id' field to an invalid value to test server's rejection of incorrect session IDs.""",ClientHello,legacy_session_id,SET,None,None,"""invalid_session_id""","""Server rejects the ClientHello with an illegal_parameter alert."""
8,4.1.2.. Handshake Protocol_Key Exchange Messages_Client Hello,Field Descriptions,CLI-MSG-CONST,1,"""The 'cipher_suites' field MUST contain a list of symmetric cipher options supported by the client.""",SRV-MSG-PROC,1,"""Servers MUST validate the 'cipher_suites' field to ensure it contains supported symmetric cipher options.""","""Set the 'cipher_suites' field to an unsupported cipher suite to verify server rejection.""",ClientHello,cipher_suites,SET,None,None,"""0x0000""","""Server rejects the ClientHello with an illegal_parameter alert."""
9,4.1.2.. Handshake Protocol_Key Exchange Messages_Client Hello,Field Descriptions,CLI-MSG-CONST,1,"""The 'legacy_compression_methods' field MUST contain exactly one byte, set to zero.""",SRV-MSG-PROC,1,"""Servers MUST check that the 'legacy_compression_methods' field contains exactly one byte, set to zero.""","""Set the 'legacy_compression_methods' field to more than one byte to test server handling of invalid compression method lengths.""",ClientHello,legacy_compression_methods,SET,None,None,"""0x01, 0x02""","""Server aborts the handshake with an illegal_parameter alert."""
10,4.1.2.. Handshake Protocol_Key Exchange Messages_Client Hello,Field Descriptions,CLI-MSG-CONST,1,"""The 'extensions' field is used by clients to request extended functionality from servers.""",SRV-MSG-PROC,1,"""Servers MUST process the 'extensions' field to fulfill the extended functionality requests from clients.""","""Set the 'extensions' field to an incorrect format to test server's handling of malformed extension requests.""",ClientHello,extensions,SET,None,None,"""malformed_extension_data""","""Server rejects the ClientHello with an illegal_parameter alert."""
11,4.1.2.. Handshake Protocol_Key Exchange Messages_Client Hello,Extension Handling,CLI-MSG-CONST,1,"""Clients MUST include mandatory extensions as specified in the TLS 1.3 protocol.""",SRV-MSG-PROC,1,"""Servers MUST process ClientHello messages while adhering to the mandatory extension requirements.""","""Remove the mandatory 'key_share' extension to test the server's handling of missing mandatory extensions.""",ClientHello,key_share,REMOVE,None,None,"""None""","""Server aborts the handshake with a missing_extension or illegal_parameter alert."""
12,4.1.4.. Handshake Protocol_Key Exchange Messages_Hello Retry Request,Extension Processing and Updated ClientHello,CLI-MSG-CONST,1,"""Clients MUST process all extensions in the HelloRetryRequest and send a second updated ClientHello.""",SRV-MSG-PROC,1,"""Servers MUST ensure that the ClientHello includes only the extensions defined in the HelloRetryRequest.""","""Set an extension in the ClientHello that is not defined in the HelloRetryRequest to test server rejection.""",ClientHello,unsupported_extension,SET,None,None,"""0xFFFF""","""Server aborts the handshake with an illegal_parameter alert."""
13,4.2.. Handshake Protocol_Extensions,Extension Message Compatibility,CLI-MSG-CONST,1,"""Clients MUST ensure that extensions are only included in messages where they are specified to appear.""",SRV-MSG-PROC,1,"""Servers MUST abort the handshake with an 'illegal_parameter' alert if an extension is received in an unexpected message.""","""Insert an unexpected extension into a ClientHello message to test server handling of extensions in incorrect messages.""",ClientHello,unexpected_extension,INSERT,None,END,"""0x1234""","""Server aborts the handshake with an illegal_parameter alert."""
14,4.2.1.. Handshake Protocol_Extensions_Supported Versions,ClientHello Requirements,CLI-MSG-CONST,1,"""Clients MUST send the 'Supported Versions' extension in ClientHello, containing all TLS versions they are prepared to negotiate, including at least 0x0304.""",SRV-MSG-PROC,1,"""Servers MUST process the 'Supported Versions' extension and validate that it includes all versions of TLS that the client is prepared to negotiate.""","""Set the 'Supported Versions' extension to exclude 0x0304 to test server response to missing required versions.""",ClientHello,supported_versions,SET,None,None,"""[0x0303]""","""Server aborts the handshake with a protocol_version alert."""
15,4.2.1.. Handshake Protocol_Extensions_Supported Versions,ClientHello Requirements,CLI-MSG-CONST,1,"""If previous versions of TLS are allowed for negotiation, they MUST also be included in the 'Supported Versions' extension.""",SRV-MSG-PROC,1,"""Servers MUST ensure that any previous TLS versions permitted for negotiation are present in the 'Supported Versions' extension.""","""Set the 'Supported Versions' extension to exclude a previous version of TLS that is allowed for negotiation.""",ClientHello,supported_versions,SET,None,None,"""0x0302""","""Server aborts the handshake with a missing_extension or illegal_parameter alert."""
16,4.2.1.. Handshake Protocol_Extensions_Supported Versions,Server Behavior With the Extension,CLI-MSG-CONST,1,"""Clients MUST include the ""supported_versions"" extension in ClientHello for server version negotiation.""",SRV-MSG-PROC,1,"""Servers MUST NOT use ClientHello.legacy_version for version negotiation if the ""supported_versions"" extension is present; they MUST use the versions specified in that extension.""","""Set the legacy_version field to an arbitrary version while including the supported_versions extension to test server's behavior ignoring legacy_version.""",ClientHello,legacy_version,SET,None,None,"""0x0302""","""Server uses the versions specified in the supported_versions extension for negotiation, ignoring the legacy_version."""
17,4.2.1.. Handshake Protocol_Extensions_Supported Versions,Server Behavior With the Extension,CLI-MSG-CONST,1,"""Clients MUST ensure that the ""supported_versions"" extension lists all TLS versions they support.""",SRV-MSG-PROC,1,"""Servers MUST select a TLS version from the ""supported_versions"" extension and MUST ignore any unknown versions present.""","""Set the 'supported_versions' extension to include an unsupported version to validate server handling.""",ClientHello,supported_versions,SET,None,None,"""[0xFFFF, 0x0304]""","""Server selects a valid version from the list, ignoring the unsupported ones."""
18,4.2.1.. Handshake Protocol_Extensions_Supported Versions,Negotiation of Versions Prior to TLS 1.2,CLI-MSG-CONST,1,"""Clients that support prior versions of TLS SHOULD include TLS 1.2 in their supported versions list.""",SRV-MSG-PROC,1,"""Servers MUST be prepared to receive ClientHellos with this extension, and handle cases where 0x0304 (TLS 1.3) is not included in the list of versions.""","""Set the supported_versions field to exclude TLS 1.2 to test server's handling of unsupported versions.""",ClientHello,supported_versions,SET,None,None,"""0x0301, 0x0302""","""Server aborts the handshake with a protocol_version alert."""
19,4.2.1.. Handshake Protocol_Extensions_Supported Versions,Client Checks for the Supported Versions Extension,CLI-MSG-CONST,1,"""Clients MUST use only the 'supported_versions' extension to determine the selected version.""",SRV-MSG-PROC,1,"""If the 'supported_versions' extension contains a version not offered by the client or a version prior to TLS 1.3, clients MUST abort the handshake with an 'illegal_parameter' alert.""","""Set the 'supported_versions' extension to a version prior to TLS 1.3 to test the client's handling of unsupported versions.""",ClientHello,supported_versions,SET,None,None,"""0x0301""","""Client aborts the handshake with an illegal_parameter alert."""
20,4.2.3.. Handshake Protocol_Extensions_Signature Algorithms,Client Requirements for Signature Algorithms,CLI-MSG-CONST,1,"""Clients MUST send the ""signature_algorithms"" extension if they desire server authentication via a certificate.""",SRV-MSG-PROC,1,"""Servers MUST abort the handshake with a ""missing_extension"" alert if the client has not sent the ""signature_algorithms"" extension while authenticating via a certificate.""","""Remove the 'signature_algorithms' extension from the ClientHello to test server handling of missing extensions.""",ClientHello,signature_algorithms,REMOVE,None,None,"""None""","""Server aborts the handshake with a missing_extension alert."""
21,4.2.3.. Handshake Protocol_Extensions_Signature Algorithms,RSASSA-PSS Algorithms,CLI-MSG-CONST,1,"""Clients MUST specify a signature algorithm using RSASSA-PSS with mask generation function 1, ensuring that the Salt length equals the output length of the digest algorithm.""",SRV-MSG-PROC,1,"""Servers MUST validate that the Salt length matches the output length of the specified digest algorithm.""","""Set the Salt length to a value different from the output length of the digest algorithm to test server validation.""",ClientHello,signature_algorithm,SET,None,None,"""RSASSA-PSS with Salt length = 32 (when digest output is 64)""","""Server rejects the ClientHello with an illegal_parameter alert."""
22,4.2.3.. Handshake Protocol_Extensions_Signature Algorithms,TLS 1.2 Compatibility,CLI-MSG-CONST,1,"""Clients negotiating TLS 1.2 MUST comply with the requirements of RFC5246. Clients MAY omit the signature algorithms extension in ClientHellos.""",SRV-MSG-PROC,1,"""Servers MUST ensure that legacy signature algorithm pairs, which are deprecated, MUST NOT be offered or negotiated.""","""Set the signature algorithms extension in the ClientHello to include a deprecated signature algorithm to test server rejection of unsupported algorithms.""",ClientHello,signature_algorithms,SET,None,None,"""0x0001""","""Server rejects the ClientHello with an illegal_parameter alert."""
23,4.2.5.. Handshake Protocol_Extensions_OID Filters,Client Certificate Requirements,CLI-MSG-CONST,1,"""Clients MUST ensure that all specified values for recognized extension OIDs are present in the client certificate, although the certificate MAY contain additional values.""",SRV-MSG-PROC,1,"""Servers MAY choose to continue the connection without client authentication or abort the handshake with an 'unsupported_certificate' alert if the client ignores required certificate extension OIDs.""","""Set an unrecognized value for a recognized extension OID in the client certificate to test server's handling of unsupported certificates.""",ClientHello,certificate,SET,None,None,"""Invalid_OID_Value""","""Server aborts the handshake with an unsupported_certificate alert."""
24,4.2.5.. Handshake Protocol_Extensions_OID Filters,OID Uniqueness and Matching Rules,CLI-MSG-CONST,1,"""Clients MUST assert all key usage bits in the request that are also in the Key Usage certificate extension.""",SRV-MSG-PROC,1,"""Servers MUST verify that all key usage bits asserted in the request are present in the Key Usage certificate extension.""","""Set key usage bits in the request that are not present in the Key Usage certificate extension to test server validation.""",ClientHello,key_usage_bits,SET,None,None,"""0x05""","""Server rejects the ClientHello with an illegal_parameter alert."""
25,4.2.8.. Handshake Protocol_Extensions_Key Share,Client Shares Description,CLI-MSG-CONST,1,"""Clients MUST offer KeyShareEntry values corresponding to groups in the 'supported_groups' extension, listed in descending order of preference. The client_shares vector MAY be empty if requesting a HelloRetryRequest.""",SRV-MSG-PROC,1,"""Servers MUST validate that each KeyShareEntry corresponds to a group in the 'supported_groups' extension and appears in the correct order.""","""Set the KeyShareEntry values to groups that are not included in the 'supported_groups' extension to test server validation.""",ClientHello,key_shares,SET,None,None,"""{""group"":""0x1234"",""key_share"":""some_key_data""}""","""Server aborts the handshake with an illegal_parameter alert."""
26,4.2.8.. Handshake Protocol_Extensions_Key Share,KeyShare Entry Rules,CLI-MSG-CONST,1,"""Clients MUST offer KeyShareEntry values only for groups listed in the 'supported_groups' extension and MUST NOT offer multiple KeyShareEntry values for the same group.""",SRV-MSG-PROC,1,"""Servers MAY check for violations of KeyShareEntry rules and abort the handshake with an 'illegal_parameter' alert if any rule is violated.""","""Set multiple KeyShareEntry values for the same group to test server enforcement of KeyShareEntry rules.""",ClientHello,KeyShareEntry,SET,None,None,"""Multiple entries for the same group""","""Server aborts the handshake with an illegal_parameter alert."""
27,4.2.8.. Handshake Protocol_Extensions_Key Share,Verification of Selected NamedGroup,CLI-MSG-CONST,1,"""If the NamedGroup verification fails, the client MUST abort the handshake and send an 'illegal_parameter' alert.""",SRV-MSG-PROC,0,"""Servers should be prepared to handle ClientHello messages that may lead to an 'illegal_parameter' alert due to NamedGroup mismatch.""","""Set an invalid NamedGroup in the key_share extension to verify that the server responds correctly to the illegal_parameter alert.""",ClientHello,key_share.named_group,SET,None,None,"""0xFFFF""","""Server aborts the handshake with an illegal_parameter alert."""
28,4.2.8.1.. Handshake Protocol_Extensions_Key Share_Diffie-Hellman Parameters,Public Key Validation,CLI-MSG-CONST,1,"""Clients MUST validate that their own public key Y satisfies the condition 1 < Y < p-1.""",SRV-MSG-PROC,1,"""Servers MUST also validate that the public key Y of the remote peer satisfies the condition 1 < Y < p-1.""","""Set the public key Y value to a value that does not satisfy the condition 1 < Y < p-1 to test validation enforcement.""",ClientHello,public_key_Y,SET,None,None,"""0""","""Server rejects the ClientHello with an illegal_parameter alert."""
29,4.2.9.. Handshake Protocol_Extensions_Pre-Shared Key Exchange Modes,PSK Key Exchange Modes Extension Overview,CLI-MSG-CONST,1,"""Clients MUST send a 'psk_key_exchange_modes' extension to indicate the supported modes for PSK usage.""",SRV-MSG-PROC,1,"""Servers MUST interpret the 'psk_key_exchange_modes' extension to restrict PSK options based on the client's capabilities.""","""Set the 'psk_key_exchange_modes' extension to an unsupported mode to test server's rejection of invalid PSK modes.""",ClientHello,psk_key_exchange_modes,SET,None,None,"""0xFF""","""Server rejects the ClientHello with an illegal_parameter alert."""
30,4.2.9.. Handshake Protocol_Extensions_Pre-Shared Key Exchange Modes,Client Requirements for PSK Extensions,CLI-MSG-CONST,1,"""Clients MUST ensure that the key exchange mode offered is compatible with the modes advertised.""",SRV-MSG-PROC,1,"""Servers MUST NOT select a key exchange mode that is not listed by the client.""","""Set an incompatible key exchange mode in the ClientHello to test server's rejection of invalid modes.""",ClientHello,psk_key_exchange_modes,SET,None,None,"""0x03""","""Server rejects the ClientHello with an illegal_parameter alert."""
31,4.2.9.. Handshake Protocol_Extensions_Pre-Shared Key Exchange Modes,Key Exchange Mode Descriptions,CLI-MSG-CONST,1,"""In the psk_dhe_ke mode, both the client and server MUST supply 'key_share' values.""",SRV-MSG-PROC,1,"""Servers MUST provide 'key_share' values in psk_dhe_ke mode as specified in Section 4.2.8.""","""Set the 'key_share' field to an invalid format to test server's handling of improperly formatted key shares.""",ClientHello,key_share,SET,None,None,"""invalid_format_key_share""","""Server aborts the handshake with an illegal_parameter alert."""
32,4.2.10.. Handshake Protocol_Extensions_Early Data Indication,Parameters for 0-RTT Data,CLI-MSG-CONST,1,"""Clients MUST use the first PSK listed in the 'pre_shared_key' extension to encrypt early data.""",SRV-MSG-PROC,1,"""Servers MUST validate that the PSK used to encrypt early data is the first PSK listed in the client's 'pre_shared_key' extension.""","""Set the PSK used for early data encryption to a PSK that is not the first listed in the 'pre_shared_key' extension.""",ClientHello,pre_shared_key,SET,None,None,"""second_psk_value""","""Server rejects the early data with an invalid_psk alert."""
33,4.2.11.. Handshake Protocol_Extensions_Pre-Shared Key Extension,Field Descriptions,CLI-MSG-CONST,1,"""Clients MUST provide a label for a key, which can be a ticket or a pre-shared key label.""",SRV-MSG-PROC,1,"""Servers MUST recognize and utilize the identity label provided by the client.""","""Set the key label to an invalid format to test server's handling of identity labels.""",ClientHello,key_label,SET,None,None,"""invalid_label_format""","""Server aborts the handshake with an illegal_parameter alert."""
34,4.2.11.. Handshake Protocol_Extensions_Pre-Shared Key Extension,Field Descriptions,CLI-MSG-CONST,1,"""Clients SHOULD use an obfuscated_ticket_age of 0 for externally established identities, which servers MUST ignore.""",SRV-MSG-PROC,1,"""Servers MUST ignore the obfuscated_ticket_age value when it is 0.""","""Set the 'obfuscated_ticket_age' field to a value other than 0 to test server's handling of this field.""",ClientHello,obfuscated_ticket_age,SET,None,None,"""1""","""Server processes the ClientHello normally, ignoring the obfuscated_ticket_age."""
35,4.2.11.. Handshake Protocol_Extensions_Pre-Shared Key Extension,Field Descriptions,CLI-MSG-CONST,1,"""Clients MUST send a list of identities they are willing to negotiate, using the first identity for 0-RTT data if 'early_data' is also sent.""",SRV-MSG-PROC,1,"""Servers MUST select the first identity from the identities list for processing 0-RTT data if the 'early_data' extension is present.""","""Set the identity list to an empty array to test server behavior with no identities provided.""",ClientHello,identities,SET,None,None,"""""","""Server aborts the handshake with a missing_extension alert."""
36,4.2.11.. Handshake Protocol_Extensions_Pre-Shared Key Extension,PSK Hash Algorithm,CLI-MSG-CONST,1,"""Externally established PSKs MUST have the Hash algorithm set during establishment or default to SHA-256 if no algorithm is defined.""",SRV-MSG-PROC,1,"""The server MUST ensure that it selects a compatible PSK and cipher suite.""","""Set the PSK hash algorithm to an unsupported value to test server's handling of incompatible PSK.""",ClientHello,psk_hash_algorithm,SET,None,None,"""0xFFFF""","""Server aborts the handshake with an illegal_parameter alert."""
37,4.2.11.. Handshake Protocol_Extensions_Pre-Shared Key Extension,PSK Hash Algorithm,CLI-MSG-CONST,1,"""For PSKs established via the ticket mechanism, the Hash algorithm is the KDF Hash algorithm from the connection where the ticket was established.""",SRV-MSG-PROC,0,"""Servers use the KDF Hash algorithm from the connection for PSKs established via the ticket mechanism.""","""Set the Hash algorithm to a value not matching the KDF Hash algorithm from the original connection to test server compliance with the PSK mechanism.""",ClientHello,psk_hash_algorithm,SET,None,None,"""0x1234""","""Server aborts the handshake with an illegal_parameter alert."""
38,4.2.11.. Handshake Protocol_Extensions_Pre-Shared Key Extension,Client Verification,CLI-MSG-CONST,1,"""Clients MUST abort the handshake with an 'illegal_parameter' alert if the verification of the selected_identity, cipher suite, or 'key_share' extension fails.""",SRV-MSG-PROC,1,"""Servers MUST handle the 'illegal_parameter' alert appropriately, ensuring the handshake is terminated correctly.""","""Set an invalid cipher suite in the ClientHello to test the client's verification mechanism.""",ClientHello,cipher_suites,SET,None,None,"""0x0000""","""Client aborts the handshake with an illegal_parameter alert."""
39,4.2.11.1.. Handshake Protocol_Extensions_Pre-Shared Key Extension_Ticket Age,Client Ticket Age Handling,CLI-MSG-CONST,1,"""Clients MUST consider the ticket age as the time since receiving the NewSessionTicket message and MUST NOT use tickets with ages greater than the 'ticket_lifetime' value.""",SRV-MSG-PROC,1,"""Servers must ensure that clients do not use tickets exceeding the specified 'ticket_lifetime' during session resumption.""","""Set the ticket age to a value greater than the 'ticket_lifetime' to test server rejection behavior.""",ClientHello,ticket_age,SET,None,None,"""5000""","""Server rejects the ClientHello with an illegal_parameter alert."""
40,4.4.2.1.. Handshake Protocol_Authentication Messages_Certificate_OCSP Status and SCT Extensions,Deprecation of status_request_v2 Extension,CLI-MSG-CONST,1,"""Clients MAY include the status_request_v2 extension in ClientHello messages, but it is deprecated.""",SRV-MSG-PROC,1,"""Servers MUST NOT act upon the presence of the status_request_v2 extension in ClientHello messages and MUST NOT include it in EncryptedExtensions, CertificateRequest, or Certificate messages.""","""Set the status_request_v2 extension in the ClientHello message to check server's compliance with deprecation rules.""",ClientHello,status_request_v2,SET,None,END,"""0x0000""","""Server ignores the status_request_v2 extension and proceeds with the handshake without acting on it."""
41,4.4.2.1.. Handshake Protocol_Authentication Messages_Certificate_OCSP Status and SCT Extensions,Deprecation of status_request_v2 Extension,CLI-MSG-CONST,1,"""Clients MAY send the status_request_v2 extension in ClientHello, intending to use it with earlier TLS versions.""",SRV-MSG-PROC,1,"""Servers MUST be able to process ClientHello messages that include the deprecated status_request_v2 extension.""","""Set the status_request_v2 extension in the ClientHello to test server compliance with handling deprecated extensions.""",ClientHello,status_request_v2,SET,None,END,"""0x0005""","""Server processes the ClientHello including the deprecated status_request_v2 extension without errors."""
42,4.6.1.. Handshake Protocol_Post-Handshake Messages_New Session Ticket Message,Ticket Resumption Requirements,CLI-MSG-CONST,1,"""Clients MUST only resume if the new SNI value is valid for the server certificate presented in the original session.""",SRV-MSG-PROC,1,"""Servers MUST ensure the new SNI value is valid for the certificate used in the original session.""","""Set the SNI value in the ClientHello to a value that is not valid for the original session's server certificate to test server behavior.""",ClientHello,SNI,SET,None,None,"""invalid.example.com""","""Server aborts the handshake with a certificate_unknown alert."""
43,4.6.1.. Handshake Protocol_Post-Handshake Messages_New Session Ticket Message,Ticket Resumption Requirements,CLI-MSG-CONST,0,"""Clients MAY resume with a different SNI value if indicated externally or by other means.""",SRV-MSG-PROC,0,"""Servers MAY accept a session resume with a different SNI value if appropriately indicated.""","""Set a different SNI value in the ClientHello during session resumption to verify server acceptance.""",ClientHello,SNI,SET,None,None,"""different.example.com""","""Server accepts the session resume and continues the handshake."""
44,4.6.1.. Handshake Protocol_Post-Handshake Messages_New Session Ticket Message,SNI Value Reporting,CLI-MSG-CONST,0,"""If all PSK identities with different SNI values are declined, both SNI values must be the same.""",SRV-MSG-PROC,0,"""Servers must ensure consistency between the SNI values when all PSK identities are declined.""","""Set different SNI values in a ClientHello and check server response for consistency.""",ClientHello,SNI,SET,None,None,"""sni1.example.com, sni2.example.com""","""Server aborts the handshake with an illegal_parameter alert."""
