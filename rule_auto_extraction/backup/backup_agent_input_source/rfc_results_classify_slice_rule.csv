ID,Section,Title,Content,RuleMatch,ExtractedRule,SlicedRule,classification_full_result,classification_result,MQD,CRA
4,Section: 4.. Handshake Protocol,Message Order Requirements,"Protocol messages MUST be sent in the order defined in Section 4.4.1 and shown in the diagrams in Section 2. A peer which receives a handshake message in an unexpected order MUST abort the handshake with an ""unexpected_message"" alert. New handshake message types are assigned by IANA as described in Section 11.",1,"### OUTPUT
<CLI-MSG-CONST> <1> (Clients MUST send protocol messages in the order defined in Section 4.4.1 and illustrated in Section 2) + <SRV-MSG-PROC> <1> (Servers MUST verify that received handshake messages are in the expected order as per Section 4.4.1)  
<CLI-MSG-PROC> <1> (If a handshake message is received in an unexpected order, clients MUST abort the handshake with an ""unexpected_message"" alert) + <SRV-MSG-PROC> <1> (If a server receives a handshake message in an unexpected order, it MUST also abort the handshake with an ""unexpected_message"" alert)",<CLI-MSG-CONST> <1> (Clients MUST send protocol messages in the order defined in Section 4.4.1 and illustrated in Section 2) + <SRV-MSG-PROC> <1> (Servers MUST verify that received handshake messages are in the expected order as per Section 4.4.1),"{'classification_result': '0', 'MQD': 'No specific message ordering requirements directly related to ClientHello; only general protocol message ordering is mentioned.', 'CRA': 'No relation to ClientHello message or its contents.'}",0,No specific message ordering requirements directly related to ClientHello; only general protocol message ordering is mentioned.,No relation to ClientHello message or its contents.
17,Section: 4.1.2.. Handshake Protocol_Key Exchange Messages_Client Hello,ClientHello Transmission Rules,"When a client first connects to a server, it is REQUIRED to send the ClientHello as its first TLS message. The client will also send a ClientHello when the server has responded to its ClientHello with a HelloRetryRequest. In that case, the client MUST send the same ClientHello without modification, except as follows:
- If a ""key_share"" extension was supplied in the HelloRetryRequest, replacing the list of shares with a list containing a single KeyShareEntry from the indicated group.
- Removing the ""early_data"" extension if one was present. Early data is not permitted after a HelloRetryRequest.
- Including a ""cookie"" extension if one was provided in the HelloRetryRequest.
- Updating the ""pre_shared_key"" extension if present by recomputing the ""obfuscated_ticket_age"" and binder values and (optionally) removing any PSKs which are incompatible with the server's indicated cipher suite.
- Optionally adding, removing, or changing the length of the ""padding"" extension [RFC7685].
- Other modifications that may be allowed by an extension defined in the future and present in the HelloRetryRequest.",1,"<CLI-MSG-CONST> <1> (Clients MUST send ClientHello as the first TLS message upon connection and also after receiving a HelloRetryRequest) + <SRV-MSG-PROC> <0> (Servers MUST validate that the initial ClientHello is sent as the first message and that subsequent ClientHello messages comply with the specified modifications)
<CLI-MSG-CONST> <1> (After receiving a HelloRetryRequest, clients MUST replace the ""key_share"" extension with a single KeyShareEntry for the indicated group if requested) + <SRV-MSG-PROC> <0> (Servers MUST verify the ""key_share"" extension is correctly modified in the new ClientHello)
<CLI-MSG-CONST> <1> (Clients MUST remove the ""early_data"" extension if it was present when sending a new ClientHello after a HelloRetryRequest) + <SRV-MSG-PROC> <0> (Servers MUST reject ClientHello messages that still include the ""early_data"" extension after a HelloRetryRequest)
<CLI-MSG-CONST> <1> (Clients MUST include a ""cookie"" extension if provided in the HelloRetryRequest) + <SRV-MSG-PROC> <0> (Servers MUST check for the presence of the ""cookie"" extension in the new ClientHello)
<CLI-MSG-CONST> <1> (Clients MUST update the ""pre_shared_key"" extension by recalculating the ""obfuscated_ticket_age"" and binder values, and MAY remove incompatible PSKs) + <SRV-MSG-PROC> <0> (Servers MUST verify the updated ""pre_shared_key"" values in the new ClientHello)
<CLI-MSG-CONST> <1> (Clients MAY add, remove, or change the length of the ""padding"" extension as necessary) + <SRV-MSG-PROC> <0> (Servers MUST accept optional modifications to the ""padding"" extension in the new ClientHello)",<CLI-MSG-CONST> <1> (Clients MUST send ClientHello as the first TLS message upon connection and also after receiving a HelloRetryRequest) + <SRV-MSG-PROC> <0> (Servers MUST validate that the initial ClientHello is sent as the first message and that subsequent ClientHello messages comply with the specified modifications),"{'classification_result': '2', 'MQD': 'Clients MUST send ClientHello as the first TLS message and also after receiving a HelloRetryRequest, creating explicit message dependencies.', 'CRA': 'Directly involves the ClientHello message transmission and its ordering requirements.'}",2,"Clients MUST send ClientHello as the first TLS message and also after receiving a HelloRetryRequest, creating explicit message dependencies.",Directly involves the ClientHello message transmission and its ordering requirements.
,Section: 4.1.2.. Handshake Protocol_Key Exchange Messages_Client Hello,ClientHello Transmission Rules,"When a client first connects to a server, it is REQUIRED to send the ClientHello as its first TLS message. The client will also send a ClientHello when the server has responded to its ClientHello with a HelloRetryRequest. In that case, the client MUST send the same ClientHello without modification, except as follows:
- If a ""key_share"" extension was supplied in the HelloRetryRequest, replacing the list of shares with a list containing a single KeyShareEntry from the indicated group.
- Removing the ""early_data"" extension if one was present. Early data is not permitted after a HelloRetryRequest.
- Including a ""cookie"" extension if one was provided in the HelloRetryRequest.
- Updating the ""pre_shared_key"" extension if present by recomputing the ""obfuscated_ticket_age"" and binder values and (optionally) removing any PSKs which are incompatible with the server's indicated cipher suite.
- Optionally adding, removing, or changing the length of the ""padding"" extension [RFC7685].
- Other modifications that may be allowed by an extension defined in the future and present in the HelloRetryRequest.",,,"<CLI-MSG-CONST> <1> (After receiving a HelloRetryRequest, clients MUST replace the ""key_share"" extension with a single KeyShareEntry for the indicated group if requested) + <SRV-MSG-PROC> <0> (Servers MUST verify the ""key_share"" extension is correctly modified in the new ClientHello)","{'classification_result': '2', 'MQD': 'Must replace the ""key_share"" extension after receiving HelloRetryRequest, creating an explicit message dependency.', 'CRA': 'Directly involves the ClientHello message through the modification of the ""key_share"" extension.'}",2,"Must replace the ""key_share"" extension after receiving HelloRetryRequest, creating an explicit message dependency.","Directly involves the ClientHello message through the modification of the ""key_share"" extension."
,Section: 4.1.2.. Handshake Protocol_Key Exchange Messages_Client Hello,ClientHello Transmission Rules,"When a client first connects to a server, it is REQUIRED to send the ClientHello as its first TLS message. The client will also send a ClientHello when the server has responded to its ClientHello with a HelloRetryRequest. In that case, the client MUST send the same ClientHello without modification, except as follows:
- If a ""key_share"" extension was supplied in the HelloRetryRequest, replacing the list of shares with a list containing a single KeyShareEntry from the indicated group.
- Removing the ""early_data"" extension if one was present. Early data is not permitted after a HelloRetryRequest.
- Including a ""cookie"" extension if one was provided in the HelloRetryRequest.
- Updating the ""pre_shared_key"" extension if present by recomputing the ""obfuscated_ticket_age"" and binder values and (optionally) removing any PSKs which are incompatible with the server's indicated cipher suite.
- Optionally adding, removing, or changing the length of the ""padding"" extension [RFC7685].
- Other modifications that may be allowed by an extension defined in the future and present in the HelloRetryRequest.",,,"<CLI-MSG-CONST> <1> (Clients MUST remove the ""early_data"" extension if it was present when sending a new ClientHello after a HelloRetryRequest) + <SRV-MSG-PROC> <0> (Servers MUST reject ClientHello messages that still include the ""early_data"" extension after a HelloRetryRequest)","{'classification_result': '2', 'MQD': 'Clients must remove the ""early_data"" extension after a HelloRetryRequest, indicating a clear message queue dependency.', 'CRA': 'Directly involves the ClientHello message as it specifies conditions for sending a new ClientHello.'}",2,"Clients must remove the ""early_data"" extension after a HelloRetryRequest, indicating a clear message queue dependency.",Directly involves the ClientHello message as it specifies conditions for sending a new ClientHello.
,Section: 4.1.2.. Handshake Protocol_Key Exchange Messages_Client Hello,ClientHello Transmission Rules,"When a client first connects to a server, it is REQUIRED to send the ClientHello as its first TLS message. The client will also send a ClientHello when the server has responded to its ClientHello with a HelloRetryRequest. In that case, the client MUST send the same ClientHello without modification, except as follows:
- If a ""key_share"" extension was supplied in the HelloRetryRequest, replacing the list of shares with a list containing a single KeyShareEntry from the indicated group.
- Removing the ""early_data"" extension if one was present. Early data is not permitted after a HelloRetryRequest.
- Including a ""cookie"" extension if one was provided in the HelloRetryRequest.
- Updating the ""pre_shared_key"" extension if present by recomputing the ""obfuscated_ticket_age"" and binder values and (optionally) removing any PSKs which are incompatible with the server's indicated cipher suite.
- Optionally adding, removing, or changing the length of the ""padding"" extension [RFC7685].
- Other modifications that may be allowed by an extension defined in the future and present in the HelloRetryRequest.",,,"<CLI-MSG-CONST> <1> (Clients MUST include a ""cookie"" extension if provided in the HelloRetryRequest) + <SRV-MSG-PROC> <0> (Servers MUST check for the presence of the ""cookie"" extension in the new ClientHello)","{'classification_result': '2', 'MQD': 'Clients MUST include a ""cookie"" extension after receiving a HelloRetryRequest, creating a message queue dependency.', 'CRA': 'Directly involves ClientHello message transmission due to the requirement of the ""cookie"" extension.'}",2,"Clients MUST include a ""cookie"" extension after receiving a HelloRetryRequest, creating a message queue dependency.","Directly involves ClientHello message transmission due to the requirement of the ""cookie"" extension."
,Section: 4.1.2.. Handshake Protocol_Key Exchange Messages_Client Hello,ClientHello Transmission Rules,"When a client first connects to a server, it is REQUIRED to send the ClientHello as its first TLS message. The client will also send a ClientHello when the server has responded to its ClientHello with a HelloRetryRequest. In that case, the client MUST send the same ClientHello without modification, except as follows:
- If a ""key_share"" extension was supplied in the HelloRetryRequest, replacing the list of shares with a list containing a single KeyShareEntry from the indicated group.
- Removing the ""early_data"" extension if one was present. Early data is not permitted after a HelloRetryRequest.
- Including a ""cookie"" extension if one was provided in the HelloRetryRequest.
- Updating the ""pre_shared_key"" extension if present by recomputing the ""obfuscated_ticket_age"" and binder values and (optionally) removing any PSKs which are incompatible with the server's indicated cipher suite.
- Optionally adding, removing, or changing the length of the ""padding"" extension [RFC7685].
- Other modifications that may be allowed by an extension defined in the future and present in the HelloRetryRequest.",,,"<CLI-MSG-CONST> <1> (Clients MUST update the ""pre_shared_key"" extension by recalculating the ""obfuscated_ticket_age"" and binder values, and MAY remove incompatible PSKs) + <SRV-MSG-PROC> <0> (Servers MUST verify the updated ""pre_shared_key"" values in the new ClientHello)","{'classification_result': '1', 'MQD': 'No specific message ordering or dependencies required; the instruction does not indicate that this must occur after or in response to another message.', 'CRA': 'Directly relates to ClientHello through the mention of the ""pre_shared_key"" extension and its values.'}",1,No specific message ordering or dependencies required; the instruction does not indicate that this must occur after or in response to another message.,"Directly relates to ClientHello through the mention of the ""pre_shared_key"" extension and its values."
,Section: 4.1.2.. Handshake Protocol_Key Exchange Messages_Client Hello,ClientHello Transmission Rules,"When a client first connects to a server, it is REQUIRED to send the ClientHello as its first TLS message. The client will also send a ClientHello when the server has responded to its ClientHello with a HelloRetryRequest. In that case, the client MUST send the same ClientHello without modification, except as follows:
- If a ""key_share"" extension was supplied in the HelloRetryRequest, replacing the list of shares with a list containing a single KeyShareEntry from the indicated group.
- Removing the ""early_data"" extension if one was present. Early data is not permitted after a HelloRetryRequest.
- Including a ""cookie"" extension if one was provided in the HelloRetryRequest.
- Updating the ""pre_shared_key"" extension if present by recomputing the ""obfuscated_ticket_age"" and binder values and (optionally) removing any PSKs which are incompatible with the server's indicated cipher suite.
- Optionally adding, removing, or changing the length of the ""padding"" extension [RFC7685].
- Other modifications that may be allowed by an extension defined in the future and present in the HelloRetryRequest.",,,"<CLI-MSG-CONST> <1> (Clients MAY add, remove, or change the length of the ""padding"" extension as necessary) + <SRV-MSG-PROC> <0> (Servers MUST accept optional modifications to the ""padding"" extension in the new ClientHello)","{'classification_result': '0', 'MQD': 'No specific message ordering requirements or dependencies are indicated.', 'CRA': 'No relation to ClientHello message or its contents, as it discusses optional modifications rather than mandatory ClientHello behavior.'}",0,No specific message ordering requirements or dependencies are indicated.,"No relation to ClientHello message or its contents, as it discusses optional modifications rather than mandatory ClientHello behavior."
20,Section: 4.1.2.. Handshake Protocol_Key Exchange Messages_Client Hello,Legacy Version Field,"In previous versions of TLS, this field was used for version negotiation and represented the highest version number supported by the client. Experience has shown that many servers do not properly implement version negotiation, leading to ""version intolerance"" in which the server rejects an otherwise acceptable ClientHello with a version number higher than it supports. In TLS 1.3, the client indicates its version preferences in the ""supported_versions"" extension (Section 4.2.1) and the legacy_version field MUST be set to 0x0303, which is the version number for TLS 1.2. TLS 1.3 ClientHellos are identified as having a legacy_version of 0x0303 and a supported_versions extension present with 0x0304 as the highest version indicated therein. (See Appendix D for details about backward compatibility.)",1,"<CLI-MSG-CONST> <1> (Clients MUST set the legacy_version field to 0x0303 in TLS 1.3 ClientHellos) + <SRV-MSG-PROC> <1> (Servers MUST recognize ClientHellos with a legacy_version of 0x0303 and a supported_versions extension containing 0x0304 as valid)
<CLI-MSG-CONST> <1> (Clients MUST include the ""supported_versions"" extension in TLS 1.3 ClientHellos) + <SRV-MSG-PROC> <1> (Servers MUST verify the presence of the ""supported_versions"" extension in ClientHellos)",<CLI-MSG-CONST> <1> (Clients MUST set the legacy_version field to 0x0303 in TLS 1.3 ClientHellos) + <SRV-MSG-PROC> <1> (Servers MUST recognize ClientHellos with a legacy_version of 0x0303 and a supported_versions extension containing 0x0304 as valid),"{'classification_result': '1', 'MQD': 'No specific message ordering or dependencies required.', 'CRA': 'Directly relates to ClientHello through the legacy_version field requirement.'}",1,No specific message ordering or dependencies required.,Directly relates to ClientHello through the legacy_version field requirement.
,Section: 4.1.2.. Handshake Protocol_Key Exchange Messages_Client Hello,Legacy Version Field,"In previous versions of TLS, this field was used for version negotiation and represented the highest version number supported by the client. Experience has shown that many servers do not properly implement version negotiation, leading to ""version intolerance"" in which the server rejects an otherwise acceptable ClientHello with a version number higher than it supports. In TLS 1.3, the client indicates its version preferences in the ""supported_versions"" extension (Section 4.2.1) and the legacy_version field MUST be set to 0x0303, which is the version number for TLS 1.2. TLS 1.3 ClientHellos are identified as having a legacy_version of 0x0303 and a supported_versions extension present with 0x0304 as the highest version indicated therein. (See Appendix D for details about backward compatibility.)",,,"<CLI-MSG-CONST> <1> (Clients MUST include the ""supported_versions"" extension in TLS 1.3 ClientHellos) + <SRV-MSG-PROC> <1> (Servers MUST verify the presence of the ""supported_versions"" extension in ClientHellos)","{'classification_result': '1', 'MQD': 'No specific message ordering or dependencies required.', 'CRA': 'Directly relates to ClientHello through the ""supported_versions"" extension.'}",1,No specific message ordering or dependencies required.,"Directly relates to ClientHello through the ""supported_versions"" extension."
22,Section: 4.1.2.. Handshake Protocol_Key Exchange Messages_Client Hello,Session ID Field,"Versions of TLS before TLS 1.3 supported a ""session resumption"" feature which has been merged with pre-shared keys in this version (see Section 2.2). A client which has a cached session ID set by a pre-TLS 1.3 server SHOULD set this field to that value. In compatibility mode (see Appendix D.4), this field MUST be non-empty, so a client not offering a pre-TLS 1.3 session MUST generate a new 32-byte value. This value need not be random but SHOULD be unpredictable to avoid implementations fixating on a specific value (also known as ossification). Otherwise, it MUST be set as a zero-length vector (i.e., a zero-valued single byte length field).",1,"<CLI-MSG-CONST> <1> (Clients MUST set the session ID field to a cached session ID from a pre-TLS 1.3 server if available) + <SRV-MSG-PROC> <0> (Servers MUST accept the session ID field when set to a valid cached value)
<CLI-MSG-CONST> <1> (In compatibility mode, clients MUST generate a new non-empty 32-byte session ID if not offering a pre-TLS 1.3 session) + <SRV-MSG-PROC> <0> (Servers MUST verify that the session ID is non-empty in compatibility mode)
<CLI-MSG-CONST> <1> (Clients SHOULD ensure the generated session ID is unpredictable to avoid ossification) + <SRV-MSG-PROC> <0> (Servers SHOULD reject session IDs that are predictable or fixed) 
<CLI-MSG-CONST> <1> (If no valid session ID is available, clients MUST set the session ID field as a zero-length vector) + <SRV-MSG-PROC> <0> (Servers MUST accept a zero-length session ID vector when appropriate)",<CLI-MSG-CONST> <1> (Clients MUST set the session ID field to a cached session ID from a pre-TLS 1.3 server if available) + <SRV-MSG-PROC> <0> (Servers MUST accept the session ID field when set to a valid cached value),"{'classification_result': '0', 'MQD': 'No specific message ordering requirements or dependencies indicated.', 'CRA': 'No relation to ClientHello message or its contents; pertains to session ID handling.'}",0,No specific message ordering requirements or dependencies indicated.,No relation to ClientHello message or its contents; pertains to session ID handling.
,Section: 4.1.2.. Handshake Protocol_Key Exchange Messages_Client Hello,Session ID Field,"Versions of TLS before TLS 1.3 supported a ""session resumption"" feature which has been merged with pre-shared keys in this version (see Section 2.2). A client which has a cached session ID set by a pre-TLS 1.3 server SHOULD set this field to that value. In compatibility mode (see Appendix D.4), this field MUST be non-empty, so a client not offering a pre-TLS 1.3 session MUST generate a new 32-byte value. This value need not be random but SHOULD be unpredictable to avoid implementations fixating on a specific value (also known as ossification). Otherwise, it MUST be set as a zero-length vector (i.e., a zero-valued single byte length field).",,,"<CLI-MSG-CONST> <1> (In compatibility mode, clients MUST generate a new non-empty 32-byte session ID if not offering a pre-TLS 1.3 session) + <SRV-MSG-PROC> <0> (Servers MUST verify that the session ID is non-empty in compatibility mode)","{'classification_result': '0', 'MQD': 'No specific message ordering or dependencies required.', 'CRA': 'No relation to ClientHello message or its contents.'}",0,No specific message ordering or dependencies required.,No relation to ClientHello message or its contents.
,Section: 4.1.2.. Handshake Protocol_Key Exchange Messages_Client Hello,Session ID Field,"Versions of TLS before TLS 1.3 supported a ""session resumption"" feature which has been merged with pre-shared keys in this version (see Section 2.2). A client which has a cached session ID set by a pre-TLS 1.3 server SHOULD set this field to that value. In compatibility mode (see Appendix D.4), this field MUST be non-empty, so a client not offering a pre-TLS 1.3 session MUST generate a new 32-byte value. This value need not be random but SHOULD be unpredictable to avoid implementations fixating on a specific value (also known as ossification). Otherwise, it MUST be set as a zero-length vector (i.e., a zero-valued single byte length field).",,,"<CLI-MSG-CONST> <1> (If no valid session ID is available, clients MUST set the session ID field as a zero-length vector) + <SRV-MSG-PROC> <0> (Servers MUST accept a zero-length session ID vector when appropriate)","{'classification_result': '0', 'MQD': 'No specific message ordering or dependencies required.', 'CRA': 'No relation to ClientHello message or its contents.'}",0,No specific message ordering or dependencies required.,No relation to ClientHello message or its contents.
23,Section: 4.1.2.. Handshake Protocol_Key Exchange Messages_Client Hello,Cipher Suites,"A list of the symmetric cipher options supported by the client, specifically the record protection algorithm (including secret key length) and a hash to be used with HKDF, in descending order of client preference. Values are defined in Appendix B.4. If the list contains cipher suites that the server does not recognize, support, or wish to use, the server MUST ignore those cipher suites and process the remaining ones as usual. If the client is attempting a PSK key establishment, it SHOULD advertise at least one cipher suite indicating a Hash associated with the PSK.",1,"<CLI-MSG-CONST> <1> (Clients MUST provide a list of supported cipher suites in descending order of preference) + <SRV-MSG-PROC> <1> (Servers MUST ignore unrecognized or unsupported cipher suites in the client's list and process the remaining ones)
<CLI-MSG-CONST> <0> (Clients SHOULD advertise at least one PSK-related cipher suite if attempting PSK key establishment) + <SRV-MSG-PROC> <0> (Servers MAY prioritize processing of cipher suites associated with PSK if indicated by the client)",<CLI-MSG-CONST> <1> (Clients MUST provide a list of supported cipher suites in descending order of preference) + <SRV-MSG-PROC> <1> (Servers MUST ignore unrecognized or unsupported cipher suites in the client's list and process the remaining ones),"{'classification_result': '1', 'MQD': 'No specific message ordering or dependencies required.', 'CRA': 'Directly relates to ClientHello through the requirement to provide a list of supported cipher suites.'}",1,No specific message ordering or dependencies required.,Directly relates to ClientHello through the requirement to provide a list of supported cipher suites.
24,Section: 4.1.2.. Handshake Protocol_Key Exchange Messages_Client Hello,Legacy Compression Methods,"Versions of TLS before 1.3 supported compression with the list of supported compression methods being sent in this field. For every TLS 1.3 ClientHello, this vector MUST contain exactly one byte, set to zero, which corresponds to the ""null"" compression method in prior versions of TLS. If a TLS 1.3 ClientHello is received with any other value in this field, the server MUST abort the handshake with an ""illegal_parameter"" alert. Note that TLS 1.3 servers might receive TLS 1.2 or prior ClientHellos which contain other compression methods and (if negotiating such a prior version) MUST follow the procedures for the appropriate prior version of TLS.",1,"<CLI-MSG-CONST> <1> (TLS 1.3 ClientHello MUST contain exactly one byte set to zero for the ""null"" compression method) + <SRV-MSG-PROC> <1> (Servers MUST abort the handshake with an ""illegal_parameter"" alert if the ClientHello contains any value other than zero in the compression methods field)  
<SRV-MSG-PROC> <0> (Servers MUST follow procedures for prior TLS versions if receiving a ClientHello from TLS 1.2 or earlier that contains other compression methods)","<CLI-MSG-CONST> <1> (TLS 1.3 ClientHello MUST contain exactly one byte set to zero for the ""null"" compression method) + <SRV-MSG-PROC> <1> (Servers MUST abort the handshake with an ""illegal_parameter"" alert if the ClientHello contains any value other than zero in the compression methods field)","{'classification_result': '1', 'MQD': 'No specific message ordering or dependencies required.', 'CRA': 'Directly relates to ClientHello through the requirement for the ""null"" compression method.'}",1,No specific message ordering or dependencies required.,"Directly relates to ClientHello through the requirement for the ""null"" compression method."
25,Section: 4.1.2.. Handshake Protocol_Key Exchange Messages_Client Hello,Extensions,"Clients request extended functionality from servers by sending data in the extensions field. The actual ""Extension"" format is defined in Section 4.2. In TLS 1.3, the use of certain extensions is mandatory, as functionality has moved into extensions to preserve ClientHello compatibility with previous versions of TLS. Servers MUST ignore unrecognized extensions.",1,"<CLI-MSG-CONST> <1> (Clients MUST send data in the extensions field to request extended functionality from servers) + <SRV-MSG-PROC> <1> (Servers MUST ignore unrecognized extensions in the ClientHello)
<CLI-MSG-CONST> <1> (Clients MUST include mandatory extensions in the ClientHello to ensure compatibility with previous TLS versions) + <SRV-MSG-PROC> <0> (Servers MAY log the presence of unrecognized extensions for analysis)",<CLI-MSG-CONST> <1> (Clients MUST send data in the extensions field to request extended functionality from servers) + <SRV-MSG-PROC> <1> (Servers MUST ignore unrecognized extensions in the ClientHello),"{'classification_result': '1', 'MQD': 'No specific message ordering or dependencies required.', 'CRA': 'Directly relates to ClientHello through the mention of the extensions field for requesting functionality.'}",1,No specific message ordering or dependencies required.,Directly relates to ClientHello through the mention of the extensions field for requesting functionality.
,Section: 4.1.2.. Handshake Protocol_Key Exchange Messages_Client Hello,Extensions,"Clients request extended functionality from servers by sending data in the extensions field. The actual ""Extension"" format is defined in Section 4.2. In TLS 1.3, the use of certain extensions is mandatory, as functionality has moved into extensions to preserve ClientHello compatibility with previous versions of TLS. Servers MUST ignore unrecognized extensions.",,,<CLI-MSG-CONST> <1> (Clients MUST include mandatory extensions in the ClientHello to ensure compatibility with previous TLS versions) + <SRV-MSG-PROC> <0> (Servers MAY log the presence of unrecognized extensions for analysis),"{'classification_result': '1', 'MQD': 'No specific message ordering or dependencies required.', 'CRA': 'Directly relates to ClientHello through the mention of mandatory extensions for compatibility.'}",1,No specific message ordering or dependencies required.,Directly relates to ClientHello through the mention of mandatory extensions for compatibility.
52,Section: 4.2.. Handshake Protocol_Extensions,Extension Ordering Rules,"When multiple extensions of different types are present, the extensions MAY appear in any order, with the exception of ""pre_shared_key"" which MUST be the last extension in the ClientHello (but can appear anywhere in the ServerHello extensions block). There MUST NOT be more than one extension of the same type in a given extension block.",1,"<CLI-MSG-CONST> <1> (Clients MUST place the ""pre_shared_key"" extension last in ClientHello, while other extensions MAY appear in any order) + <SRV-MSG-PROC> <1> (Servers MUST verify that the ""pre_shared_key"" is the last extension in ClientHello)
<CLI-MSG-CONST> <1> (Clients MUST NOT include multiple extensions of the same type in any extension block) + <SRV-MSG-PROC> <1> (Servers MUST reject ClientHello messages containing duplicate extension types)","<CLI-MSG-CONST> <1> (Clients MUST place the ""pre_shared_key"" extension last in ClientHello, while other extensions MAY appear in any order) + <SRV-MSG-PROC> <1> (Servers MUST verify that the ""pre_shared_key"" is the last extension in ClientHello)","{'classification_result': '1', 'MQD': 'No specific message ordering or dependency required beyond the placement of the ""pre_shared_key"" extension.', 'CRA': 'Directly relates to ClientHello through the requirement for the ""pre_shared_key"" extension\'s position.'}",1,"No specific message ordering or dependency required beyond the placement of the ""pre_shared_key"" extension.","Directly relates to ClientHello through the requirement for the ""pre_shared_key"" extension's position."
,Section: 4.2.. Handshake Protocol_Extensions,Extension Ordering Rules,"When multiple extensions of different types are present, the extensions MAY appear in any order, with the exception of ""pre_shared_key"" which MUST be the last extension in the ClientHello (but can appear anywhere in the ServerHello extensions block). There MUST NOT be more than one extension of the same type in a given extension block.",,,<CLI-MSG-CONST> <1> (Clients MUST NOT include multiple extensions of the same type in any extension block) + <SRV-MSG-PROC> <1> (Servers MUST reject ClientHello messages containing duplicate extension types),"{'classification_result': '0', 'MQD': 'No specific message ordering requirements or dependencies identified.', 'CRA': 'No relation to ClientHello message or its contents; focuses on extension handling rather than ClientHello itself.'}",0,No specific message ordering requirements or dependencies identified.,No relation to ClientHello message or its contents; focuses on extension handling rather than ClientHello itself.
57,Section: 4.2.1.. Handshake Protocol_Extensions_Supported Versions,ClientHello Requirements,"  
Implementations of this specification MUST send this extension in the ClientHello containing all versions of TLS which they are prepared to negotiate (for this specification, that means minimally 0x0304, but if previous versions of TLS are allowed to be negotiated, they MUST be present as well).  
",1,"<CLI-MSG-CONST> <1> (Clients MUST include the ""supported_versions"" extension in ClientHello, listing all TLS versions they are prepared to negotiate, including 0x0304 and any previous versions if allowed) + <SRV-MSG-PROC> <1> (Servers MUST verify the presence of the ""supported_versions"" extension in ClientHello and check that it contains valid TLS versions)","<CLI-MSG-CONST> <1> (Clients MUST include the ""supported_versions"" extension in ClientHello, listing all TLS versions they are prepared to negotiate, including 0x0304 and any previous versions if allowed) + <SRV-MSG-PROC> <1> (Servers MUST verify the presence of the ""supported_versions"" extension in ClientHello and check that it contains valid TLS versions)","{'classification_result': '1', 'MQD': 'No specific message ordering or dependencies required.', 'CRA': 'Directly relates to ClientHello through the ""supported_versions"" extension.'}",1,No specific message ordering or dependencies required.,"Directly relates to ClientHello through the ""supported_versions"" extension."
59,Section: 4.2.1.. Handshake Protocol_Extensions_Supported Versions,Server Version Negotiation,"  
If this extension is present in the ClientHello, servers MUST NOT use the ClientHello.legacy_version value for version negotiation and MUST use only the ""supported_versions"" extension to determine client preferences. Servers MUST only select a version of TLS present in that extension and MUST ignore any unknown versions that are present in that extension.  
",1,"<CLI-MSG-CONST> <1> (Clients MUST include the ""supported_versions"" extension in ClientHello for version negotiation) + <SRV-MSG-PROC> <1> (Servers MUST use the ""supported_versions"" extension for determining client preferences, ignoring the ClientHello.legacy_version value)

<SRV-MSG-CONST> <1> (Servers MUST select a TLS version only from those present in the ""supported_versions"" extension) + <SRV-MSG-PROC> <1> (Servers MUST ignore any unknown versions present in the ""supported_versions"" extension)","<CLI-MSG-CONST> <1> (Clients MUST include the ""supported_versions"" extension in ClientHello for version negotiation) + <SRV-MSG-PROC> <1> (Servers MUST use the ""supported_versions"" extension for determining client preferences, ignoring the ClientHello.legacy_version value)","{'classification_result': '1', 'MQD': 'No specific message ordering or dependencies required.', 'CRA': 'Directly relates to ClientHello through the requirement to include the ""supported_versions"" extension.'}",1,No specific message ordering or dependencies required.,"Directly relates to ClientHello through the requirement to include the ""supported_versions"" extension."
,Section: 4.2.2.. Handshake Protocol_Extensions_Cookie,HelloRetryRequest Cookie Usage,"  
When sending a HelloRetryRequest, the server MAY provide a ""cookie"" extension to the client (this is an exception to the usual rule that only extensions appearing in the ClientHello may be sent). When sending the new ClientHello, the client MUST copy the contents of the extension received in the HelloRetryRequest into a ""cookie"" extension in the new ClientHello. Clients MUST NOT use cookies in their initial ClientHello in subsequent connections.  
",,,<CLI-MSG-CONST> <1> (Clients MUST NOT use cookies in their initial ClientHello during subsequent connections) + <SRV-MSG-PROC> <0> (Servers MUST ensure clients do not include cookies in their initial ClientHello on new connections),"{'classification_result': '1', 'MQD': 'No specific message ordering or dependencies required; the rule addresses a restriction rather than a dependency.', 'CRA': 'Directly relates to ClientHello, as it specifies behavior regarding cookies in the initial ClientHello message.'}",1,No specific message ordering or dependencies required; the rule addresses a restriction rather than a dependency.,"Directly relates to ClientHello, as it specifies behavior regarding cookies in the initial ClientHello message."
65,Section: 4.2.2.. Handshake Protocol_Extensions_Cookie,Stateless Server Behavior,"  
When a server is operating statelessly, it may receive an unprotected record of type change_cipher_spec between the first and second ClientHello (see Section 5). Since the server is not storing any state, this will appear as if it were the first message received. Servers operating statelessly MUST ignore these records.  
",1,<SRV-MSG-PROC> <1> (Servers operating statelessly MUST ignore unprotected change_cipher_spec records received between the first and second ClientHello) + <CLI-MSG-CONST> <0> (Clients SHOULD be aware that servers operating statelessly will not process change_cipher_spec records),<SRV-MSG-PROC> <1> (Servers operating statelessly MUST ignore unprotected change_cipher_spec records received between the first and second ClientHello) + <CLI-MSG-CONST> <0> (Clients SHOULD be aware that servers operating statelessly will not process change_cipher_spec records),"{'classification_result': '0', 'MQD': 'No specific message ordering requirements or dependencies identified.', 'CRA': 'No relation to ClientHello message or its contents.'}",0,No specific message ordering requirements or dependencies identified.,No relation to ClientHello message or its contents.
66,Section: 4.2.3.. Handshake Protocol_Extensions_Signature Algorithms,Signature Algorithms Overview,"TLS 1.3 provides two extensions for indicating which signature algorithms may be used in digital signatures. The ""signature_algorithms_cert"" extension applies to signatures in certificates, while the ""signature_algorithms"" extension applies to signatures in CertificateVerify messages. If no ""signature_algorithms_cert"" extension is present, the ""signature_algorithms"" extension also applies to signatures in certificates. Clients must send the ""signature_algorithms"" extension for the server to authenticate via a certificate; if not sent, the server must abort the handshake with a ""missing_extension"" alert.",1,"<CLI-MSG-CONST> <1> (Clients MUST send the ""signature_algorithms"" extension for server authentication via a certificate) + <SRV-MSG-PROC> <1> (Servers MUST abort the handshake with a ""missing_extension"" alert if the ""signature_algorithms"" extension is not present)  
<SRV-MSG-CONST> <0> (Servers MAY apply the ""signature_algorithms"" extension to signatures in certificates if no ""signature_algorithms_cert"" extension is present) + <CLI-MSG-PROC> <0> (Clients MUST understand that if ""signature_algorithms_cert"" is absent, ""signature_algorithms"" applies to certificate signatures)","<CLI-MSG-CONST> <1> (Clients MUST send the ""signature_algorithms"" extension for server authentication via a certificate) + <SRV-MSG-PROC> <1> (Servers MUST abort the handshake with a ""missing_extension"" alert if the ""signature_algorithms"" extension is not present)","{'classification_result': '1', 'MQD': 'No specific message ordering or dependencies required.', 'CRA': 'Directly relates to ClientHello through the ""signature_algorithms"" extension.'}",1,No specific message ordering or dependencies required.,"Directly relates to ClientHello through the ""signature_algorithms"" extension."
71,Section: 4.2.3.. Handshake Protocol_Extensions_Signature Algorithms,TLS 1.2 Compatibility,"In TLS 1.2, this extension is defined differently, allowing clients to omit it. TLS 1.2's extension contained hash/signature pairs encoded in two octets, and implementations must accept signatures from any curve advertised in the ""supported_groups"" extension. RSASSA-PSS is mandatory in TLS 1.3, and implementations must accept it even when negotiating TLS 1.2.",1,"<CLI-MSG-CONST> <1> (Clients MUST include the ""signature_algorithms"" extension in TLS 1.3) + <SRV-MSG-PROC> <0> (Servers MUST accept the ""signature_algorithms"" extension even if negotiating with TLS 1.2)  
<SRV-MSG-PROC> <1> (Servers MUST accept RSASSA-PSS signatures during TLS 1.3 negotiations) + <CLI-MSG-PROC> <0> (Clients MUST provide RSASSA-PSS signatures when negotiating TLS 1.3)","<CLI-MSG-CONST> <1> (Clients MUST include the ""signature_algorithms"" extension in TLS 1.3) + <SRV-MSG-PROC> <0> (Servers MUST accept the ""signature_algorithms"" extension even if negotiating with TLS 1.2)","{'classification_result': '1', 'MQD': 'No specific message ordering or dependencies required.', 'CRA': 'Directly relates to ClientHello through the inclusion of the ""signature_algorithms"" extension.'}",1,No specific message ordering or dependencies required.,"Directly relates to ClientHello through the inclusion of the ""signature_algorithms"" extension."
79,Section: 4.2.5.. Handshake Protocol_Extensions_OID Filters,Certificate Extension Matching Rules,"PKIX RFCs define a variety of certificate extension OIDs and their corresponding value types. Depending on the type, matching certificate extension values are not necessarily bitwise-equal. It is expected that TLS implementations will rely on their PKI libraries to perform certificate selection using certificate extension OIDs. This document defines matching rules for two standard certificate extensions defined in [RFC5280]:
- The Key Usage extension in a certificate matches the request when all key usage bits asserted in the request are also asserted in the Key Usage certificate extension.
- The Extended Key Usage extension in a certificate matches the request when all key purpose OIDs present in the request are also found in the Extended Key Usage certificate extension. The special anyExtendedKeyUsage OID MUST NOT be used in the request. 
Separate specifications may define matching rules for other certificate extensions.",1,"<SRV-MSG-PROC> <1> (Servers MUST rely on their PKI libraries to perform certificate selection using certificate extension OIDs) + <CLI-MSG-CONST> <1> (Clients MUST ensure that all key usage bits asserted in the request are also asserted in the Key Usage certificate extension for a match)
<SRV-MSG-PROC> <1> (Servers MUST verify that all key purpose OIDs present in the request are found in the Extended Key Usage certificate extension for a match) + <CLI-MSG-CONST> <1> (Clients MUST NOT use the special anyExtendedKeyUsage OID in the request)",<SRV-MSG-PROC> <1> (Servers MUST rely on their PKI libraries to perform certificate selection using certificate extension OIDs) + <CLI-MSG-CONST> <1> (Clients MUST ensure that all key usage bits asserted in the request are also asserted in the Key Usage certificate extension for a match),"{'classification_result': '0', 'MQD': 'No specific message ordering or dependencies required.', 'CRA': 'No relation to ClientHello message or its contents.'}",0,No specific message ordering or dependencies required.,No relation to ClientHello message or its contents.
,Section: 4.2.5.. Handshake Protocol_Extensions_OID Filters,Certificate Extension Matching Rules,"PKIX RFCs define a variety of certificate extension OIDs and their corresponding value types. Depending on the type, matching certificate extension values are not necessarily bitwise-equal. It is expected that TLS implementations will rely on their PKI libraries to perform certificate selection using certificate extension OIDs. This document defines matching rules for two standard certificate extensions defined in [RFC5280]:
- The Key Usage extension in a certificate matches the request when all key usage bits asserted in the request are also asserted in the Key Usage certificate extension.
- The Extended Key Usage extension in a certificate matches the request when all key purpose OIDs present in the request are also found in the Extended Key Usage certificate extension. The special anyExtendedKeyUsage OID MUST NOT be used in the request. 
Separate specifications may define matching rules for other certificate extensions.",,,<SRV-MSG-PROC> <1> (Servers MUST verify that all key purpose OIDs present in the request are found in the Extended Key Usage certificate extension for a match) + <CLI-MSG-CONST> <1> (Clients MUST NOT use the special anyExtendedKeyUsage OID in the request),"{'classification_result': '0', 'MQD': 'No specific message ordering requirements or dependencies present.', 'CRA': 'No relation to ClientHello message or its contents.'}",0,No specific message ordering requirements or dependencies present.,No relation to ClientHello message or its contents.
80,Section: 4.2.6.. Handshake Protocol_Extensions_Post-Handshake Client Authentication,Post-Handshake Authentication Extension,"The ""post_handshake_auth"" extension is used to indicate that a client is willing to perform post-handshake authentication (Section 4.6.2). Servers MUST NOT send a post-handshake CertificateRequest to clients which do not offer this extension. Servers MUST NOT send this extension.",1,"<CLI-MSG-CONST> <1> (Clients MUST include the ""post_handshake_auth"" extension to indicate willingness for post-handshake authentication) + <SRV-MSG-PROC> <1> (Servers MUST NOT send a CertificateRequest to clients that do not offer the ""post_handshake_auth"" extension)  
<SRV-MSG-CONST> <1> (Servers MUST NOT send the ""post_handshake_auth"" extension)","<CLI-MSG-CONST> <1> (Clients MUST include the ""post_handshake_auth"" extension to indicate willingness for post-handshake authentication) + <SRV-MSG-PROC> <1> (Servers MUST NOT send a CertificateRequest to clients that do not offer the ""post_handshake_auth"" extension)","{'classification_result': '1', 'MQD': 'No specific message ordering or dependencies required; the rule does not indicate a temporal relationship with respect to the ClientHello message.', 'CRA': 'Directly relates to ClientHello through the requirement to include the ""post_handshake_auth"" extension.'}",1,No specific message ordering or dependencies required; the rule does not indicate a temporal relationship with respect to the ClientHello message.,"Directly relates to ClientHello through the requirement to include the ""post_handshake_auth"" extension."
99,Section: 4.2.9.. Handshake Protocol_Extensions_Pre-Shared Key Exchange Modes,PSK Key Exchange Modes Extension,"In order to use PSKs, clients MUST also send a ""psk_key_exchange_modes"" extension. The semantics of this extension are that the client only supports the use of PSKs with these modes, which restricts both the use of PSKs offered in this ClientHello and those which the server might supply via NewSessionTicket. A client MUST provide a ""psk_key_exchange_modes"" extension if it offers a ""pre_shared_key"" extension. If clients offer ""pre_shared_key"" without a ""psk_key_exchange_modes"" extension, servers MUST abort the handshake. Servers MUST NOT select a key exchange mode that is not listed by the client. This extension also restricts the modes for use with PSK resumption. Servers SHOULD NOT send NewSessionTicket with tickets that are not compatible with the advertised modes; however, if a server does so, the impact will just be that the client's attempts at resumption fail. The server MUST NOT send a ""psk_key_exchange_modes"" extension.",1,"<CLI-MSG-CONST> <1> (Clients MUST send a ""psk_key_exchange_modes"" extension if they offer a ""pre_shared_key"" extension) + <SRV-MSG-PROC> <1> (Servers MUST abort the handshake if ""pre_shared_key"" is offered without a ""psk_key_exchange_modes"" extension)  
<CLI-MSG-CONST> <1> (Clients MUST restrict PSK usage to modes listed in the ""psk_key_exchange_modes"" extension) + <SRV-MSG-PROC> <1> (Servers MUST NOT select a key exchange mode not listed by the client)  
<SRV-MSG-PROC> <0> (Servers SHOULD NOT send NewSessionTicket with incompatible tickets, but if they do, only resumption attempts will fail) + <SRV-MSG-CONST> <0> (Servers MUST NOT send a ""psk_key_exchange_modes"" extension)","<CLI-MSG-CONST> <1> (Clients MUST send a ""psk_key_exchange_modes"" extension if they offer a ""pre_shared_key"" extension) + <SRV-MSG-PROC> <1> (Servers MUST abort the handshake if ""pre_shared_key"" is offered without a ""psk_key_exchange_modes"" extension)","{'classification_result': '1', 'MQD': 'No specific message ordering or dependencies required.', 'CRA': 'Directly relates to ClientHello through the ""pre_shared_key"" extension, as it must be included in the ClientHello.'}",1,No specific message ordering or dependencies required.,"Directly relates to ClientHello through the ""pre_shared_key"" extension, as it must be included in the ClientHello."
,Section: 4.2.9.. Handshake Protocol_Extensions_Pre-Shared Key Exchange Modes,PSK Key Exchange Modes Extension,"In order to use PSKs, clients MUST also send a ""psk_key_exchange_modes"" extension. The semantics of this extension are that the client only supports the use of PSKs with these modes, which restricts both the use of PSKs offered in this ClientHello and those which the server might supply via NewSessionTicket. A client MUST provide a ""psk_key_exchange_modes"" extension if it offers a ""pre_shared_key"" extension. If clients offer ""pre_shared_key"" without a ""psk_key_exchange_modes"" extension, servers MUST abort the handshake. Servers MUST NOT select a key exchange mode that is not listed by the client. This extension also restricts the modes for use with PSK resumption. Servers SHOULD NOT send NewSessionTicket with tickets that are not compatible with the advertised modes; however, if a server does so, the impact will just be that the client's attempts at resumption fail. The server MUST NOT send a ""psk_key_exchange_modes"" extension.",,,"<CLI-MSG-CONST> <1> (Clients MUST restrict PSK usage to modes listed in the ""psk_key_exchange_modes"" extension) + <SRV-MSG-PROC> <1> (Servers MUST NOT select a key exchange mode not listed by the client)","{'classification_result': '1', 'MQD': 'No specific message ordering or dependencies required.', 'CRA': 'Relates to ClientHello through the ""psk_key_exchange_modes"" extension mentioned in the rule text.'}",1,No specific message ordering or dependencies required.,"Relates to ClientHello through the ""psk_key_exchange_modes"" extension mentioned in the rule text."
103,Section: 4.2.10.. Handshake Protocol_Extensions_Early Data Indication,Early Data Use with PSK,"When a PSK is used and early data is allowed for that PSK, the client can send Application Data in its first flight of messages. If the client opts to do so, it MUST supply both the ""pre_shared_key"" and ""early_data"" extensions. The ""extension_data"" field of this extension contains an ""EarlyDataIndication"" value.",1,"<CLI-MSG-CONST> <1> (Clients MUST supply both ""pre_shared_key"" and ""early_data"" extensions when using early data with a PSK) + <SRV-MSG-PROC> <1> (Servers MUST verify the presence of both ""pre_shared_key"" and ""early_data"" extensions in the client's first flight of messages)  
<CLI-MSG-CONST> <1> (Clients MUST include ""EarlyDataIndication"" value in the ""extension_data"" field of the ""early_data"" extension) + <SRV-MSG-PROC> <0> (Servers MAY inspect the ""EarlyDataIndication"" value for compliance with protocol requirements)","<CLI-MSG-CONST> <1> (Clients MUST supply both ""pre_shared_key"" and ""early_data"" extensions when using early data with a PSK) + <SRV-MSG-PROC> <1> (Servers MUST verify the presence of both ""pre_shared_key"" and ""early_data"" extensions in the client's first flight of messages)","{'classification_result': '1', 'MQD': 'No specific message ordering or dependencies required; the statement does not indicate that the ClientHello must follow another specific message.', 'CRA': 'Directly relates to ClientHello through the requirement for ""pre_shared_key"" and ""early_data"" extensions, which must be included in the ClientHello.'}",1,No specific message ordering or dependencies required; the statement does not indicate that the ClientHello must follow another specific message.,"Directly relates to ClientHello through the requirement for ""pre_shared_key"" and ""early_data"" extensions, which must be included in the ClientHello."
,Section: 4.2.10.. Handshake Protocol_Extensions_Early Data Indication,Early Data Use with PSK,"When a PSK is used and early data is allowed for that PSK, the client can send Application Data in its first flight of messages. If the client opts to do so, it MUST supply both the ""pre_shared_key"" and ""early_data"" extensions. The ""extension_data"" field of this extension contains an ""EarlyDataIndication"" value.",,,"<CLI-MSG-CONST> <1> (Clients MUST include ""EarlyDataIndication"" value in the ""extension_data"" field of the ""early_data"" extension) + <SRV-MSG-PROC> <0> (Servers MAY inspect the ""EarlyDataIndication"" value for compliance with protocol requirements)","{'classification_result': '1', 'MQD': 'No specific message ordering or dependencies required.', 'CRA': 'Directly relates to ClientHello through the ""early_data"" extension and the requirement to include ""EarlyDataIndication.""'}",1,No specific message ordering or dependencies required.,"Directly relates to ClientHello through the ""early_data"" extension and the requirement to include ""EarlyDataIndication."""
105,Section: 4.2.10.. Handshake Protocol_Extensions_Early Data Indication,Parameters for 0-RTT Data,"The parameters for the 0-RTT data (version, symmetric cipher suite, Application-Layer Protocol Negotiation (ALPN) protocol, etc.) are those associated with the PSK in use. For externally provisioned PSKs, the associated values are those provisioned along with the key. For PSKs established via a NewSessionTicket message, the associated values are those which were negotiated in the connection which established the PSK. The PSK used to encrypt the early data MUST be the first PSK listed in the client's ""pre_shared_key"" extension.",1,"<CLI-MSG-CONST> <1> (Clients MUST use the first PSK listed in the ""pre_shared_key"" extension to encrypt early data) + <SRV-MSG-PROC> <1> (Servers MUST verify that the PSK used for early data is the first PSK in the client's ""pre_shared_key"" extension)  
<CLI-MSG-CONST> <1> (Parameters for 0-RTT data are those associated with the PSK in use, including version, cipher suite, and ALPN protocol) + <SRV-MSG-PROC> <0> (Servers MUST accept parameters associated with the PSK as provisioned or negotiated)","<CLI-MSG-CONST> <1> (Clients MUST use the first PSK listed in the ""pre_shared_key"" extension to encrypt early data) + <SRV-MSG-PROC> <1> (Servers MUST verify that the PSK used for early data is the first PSK in the client's ""pre_shared_key"" extension)","{'classification_result': '0', 'MQD': 'No specific message ordering requirements; no message queue dependency indicated.', 'CRA': 'No relation to ClientHello message or its contents; focused on PSK usage.'}",0,No specific message ordering requirements; no message queue dependency indicated.,No relation to ClientHello message or its contents; focused on PSK usage.
,Section: 4.2.10.. Handshake Protocol_Extensions_Early Data Indication,Parameters for 0-RTT Data,"The parameters for the 0-RTT data (version, symmetric cipher suite, Application-Layer Protocol Negotiation (ALPN) protocol, etc.) are those associated with the PSK in use. For externally provisioned PSKs, the associated values are those provisioned along with the key. For PSKs established via a NewSessionTicket message, the associated values are those which were negotiated in the connection which established the PSK. The PSK used to encrypt the early data MUST be the first PSK listed in the client's ""pre_shared_key"" extension.",,,"<CLI-MSG-CONST> <1> (Parameters for 0-RTT data are those associated with the PSK in use, including version, cipher suite, and ALPN protocol) + <SRV-MSG-PROC> <0> (Servers MUST accept parameters associated with the PSK as provisioned or negotiated)","{'classification_result': '0', 'MQD': 'No specific message ordering requirements identified.', 'CRA': 'No relation to ClientHello message or its contents.'}",0,No specific message ordering requirements identified.,No relation to ClientHello message or its contents.
108,Section: 4.2.10.. Handshake Protocol_Extensions_Early Data Indication,Server Response Options,"A server which receives an ""early_data"" extension MUST behave in one of three ways:
- Ignore the extension and return a regular 1-RTT response.
- Request the client to send another ClientHello by responding with a HelloRetryRequest.
- Return its own ""early_data"" extension in EncryptedExtensions, indicating it intends to process the early data.",1,"<SRV-MSG-PROC> <1> (Servers MUST choose one of three behaviors upon receiving an ""early_data"" extension: ignore it and return a regular 1-RTT response, request a new ClientHello via HelloRetryRequest, or return their own ""early_data"" extension in EncryptedExtensions) + <CLI-MSG-CONST> <0> (Clients MAY expect one of these three server responses when including an ""early_data"" extension)","<SRV-MSG-PROC> <1> (Servers MUST choose one of three behaviors upon receiving an ""early_data"" extension: ignore it and return a regular 1-RTT response, request a new ClientHello via HelloRetryRequest, or return their own ""early_data"" extension in EncryptedExtensions) + <CLI-MSG-CONST> <0> (Clients MAY expect one of these three server responses when including an ""early_data"" extension)","{'classification_result': '0', 'MQD': 'No specific message ordering requirements or dependencies indicated.', 'CRA': 'No relation to ClientHello message or its contents; the analysis focuses on server behavior regarding the ""early_data"" extension rather than the ClientHello itself.'}",0,No specific message ordering requirements or dependencies indicated.,"No relation to ClientHello message or its contents; the analysis focuses on server behavior regarding the ""early_data"" extension rather than the ClientHello itself."
116,Section: 4.2.11.. Handshake Protocol_Extensions_Pre-Shared Key Extension,Obfuscated Ticket Age Description,"obfuscated_ticket_age:  An obfuscated version of the age of the key. Section 4.2.11.1 describes how to form this value for identities established via the NewSessionTicket message. For identities established externally, an obfuscated_ticket_age of 0 SHOULD be used, and servers MUST ignore the value.",1,"<CLI-MSG-CONST> <1> (For identities established externally, clients SHOULD set the obfuscated_ticket_age to 0) + <SRV-MSG-PROC> <1> (Servers MUST ignore the obfuscated_ticket_age value when it is 0)  
<CLI-MSG-CONST> <0> (For identities established via NewSessionTicket, clients MUST follow the instructions in Section 4.2.11.1 to form the obfuscated_ticket_age) + <SRV-MSG-PROC> <0> (Servers MUST process obfuscated_ticket_age according to Section 4.2.11.1 for identities established via NewSessionTicket)","<CLI-MSG-CONST> <1> (For identities established externally, clients SHOULD set the obfuscated_ticket_age to 0) + <SRV-MSG-PROC> <1> (Servers MUST ignore the obfuscated_ticket_age value when it is 0)","{'classification_result': '0', 'MQD': 'No specific message ordering requirements or dependencies indicated.', 'CRA': 'No relation to ClientHello message or its contents.'}",0,No specific message ordering requirements or dependencies indicated.,No relation to ClientHello message or its contents.
,Section: 4.2.11.. Handshake Protocol_Extensions_Pre-Shared Key Extension,Obfuscated Ticket Age Description,"obfuscated_ticket_age:  An obfuscated version of the age of the key. Section 4.2.11.1 describes how to form this value for identities established via the NewSessionTicket message. For identities established externally, an obfuscated_ticket_age of 0 SHOULD be used, and servers MUST ignore the value.",,,"<CLI-MSG-CONST> <0> (For identities established via NewSessionTicket, clients MUST follow the instructions in Section 4.2.11.1 to form the obfuscated_ticket_age) + <SRV-MSG-PROC> <0> (Servers MUST process obfuscated_ticket_age according to Section 4.2.11.1 for identities established via NewSessionTicket)","{'classification_result': '0', 'MQD': 'No specific message ordering requirements or dependencies indicated.', 'CRA': 'No relation to ClientHello message or its contents.'}",0,No specific message ordering requirements or dependencies indicated.,No relation to ClientHello message or its contents.
,Section: 4.2.11.. Handshake Protocol_Extensions_Pre-Shared Key Extension,PSK Hash Algorithm Requirements,"Each PSK is associated with a single Hash algorithm. For PSKs established via the ticket mechanism (Section 4.6.1), this is the KDF Hash algorithm on the connection where the ticket was established. For externally established PSKs, the Hash algorithm MUST be set when the PSK is established or default to SHA-256 if no such algorithm is defined. The server MUST ensure that it selects a compatible PSK (if any) and cipher suite.",,,<CLI-MSG-CONST> <1> (Clients MUST ensure that the Hash algorithm is set when establishing externally defined PSKs) + <SRV-MSG-PROC> <0> (Servers MUST verify the Hash algorithm compatibility when selecting a PSK),"{'classification_result': '0', 'MQD': 'No specific message ordering or dependencies required.', 'CRA': 'No relation to ClientHello message or its contents.'}",0,No specific message ordering or dependencies required.,No relation to ClientHello message or its contents.
126,Section: 4.2.11.. Handshake Protocol_Extensions_Pre-Shared Key Extension,Extension Position Requirement,"The ""pre_shared_key"" extension MUST be the last extension in the ClientHello. Servers MUST check that it is the last extension and otherwise fail the handshake with an ""illegal_parameter"" alert.",1,"<CLI-MSG-CONST> <1> (Clients MUST place the ""pre_shared_key"" extension as the last extension in the ClientHello) + <SRV-MSG-PROC> <1> (Servers MUST verify that the ""pre_shared_key"" extension is the last extension in ClientHello and fail the handshake with an ""illegal_parameter"" alert if it is not)","<CLI-MSG-CONST> <1> (Clients MUST place the ""pre_shared_key"" extension as the last extension in the ClientHello) + <SRV-MSG-PROC> <1> (Servers MUST verify that the ""pre_shared_key"" extension is the last extension in ClientHello and fail the handshake with an ""illegal_parameter"" alert if it is not)","{'classification_result': '1', 'MQD': 'No specific message ordering or dependencies required beyond the placement of the extension.', 'CRA': 'Directly relates to ClientHello through the requirement for the ""pre_shared_key"" extension.'}",1,No specific message ordering or dependencies required beyond the placement of the extension.,"Directly relates to ClientHello through the requirement for the ""pre_shared_key"" extension."
,Section: 4.4.2.. Handshake Protocol_Authentication Messages_Certificate,Certificate Message Purpose,"This message conveys the endpoint's certificate chain to the peer. The server MUST send a Certificate message whenever the agreed-upon key exchange method uses certificates for authentication (this includes all key exchange methods defined in this document except PSK). The client MUST send a Certificate message if and only if the server has requested client authentication via a CertificateRequest message (Section 4.3.2). If the server requests client authentication but no suitable certificate is available, the client MUST send a Certificate message containing no certificates (i.e., with the ""certificate_list"" field having length 0). A Finished message MUST be sent regardless of whether the Certificate message is empty.",,,"<CLI-MSG-CONST><1>(Clients MUST send an empty Certificate message if no suitable certificate is available when client authentication is requested) + <SRV-MSG-PROC><1>(Servers MUST accept an empty Certificate message with a ""certificate_list"" field of length 0)","{'classification_result': '0', 'MQD': 'No specific message ordering or dependencies required.', 'CRA': 'No relation to ClientHello message or its contents.'}",0,No specific message ordering or dependencies required.,No relation to ClientHello message or its contents.
,Section: 4.4.2.1.. Handshake Protocol_Authentication Messages_Certificate_OCSP Status and SCT Extensions,Deprecated Status Request v2,"The status_request_v2 extension (RFC6961) is deprecated. TLS 1.3 servers MUST NOT act upon its presence or information in it when processing ClientHello messages; in particular, they MUST NOT send the status_request_v2 extension in the EncryptedExtensions, CertificateRequest, or Certificate messages. TLS 1.3 servers MUST be able to process ClientHello messages that include it, as it MAY be sent by clients that wish to use it in earlier protocol versions.",,,<SRV-MSG-PROC> <0> (Servers MUST be able to process ClientHello messages that include the deprecated status_request_v2 extension) + <CLI-MSG-CONST> <0> (Clients MAY send the status_request_v2 extension in ClientHello messages for earlier protocol versions),"{'classification_result': '0', 'MQD': 'No specific message ordering or dependencies required.', 'CRA': 'No relation to ClientHello message or its contents, as the statement is about optional behavior for earlier protocol versions.'}",0,No specific message ordering or dependencies required.,"No relation to ClientHello message or its contents, as the statement is about optional behavior for earlier protocol versions."
166,Section: 4.4.2.3.. Handshake Protocol_Authentication Messages_Certificate_Client Certificate Selection,Client Certificate Rules,"The following rules apply to certificates sent by the client:

- The certificate type MUST be X.509v3 [RFC5280], unless explicitly negotiated otherwise (e.g., [RFC7250]).
- If the ""certificate_authorities"" extension in the CertificateRequest message was present, at least one of the certificates in the certificate chain SHOULD be issued by one of the listed CAs.
- The certificates MUST be signed using an acceptable signature algorithm, as described in Section 4.3.2. Note that this relaxes the constraints on certificate-signing algorithms found in prior versions of TLS.
- If the CertificateRequest message contained a non-empty ""oid_filters"" extension, the end-entity certificate MUST match the extension OIDs that are recognized by the client, as described in Section 4.2.5.",1,"<CLI-MSG-CONST> <1> (Clients MUST use X.509v3 certificates unless negotiated otherwise) + <SRV-MSG-PROC> <1> (Servers MUST verify that the certificate type is X.509v3 or as negotiated)

<CLI-MSG-CONST> <0> (Clients SHOULD include at least one certificate issued by a CA listed in the ""certificate_authorities"" extension if present) + <SRV-MSG-PROC> <0> (Servers SHOULD check that at least one certificate in the chain is from the listed CAs)

<CLI-MSG-CONST> <1> (Clients MUST sign certificates using an acceptable signature algorithm) + <SRV-MSG-PROC> <1> (Servers MUST verify that the certificate's signature algorithm is acceptable)

<CLI-MSG-CONST> <1> (Clients MUST ensure that the end-entity certificate matches the OIDs specified in the ""oid_filters"" extension, if present) + <SRV-MSG-PROC> <1> (Servers MUST verify the end-entity certificate against the recognized OIDs in the ""oid_filters"" extension)",<CLI-MSG-CONST> <1> (Clients MUST use X.509v3 certificates unless negotiated otherwise) + <SRV-MSG-PROC> <1> (Servers MUST verify that the certificate type is X.509v3 or as negotiated),"{'classification_result': '0', 'MQD': 'No specific message ordering requirements are mentioned.', 'CRA': 'No relation to ClientHello message or its contents.'}",0,No specific message ordering requirements are mentioned.,No relation to ClientHello message or its contents.
,Section: 4.4.2.3.. Handshake Protocol_Authentication Messages_Certificate_Client Certificate Selection,Client Certificate Rules,"The following rules apply to certificates sent by the client:

- The certificate type MUST be X.509v3 [RFC5280], unless explicitly negotiated otherwise (e.g., [RFC7250]).
- If the ""certificate_authorities"" extension in the CertificateRequest message was present, at least one of the certificates in the certificate chain SHOULD be issued by one of the listed CAs.
- The certificates MUST be signed using an acceptable signature algorithm, as described in Section 4.3.2. Note that this relaxes the constraints on certificate-signing algorithms found in prior versions of TLS.
- If the CertificateRequest message contained a non-empty ""oid_filters"" extension, the end-entity certificate MUST match the extension OIDs that are recognized by the client, as described in Section 4.2.5.",,,<CLI-MSG-CONST> <1> (Clients MUST sign certificates using an acceptable signature algorithm) + <SRV-MSG-PROC> <1> (Servers MUST verify that the certificate's signature algorithm is acceptable),"{'classification_result': '0', 'MQD': 'No specific message ordering requirements mentioned.', 'CRA': 'No relation to ClientHello message or its contents.'}",0,No specific message ordering requirements mentioned.,No relation to ClientHello message or its contents.
,Section: 4.4.2.3.. Handshake Protocol_Authentication Messages_Certificate_Client Certificate Selection,Client Certificate Rules,"The following rules apply to certificates sent by the client:

- The certificate type MUST be X.509v3 [RFC5280], unless explicitly negotiated otherwise (e.g., [RFC7250]).
- If the ""certificate_authorities"" extension in the CertificateRequest message was present, at least one of the certificates in the certificate chain SHOULD be issued by one of the listed CAs.
- The certificates MUST be signed using an acceptable signature algorithm, as described in Section 4.3.2. Note that this relaxes the constraints on certificate-signing algorithms found in prior versions of TLS.
- If the CertificateRequest message contained a non-empty ""oid_filters"" extension, the end-entity certificate MUST match the extension OIDs that are recognized by the client, as described in Section 4.2.5.",,,"<CLI-MSG-CONST> <1> (Clients MUST ensure that the end-entity certificate matches the OIDs specified in the ""oid_filters"" extension, if present) + <SRV-MSG-PROC> <1> (Servers MUST verify the end-entity certificate against the recognized OIDs in the ""oid_filters"" extension)","{'classification_result': '0', 'MQD': 'No specific message ordering requirements; no dependencies on the sequence of messages.', 'CRA': 'No relation to ClientHello message or its contents; focuses on certificate validation.'}",0,No specific message ordering requirements; no dependencies on the sequence of messages.,No relation to ClientHello message or its contents; focuses on certificate validation.
,Section: 4.4.3.. Handshake Protocol_Authentication Messages_Certificate Verify,Signature Algorithm Requirements,"If the CertificateVerify message is sent by a server, the signature algorithm MUST be one offered in the client's ""signature_algorithms"" extension unless no valid certificate chain can be produced without unsupported algorithms (see Section 4.2.3). If sent by a client, the signature algorithm used in the signature MUST be one of those present in the supported_signature_algorithms field of the ""signature_algorithms"" extension in the CertificateRequest message. The signature algorithm MUST also be compatible with the key in the sender's end-entity certificate.",,,"<CLI-MSG-CONST> <1> (Clients MUST use a signature algorithm that is present in the supported_signature_algorithms field of the ""signature_algorithms"" extension in the CertificateRequest message for the CertificateVerify message) + <SRV-MSG-PROC> <1> (Servers MUST verify that the signature algorithm used in the CertificateVerify message is compatible with the key in the sender's end-entity certificate)","{'classification_result': '0', 'MQD': 'No specific message ordering or dependencies required.', 'CRA': 'No relation to ClientHello message or its contents.'}",0,No specific message ordering or dependencies required.,No relation to ClientHello message or its contents.
175,Section: 4.4.3.. Handshake Protocol_Authentication Messages_Certificate Verify,RSA Signature Requirements,"RSA signatures MUST use an RSASSA-PSS algorithm, regardless of whether RSASSA-PKCS1-v1_5 algorithms appear in ""signature_algorithms"". The SHA-1 algorithm MUST NOT be used in any signatures of CertificateVerify messages. All SHA-1 signature algorithms in this specification are defined solely for use in legacy certificates and are not valid for CertificateVerify signatures.",1,"<CLI-MSG-CONST> <1> (Clients MUST use RSASSA-PSS algorithm for RSA signatures in CertificateVerify messages) + <SRV-MSG-PROC> <1> (Servers MUST verify that RSA signatures in CertificateVerify messages use RSASSA-PSS algorithm)

<CLI-MSG-CONST> <1> (Clients MUST NOT use SHA-1 algorithm in signatures of CertificateVerify messages) + <SRV-MSG-PROC> <1> (Servers MUST reject CertificateVerify messages containing SHA-1 signatures)",<CLI-MSG-CONST> <1> (Clients MUST use RSASSA-PSS algorithm for RSA signatures in CertificateVerify messages) + <SRV-MSG-PROC> <1> (Servers MUST verify that RSA signatures in CertificateVerify messages use RSASSA-PSS algorithm),"{'classification_result': '0', 'MQD': 'No specific message ordering requirements or dependencies related to message queue.', 'CRA': 'No relation to ClientHello message or its contents.'}",0,No specific message ordering requirements or dependencies related to message queue.,No relation to ClientHello message or its contents.
,Section: 4.4.3.. Handshake Protocol_Authentication Messages_Certificate Verify,RSA Signature Requirements,"RSA signatures MUST use an RSASSA-PSS algorithm, regardless of whether RSASSA-PKCS1-v1_5 algorithms appear in ""signature_algorithms"". The SHA-1 algorithm MUST NOT be used in any signatures of CertificateVerify messages. All SHA-1 signature algorithms in this specification are defined solely for use in legacy certificates and are not valid for CertificateVerify signatures.",,,<CLI-MSG-CONST> <1> (Clients MUST NOT use SHA-1 algorithm in signatures of CertificateVerify messages) + <SRV-MSG-PROC> <1> (Servers MUST reject CertificateVerify messages containing SHA-1 signatures),"{'classification_result': '0', 'MQD': 'No specific message ordering requirements or dependencies related to message queue.', 'CRA': 'No relation to ClientHello message or its contents.'}",0,No specific message ordering requirements or dependencies related to message queue.,No relation to ClientHello message or its contents.
187,Section: 4.5.. Handshake Protocol_End of Early Data,Message Sending Rules,"If the server sent an ""early_data"" extension in EncryptedExtensions, the client MUST send an EndOfEarlyData message after receiving the server Finished. If the server does not send an ""early_data"" extension in EncryptedExtensions, then the client MUST NOT send an EndOfEarlyData message. This message indicates that all 0-RTT application_data messages, if any, have been transmitted and that the following records are protected under handshake traffic keys.",1,"<CLI-MSG-CONST> <1> (Clients MUST send an EndOfEarlyData message after receiving the server's Finished if the server sent an ""early_data"" extension in EncryptedExtensions) + <SRV-MSG-PROC> <1> (Servers MUST verify that clients send an EndOfEarlyData message when the ""early_data"" extension is present)

<CLI-MSG-CONST> <1> (Clients MUST NOT send an EndOfEarlyData message if the server did not send an ""early_data"" extension in EncryptedExtensions) + <SRV-MSG-PROC> <1> (Servers MUST reject messages if clients send an EndOfEarlyData message without the ""early_data"" extension being present)","<CLI-MSG-CONST> <1> (Clients MUST send an EndOfEarlyData message after receiving the server's Finished if the server sent an ""early_data"" extension in EncryptedExtensions) + <SRV-MSG-PROC> <1> (Servers MUST verify that clients send an EndOfEarlyData message when the ""early_data"" extension is present)","{'classification_result': '2', 'MQD': ""Clients MUST send an EndOfEarlyData message after receiving the server's Finished, indicating a clear message queue dependency."", 'CRA': 'The rule is indirectly related to ClientHello through the ""early_data"" extension, but does not explicitly mention ClientHello itself.'}",2,"Clients MUST send an EndOfEarlyData message after receiving the server's Finished, indicating a clear message queue dependency.","The rule is indirectly related to ClientHello through the ""early_data"" extension, but does not explicitly mention ClientHello itself."
,Section: 4.5.. Handshake Protocol_End of Early Data,Message Sending Rules,"If the server sent an ""early_data"" extension in EncryptedExtensions, the client MUST send an EndOfEarlyData message after receiving the server Finished. If the server does not send an ""early_data"" extension in EncryptedExtensions, then the client MUST NOT send an EndOfEarlyData message. This message indicates that all 0-RTT application_data messages, if any, have been transmitted and that the following records are protected under handshake traffic keys.",,,"<CLI-MSG-CONST> <1> (Clients MUST NOT send an EndOfEarlyData message if the server did not send an ""early_data"" extension in EncryptedExtensions) + <SRV-MSG-PROC> <1> (Servers MUST reject messages if clients send an EndOfEarlyData message without the ""early_data"" extension being present)","{'classification_result': '0', 'MQD': 'No specific message ordering or dependencies required.', 'CRA': 'No relation to ClientHello message or its contents.'}",0,No specific message ordering or dependencies required.,No relation to ClientHello message or its contents.
193,Section: 4.6.1.. Handshake Protocol_Post-Handshake Messages_New Session Ticket Message,Ticket Resumption Conditions,"Any ticket MUST only be resumed with a cipher suite that has the same KDF hash algorithm as that used to establish the original connection. Clients MUST only resume if the new SNI value is valid for the server certificate presented in the original session and SHOULD only resume if the SNI value matches the one used in the original session. If such an indication is provided (externally or by any other means), clients MAY resume with a different SNI value.",1,"<CLI-MSG-CONST> <1> (Clients MUST only resume a ticket with a cipher suite that has the same KDF hash algorithm as the original connection) + <SRV-MSG-PROC> <1> (Servers MUST verify that the cipher suite used for ticket resumption matches the original KDF hash algorithm)

<CLI-MSG-PROC> <1> (Clients MUST verify that the new SNI value is valid for the server certificate presented in the original session) + <SRV-MSG-PROC> <1> (Servers MUST validate the new SNI value against the original session's server certificate)

<CLI-MSG-PROC> <0> (Clients SHOULD only resume if the new SNI value matches the one used in the original session) + <SRV-MSG-PROC> <0> (Servers SHOULD prefer resumption with matching SNI values for optimal security)

<CLI-MSG-PROC> <0> (Clients MAY resume with a different SNI value if indicated) + <SRV-MSG-PROC> <0> (Servers MAY accept resumption with a different SNI value if indicated externally)",<CLI-MSG-CONST> <1> (Clients MUST only resume a ticket with a cipher suite that has the same KDF hash algorithm as the original connection) + <SRV-MSG-PROC> <1> (Servers MUST verify that the cipher suite used for ticket resumption matches the original KDF hash algorithm),"{'classification_result': '0', 'MQD': 'No specific message ordering or dependencies required.', 'CRA': 'No relation to ClientHello message or its contents.'}",0,No specific message ordering or dependencies required.,No relation to ClientHello message or its contents.
194,Section: 4.6.1.. Handshake Protocol_Post-Handshake Messages_New Session Ticket Message,SNI Reporting,"On resumption, if reporting an SNI value to the calling application, implementations MUST use the value sent in the resumption ClientHello rather than the value sent in the previous session. Note that if a server implementation declines all PSK identities with different SNI values, these two values are always the same.",1,"<CLI-MSG-CONST> <1> (On resumption, clients MUST use the SNI value from the resumption ClientHello when reporting to the calling application) + <SRV-MSG-PROC> <0> (Servers MUST ensure that SNI values are consistent when declining all PSK identities)","<CLI-MSG-CONST> <1> (On resumption, clients MUST use the SNI value from the resumption ClientHello when reporting to the calling application) + <SRV-MSG-PROC> <0> (Servers MUST ensure that SNI values are consistent when declining all PSK identities)","{'classification_result': '1', 'MQD': 'No specific message ordering or dependencies required.', 'CRA': 'Directly relates to ClientHello through the use of the SNI value in the resumption ClientHello.'}",1,No specific message ordering or dependencies required.,Directly relates to ClientHello through the use of the SNI value in the resumption ClientHello.
205,Section: 4.6.2.. Handshake Protocol_Post-Handshake Messages_Post-Handshake Authentication,Client Authentication Requirements,"If the client chooses to authenticate, it MUST send Certificate, CertificateVerify, and Finished. If it declines, it MUST send a Certificate message containing no certificates followed by Finished. All of the client's messages for a given response MUST appear consecutively on the wire with no intervening messages of other types.",1,"<CLI-MSG-CONST> <1> (Clients MUST send Certificate, CertificateVerify, and Finished messages if they choose to authenticate) + <SRV-MSG-PROC> <1> (Servers MUST expect these messages consecutively without intervening message types when client authentication is chosen)  
<CLI-MSG-CONST> <1> (Clients MUST send a Certificate message containing no certificates followed by Finished if they decline to authenticate) + <SRV-MSG-PROC> <1> (Servers MUST expect the decline messages consecutively without intervening message types)  
<CLI-MSG-PROC> <1> (Clients MUST ensure all messages for a given response appear consecutively on the wire) + <SRV-MSG-PROC> <1> (Servers MUST reject any response with intervening message types between client messages)","<CLI-MSG-CONST> <1> (Clients MUST send Certificate, CertificateVerify, and Finished messages if they choose to authenticate) + <SRV-MSG-PROC> <1> (Servers MUST expect these messages consecutively without intervening message types when client authentication is chosen)","{'classification_result': '0', 'MQD': 'No specific message ordering requirements related to ClientHello; the focus is on authentication messages.', 'CRA': 'No relation to ClientHello message or its contents.'}",0,No specific message ordering requirements related to ClientHello; the focus is on authentication messages.,No relation to ClientHello message or its contents.
,Section: 4.6.2.. Handshake Protocol_Post-Handshake Messages_Post-Handshake Authentication,Client Authentication Requirements,"If the client chooses to authenticate, it MUST send Certificate, CertificateVerify, and Finished. If it declines, it MUST send a Certificate message containing no certificates followed by Finished. All of the client's messages for a given response MUST appear consecutively on the wire with no intervening messages of other types.",,,<CLI-MSG-CONST> <1> (Clients MUST send a Certificate message containing no certificates followed by Finished if they decline to authenticate) + <SRV-MSG-PROC> <1> (Servers MUST expect the decline messages consecutively without intervening message types),"{'classification_result': '2', 'MQD': 'Clients are required to send a Certificate message followed by a Finished message, creating a clear message queue dependency.', 'CRA': 'No direct relation to ClientHello message or its contents.'}",2,"Clients are required to send a Certificate message followed by a Finished message, creating a clear message queue dependency.",No direct relation to ClientHello message or its contents.
212,Section: 4.6.3.. Handshake Protocol_Post-Handshake Messages_Key and Initialization Vector Update,Request Update Field,"The request_update field indicates whether the recipient of the KeyUpdate should respond with its own KeyUpdate. If an implementation receives any other value, it MUST terminate the connection with an ""illegal_parameter"" alert.",1,"<CLI-MSG-CONST> <1> (Clients MUST set the request_update field to indicate whether a KeyUpdate response is required) + <SRV-MSG-PROC> <1> (Servers MUST terminate the connection with an ""illegal_parameter"" alert if an invalid request_update value is received)","<CLI-MSG-CONST> <1> (Clients MUST set the request_update field to indicate whether a KeyUpdate response is required) + <SRV-MSG-PROC> <1> (Servers MUST terminate the connection with an ""illegal_parameter"" alert if an invalid request_update value is received)","{'classification_result': '0', 'MQD': 'No specific message ordering requirements or dependencies indicated in the rule text.', 'CRA': 'No relation to ClientHello message or its contents; focuses on KeyUpdate functionality.'}",0,No specific message ordering requirements or dependencies indicated in the rule text.,No relation to ClientHello message or its contents; focuses on KeyUpdate functionality.
216,Section: 4.6.3.. Handshake Protocol_Post-Handshake Messages_Key and Initialization Vector Update,Encryption Requirements,"Both sender and receiver MUST encrypt their KeyUpdate messages with the old keys. Additionally, both sides MUST enforce that a KeyUpdate with the old key is received before accepting any messages encrypted with the new key. Failure to do so may allow message truncation attacks.",1,"<CLI-MSG-CONST> <1> (Clients MUST encrypt their KeyUpdate messages with the old keys) + <SRV-MSG-PROC> <1> (Servers MUST enforce that a KeyUpdate with the old key is received before accepting messages encrypted with the new key)  
<SRV-MSG-PROC> <1> (Servers MUST reject any messages encrypted with the new key until the KeyUpdate with the old key is verified) + <CLI-MSG-PROC> <1> (Clients MUST ensure that receiving the KeyUpdate with the old key occurs before processing messages encrypted with the new key)",<CLI-MSG-CONST> <1> (Clients MUST encrypt their KeyUpdate messages with the old keys) + <SRV-MSG-PROC> <1> (Servers MUST enforce that a KeyUpdate with the old key is received before accepting messages encrypted with the new key),"{'classification_result': '0', 'MQD': 'No specific message ordering or dependencies required; KeyUpdate does not depend on any preceding ClientHello.', 'CRA': 'No relation to ClientHello message or its contents; focuses solely on KeyUpdate messages.'}",0,No specific message ordering or dependencies required; KeyUpdate does not depend on any preceding ClientHello.,No relation to ClientHello message or its contents; focuses solely on KeyUpdate messages.
