index,Section,Title,Content
1,4.. Handshake Protocol,Message Order and Error Handling,"Protocol messages MUST be sent in the order defined in Section 4.4.1 and shown in the diagrams in Section 2. A peer which receives a handshake message in an unexpected order MUST abort the handshake with an ""unexpected_message"" alert."
2,4.1.. Handshake Protocol_Key Exchange Messages,Error Handling,"If a message is received out of order or if an unexpected message type is encountered, the handshake must be aborted with an appropriate alert, such as 'unexpected_message'."
3,4.1.1.. Handshake Protocol_Key Exchange Messages_Cryptographic Negotiation,Security Considerations,The cryptographic negotiation must ensure that both parties agree on secure parameters to prevent vulnerabilities such as downgrade attacks. Implementations should validate the selected cipher suite and key exchange mechanism to ensure they meet security requirements.
4,4.1.3.. Handshake Protocol_Key Exchange Messages_Server Hello,Legacy Version Field,"In previous versions of TLS, this field was used for version negotiation and represented the selected version number for the connection. Unfortunately, some middleboxes fail when presented with new values. In TLS 1.3, the TLS server indicates its version using the ""supported_versions"" extension (Section 4.2.1), and the legacy_version field MUST be set to 0x0303, which is the version number for TLS 1.2. (See Appendix D for details about backward compatibility.)"
5,4.1.3.. Handshake Protocol_Key Exchange Messages_Server Hello,Random Field Requirements,"32 bytes generated by a secure random number generator. See Appendix C for additional information. The last 8 bytes MUST be overwritten as described below if negotiating TLS 1.2 or TLS 1.1, but the remaining bytes MUST be random. This structure is generated by the server and MUST be generated independently of the ClientHello.random."
6,4.1.3.. Handshake Protocol_Key Exchange Messages_Server Hello,Session ID Echo Requirements,"The contents of the client's legacy_session_id field. Note that this field is echoed even if the client's value corresponded to a cached pre-TLS 1.3 session which the server has chosen not to resume. A client which receives a legacy_session_id_echo field that does not match what it sent in the ClientHello MUST abort the handshake with an ""illegal_parameter"" alert."
7,4.1.3.. Handshake Protocol_Key Exchange Messages_Server Hello,Cipher Suite Selection,"The single cipher suite selected by the server from the list in ClientHello.cipher_suites. A client which receives a cipher suite that was not offered MUST abort the handshake with an ""illegal_parameter"" alert."
8,4.1.3.. Handshake Protocol_Key Exchange Messages_Server Hello,Extensions Requirements,"A list of extensions. The ServerHello MUST only include extensions which are required to establish the cryptographic context and negotiate the protocol version. All TLS 1.3 ServerHello messages MUST contain the ""supported_versions"" extension. Current ServerHello messages additionally contain either the ""pre_shared_key"" extension or the ""key_share"" extension, or both (when using a PSK with (EC)DHE key establishment). Other extensions (see Section 4.2) are sent separately in the EncryptedExtensions message."
9,4.1.3.. Handshake Protocol_Key Exchange Messages_Server Hello,HelloRetryRequest Special Case,"For reasons of backward compatibility with middleboxes (see Appendix D.4), the HelloRetryRequest message uses the same structure as the ServerHello, but with Random set to the special value of the SHA-256 of ""HelloRetryRequest"": CF 21 AD 74 E5 9A 61 11 BE 1D 8C 02 1E 65 B8 91 C2 A2 11 16 7A BB 8C 5E 07 9E 09 E2 C8 A8 33 9C. Upon receiving a message with type server_hello, implementations MUST first examine the Random value and, if it matches this value, process it as described in Section 4.1.4."
10,4.1.3.. Handshake Protocol_Key Exchange Messages_Server Hello,Downgrade Protection Mechanism,TLS 1.3 has a downgrade protection mechanism embedded in the server's random value. TLS 1.3 servers which negotiate TLS 1.2 or below in response to a ClientHello MUST set the last 8 bytes of their Random value specially in their ServerHello.
11,4.1.3.. Handshake Protocol_Key Exchange Messages_Server Hello,Downgrade Values Specifics,"If negotiating TLS 1.2, TLS 1.3 servers MUST set the last 8 bytes of their Random value to the bytes: 44 4F 57 4E 47 52 44 01. If negotiating TLS 1.1 or below, TLS 1.3 servers MUST, and TLS 1.2 servers SHOULD, set the last 8 bytes of their ServerHello.Random value to the bytes: 44 4F 57 4E 47 52 44 00."
12,4.1.3.. Handshake Protocol_Key Exchange Messages_Server Hello,Client Verification Responsibilities,"TLS 1.3 clients receiving a ServerHello indicating TLS 1.2 or below MUST check that the last 8 bytes are not equal to either of these values. TLS 1.2 clients SHOULD also check that the last 8 bytes are not equal to the second value if the ServerHello indicates TLS 1.1 or below. If a match is found, the client MUST abort the handshake with an ""illegal_parameter"" alert."
13,4.1.3.. Handshake Protocol_Key Exchange Messages_Server Hello,Legacy Client Renegotiation,"A legacy TLS client performing renegotiation with TLS 1.2 or prior and which receives a TLS 1.3 ServerHello during renegotiation MUST abort the handshake with a ""protocol_version"" alert. Note that renegotiation is not possible when TLS 1.3 has been negotiated."
14,4.1.4.. Handshake Protocol_Key Exchange Messages_Hello Retry Request,Legacy Version Field,"The legacy_version field MUST be set to 0x0303, which indicates TLS v1.2. This is necessary for compatibility with middleboxes that may not handle newer version numbers."
15,4.1.4.. Handshake Protocol_Key Exchange Messages_Hello Retry Request,Cipher Suite Selection,The cipher_suite field indicates the cipher suite that the server has selected from the list provided in the ClientHello. The client must use this cipher suite in its subsequent ClientHello.
16,4.1.4.. Handshake Protocol_Key Exchange Messages_Hello Retry Request,Compression Method,"The legacy_compression_method field MUST be set to 0, indicating that no compression is used in the connection."
17,4.1.4.. Handshake Protocol_Key Exchange Messages_Hello Retry Request,Extensions Requirements,The extensions field contains a list of extensions that the server requires for the handshake. The Hello Retry Request may include specific extensions that the client must support or modify.
18,4.1.4.. Handshake Protocol_Key Exchange Messages_Hello Retry Request,Processing Hello Retry Request,"Upon receiving a Hello Retry Request, the client must resend its ClientHello message, including the modifications specified by the server. The client must ensure that the parameters match the requirements set forth in the Hello Retry Request."
19,4.2.. Handshake Protocol_Extensions,Extension Response Constraints,"Implementations MUST NOT send extension responses if the remote endpoint did not send the corresponding extension requests, with the exception of the ""cookie"" extension in the HelloRetryRequest. Upon receiving such an extension, an endpoint MUST abort the handshake with an ""unsupported_extension"" alert."
20,4.2.. Handshake Protocol_Extensions,Extension Message Compatibility,"If an implementation receives an extension which it recognizes and which is not specified for the message in which it appears, it MUST abort the handshake with an ""illegal_parameter"" alert."
21,4.2.. Handshake Protocol_Extensions,Extension Order and Uniqueness,"When multiple extensions of different types are present, the extensions MAY appear in any order, with the exception of ""pre_shared_key"" which MUST be the last extension in the ClientHello (but can appear anywhere in the ServerHello extensions block). There MUST NOT be more than one extension of the same type in a given extension block."
22,4.2.1.. Handshake Protocol_Extensions_Supported Versions,Client Behavior,"When sending a ClientHello message, the client MUST include the Supported Versions extension if it wishes to indicate its supported versions. The client lists the versions in descending order of preference."
23,4.2.1.. Handshake Protocol_Extensions_Supported Versions,Error Handling,"If a server receives a ClientHello that includes a Supported Versions extension but does not support any of the versions listed, it MUST abort the handshake with an 'unsupported_version' alert."
24,4.2.2.. Handshake Protocol_Extensions_Cookie,Cookie Extension Purpose,"The Cookie extension is used to provide a mechanism for the server to issue a cookie to the client, which the client must return in subsequent messages. This is primarily used to mitigate denial-of-service attacks by ensuring that the client is legitimate before allocating resources for the handshake."
25,4.2.2.. Handshake Protocol_Extensions_Cookie,Cookie Handling,"When a server receives a ClientHello message, it may choose to respond with a Cookie extension containing a cookie. The client must include this cookie in its next ClientHello message to continue the handshake process."
26,4.2.2.. Handshake Protocol_Extensions_Cookie,Security Considerations,"The use of cookies helps to prevent resource exhaustion attacks by ensuring that the server only allocates resources to clients that have proven their legitimacy. However, care must be taken to ensure that cookies cannot be easily predicted or reused by attackers."
27,4.2.3.. Handshake Protocol_Extensions_Signature Algorithms,Error Handling,"If the server does not support any of the signature schemes offered by the client, it MUST abort the handshake with an 'unsupported_signature_algorithm' alert."
28,4.2.3.. Handshake Protocol_Extensions_Signature Algorithms,Security Considerations,The choice of signature algorithm can have significant security implications. Implementations MUST ensure that they only use signature algorithms that are considered secure and appropriate for the context.
29,4.2.5.. Handshake Protocol_Extensions_OID Filters,OID List Requirements,The oid_list field contains a sequence of OIDs that the client supports. Each OID is represented as an octet string. The server must ensure that any certificate presented includes an OID that matches one from this list.
30,4.2.5.. Handshake Protocol_Extensions_OID Filters,Error Handling,"If the server's certificate does not match any OID in the client's oid_list, the server MUST abort the handshake with an ""unsupported_certificate"" alert."
31,4.2.6.. Handshake Protocol_Extensions_Post-Handshake Client Authentication,Error Handling,"If a client receives a post-handshake authentication request and is unable to provide a valid certificate, it must respond with an appropriate alert message. The server should handle such cases gracefully to maintain the integrity of the session."
32,4.2.7.. Handshake Protocol_Extensions_Supported Groups,Error Handling,"If the server does not support any of the groups listed in the Supported Groups extension, it MUST abort the handshake with an 'unsupported_extension' alert."
33,4.2.8.. Handshake Protocol_Extensions_Key Share,Client Behavior,"The client MUST include a Key Share extension in its ClientHello message, containing at least one key share for a group it supports. The server will select one of the key shares provided."
34,4.2.8.. Handshake Protocol_Extensions_Key Share,Key Share Extension Constraints,"The Key Share extension MUST only be used with key exchange algorithms that require it. If a server receives a Key Share extension that it cannot use, it MUST abort the handshake with an ""unsupported_extension"" alert."
35,4.2.8.. Handshake Protocol_Extensions_Key Share,Security Considerations,"Implementations MUST ensure that the key shares provided are valid and correspond to the specified named groups. Invalid key shares can lead to security vulnerabilities, including man-in-the-middle attacks."
36,4.2.8.1.. Handshake Protocol_Extensions_Key Share_Diffie-Hellman Parameters,Key Share Requirements,The Key Share extension MUST be included in the ClientHello message. The server selects a key share from the client's offered key shares and includes its own key share in the ServerHello message.
37,4.2.8.1.. Handshake Protocol_Extensions_Key Share_Diffie-Hellman Parameters,Group Selection and Compatibility,"The server MUST select a key share from the client's list that matches one of the groups it supports. If no compatible group is found, the server MUST abort the handshake with an 'unsupported_key_share' alert."
38,4.2.8.1.. Handshake Protocol_Extensions_Key Share_Diffie-Hellman Parameters,Security Considerations,The Key Share extension is critical for ensuring the security of the key exchange process. Implementations MUST ensure that the key shares are generated securely and that the chosen groups are resistant to known attacks.
39,4.2.8.2.. Handshake Protocol_Extensions_Key Share_ECDHE Parameters,Security Considerations,"The use of ephemeral key shares in the Key Share extension provides forward secrecy, as the keys are generated for each session and discarded afterward. Care must be taken to ensure that the chosen named groups are secure and resistant to known attacks."
40,4.2.9.. Handshake Protocol_Extensions_Pre-Shared Key Exchange Modes,Client and Server Behavior,"During the handshake, the client sends the Pre-Shared Key Exchange Modes extension in the ClientHello message, indicating the modes it supports. The server responds with its selected mode in the ServerHello message. If the server does not support any of the modes proposed by the client, it MUST abort the handshake with an 'unsupported_extension' alert."
41,4.2.9.. Handshake Protocol_Extensions_Pre-Shared Key Exchange Modes,Security Considerations,Implementations must ensure that the selected key exchange mode does not expose the connection to downgrade attacks. The use of PSK with ephemeral keys (psk_dhe_ke) is recommended for better security against potential attacks.
42,4.2.10.. Handshake Protocol_Extensions_Early Data Indication,Usage Requirements,"The server must indicate whether it supports early data by including the appropriate response in its ServerHello message. If the server does not support early data, it must not include this extension in its response."
43,4.2.10.. Handshake Protocol_Extensions_Early Data Indication,Security Considerations,"Early data can be replayed by an attacker. Therefore, the server must implement mechanisms to protect against replay attacks when early data is accepted. This includes validating the session state and ensuring that the early data is appropriate for the current session."
44,4.2.11.. Handshake Protocol_Extensions_Pre-Shared Key Extension,PSK Identity Field,The psk_identity field contains the identity of the pre-shared key that the client wishes to use. This identity must match one that the server recognizes.
45,4.2.11.. Handshake Protocol_Extensions_Pre-Shared Key Extension,Security Considerations,"Implementations must ensure that the PSK identities are kept confidential and that the obfuscated_ticket_age does not reveal sensitive information about the PSK itself. Additionally, care must be taken to prevent replay attacks by properly managing the lifecycle of PSKs."
46,4.2.11.2.. Handshake Protocol_Extensions_Pre-Shared Key Extension_PSK Binder,Error Handling,"If the PSK Binder does not match the expected value during the handshake, the receiver MUST abort the handshake with an ""illegal_parameter"" alert. This ensures that only valid PSK bindings are accepted."
47,4.2.11.3.. Handshake Protocol_Extensions_Pre-Shared Key Extension_Processing Order,Pre-Shared Key Extension Processing Order,"The Pre-Shared Key (PSK) extension is processed in a specific order during the handshake to ensure that the correct keys are established and used. The client includes the PSK extension in its ClientHello message, indicating the PSKs it wishes to use. The server, upon receiving the ClientHello, evaluates the PSK candidates and responds accordingly in the ServerHello message.

The processing order is as follows:
1. The client sends the PSK extension in the ClientHello, listing the identifiers of the available PSKs.
2. The server selects a PSK from the list provided by the client and includes the selected PSK identifier in the ServerHello.
3. The server may also include additional information in the EncryptedExtensions message if required.
4. If the server does not support any of the PSKs offered by the client, it must abort the handshake with an 'unsupported_extension' alert.
5. The PSK is then used in subsequent key derivation processes to establish the secure connection.

This order is crucial to maintain the integrity and security of the handshake process, ensuring that both parties agree on the PSK to be used."
48,4.3.2.. Handshake Protocol_Server Parameters_Certificate Request,Message Constraints,"The server MUST include this message if it requests a certificate from the client. If the server does not wish to authenticate the client, it MUST NOT send a CertificateRequest message."
49,4.4.. Handshake Protocol_Authentication Messages,Error Handling,"If any authentication message fails verification, the handshake must be aborted with an appropriate alert message, such as 'bad_certificate' or 'decrypt_error'."
50,4.4.1.. Handshake Protocol_Authentication Messages_The Transcript Hash,Hashing Algorithm,"The specific hashing algorithm used for the transcript hash is determined by the negotiated cipher suite. The hash function must be secure and resistant to collision attacks. Common choices include SHA-256 and SHA-384, depending on the selected cipher suite."
51,4.4.2.. Handshake Protocol_Authentication Messages_Certificate,Certificate Verification,"Upon receiving the Certificate message, the client must verify the server's certificate against its trusted certificate authorities. If the verification fails, the client must abort the handshake with an 'unknown_ca' alert."
52,4.4.2.. Handshake Protocol_Authentication Messages_Certificate,Multiple Certificates,The server may send a chain of certificates in the Certificate message. The client must validate the entire chain up to a trusted root certificate.
53,4.4.2.. Handshake Protocol_Authentication Messages_Certificate,Error Handling,"If the client receives a Certificate message that it cannot validate, it MUST abort the handshake with an appropriate alert, such as 'bad_certificate' or 'certificate_revoked'."
54,4.4.2.1.. Handshake Protocol_Authentication Messages_Certificate_OCSP Status and SCT Extensions,Usage Requirements,"Clients MUST include the OCSP Status extension in their ClientHello message if they wish to receive OCSP responses. Similarly, the SCT extension MUST be included if the client requires proof of certificate logging."
55,4.4.2.1.. Handshake Protocol_Authentication Messages_Certificate_OCSP Status and SCT Extensions,Error Handling,"If a server receives a request for an OCSP Status or SCT extension that it does not support, it MUST respond with an 'unsupported_extension' alert. Additionally, if the OCSP response is invalid or cannot be verified, the client MUST abort the handshake with an 'illegal_parameter' alert."
56,4.4.2.2.. Handshake Protocol_Authentication Messages_Certificate_Server Certificate Selection,Server Certificate Selection Overview,"The server selects a certificate to present to the client during the handshake process. This certificate must be valid and correspond to the server's identity, allowing the client to authenticate the server."
57,4.4.2.2.. Handshake Protocol_Authentication Messages_Certificate_Server Certificate Selection,Certificate Requirements,The server's certificate must be issued by a trusted Certificate Authority (CA) and must not be expired or revoked. The certificate must also match the server's domain name.
58,4.4.2.2.. Handshake Protocol_Authentication Messages_Certificate_Server Certificate Selection,Certificate Format,Certificates are typically formatted using X.509 standards and must be encoded in DER or PEM format for transmission.
59,4.4.2.2.. Handshake Protocol_Authentication Messages_Certificate_Server Certificate Selection,Client Verification,"Upon receiving the server's certificate, the client must verify the certificate's validity, including checking the signature, expiration date, and whether it is revoked."
60,4.4.2.3.. Handshake Protocol_Authentication Messages_Certificate_Client Certificate Selection,Client Certificate Selection Process,The client certificate selection process occurs when the server requests a certificate from the client during the handshake. The client must select an appropriate certificate from its certificate store that matches the criteria specified by the server.
61,4.4.2.3.. Handshake Protocol_Authentication Messages_Certificate_Client Certificate Selection,Certificate Selection Criteria,"The criteria for certificate selection may include the type of certificate (e.g., X.509), the key usage, and any specific attributes required by the server. The client must ensure that the selected certificate is valid and corresponds to the private key it possesses."
62,4.4.2.3.. Handshake Protocol_Authentication Messages_Certificate_Client Certificate Selection,Handling Certificate Selection Failures,"If the client cannot find a suitable certificate that meets the server's requirements, it must send a 'no_certificate' message to the server. This informs the server that the client is unable to provide a certificate."
63,4.4.2.3.. Handshake Protocol_Authentication Messages_Certificate_Client Certificate Selection,Certificate Validation,"Upon receiving the client certificate, the server must validate the certificate's authenticity, checking the signature, expiration date, and revocation status before proceeding with the handshake."
64,4.4.2.4.. Handshake Protocol_Authentication Messages_Certificate_Receiving a Certificate Message,Certificate Message Reception,"Upon receiving a Certificate message, the recipient must verify the certificate's validity and ensure it is trusted. This involves checking the certificate's signature, expiration date, and whether it has been revoked. The recipient must also confirm that the certificate is appropriate for the intended use, such as server authentication."
65,4.4.2.4.. Handshake Protocol_Authentication Messages_Certificate_Receiving a Certificate Message,Certificate Chain Processing,"The recipient must process the certificate chain provided in the Certificate message. This includes validating each certificate in the chain up to a trusted root certificate authority (CA). If the chain cannot be validated, the handshake must be aborted with an 'unknown_ca' alert."
66,4.4.2.4.. Handshake Protocol_Authentication Messages_Certificate_Receiving a Certificate Message,Handling Unsupported Certificates,"If the recipient encounters a certificate type that it does not support, it must abort the handshake with an 'unsupported_certificate' alert. This ensures that only compatible certificate types are accepted."
67,4.4.2.4.. Handshake Protocol_Authentication Messages_Certificate_Receiving a Certificate Message,Certificate Verification Requirements,"The recipient must verify that the certificate matches the expected identity of the peer. This includes checking the Common Name (CN) or Subject Alternative Name (SAN) fields against the expected hostname. If the verification fails, the handshake must be aborted with an 'illegal_parameter' alert."
68,4.4.4.. Handshake Protocol_Authentication Messages_Finished,Error Handling,"If a party receives a Finished message but detects that the verification value does not match the expected value, it MUST abort the handshake with an 'unexpected_message' alert."
69,4.5.. Handshake Protocol_End of Early Data,Processing Requirements,"Upon receiving the End of Early Data message, the client MUST process any early data that was sent and continue with the handshake process. If the client does not receive this message, it MUST not consider the early data to be valid."
70,4.5.. Handshake Protocol_End of Early Data,Error Handling,"If the client receives an unexpected End of Early Data message, it MUST abort the handshake with an 'unexpected_message' alert."
71,4.6.. Handshake Protocol_Post-Handshake Messages,Message Format,"Post-handshake messages are encapsulated within the TLS record layer, similar to other TLS messages. Each message type has its own specific format and requirements, which must be adhered to for proper processing."
72,4.6.. Handshake Protocol_Post-Handshake Messages,Error Handling,"If a post-handshake message is received that is unexpected or malformed, the recipient must terminate the connection and send an appropriate alert message to indicate the error."
73,4.6.2.. Handshake Protocol_Post-Handshake Messages_Post-Handshake Authentication,Extension Usage,Extensions in the post-handshake authentication messages can include various types of data necessary for the authentication process. The server may specify which extensions are required for the client to provide.
74,4.6.2.. Handshake Protocol_Post-Handshake Messages_Post-Handshake Authentication,Client Response Requirements,"Upon receiving a CertificateRequest message, the client must respond with a Certificate message if it has a certificate to present. If the client does not have a certificate, it may send an empty Certificate message."
75,4.6.2.. Handshake Protocol_Post-Handshake Messages_Post-Handshake Authentication,Error Handling,"If the client receives a CertificateRequest that it cannot fulfill, it MUST respond with an 'unexpected_message' alert. If the server receives a Certificate message that does not meet the requirements specified in the CertificateRequest, it MUST respond with an 'illegal_parameter' alert."
76,4.6.3.. Handshake Protocol_Post-Handshake Messages_Key and Initialization Vector Update,Key Update Requirements,The key_update field contains the new key material that will be used for subsequent messages. This key must be derived from the existing keying material using a secure key derivation function.
77,4.6.3.. Handshake Protocol_Post-Handshake Messages_Key and Initialization Vector Update,Initialization Vector Requirements,The iv field contains the new initialization vector that will be used for encryption. The IV must be unique for each session to ensure security against replay attacks.
78,4.6.3.. Handshake Protocol_Post-Handshake Messages_Key and Initialization Vector Update,Processing Rules,"Upon receiving a KeyUpdateMessage, the recipient must validate the new key and IV, ensuring they conform to the expected formats and lengths. If valid, the recipient updates its cryptographic state to use the new key and IV for subsequent messages."
79,4.6.3.. Handshake Protocol_Post-Handshake Messages_Key and Initialization Vector Update,Error Handling,"If the KeyUpdateMessage is malformed or the key/IV does not meet the required specifications, the recipient must abort the connection with an 'illegal_parameter' alert."
