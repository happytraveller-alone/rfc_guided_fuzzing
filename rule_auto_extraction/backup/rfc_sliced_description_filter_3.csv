index,Section,Title,Content
1,4.1.. Handshake Protocol_Key Exchange Messages,Message Handling and Order,"Key exchange messages must be processed in the order defined by the TLS protocol. Incorrect ordering can lead to handshake failure, requiring the party that receives a message out of order to abort the handshake."
2,4.1.1.. Handshake Protocol_Key Exchange Messages_Cryptographic Negotiation,Key Exchange Methods,"TLS 1.3 supports various key exchange methods, including (EC)DHE and pre-shared keys (PSK). The choice of key exchange impacts the security level and efficiency of the connection. Each party must ensure the selected method is compatible with their capabilities."
3,4.1.1.. Handshake Protocol_Key Exchange Messages_Cryptographic Negotiation,Error Handling in Negotiation,"If the server cannot agree on a cipher suite or key exchange method, it must abort the handshake with an appropriate alert message, such as 'handshake_failure'. This ensures that both parties only proceed with secure and compatible parameters."
4,4.1.3.. Handshake Protocol_Key Exchange Messages_Server Hello,Legacy Version Field,"In previous versions of TLS, this field was used for version negotiation and represented the selected version number for the connection. Unfortunately, some middleboxes fail when presented with new values. In TLS 1.3, the TLS server indicates its version using the ""supported_versions"" extension (Section 4.2.1), and the legacy_version field MUST be set to 0x0303, which is the version number for TLS 1.2. (See Appendix D for details about backward compatibility.)"
5,4.1.3.. Handshake Protocol_Key Exchange Messages_Server Hello,Random Field Requirements,"32 bytes generated by a secure random number generator. See Appendix C for additional information. The last 8 bytes MUST be overwritten as described below if negotiating TLS 1.2 or TLS 1.1, but the remaining bytes MUST be random. This structure is generated by the server and MUST be generated independently of the ClientHello.random."
6,4.1.3.. Handshake Protocol_Key Exchange Messages_Server Hello,Session ID Echo Requirements,"The contents of the client's legacy_session_id field. Note that this field is echoed even if the client's value corresponded to a cached pre-TLS 1.3 session which the server has chosen not to resume. A client which receives a legacy_session_id_echo field that does not match what it sent in the ClientHello MUST abort the handshake with an ""illegal_parameter"" alert."
7,4.1.3.. Handshake Protocol_Key Exchange Messages_Server Hello,Cipher Suite Selection,"The single cipher suite selected by the server from the list in ClientHello.cipher_suites. A client which receives a cipher suite that was not offered MUST abort the handshake with an ""illegal_parameter"" alert."
8,4.1.3.. Handshake Protocol_Key Exchange Messages_Server Hello,Extensions Requirements,"A list of extensions. The ServerHello MUST only include extensions which are required to establish the cryptographic context and negotiate the protocol version. All TLS 1.3 ServerHello messages MUST contain the ""supported_versions"" extension. Current ServerHello messages additionally contain either the ""pre_shared_key"" extension or the ""key_share"" extension, or both (when using a PSK with (EC)DHE key establishment). Other extensions (see Section 4.2) are sent separately in the EncryptedExtensions message."
9,4.1.3.. Handshake Protocol_Key Exchange Messages_Server Hello,HelloRetryRequest Special Case,"For reasons of backward compatibility with middleboxes (see Appendix D.4), the HelloRetryRequest message uses the same structure as the ServerHello, but with Random set to the special value of the SHA-256 of ""HelloRetryRequest"": CF 21 AD 74 E5 9A 61 11 BE 1D 8C 02 1E 65 B8 91 C2 A2 11 16 7A BB 8C 5E 07 9E 09 E2 C8 A8 33 9C. Upon receiving a message with type server_hello, implementations MUST first examine the Random value and, if it matches this value, process it as described in Section 4.1.4."
10,4.1.3.. Handshake Protocol_Key Exchange Messages_Server Hello,Downgrade Protection Mechanism,TLS 1.3 has a downgrade protection mechanism embedded in the server's random value. TLS 1.3 servers which negotiate TLS 1.2 or below in response to a ClientHello MUST set the last 8 bytes of their Random value specially in their ServerHello.
11,4.1.3.. Handshake Protocol_Key Exchange Messages_Server Hello,Downgrade Values Specifics,"If negotiating TLS 1.2, TLS 1.3 servers MUST set the last 8 bytes of their Random value to the bytes: 44 4F 57 4E 47 52 44 01. If negotiating TLS 1.1 or below, TLS 1.3 servers MUST, and TLS 1.2 servers SHOULD, set the last 8 bytes of their ServerHello.Random value to the bytes: 44 4F 57 4E 47 52 44 00."
12,4.1.3.. Handshake Protocol_Key Exchange Messages_Server Hello,Client Verification Responsibilities,"TLS 1.3 clients receiving a ServerHello indicating TLS 1.2 or below MUST check that the last 8 bytes are not equal to either of these values. TLS 1.2 clients SHOULD also check that the last 8 bytes are not equal to the second value if the ServerHello indicates TLS 1.1 or below. If a match is found, the client MUST abort the handshake with an ""illegal_parameter"" alert."
13,4.1.3.. Handshake Protocol_Key Exchange Messages_Server Hello,Legacy Client Renegotiation,"A legacy TLS client performing renegotiation with TLS 1.2 or prior and which receives a TLS 1.3 ServerHello during renegotiation MUST abort the handshake with a ""protocol_version"" alert. Note that renegotiation is not possible when TLS 1.3 has been negotiated."
14,4.1.4.. Handshake Protocol_Key Exchange Messages_Hello Retry Request,Legacy Version Field,"The legacy_version field must be set to 0x0303, which indicates TLS v1.2. This is done for backward compatibility reasons, allowing servers to communicate with older clients and middleboxes."
15,4.1.4.. Handshake Protocol_Key Exchange Messages_Hello Retry Request,Random Field Requirements,"The random field must be populated with a special value, specifically the SHA-256 hash of the string ""HelloRetryRequest"". This helps to differentiate the Hello Retry Request from other messages."
16,4.1.4.. Handshake Protocol_Key Exchange Messages_Hello Retry Request,Cipher Suite Selection,The cipher_suite field indicates the cipher suite selected by the server from the list provided by the client in its ClientHello. The client must ensure that the chosen cipher suite is acceptable.
17,4.1.4.. Handshake Protocol_Key Exchange Messages_Hello Retry Request,Processing the Hello Retry Request,"Upon receiving a Hello Retry Request, the client must modify its original ClientHello as per the instructions provided in the message. It then resends the modified ClientHello to continue the handshake process."
18,4.2.1.. Handshake Protocol_Extensions_Supported Versions,Version List Requirements,"The list of versions provided in the Supported Versions extension MUST include at least one version that is supported by the server. If the server does not support any of the versions listed, it will respond with a handshake failure."
19,4.2.1.. Handshake Protocol_Extensions_Supported Versions,Client Behavior upon Version Negotiation,"Upon receiving the server's response, the client MUST verify that the version selected by the server is included in the versions list sent during the handshake. If the selected version is not included, the client MUST abort the handshake with a 'protocol_version' alert."
20,4.2.2.. Handshake Protocol_Extensions_Cookie,Usage Requirements,The Cookie extension is sent by the server within the ServerHello message and is required to be included in any response when the server desires to use stateless session resumption.
21,4.2.2.. Handshake Protocol_Extensions_Cookie,Client Behavior,"Upon receiving a Cookie extension, the client must store the cookie for future use when attempting to resume the session."
22,4.2.2.. Handshake Protocol_Extensions_Cookie,Security Considerations,"The cookie must be generated using a secure random number generator to ensure that it cannot be easily guessed, and should be validated on the server side to prevent replay attacks."
23,4.2.3.. Handshake Protocol_Extensions_Signature Algorithms,Error Handling,"If the server receives a Signature Algorithms extension and none of the proposed algorithms are acceptable, it must terminate the connection by sending a 'handshake_failure' alert."
24,4.2.4.. Handshake Protocol_Extensions_Certificate Authorities,Error Handling,"If the server receives a ClientHello with a Certificate Authorities extension but does not support this extension, it MUST send a 'handshake_failure' alert. This ensures that clients are aware of the incompatibility regarding CA trust configuration."
25,4.2.6.. Handshake Protocol_Extensions_Post-Handshake Client Authentication,Client Authentication Request Structure,The server may send a 'Post-Handshake Client Authentication' extension in the EncryptedExtensions message to indicate that it requires the client to authenticate itself. The structure of this extension includes fields that specify the type of authentication required and any relevant parameters.
26,4.2.6.. Handshake Protocol_Extensions_Post-Handshake Client Authentication,Client Response Requirements,"Upon receiving a post-handshake authentication request, the client must respond with the appropriate authentication credentials. The response must adhere to the specifications outlined in the corresponding authentication method being used."
27,4.2.6.. Handshake Protocol_Extensions_Post-Handshake Client Authentication,Error Handling Scenarios,"If the client fails to provide the required authentication or if the provided credentials are invalid, the server must terminate the connection by sending an appropriate alert message, such as 'access_denied' or 'handshake_failure'."
28,4.2.6.. Handshake Protocol_Extensions_Post-Handshake Client Authentication,Security Considerations,Implementations must ensure that post-handshake authentication does not introduce vulnerabilities. This includes verifying that the authentication process is secure and that no sensitive information is exposed during the exchange.
29,4.2.7.. Handshake Protocol_Extensions_Supported Groups,Group Selection Process,"Upon receiving the Supported Groups extension, the server selects one of the offered groups for the key exchange. The selected group must be one that both the client and server support, ensuring compatibility during the handshake."
30,4.2.7.. Handshake Protocol_Extensions_Supported Groups,Error Handling,"If the server does not support any of the groups listed in the client's Supported Groups extension, it must abort the handshake process, typically sending a 'handshake_failure' alert to the client."
31,4.2.8.. Handshake Protocol_Extensions_Key Share,Client Key Share Behavior,"When sending the Key Share extension, the client MUST include at least one key share corresponding to a group it supports. If the server cannot find a matching group among the client's key shares, it MUST terminate the handshake with an 'illegal_parameter' alert."
32,4.2.8.. Handshake Protocol_Extensions_Key Share,Error Handling,"If a server receives a Key Share extension that contains no valid key shares, it MUST abort the handshake with an 'unsupported_key_share' alert. Additionally, if the key share is not compatible with the server's selected group, the handshake MUST also be terminated."
33,4.2.8.1.. Handshake Protocol_Extensions_Key Share_Diffie-Hellman Parameters,Error Handling,"If the server receives a Key Share extension that does not match its configured groups or is otherwise invalid, it MUST abort the handshake with an 'illegal_parameter' alert."
34,4.2.8.2.. Handshake Protocol_Extensions_Key Share_ECDHE Parameters,Named Group Definition,The NamedGroup field specifies the elliptic curve used for the ECDHE key exchange. Supported groups are defined in Section 3.1. This field must correspond to a group that both the client and the server support.
35,4.2.8.2.. Handshake Protocol_Extensions_Key Share_ECDHE Parameters,Client and Server Key Share Processing,"During the handshake, both the client and server will generate their respective key shares and include them in their Key Share extensions. The server will respond with its own key share, which must be used to derive the shared secret."
36,4.2.8.2.. Handshake Protocol_Extensions_Key Share_ECDHE Parameters,Error Handling for Key Share,"If the server receives a Key Share extension that includes a Named Group it does not support, it must send an 'unsupported_extension' alert. This ensures that both parties can only negotiate using supported cryptographic parameters."
37,4.2.9.. Handshake Protocol_Extensions_Pre-Shared Key Exchange Modes,Security Considerations,"When using PSK exchange modes, it is important to consider the security implications of key management. The keys must be securely stored and transmitted, and measures should be in place to prevent replay attacks and ensure the integrity of the session."
38,4.2.10.. Handshake Protocol_Extensions_Early Data Indication,Client Behavior with Early Data,"When the client includes the Early Data Indication extension in a ClientHello message, it signals that it wishes to send data before receiving the ServerHello. The server must indicate whether early data is accepted in its response."
39,4.2.10.. Handshake Protocol_Extensions_Early Data Indication,Security Considerations,"While early data can enhance performance, it also introduces security risks, such as replay attacks. Implementations must ensure that appropriate mechanisms are in place to mitigate these risks, including verifying the integrity and authenticity of early data."
40,4.2.11.. Handshake Protocol_Extensions_Pre-Shared Key Extension,Identity Field Requirements,The identity field in the PSK extension contains the identifier for the pre-shared key being used. This field must match a previously established key to facilitate the session resumption.
41,4.2.11.. Handshake Protocol_Extensions_Pre-Shared Key Extension,Implementation Considerations,"When implementing the PSK extension, care must be taken to ensure that the chosen pre-shared key is secure and not susceptible to replay attacks. Additionally, the server must validate the provided PSK identity against its stored keys to ensure authenticity."
42,4.2.11.1.. Handshake Protocol_Extensions_Pre-Shared Key Extension_Ticket Age,Pre-Shared Key Extension: Ticket Age,"The Ticket Age field provides the age of the pre-shared key ticket in seconds. It is used by the server to determine the freshness of the session ticket and whether it can be accepted for a new session. This value MUST be set to the number of seconds since the session was created, ensuring that the server can enforce any session ticket expiration policies."
43,4.2.11.2.. Handshake Protocol_Extensions_Pre-Shared Key Extension_PSK Binder,Error Handling,"If the server receives a PSK binder that does not match its expectations, it MUST terminate the handshake with an 'illegal_parameter' alert. This ensures only clients with valid PSKs can successfully complete the handshake."
44,4.2.11.3.. Handshake Protocol_Extensions_Pre-Shared Key Extension_Processing Order,Order of Operations,"During the handshake, the client sends a ClientHello message that includes the PSK extension. The server, upon receiving this message, must check whether the offered PSKs are valid and match any stored keys. If a valid PSK is found, the server responds with a ServerHello message that includes the corresponding PSK information, allowing the handshake to proceed using the pre-shared key."
45,4.2.11.3.. Handshake Protocol_Extensions_Pre-Shared Key Extension_Processing Order,Error Handling for PSK Negotiation,"If the server does not support the PSK extension or finds no matching PSK, it must respond with an appropriate alert message. This ensures that clients are aware of the failure to establish a secure connection with the desired parameters."
46,4.3.. Handshake Protocol_Server Parameters,Cipher Suite Selection,The server must select a cipher suite from those proposed by the client in the ClientHello message. The selected cipher suite dictates the encryption and hashing algorithms that will be used for the session.
47,4.3.. Handshake Protocol_Server Parameters,Extension Requirements,The server's response must include only those extensions that are necessary for establishing the cryptographic context and negotiating the protocol version. Mandatory extensions such as 'supported_versions' must always be included in the ServerHello message.
48,4.3.1.. Handshake Protocol_Server Parameters_Encrypted Extensions,Encrypted Extensions Overview,The Encrypted Extensions message is sent by the server after the ServerHello message and carries additional parameters that are required for the session. This message is crucial for establishing the cryptographic context.
49,4.3.1.. Handshake Protocol_Server Parameters_Encrypted Extensions,Extensions Field Requirements,The extensions field in the Encrypted Extensions message contains a list of extensions that enable the server to communicate additional parameters necessary for the connection. All extensions included must be relevant for establishing the cryptographic context and must not include unnecessary information.
50,4.3.1.. Handshake Protocol_Server Parameters_Encrypted Extensions,Mandatory Extensions,"All TLS 1.3 Encrypted Extensions messages MUST contain the 'supported_versions' extension to specify the version of the protocol being used. Other extensions may include 'pre_shared_key' or 'key_share', depending on the negotiated cipher suite."
51,4.3.2.. Handshake Protocol_Server Parameters_Certificate Request,Client Response Requirements,"Upon receiving a Certificate Request message, the client must respond with a Certificate message containing its certificate if it has one that matches the types and authorities specified by the server. If the client does not have a suitable certificate, it may send an empty Certificate message."
52,4.4.2.. Handshake Protocol_Authentication Messages_Certificate,Validation of the Certificate,The client must validate the server's certificate to ensure it is signed by a trusted certificate authority and that it matches the server's domain.
53,4.4.2.. Handshake Protocol_Authentication Messages_Certificate,Certificate Usage Requirements,"The Certificate message MUST be sent if the server's authentication method requires a certificate, which is typical in most scenarios for secure communication."
54,4.4.2.2.. Handshake Protocol_Authentication Messages_Certificate_Server Certificate Selection,Certificate Chain Requirements,The server must send a certificate chain that includes its own certificate and any intermediate certificates that establish a chain of trust to a trusted root certificate authority (CA). This ensures the client can verify the server's identity.
55,4.4.2.2.. Handshake Protocol_Authentication Messages_Certificate_Server Certificate Selection,Certificate Presentation,"The server sends its selected certificate in the Certificate message as part of the handshake. The certificate must be valid and not expired, and it must match the server's domain name."
56,4.4.2.2.. Handshake Protocol_Authentication Messages_Certificate_Server Certificate Selection,Error Handling for Certificate Issues,"If the server cannot present a valid certificate or if the provided certificate does not match the client's expectations, the server must abort the handshake with an appropriate alert message."
57,4.4.2.3.. Handshake Protocol_Authentication Messages_Certificate_Client Certificate Selection,Certificate Selection Criteria,The client must choose a certificate that matches the requirements specified by the server. This includes ensuring that the certificate is issued by a trusted Certificate Authority (CA) and that it is valid for the intended purpose.
58,4.4.2.3.. Handshake Protocol_Authentication Messages_Certificate_Client Certificate Selection,Certificate Presentation,"Once a suitable certificate is selected, the client presents this certificate to the server as part of the handshake process. The certificate must be sent in the appropriate message type to ensure it is processed correctly by the server."
59,4.4.2.3.. Handshake Protocol_Authentication Messages_Certificate_Client Certificate Selection,Validation by the Server,"The server must validate the client certificate upon receipt. This includes checking the certificate chain, verifying the certificate's signature, and ensuring that the certificate has not expired or been revoked."
60,4.4.2.3.. Handshake Protocol_Authentication Messages_Certificate_Client Certificate Selection,Error Handling,"If the client fails to provide a valid certificate or if the server cannot validate the presented certificate, the server must respond with an appropriate error alert, indicating the failure in the authentication process."
61,4.4.2.4.. Handshake Protocol_Authentication Messages_Certificate_Receiving a Certificate Message,Certificate Message Reception,"Upon receiving a Certificate message, the recipient must validate the certificate's authenticity and ensure it is trusted. The recipient checks the certificate chain against its trusted certificate authorities (CAs) and verifies that the certificate is not expired or revoked. If the validation fails, the recipient MUST abort the handshake with an 'bad_certificate' alert."
62,4.4.2.4.. Handshake Protocol_Authentication Messages_Certificate_Receiving a Certificate Message,Certificate Chain Validation,"The recipient must validate the entire certificate chain. This involves checking each certificate's signature against the public key of the issuer, ensuring that the chain leads back to a trusted root CA. The validation process must also include checking certificate policies and constraints."
63,4.4.2.4.. Handshake Protocol_Authentication Messages_Certificate_Receiving a Certificate Message,Certificate Revocation Checks,"The recipient should perform revocation checks to ensure that the received certificate has not been revoked. This can be done using methods such as Online Certificate Status Protocol (OCSP) or Certificate Revocation Lists (CRLs). If a certificate is found to be revoked, the handshake MUST be aborted with a 'certificate_revoked' alert."
64,4.4.2.4.. Handshake Protocol_Authentication Messages_Certificate_Receiving a Certificate Message,Handling Invalid Certificates,"If the certificate is deemed invalid for any reason—including issues with signatures, untrusted issuers, or failed revocation checks—the recipient MUST abort the handshake with an appropriate alert, such as 'bad_certificate' or 'unknown_ca'."
65,4.4.2.4.. Handshake Protocol_Authentication Messages_Certificate_Receiving a Certificate Message,Post-Validation Actions,"After successfully validating the certificate, the recipient establishes the identity of the peer and may proceed with the handshake. This could involve additional steps, such as sending a CertificateVerify message if client authentication is required."
66,4.4.3.. Handshake Protocol_Authentication Messages_Certificate Verify,Signature Algorithm Field,The algorithm field specifies the signature algorithm used to create the signature. This must match one of the algorithms specified in the certificate.
67,4.4.3.. Handshake Protocol_Authentication Messages_Certificate Verify,Error Handling,"If the signature verification fails, the recipient MUST abort the handshake with an 'decrypt_error' alert. This ensures that only valid signatures from authenticated peers are accepted."
68,4.4.4.. Handshake Protocol_Authentication Messages_Finished,Sending and Receiving Finished Messages,"Upon successfully sending the Finished message, the sender awaits the response from the other party. If the other party does not receive a valid Finished message or the verify_data does not match, it must terminate the connection with an appropriate alert."
69,4.4.4.. Handshake Protocol_Authentication Messages_Finished,Error Handling,"If a Finished message is received that does not validate correctly, the receiving party MUST abort the handshake with an 'decrypt_error' alert. This mechanism helps to ensure that any tampering or failures in previous handshake messages are detected immediately."
70,4.5.. Handshake Protocol_End of Early Data,Protocol Behavior,"Upon receiving the End of Early Data message, the client must cease processing early data and transition to the established state. This ensures that any further communication adheres to the negotiated protocol parameters."
71,4.5.. Handshake Protocol_End of Early Data,Error Handling,"If a client receives an End of Early Data message when it is not in the correct state to process it, the client MUST abort the handshake with an 'unexpected_message' alert."
72,4.6.. Handshake Protocol_Post-Handshake Messages,Key Update Message,"The Key Update message allows either the client or the server to update the keys used for encryption and integrity protection. This is essential for maintaining the security of ongoing sessions, especially in long-lived connections. The Key Update message must be processed in accordance with the current state of the connection."
73,4.6.2.. Handshake Protocol_Post-Handshake Messages_Post-Handshake Authentication,Client Authentication,"In scenarios requiring client authentication, the server may request a certificate from the client after the handshake. The client must respond with its certificate and a corresponding signature to prove its identity."
74,4.6.2.. Handshake Protocol_Post-Handshake Messages_Post-Handshake Authentication,Server Authentication,"Similarly, the client may request the server to re-authenticate after the initial handshake, particularly if a change in session context occurs. The server must provide its certificate and a signature to confirm its identity."
75,4.6.2.. Handshake Protocol_Post-Handshake Messages_Post-Handshake Authentication,Error Handling,"If any errors occur during the post-handshake authentication process, such as an invalid certificate or signature, the session must be aborted with an appropriate alert message."
76,4.6.3.. Handshake Protocol_Post-Handshake Messages_Key and Initialization Vector Update,Initialization Vector (IV) Specifications,The initialization vector used for the encryption must be updated alongside the keys. The new IV should be generated using a secure random number generator and must adhere to the specifications outlined in the selected cipher suite.
77,4.6.3.. Handshake Protocol_Post-Handshake Messages_Key and Initialization Vector Update,Error Handling for Key Updates,"If a key update is received that is unexpected or not valid according to the current state of the session, the recipient MUST abort the connection with an appropriate alert. This includes scenarios where the update does not conform to negotiated parameters."
