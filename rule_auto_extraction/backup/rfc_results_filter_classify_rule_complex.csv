ID,Section,Title,Content,RuleMatch,ExtractedRule,SlicedRule,classification_full_result,classification_result,MQD,CRA
17,Section: 4.1.2.. Handshake Protocol_Key Exchange Messages_Client Hello,ClientHello Transmission Rules,"When a client first connects to a server, it is REQUIRED to send the ClientHello as its first TLS message. The client will also send a ClientHello when the server has responded to its ClientHello with a HelloRetryRequest. In that case, the client MUST send the same ClientHello without modification, except as follows:
- If a ""key_share"" extension was supplied in the HelloRetryRequest, replacing the list of shares with a list containing a single KeyShareEntry from the indicated group.
- Removing the ""early_data"" extension if one was present. Early data is not permitted after a HelloRetryRequest.
- Including a ""cookie"" extension if one was provided in the HelloRetryRequest.
- Updating the ""pre_shared_key"" extension if present by recomputing the ""obfuscated_ticket_age"" and binder values and (optionally) removing any PSKs which are incompatible with the server's indicated cipher suite.
- Optionally adding, removing, or changing the length of the ""padding"" extension [RFC7685].
- Other modifications that may be allowed by an extension defined in the future and present in the HelloRetryRequest.",1,"<CLI-MSG-CONST> <1> (Clients MUST send ClientHello as the first TLS message upon connection and also after receiving a HelloRetryRequest) + <SRV-MSG-PROC> <0> (Servers MUST validate that the initial ClientHello is sent as the first message and that subsequent ClientHello messages comply with the specified modifications)
<CLI-MSG-CONST> <1> (After receiving a HelloRetryRequest, clients MUST replace the ""key_share"" extension with a single KeyShareEntry for the indicated group if requested) + <SRV-MSG-PROC> <0> (Servers MUST verify the ""key_share"" extension is correctly modified in the new ClientHello)
<CLI-MSG-CONST> <1> (Clients MUST remove the ""early_data"" extension if it was present when sending a new ClientHello after a HelloRetryRequest) + <SRV-MSG-PROC> <0> (Servers MUST reject ClientHello messages that still include the ""early_data"" extension after a HelloRetryRequest)
<CLI-MSG-CONST> <1> (Clients MUST include a ""cookie"" extension if provided in the HelloRetryRequest) + <SRV-MSG-PROC> <0> (Servers MUST check for the presence of the ""cookie"" extension in the new ClientHello)
<CLI-MSG-CONST> <1> (Clients MUST update the ""pre_shared_key"" extension by recalculating the ""obfuscated_ticket_age"" and binder values, and MAY remove incompatible PSKs) + <SRV-MSG-PROC> <0> (Servers MUST verify the updated ""pre_shared_key"" values in the new ClientHello)
<CLI-MSG-CONST> <1> (Clients MAY add, remove, or change the length of the ""padding"" extension as necessary) + <SRV-MSG-PROC> <0> (Servers MUST accept optional modifications to the ""padding"" extension in the new ClientHello)",<CLI-MSG-CONST> <1> (Clients MUST send ClientHello as the first TLS message upon connection and also after receiving a HelloRetryRequest) + <SRV-MSG-PROC> <0> (Servers MUST validate that the initial ClientHello is sent as the first message and that subsequent ClientHello messages comply with the specified modifications),"{'classification_result': '2', 'MQD': 'Clients MUST send ClientHello as the first TLS message and also after receiving a HelloRetryRequest, creating explicit message dependencies.', 'CRA': 'Directly involves the ClientHello message transmission and its ordering requirements.'}",2,"Clients MUST send ClientHello as the first TLS message and also after receiving a HelloRetryRequest, creating explicit message dependencies.",Directly involves the ClientHello message transmission and its ordering requirements.
,Section: 4.1.2.. Handshake Protocol_Key Exchange Messages_Client Hello,ClientHello Transmission Rules,"When a client first connects to a server, it is REQUIRED to send the ClientHello as its first TLS message. The client will also send a ClientHello when the server has responded to its ClientHello with a HelloRetryRequest. In that case, the client MUST send the same ClientHello without modification, except as follows:
- If a ""key_share"" extension was supplied in the HelloRetryRequest, replacing the list of shares with a list containing a single KeyShareEntry from the indicated group.
- Removing the ""early_data"" extension if one was present. Early data is not permitted after a HelloRetryRequest.
- Including a ""cookie"" extension if one was provided in the HelloRetryRequest.
- Updating the ""pre_shared_key"" extension if present by recomputing the ""obfuscated_ticket_age"" and binder values and (optionally) removing any PSKs which are incompatible with the server's indicated cipher suite.
- Optionally adding, removing, or changing the length of the ""padding"" extension [RFC7685].
- Other modifications that may be allowed by an extension defined in the future and present in the HelloRetryRequest.",,,"<CLI-MSG-CONST> <1> (After receiving a HelloRetryRequest, clients MUST replace the ""key_share"" extension with a single KeyShareEntry for the indicated group if requested) + <SRV-MSG-PROC> <0> (Servers MUST verify the ""key_share"" extension is correctly modified in the new ClientHello)","{'classification_result': '2', 'MQD': 'Must replace the ""key_share"" extension after receiving HelloRetryRequest, creating an explicit message dependency.', 'CRA': 'Directly involves the ClientHello message through the modification of the ""key_share"" extension.'}",2,"Must replace the ""key_share"" extension after receiving HelloRetryRequest, creating an explicit message dependency.","Directly involves the ClientHello message through the modification of the ""key_share"" extension."
,Section: 4.1.2.. Handshake Protocol_Key Exchange Messages_Client Hello,ClientHello Transmission Rules,"When a client first connects to a server, it is REQUIRED to send the ClientHello as its first TLS message. The client will also send a ClientHello when the server has responded to its ClientHello with a HelloRetryRequest. In that case, the client MUST send the same ClientHello without modification, except as follows:
- If a ""key_share"" extension was supplied in the HelloRetryRequest, replacing the list of shares with a list containing a single KeyShareEntry from the indicated group.
- Removing the ""early_data"" extension if one was present. Early data is not permitted after a HelloRetryRequest.
- Including a ""cookie"" extension if one was provided in the HelloRetryRequest.
- Updating the ""pre_shared_key"" extension if present by recomputing the ""obfuscated_ticket_age"" and binder values and (optionally) removing any PSKs which are incompatible with the server's indicated cipher suite.
- Optionally adding, removing, or changing the length of the ""padding"" extension [RFC7685].
- Other modifications that may be allowed by an extension defined in the future and present in the HelloRetryRequest.",,,"<CLI-MSG-CONST> <1> (Clients MUST remove the ""early_data"" extension if it was present when sending a new ClientHello after a HelloRetryRequest) + <SRV-MSG-PROC> <0> (Servers MUST reject ClientHello messages that still include the ""early_data"" extension after a HelloRetryRequest)","{'classification_result': '2', 'MQD': 'Clients must remove the ""early_data"" extension after a HelloRetryRequest, indicating a clear message queue dependency.', 'CRA': 'Directly involves the ClientHello message as it specifies conditions for sending a new ClientHello.'}",2,"Clients must remove the ""early_data"" extension after a HelloRetryRequest, indicating a clear message queue dependency.",Directly involves the ClientHello message as it specifies conditions for sending a new ClientHello.
,Section: 4.1.2.. Handshake Protocol_Key Exchange Messages_Client Hello,ClientHello Transmission Rules,"When a client first connects to a server, it is REQUIRED to send the ClientHello as its first TLS message. The client will also send a ClientHello when the server has responded to its ClientHello with a HelloRetryRequest. In that case, the client MUST send the same ClientHello without modification, except as follows:
- If a ""key_share"" extension was supplied in the HelloRetryRequest, replacing the list of shares with a list containing a single KeyShareEntry from the indicated group.
- Removing the ""early_data"" extension if one was present. Early data is not permitted after a HelloRetryRequest.
- Including a ""cookie"" extension if one was provided in the HelloRetryRequest.
- Updating the ""pre_shared_key"" extension if present by recomputing the ""obfuscated_ticket_age"" and binder values and (optionally) removing any PSKs which are incompatible with the server's indicated cipher suite.
- Optionally adding, removing, or changing the length of the ""padding"" extension [RFC7685].
- Other modifications that may be allowed by an extension defined in the future and present in the HelloRetryRequest.",,,"<CLI-MSG-CONST> <1> (Clients MUST include a ""cookie"" extension if provided in the HelloRetryRequest) + <SRV-MSG-PROC> <0> (Servers MUST check for the presence of the ""cookie"" extension in the new ClientHello)","{'classification_result': '2', 'MQD': 'Clients MUST include a ""cookie"" extension after receiving a HelloRetryRequest, creating a message queue dependency.', 'CRA': 'Directly involves ClientHello message transmission due to the requirement of the ""cookie"" extension.'}",2,"Clients MUST include a ""cookie"" extension after receiving a HelloRetryRequest, creating a message queue dependency.","Directly involves ClientHello message transmission due to the requirement of the ""cookie"" extension."
187,Section: 4.5.. Handshake Protocol_End of Early Data,Message Sending Rules,"If the server sent an ""early_data"" extension in EncryptedExtensions, the client MUST send an EndOfEarlyData message after receiving the server Finished. If the server does not send an ""early_data"" extension in EncryptedExtensions, then the client MUST NOT send an EndOfEarlyData message. This message indicates that all 0-RTT application_data messages, if any, have been transmitted and that the following records are protected under handshake traffic keys.",1,"<CLI-MSG-CONST> <1> (Clients MUST send an EndOfEarlyData message after receiving the server's Finished if the server sent an ""early_data"" extension in EncryptedExtensions) + <SRV-MSG-PROC> <1> (Servers MUST verify that clients send an EndOfEarlyData message when the ""early_data"" extension is present)

<CLI-MSG-CONST> <1> (Clients MUST NOT send an EndOfEarlyData message if the server did not send an ""early_data"" extension in EncryptedExtensions) + <SRV-MSG-PROC> <1> (Servers MUST reject messages if clients send an EndOfEarlyData message without the ""early_data"" extension being present)","<CLI-MSG-CONST> <1> (Clients MUST send an EndOfEarlyData message after receiving the server's Finished if the server sent an ""early_data"" extension in EncryptedExtensions) + <SRV-MSG-PROC> <1> (Servers MUST verify that clients send an EndOfEarlyData message when the ""early_data"" extension is present)","{'classification_result': '2', 'MQD': ""Clients MUST send an EndOfEarlyData message after receiving the server's Finished, indicating a clear message queue dependency."", 'CRA': 'The rule is indirectly related to ClientHello through the ""early_data"" extension, but does not explicitly mention ClientHello itself.'}",2,"Clients MUST send an EndOfEarlyData message after receiving the server's Finished, indicating a clear message queue dependency.","The rule is indirectly related to ClientHello through the ""early_data"" extension, but does not explicitly mention ClientHello itself."
,Section: 4.6.2.. Handshake Protocol_Post-Handshake Messages_Post-Handshake Authentication,Client Authentication Requirements,"If the client chooses to authenticate, it MUST send Certificate, CertificateVerify, and Finished. If it declines, it MUST send a Certificate message containing no certificates followed by Finished. All of the client's messages for a given response MUST appear consecutively on the wire with no intervening messages of other types.",,,<CLI-MSG-CONST> <1> (Clients MUST send a Certificate message containing no certificates followed by Finished if they decline to authenticate) + <SRV-MSG-PROC> <1> (Servers MUST expect the decline messages consecutively without intervening message types),"{'classification_result': '2', 'MQD': 'Clients are required to send a Certificate message followed by a Finished message, creating a clear message queue dependency.', 'CRA': 'No direct relation to ClientHello message or its contents.'}",2,"Clients are required to send a Certificate message followed by a Finished message, creating a clear message queue dependency.",No direct relation to ClientHello message or its contents.
