ID,Section,Title,Content,RuleMatch,ExtractedRule,SlicedRule,classification_full_result,classification_result,MQD,CRA,violation_input,mutation_output
,Section: 4.1.2.. Handshake Protocol_Key Exchange Messages_Client Hello,ClientHello Transmission Rules,"When a client first connects to a server, it is REQUIRED to send the ClientHello as its first TLS message. The client will also send a ClientHello when the server has responded to its ClientHello with a HelloRetryRequest. In that case, the client MUST send the same ClientHello without modification, except as follows:
- If a ""key_share"" extension was supplied in the HelloRetryRequest, replacing the list of shares with a list containing a single KeyShareEntry from the indicated group.
- Removing the ""early_data"" extension if one was present. Early data is not permitted after a HelloRetryRequest.
- Including a ""cookie"" extension if one was provided in the HelloRetryRequest.
- Updating the ""pre_shared_key"" extension if present by recomputing the ""obfuscated_ticket_age"" and binder values and (optionally) removing any PSKs which are incompatible with the server's indicated cipher suite.
- Optionally adding, removing, or changing the length of the ""padding"" extension [RFC7685].
- Other modifications that may be allowed by an extension defined in the future and present in the HelloRetryRequest.",,,"<CLI-MSG-CONST> <1> (Clients MUST update the ""pre_shared_key"" extension by recalculating the ""obfuscated_ticket_age"" and binder values, and MAY remove incompatible PSKs) + <SRV-MSG-PROC> <0> (Servers MUST verify the updated ""pre_shared_key"" values in the new ClientHello)","{'classification_result': '1', 'MQD': 'No specific message ordering or dependencies required; the instruction does not indicate that this must occur after or in response to another message.', 'CRA': 'Directly relates to ClientHello through the mention of the ""pre_shared_key"" extension and its values.'}",1,No specific message ordering or dependencies required; the instruction does not indicate that this must occur after or in response to another message.,"Directly relates to ClientHello through the mention of the ""pre_shared_key"" extension and its values.","```json
{
  ""description"": ""ClientHello Transmission Rules"",
  ""base"": {
    ""first_rule"": ""<CLI-MSG-CONST> <1> (Clients MUST update the \""pre_shared_key\"" extension by recalculating the \""obfuscated_ticket_age\"" and binder values, and MAY remove incompatible PSKs)"",
    ""second_rule"": ""<SRV-MSG-PROC> <0> (Servers MUST verify the updated \""pre_shared_key\"" values in the new ClientHello)""
  }
}
```","```json
{
  ""description"": ""ClientHello Transmission Rules"",
  ""base"": {
    ""first_rule"": ""<CLI-MSG-CONST> <1> (Clients MUST update the \""pre_shared_key\"" extension by recalculating the \""obfuscated_ticket_age\"" and binder values, and MAY remove incompatible PSKs)"",
    ""second_rule"": ""<SRV-MSG-PROC> <0> (Servers MUST verify the updated \""pre_shared_key\"" values in the new ClientHello)""
  },
  ""violation_description"": [
    ""Rule requires: Recalculation of PSK extension values in new ClientHello"",
    ""Test strategy: Reuse stale PSK values from original ClientHello"",
    ""Security impact: Potential replay attacks and PSK binding violations"",
    ""Implementation gap: Missing validation of PSK freshness""
  ],
  ""target"": {
    ""message"": ""ClientHello"",
    ""operation"": ""MODIFY"",
    ""fields"": [
      {
        ""name"": ""pre_shared_key.obfuscated_ticket_age"",
        ""position"": ""OFFSET(4)"",
        ""length"": ""LENGTH(4)""
      },
      {
        ""name"": ""pre_shared_key.binder"",
        ""position"": ""END"",
        ""length"": ""LENGTH(32)""
      }
    ],
    ""modification"": ""copy_original_psk_values""
  },
  ""expected_result"": ""Alert(illegal_parameter) or Alert(decrypt_error)""
}
```"
20,Section: 4.1.2.. Handshake Protocol_Key Exchange Messages_Client Hello,Legacy Version Field,"In previous versions of TLS, this field was used for version negotiation and represented the highest version number supported by the client. Experience has shown that many servers do not properly implement version negotiation, leading to ""version intolerance"" in which the server rejects an otherwise acceptable ClientHello with a version number higher than it supports. In TLS 1.3, the client indicates its version preferences in the ""supported_versions"" extension (Section 4.2.1) and the legacy_version field MUST be set to 0x0303, which is the version number for TLS 1.2. TLS 1.3 ClientHellos are identified as having a legacy_version of 0x0303 and a supported_versions extension present with 0x0304 as the highest version indicated therein. (See Appendix D for details about backward compatibility.)",1,"<CLI-MSG-CONST> <1> (Clients MUST set the legacy_version field to 0x0303 in TLS 1.3 ClientHellos) + <SRV-MSG-PROC> <1> (Servers MUST recognize ClientHellos with a legacy_version of 0x0303 and a supported_versions extension containing 0x0304 as valid)
<CLI-MSG-CONST> <1> (Clients MUST include the ""supported_versions"" extension in TLS 1.3 ClientHellos) + <SRV-MSG-PROC> <1> (Servers MUST verify the presence of the ""supported_versions"" extension in ClientHellos)",<CLI-MSG-CONST> <1> (Clients MUST set the legacy_version field to 0x0303 in TLS 1.3 ClientHellos) + <SRV-MSG-PROC> <1> (Servers MUST recognize ClientHellos with a legacy_version of 0x0303 and a supported_versions extension containing 0x0304 as valid),"{'classification_result': '1', 'MQD': 'No specific message ordering or dependencies required.', 'CRA': 'Directly relates to ClientHello through the legacy_version field requirement.'}",1,No specific message ordering or dependencies required.,Directly relates to ClientHello through the legacy_version field requirement.,"```json
{
  ""description"": ""Legacy Version Field"",
  ""base"": {
    ""first_rule"": ""<CLI-MSG-CONST> <1> (Clients MUST set the legacy_version field to 0x0303 in TLS 1.3 ClientHellos)"",
    ""second_rule"": ""<SRV-MSG-PROC> <1> (Servers MUST recognize ClientHellos with a legacy_version of 0x0303 and a supported_versions extension containing 0x0304 as valid)""
  }
}
```","```json
{
  ""description"": ""Legacy Version Field"",
  ""base"": {
    ""first_rule"": ""<CLI-MSG-CONST> <1> (Clients MUST set the legacy_version field to 0x0303 in TLS 1.3 ClientHellos)"",
    ""second_rule"": ""<SRV-MSG-PROC> <1> (Servers MUST recognize ClientHellos with a legacy_version of 0x0303 and a supported_versions extension containing 0x0304 as valid)""
  },
  ""violation_description"": [
    ""Rule requires: legacy_version must be 0x0303 for TLS 1.3"",
    ""Test strategy: Set legacy_version to TLS 1.3 value (0x0304) while maintaining 0x0304 in supported_versions"",
    ""Security impact: Potential version negotiation bypass or downgrade"",
    ""Implementation gap: Insufficient validation of legacy_version field""
  ],
  ""target"": {
    ""message"": ""ClientHello"",
    ""operation"": ""MODIFY"",
    ""fields"": [
      {
        ""name"": ""legacy_version"",
        ""position"": ""START"",
        ""length"": ""LENGTH(2)""
      }
    ],
    ""modification"": ""0x0304""
  },
  ""expected_result"": ""Alert(protocol_version)""
}
```"
,Section: 4.1.2.. Handshake Protocol_Key Exchange Messages_Client Hello,Legacy Version Field,"In previous versions of TLS, this field was used for version negotiation and represented the highest version number supported by the client. Experience has shown that many servers do not properly implement version negotiation, leading to ""version intolerance"" in which the server rejects an otherwise acceptable ClientHello with a version number higher than it supports. In TLS 1.3, the client indicates its version preferences in the ""supported_versions"" extension (Section 4.2.1) and the legacy_version field MUST be set to 0x0303, which is the version number for TLS 1.2. TLS 1.3 ClientHellos are identified as having a legacy_version of 0x0303 and a supported_versions extension present with 0x0304 as the highest version indicated therein. (See Appendix D for details about backward compatibility.)",,,"<CLI-MSG-CONST> <1> (Clients MUST include the ""supported_versions"" extension in TLS 1.3 ClientHellos) + <SRV-MSG-PROC> <1> (Servers MUST verify the presence of the ""supported_versions"" extension in ClientHellos)","{'classification_result': '1', 'MQD': 'No specific message ordering or dependencies required.', 'CRA': 'Directly relates to ClientHello through the ""supported_versions"" extension.'}",1,No specific message ordering or dependencies required.,"Directly relates to ClientHello through the ""supported_versions"" extension.","```json
{
  ""description"": ""Legacy Version Field"",
  ""base"": {
    ""first_rule"": ""<CLI-MSG-CONST> <1> (Clients MUST include the \""supported_versions\"" extension in TLS 1.3 ClientHellos)"",
    ""second_rule"": ""<SRV-MSG-PROC> <1> (Servers MUST verify the presence of the \""supported_versions\"" extension in ClientHellos)""
  }
}
```","```json
{
  ""description"": ""Legacy Version Field"",
  ""base"": {
    ""first_rule"": ""<CLI-MSG-CONST> <1> (Clients MUST include the \""supported_versions\"" extension in TLS 1.3 ClientHellos)"",
    ""second_rule"": ""<SRV-MSG-PROC> <1> (Servers MUST verify the presence of the \""supported_versions\"" extension in ClientHellos)""
  },
  ""violation_description"": [
    ""Rule requires: supported_versions extension must be present"",
    ""Test strategy: Remove supported_versions extension from ClientHello"",
    ""Security impact: Potential version negotiation bypass or downgrade"",
    ""Implementation gap: Missing mandatory extension validation""
  ],
  ""target"": {
    ""message"": ""ClientHello"",
    ""operation"": ""DELETE"",
    ""fields"": [
      {
        ""name"": ""supported_versions"",
        ""position"": ""START"",
        ""length"": ""ALL""
      }
    ],
    ""modification"": ""remove_extension""
  },
  ""expected_result"": ""Alert(missing_extension)""
}
```"
23,Section: 4.1.2.. Handshake Protocol_Key Exchange Messages_Client Hello,Cipher Suites,"A list of the symmetric cipher options supported by the client, specifically the record protection algorithm (including secret key length) and a hash to be used with HKDF, in descending order of client preference. Values are defined in Appendix B.4. If the list contains cipher suites that the server does not recognize, support, or wish to use, the server MUST ignore those cipher suites and process the remaining ones as usual. If the client is attempting a PSK key establishment, it SHOULD advertise at least one cipher suite indicating a Hash associated with the PSK.",1,"<CLI-MSG-CONST> <1> (Clients MUST provide a list of supported cipher suites in descending order of preference) + <SRV-MSG-PROC> <1> (Servers MUST ignore unrecognized or unsupported cipher suites in the client's list and process the remaining ones)
<CLI-MSG-CONST> <0> (Clients SHOULD advertise at least one PSK-related cipher suite if attempting PSK key establishment) + <SRV-MSG-PROC> <0> (Servers MAY prioritize processing of cipher suites associated with PSK if indicated by the client)",<CLI-MSG-CONST> <1> (Clients MUST provide a list of supported cipher suites in descending order of preference) + <SRV-MSG-PROC> <1> (Servers MUST ignore unrecognized or unsupported cipher suites in the client's list and process the remaining ones),"{'classification_result': '1', 'MQD': 'No specific message ordering or dependencies required.', 'CRA': 'Directly relates to ClientHello through the requirement to provide a list of supported cipher suites.'}",1,No specific message ordering or dependencies required.,Directly relates to ClientHello through the requirement to provide a list of supported cipher suites.,"```json
{
  ""description"": ""Cipher Suites"",
  ""base"": {
    ""first_rule"": ""<CLI-MSG-CONST> <1> (Clients MUST provide a list of supported cipher suites in descending order of preference)"",
    ""second_rule"": ""<SRV-MSG-PROC> <1> (Servers MUST ignore unrecognized or unsupported cipher suites in the client's list and process the remaining ones)""
  }
}
```","```json
{
  ""description"": ""Cipher Suites"",
  ""base"": {
    ""first_rule"": ""<CLI-MSG-CONST> <1> (Clients MUST provide a list of supported cipher suites in descending order of preference)"",
    ""second_rule"": ""<SRV-MSG-PROC> <1> (Servers MUST ignore unrecognized or unsupported cipher suites in the client's list and process the remaining ones)""
  },
  ""violation_description"": [
    ""Rule requires: Cipher suites must be ordered by descending preference"",
    ""Test strategy: Insert invalid suites and reverse preference order"", 
    ""Security impact: Possible downgrade to weaker cipher suite"",
    ""Implementation gap: Insufficient validation of cipher suite ordering""
  ],
  ""target"": {
    ""message"": ""ClientHello"",
    ""operation"": ""MODIFY"",
    ""fields"": [
      {
        ""name"": ""cipher_suites"",
        ""position"": ""START"",
        ""length"": ""ALL""
      }
    ],
    ""modification"": ""0x1301,0xFFFF,0x1302,0x0000,0x1303""
  },
  ""expected_result"": ""Alert(illegal_parameter) or fallback to lowest security cipher suite""
}
```"
24,Section: 4.1.2.. Handshake Protocol_Key Exchange Messages_Client Hello,Legacy Compression Methods,"Versions of TLS before 1.3 supported compression with the list of supported compression methods being sent in this field. For every TLS 1.3 ClientHello, this vector MUST contain exactly one byte, set to zero, which corresponds to the ""null"" compression method in prior versions of TLS. If a TLS 1.3 ClientHello is received with any other value in this field, the server MUST abort the handshake with an ""illegal_parameter"" alert. Note that TLS 1.3 servers might receive TLS 1.2 or prior ClientHellos which contain other compression methods and (if negotiating such a prior version) MUST follow the procedures for the appropriate prior version of TLS.",1,"<CLI-MSG-CONST> <1> (TLS 1.3 ClientHello MUST contain exactly one byte set to zero for the ""null"" compression method) + <SRV-MSG-PROC> <1> (Servers MUST abort the handshake with an ""illegal_parameter"" alert if the ClientHello contains any value other than zero in the compression methods field)  
<SRV-MSG-PROC> <0> (Servers MUST follow procedures for prior TLS versions if receiving a ClientHello from TLS 1.2 or earlier that contains other compression methods)","<CLI-MSG-CONST> <1> (TLS 1.3 ClientHello MUST contain exactly one byte set to zero for the ""null"" compression method) + <SRV-MSG-PROC> <1> (Servers MUST abort the handshake with an ""illegal_parameter"" alert if the ClientHello contains any value other than zero in the compression methods field)","{'classification_result': '1', 'MQD': 'No specific message ordering or dependencies required.', 'CRA': 'Directly relates to ClientHello through the requirement for the ""null"" compression method.'}",1,No specific message ordering or dependencies required.,"Directly relates to ClientHello through the requirement for the ""null"" compression method.","```json
{
  ""description"": ""Legacy Compression Methods"",
  ""base"": {
    ""first_rule"": ""<CLI-MSG-CONST> <1> (TLS 1.3 ClientHello MUST contain exactly one byte set to zero for the \""null\"" compression method)"",
    ""second_rule"": ""<SRV-MSG-PROC> <1> (Servers MUST abort the handshake with an \""illegal_parameter\"" alert if the ClientHello contains any value other than zero in the compression methods field)""
  }
}
```","```json
{
  ""description"": ""Legacy Compression Methods"",
  ""base"": {
    ""first_rule"": ""<CLI-MSG-CONST> <1> (TLS 1.3 ClientHello MUST contain exactly one byte set to zero for the \""null\"" compression method)"",
    ""second_rule"": ""<SRV-MSG-PROC> <1> (Servers MUST abort the handshake with an \""illegal_parameter\"" alert if the ClientHello contains any value other than zero in the compression methods field)""
  },
  ""violation_description"": [
    ""Rule requires: Single null (0x00) compression method"",
    ""Test strategy: Modify compression methods field with non-zero values and incorrect length"",
    ""Security impact: Potential compression oracle attack or downgrade"",
    ""Implementation gap: Insufficient validation of compression methods field""
  ],
  ""target"": {
    ""message"": ""ClientHello"",
    ""operation"": ""MODIFY"",
    ""fields"": [
      {
        ""name"": ""compression_methods"",
        ""position"": ""START"",
        ""length"": ""LENGTH(2)""
      }
    ],
    ""modification"": ""0x0001"" 
  },
  ""expected_result"": ""Alert(illegal_parameter)""
}
```

Would you like me to explain or break down the code?"
25,Section: 4.1.2.. Handshake Protocol_Key Exchange Messages_Client Hello,Extensions,"Clients request extended functionality from servers by sending data in the extensions field. The actual ""Extension"" format is defined in Section 4.2. In TLS 1.3, the use of certain extensions is mandatory, as functionality has moved into extensions to preserve ClientHello compatibility with previous versions of TLS. Servers MUST ignore unrecognized extensions.",1,"<CLI-MSG-CONST> <1> (Clients MUST send data in the extensions field to request extended functionality from servers) + <SRV-MSG-PROC> <1> (Servers MUST ignore unrecognized extensions in the ClientHello)
<CLI-MSG-CONST> <1> (Clients MUST include mandatory extensions in the ClientHello to ensure compatibility with previous TLS versions) + <SRV-MSG-PROC> <0> (Servers MAY log the presence of unrecognized extensions for analysis)",<CLI-MSG-CONST> <1> (Clients MUST send data in the extensions field to request extended functionality from servers) + <SRV-MSG-PROC> <1> (Servers MUST ignore unrecognized extensions in the ClientHello),"{'classification_result': '1', 'MQD': 'No specific message ordering or dependencies required.', 'CRA': 'Directly relates to ClientHello through the mention of the extensions field for requesting functionality.'}",1,No specific message ordering or dependencies required.,Directly relates to ClientHello through the mention of the extensions field for requesting functionality.,"```json
{
  ""description"": ""Extensions"",
  ""base"": {
    ""first_rule"": ""<CLI-MSG-CONST> <1> (Clients MUST send data in the extensions field to request extended functionality from servers)"",
    ""second_rule"": ""<SRV-MSG-PROC> <1> (Servers MUST ignore unrecognized extensions in the ClientHello)""
  }
}
```","```json
{
  ""description"": ""Extensions"",
  ""base"": {
    ""first_rule"": ""<CLI-MSG-CONST> <1> (Clients MUST send data in the extensions field to request extended functionality from servers)"",
    ""second_rule"": ""<SRV-MSG-PROC> <1> (Servers MUST ignore unrecognized extensions in the ClientHello)""
  },
  ""violation_description"": [
    ""Rule requires: Extension field must contain valid extension data"",
    ""Test strategy: Send malformed extension data structures"",
    ""Security impact: Potential buffer overflow or parsing vulnerabilities"", 
    ""Implementation gap: Insufficient extension data validation""
  ],
  ""target"": {
    ""message"": ""ClientHello"",
    ""operation"": ""MODIFY"",
    ""fields"": [
      {
        ""name"": ""extensions"",
        ""position"": ""START"",
        ""length"": ""LENGTH(4)""
      }
    ],
    ""modification"": ""0xFFFF0002FFFF"" 
  },
  ""expected_result"": ""Alert(decode_error) or Alert(illegal_parameter)""
}
```"
,Section: 4.1.2.. Handshake Protocol_Key Exchange Messages_Client Hello,Extensions,"Clients request extended functionality from servers by sending data in the extensions field. The actual ""Extension"" format is defined in Section 4.2. In TLS 1.3, the use of certain extensions is mandatory, as functionality has moved into extensions to preserve ClientHello compatibility with previous versions of TLS. Servers MUST ignore unrecognized extensions.",,,<CLI-MSG-CONST> <1> (Clients MUST include mandatory extensions in the ClientHello to ensure compatibility with previous TLS versions) + <SRV-MSG-PROC> <0> (Servers MAY log the presence of unrecognized extensions for analysis),"{'classification_result': '1', 'MQD': 'No specific message ordering or dependencies required.', 'CRA': 'Directly relates to ClientHello through the mention of mandatory extensions for compatibility.'}",1,No specific message ordering or dependencies required.,Directly relates to ClientHello through the mention of mandatory extensions for compatibility.,"```json
{
  ""description"": ""Extensions"",
  ""base"": {
    ""first_rule"": ""<CLI-MSG-CONST> <1> (Clients MUST include mandatory extensions in the ClientHello to ensure compatibility with previous TLS versions)"",
    ""second_rule"": ""<SRV-MSG-PROC> <0> (Servers MAY log the presence of unrecognized extensions for analysis)""
  }
}
```","```json
{
  ""description"": ""Extensions"",
  ""base"": {
    ""first_rule"": ""<CLI-MSG-CONST> <1> (Clients MUST include mandatory extensions in the ClientHello to ensure compatibility with previous TLS versions)"", 
    ""second_rule"": ""<SRV-MSG-PROC> <0> (Servers MAY log the presence of unrecognized extensions for analysis)""
  },
  ""violation_description"": [
    ""Rule requires: Mandatory extensions must be included in ClientHello"",
    ""Test strategy: Remove required supported_versions extension"",
    ""Security impact: Potential version negotiation failure or downgrade"",
    ""Implementation gap: Missing validation of mandatory extensions""
  ],
  ""target"": {
    ""message"": ""ClientHello"",
    ""operation"": ""DELETE"",
    ""fields"": [
      {
        ""name"": ""supported_versions"",
        ""position"": ""START"",
        ""length"": ""ALL""
      }
    ],
    ""modification"": ""remove_extension""
  },
  ""expected_result"": ""Alert(missing_extension)""
}
```"
52,Section: 4.2.. Handshake Protocol_Extensions,Extension Ordering Rules,"When multiple extensions of different types are present, the extensions MAY appear in any order, with the exception of ""pre_shared_key"" which MUST be the last extension in the ClientHello (but can appear anywhere in the ServerHello extensions block). There MUST NOT be more than one extension of the same type in a given extension block.",1,"<CLI-MSG-CONST> <1> (Clients MUST place the ""pre_shared_key"" extension last in ClientHello, while other extensions MAY appear in any order) + <SRV-MSG-PROC> <1> (Servers MUST verify that the ""pre_shared_key"" is the last extension in ClientHello)
<CLI-MSG-CONST> <1> (Clients MUST NOT include multiple extensions of the same type in any extension block) + <SRV-MSG-PROC> <1> (Servers MUST reject ClientHello messages containing duplicate extension types)","<CLI-MSG-CONST> <1> (Clients MUST place the ""pre_shared_key"" extension last in ClientHello, while other extensions MAY appear in any order) + <SRV-MSG-PROC> <1> (Servers MUST verify that the ""pre_shared_key"" is the last extension in ClientHello)","{'classification_result': '1', 'MQD': 'No specific message ordering or dependency required beyond the placement of the ""pre_shared_key"" extension.', 'CRA': 'Directly relates to ClientHello through the requirement for the ""pre_shared_key"" extension\'s position.'}",1,"No specific message ordering or dependency required beyond the placement of the ""pre_shared_key"" extension.","Directly relates to ClientHello through the requirement for the ""pre_shared_key"" extension's position.","```json
{
  ""description"": ""Extension Ordering Rules"",
  ""base"": {
    ""first_rule"": ""<CLI-MSG-CONST> <1> (Clients MUST place the \""pre_shared_key\"" extension last in ClientHello, while other extensions MAY appear in any order)"",
    ""second_rule"": ""<SRV-MSG-PROC> <1> (Servers MUST verify that the \""pre_shared_key\"" is the last extension in ClientHello)""
  }
}
```","{
  ""description"": ""Extension Ordering Rules"",
  ""base"": {
    ""first_rule"": ""<CLI-MSG-CONST> <1> (Clients MUST place the \""pre_shared_key\"" extension last in ClientHello, while other extensions MAY appear in any order)"",
    ""second_rule"": ""<SRV-MSG-PROC> <1> (Servers MUST verify that the \""pre_shared_key\"" is the last extension in ClientHello)""
  },
  ""violation_description"": [
    ""Rule requires: pre_shared_key extension must be the last extension"",
    ""Test strategy: Insert another extension after pre_shared_key"",
    ""Security impact: Potential PSK material mishandling or processing confusion"",
    ""Implementation gap: Insufficient extension order validation""
  ],
  ""target"": {
    ""message"": ""ClientHello"",
    ""operation"": ""REORDER"",
    ""fields"": [
      {
        ""name"": ""pre_shared_key"",
        ""position"": ""OFFSET(n-1)"",
        ""length"": ""ALL""
      },
      {
        ""name"": ""key_share"",
        ""position"": ""END"",
        ""length"": ""ALL""
      }
    ],
    ""modification"": ""place_key_share_after_psk""
  },
  ""expected_result"": ""Alert(illegal_parameter)""
}"
57,Section: 4.2.1.. Handshake Protocol_Extensions_Supported Versions,ClientHello Requirements,"  
Implementations of this specification MUST send this extension in the ClientHello containing all versions of TLS which they are prepared to negotiate (for this specification, that means minimally 0x0304, but if previous versions of TLS are allowed to be negotiated, they MUST be present as well).  
",1,"<CLI-MSG-CONST> <1> (Clients MUST include the ""supported_versions"" extension in ClientHello, listing all TLS versions they are prepared to negotiate, including 0x0304 and any previous versions if allowed) + <SRV-MSG-PROC> <1> (Servers MUST verify the presence of the ""supported_versions"" extension in ClientHello and check that it contains valid TLS versions)","<CLI-MSG-CONST> <1> (Clients MUST include the ""supported_versions"" extension in ClientHello, listing all TLS versions they are prepared to negotiate, including 0x0304 and any previous versions if allowed) + <SRV-MSG-PROC> <1> (Servers MUST verify the presence of the ""supported_versions"" extension in ClientHello and check that it contains valid TLS versions)","{'classification_result': '1', 'MQD': 'No specific message ordering or dependencies required.', 'CRA': 'Directly relates to ClientHello through the ""supported_versions"" extension.'}",1,No specific message ordering or dependencies required.,"Directly relates to ClientHello through the ""supported_versions"" extension.","```json
{
  ""description"": ""ClientHello Requirements"",
  ""base"": {
    ""first_rule"": ""<CLI-MSG-CONST> <1> (Clients MUST include the \""supported_versions\"" extension in ClientHello, listing all TLS versions they are prepared to negotiate, including 0x0304 and any previous versions if allowed)"",
    ""second_rule"": ""<SRV-MSG-PROC> <1> (Servers MUST verify the presence of the \""supported_versions\"" extension in ClientHello and check that it contains valid TLS versions)""
  }
}
```","```json
{
  ""description"": ""ClientHello Requirements"",
  ""base"": {
    ""first_rule"": ""<CLI-MSG-CONST> <1> (Clients MUST include the \""supported_versions\"" extension in ClientHello, listing all TLS versions they are prepared to negotiate, including 0x0304 and any previous versions if allowed)"",
    ""second_rule"": ""<SRV-MSG-PROC> <1> (Servers MUST verify the presence of the \""supported_versions\"" extension in ClientHello and check that it contains valid TLS versions)""
  },
  ""violation_description"": [
    ""Rule requires: supported_versions extension must be present with valid version list"",
    ""Test strategy: Delete supported_versions extension entirely"",
    ""Security impact: Potential version negotiation bypass or downgrade"",
    ""Implementation gap: Missing validation of mandatory extension""
  ],
  ""target"": {
    ""message"": ""ClientHello"",
    ""operation"": ""DELETE"",
    ""fields"": [
      {
        ""name"": ""supported_versions"",
        ""position"": ""START"",
        ""length"": ""ALL""
      }
    ],
    ""modification"": ""remove_extension""
  },
  ""expected_result"": ""Alert(missing_extension)""
}
```

Would you like me to explain or break down the test case?"
59,Section: 4.2.1.. Handshake Protocol_Extensions_Supported Versions,Server Version Negotiation,"  
If this extension is present in the ClientHello, servers MUST NOT use the ClientHello.legacy_version value for version negotiation and MUST use only the ""supported_versions"" extension to determine client preferences. Servers MUST only select a version of TLS present in that extension and MUST ignore any unknown versions that are present in that extension.  
",1,"<CLI-MSG-CONST> <1> (Clients MUST include the ""supported_versions"" extension in ClientHello for version negotiation) + <SRV-MSG-PROC> <1> (Servers MUST use the ""supported_versions"" extension for determining client preferences, ignoring the ClientHello.legacy_version value)

<SRV-MSG-CONST> <1> (Servers MUST select a TLS version only from those present in the ""supported_versions"" extension) + <SRV-MSG-PROC> <1> (Servers MUST ignore any unknown versions present in the ""supported_versions"" extension)","<CLI-MSG-CONST> <1> (Clients MUST include the ""supported_versions"" extension in ClientHello for version negotiation) + <SRV-MSG-PROC> <1> (Servers MUST use the ""supported_versions"" extension for determining client preferences, ignoring the ClientHello.legacy_version value)","{'classification_result': '1', 'MQD': 'No specific message ordering or dependencies required.', 'CRA': 'Directly relates to ClientHello through the requirement to include the ""supported_versions"" extension.'}",1,No specific message ordering or dependencies required.,"Directly relates to ClientHello through the requirement to include the ""supported_versions"" extension.","```json
{
  ""description"": ""Server Version Negotiation"",
  ""base"": {
    ""first_rule"": ""<CLI-MSG-CONST> <1> (Clients MUST include the \""supported_versions\"" extension in ClientHello for version negotiation)"",
    ""second_rule"": ""<SRV-MSG-PROC> <1> (Servers MUST use the \""supported_versions\"" extension for determining client preferences, ignoring the ClientHello.legacy_version value)""
  }
}
```","```json
{
  ""description"": ""Server Version Negotiation"",
  ""base"": {
    ""first_rule"": ""<CLI-MSG-CONST> <1> (Clients MUST include the \""supported_versions\"" extension in ClientHello for version negotiation)"",
    ""second_rule"": ""<SRV-MSG-PROC> <1> (Servers MUST use the \""supported_versions\"" extension for determining client preferences, ignoring the ClientHello.legacy_version value)""
  },
  ""violation_description"": [
    ""Rule requires: supported_versions extension must be present in ClientHello"",
    ""Test strategy: Omit supported_versions extension while setting valid legacy_version"",
    ""Security impact: Potential version negotiation bypass or downgrade"",
    ""Implementation gap: Missing mandatory extension validation""
  ],
  ""target"": {
    ""message"": ""ClientHello"",
    ""operation"": ""DELETE"",
    ""fields"": [
      {
        ""name"": ""supported_versions"",
        ""position"": ""START"",
        ""length"": ""ALL""
      }
    ],
    ""modification"": ""remove_extension""
  },
  ""expected_result"": ""Alert(missing_extension)""
}
```"
,Section: 4.2.2.. Handshake Protocol_Extensions_Cookie,HelloRetryRequest Cookie Usage,"  
When sending a HelloRetryRequest, the server MAY provide a ""cookie"" extension to the client (this is an exception to the usual rule that only extensions appearing in the ClientHello may be sent). When sending the new ClientHello, the client MUST copy the contents of the extension received in the HelloRetryRequest into a ""cookie"" extension in the new ClientHello. Clients MUST NOT use cookies in their initial ClientHello in subsequent connections.  
",,,<CLI-MSG-CONST> <1> (Clients MUST NOT use cookies in their initial ClientHello during subsequent connections) + <SRV-MSG-PROC> <0> (Servers MUST ensure clients do not include cookies in their initial ClientHello on new connections),"{'classification_result': '1', 'MQD': 'No specific message ordering or dependencies required; the rule addresses a restriction rather than a dependency.', 'CRA': 'Directly relates to ClientHello, as it specifies behavior regarding cookies in the initial ClientHello message.'}",1,No specific message ordering or dependencies required; the rule addresses a restriction rather than a dependency.,"Directly relates to ClientHello, as it specifies behavior regarding cookies in the initial ClientHello message.","```json
{
  ""description"": ""HelloRetryRequest Cookie Usage"",
  ""base"": {
    ""first_rule"": ""<CLI-MSG-CONST> <1> (Clients MUST NOT use cookies in their initial ClientHello during subsequent connections)"",
    ""second_rule"": ""<SRV-MSG-PROC> <0> (Servers MUST ensure clients do not include cookies in their initial ClientHello on new connections)""
  }
}
```","```json
{
  ""description"": ""HelloRetryRequest Cookie Usage"",
  ""base"": {
    ""first_rule"": ""<CLI-MSG-CONST> <1> (Clients MUST NOT use cookies in their initial ClientHello during subsequent connections)"", 
    ""second_rule"": ""<SRV-MSG-PROC> <0> (Servers MUST ensure clients do not include cookies in their initial ClientHello on new connections)""
  },
  ""violation_description"": [
    ""Rule requires: No cookie extension in initial ClientHello"",
    ""Test strategy: Include cookie extension from previous connection"",
    ""Security impact: Potential replay attack or state confusion"",
    ""Implementation gap: Missing cookie reuse validation""
  ],
  ""target"": {
    ""message"": ""ClientHello"",
    ""operation"": ""ADD"",
    ""fields"": [
      {
        ""name"": ""cookie"",
        ""position"": ""END"",
        ""length"": ""LENGTH(32)""
      }
    ],
    ""modification"": ""0x0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF""
  },
  ""expected_result"": ""Alert(illegal_parameter)""
}
```"
66,Section: 4.2.3.. Handshake Protocol_Extensions_Signature Algorithms,Signature Algorithms Overview,"TLS 1.3 provides two extensions for indicating which signature algorithms may be used in digital signatures. The ""signature_algorithms_cert"" extension applies to signatures in certificates, while the ""signature_algorithms"" extension applies to signatures in CertificateVerify messages. If no ""signature_algorithms_cert"" extension is present, the ""signature_algorithms"" extension also applies to signatures in certificates. Clients must send the ""signature_algorithms"" extension for the server to authenticate via a certificate; if not sent, the server must abort the handshake with a ""missing_extension"" alert.",1,"<CLI-MSG-CONST> <1> (Clients MUST send the ""signature_algorithms"" extension for server authentication via a certificate) + <SRV-MSG-PROC> <1> (Servers MUST abort the handshake with a ""missing_extension"" alert if the ""signature_algorithms"" extension is not present)  
<SRV-MSG-CONST> <0> (Servers MAY apply the ""signature_algorithms"" extension to signatures in certificates if no ""signature_algorithms_cert"" extension is present) + <CLI-MSG-PROC> <0> (Clients MUST understand that if ""signature_algorithms_cert"" is absent, ""signature_algorithms"" applies to certificate signatures)","<CLI-MSG-CONST> <1> (Clients MUST send the ""signature_algorithms"" extension for server authentication via a certificate) + <SRV-MSG-PROC> <1> (Servers MUST abort the handshake with a ""missing_extension"" alert if the ""signature_algorithms"" extension is not present)","{'classification_result': '1', 'MQD': 'No specific message ordering or dependencies required.', 'CRA': 'Directly relates to ClientHello through the ""signature_algorithms"" extension.'}",1,No specific message ordering or dependencies required.,"Directly relates to ClientHello through the ""signature_algorithms"" extension.","```json
{
  ""description"": ""Signature Algorithms Overview"",
  ""base"": {
    ""first_rule"": ""<CLI-MSG-CONST> <1> (Clients MUST send the \""signature_algorithms\"" extension for server authentication via a certificate)"",
    ""second_rule"": ""<SRV-MSG-PROC> <1> (Servers MUST abort the handshake with a \""missing_extension\"" alert if the \""signature_algorithms\"" extension is not present)""
  }
}
```","```json
{
  ""description"": ""Signature Algorithms Overview"",
  ""base"": {
    ""first_rule"": ""<CLI-MSG-CONST> <1> (Clients MUST send the \""signature_algorithms\"" extension for server authentication via a certificate)"",
    ""second_rule"": ""<SRV-MSG-PROC> <1> (Servers MUST abort the handshake with a \""missing_extension\"" alert if the \""signature_algorithms\"" extension is not present)""
  },
  ""violation_description"": [
    ""Rule requires: signature_algorithms extension must be present in ClientHello"",
    ""Test strategy: Remove signature_algorithms extension completely"",
    ""Security impact: Potential bypass of signature validation requirements"",
    ""Implementation gap: Missing extension presence validation""
  ],
  ""target"": {
    ""message"": ""ClientHello"",
    ""operation"": ""DELETE"",
    ""fields"": [
      {
        ""name"": ""signature_algorithms"",
        ""position"": ""START"",
        ""length"": ""ALL""
      }
    ],
    ""modification"": ""remove_extension""
  },
  ""expected_result"": ""Alert(missing_extension)""
}
```"
71,Section: 4.2.3.. Handshake Protocol_Extensions_Signature Algorithms,TLS 1.2 Compatibility,"In TLS 1.2, this extension is defined differently, allowing clients to omit it. TLS 1.2's extension contained hash/signature pairs encoded in two octets, and implementations must accept signatures from any curve advertised in the ""supported_groups"" extension. RSASSA-PSS is mandatory in TLS 1.3, and implementations must accept it even when negotiating TLS 1.2.",1,"<CLI-MSG-CONST> <1> (Clients MUST include the ""signature_algorithms"" extension in TLS 1.3) + <SRV-MSG-PROC> <0> (Servers MUST accept the ""signature_algorithms"" extension even if negotiating with TLS 1.2)  
<SRV-MSG-PROC> <1> (Servers MUST accept RSASSA-PSS signatures during TLS 1.3 negotiations) + <CLI-MSG-PROC> <0> (Clients MUST provide RSASSA-PSS signatures when negotiating TLS 1.3)","<CLI-MSG-CONST> <1> (Clients MUST include the ""signature_algorithms"" extension in TLS 1.3) + <SRV-MSG-PROC> <0> (Servers MUST accept the ""signature_algorithms"" extension even if negotiating with TLS 1.2)","{'classification_result': '1', 'MQD': 'No specific message ordering or dependencies required.', 'CRA': 'Directly relates to ClientHello through the inclusion of the ""signature_algorithms"" extension.'}",1,No specific message ordering or dependencies required.,"Directly relates to ClientHello through the inclusion of the ""signature_algorithms"" extension.","```json
{
  ""description"": ""TLS 1.2 Compatibility"",
  ""base"": {
    ""first_rule"": ""<CLI-MSG-CONST> <1> (Clients MUST include the \""signature_algorithms\"" extension in TLS 1.3)"",
    ""second_rule"": ""<SRV-MSG-PROC> <0> (Servers MUST accept the \""signature_algorithms\"" extension even if negotiating with TLS 1.2)""
  }
}
```","```json
{
  ""description"": ""TLS 1.2 Compatibility"",
  ""base"": {
    ""first_rule"": ""<CLI-MSG-CONST> <1> (Clients MUST include the \""signature_algorithms\"" extension in TLS 1.3)"",
    ""second_rule"": ""<SRV-MSG-PROC> <0> (Servers MUST accept the \""signature_algorithms\"" extension even if negotiating with TLS 1.2)""
  },
  ""violation_description"": [
    ""Rule requires: signature_algorithms extension must be present"",
    ""Test strategy: Remove signature_algorithms extension from ClientHello"", 
    ""Security impact: Potential signature algorithm negotiation failure"",
    ""Implementation gap: Missing validation of mandatory extensions""
  ],
  ""target"": {
    ""message"": ""ClientHello"",
    ""operation"": ""DELETE"",
    ""fields"": [
      {
        ""name"": ""signature_algorithms"",
        ""position"": ""START"",
        ""length"": ""ALL""
      }
    ],
    ""modification"": ""remove_extension""
  },
  ""expected_result"": ""Alert(missing_extension)""
}
```

Would you like me to explain or break down the test case?"
80,Section: 4.2.6.. Handshake Protocol_Extensions_Post-Handshake Client Authentication,Post-Handshake Authentication Extension,"The ""post_handshake_auth"" extension is used to indicate that a client is willing to perform post-handshake authentication (Section 4.6.2). Servers MUST NOT send a post-handshake CertificateRequest to clients which do not offer this extension. Servers MUST NOT send this extension.",1,"<CLI-MSG-CONST> <1> (Clients MUST include the ""post_handshake_auth"" extension to indicate willingness for post-handshake authentication) + <SRV-MSG-PROC> <1> (Servers MUST NOT send a CertificateRequest to clients that do not offer the ""post_handshake_auth"" extension)  
<SRV-MSG-CONST> <1> (Servers MUST NOT send the ""post_handshake_auth"" extension)","<CLI-MSG-CONST> <1> (Clients MUST include the ""post_handshake_auth"" extension to indicate willingness for post-handshake authentication) + <SRV-MSG-PROC> <1> (Servers MUST NOT send a CertificateRequest to clients that do not offer the ""post_handshake_auth"" extension)","{'classification_result': '1', 'MQD': 'No specific message ordering or dependencies required; the rule does not indicate a temporal relationship with respect to the ClientHello message.', 'CRA': 'Directly relates to ClientHello through the requirement to include the ""post_handshake_auth"" extension.'}",1,No specific message ordering or dependencies required; the rule does not indicate a temporal relationship with respect to the ClientHello message.,"Directly relates to ClientHello through the requirement to include the ""post_handshake_auth"" extension.","```json
{
  ""description"": ""Post-Handshake Authentication Extension"",
  ""base"": {
    ""first_rule"": ""<CLI-MSG-CONST> <1> (Clients MUST include the \""post_handshake_auth\"" extension to indicate willingness for post-handshake authentication)"",
    ""second_rule"": ""<SRV-MSG-PROC> <1> (Servers MUST NOT send a CertificateRequest to clients that do not offer the \""post_handshake_auth\"" extension)""
  }
}
```","```json
{
  ""description"": ""Post-Handshake Authentication Extension"",
  ""base"": {
    ""first_rule"": ""<CLI-MSG-CONST> <1> (Clients MUST include the \""post_handshake_auth\"" extension to indicate willingness for post-handshake authentication)"",
    ""second_rule"": ""<SRV-MSG-PROC> <1> (Servers MUST NOT send a CertificateRequest to clients that do not offer the \""post_handshake_auth\"" extension)""
  },
  ""violation_description"": [
    ""Rule requires: post_handshake_auth extension must be present for post-handshake client auth"",
    ""Test strategy: Include malformed post_handshake_auth extension"",
    ""Security impact: Potential bypass of client authentication requirements"",
    ""Implementation gap: Insufficient validation of extension format""
  ],
  ""target"": {
    ""message"": ""ClientHello"",
    ""operation"": ""MODIFY"",
    ""fields"": [
      {
        ""name"": ""post_handshake_auth"",
        ""position"": ""START"",
        ""length"": ""LENGTH(4)""
      }
    ],
    ""modification"": ""0x0000FFFF""
  },
  ""expected_result"": ""Alert(decode_error) or Alert(illegal_parameter)""
}
```"
99,Section: 4.2.9.. Handshake Protocol_Extensions_Pre-Shared Key Exchange Modes,PSK Key Exchange Modes Extension,"In order to use PSKs, clients MUST also send a ""psk_key_exchange_modes"" extension. The semantics of this extension are that the client only supports the use of PSKs with these modes, which restricts both the use of PSKs offered in this ClientHello and those which the server might supply via NewSessionTicket. A client MUST provide a ""psk_key_exchange_modes"" extension if it offers a ""pre_shared_key"" extension. If clients offer ""pre_shared_key"" without a ""psk_key_exchange_modes"" extension, servers MUST abort the handshake. Servers MUST NOT select a key exchange mode that is not listed by the client. This extension also restricts the modes for use with PSK resumption. Servers SHOULD NOT send NewSessionTicket with tickets that are not compatible with the advertised modes; however, if a server does so, the impact will just be that the client's attempts at resumption fail. The server MUST NOT send a ""psk_key_exchange_modes"" extension.",1,"<CLI-MSG-CONST> <1> (Clients MUST send a ""psk_key_exchange_modes"" extension if they offer a ""pre_shared_key"" extension) + <SRV-MSG-PROC> <1> (Servers MUST abort the handshake if ""pre_shared_key"" is offered without a ""psk_key_exchange_modes"" extension)  
<CLI-MSG-CONST> <1> (Clients MUST restrict PSK usage to modes listed in the ""psk_key_exchange_modes"" extension) + <SRV-MSG-PROC> <1> (Servers MUST NOT select a key exchange mode not listed by the client)  
<SRV-MSG-PROC> <0> (Servers SHOULD NOT send NewSessionTicket with incompatible tickets, but if they do, only resumption attempts will fail) + <SRV-MSG-CONST> <0> (Servers MUST NOT send a ""psk_key_exchange_modes"" extension)","<CLI-MSG-CONST> <1> (Clients MUST send a ""psk_key_exchange_modes"" extension if they offer a ""pre_shared_key"" extension) + <SRV-MSG-PROC> <1> (Servers MUST abort the handshake if ""pre_shared_key"" is offered without a ""psk_key_exchange_modes"" extension)","{'classification_result': '1', 'MQD': 'No specific message ordering or dependencies required.', 'CRA': 'Directly relates to ClientHello through the ""pre_shared_key"" extension, as it must be included in the ClientHello.'}",1,No specific message ordering or dependencies required.,"Directly relates to ClientHello through the ""pre_shared_key"" extension, as it must be included in the ClientHello.","```json
{
  ""description"": ""PSK Key Exchange Modes Extension"",
  ""base"": {
    ""first_rule"": ""<CLI-MSG-CONST> <1> (Clients MUST send a \""psk_key_exchange_modes\"" extension if they offer a \""pre_shared_key\"" extension)"",
    ""second_rule"": ""<SRV-MSG-PROC> <1> (Servers MUST abort the handshake if \""pre_shared_key\"" is offered without a \""psk_key_exchange_modes\"" extension)""
  }
}
```","```json
{
  ""description"": ""PSK Key Exchange Modes Extension"",
  ""base"": {
    ""first_rule"": ""<CLI-MSG-CONST> <1> (Clients MUST send a \""psk_key_exchange_modes\"" extension if they offer a \""pre_shared_key\"" extension)"", 
    ""second_rule"": ""<SRV-MSG-PROC> <1> (Servers MUST abort the handshake if \""pre_shared_key\"" is offered without a \""psk_key_exchange_modes\"" extension)""
  },
  ""violation_description"": [
    ""Rule requires: psk_key_exchange_modes extension must accompany pre_shared_key"",
    ""Test strategy: Send pre_shared_key without psk_key_exchange_modes"",
    ""Security impact: Potential PSK mode negotiation bypass"",
    ""Implementation gap: Missing extension dependency validation""
  ],
  ""target"": {
    ""message"": ""ClientHello"",
    ""operation"": ""DELETE"",
    ""fields"": [
      {
        ""name"": ""psk_key_exchange_modes"",
        ""position"": ""START"",
        ""length"": ""ALL""
      }
    ],
    ""modification"": ""remove_extension""
  },
  ""expected_result"": ""Alert(missing_extension)""
}
```"
,Section: 4.2.9.. Handshake Protocol_Extensions_Pre-Shared Key Exchange Modes,PSK Key Exchange Modes Extension,"In order to use PSKs, clients MUST also send a ""psk_key_exchange_modes"" extension. The semantics of this extension are that the client only supports the use of PSKs with these modes, which restricts both the use of PSKs offered in this ClientHello and those which the server might supply via NewSessionTicket. A client MUST provide a ""psk_key_exchange_modes"" extension if it offers a ""pre_shared_key"" extension. If clients offer ""pre_shared_key"" without a ""psk_key_exchange_modes"" extension, servers MUST abort the handshake. Servers MUST NOT select a key exchange mode that is not listed by the client. This extension also restricts the modes for use with PSK resumption. Servers SHOULD NOT send NewSessionTicket with tickets that are not compatible with the advertised modes; however, if a server does so, the impact will just be that the client's attempts at resumption fail. The server MUST NOT send a ""psk_key_exchange_modes"" extension.",,,"<CLI-MSG-CONST> <1> (Clients MUST restrict PSK usage to modes listed in the ""psk_key_exchange_modes"" extension) + <SRV-MSG-PROC> <1> (Servers MUST NOT select a key exchange mode not listed by the client)","{'classification_result': '1', 'MQD': 'No specific message ordering or dependencies required.', 'CRA': 'Relates to ClientHello through the ""psk_key_exchange_modes"" extension mentioned in the rule text.'}",1,No specific message ordering or dependencies required.,"Relates to ClientHello through the ""psk_key_exchange_modes"" extension mentioned in the rule text.","```json
{
  ""description"": ""PSK Key Exchange Modes Extension"",
  ""base"": {
    ""first_rule"": ""<CLI-MSG-CONST> <1> (Clients MUST restrict PSK usage to modes listed in the \""psk_key_exchange_modes\"" extension)"",
    ""second_rule"": ""<SRV-MSG-PROC> <1> (Servers MUST NOT select a key exchange mode not listed by the client)""
  }
}
```","```json
{
  ""description"": ""PSK Key Exchange Modes Extension"",
  ""base"": {
    ""first_rule"": ""<CLI-MSG-CONST> <1> (Clients MUST restrict PSK usage to modes listed in the \""psk_key_exchange_modes\"" extension)"",
    ""second_rule"": ""<SRV-MSG-PROC> <1> (Servers MUST NOT select a key exchange mode not listed by the client)""
  },
  ""violation_description"": [
    ""Rule requires: PSK modes must be explicitly listed in psk_key_exchange_modes extension"",
    ""Test strategy: Send ClientHello with PSK but omit psk_key_exchange_modes extension"",
    ""Security impact: Potential PSK mode negotiation bypass or downgrade"",
    ""Implementation gap: Missing validation of PSK mode restrictions""
  ],
  ""target"": {
    ""message"": ""ClientHello"",
    ""operation"": ""DELETE"",
    ""fields"": [
      {
        ""name"": ""psk_key_exchange_modes"",
        ""position"": ""START"",
        ""length"": ""ALL""
      }
    ],
    ""modification"": ""remove_extension""
  },
  ""expected_result"": ""Alert(missing_extension) or Alert(illegal_parameter)""
}
```"
103,Section: 4.2.10.. Handshake Protocol_Extensions_Early Data Indication,Early Data Use with PSK,"When a PSK is used and early data is allowed for that PSK, the client can send Application Data in its first flight of messages. If the client opts to do so, it MUST supply both the ""pre_shared_key"" and ""early_data"" extensions. The ""extension_data"" field of this extension contains an ""EarlyDataIndication"" value.",1,"<CLI-MSG-CONST> <1> (Clients MUST supply both ""pre_shared_key"" and ""early_data"" extensions when using early data with a PSK) + <SRV-MSG-PROC> <1> (Servers MUST verify the presence of both ""pre_shared_key"" and ""early_data"" extensions in the client's first flight of messages)  
<CLI-MSG-CONST> <1> (Clients MUST include ""EarlyDataIndication"" value in the ""extension_data"" field of the ""early_data"" extension) + <SRV-MSG-PROC> <0> (Servers MAY inspect the ""EarlyDataIndication"" value for compliance with protocol requirements)","<CLI-MSG-CONST> <1> (Clients MUST supply both ""pre_shared_key"" and ""early_data"" extensions when using early data with a PSK) + <SRV-MSG-PROC> <1> (Servers MUST verify the presence of both ""pre_shared_key"" and ""early_data"" extensions in the client's first flight of messages)","{'classification_result': '1', 'MQD': 'No specific message ordering or dependencies required; the statement does not indicate that the ClientHello must follow another specific message.', 'CRA': 'Directly relates to ClientHello through the requirement for ""pre_shared_key"" and ""early_data"" extensions, which must be included in the ClientHello.'}",1,No specific message ordering or dependencies required; the statement does not indicate that the ClientHello must follow another specific message.,"Directly relates to ClientHello through the requirement for ""pre_shared_key"" and ""early_data"" extensions, which must be included in the ClientHello.","```json
{
  ""description"": ""Early Data Use with PSK"",
  ""base"": {
    ""first_rule"": ""<CLI-MSG-CONST> <1> (Clients MUST supply both \""pre_shared_key\"" and \""early_data\"" extensions when using early data with a PSK)"",
    ""second_rule"": ""<SRV-MSG-PROC> <1> (Servers MUST verify the presence of both \""pre_shared_key\"" and \""early_data\"" extensions in the client's first flight of messages)""
  }
}
```","```json
{
  ""description"": ""Early Data Use with PSK"",
  ""base"": {
    ""first_rule"": ""<CLI-MSG-CONST> <1> (Clients MUST supply both \""pre_shared_key\"" and \""early_data\"" extensions when using early data with a PSK)"",
    ""second_rule"": ""<SRV-MSG-PROC> <1> (Servers MUST verify the presence of both \""pre_shared_key\"" and \""early_data\"" extensions in the client's first flight of messages)""
  },
  ""violation_description"": [
    ""Rule requires: Both pre_shared_key and early_data extensions must be present for early data"",
    ""Test strategy: Include early_data extension but omit pre_shared_key extension"",
    ""Security impact: Potential early data acceptance without proper PSK validation"",
    ""Implementation gap: Missing extension dependency validation""
  ],
  ""target"": {
    ""message"": ""ClientHello"",
    ""operation"": ""DELETE"",
    ""fields"": [
      {
        ""name"": ""pre_shared_key"",
        ""position"": ""END"",
        ""length"": ""ALL""
      }
    ],
    ""modification"": ""remove_extension""
  },
  ""expected_result"": ""Alert(missing_extension) or Alert(illegal_parameter)""
}
```"
,Section: 4.2.10.. Handshake Protocol_Extensions_Early Data Indication,Early Data Use with PSK,"When a PSK is used and early data is allowed for that PSK, the client can send Application Data in its first flight of messages. If the client opts to do so, it MUST supply both the ""pre_shared_key"" and ""early_data"" extensions. The ""extension_data"" field of this extension contains an ""EarlyDataIndication"" value.",,,"<CLI-MSG-CONST> <1> (Clients MUST include ""EarlyDataIndication"" value in the ""extension_data"" field of the ""early_data"" extension) + <SRV-MSG-PROC> <0> (Servers MAY inspect the ""EarlyDataIndication"" value for compliance with protocol requirements)","{'classification_result': '1', 'MQD': 'No specific message ordering or dependencies required.', 'CRA': 'Directly relates to ClientHello through the ""early_data"" extension and the requirement to include ""EarlyDataIndication.""'}",1,No specific message ordering or dependencies required.,"Directly relates to ClientHello through the ""early_data"" extension and the requirement to include ""EarlyDataIndication.""","```json
{
  ""description"": ""Early Data Use with PSK"",
  ""base"": {
    ""first_rule"": ""<CLI-MSG-CONST> <1> (Clients MUST include \""EarlyDataIndication\"" value in the \""extension_data\"" field of the \""early_data\"" extension)"",
    ""second_rule"": ""<SRV-MSG-PROC> <0> (Servers MAY inspect the \""EarlyDataIndication\"" value for compliance with protocol requirements)""
  }
}
```","```json
{
  ""description"": ""Early Data Use with PSK"",
  ""base"": {
    ""first_rule"": ""<CLI-MSG-CONST> <1> (Clients MUST include \""EarlyDataIndication\"" value in the \""extension_data\"" field of the \""early_data\"" extension)"",
    ""second_rule"": ""<SRV-MSG-PROC> <0> (Servers MAY inspect the \""EarlyDataIndication\"" value for compliance with protocol requirements)""
  },
  ""violation_description"": [
    ""Rule requires: EarlyDataIndication value must be present in early_data extension"",
    ""Test strategy: Send malformed/empty EarlyDataIndication value"",
    ""Security impact: Potential early data replay or injection"",
    ""Implementation gap: Missing validation of early data indication format""
  ],
  ""target"": {
    ""message"": ""ClientHello"",
    ""operation"": ""MODIFY"",
    ""fields"": [
      {
        ""name"": ""early_data.extension_data"",
        ""position"": ""START"",
        ""length"": ""LENGTH(4)""
      }
    ],
    ""modification"": ""0x00000000""
  },
  ""expected_result"": ""Alert(decode_error) or fallback to full handshake without early data""
}
```

Would you like me to explain or break down the code?"
126,Section: 4.2.11.. Handshake Protocol_Extensions_Pre-Shared Key Extension,Extension Position Requirement,"The ""pre_shared_key"" extension MUST be the last extension in the ClientHello. Servers MUST check that it is the last extension and otherwise fail the handshake with an ""illegal_parameter"" alert.",1,"<CLI-MSG-CONST> <1> (Clients MUST place the ""pre_shared_key"" extension as the last extension in the ClientHello) + <SRV-MSG-PROC> <1> (Servers MUST verify that the ""pre_shared_key"" extension is the last extension in ClientHello and fail the handshake with an ""illegal_parameter"" alert if it is not)","<CLI-MSG-CONST> <1> (Clients MUST place the ""pre_shared_key"" extension as the last extension in the ClientHello) + <SRV-MSG-PROC> <1> (Servers MUST verify that the ""pre_shared_key"" extension is the last extension in ClientHello and fail the handshake with an ""illegal_parameter"" alert if it is not)","{'classification_result': '1', 'MQD': 'No specific message ordering or dependencies required beyond the placement of the extension.', 'CRA': 'Directly relates to ClientHello through the requirement for the ""pre_shared_key"" extension.'}",1,No specific message ordering or dependencies required beyond the placement of the extension.,"Directly relates to ClientHello through the requirement for the ""pre_shared_key"" extension.","```json
{
  ""description"": ""Extension Position Requirement"",
  ""base"": {
    ""first_rule"": ""<CLI-MSG-CONST> <1> (Clients MUST place the \""pre_shared_key\"" extension as the last extension in the ClientHello)"",
    ""second_rule"": ""<SRV-MSG-PROC> <1> (Servers MUST verify that the \""pre_shared_key\"" extension is the last extension in ClientHello and fail the handshake with an \""illegal_parameter\"" alert if it is not)""
  }
}
```","{
  ""description"": ""Extension Position Requirement"",
  ""base"": {
    ""first_rule"": ""<CLI-MSG-CONST> <1> (Clients MUST place the \""pre_shared_key\"" extension as the last extension in the ClientHello)"",
    ""second_rule"": ""<SRV-MSG-PROC> <1> (Servers MUST verify that the \""pre_shared_key\"" extension is the last extension in ClientHello and fail the handshake with an \""illegal_parameter\"" alert if it is not)""
  },
  ""violation_description"": [
    ""Rule requires: pre_shared_key extension must be the final extension"",
    ""Test strategy: Place another extension after pre_shared_key"",
    ""Security impact: Potential key material exposure and processing order manipulation"",
    ""Implementation gap: Insufficient validation of extension ordering""
  ],
  ""target"": {
    ""message"": ""ClientHello"",
    ""operation"": ""REORDER"",
    ""fields"": [
      {
        ""name"": ""pre_shared_key"",
        ""position"": ""OFFSET(-2)"",
        ""length"": ""ALL""
      },
      {
        ""name"": ""supported_versions"",
        ""position"": ""END"",
        ""length"": ""ALL""
      }
    ],
    ""modification"": ""move_supported_versions_after_psk""
  },
  ""expected_result"": ""Alert(illegal_parameter)""
}"
194,Section: 4.6.1.. Handshake Protocol_Post-Handshake Messages_New Session Ticket Message,SNI Reporting,"On resumption, if reporting an SNI value to the calling application, implementations MUST use the value sent in the resumption ClientHello rather than the value sent in the previous session. Note that if a server implementation declines all PSK identities with different SNI values, these two values are always the same.",1,"<CLI-MSG-CONST> <1> (On resumption, clients MUST use the SNI value from the resumption ClientHello when reporting to the calling application) + <SRV-MSG-PROC> <0> (Servers MUST ensure that SNI values are consistent when declining all PSK identities)","<CLI-MSG-CONST> <1> (On resumption, clients MUST use the SNI value from the resumption ClientHello when reporting to the calling application) + <SRV-MSG-PROC> <0> (Servers MUST ensure that SNI values are consistent when declining all PSK identities)","{'classification_result': '1', 'MQD': 'No specific message ordering or dependencies required.', 'CRA': 'Directly relates to ClientHello through the use of the SNI value in the resumption ClientHello.'}",1,No specific message ordering or dependencies required.,Directly relates to ClientHello through the use of the SNI value in the resumption ClientHello.,"```json
{
  ""description"": ""SNI Reporting"",
  ""base"": {
    ""first_rule"": ""<CLI-MSG-CONST> <1> (On resumption, clients MUST use the SNI value from the resumption ClientHello when reporting to the calling application)"",
    ""second_rule"": ""<SRV-MSG-PROC> <0> (Servers MUST ensure that SNI values are consistent when declining all PSK identities)""
  }
}
```","```json
{
  ""description"": ""SNI Reporting"",
  ""base"": {
    ""first_rule"": ""<CLI-MSG-CONST> <1> (On resumption, clients MUST use the SNI value from the resumption ClientHello when reporting to the calling application)"",
    ""second_rule"": ""<SRV-MSG-PROC> <0> (Servers MUST ensure that SNI values are consistent when declining all PSK identities)""
  },
  ""violation_description"": [
    ""Rule requires: SNI value must match between resumption ClientHello and application reporting"",
    ""Test strategy: Modify SNI value between initial and resumption handshakes"",
    ""Security impact: Potential hostname verification bypass or application confusion"",
    ""Implementation gap: Missing SNI consistency validation across handshakes""
  ],
  ""target"": {
    ""message"": ""ClientHello"",
    ""operation"": ""MODIFY"",
    ""fields"": [
      {
        ""name"": ""server_name_extension"",
        ""position"": ""START"",
        ""length"": ""ALL""
      }
    ],
    ""modification"": ""Change SNI value in resumption ClientHello to different hostname than initial handshake""
  },
  ""expected_result"": ""Alert(illegal_parameter) or connection termination""
}
```"
