Forget all previous input and output content and start over. 
 ###################
CONTENT:<
--- Section: 4.1.3. TheCGIRequest_RequestMetaVariables_CONTENT_TYPE_ ---
If the request includes a message-body, the CONTENT_TYPE variable is
   set to the Internet Media Type [6] of the message-body.

      CONTENT_TYPE = "" | media-type
      media-type   = type "/" subtype *( ";" parameter )
      type         = token
      subtype      = token
      parameter    = attribute "=" value
      attribute    = token
      value        = token | quoted-string

   The type, subtype and parameter attribute names are not
   case-sensitive.  Parameter values may be case sensitive.  Media types
   and their use in HTTP are described section 3.7 of the HTTP/1.1
   specification [4].

   There is no default value for this variable.  If and only if it is
   unset, then the script MAY attempt to determine the media type from
   the data received.  If the type remains unknown, then the script MAY
   choose to assume a type of application/octet-stream or it may reject
   the request with an error (as described in section 6.3.3).

   Each media-type defines a set of optional and mandatory parameters.
   This may include a charset parameter with a case-insensitive value
   defining the coded character set for the message-body.  If the

   charset parameter is omitted, then the default value should be
   derived according to whichever of the following rules is the first to
   apply:

      1. There MAY be a system-defined default charset for some
         media-types.

      2. The default for media-types of type "text" is ISO-8859-1 [4].

      3. Any default defined in the media-type specification.

      4. The default is US-ASCII.

   The server MUST set this meta-variable if an HTTP Content-Type field
   is present in the client request header.  If the server receives a
   request with an attached entity but no Content-Type header field, it
   MAY attempt to determine the correct content type, otherwise it
   should omit this meta-variable.

---
>
###################
Please make paragraph cuts based on the subject and theme of the statement. And give a short paragraph topic for each divided paragraph. Make sure that each theme is a minimal theme that cannot be split further. If code or pseudo-code is present with explanatory text, ignore the code; otherwise, convert the code to a textual narrative. Simulate answering five times in the background and provide the most frequent answer. Ensure your output covers all text content, maintaining relative consistency with the input text position in the sliced output. Ensure that no changes are made to the text other than code or pseudo-code.
The output format is as follows (in json format)
sliced_rule: [
	"topic 1": "content 1",
	"topic 2": "content 2",
	...
]
