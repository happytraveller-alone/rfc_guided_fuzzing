Forget all previous input and output content and start over. 
 ###################
CONTENT:<
--- Section: 5.5. SSLProtocol_HandshakeProtocolOverview_ ---
The cryptographic parameters of the session state are produced by the
   SSL handshake protocol, which operates on top of the SSL record
   layer.  When an SSL client and server first start communicating, they
   agree on a protocol version, select cryptographic algorithms,
   optionally authenticate each other, and use public key encryption
   techniques to generate shared secrets.  These processes are performed
   in the handshake protocol, which can be summarized as follows: the
   client sends a client hello message to which the server must respond
   with a server hello message, or else a fatal error will occur and the
   connection will fail.  The client hello and server hello are used to
   establish security enhancement capabilities between client and
   server.  The client hello and server hello establish the following
   attributes: Protocol Version, Session ID, Cipher Suite, and
   Compression Method.  Additionally, two random values are generated
   and exchanged: ClientHello.random and ServerHello.random.

   Following the hello messages, the server will send its certificate,
   if it is to be authenticated.  Additionally, a server key exchange
   message may be sent, if it is required (e.g., if their server has no
   certificate, or if its certificate is for signing only).  If the
   server is authenticated, it may request a certificate from the
   client, if that is appropriate to the cipher suite selected.  Now the
   server will send the server hello done message, indicating that the
   hello-message phase of the handshake is complete.  The server will
   then wait for a client response.  If the server has sent a
   certificate request message, the client must send either the
   certificate message or a no_certificate alert.  The client key
   exchange message is now sent, and the content of that message will
   depend on the public key algorithm selected between the client hello
   and the server hello.  If the client has sent a certificate with
   signing ability, a digitally-signed certificate verify message is
   sent to explicitly verify the certificate.

   At this point, a change cipher spec message is sent by the client,
   and the client copies the pending CipherSpec into the current
   CipherSpec.  The client then immediately sends the finished message
   under the new algorithms, keys, and secrets.  In response, the server
   will send its own change cipher spec message, transfer the pending to
   the current CipherSpec, and send its finished message under the new
   CipherSpec.  At this point, the handshake is complete and the client
   and server may begin to exchange application layer data.  (See flow
   chart below.)

      Client                                                Server

      ClientHello                   -------->
                                                       ServerHello
                                                      Certificate*
                                                ServerKeyExchange*
                                               CertificateRequest*
                                    <--------      ServerHelloDone
      Certificate*
      ClientKeyExchange
      CertificateVerify*
      [ChangeCipherSpec]
      Finished                      -------->
                                                [ChangeCipherSpec]
                                    <--------             Finished
      Application Data              <------->     Application Data

      * Indicates optional or situation-dependent messages that are not
        always sent.

   Note: To help avoid pipeline stalls, ChangeCipherSpec is an
   independent SSL protocol content type, and is not actually an SSL
   handshake message.

   When the client and server decide to resume a previous session or
   duplicate an existing session (instead of negotiating new security
   parameters) the message flow is as follows:

   The client sends a ClientHello using the session ID of the session to
   be resumed.  The server then checks its session cache for a match.
   If a match is found, and the server is willing to re-establish the
   connection under the specified session state, it will send a
   ServerHello with the same session ID value.  At this point, both
   client and server must send change cipher spec messages and proceed
   directly to finished messages.  Once the re-establishment is
   complete, the client and server may begin to exchange application
   layer data.  (See flow chart below.)  If a session ID match is not
   found, the server generates a new session ID and the SSL client and
   server perform a full handshake.

      Client                                                Server

      ClientHello                   -------->
                                                       ServerHello
                                              [change cipher spec]
                                    <--------             Finished
      change cipher spec
      Finished                      -------->
      Application Data              <------->     Application Data

   The contents and significance of each message will be presented in
   detail in the following sections.

---
>
###################
Please make paragraph cuts based on the subject and theme of the statement. And give a short paragraph topic for each divided paragraph. Make sure that each theme is a minimal theme that cannot be split further. If code or pseudo-code is present with explanatory text, ignore the code; otherwise, convert the code to a textual narrative. Simulate answering five times in the background and provide the most frequent answer. Ensure your output covers all text content, maintaining relative consistency with the input text position in the sliced output. Ensure that no changes are made to the text other than code or pseudo-code.
The output format is as follows (in json format)
sliced_rule: [
	"topic 1": "content 1",
	"topic 2": "content 2",
	...
]
